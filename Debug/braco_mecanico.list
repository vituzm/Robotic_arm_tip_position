
braco_mecanico.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c4  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
<<<<<<< HEAD
  1 .text         0000a0a0  080001d0  080001d0  000011d0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000628  0800a270  0800a270  0000b270  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800a898  0800a898  0000c1d4  2**0
                  CONTENTS
  4 .ARM          00000008  0800a898  0800a898  0000b898  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800a8a0  0800a8a0  0000c1d4  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800a8a0  0800a8a0  0000b8a0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  0800a8a4  0800a8a4  0000b8a4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         000001d4  20000000  0800a8a8  0000c000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000057c  200001d4  0800aa7c  0000c1d4  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000750  0800aa7c  0000c750  2**0
                  ALLOC
=======
<<<<<<< HEAD
  1 .text         0000a088  080001d0  080001d0  000011d0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000628  0800a258  0800a258  0000b258  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800a880  0800a880  0000c1d4  2**0
                  CONTENTS
  4 .ARM          00000008  0800a880  0800a880  0000b880  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800a888  0800a888  0000c1d4  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800a888  0800a888  0000b888  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  0800a88c  0800a88c  0000b88c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         000001d4  20000000  0800a890  0000c000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000057c  200001d4  0800aa64  0000c1d4  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000750  0800aa64  0000c750  2**0
=======
  1 .text         0000a198  080001d0  080001d0  000011d0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000628  0800a368  0800a368  0000b368  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800a990  0800a990  0000c1d4  2**0
                  CONTENTS
  4 .ARM          00000008  0800a990  0800a990  0000b990  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800a998  0800a998  0000c1d4  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800a998  0800a998  0000b998  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  0800a99c  0800a99c  0000b99c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         000001d4  20000000  0800a9a0  0000c000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000057c  200001d4  0800ab74  0000c1d4  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000750  0800ab74  0000c750  2**0
>>>>>>> 39e4d10438a821cc799a472af87a77c6796a1676
                  ALLOC
>>>>>>> ef0d341697957f8628c074acbc12bb9a12bbe146
 11 .ARM.attributes 00000030  00000000  00000000  0000c1d4  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000fb2b  00000000  00000000  0000c204  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000023ea  00000000  00000000  0001bd2f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000ec0  00000000  00000000  0001e120  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000b89  00000000  00000000  0001efe0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  000242d4  00000000  00000000  0001fb69  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
<<<<<<< HEAD
 17 .debug_line   00011c40  00000000  00000000  00043e3d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000dfef2  00000000  00000000  00055a7d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  0013596f  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000051ec  00000000  00000000  001359b4  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000040  00000000  00000000  0013aba0  2**0
=======
<<<<<<< HEAD
 17 .debug_line   00011c36  00000000  00000000  00043e3d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000dfeda  00000000  00000000  00055a73  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  0013594d  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000051ec  00000000  00000000  00135990  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000040  00000000  00000000  0013ab7c  2**0
=======
 17 .debug_line   00011c7f  00000000  00000000  00043e3d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000dfeda  00000000  00000000  00055abc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  00135996  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000051f0  00000000  00000000  001359dc  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000040  00000000  00000000  0013abcc  2**0
>>>>>>> 39e4d10438a821cc799a472af87a77c6796a1676
>>>>>>> ef0d341697957f8628c074acbc12bb9a12bbe146
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001d0 <__do_global_dtors_aux>:
 80001d0:	b510      	push	{r4, lr}
 80001d2:	4c05      	ldr	r4, [pc, #20]	@ (80001e8 <__do_global_dtors_aux+0x18>)
 80001d4:	7823      	ldrb	r3, [r4, #0]
 80001d6:	b933      	cbnz	r3, 80001e6 <__do_global_dtors_aux+0x16>
 80001d8:	4b04      	ldr	r3, [pc, #16]	@ (80001ec <__do_global_dtors_aux+0x1c>)
 80001da:	b113      	cbz	r3, 80001e2 <__do_global_dtors_aux+0x12>
 80001dc:	4804      	ldr	r0, [pc, #16]	@ (80001f0 <__do_global_dtors_aux+0x20>)
 80001de:	f3af 8000 	nop.w
 80001e2:	2301      	movs	r3, #1
 80001e4:	7023      	strb	r3, [r4, #0]
 80001e6:	bd10      	pop	{r4, pc}
 80001e8:	200001d4 	.word	0x200001d4
 80001ec:	00000000 	.word	0x00000000
<<<<<<< HEAD
 80001f0:	0800a258 	.word	0x0800a258
=======
<<<<<<< HEAD
 80001f0:	0800a240 	.word	0x0800a240
=======
 80001f0:	0800a350 	.word	0x0800a350
>>>>>>> 39e4d10438a821cc799a472af87a77c6796a1676
>>>>>>> ef0d341697957f8628c074acbc12bb9a12bbe146

080001f4 <frame_dummy>:
 80001f4:	b508      	push	{r3, lr}
 80001f6:	4b03      	ldr	r3, [pc, #12]	@ (8000204 <frame_dummy+0x10>)
 80001f8:	b11b      	cbz	r3, 8000202 <frame_dummy+0xe>
 80001fa:	4903      	ldr	r1, [pc, #12]	@ (8000208 <frame_dummy+0x14>)
 80001fc:	4803      	ldr	r0, [pc, #12]	@ (800020c <frame_dummy+0x18>)
 80001fe:	f3af 8000 	nop.w
 8000202:	bd08      	pop	{r3, pc}
 8000204:	00000000 	.word	0x00000000
 8000208:	200001d8 	.word	0x200001d8
<<<<<<< HEAD
 800020c:	0800a258 	.word	0x0800a258
=======
<<<<<<< HEAD
 800020c:	0800a240 	.word	0x0800a240
=======
 800020c:	0800a350 	.word	0x0800a350
>>>>>>> 39e4d10438a821cc799a472af87a77c6796a1676
>>>>>>> ef0d341697957f8628c074acbc12bb9a12bbe146

08000210 <memchr>:
 8000210:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 8000214:	2a10      	cmp	r2, #16
 8000216:	db2b      	blt.n	8000270 <memchr+0x60>
 8000218:	f010 0f07 	tst.w	r0, #7
 800021c:	d008      	beq.n	8000230 <memchr+0x20>
 800021e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000222:	3a01      	subs	r2, #1
 8000224:	428b      	cmp	r3, r1
 8000226:	d02d      	beq.n	8000284 <memchr+0x74>
 8000228:	f010 0f07 	tst.w	r0, #7
 800022c:	b342      	cbz	r2, 8000280 <memchr+0x70>
 800022e:	d1f6      	bne.n	800021e <memchr+0xe>
 8000230:	b4f0      	push	{r4, r5, r6, r7}
 8000232:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000236:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800023a:	f022 0407 	bic.w	r4, r2, #7
 800023e:	f07f 0700 	mvns.w	r7, #0
 8000242:	2300      	movs	r3, #0
 8000244:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000248:	3c08      	subs	r4, #8
 800024a:	ea85 0501 	eor.w	r5, r5, r1
 800024e:	ea86 0601 	eor.w	r6, r6, r1
 8000252:	fa85 f547 	uadd8	r5, r5, r7
 8000256:	faa3 f587 	sel	r5, r3, r7
 800025a:	fa86 f647 	uadd8	r6, r6, r7
 800025e:	faa5 f687 	sel	r6, r5, r7
 8000262:	b98e      	cbnz	r6, 8000288 <memchr+0x78>
 8000264:	d1ee      	bne.n	8000244 <memchr+0x34>
 8000266:	bcf0      	pop	{r4, r5, r6, r7}
 8000268:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800026c:	f002 0207 	and.w	r2, r2, #7
 8000270:	b132      	cbz	r2, 8000280 <memchr+0x70>
 8000272:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000276:	3a01      	subs	r2, #1
 8000278:	ea83 0301 	eor.w	r3, r3, r1
 800027c:	b113      	cbz	r3, 8000284 <memchr+0x74>
 800027e:	d1f8      	bne.n	8000272 <memchr+0x62>
 8000280:	2000      	movs	r0, #0
 8000282:	4770      	bx	lr
 8000284:	3801      	subs	r0, #1
 8000286:	4770      	bx	lr
 8000288:	2d00      	cmp	r5, #0
 800028a:	bf06      	itte	eq
 800028c:	4635      	moveq	r5, r6
 800028e:	3803      	subeq	r0, #3
 8000290:	3807      	subne	r0, #7
 8000292:	f015 0f01 	tst.w	r5, #1
 8000296:	d107      	bne.n	80002a8 <memchr+0x98>
 8000298:	3001      	adds	r0, #1
 800029a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800029e:	bf02      	ittt	eq
 80002a0:	3001      	addeq	r0, #1
 80002a2:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 80002a6:	3001      	addeq	r0, #1
 80002a8:	bcf0      	pop	{r4, r5, r6, r7}
 80002aa:	3801      	subs	r0, #1
 80002ac:	4770      	bx	lr
 80002ae:	bf00      	nop

080002b0 <strlen>:
 80002b0:	4603      	mov	r3, r0
 80002b2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80002b6:	2a00      	cmp	r2, #0
 80002b8:	d1fb      	bne.n	80002b2 <strlen+0x2>
 80002ba:	1a18      	subs	r0, r3, r0
 80002bc:	3801      	subs	r0, #1
 80002be:	4770      	bx	lr

080002c0 <__aeabi_drsub>:
 80002c0:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 80002c4:	e002      	b.n	80002cc <__adddf3>
 80002c6:	bf00      	nop

080002c8 <__aeabi_dsub>:
 80002c8:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

080002cc <__adddf3>:
 80002cc:	b530      	push	{r4, r5, lr}
 80002ce:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002d2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002d6:	ea94 0f05 	teq	r4, r5
 80002da:	bf08      	it	eq
 80002dc:	ea90 0f02 	teqeq	r0, r2
 80002e0:	bf1f      	itttt	ne
 80002e2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002e6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002ea:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002ee:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002f2:	f000 80e2 	beq.w	80004ba <__adddf3+0x1ee>
 80002f6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002fa:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002fe:	bfb8      	it	lt
 8000300:	426d      	neglt	r5, r5
 8000302:	dd0c      	ble.n	800031e <__adddf3+0x52>
 8000304:	442c      	add	r4, r5
 8000306:	ea80 0202 	eor.w	r2, r0, r2
 800030a:	ea81 0303 	eor.w	r3, r1, r3
 800030e:	ea82 0000 	eor.w	r0, r2, r0
 8000312:	ea83 0101 	eor.w	r1, r3, r1
 8000316:	ea80 0202 	eor.w	r2, r0, r2
 800031a:	ea81 0303 	eor.w	r3, r1, r3
 800031e:	2d36      	cmp	r5, #54	@ 0x36
 8000320:	bf88      	it	hi
 8000322:	bd30      	pophi	{r4, r5, pc}
 8000324:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000328:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800032c:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 8000330:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000334:	d002      	beq.n	800033c <__adddf3+0x70>
 8000336:	4240      	negs	r0, r0
 8000338:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800033c:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 8000340:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000344:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000348:	d002      	beq.n	8000350 <__adddf3+0x84>
 800034a:	4252      	negs	r2, r2
 800034c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000350:	ea94 0f05 	teq	r4, r5
 8000354:	f000 80a7 	beq.w	80004a6 <__adddf3+0x1da>
 8000358:	f1a4 0401 	sub.w	r4, r4, #1
 800035c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000360:	db0d      	blt.n	800037e <__adddf3+0xb2>
 8000362:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000366:	fa22 f205 	lsr.w	r2, r2, r5
 800036a:	1880      	adds	r0, r0, r2
 800036c:	f141 0100 	adc.w	r1, r1, #0
 8000370:	fa03 f20e 	lsl.w	r2, r3, lr
 8000374:	1880      	adds	r0, r0, r2
 8000376:	fa43 f305 	asr.w	r3, r3, r5
 800037a:	4159      	adcs	r1, r3
 800037c:	e00e      	b.n	800039c <__adddf3+0xd0>
 800037e:	f1a5 0520 	sub.w	r5, r5, #32
 8000382:	f10e 0e20 	add.w	lr, lr, #32
 8000386:	2a01      	cmp	r2, #1
 8000388:	fa03 fc0e 	lsl.w	ip, r3, lr
 800038c:	bf28      	it	cs
 800038e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000392:	fa43 f305 	asr.w	r3, r3, r5
 8000396:	18c0      	adds	r0, r0, r3
 8000398:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800039c:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80003a0:	d507      	bpl.n	80003b2 <__adddf3+0xe6>
 80003a2:	f04f 0e00 	mov.w	lr, #0
 80003a6:	f1dc 0c00 	rsbs	ip, ip, #0
 80003aa:	eb7e 0000 	sbcs.w	r0, lr, r0
 80003ae:	eb6e 0101 	sbc.w	r1, lr, r1
 80003b2:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 80003b6:	d31b      	bcc.n	80003f0 <__adddf3+0x124>
 80003b8:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 80003bc:	d30c      	bcc.n	80003d8 <__adddf3+0x10c>
 80003be:	0849      	lsrs	r1, r1, #1
 80003c0:	ea5f 0030 	movs.w	r0, r0, rrx
 80003c4:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80003c8:	f104 0401 	add.w	r4, r4, #1
 80003cc:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003d0:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 80003d4:	f080 809a 	bcs.w	800050c <__adddf3+0x240>
 80003d8:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 80003dc:	bf08      	it	eq
 80003de:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003e2:	f150 0000 	adcs.w	r0, r0, #0
 80003e6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003ea:	ea41 0105 	orr.w	r1, r1, r5
 80003ee:	bd30      	pop	{r4, r5, pc}
 80003f0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003f4:	4140      	adcs	r0, r0
 80003f6:	eb41 0101 	adc.w	r1, r1, r1
 80003fa:	3c01      	subs	r4, #1
 80003fc:	bf28      	it	cs
 80003fe:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 8000402:	d2e9      	bcs.n	80003d8 <__adddf3+0x10c>
 8000404:	f091 0f00 	teq	r1, #0
 8000408:	bf04      	itt	eq
 800040a:	4601      	moveq	r1, r0
 800040c:	2000      	moveq	r0, #0
 800040e:	fab1 f381 	clz	r3, r1
 8000412:	bf08      	it	eq
 8000414:	3320      	addeq	r3, #32
 8000416:	f1a3 030b 	sub.w	r3, r3, #11
 800041a:	f1b3 0220 	subs.w	r2, r3, #32
 800041e:	da0c      	bge.n	800043a <__adddf3+0x16e>
 8000420:	320c      	adds	r2, #12
 8000422:	dd08      	ble.n	8000436 <__adddf3+0x16a>
 8000424:	f102 0c14 	add.w	ip, r2, #20
 8000428:	f1c2 020c 	rsb	r2, r2, #12
 800042c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000430:	fa21 f102 	lsr.w	r1, r1, r2
 8000434:	e00c      	b.n	8000450 <__adddf3+0x184>
 8000436:	f102 0214 	add.w	r2, r2, #20
 800043a:	bfd8      	it	le
 800043c:	f1c2 0c20 	rsble	ip, r2, #32
 8000440:	fa01 f102 	lsl.w	r1, r1, r2
 8000444:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000448:	bfdc      	itt	le
 800044a:	ea41 010c 	orrle.w	r1, r1, ip
 800044e:	4090      	lslle	r0, r2
 8000450:	1ae4      	subs	r4, r4, r3
 8000452:	bfa2      	ittt	ge
 8000454:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000458:	4329      	orrge	r1, r5
 800045a:	bd30      	popge	{r4, r5, pc}
 800045c:	ea6f 0404 	mvn.w	r4, r4
 8000460:	3c1f      	subs	r4, #31
 8000462:	da1c      	bge.n	800049e <__adddf3+0x1d2>
 8000464:	340c      	adds	r4, #12
 8000466:	dc0e      	bgt.n	8000486 <__adddf3+0x1ba>
 8000468:	f104 0414 	add.w	r4, r4, #20
 800046c:	f1c4 0220 	rsb	r2, r4, #32
 8000470:	fa20 f004 	lsr.w	r0, r0, r4
 8000474:	fa01 f302 	lsl.w	r3, r1, r2
 8000478:	ea40 0003 	orr.w	r0, r0, r3
 800047c:	fa21 f304 	lsr.w	r3, r1, r4
 8000480:	ea45 0103 	orr.w	r1, r5, r3
 8000484:	bd30      	pop	{r4, r5, pc}
 8000486:	f1c4 040c 	rsb	r4, r4, #12
 800048a:	f1c4 0220 	rsb	r2, r4, #32
 800048e:	fa20 f002 	lsr.w	r0, r0, r2
 8000492:	fa01 f304 	lsl.w	r3, r1, r4
 8000496:	ea40 0003 	orr.w	r0, r0, r3
 800049a:	4629      	mov	r1, r5
 800049c:	bd30      	pop	{r4, r5, pc}
 800049e:	fa21 f004 	lsr.w	r0, r1, r4
 80004a2:	4629      	mov	r1, r5
 80004a4:	bd30      	pop	{r4, r5, pc}
 80004a6:	f094 0f00 	teq	r4, #0
 80004aa:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 80004ae:	bf06      	itte	eq
 80004b0:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 80004b4:	3401      	addeq	r4, #1
 80004b6:	3d01      	subne	r5, #1
 80004b8:	e74e      	b.n	8000358 <__adddf3+0x8c>
 80004ba:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004be:	bf18      	it	ne
 80004c0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80004c4:	d029      	beq.n	800051a <__adddf3+0x24e>
 80004c6:	ea94 0f05 	teq	r4, r5
 80004ca:	bf08      	it	eq
 80004cc:	ea90 0f02 	teqeq	r0, r2
 80004d0:	d005      	beq.n	80004de <__adddf3+0x212>
 80004d2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004d6:	bf04      	itt	eq
 80004d8:	4619      	moveq	r1, r3
 80004da:	4610      	moveq	r0, r2
 80004dc:	bd30      	pop	{r4, r5, pc}
 80004de:	ea91 0f03 	teq	r1, r3
 80004e2:	bf1e      	ittt	ne
 80004e4:	2100      	movne	r1, #0
 80004e6:	2000      	movne	r0, #0
 80004e8:	bd30      	popne	{r4, r5, pc}
 80004ea:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004ee:	d105      	bne.n	80004fc <__adddf3+0x230>
 80004f0:	0040      	lsls	r0, r0, #1
 80004f2:	4149      	adcs	r1, r1
 80004f4:	bf28      	it	cs
 80004f6:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 80004fa:	bd30      	pop	{r4, r5, pc}
 80004fc:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 8000500:	bf3c      	itt	cc
 8000502:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 8000506:	bd30      	popcc	{r4, r5, pc}
 8000508:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 800050c:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 8000510:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 8000514:	f04f 0000 	mov.w	r0, #0
 8000518:	bd30      	pop	{r4, r5, pc}
 800051a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800051e:	bf1a      	itte	ne
 8000520:	4619      	movne	r1, r3
 8000522:	4610      	movne	r0, r2
 8000524:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000528:	bf1c      	itt	ne
 800052a:	460b      	movne	r3, r1
 800052c:	4602      	movne	r2, r0
 800052e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000532:	bf06      	itte	eq
 8000534:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000538:	ea91 0f03 	teqeq	r1, r3
 800053c:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 8000540:	bd30      	pop	{r4, r5, pc}
 8000542:	bf00      	nop

08000544 <__aeabi_ui2d>:
 8000544:	f090 0f00 	teq	r0, #0
 8000548:	bf04      	itt	eq
 800054a:	2100      	moveq	r1, #0
 800054c:	4770      	bxeq	lr
 800054e:	b530      	push	{r4, r5, lr}
 8000550:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000554:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000558:	f04f 0500 	mov.w	r5, #0
 800055c:	f04f 0100 	mov.w	r1, #0
 8000560:	e750      	b.n	8000404 <__adddf3+0x138>
 8000562:	bf00      	nop

08000564 <__aeabi_i2d>:
 8000564:	f090 0f00 	teq	r0, #0
 8000568:	bf04      	itt	eq
 800056a:	2100      	moveq	r1, #0
 800056c:	4770      	bxeq	lr
 800056e:	b530      	push	{r4, r5, lr}
 8000570:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000574:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000578:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 800057c:	bf48      	it	mi
 800057e:	4240      	negmi	r0, r0
 8000580:	f04f 0100 	mov.w	r1, #0
 8000584:	e73e      	b.n	8000404 <__adddf3+0x138>
 8000586:	bf00      	nop

08000588 <__aeabi_f2d>:
 8000588:	0042      	lsls	r2, r0, #1
 800058a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800058e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000592:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000596:	bf1f      	itttt	ne
 8000598:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 800059c:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 80005a0:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 80005a4:	4770      	bxne	lr
 80005a6:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 80005aa:	bf08      	it	eq
 80005ac:	4770      	bxeq	lr
 80005ae:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 80005b2:	bf04      	itt	eq
 80005b4:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 80005b8:	4770      	bxeq	lr
 80005ba:	b530      	push	{r4, r5, lr}
 80005bc:	f44f 7460 	mov.w	r4, #896	@ 0x380
 80005c0:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80005c4:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 80005c8:	e71c      	b.n	8000404 <__adddf3+0x138>
 80005ca:	bf00      	nop

080005cc <__aeabi_ul2d>:
 80005cc:	ea50 0201 	orrs.w	r2, r0, r1
 80005d0:	bf08      	it	eq
 80005d2:	4770      	bxeq	lr
 80005d4:	b530      	push	{r4, r5, lr}
 80005d6:	f04f 0500 	mov.w	r5, #0
 80005da:	e00a      	b.n	80005f2 <__aeabi_l2d+0x16>

080005dc <__aeabi_l2d>:
 80005dc:	ea50 0201 	orrs.w	r2, r0, r1
 80005e0:	bf08      	it	eq
 80005e2:	4770      	bxeq	lr
 80005e4:	b530      	push	{r4, r5, lr}
 80005e6:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 80005ea:	d502      	bpl.n	80005f2 <__aeabi_l2d+0x16>
 80005ec:	4240      	negs	r0, r0
 80005ee:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005f2:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80005f6:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80005fa:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005fe:	f43f aed8 	beq.w	80003b2 <__adddf3+0xe6>
 8000602:	f04f 0203 	mov.w	r2, #3
 8000606:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800060a:	bf18      	it	ne
 800060c:	3203      	addne	r2, #3
 800060e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000612:	bf18      	it	ne
 8000614:	3203      	addne	r2, #3
 8000616:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800061a:	f1c2 0320 	rsb	r3, r2, #32
 800061e:	fa00 fc03 	lsl.w	ip, r0, r3
 8000622:	fa20 f002 	lsr.w	r0, r0, r2
 8000626:	fa01 fe03 	lsl.w	lr, r1, r3
 800062a:	ea40 000e 	orr.w	r0, r0, lr
 800062e:	fa21 f102 	lsr.w	r1, r1, r2
 8000632:	4414      	add	r4, r2
 8000634:	e6bd      	b.n	80003b2 <__adddf3+0xe6>
 8000636:	bf00      	nop

08000638 <__aeabi_dmul>:
 8000638:	b570      	push	{r4, r5, r6, lr}
 800063a:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 800063e:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000642:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000646:	bf1d      	ittte	ne
 8000648:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800064c:	ea94 0f0c 	teqne	r4, ip
 8000650:	ea95 0f0c 	teqne	r5, ip
 8000654:	f000 f8de 	bleq	8000814 <__aeabi_dmul+0x1dc>
 8000658:	442c      	add	r4, r5
 800065a:	ea81 0603 	eor.w	r6, r1, r3
 800065e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000662:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000666:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800066a:	bf18      	it	ne
 800066c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000670:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000674:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8000678:	d038      	beq.n	80006ec <__aeabi_dmul+0xb4>
 800067a:	fba0 ce02 	umull	ip, lr, r0, r2
 800067e:	f04f 0500 	mov.w	r5, #0
 8000682:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000686:	f006 4200 	and.w	r2, r6, #2147483648	@ 0x80000000
 800068a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800068e:	f04f 0600 	mov.w	r6, #0
 8000692:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000696:	f09c 0f00 	teq	ip, #0
 800069a:	bf18      	it	ne
 800069c:	f04e 0e01 	orrne.w	lr, lr, #1
 80006a0:	f1a4 04ff 	sub.w	r4, r4, #255	@ 0xff
 80006a4:	f5b6 7f00 	cmp.w	r6, #512	@ 0x200
 80006a8:	f564 7440 	sbc.w	r4, r4, #768	@ 0x300
 80006ac:	d204      	bcs.n	80006b8 <__aeabi_dmul+0x80>
 80006ae:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80006b2:	416d      	adcs	r5, r5
 80006b4:	eb46 0606 	adc.w	r6, r6, r6
 80006b8:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80006bc:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80006c0:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80006c4:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80006c8:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80006cc:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 80006d0:	bf88      	it	hi
 80006d2:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 80006d6:	d81e      	bhi.n	8000716 <__aeabi_dmul+0xde>
 80006d8:	f1be 4f00 	cmp.w	lr, #2147483648	@ 0x80000000
 80006dc:	bf08      	it	eq
 80006de:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006e2:	f150 0000 	adcs.w	r0, r0, #0
 80006e6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006ea:	bd70      	pop	{r4, r5, r6, pc}
 80006ec:	f006 4600 	and.w	r6, r6, #2147483648	@ 0x80000000
 80006f0:	ea46 0101 	orr.w	r1, r6, r1
 80006f4:	ea40 0002 	orr.w	r0, r0, r2
 80006f8:	ea81 0103 	eor.w	r1, r1, r3
 80006fc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000700:	bfc2      	ittt	gt
 8000702:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000706:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800070a:	bd70      	popgt	{r4, r5, r6, pc}
 800070c:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000710:	f04f 0e00 	mov.w	lr, #0
 8000714:	3c01      	subs	r4, #1
 8000716:	f300 80ab 	bgt.w	8000870 <__aeabi_dmul+0x238>
 800071a:	f114 0f36 	cmn.w	r4, #54	@ 0x36
 800071e:	bfde      	ittt	le
 8000720:	2000      	movle	r0, #0
 8000722:	f001 4100 	andle.w	r1, r1, #2147483648	@ 0x80000000
 8000726:	bd70      	pople	{r4, r5, r6, pc}
 8000728:	f1c4 0400 	rsb	r4, r4, #0
 800072c:	3c20      	subs	r4, #32
 800072e:	da35      	bge.n	800079c <__aeabi_dmul+0x164>
 8000730:	340c      	adds	r4, #12
 8000732:	dc1b      	bgt.n	800076c <__aeabi_dmul+0x134>
 8000734:	f104 0414 	add.w	r4, r4, #20
 8000738:	f1c4 0520 	rsb	r5, r4, #32
 800073c:	fa00 f305 	lsl.w	r3, r0, r5
 8000740:	fa20 f004 	lsr.w	r0, r0, r4
 8000744:	fa01 f205 	lsl.w	r2, r1, r5
 8000748:	ea40 0002 	orr.w	r0, r0, r2
 800074c:	f001 4200 	and.w	r2, r1, #2147483648	@ 0x80000000
 8000750:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000754:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000758:	fa21 f604 	lsr.w	r6, r1, r4
 800075c:	eb42 0106 	adc.w	r1, r2, r6
 8000760:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000764:	bf08      	it	eq
 8000766:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800076a:	bd70      	pop	{r4, r5, r6, pc}
 800076c:	f1c4 040c 	rsb	r4, r4, #12
 8000770:	f1c4 0520 	rsb	r5, r4, #32
 8000774:	fa00 f304 	lsl.w	r3, r0, r4
 8000778:	fa20 f005 	lsr.w	r0, r0, r5
 800077c:	fa01 f204 	lsl.w	r2, r1, r4
 8000780:	ea40 0002 	orr.w	r0, r0, r2
 8000784:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000788:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800078c:	f141 0100 	adc.w	r1, r1, #0
 8000790:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000794:	bf08      	it	eq
 8000796:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800079a:	bd70      	pop	{r4, r5, r6, pc}
 800079c:	f1c4 0520 	rsb	r5, r4, #32
 80007a0:	fa00 f205 	lsl.w	r2, r0, r5
 80007a4:	ea4e 0e02 	orr.w	lr, lr, r2
 80007a8:	fa20 f304 	lsr.w	r3, r0, r4
 80007ac:	fa01 f205 	lsl.w	r2, r1, r5
 80007b0:	ea43 0302 	orr.w	r3, r3, r2
 80007b4:	fa21 f004 	lsr.w	r0, r1, r4
 80007b8:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80007bc:	fa21 f204 	lsr.w	r2, r1, r4
 80007c0:	ea20 0002 	bic.w	r0, r0, r2
 80007c4:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80007c8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007cc:	bf08      	it	eq
 80007ce:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007d2:	bd70      	pop	{r4, r5, r6, pc}
 80007d4:	f094 0f00 	teq	r4, #0
 80007d8:	d10f      	bne.n	80007fa <__aeabi_dmul+0x1c2>
 80007da:	f001 4600 	and.w	r6, r1, #2147483648	@ 0x80000000
 80007de:	0040      	lsls	r0, r0, #1
 80007e0:	eb41 0101 	adc.w	r1, r1, r1
 80007e4:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80007e8:	bf08      	it	eq
 80007ea:	3c01      	subeq	r4, #1
 80007ec:	d0f7      	beq.n	80007de <__aeabi_dmul+0x1a6>
 80007ee:	ea41 0106 	orr.w	r1, r1, r6
 80007f2:	f095 0f00 	teq	r5, #0
 80007f6:	bf18      	it	ne
 80007f8:	4770      	bxne	lr
 80007fa:	f003 4600 	and.w	r6, r3, #2147483648	@ 0x80000000
 80007fe:	0052      	lsls	r2, r2, #1
 8000800:	eb43 0303 	adc.w	r3, r3, r3
 8000804:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 8000808:	bf08      	it	eq
 800080a:	3d01      	subeq	r5, #1
 800080c:	d0f7      	beq.n	80007fe <__aeabi_dmul+0x1c6>
 800080e:	ea43 0306 	orr.w	r3, r3, r6
 8000812:	4770      	bx	lr
 8000814:	ea94 0f0c 	teq	r4, ip
 8000818:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800081c:	bf18      	it	ne
 800081e:	ea95 0f0c 	teqne	r5, ip
 8000822:	d00c      	beq.n	800083e <__aeabi_dmul+0x206>
 8000824:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000828:	bf18      	it	ne
 800082a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800082e:	d1d1      	bne.n	80007d4 <__aeabi_dmul+0x19c>
 8000830:	ea81 0103 	eor.w	r1, r1, r3
 8000834:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000838:	f04f 0000 	mov.w	r0, #0
 800083c:	bd70      	pop	{r4, r5, r6, pc}
 800083e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000842:	bf06      	itte	eq
 8000844:	4610      	moveq	r0, r2
 8000846:	4619      	moveq	r1, r3
 8000848:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800084c:	d019      	beq.n	8000882 <__aeabi_dmul+0x24a>
 800084e:	ea94 0f0c 	teq	r4, ip
 8000852:	d102      	bne.n	800085a <__aeabi_dmul+0x222>
 8000854:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000858:	d113      	bne.n	8000882 <__aeabi_dmul+0x24a>
 800085a:	ea95 0f0c 	teq	r5, ip
 800085e:	d105      	bne.n	800086c <__aeabi_dmul+0x234>
 8000860:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000864:	bf1c      	itt	ne
 8000866:	4610      	movne	r0, r2
 8000868:	4619      	movne	r1, r3
 800086a:	d10a      	bne.n	8000882 <__aeabi_dmul+0x24a>
 800086c:	ea81 0103 	eor.w	r1, r1, r3
 8000870:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000874:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000878:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800087c:	f04f 0000 	mov.w	r0, #0
 8000880:	bd70      	pop	{r4, r5, r6, pc}
 8000882:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000886:	f441 0178 	orr.w	r1, r1, #16252928	@ 0xf80000
 800088a:	bd70      	pop	{r4, r5, r6, pc}

0800088c <__aeabi_ddiv>:
 800088c:	b570      	push	{r4, r5, r6, lr}
 800088e:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000892:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000896:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800089a:	bf1d      	ittte	ne
 800089c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80008a0:	ea94 0f0c 	teqne	r4, ip
 80008a4:	ea95 0f0c 	teqne	r5, ip
 80008a8:	f000 f8a7 	bleq	80009fa <__aeabi_ddiv+0x16e>
 80008ac:	eba4 0405 	sub.w	r4, r4, r5
 80008b0:	ea81 0e03 	eor.w	lr, r1, r3
 80008b4:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008b8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80008bc:	f000 8088 	beq.w	80009d0 <__aeabi_ddiv+0x144>
 80008c0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80008c4:	f04f 5580 	mov.w	r5, #268435456	@ 0x10000000
 80008c8:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80008cc:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008d0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008d4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008d8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008dc:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008e0:	f00e 4100 	and.w	r1, lr, #2147483648	@ 0x80000000
 80008e4:	429d      	cmp	r5, r3
 80008e6:	bf08      	it	eq
 80008e8:	4296      	cmpeq	r6, r2
 80008ea:	f144 04fd 	adc.w	r4, r4, #253	@ 0xfd
 80008ee:	f504 7440 	add.w	r4, r4, #768	@ 0x300
 80008f2:	d202      	bcs.n	80008fa <__aeabi_ddiv+0x6e>
 80008f4:	085b      	lsrs	r3, r3, #1
 80008f6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008fa:	1ab6      	subs	r6, r6, r2
 80008fc:	eb65 0503 	sbc.w	r5, r5, r3
 8000900:	085b      	lsrs	r3, r3, #1
 8000902:	ea4f 0232 	mov.w	r2, r2, rrx
 8000906:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 800090a:	f44f 2c00 	mov.w	ip, #524288	@ 0x80000
 800090e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000912:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000916:	bf22      	ittt	cs
 8000918:	1ab6      	subcs	r6, r6, r2
 800091a:	4675      	movcs	r5, lr
 800091c:	ea40 000c 	orrcs.w	r0, r0, ip
 8000920:	085b      	lsrs	r3, r3, #1
 8000922:	ea4f 0232 	mov.w	r2, r2, rrx
 8000926:	ebb6 0e02 	subs.w	lr, r6, r2
 800092a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800092e:	bf22      	ittt	cs
 8000930:	1ab6      	subcs	r6, r6, r2
 8000932:	4675      	movcs	r5, lr
 8000934:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000938:	085b      	lsrs	r3, r3, #1
 800093a:	ea4f 0232 	mov.w	r2, r2, rrx
 800093e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000942:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000946:	bf22      	ittt	cs
 8000948:	1ab6      	subcs	r6, r6, r2
 800094a:	4675      	movcs	r5, lr
 800094c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000950:	085b      	lsrs	r3, r3, #1
 8000952:	ea4f 0232 	mov.w	r2, r2, rrx
 8000956:	ebb6 0e02 	subs.w	lr, r6, r2
 800095a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800095e:	bf22      	ittt	cs
 8000960:	1ab6      	subcs	r6, r6, r2
 8000962:	4675      	movcs	r5, lr
 8000964:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000968:	ea55 0e06 	orrs.w	lr, r5, r6
 800096c:	d018      	beq.n	80009a0 <__aeabi_ddiv+0x114>
 800096e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000972:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000976:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800097a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800097e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000982:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000986:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800098a:	d1c0      	bne.n	800090e <__aeabi_ddiv+0x82>
 800098c:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000990:	d10b      	bne.n	80009aa <__aeabi_ddiv+0x11e>
 8000992:	ea41 0100 	orr.w	r1, r1, r0
 8000996:	f04f 0000 	mov.w	r0, #0
 800099a:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 800099e:	e7b6      	b.n	800090e <__aeabi_ddiv+0x82>
 80009a0:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80009a4:	bf04      	itt	eq
 80009a6:	4301      	orreq	r1, r0
 80009a8:	2000      	moveq	r0, #0
 80009aa:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 80009ae:	bf88      	it	hi
 80009b0:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 80009b4:	f63f aeaf 	bhi.w	8000716 <__aeabi_dmul+0xde>
 80009b8:	ebb5 0c03 	subs.w	ip, r5, r3
 80009bc:	bf04      	itt	eq
 80009be:	ebb6 0c02 	subseq.w	ip, r6, r2
 80009c2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80009c6:	f150 0000 	adcs.w	r0, r0, #0
 80009ca:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80009ce:	bd70      	pop	{r4, r5, r6, pc}
 80009d0:	f00e 4e00 	and.w	lr, lr, #2147483648	@ 0x80000000
 80009d4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009d8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009dc:	bfc2      	ittt	gt
 80009de:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009e2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009e6:	bd70      	popgt	{r4, r5, r6, pc}
 80009e8:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80009ec:	f04f 0e00 	mov.w	lr, #0
 80009f0:	3c01      	subs	r4, #1
 80009f2:	e690      	b.n	8000716 <__aeabi_dmul+0xde>
 80009f4:	ea45 0e06 	orr.w	lr, r5, r6
 80009f8:	e68d      	b.n	8000716 <__aeabi_dmul+0xde>
 80009fa:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009fe:	ea94 0f0c 	teq	r4, ip
 8000a02:	bf08      	it	eq
 8000a04:	ea95 0f0c 	teqeq	r5, ip
 8000a08:	f43f af3b 	beq.w	8000882 <__aeabi_dmul+0x24a>
 8000a0c:	ea94 0f0c 	teq	r4, ip
 8000a10:	d10a      	bne.n	8000a28 <__aeabi_ddiv+0x19c>
 8000a12:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000a16:	f47f af34 	bne.w	8000882 <__aeabi_dmul+0x24a>
 8000a1a:	ea95 0f0c 	teq	r5, ip
 8000a1e:	f47f af25 	bne.w	800086c <__aeabi_dmul+0x234>
 8000a22:	4610      	mov	r0, r2
 8000a24:	4619      	mov	r1, r3
 8000a26:	e72c      	b.n	8000882 <__aeabi_dmul+0x24a>
 8000a28:	ea95 0f0c 	teq	r5, ip
 8000a2c:	d106      	bne.n	8000a3c <__aeabi_ddiv+0x1b0>
 8000a2e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a32:	f43f aefd 	beq.w	8000830 <__aeabi_dmul+0x1f8>
 8000a36:	4610      	mov	r0, r2
 8000a38:	4619      	mov	r1, r3
 8000a3a:	e722      	b.n	8000882 <__aeabi_dmul+0x24a>
 8000a3c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a40:	bf18      	it	ne
 8000a42:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a46:	f47f aec5 	bne.w	80007d4 <__aeabi_dmul+0x19c>
 8000a4a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a4e:	f47f af0d 	bne.w	800086c <__aeabi_dmul+0x234>
 8000a52:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a56:	f47f aeeb 	bne.w	8000830 <__aeabi_dmul+0x1f8>
 8000a5a:	e712      	b.n	8000882 <__aeabi_dmul+0x24a>

08000a5c <__gedf2>:
 8000a5c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a60:	e006      	b.n	8000a70 <__cmpdf2+0x4>
 8000a62:	bf00      	nop

08000a64 <__ledf2>:
 8000a64:	f04f 0c01 	mov.w	ip, #1
 8000a68:	e002      	b.n	8000a70 <__cmpdf2+0x4>
 8000a6a:	bf00      	nop

08000a6c <__cmpdf2>:
 8000a6c:	f04f 0c01 	mov.w	ip, #1
 8000a70:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a74:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a78:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a7c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a80:	bf18      	it	ne
 8000a82:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a86:	d01b      	beq.n	8000ac0 <__cmpdf2+0x54>
 8000a88:	b001      	add	sp, #4
 8000a8a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a8e:	bf0c      	ite	eq
 8000a90:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a94:	ea91 0f03 	teqne	r1, r3
 8000a98:	bf02      	ittt	eq
 8000a9a:	ea90 0f02 	teqeq	r0, r2
 8000a9e:	2000      	moveq	r0, #0
 8000aa0:	4770      	bxeq	lr
 8000aa2:	f110 0f00 	cmn.w	r0, #0
 8000aa6:	ea91 0f03 	teq	r1, r3
 8000aaa:	bf58      	it	pl
 8000aac:	4299      	cmppl	r1, r3
 8000aae:	bf08      	it	eq
 8000ab0:	4290      	cmpeq	r0, r2
 8000ab2:	bf2c      	ite	cs
 8000ab4:	17d8      	asrcs	r0, r3, #31
 8000ab6:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000aba:	f040 0001 	orr.w	r0, r0, #1
 8000abe:	4770      	bx	lr
 8000ac0:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000ac4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ac8:	d102      	bne.n	8000ad0 <__cmpdf2+0x64>
 8000aca:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000ace:	d107      	bne.n	8000ae0 <__cmpdf2+0x74>
 8000ad0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000ad4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ad8:	d1d6      	bne.n	8000a88 <__cmpdf2+0x1c>
 8000ada:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000ade:	d0d3      	beq.n	8000a88 <__cmpdf2+0x1c>
 8000ae0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000ae4:	4770      	bx	lr
 8000ae6:	bf00      	nop

08000ae8 <__aeabi_cdrcmple>:
 8000ae8:	4684      	mov	ip, r0
 8000aea:	4610      	mov	r0, r2
 8000aec:	4662      	mov	r2, ip
 8000aee:	468c      	mov	ip, r1
 8000af0:	4619      	mov	r1, r3
 8000af2:	4663      	mov	r3, ip
 8000af4:	e000      	b.n	8000af8 <__aeabi_cdcmpeq>
 8000af6:	bf00      	nop

08000af8 <__aeabi_cdcmpeq>:
 8000af8:	b501      	push	{r0, lr}
 8000afa:	f7ff ffb7 	bl	8000a6c <__cmpdf2>
 8000afe:	2800      	cmp	r0, #0
 8000b00:	bf48      	it	mi
 8000b02:	f110 0f00 	cmnmi.w	r0, #0
 8000b06:	bd01      	pop	{r0, pc}

08000b08 <__aeabi_dcmpeq>:
 8000b08:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b0c:	f7ff fff4 	bl	8000af8 <__aeabi_cdcmpeq>
 8000b10:	bf0c      	ite	eq
 8000b12:	2001      	moveq	r0, #1
 8000b14:	2000      	movne	r0, #0
 8000b16:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b1a:	bf00      	nop

08000b1c <__aeabi_dcmplt>:
 8000b1c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b20:	f7ff ffea 	bl	8000af8 <__aeabi_cdcmpeq>
 8000b24:	bf34      	ite	cc
 8000b26:	2001      	movcc	r0, #1
 8000b28:	2000      	movcs	r0, #0
 8000b2a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b2e:	bf00      	nop

08000b30 <__aeabi_dcmple>:
 8000b30:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b34:	f7ff ffe0 	bl	8000af8 <__aeabi_cdcmpeq>
 8000b38:	bf94      	ite	ls
 8000b3a:	2001      	movls	r0, #1
 8000b3c:	2000      	movhi	r0, #0
 8000b3e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b42:	bf00      	nop

08000b44 <__aeabi_dcmpge>:
 8000b44:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b48:	f7ff ffce 	bl	8000ae8 <__aeabi_cdrcmple>
 8000b4c:	bf94      	ite	ls
 8000b4e:	2001      	movls	r0, #1
 8000b50:	2000      	movhi	r0, #0
 8000b52:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b56:	bf00      	nop

08000b58 <__aeabi_dcmpgt>:
 8000b58:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b5c:	f7ff ffc4 	bl	8000ae8 <__aeabi_cdrcmple>
 8000b60:	bf34      	ite	cc
 8000b62:	2001      	movcc	r0, #1
 8000b64:	2000      	movcs	r0, #0
 8000b66:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b6a:	bf00      	nop

08000b6c <__aeabi_dcmpun>:
 8000b6c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b70:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b74:	d102      	bne.n	8000b7c <__aeabi_dcmpun+0x10>
 8000b76:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b7a:	d10a      	bne.n	8000b92 <__aeabi_dcmpun+0x26>
 8000b7c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b80:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b84:	d102      	bne.n	8000b8c <__aeabi_dcmpun+0x20>
 8000b86:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b8a:	d102      	bne.n	8000b92 <__aeabi_dcmpun+0x26>
 8000b8c:	f04f 0000 	mov.w	r0, #0
 8000b90:	4770      	bx	lr
 8000b92:	f04f 0001 	mov.w	r0, #1
 8000b96:	4770      	bx	lr

08000b98 <__aeabi_d2iz>:
 8000b98:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b9c:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000ba0:	d215      	bcs.n	8000bce <__aeabi_d2iz+0x36>
 8000ba2:	d511      	bpl.n	8000bc8 <__aeabi_d2iz+0x30>
 8000ba4:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000ba8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000bac:	d912      	bls.n	8000bd4 <__aeabi_d2iz+0x3c>
 8000bae:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000bb2:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000bb6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000bba:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000bbe:	fa23 f002 	lsr.w	r0, r3, r2
 8000bc2:	bf18      	it	ne
 8000bc4:	4240      	negne	r0, r0
 8000bc6:	4770      	bx	lr
 8000bc8:	f04f 0000 	mov.w	r0, #0
 8000bcc:	4770      	bx	lr
 8000bce:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000bd2:	d105      	bne.n	8000be0 <__aeabi_d2iz+0x48>
 8000bd4:	f011 4000 	ands.w	r0, r1, #2147483648	@ 0x80000000
 8000bd8:	bf08      	it	eq
 8000bda:	f06f 4000 	mvneq.w	r0, #2147483648	@ 0x80000000
 8000bde:	4770      	bx	lr
 8000be0:	f04f 0000 	mov.w	r0, #0
 8000be4:	4770      	bx	lr
 8000be6:	bf00      	nop

08000be8 <__aeabi_d2f>:
 8000be8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000bec:	f1b2 43e0 	subs.w	r3, r2, #1879048192	@ 0x70000000
 8000bf0:	bf24      	itt	cs
 8000bf2:	f5b3 1c00 	subscs.w	ip, r3, #2097152	@ 0x200000
 8000bf6:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	@ 0x1fc00000
 8000bfa:	d90d      	bls.n	8000c18 <__aeabi_d2f+0x30>
 8000bfc:	f001 4c00 	and.w	ip, r1, #2147483648	@ 0x80000000
 8000c00:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000c04:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000c08:	f1b2 4f00 	cmp.w	r2, #2147483648	@ 0x80000000
 8000c0c:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000c10:	bf08      	it	eq
 8000c12:	f020 0001 	biceq.w	r0, r0, #1
 8000c16:	4770      	bx	lr
 8000c18:	f011 4f80 	tst.w	r1, #1073741824	@ 0x40000000
 8000c1c:	d121      	bne.n	8000c62 <__aeabi_d2f+0x7a>
 8000c1e:	f113 7238 	adds.w	r2, r3, #48234496	@ 0x2e00000
 8000c22:	bfbc      	itt	lt
 8000c24:	f001 4000 	andlt.w	r0, r1, #2147483648	@ 0x80000000
 8000c28:	4770      	bxlt	lr
 8000c2a:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000c2e:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000c32:	f1c2 0218 	rsb	r2, r2, #24
 8000c36:	f1c2 0c20 	rsb	ip, r2, #32
 8000c3a:	fa10 f30c 	lsls.w	r3, r0, ip
 8000c3e:	fa20 f002 	lsr.w	r0, r0, r2
 8000c42:	bf18      	it	ne
 8000c44:	f040 0001 	orrne.w	r0, r0, #1
 8000c48:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c4c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000c50:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000c54:	ea40 000c 	orr.w	r0, r0, ip
 8000c58:	fa23 f302 	lsr.w	r3, r3, r2
 8000c5c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000c60:	e7cc      	b.n	8000bfc <__aeabi_d2f+0x14>
 8000c62:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000c66:	d107      	bne.n	8000c78 <__aeabi_d2f+0x90>
 8000c68:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000c6c:	bf1e      	ittt	ne
 8000c6e:	f04f 40fe 	movne.w	r0, #2130706432	@ 0x7f000000
 8000c72:	f440 0040 	orrne.w	r0, r0, #12582912	@ 0xc00000
 8000c76:	4770      	bxne	lr
 8000c78:	f001 4000 	and.w	r0, r1, #2147483648	@ 0x80000000
 8000c7c:	f040 40fe 	orr.w	r0, r0, #2130706432	@ 0x7f000000
 8000c80:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000c84:	4770      	bx	lr
 8000c86:	bf00      	nop

08000c88 <__aeabi_uldivmod>:
 8000c88:	b953      	cbnz	r3, 8000ca0 <__aeabi_uldivmod+0x18>
 8000c8a:	b94a      	cbnz	r2, 8000ca0 <__aeabi_uldivmod+0x18>
 8000c8c:	2900      	cmp	r1, #0
 8000c8e:	bf08      	it	eq
 8000c90:	2800      	cmpeq	r0, #0
 8000c92:	bf1c      	itt	ne
 8000c94:	f04f 31ff 	movne.w	r1, #4294967295
 8000c98:	f04f 30ff 	movne.w	r0, #4294967295
 8000c9c:	f000 b96a 	b.w	8000f74 <__aeabi_idiv0>
 8000ca0:	f1ad 0c08 	sub.w	ip, sp, #8
 8000ca4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000ca8:	f000 f806 	bl	8000cb8 <__udivmoddi4>
 8000cac:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000cb0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000cb4:	b004      	add	sp, #16
 8000cb6:	4770      	bx	lr

08000cb8 <__udivmoddi4>:
 8000cb8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000cbc:	9d08      	ldr	r5, [sp, #32]
 8000cbe:	460c      	mov	r4, r1
 8000cc0:	2b00      	cmp	r3, #0
 8000cc2:	d14e      	bne.n	8000d62 <__udivmoddi4+0xaa>
 8000cc4:	4694      	mov	ip, r2
 8000cc6:	458c      	cmp	ip, r1
 8000cc8:	4686      	mov	lr, r0
 8000cca:	fab2 f282 	clz	r2, r2
 8000cce:	d962      	bls.n	8000d96 <__udivmoddi4+0xde>
 8000cd0:	b14a      	cbz	r2, 8000ce6 <__udivmoddi4+0x2e>
 8000cd2:	f1c2 0320 	rsb	r3, r2, #32
 8000cd6:	4091      	lsls	r1, r2
 8000cd8:	fa20 f303 	lsr.w	r3, r0, r3
 8000cdc:	fa0c fc02 	lsl.w	ip, ip, r2
 8000ce0:	4319      	orrs	r1, r3
 8000ce2:	fa00 fe02 	lsl.w	lr, r0, r2
 8000ce6:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000cea:	fa1f f68c 	uxth.w	r6, ip
 8000cee:	fbb1 f4f7 	udiv	r4, r1, r7
 8000cf2:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000cf6:	fb07 1114 	mls	r1, r7, r4, r1
 8000cfa:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000cfe:	fb04 f106 	mul.w	r1, r4, r6
 8000d02:	4299      	cmp	r1, r3
 8000d04:	d90a      	bls.n	8000d1c <__udivmoddi4+0x64>
 8000d06:	eb1c 0303 	adds.w	r3, ip, r3
 8000d0a:	f104 30ff 	add.w	r0, r4, #4294967295
 8000d0e:	f080 8112 	bcs.w	8000f36 <__udivmoddi4+0x27e>
 8000d12:	4299      	cmp	r1, r3
 8000d14:	f240 810f 	bls.w	8000f36 <__udivmoddi4+0x27e>
 8000d18:	3c02      	subs	r4, #2
 8000d1a:	4463      	add	r3, ip
 8000d1c:	1a59      	subs	r1, r3, r1
 8000d1e:	fa1f f38e 	uxth.w	r3, lr
 8000d22:	fbb1 f0f7 	udiv	r0, r1, r7
 8000d26:	fb07 1110 	mls	r1, r7, r0, r1
 8000d2a:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000d2e:	fb00 f606 	mul.w	r6, r0, r6
 8000d32:	429e      	cmp	r6, r3
 8000d34:	d90a      	bls.n	8000d4c <__udivmoddi4+0x94>
 8000d36:	eb1c 0303 	adds.w	r3, ip, r3
 8000d3a:	f100 31ff 	add.w	r1, r0, #4294967295
 8000d3e:	f080 80fc 	bcs.w	8000f3a <__udivmoddi4+0x282>
 8000d42:	429e      	cmp	r6, r3
 8000d44:	f240 80f9 	bls.w	8000f3a <__udivmoddi4+0x282>
 8000d48:	4463      	add	r3, ip
 8000d4a:	3802      	subs	r0, #2
 8000d4c:	1b9b      	subs	r3, r3, r6
 8000d4e:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 8000d52:	2100      	movs	r1, #0
 8000d54:	b11d      	cbz	r5, 8000d5e <__udivmoddi4+0xa6>
 8000d56:	40d3      	lsrs	r3, r2
 8000d58:	2200      	movs	r2, #0
 8000d5a:	e9c5 3200 	strd	r3, r2, [r5]
 8000d5e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000d62:	428b      	cmp	r3, r1
 8000d64:	d905      	bls.n	8000d72 <__udivmoddi4+0xba>
 8000d66:	b10d      	cbz	r5, 8000d6c <__udivmoddi4+0xb4>
 8000d68:	e9c5 0100 	strd	r0, r1, [r5]
 8000d6c:	2100      	movs	r1, #0
 8000d6e:	4608      	mov	r0, r1
 8000d70:	e7f5      	b.n	8000d5e <__udivmoddi4+0xa6>
 8000d72:	fab3 f183 	clz	r1, r3
 8000d76:	2900      	cmp	r1, #0
 8000d78:	d146      	bne.n	8000e08 <__udivmoddi4+0x150>
 8000d7a:	42a3      	cmp	r3, r4
 8000d7c:	d302      	bcc.n	8000d84 <__udivmoddi4+0xcc>
 8000d7e:	4290      	cmp	r0, r2
 8000d80:	f0c0 80f0 	bcc.w	8000f64 <__udivmoddi4+0x2ac>
 8000d84:	1a86      	subs	r6, r0, r2
 8000d86:	eb64 0303 	sbc.w	r3, r4, r3
 8000d8a:	2001      	movs	r0, #1
 8000d8c:	2d00      	cmp	r5, #0
 8000d8e:	d0e6      	beq.n	8000d5e <__udivmoddi4+0xa6>
 8000d90:	e9c5 6300 	strd	r6, r3, [r5]
 8000d94:	e7e3      	b.n	8000d5e <__udivmoddi4+0xa6>
 8000d96:	2a00      	cmp	r2, #0
 8000d98:	f040 8090 	bne.w	8000ebc <__udivmoddi4+0x204>
 8000d9c:	eba1 040c 	sub.w	r4, r1, ip
 8000da0:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000da4:	fa1f f78c 	uxth.w	r7, ip
 8000da8:	2101      	movs	r1, #1
 8000daa:	fbb4 f6f8 	udiv	r6, r4, r8
 8000dae:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000db2:	fb08 4416 	mls	r4, r8, r6, r4
 8000db6:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000dba:	fb07 f006 	mul.w	r0, r7, r6
 8000dbe:	4298      	cmp	r0, r3
 8000dc0:	d908      	bls.n	8000dd4 <__udivmoddi4+0x11c>
 8000dc2:	eb1c 0303 	adds.w	r3, ip, r3
 8000dc6:	f106 34ff 	add.w	r4, r6, #4294967295
 8000dca:	d202      	bcs.n	8000dd2 <__udivmoddi4+0x11a>
 8000dcc:	4298      	cmp	r0, r3
 8000dce:	f200 80cd 	bhi.w	8000f6c <__udivmoddi4+0x2b4>
 8000dd2:	4626      	mov	r6, r4
 8000dd4:	1a1c      	subs	r4, r3, r0
 8000dd6:	fa1f f38e 	uxth.w	r3, lr
 8000dda:	fbb4 f0f8 	udiv	r0, r4, r8
 8000dde:	fb08 4410 	mls	r4, r8, r0, r4
 8000de2:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000de6:	fb00 f707 	mul.w	r7, r0, r7
 8000dea:	429f      	cmp	r7, r3
 8000dec:	d908      	bls.n	8000e00 <__udivmoddi4+0x148>
 8000dee:	eb1c 0303 	adds.w	r3, ip, r3
 8000df2:	f100 34ff 	add.w	r4, r0, #4294967295
 8000df6:	d202      	bcs.n	8000dfe <__udivmoddi4+0x146>
 8000df8:	429f      	cmp	r7, r3
 8000dfa:	f200 80b0 	bhi.w	8000f5e <__udivmoddi4+0x2a6>
 8000dfe:	4620      	mov	r0, r4
 8000e00:	1bdb      	subs	r3, r3, r7
 8000e02:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000e06:	e7a5      	b.n	8000d54 <__udivmoddi4+0x9c>
 8000e08:	f1c1 0620 	rsb	r6, r1, #32
 8000e0c:	408b      	lsls	r3, r1
 8000e0e:	fa22 f706 	lsr.w	r7, r2, r6
 8000e12:	431f      	orrs	r7, r3
 8000e14:	fa20 fc06 	lsr.w	ip, r0, r6
 8000e18:	fa04 f301 	lsl.w	r3, r4, r1
 8000e1c:	ea43 030c 	orr.w	r3, r3, ip
 8000e20:	40f4      	lsrs	r4, r6
 8000e22:	fa00 f801 	lsl.w	r8, r0, r1
 8000e26:	0c38      	lsrs	r0, r7, #16
 8000e28:	ea4f 4913 	mov.w	r9, r3, lsr #16
 8000e2c:	fbb4 fef0 	udiv	lr, r4, r0
 8000e30:	fa1f fc87 	uxth.w	ip, r7
 8000e34:	fb00 441e 	mls	r4, r0, lr, r4
 8000e38:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000e3c:	fb0e f90c 	mul.w	r9, lr, ip
 8000e40:	45a1      	cmp	r9, r4
 8000e42:	fa02 f201 	lsl.w	r2, r2, r1
 8000e46:	d90a      	bls.n	8000e5e <__udivmoddi4+0x1a6>
 8000e48:	193c      	adds	r4, r7, r4
 8000e4a:	f10e 3aff 	add.w	sl, lr, #4294967295
 8000e4e:	f080 8084 	bcs.w	8000f5a <__udivmoddi4+0x2a2>
 8000e52:	45a1      	cmp	r9, r4
 8000e54:	f240 8081 	bls.w	8000f5a <__udivmoddi4+0x2a2>
 8000e58:	f1ae 0e02 	sub.w	lr, lr, #2
 8000e5c:	443c      	add	r4, r7
 8000e5e:	eba4 0409 	sub.w	r4, r4, r9
 8000e62:	fa1f f983 	uxth.w	r9, r3
 8000e66:	fbb4 f3f0 	udiv	r3, r4, r0
 8000e6a:	fb00 4413 	mls	r4, r0, r3, r4
 8000e6e:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000e72:	fb03 fc0c 	mul.w	ip, r3, ip
 8000e76:	45a4      	cmp	ip, r4
 8000e78:	d907      	bls.n	8000e8a <__udivmoddi4+0x1d2>
 8000e7a:	193c      	adds	r4, r7, r4
 8000e7c:	f103 30ff 	add.w	r0, r3, #4294967295
 8000e80:	d267      	bcs.n	8000f52 <__udivmoddi4+0x29a>
 8000e82:	45a4      	cmp	ip, r4
 8000e84:	d965      	bls.n	8000f52 <__udivmoddi4+0x29a>
 8000e86:	3b02      	subs	r3, #2
 8000e88:	443c      	add	r4, r7
 8000e8a:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 8000e8e:	fba0 9302 	umull	r9, r3, r0, r2
 8000e92:	eba4 040c 	sub.w	r4, r4, ip
 8000e96:	429c      	cmp	r4, r3
 8000e98:	46ce      	mov	lr, r9
 8000e9a:	469c      	mov	ip, r3
 8000e9c:	d351      	bcc.n	8000f42 <__udivmoddi4+0x28a>
 8000e9e:	d04e      	beq.n	8000f3e <__udivmoddi4+0x286>
 8000ea0:	b155      	cbz	r5, 8000eb8 <__udivmoddi4+0x200>
 8000ea2:	ebb8 030e 	subs.w	r3, r8, lr
 8000ea6:	eb64 040c 	sbc.w	r4, r4, ip
 8000eaa:	fa04 f606 	lsl.w	r6, r4, r6
 8000eae:	40cb      	lsrs	r3, r1
 8000eb0:	431e      	orrs	r6, r3
 8000eb2:	40cc      	lsrs	r4, r1
 8000eb4:	e9c5 6400 	strd	r6, r4, [r5]
 8000eb8:	2100      	movs	r1, #0
 8000eba:	e750      	b.n	8000d5e <__udivmoddi4+0xa6>
 8000ebc:	f1c2 0320 	rsb	r3, r2, #32
 8000ec0:	fa20 f103 	lsr.w	r1, r0, r3
 8000ec4:	fa0c fc02 	lsl.w	ip, ip, r2
 8000ec8:	fa24 f303 	lsr.w	r3, r4, r3
 8000ecc:	4094      	lsls	r4, r2
 8000ece:	430c      	orrs	r4, r1
 8000ed0:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000ed4:	fa00 fe02 	lsl.w	lr, r0, r2
 8000ed8:	fa1f f78c 	uxth.w	r7, ip
 8000edc:	fbb3 f0f8 	udiv	r0, r3, r8
 8000ee0:	fb08 3110 	mls	r1, r8, r0, r3
 8000ee4:	0c23      	lsrs	r3, r4, #16
 8000ee6:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000eea:	fb00 f107 	mul.w	r1, r0, r7
 8000eee:	4299      	cmp	r1, r3
 8000ef0:	d908      	bls.n	8000f04 <__udivmoddi4+0x24c>
 8000ef2:	eb1c 0303 	adds.w	r3, ip, r3
 8000ef6:	f100 36ff 	add.w	r6, r0, #4294967295
 8000efa:	d22c      	bcs.n	8000f56 <__udivmoddi4+0x29e>
 8000efc:	4299      	cmp	r1, r3
 8000efe:	d92a      	bls.n	8000f56 <__udivmoddi4+0x29e>
 8000f00:	3802      	subs	r0, #2
 8000f02:	4463      	add	r3, ip
 8000f04:	1a5b      	subs	r3, r3, r1
 8000f06:	b2a4      	uxth	r4, r4
 8000f08:	fbb3 f1f8 	udiv	r1, r3, r8
 8000f0c:	fb08 3311 	mls	r3, r8, r1, r3
 8000f10:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000f14:	fb01 f307 	mul.w	r3, r1, r7
 8000f18:	42a3      	cmp	r3, r4
 8000f1a:	d908      	bls.n	8000f2e <__udivmoddi4+0x276>
 8000f1c:	eb1c 0404 	adds.w	r4, ip, r4
 8000f20:	f101 36ff 	add.w	r6, r1, #4294967295
 8000f24:	d213      	bcs.n	8000f4e <__udivmoddi4+0x296>
 8000f26:	42a3      	cmp	r3, r4
 8000f28:	d911      	bls.n	8000f4e <__udivmoddi4+0x296>
 8000f2a:	3902      	subs	r1, #2
 8000f2c:	4464      	add	r4, ip
 8000f2e:	1ae4      	subs	r4, r4, r3
 8000f30:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8000f34:	e739      	b.n	8000daa <__udivmoddi4+0xf2>
 8000f36:	4604      	mov	r4, r0
 8000f38:	e6f0      	b.n	8000d1c <__udivmoddi4+0x64>
 8000f3a:	4608      	mov	r0, r1
 8000f3c:	e706      	b.n	8000d4c <__udivmoddi4+0x94>
 8000f3e:	45c8      	cmp	r8, r9
 8000f40:	d2ae      	bcs.n	8000ea0 <__udivmoddi4+0x1e8>
 8000f42:	ebb9 0e02 	subs.w	lr, r9, r2
 8000f46:	eb63 0c07 	sbc.w	ip, r3, r7
 8000f4a:	3801      	subs	r0, #1
 8000f4c:	e7a8      	b.n	8000ea0 <__udivmoddi4+0x1e8>
 8000f4e:	4631      	mov	r1, r6
 8000f50:	e7ed      	b.n	8000f2e <__udivmoddi4+0x276>
 8000f52:	4603      	mov	r3, r0
 8000f54:	e799      	b.n	8000e8a <__udivmoddi4+0x1d2>
 8000f56:	4630      	mov	r0, r6
 8000f58:	e7d4      	b.n	8000f04 <__udivmoddi4+0x24c>
 8000f5a:	46d6      	mov	lr, sl
 8000f5c:	e77f      	b.n	8000e5e <__udivmoddi4+0x1a6>
 8000f5e:	4463      	add	r3, ip
 8000f60:	3802      	subs	r0, #2
 8000f62:	e74d      	b.n	8000e00 <__udivmoddi4+0x148>
 8000f64:	4606      	mov	r6, r0
 8000f66:	4623      	mov	r3, r4
 8000f68:	4608      	mov	r0, r1
 8000f6a:	e70f      	b.n	8000d8c <__udivmoddi4+0xd4>
 8000f6c:	3e02      	subs	r6, #2
 8000f6e:	4463      	add	r3, ip
 8000f70:	e730      	b.n	8000dd4 <__udivmoddi4+0x11c>
 8000f72:	bf00      	nop

08000f74 <__aeabi_idiv0>:
 8000f74:	4770      	bx	lr
 8000f76:	bf00      	nop

08000f78 <calc_ang>:

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */

// Calculo dos angulos em radianos e graus
void calc_ang(){
 8000f78:	b580      	push	{r7, lr}
 8000f7a:	b082      	sub	sp, #8
 8000f7c:	af00      	add	r7, sp, #0
	for(int i = 0; i < N_AMOSTRAS; i++){
 8000f7e:	2300      	movs	r3, #0
 8000f80:	607b      	str	r3, [r7, #4]
 8000f82:	e056      	b.n	8001032 <calc_ang+0xba>
		angulos_graus[i] = ((medidas[i]-OFFSETS[i])*POT_ANG_MAX)/ADC_BIT_RESOLUTION; // Regra de três para saber o ang conforme a tensão medida do adc
 8000f84:	4a32      	ldr	r2, [pc, #200]	@ (8001050 <calc_ang+0xd8>)
 8000f86:	687b      	ldr	r3, [r7, #4]
 8000f88:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8000f8c:	b29b      	uxth	r3, r3
 8000f8e:	4619      	mov	r1, r3
 8000f90:	4a30      	ldr	r2, [pc, #192]	@ (8001054 <calc_ang+0xdc>)
 8000f92:	687b      	ldr	r3, [r7, #4]
 8000f94:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8000f98:	1acb      	subs	r3, r1, r3
 8000f9a:	f44f 7296 	mov.w	r2, #300	@ 0x12c
 8000f9e:	fb02 f303 	mul.w	r3, r2, r3
 8000fa2:	4a2d      	ldr	r2, [pc, #180]	@ (8001058 <calc_ang+0xe0>)
 8000fa4:	fb82 1203 	smull	r1, r2, r2, r3
 8000fa8:	441a      	add	r2, r3
 8000faa:	12d2      	asrs	r2, r2, #11
 8000fac:	17db      	asrs	r3, r3, #31
 8000fae:	1ad3      	subs	r3, r2, r3
 8000fb0:	ee07 3a90 	vmov	s15, r3
 8000fb4:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8000fb8:	4a28      	ldr	r2, [pc, #160]	@ (800105c <calc_ang+0xe4>)
 8000fba:	687b      	ldr	r3, [r7, #4]
 8000fbc:	009b      	lsls	r3, r3, #2
 8000fbe:	4413      	add	r3, r2
 8000fc0:	edc3 7a00 	vstr	s15, [r3]
		if(i != 0 && i != 3){
 8000fc4:	687b      	ldr	r3, [r7, #4]
 8000fc6:	2b00      	cmp	r3, #0
 8000fc8:	d017      	beq.n	8000ffa <calc_ang+0x82>
 8000fca:	687b      	ldr	r3, [r7, #4]
 8000fcc:	2b03      	cmp	r3, #3
 8000fce:	d014      	beq.n	8000ffa <calc_ang+0x82>
			angulos_graus[i] += angulos_graus[i-1];
 8000fd0:	4a22      	ldr	r2, [pc, #136]	@ (800105c <calc_ang+0xe4>)
 8000fd2:	687b      	ldr	r3, [r7, #4]
 8000fd4:	009b      	lsls	r3, r3, #2
 8000fd6:	4413      	add	r3, r2
 8000fd8:	ed93 7a00 	vldr	s14, [r3]
 8000fdc:	687b      	ldr	r3, [r7, #4]
 8000fde:	3b01      	subs	r3, #1
 8000fe0:	4a1e      	ldr	r2, [pc, #120]	@ (800105c <calc_ang+0xe4>)
 8000fe2:	009b      	lsls	r3, r3, #2
 8000fe4:	4413      	add	r3, r2
 8000fe6:	edd3 7a00 	vldr	s15, [r3]
 8000fea:	ee77 7a27 	vadd.f32	s15, s14, s15
 8000fee:	4a1b      	ldr	r2, [pc, #108]	@ (800105c <calc_ang+0xe4>)
 8000ff0:	687b      	ldr	r3, [r7, #4]
 8000ff2:	009b      	lsls	r3, r3, #2
 8000ff4:	4413      	add	r3, r2
 8000ff6:	edc3 7a00 	vstr	s15, [r3]
		}
		angulos_rad[i] = angulos_graus[i]*(M_PI / 180.0); // Transformando para radianos
 8000ffa:	4a18      	ldr	r2, [pc, #96]	@ (800105c <calc_ang+0xe4>)
 8000ffc:	687b      	ldr	r3, [r7, #4]
 8000ffe:	009b      	lsls	r3, r3, #2
 8001000:	4413      	add	r3, r2
 8001002:	681b      	ldr	r3, [r3, #0]
 8001004:	4618      	mov	r0, r3
 8001006:	f7ff fabf 	bl	8000588 <__aeabi_f2d>
 800100a:	a30f      	add	r3, pc, #60	@ (adr r3, 8001048 <calc_ang+0xd0>)
 800100c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001010:	f7ff fb12 	bl	8000638 <__aeabi_dmul>
 8001014:	4602      	mov	r2, r0
 8001016:	460b      	mov	r3, r1
 8001018:	4610      	mov	r0, r2
 800101a:	4619      	mov	r1, r3
 800101c:	f7ff fde4 	bl	8000be8 <__aeabi_d2f>
 8001020:	4602      	mov	r2, r0
 8001022:	490f      	ldr	r1, [pc, #60]	@ (8001060 <calc_ang+0xe8>)
 8001024:	687b      	ldr	r3, [r7, #4]
 8001026:	009b      	lsls	r3, r3, #2
 8001028:	440b      	add	r3, r1
 800102a:	601a      	str	r2, [r3, #0]
	for(int i = 0; i < N_AMOSTRAS; i++){
 800102c:	687b      	ldr	r3, [r7, #4]
 800102e:	3301      	adds	r3, #1
 8001030:	607b      	str	r3, [r7, #4]
 8001032:	687b      	ldr	r3, [r7, #4]
 8001034:	2b03      	cmp	r3, #3
 8001036:	dda5      	ble.n	8000f84 <calc_ang+0xc>
	}
}
 8001038:	bf00      	nop
 800103a:	bf00      	nop
 800103c:	3708      	adds	r7, #8
 800103e:	46bd      	mov	sp, r7
 8001040:	bd80      	pop	{r7, pc}
 8001042:	bf00      	nop
 8001044:	f3af 8000 	nop.w
 8001048:	a2529d39 	.word	0xa2529d39
 800104c:	3f91df46 	.word	0x3f91df46
 8001050:	200003b8 	.word	0x200003b8
 8001054:	200003c0 	.word	0x200003c0
 8001058:	80080081 	.word	0x80080081
 800105c:	200003e8 	.word	0x200003e8
 8001060:	200003d8 	.word	0x200003d8

08001064 <calc_r>:

// Distância Radial
float calc_r(){
 8001064:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 8001068:	b082      	sub	sp, #8
 800106a:	af00      	add	r7, sp, #0
	float r = 0;
 800106c:	f04f 0300 	mov.w	r3, #0
 8001070:	607b      	str	r3, [r7, #4]
	for(int i = 0; i < N_AMOSTRAS - 1; i++){
 8001072:	2300      	movs	r3, #0
 8001074:	603b      	str	r3, [r7, #0]
 8001076:	e033      	b.n	80010e0 <calc_r+0x7c>
			r += (sin(angulos_rad[i])*segmentos[i]); // Calculo do cateto oposto a soma é o r + um offset
 8001078:	6878      	ldr	r0, [r7, #4]
 800107a:	f7ff fa85 	bl	8000588 <__aeabi_f2d>
 800107e:	4604      	mov	r4, r0
 8001080:	460d      	mov	r5, r1
 8001082:	4a1d      	ldr	r2, [pc, #116]	@ (80010f8 <calc_r+0x94>)
 8001084:	683b      	ldr	r3, [r7, #0]
 8001086:	009b      	lsls	r3, r3, #2
 8001088:	4413      	add	r3, r2
 800108a:	681b      	ldr	r3, [r3, #0]
 800108c:	4618      	mov	r0, r3
 800108e:	f7ff fa7b 	bl	8000588 <__aeabi_f2d>
 8001092:	4602      	mov	r2, r0
 8001094:	460b      	mov	r3, r1
 8001096:	ec43 2b10 	vmov	d0, r2, r3
<<<<<<< HEAD
 800109a:	f008 f8ad 	bl	80091f8 <sin>
=======
<<<<<<< HEAD
 800109a:	f008 f8a1 	bl	80091e0 <sin>
=======
 800109a:	f008 f929 	bl	80092f0 <sin>
>>>>>>> 39e4d10438a821cc799a472af87a77c6796a1676
>>>>>>> ef0d341697957f8628c074acbc12bb9a12bbe146
 800109e:	ec59 8b10 	vmov	r8, r9, d0
 80010a2:	4a16      	ldr	r2, [pc, #88]	@ (80010fc <calc_r+0x98>)
 80010a4:	683b      	ldr	r3, [r7, #0]
 80010a6:	009b      	lsls	r3, r3, #2
 80010a8:	4413      	add	r3, r2
 80010aa:	681b      	ldr	r3, [r3, #0]
 80010ac:	4618      	mov	r0, r3
 80010ae:	f7ff fa6b 	bl	8000588 <__aeabi_f2d>
 80010b2:	4602      	mov	r2, r0
 80010b4:	460b      	mov	r3, r1
 80010b6:	4640      	mov	r0, r8
 80010b8:	4649      	mov	r1, r9
 80010ba:	f7ff fabd 	bl	8000638 <__aeabi_dmul>
 80010be:	4602      	mov	r2, r0
 80010c0:	460b      	mov	r3, r1
 80010c2:	4620      	mov	r0, r4
 80010c4:	4629      	mov	r1, r5
 80010c6:	f7ff f901 	bl	80002cc <__adddf3>
 80010ca:	4602      	mov	r2, r0
 80010cc:	460b      	mov	r3, r1
 80010ce:	4610      	mov	r0, r2
 80010d0:	4619      	mov	r1, r3
 80010d2:	f7ff fd89 	bl	8000be8 <__aeabi_d2f>
 80010d6:	4603      	mov	r3, r0
 80010d8:	607b      	str	r3, [r7, #4]
	for(int i = 0; i < N_AMOSTRAS - 1; i++){
 80010da:	683b      	ldr	r3, [r7, #0]
 80010dc:	3301      	adds	r3, #1
 80010de:	603b      	str	r3, [r7, #0]
 80010e0:	683b      	ldr	r3, [r7, #0]
 80010e2:	2b02      	cmp	r3, #2
 80010e4:	ddc8      	ble.n	8001078 <calc_r+0x14>
		}
	return r;
 80010e6:	687b      	ldr	r3, [r7, #4]
 80010e8:	ee07 3a90 	vmov	s15, r3
}
 80010ec:	eeb0 0a67 	vmov.f32	s0, s15
 80010f0:	3708      	adds	r7, #8
 80010f2:	46bd      	mov	sp, r7
 80010f4:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 80010f8:	200003d8 	.word	0x200003d8
<<<<<<< HEAD
 80010fc:	0800a324 	.word	0x0800a324
=======
<<<<<<< HEAD
 80010fc:	0800a30c 	.word	0x0800a30c
=======
 80010fc:	0800a418 	.word	0x0800a418
>>>>>>> 39e4d10438a821cc799a472af87a77c6796a1676
>>>>>>> ef0d341697957f8628c074acbc12bb9a12bbe146

08001100 <calc_z>:

// Altura da ponta
float calc_z(){
 8001100:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 8001104:	b082      	sub	sp, #8
 8001106:	af00      	add	r7, sp, #0
	float z = 0;
 8001108:	f04f 0300 	mov.w	r3, #0
 800110c:	607b      	str	r3, [r7, #4]
	for(int i = 0; i < N_AMOSTRAS - 1; i++){
 800110e:	2300      	movs	r3, #0
 8001110:	603b      	str	r3, [r7, #0]
 8001112:	e033      	b.n	800117c <calc_z+0x7c>
			z += (cos(angulos_rad[i])*segmentos[i]);  // Calculo do cateto adjacente a soma é o z + um offset
 8001114:	6878      	ldr	r0, [r7, #4]
 8001116:	f7ff fa37 	bl	8000588 <__aeabi_f2d>
 800111a:	4604      	mov	r4, r0
 800111c:	460d      	mov	r5, r1
 800111e:	4a1f      	ldr	r2, [pc, #124]	@ (800119c <calc_z+0x9c>)
 8001120:	683b      	ldr	r3, [r7, #0]
 8001122:	009b      	lsls	r3, r3, #2
 8001124:	4413      	add	r3, r2
 8001126:	681b      	ldr	r3, [r3, #0]
 8001128:	4618      	mov	r0, r3
 800112a:	f7ff fa2d 	bl	8000588 <__aeabi_f2d>
 800112e:	4602      	mov	r2, r0
 8001130:	460b      	mov	r3, r1
 8001132:	ec43 2b10 	vmov	d0, r2, r3
<<<<<<< HEAD
 8001136:	f008 f80b 	bl	8009150 <cos>
=======
<<<<<<< HEAD
 8001136:	f007 ffff 	bl	8009138 <cos>
=======
 8001136:	f008 f887 	bl	8009248 <cos>
>>>>>>> 39e4d10438a821cc799a472af87a77c6796a1676
>>>>>>> ef0d341697957f8628c074acbc12bb9a12bbe146
 800113a:	ec59 8b10 	vmov	r8, r9, d0
 800113e:	4a18      	ldr	r2, [pc, #96]	@ (80011a0 <calc_z+0xa0>)
 8001140:	683b      	ldr	r3, [r7, #0]
 8001142:	009b      	lsls	r3, r3, #2
 8001144:	4413      	add	r3, r2
 8001146:	681b      	ldr	r3, [r3, #0]
 8001148:	4618      	mov	r0, r3
 800114a:	f7ff fa1d 	bl	8000588 <__aeabi_f2d>
 800114e:	4602      	mov	r2, r0
 8001150:	460b      	mov	r3, r1
 8001152:	4640      	mov	r0, r8
 8001154:	4649      	mov	r1, r9
 8001156:	f7ff fa6f 	bl	8000638 <__aeabi_dmul>
 800115a:	4602      	mov	r2, r0
 800115c:	460b      	mov	r3, r1
 800115e:	4620      	mov	r0, r4
 8001160:	4629      	mov	r1, r5
 8001162:	f7ff f8b3 	bl	80002cc <__adddf3>
 8001166:	4602      	mov	r2, r0
 8001168:	460b      	mov	r3, r1
 800116a:	4610      	mov	r0, r2
 800116c:	4619      	mov	r1, r3
 800116e:	f7ff fd3b 	bl	8000be8 <__aeabi_d2f>
 8001172:	4603      	mov	r3, r0
 8001174:	607b      	str	r3, [r7, #4]
	for(int i = 0; i < N_AMOSTRAS - 1; i++){
 8001176:	683b      	ldr	r3, [r7, #0]
 8001178:	3301      	adds	r3, #1
 800117a:	603b      	str	r3, [r7, #0]
 800117c:	683b      	ldr	r3, [r7, #0]
 800117e:	2b02      	cmp	r3, #2
 8001180:	ddc8      	ble.n	8001114 <calc_z+0x14>
		}
	return z  + ALTURA_PADRAO;
 8001182:	edd7 7a01 	vldr	s15, [r7, #4]
 8001186:	eeb2 7a02 	vmov.f32	s14, #34	@ 0x41100000  9.0
 800118a:	ee77 7a87 	vadd.f32	s15, s15, s14
}
 800118e:	eeb0 0a67 	vmov.f32	s0, s15
 8001192:	3708      	adds	r7, #8
 8001194:	46bd      	mov	sp, r7
 8001196:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 800119a:	bf00      	nop
 800119c:	200003d8 	.word	0x200003d8
<<<<<<< HEAD
 80011a0:	0800a324 	.word	0x0800a324
=======
<<<<<<< HEAD
 80011a0:	0800a30c 	.word	0x0800a30c
=======
 80011a0:	0800a418 	.word	0x0800a418
>>>>>>> 39e4d10438a821cc799a472af87a77c6796a1676
>>>>>>> ef0d341697957f8628c074acbc12bb9a12bbe146

080011a4 <calc_x>:

// Altura da ponta
float calc_x(float distancia_radial){
 80011a4:	b5b0      	push	{r4, r5, r7, lr}
 80011a6:	b084      	sub	sp, #16
 80011a8:	af00      	add	r7, sp, #0
 80011aa:	ed87 0a01 	vstr	s0, [r7, #4]
	float x = 0;
 80011ae:	f04f 0300 	mov.w	r3, #0
 80011b2:	60fb      	str	r3, [r7, #12]
	x = distancia_radial*cos(angulos_rad[3]);
 80011b4:	6878      	ldr	r0, [r7, #4]
 80011b6:	f7ff f9e7 	bl	8000588 <__aeabi_f2d>
 80011ba:	4604      	mov	r4, r0
 80011bc:	460d      	mov	r5, r1
 80011be:	4b10      	ldr	r3, [pc, #64]	@ (8001200 <calc_x+0x5c>)
 80011c0:	68db      	ldr	r3, [r3, #12]
 80011c2:	4618      	mov	r0, r3
 80011c4:	f7ff f9e0 	bl	8000588 <__aeabi_f2d>
 80011c8:	4602      	mov	r2, r0
 80011ca:	460b      	mov	r3, r1
 80011cc:	ec43 2b10 	vmov	d0, r2, r3
<<<<<<< HEAD
 80011d0:	f007 ffbe 	bl	8009150 <cos>
=======
<<<<<<< HEAD
 80011d0:	f007 ffb2 	bl	8009138 <cos>
=======
 80011d0:	f008 f83a 	bl	8009248 <cos>
>>>>>>> 39e4d10438a821cc799a472af87a77c6796a1676
>>>>>>> ef0d341697957f8628c074acbc12bb9a12bbe146
 80011d4:	ec53 2b10 	vmov	r2, r3, d0
 80011d8:	4620      	mov	r0, r4
 80011da:	4629      	mov	r1, r5
 80011dc:	f7ff fa2c 	bl	8000638 <__aeabi_dmul>
 80011e0:	4602      	mov	r2, r0
 80011e2:	460b      	mov	r3, r1
 80011e4:	4610      	mov	r0, r2
 80011e6:	4619      	mov	r1, r3
 80011e8:	f7ff fcfe 	bl	8000be8 <__aeabi_d2f>
 80011ec:	4603      	mov	r3, r0
 80011ee:	60fb      	str	r3, [r7, #12]

	return x;
 80011f0:	68fb      	ldr	r3, [r7, #12]
 80011f2:	ee07 3a90 	vmov	s15, r3
}
 80011f6:	eeb0 0a67 	vmov.f32	s0, s15
 80011fa:	3710      	adds	r7, #16
 80011fc:	46bd      	mov	sp, r7
 80011fe:	bdb0      	pop	{r4, r5, r7, pc}
 8001200:	200003d8 	.word	0x200003d8

08001204 <calc_y>:

// Altura da ponta
float calc_y(float distancia_radial){
 8001204:	b5b0      	push	{r4, r5, r7, lr}
 8001206:	b084      	sub	sp, #16
 8001208:	af00      	add	r7, sp, #0
 800120a:	ed87 0a01 	vstr	s0, [r7, #4]
	float y = 0;
 800120e:	f04f 0300 	mov.w	r3, #0
 8001212:	60fb      	str	r3, [r7, #12]
	y = distancia_radial*sin(angulos_rad[3]);
 8001214:	6878      	ldr	r0, [r7, #4]
 8001216:	f7ff f9b7 	bl	8000588 <__aeabi_f2d>
 800121a:	4604      	mov	r4, r0
 800121c:	460d      	mov	r5, r1
 800121e:	4b10      	ldr	r3, [pc, #64]	@ (8001260 <calc_y+0x5c>)
 8001220:	68db      	ldr	r3, [r3, #12]
 8001222:	4618      	mov	r0, r3
 8001224:	f7ff f9b0 	bl	8000588 <__aeabi_f2d>
 8001228:	4602      	mov	r2, r0
 800122a:	460b      	mov	r3, r1
 800122c:	ec43 2b10 	vmov	d0, r2, r3
<<<<<<< HEAD
 8001230:	f007 ffe2 	bl	80091f8 <sin>
=======
<<<<<<< HEAD
 8001230:	f007 ffd6 	bl	80091e0 <sin>
=======
 8001230:	f008 f85e 	bl	80092f0 <sin>
>>>>>>> 39e4d10438a821cc799a472af87a77c6796a1676
>>>>>>> ef0d341697957f8628c074acbc12bb9a12bbe146
 8001234:	ec53 2b10 	vmov	r2, r3, d0
 8001238:	4620      	mov	r0, r4
 800123a:	4629      	mov	r1, r5
 800123c:	f7ff f9fc 	bl	8000638 <__aeabi_dmul>
 8001240:	4602      	mov	r2, r0
 8001242:	460b      	mov	r3, r1
 8001244:	4610      	mov	r0, r2
 8001246:	4619      	mov	r1, r3
 8001248:	f7ff fcce 	bl	8000be8 <__aeabi_d2f>
 800124c:	4603      	mov	r3, r0
 800124e:	60fb      	str	r3, [r7, #12]

	return y;
 8001250:	68fb      	ldr	r3, [r7, #12]
 8001252:	ee07 3a90 	vmov	s15, r3
}
 8001256:	eeb0 0a67 	vmov.f32	s0, s15
 800125a:	3710      	adds	r7, #16
 800125c:	46bd      	mov	sp, r7
 800125e:	bdb0      	pop	{r4, r5, r7, pc}
 8001260:	200003d8 	.word	0x200003d8

08001264 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
<<<<<<< HEAD
 8001264:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 8001268:	b088      	sub	sp, #32
 800126a:	af08      	add	r7, sp, #32
=======
<<<<<<< HEAD
 8001264:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 8001268:	b088      	sub	sp, #32
 800126a:	af08      	add	r7, sp, #32
=======
 8001264:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8001268:	b0a2      	sub	sp, #136	@ 0x88
 800126a:	af16      	add	r7, sp, #88	@ 0x58
>>>>>>> 39e4d10438a821cc799a472af87a77c6796a1676
>>>>>>> ef0d341697957f8628c074acbc12bb9a12bbe146
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
<<<<<<< HEAD
 800126c:	f000 ff3a 	bl	80020e4 <HAL_Init>
=======
<<<<<<< HEAD
 800126c:	f000 ff2e 	bl	80020cc <HAL_Init>
=======
 800126c:	f000 ffb8 	bl	80021e0 <HAL_Init>
>>>>>>> 39e4d10438a821cc799a472af87a77c6796a1676
>>>>>>> ef0d341697957f8628c074acbc12bb9a12bbe146
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
<<<<<<< HEAD
 8001270:	f000 f8b2 	bl	80013d8 <SystemClock_Config>
=======
<<<<<<< HEAD
 8001270:	f000 f8b2 	bl	80013d8 <SystemClock_Config>
=======
 8001270:	f000 f900 	bl	8001474 <SystemClock_Config>
>>>>>>> 39e4d10438a821cc799a472af87a77c6796a1676
>>>>>>> ef0d341697957f8628c074acbc12bb9a12bbe146
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
<<<<<<< HEAD
=======
<<<<<<< HEAD
>>>>>>> ef0d341697957f8628c074acbc12bb9a12bbe146
 8001274:	f000 facc 	bl	8001810 <MX_GPIO_Init>
  MX_DMA_Init();
 8001278:	f000 faaa 	bl	80017d0 <MX_DMA_Init>
  MX_ADC1_Init();
 800127c:	f000 f91a 	bl	80014b4 <MX_ADC1_Init>
  MX_USART2_UART_Init();
 8001280:	f000 fa7c 	bl	800177c <MX_USART2_UART_Init>
  MX_TIM10_Init();
 8001284:	f000 fa32 	bl	80016ec <MX_TIM10_Init>
  MX_TIM11_Init();
 8001288:	f000 fa54 	bl	8001734 <MX_TIM11_Init>
  MX_TIM8_Init();
 800128c:	f000 f98e 	bl	80015ac <MX_TIM8_Init>
  /* USER CODE BEGIN 2 */
  HAL_ADC_Start_DMA(&hadc1, medidas, N_AMOSTRAS);
 8001290:	2204      	movs	r2, #4
 8001292:	4941      	ldr	r1, [pc, #260]	@ (8001398 <main+0x134>)
 8001294:	4841      	ldr	r0, [pc, #260]	@ (800139c <main+0x138>)
<<<<<<< HEAD
 8001296:	f000 ffdb 	bl	8002250 <HAL_ADC_Start_DMA>
  HAL_TIM_Base_Start(&htim11); // Timer para debounce
 800129a:	4841      	ldr	r0, [pc, #260]	@ (80013a0 <main+0x13c>)
 800129c:	f003 f8be 	bl	800441c <HAL_TIM_Base_Start>
  HAL_TIM_Base_Start_IT(&htim10); // Timer para envio de msg na serial
 80012a0:	4840      	ldr	r0, [pc, #256]	@ (80013a4 <main+0x140>)
 80012a2:	f003 f923 	bl	80044ec <HAL_TIM_Base_Start_IT>
  HAL_TIM_OC_Start_IT(&htim8, TIM_CHANNEL_1); // Timer de freq sampling do adc
 80012a6:	2100      	movs	r1, #0
 80012a8:	483f      	ldr	r0, [pc, #252]	@ (80013a8 <main+0x144>)
 80012aa:	f003 f9e9 	bl	8004680 <HAL_TIM_OC_Start_IT>
=======
 8001296:	f000 ffcf 	bl	8002238 <HAL_ADC_Start_DMA>
  HAL_TIM_Base_Start(&htim11); // Timer para debounce
 800129a:	4841      	ldr	r0, [pc, #260]	@ (80013a0 <main+0x13c>)
 800129c:	f003 f8b2 	bl	8004404 <HAL_TIM_Base_Start>
  HAL_TIM_Base_Start_IT(&htim10); // Timer para envio de msg na serial
 80012a0:	4840      	ldr	r0, [pc, #256]	@ (80013a4 <main+0x140>)
 80012a2:	f003 f917 	bl	80044d4 <HAL_TIM_Base_Start_IT>
  HAL_TIM_OC_Start_IT(&htim8, TIM_CHANNEL_1); // Timer de freq sampling do adc
 80012a6:	2100      	movs	r1, #0
 80012a8:	483f      	ldr	r0, [pc, #252]	@ (80013a8 <main+0x144>)
 80012aa:	f003 f9dd 	bl	8004668 <HAL_TIM_OC_Start_IT>
>>>>>>> ef0d341697957f8628c074acbc12bb9a12bbe146

  strncpy(msg, "COORDENADAS X Y Z \n\r", msgSIZE); //Iniciando serial
 80012ae:	f44f 72fa 	mov.w	r2, #500	@ 0x1f4
 80012b2:	493e      	ldr	r1, [pc, #248]	@ (80013ac <main+0x148>)
 80012b4:	483e      	ldr	r0, [pc, #248]	@ (80013b0 <main+0x14c>)
<<<<<<< HEAD
 80012b6:	f005 fe76 	bl	8006fa6 <strncpy>
  HAL_UART_Transmit_IT(&huart2, msg, strlen(msg));
 80012ba:	483d      	ldr	r0, [pc, #244]	@ (80013b0 <main+0x14c>)
=======
 80012b6:	f005 fe6a 	bl	8006f8e <strncpy>
  HAL_UART_Transmit_IT(&huart2, msg, strlen(msg));
 80012ba:	483d      	ldr	r0, [pc, #244]	@ (80013b0 <main+0x14c>)
=======
 8001274:	f000 fb1a 	bl	80018ac <MX_GPIO_Init>
  MX_DMA_Init();
 8001278:	f000 faf8 	bl	800186c <MX_DMA_Init>
  MX_ADC1_Init();
 800127c:	f000 f968 	bl	8001550 <MX_ADC1_Init>
  MX_USART2_UART_Init();
 8001280:	f000 faca 	bl	8001818 <MX_USART2_UART_Init>
  MX_TIM10_Init();
 8001284:	f000 fa80 	bl	8001788 <MX_TIM10_Init>
  MX_TIM11_Init();
 8001288:	f000 faa2 	bl	80017d0 <MX_TIM11_Init>
  MX_TIM8_Init();
 800128c:	f000 f9dc 	bl	8001648 <MX_TIM8_Init>
  /* USER CODE BEGIN 2 */
  HAL_ADC_Start_DMA(&hadc1, medidas, N_AMOSTRAS);
 8001290:	2204      	movs	r2, #4
 8001292:	4967      	ldr	r1, [pc, #412]	@ (8001430 <main+0x1cc>)
 8001294:	4867      	ldr	r0, [pc, #412]	@ (8001434 <main+0x1d0>)
 8001296:	f001 f859 	bl	800234c <HAL_ADC_Start_DMA>
  HAL_TIM_Base_Start(&htim11); // Timer para debounce
 800129a:	4867      	ldr	r0, [pc, #412]	@ (8001438 <main+0x1d4>)
 800129c:	f003 f93c 	bl	8004518 <HAL_TIM_Base_Start>
  HAL_TIM_Base_Start_IT(&htim10); // Timer para envio de msg na serial
 80012a0:	4866      	ldr	r0, [pc, #408]	@ (800143c <main+0x1d8>)
 80012a2:	f003 f9a1 	bl	80045e8 <HAL_TIM_Base_Start_IT>
  HAL_TIM_OC_Start_IT(&htim8, TIM_CHANNEL_1); // Timer de freq sampling do adc
 80012a6:	2100      	movs	r1, #0
 80012a8:	4865      	ldr	r0, [pc, #404]	@ (8001440 <main+0x1dc>)
 80012aa:	f003 fa67 	bl	800477c <HAL_TIM_OC_Start_IT>
  strncpy(msg, "COORDENADAS X Y Z \n\r", msgSIZE); //Iniciando serial
 80012ae:	f44f 72fa 	mov.w	r2, #500	@ 0x1f4
 80012b2:	4964      	ldr	r1, [pc, #400]	@ (8001444 <main+0x1e0>)
 80012b4:	4864      	ldr	r0, [pc, #400]	@ (8001448 <main+0x1e4>)
 80012b6:	f005 fef4 	bl	80070a2 <strncpy>
  HAL_UART_Transmit_IT(&huart2, msg, strlen(msg));
 80012ba:	4863      	ldr	r0, [pc, #396]	@ (8001448 <main+0x1e4>)
>>>>>>> 39e4d10438a821cc799a472af87a77c6796a1676
>>>>>>> ef0d341697957f8628c074acbc12bb9a12bbe146
 80012bc:	f7fe fff8 	bl	80002b0 <strlen>
 80012c0:	4603      	mov	r3, r0
 80012c2:	b29b      	uxth	r3, r3
 80012c4:	461a      	mov	r2, r3
<<<<<<< HEAD
 80012c6:	493a      	ldr	r1, [pc, #232]	@ (80013b0 <main+0x14c>)
 80012c8:	483a      	ldr	r0, [pc, #232]	@ (80013b4 <main+0x150>)
 80012ca:	f004 f979 	bl	80055c0 <HAL_UART_Transmit_IT>
=======
<<<<<<< HEAD
 80012c6:	493a      	ldr	r1, [pc, #232]	@ (80013b0 <main+0x14c>)
 80012c8:	483a      	ldr	r0, [pc, #232]	@ (80013b4 <main+0x150>)
 80012ca:	f004 f96d 	bl	80055a8 <HAL_UART_Transmit_IT>
>>>>>>> ef0d341697957f8628c074acbc12bb9a12bbe146
  HAL_UART_Receive_IT(&huart2, &set_offset, 1);
 80012ce:	2201      	movs	r2, #1
 80012d0:	4939      	ldr	r1, [pc, #228]	@ (80013b8 <main+0x154>)
 80012d2:	4838      	ldr	r0, [pc, #224]	@ (80013b4 <main+0x150>)
<<<<<<< HEAD
 80012d4:	f004 f9aa 	bl	800562c <HAL_UART_Receive_IT>
=======
 80012d4:	f004 f99e 	bl	8005614 <HAL_UART_Receive_IT>
=======
 80012c6:	4960      	ldr	r1, [pc, #384]	@ (8001448 <main+0x1e4>)
 80012c8:	4860      	ldr	r0, [pc, #384]	@ (800144c <main+0x1e8>)
 80012ca:	f004 f9f7 	bl	80056bc <HAL_UART_Transmit_IT>
  HAL_UART_Receive_IT(&huart2, set_offset, 1);
 80012ce:	4b60      	ldr	r3, [pc, #384]	@ (8001450 <main+0x1ec>)
 80012d0:	781b      	ldrb	r3, [r3, #0]
 80012d2:	2201      	movs	r2, #1
 80012d4:	4619      	mov	r1, r3
 80012d6:	485d      	ldr	r0, [pc, #372]	@ (800144c <main+0x1e8>)
 80012d8:	f004 fa26 	bl	8005728 <HAL_UART_Receive_IT>
>>>>>>> 39e4d10438a821cc799a472af87a77c6796a1676
>>>>>>> ef0d341697957f8628c074acbc12bb9a12bbe146
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	  // Debounce
	  if(__HAL_TIM_GET_FLAG(&htim11, TIM_FLAG_UPDATE)){
<<<<<<< HEAD
=======
<<<<<<< HEAD
>>>>>>> ef0d341697957f8628c074acbc12bb9a12bbe146
 80012d8:	4b31      	ldr	r3, [pc, #196]	@ (80013a0 <main+0x13c>)
 80012da:	681b      	ldr	r3, [r3, #0]
 80012dc:	691b      	ldr	r3, [r3, #16]
 80012de:	f003 0301 	and.w	r3, r3, #1
 80012e2:	2b01      	cmp	r3, #1
 80012e4:	d14c      	bne.n	8001380 <main+0x11c>
		 __HAL_TIM_CLEAR_FLAG(&htim11, TIM_FLAG_UPDATE);
 80012e6:	4b2e      	ldr	r3, [pc, #184]	@ (80013a0 <main+0x13c>)
 80012e8:	681b      	ldr	r3, [r3, #0]
 80012ea:	f06f 0201 	mvn.w	r2, #1
 80012ee:	611a      	str	r2, [r3, #16]
<<<<<<< HEAD

		 if(HAL_GPIO_ReadPin(BOTAO_GPIO_Port, BOTAO_Pin) == 0 && soltou == 0){
 80012f0:	2101      	movs	r1, #1
 80012f2:	4832      	ldr	r0, [pc, #200]	@ (80013bc <main+0x158>)
 80012f4:	f002 fa28 	bl	8003748 <HAL_GPIO_ReadPin>
 80012f8:	4603      	mov	r3, r0
 80012fa:	2b00      	cmp	r3, #0
 80012fc:	d140      	bne.n	8001380 <main+0x11c>
 80012fe:	4b30      	ldr	r3, [pc, #192]	@ (80013c0 <main+0x15c>)
 8001300:	781b      	ldrb	r3, [r3, #0]
 8001302:	2b00      	cmp	r3, #0
 8001304:	d13c      	bne.n	8001380 <main+0x11c>
		  	soltou = 1;
 8001306:	4b2e      	ldr	r3, [pc, #184]	@ (80013c0 <main+0x15c>)
 8001308:	2201      	movs	r2, #1
 800130a:	701a      	strb	r2, [r3, #0]
		  	coordenadas_xyz[0] = x;
 800130c:	4b2d      	ldr	r3, [pc, #180]	@ (80013c4 <main+0x160>)
 800130e:	681b      	ldr	r3, [r3, #0]
 8001310:	4a2d      	ldr	r2, [pc, #180]	@ (80013c8 <main+0x164>)
 8001312:	6013      	str	r3, [r2, #0]
		  	coordenadas_xyz[1] = y;
 8001314:	4b2d      	ldr	r3, [pc, #180]	@ (80013cc <main+0x168>)
 8001316:	681b      	ldr	r3, [r3, #0]
 8001318:	4a2b      	ldr	r2, [pc, #172]	@ (80013c8 <main+0x164>)
 800131a:	6053      	str	r3, [r2, #4]
		  	coordenadas_xyz[2] = z;
 800131c:	4b2c      	ldr	r3, [pc, #176]	@ (80013d0 <main+0x16c>)
 800131e:	681b      	ldr	r3, [r3, #0]
 8001320:	4a29      	ldr	r2, [pc, #164]	@ (80013c8 <main+0x164>)
 8001322:	6093      	str	r3, [r2, #8]
		  	snprintf(msg, msgSIZE, "{\"X\": %.2f, \"Y\": %.2f, \"Z\": %.2f,  \"guardar\": %i}\n",
		  			 coordenadas_xyz[0], coordenadas_xyz[1], coordenadas_xyz[2], soltou);
 8001324:	4b28      	ldr	r3, [pc, #160]	@ (80013c8 <main+0x164>)
 8001326:	681b      	ldr	r3, [r3, #0]
		  	snprintf(msg, msgSIZE, "{\"X\": %.2f, \"Y\": %.2f, \"Z\": %.2f,  \"guardar\": %i}\n",
 8001328:	4618      	mov	r0, r3
 800132a:	f7ff f92d 	bl	8000588 <__aeabi_f2d>
 800132e:	4604      	mov	r4, r0
 8001330:	460d      	mov	r5, r1
		  			 coordenadas_xyz[0], coordenadas_xyz[1], coordenadas_xyz[2], soltou);
 8001332:	4b25      	ldr	r3, [pc, #148]	@ (80013c8 <main+0x164>)
 8001334:	685b      	ldr	r3, [r3, #4]
		  	snprintf(msg, msgSIZE, "{\"X\": %.2f, \"Y\": %.2f, \"Z\": %.2f,  \"guardar\": %i}\n",
 8001336:	4618      	mov	r0, r3
 8001338:	f7ff f926 	bl	8000588 <__aeabi_f2d>
 800133c:	4680      	mov	r8, r0
 800133e:	4689      	mov	r9, r1
		  			 coordenadas_xyz[0], coordenadas_xyz[1], coordenadas_xyz[2], soltou);
 8001340:	4b21      	ldr	r3, [pc, #132]	@ (80013c8 <main+0x164>)
 8001342:	689b      	ldr	r3, [r3, #8]
		  	snprintf(msg, msgSIZE, "{\"X\": %.2f, \"Y\": %.2f, \"Z\": %.2f,  \"guardar\": %i}\n",
 8001344:	4618      	mov	r0, r3
 8001346:	f7ff f91f 	bl	8000588 <__aeabi_f2d>
 800134a:	4602      	mov	r2, r0
 800134c:	460b      	mov	r3, r1
 800134e:	491c      	ldr	r1, [pc, #112]	@ (80013c0 <main+0x15c>)
 8001350:	7809      	ldrb	r1, [r1, #0]
 8001352:	9106      	str	r1, [sp, #24]
 8001354:	e9cd 2304 	strd	r2, r3, [sp, #16]
 8001358:	e9cd 8902 	strd	r8, r9, [sp, #8]
 800135c:	e9cd 4500 	strd	r4, r5, [sp]
 8001360:	4a1c      	ldr	r2, [pc, #112]	@ (80013d4 <main+0x170>)
 8001362:	f44f 71fa 	mov.w	r1, #500	@ 0x1f4
 8001366:	4812      	ldr	r0, [pc, #72]	@ (80013b0 <main+0x14c>)
 8001368:	f005 fd9e 	bl	8006ea8 <sniprintf>
		  	HAL_UART_Transmit_IT(&huart2, msg, strlen(msg));
 800136c:	4810      	ldr	r0, [pc, #64]	@ (80013b0 <main+0x14c>)
 800136e:	f7fe ff9f 	bl	80002b0 <strlen>
 8001372:	4603      	mov	r3, r0
 8001374:	b29b      	uxth	r3, r3
 8001376:	461a      	mov	r2, r3
 8001378:	490d      	ldr	r1, [pc, #52]	@ (80013b0 <main+0x14c>)
 800137a:	480e      	ldr	r0, [pc, #56]	@ (80013b4 <main+0x150>)
 800137c:	f004 f920 	bl	80055c0 <HAL_UART_Transmit_IT>
		 }
	  }

	  if(HAL_GPIO_ReadPin(BOTAO_GPIO_Port, BOTAO_Pin) == 1){
 8001380:	2101      	movs	r1, #1
 8001382:	480e      	ldr	r0, [pc, #56]	@ (80013bc <main+0x158>)
 8001384:	f002 f9e0 	bl	8003748 <HAL_GPIO_ReadPin>
 8001388:	4603      	mov	r3, r0
 800138a:	2b01      	cmp	r3, #1
 800138c:	d1a4      	bne.n	80012d8 <main+0x74>
		  soltou = 0;
 800138e:	4b0c      	ldr	r3, [pc, #48]	@ (80013c0 <main+0x15c>)
 8001390:	2200      	movs	r2, #0
 8001392:	701a      	strb	r2, [r3, #0]
	  if(__HAL_TIM_GET_FLAG(&htim11, TIM_FLAG_UPDATE)){
 8001394:	e7a0      	b.n	80012d8 <main+0x74>
 8001396:	bf00      	nop
 8001398:	200003b8 	.word	0x200003b8
 800139c:	200001f0 	.word	0x200001f0
 80013a0:	20000328 	.word	0x20000328
 80013a4:	200002e0 	.word	0x200002e0
 80013a8:	20000298 	.word	0x20000298
 80013ac:	0800a270 	.word	0x0800a270
 80013b0:	20000408 	.word	0x20000408
 80013b4:	20000370 	.word	0x20000370
 80013b8:	200003c9 	.word	0x200003c9
 80013bc:	40020800 	.word	0x40020800
 80013c0:	200003c8 	.word	0x200003c8
 80013c4:	20000400 	.word	0x20000400
 80013c8:	200003cc 	.word	0x200003cc
 80013cc:	20000404 	.word	0x20000404
 80013d0:	200003fc 	.word	0x200003fc
 80013d4:	0800a288 	.word	0x0800a288

080013d8 <SystemClock_Config>:
=======

		 if(HAL_GPIO_ReadPin(BOTAO_GPIO_Port, BOTAO_Pin) == 0 && soltou == 0){
 80012f0:	2101      	movs	r1, #1
 80012f2:	4832      	ldr	r0, [pc, #200]	@ (80013bc <main+0x158>)
 80012f4:	f002 fa1c 	bl	8003730 <HAL_GPIO_ReadPin>
 80012f8:	4603      	mov	r3, r0
 80012fa:	2b00      	cmp	r3, #0
 80012fc:	d140      	bne.n	8001380 <main+0x11c>
 80012fe:	4b30      	ldr	r3, [pc, #192]	@ (80013c0 <main+0x15c>)
 8001300:	781b      	ldrb	r3, [r3, #0]
 8001302:	2b00      	cmp	r3, #0
 8001304:	d13c      	bne.n	8001380 <main+0x11c>
		  	soltou = 1;
 8001306:	4b2e      	ldr	r3, [pc, #184]	@ (80013c0 <main+0x15c>)
 8001308:	2201      	movs	r2, #1
 800130a:	701a      	strb	r2, [r3, #0]
		  	coordenadas_xyz[0] = x;
 800130c:	4b2d      	ldr	r3, [pc, #180]	@ (80013c4 <main+0x160>)
 800130e:	681b      	ldr	r3, [r3, #0]
 8001310:	4a2d      	ldr	r2, [pc, #180]	@ (80013c8 <main+0x164>)
 8001312:	6013      	str	r3, [r2, #0]
		  	coordenadas_xyz[1] = y;
 8001314:	4b2d      	ldr	r3, [pc, #180]	@ (80013cc <main+0x168>)
 8001316:	681b      	ldr	r3, [r3, #0]
 8001318:	4a2b      	ldr	r2, [pc, #172]	@ (80013c8 <main+0x164>)
 800131a:	6053      	str	r3, [r2, #4]
		  	coordenadas_xyz[2] = z;
 800131c:	4b2c      	ldr	r3, [pc, #176]	@ (80013d0 <main+0x16c>)
 800131e:	681b      	ldr	r3, [r3, #0]
 8001320:	4a29      	ldr	r2, [pc, #164]	@ (80013c8 <main+0x164>)
 8001322:	6093      	str	r3, [r2, #8]
		  	snprintf(msg, msgSIZE, "{\"X\": %.2f, \"Y\": %.2f, \"Z\": %.2f,  \"guardar\": %i}\n",
		  			 coordenadas_xyz[0], coordenadas_xyz[1], coordenadas_xyz[2], soltou);
 8001324:	4b28      	ldr	r3, [pc, #160]	@ (80013c8 <main+0x164>)
 8001326:	681b      	ldr	r3, [r3, #0]
		  	snprintf(msg, msgSIZE, "{\"X\": %.2f, \"Y\": %.2f, \"Z\": %.2f,  \"guardar\": %i}\n",
 8001328:	4618      	mov	r0, r3
 800132a:	f7ff f92d 	bl	8000588 <__aeabi_f2d>
 800132e:	4604      	mov	r4, r0
 8001330:	460d      	mov	r5, r1
		  			 coordenadas_xyz[0], coordenadas_xyz[1], coordenadas_xyz[2], soltou);
 8001332:	4b25      	ldr	r3, [pc, #148]	@ (80013c8 <main+0x164>)
 8001334:	685b      	ldr	r3, [r3, #4]
		  	snprintf(msg, msgSIZE, "{\"X\": %.2f, \"Y\": %.2f, \"Z\": %.2f,  \"guardar\": %i}\n",
 8001336:	4618      	mov	r0, r3
 8001338:	f7ff f926 	bl	8000588 <__aeabi_f2d>
 800133c:	4680      	mov	r8, r0
 800133e:	4689      	mov	r9, r1
		  			 coordenadas_xyz[0], coordenadas_xyz[1], coordenadas_xyz[2], soltou);
 8001340:	4b21      	ldr	r3, [pc, #132]	@ (80013c8 <main+0x164>)
 8001342:	689b      	ldr	r3, [r3, #8]
		  	snprintf(msg, msgSIZE, "{\"X\": %.2f, \"Y\": %.2f, \"Z\": %.2f,  \"guardar\": %i}\n",
 8001344:	4618      	mov	r0, r3
 8001346:	f7ff f91f 	bl	8000588 <__aeabi_f2d>
 800134a:	4602      	mov	r2, r0
 800134c:	460b      	mov	r3, r1
 800134e:	491c      	ldr	r1, [pc, #112]	@ (80013c0 <main+0x15c>)
 8001350:	7809      	ldrb	r1, [r1, #0]
 8001352:	9106      	str	r1, [sp, #24]
 8001354:	e9cd 2304 	strd	r2, r3, [sp, #16]
 8001358:	e9cd 8902 	strd	r8, r9, [sp, #8]
 800135c:	e9cd 4500 	strd	r4, r5, [sp]
 8001360:	4a1c      	ldr	r2, [pc, #112]	@ (80013d4 <main+0x170>)
 8001362:	f44f 71fa 	mov.w	r1, #500	@ 0x1f4
 8001366:	4812      	ldr	r0, [pc, #72]	@ (80013b0 <main+0x14c>)
 8001368:	f005 fd92 	bl	8006e90 <sniprintf>
		  	HAL_UART_Transmit_IT(&huart2, msg, strlen(msg));
 800136c:	4810      	ldr	r0, [pc, #64]	@ (80013b0 <main+0x14c>)
 800136e:	f7fe ff9f 	bl	80002b0 <strlen>
 8001372:	4603      	mov	r3, r0
 8001374:	b29b      	uxth	r3, r3
 8001376:	461a      	mov	r2, r3
 8001378:	490d      	ldr	r1, [pc, #52]	@ (80013b0 <main+0x14c>)
 800137a:	480e      	ldr	r0, [pc, #56]	@ (80013b4 <main+0x150>)
 800137c:	f004 f914 	bl	80055a8 <HAL_UART_Transmit_IT>
		 }
	  }

	  if(HAL_GPIO_ReadPin(BOTAO_GPIO_Port, BOTAO_Pin) == 1){
 8001380:	2101      	movs	r1, #1
 8001382:	480e      	ldr	r0, [pc, #56]	@ (80013bc <main+0x158>)
 8001384:	f002 f9d4 	bl	8003730 <HAL_GPIO_ReadPin>
 8001388:	4603      	mov	r3, r0
 800138a:	2b01      	cmp	r3, #1
 800138c:	d1a4      	bne.n	80012d8 <main+0x74>
		  soltou = 0;
 800138e:	4b0c      	ldr	r3, [pc, #48]	@ (80013c0 <main+0x15c>)
 8001390:	2200      	movs	r2, #0
 8001392:	701a      	strb	r2, [r3, #0]
	  if(__HAL_TIM_GET_FLAG(&htim11, TIM_FLAG_UPDATE)){
 8001394:	e7a0      	b.n	80012d8 <main+0x74>
 8001396:	bf00      	nop
 8001398:	200003b8 	.word	0x200003b8
 800139c:	200001f0 	.word	0x200001f0
 80013a0:	20000328 	.word	0x20000328
 80013a4:	200002e0 	.word	0x200002e0
 80013a8:	20000298 	.word	0x20000298
 80013ac:	0800a258 	.word	0x0800a258
 80013b0:	20000408 	.word	0x20000408
 80013b4:	20000370 	.word	0x20000370
 80013b8:	200003c9 	.word	0x200003c9
 80013bc:	40020800 	.word	0x40020800
 80013c0:	200003c8 	.word	0x200003c8
 80013c4:	20000400 	.word	0x20000400
 80013c8:	200003cc 	.word	0x200003cc
 80013cc:	20000404 	.word	0x20000404
 80013d0:	200003fc 	.word	0x200003fc
 80013d4:	0800a270 	.word	0x0800a270

080013d8 <SystemClock_Config>:
=======
 80012dc:	4b56      	ldr	r3, [pc, #344]	@ (8001438 <main+0x1d4>)
 80012de:	681b      	ldr	r3, [r3, #0]
 80012e0:	691b      	ldr	r3, [r3, #16]
 80012e2:	f003 0301 	and.w	r3, r3, #1
 80012e6:	2b01      	cmp	r3, #1
 80012e8:	d112      	bne.n	8001310 <main+0xac>
		 __HAL_TIM_CLEAR_FLAG(&htim11, TIM_FLAG_UPDATE);
 80012ea:	4b53      	ldr	r3, [pc, #332]	@ (8001438 <main+0x1d4>)
 80012ec:	681b      	ldr	r3, [r3, #0]
 80012ee:	f06f 0201 	mvn.w	r2, #1
 80012f2:	611a      	str	r2, [r3, #16]

		 if(HAL_GPIO_ReadPin(BOTAO_GPIO_Port, BOTAO_Pin) == 1 && soltou == 0){
 80012f4:	2101      	movs	r1, #1
 80012f6:	4857      	ldr	r0, [pc, #348]	@ (8001454 <main+0x1f0>)
 80012f8:	f002 faa4 	bl	8003844 <HAL_GPIO_ReadPin>
 80012fc:	4603      	mov	r3, r0
 80012fe:	2b01      	cmp	r3, #1
 8001300:	d106      	bne.n	8001310 <main+0xac>
 8001302:	4b55      	ldr	r3, [pc, #340]	@ (8001458 <main+0x1f4>)
 8001304:	781b      	ldrb	r3, [r3, #0]
 8001306:	2b00      	cmp	r3, #0
 8001308:	d102      	bne.n	8001310 <main+0xac>
		  	soltou = 1;
 800130a:	4b53      	ldr	r3, [pc, #332]	@ (8001458 <main+0x1f4>)
 800130c:	2201      	movs	r2, #1
 800130e:	701a      	strb	r2, [r3, #0]
		 }
	  }

	  if(HAL_GPIO_ReadPin(BOTAO_GPIO_Port, BOTAO_Pin) == 0){
 8001310:	2101      	movs	r1, #1
 8001312:	4850      	ldr	r0, [pc, #320]	@ (8001454 <main+0x1f0>)
 8001314:	f002 fa96 	bl	8003844 <HAL_GPIO_ReadPin>
 8001318:	4603      	mov	r3, r0
 800131a:	2b00      	cmp	r3, #0
 800131c:	d1de      	bne.n	80012dc <main+0x78>
		  soltou = 0;
 800131e:	4b4e      	ldr	r3, [pc, #312]	@ (8001458 <main+0x1f4>)
 8001320:	2200      	movs	r2, #0
 8001322:	701a      	strb	r2, [r3, #0]
		  snprintf(msg, msgSIZE, "{\"x\": %.2f ,\"y\": %.2f, \"z\": %.2f, \"angulo1\": %.2f, \"angulo2\": %.2f, \"angulo3\": %.2f, \"angulo4\": %.2f, \"X\": %.2f, \"Y\": %.2f, \"Z\": %.2f,  \"guardar\": %i}\n",
 8001324:	4b4d      	ldr	r3, [pc, #308]	@ (800145c <main+0x1f8>)
 8001326:	681b      	ldr	r3, [r3, #0]
 8001328:	4618      	mov	r0, r3
 800132a:	f7ff f92d 	bl	8000588 <__aeabi_f2d>
 800132e:	e9c7 010a 	strd	r0, r1, [r7, #40]	@ 0x28
 8001332:	4b4b      	ldr	r3, [pc, #300]	@ (8001460 <main+0x1fc>)
 8001334:	681b      	ldr	r3, [r3, #0]
 8001336:	4618      	mov	r0, r3
 8001338:	f7ff f926 	bl	8000588 <__aeabi_f2d>
 800133c:	e9c7 0108 	strd	r0, r1, [r7, #32]
 8001340:	4b48      	ldr	r3, [pc, #288]	@ (8001464 <main+0x200>)
 8001342:	681b      	ldr	r3, [r3, #0]
 8001344:	4618      	mov	r0, r3
 8001346:	f7ff f91f 	bl	8000588 <__aeabi_f2d>
 800134a:	e9c7 0106 	strd	r0, r1, [r7, #24]
		  x, y, z, angulos_graus[0], angulos_graus[1] - angulos_graus[0], angulos_graus[2] - angulos_graus[1], angulos_graus[3], coordenadas_xyz[0], coordenadas_xyz[1], coordenadas_xyz[2], soltou);
 800134e:	4b46      	ldr	r3, [pc, #280]	@ (8001468 <main+0x204>)
 8001350:	681b      	ldr	r3, [r3, #0]
		  snprintf(msg, msgSIZE, "{\"x\": %.2f ,\"y\": %.2f, \"z\": %.2f, \"angulo1\": %.2f, \"angulo2\": %.2f, \"angulo3\": %.2f, \"angulo4\": %.2f, \"X\": %.2f, \"Y\": %.2f, \"Z\": %.2f,  \"guardar\": %i}\n",
 8001352:	4618      	mov	r0, r3
 8001354:	f7ff f918 	bl	8000588 <__aeabi_f2d>
 8001358:	e9c7 0104 	strd	r0, r1, [r7, #16]
		  x, y, z, angulos_graus[0], angulos_graus[1] - angulos_graus[0], angulos_graus[2] - angulos_graus[1], angulos_graus[3], coordenadas_xyz[0], coordenadas_xyz[1], coordenadas_xyz[2], soltou);
 800135c:	4b42      	ldr	r3, [pc, #264]	@ (8001468 <main+0x204>)
 800135e:	ed93 7a01 	vldr	s14, [r3, #4]
 8001362:	4b41      	ldr	r3, [pc, #260]	@ (8001468 <main+0x204>)
 8001364:	edd3 7a00 	vldr	s15, [r3]
 8001368:	ee77 7a67 	vsub.f32	s15, s14, s15
		  snprintf(msg, msgSIZE, "{\"x\": %.2f ,\"y\": %.2f, \"z\": %.2f, \"angulo1\": %.2f, \"angulo2\": %.2f, \"angulo3\": %.2f, \"angulo4\": %.2f, \"X\": %.2f, \"Y\": %.2f, \"Z\": %.2f,  \"guardar\": %i}\n",
 800136c:	ee17 0a90 	vmov	r0, s15
 8001370:	f7ff f90a 	bl	8000588 <__aeabi_f2d>
 8001374:	e9c7 0102 	strd	r0, r1, [r7, #8]
		  x, y, z, angulos_graus[0], angulos_graus[1] - angulos_graus[0], angulos_graus[2] - angulos_graus[1], angulos_graus[3], coordenadas_xyz[0], coordenadas_xyz[1], coordenadas_xyz[2], soltou);
 8001378:	4b3b      	ldr	r3, [pc, #236]	@ (8001468 <main+0x204>)
 800137a:	ed93 7a02 	vldr	s14, [r3, #8]
 800137e:	4b3a      	ldr	r3, [pc, #232]	@ (8001468 <main+0x204>)
 8001380:	edd3 7a01 	vldr	s15, [r3, #4]
 8001384:	ee77 7a67 	vsub.f32	s15, s14, s15
		  snprintf(msg, msgSIZE, "{\"x\": %.2f ,\"y\": %.2f, \"z\": %.2f, \"angulo1\": %.2f, \"angulo2\": %.2f, \"angulo3\": %.2f, \"angulo4\": %.2f, \"X\": %.2f, \"Y\": %.2f, \"Z\": %.2f,  \"guardar\": %i}\n",
 8001388:	ee17 0a90 	vmov	r0, s15
 800138c:	f7ff f8fc 	bl	8000588 <__aeabi_f2d>
 8001390:	e9c7 0100 	strd	r0, r1, [r7]
		  x, y, z, angulos_graus[0], angulos_graus[1] - angulos_graus[0], angulos_graus[2] - angulos_graus[1], angulos_graus[3], coordenadas_xyz[0], coordenadas_xyz[1], coordenadas_xyz[2], soltou);
 8001394:	4b34      	ldr	r3, [pc, #208]	@ (8001468 <main+0x204>)
 8001396:	68db      	ldr	r3, [r3, #12]
		  snprintf(msg, msgSIZE, "{\"x\": %.2f ,\"y\": %.2f, \"z\": %.2f, \"angulo1\": %.2f, \"angulo2\": %.2f, \"angulo3\": %.2f, \"angulo4\": %.2f, \"X\": %.2f, \"Y\": %.2f, \"Z\": %.2f,  \"guardar\": %i}\n",
 8001398:	4618      	mov	r0, r3
 800139a:	f7ff f8f5 	bl	8000588 <__aeabi_f2d>
 800139e:	4682      	mov	sl, r0
 80013a0:	468b      	mov	fp, r1
		  x, y, z, angulos_graus[0], angulos_graus[1] - angulos_graus[0], angulos_graus[2] - angulos_graus[1], angulos_graus[3], coordenadas_xyz[0], coordenadas_xyz[1], coordenadas_xyz[2], soltou);
 80013a2:	4b32      	ldr	r3, [pc, #200]	@ (800146c <main+0x208>)
 80013a4:	681b      	ldr	r3, [r3, #0]
		  snprintf(msg, msgSIZE, "{\"x\": %.2f ,\"y\": %.2f, \"z\": %.2f, \"angulo1\": %.2f, \"angulo2\": %.2f, \"angulo3\": %.2f, \"angulo4\": %.2f, \"X\": %.2f, \"Y\": %.2f, \"Z\": %.2f,  \"guardar\": %i}\n",
 80013a6:	4618      	mov	r0, r3
 80013a8:	f7ff f8ee 	bl	8000588 <__aeabi_f2d>
 80013ac:	4680      	mov	r8, r0
 80013ae:	4689      	mov	r9, r1
		  x, y, z, angulos_graus[0], angulos_graus[1] - angulos_graus[0], angulos_graus[2] - angulos_graus[1], angulos_graus[3], coordenadas_xyz[0], coordenadas_xyz[1], coordenadas_xyz[2], soltou);
 80013b0:	4b2e      	ldr	r3, [pc, #184]	@ (800146c <main+0x208>)
 80013b2:	685b      	ldr	r3, [r3, #4]
		  snprintf(msg, msgSIZE, "{\"x\": %.2f ,\"y\": %.2f, \"z\": %.2f, \"angulo1\": %.2f, \"angulo2\": %.2f, \"angulo3\": %.2f, \"angulo4\": %.2f, \"X\": %.2f, \"Y\": %.2f, \"Z\": %.2f,  \"guardar\": %i}\n",
 80013b4:	4618      	mov	r0, r3
 80013b6:	f7ff f8e7 	bl	8000588 <__aeabi_f2d>
 80013ba:	4604      	mov	r4, r0
 80013bc:	460d      	mov	r5, r1
		  x, y, z, angulos_graus[0], angulos_graus[1] - angulos_graus[0], angulos_graus[2] - angulos_graus[1], angulos_graus[3], coordenadas_xyz[0], coordenadas_xyz[1], coordenadas_xyz[2], soltou);
 80013be:	4b2b      	ldr	r3, [pc, #172]	@ (800146c <main+0x208>)
 80013c0:	689b      	ldr	r3, [r3, #8]
		  snprintf(msg, msgSIZE, "{\"x\": %.2f ,\"y\": %.2f, \"z\": %.2f, \"angulo1\": %.2f, \"angulo2\": %.2f, \"angulo3\": %.2f, \"angulo4\": %.2f, \"X\": %.2f, \"Y\": %.2f, \"Z\": %.2f,  \"guardar\": %i}\n",
 80013c2:	4618      	mov	r0, r3
 80013c4:	f7ff f8e0 	bl	8000588 <__aeabi_f2d>
 80013c8:	4b23      	ldr	r3, [pc, #140]	@ (8001458 <main+0x1f4>)
 80013ca:	781b      	ldrb	r3, [r3, #0]
 80013cc:	9314      	str	r3, [sp, #80]	@ 0x50
 80013ce:	e9cd 0112 	strd	r0, r1, [sp, #72]	@ 0x48
 80013d2:	e9cd 4510 	strd	r4, r5, [sp, #64]	@ 0x40
 80013d6:	e9cd 890e 	strd	r8, r9, [sp, #56]	@ 0x38
 80013da:	e9cd ab0c 	strd	sl, fp, [sp, #48]	@ 0x30
 80013de:	ed97 7b00 	vldr	d7, [r7]
 80013e2:	ed8d 7b0a 	vstr	d7, [sp, #40]	@ 0x28
 80013e6:	ed97 7b02 	vldr	d7, [r7, #8]
 80013ea:	ed8d 7b08 	vstr	d7, [sp, #32]
 80013ee:	ed97 7b04 	vldr	d7, [r7, #16]
 80013f2:	ed8d 7b06 	vstr	d7, [sp, #24]
 80013f6:	ed97 7b06 	vldr	d7, [r7, #24]
 80013fa:	ed8d 7b04 	vstr	d7, [sp, #16]
 80013fe:	ed97 7b08 	vldr	d7, [r7, #32]
 8001402:	ed8d 7b02 	vstr	d7, [sp, #8]
 8001406:	ed97 7b0a 	vldr	d7, [r7, #40]	@ 0x28
 800140a:	ed8d 7b00 	vstr	d7, [sp]
 800140e:	4a18      	ldr	r2, [pc, #96]	@ (8001470 <main+0x20c>)
 8001410:	f44f 71fa 	mov.w	r1, #500	@ 0x1f4
 8001414:	480c      	ldr	r0, [pc, #48]	@ (8001448 <main+0x1e4>)
 8001416:	f005 fdc5 	bl	8006fa4 <sniprintf>
		  HAL_UART_Transmit_IT(&huart2, msg, strlen(msg));
 800141a:	480b      	ldr	r0, [pc, #44]	@ (8001448 <main+0x1e4>)
 800141c:	f7fe ff48 	bl	80002b0 <strlen>
 8001420:	4603      	mov	r3, r0
 8001422:	b29b      	uxth	r3, r3
 8001424:	461a      	mov	r2, r3
 8001426:	4908      	ldr	r1, [pc, #32]	@ (8001448 <main+0x1e4>)
 8001428:	4808      	ldr	r0, [pc, #32]	@ (800144c <main+0x1e8>)
 800142a:	f004 f947 	bl	80056bc <HAL_UART_Transmit_IT>
	  if(__HAL_TIM_GET_FLAG(&htim11, TIM_FLAG_UPDATE)){
 800142e:	e755      	b.n	80012dc <main+0x78>
 8001430:	200003b8 	.word	0x200003b8
 8001434:	200001f0 	.word	0x200001f0
 8001438:	20000328 	.word	0x20000328
 800143c:	200002e0 	.word	0x200002e0
 8001440:	20000298 	.word	0x20000298
 8001444:	0800a368 	.word	0x0800a368
 8001448:	20000408 	.word	0x20000408
 800144c:	20000370 	.word	0x20000370
 8001450:	200003c9 	.word	0x200003c9
 8001454:	40020800 	.word	0x40020800
 8001458:	200003c8 	.word	0x200003c8
 800145c:	20000400 	.word	0x20000400
 8001460:	20000404 	.word	0x20000404
 8001464:	200003fc 	.word	0x200003fc
 8001468:	200003e8 	.word	0x200003e8
 800146c:	200003cc 	.word	0x200003cc
 8001470:	0800a380 	.word	0x0800a380

08001474 <SystemClock_Config>:
>>>>>>> 39e4d10438a821cc799a472af87a77c6796a1676
>>>>>>> ef0d341697957f8628c074acbc12bb9a12bbe146
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
<<<<<<< HEAD
=======
<<<<<<< HEAD
>>>>>>> ef0d341697957f8628c074acbc12bb9a12bbe146
 80013d8:	b580      	push	{r7, lr}
 80013da:	b094      	sub	sp, #80	@ 0x50
 80013dc:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80013de:	f107 031c 	add.w	r3, r7, #28
 80013e2:	2234      	movs	r2, #52	@ 0x34
 80013e4:	2100      	movs	r1, #0
 80013e6:	4618      	mov	r0, r3
<<<<<<< HEAD
 80013e8:	f005 fdd5 	bl	8006f96 <memset>
=======
 80013e8:	f005 fdc9 	bl	8006f7e <memset>
>>>>>>> ef0d341697957f8628c074acbc12bb9a12bbe146
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80013ec:	f107 0308 	add.w	r3, r7, #8
 80013f0:	2200      	movs	r2, #0
 80013f2:	601a      	str	r2, [r3, #0]
 80013f4:	605a      	str	r2, [r3, #4]
 80013f6:	609a      	str	r2, [r3, #8]
 80013f8:	60da      	str	r2, [r3, #12]
 80013fa:	611a      	str	r2, [r3, #16]
<<<<<<< HEAD
=======
=======
 8001474:	b580      	push	{r7, lr}
 8001476:	b094      	sub	sp, #80	@ 0x50
 8001478:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800147a:	f107 031c 	add.w	r3, r7, #28
 800147e:	2234      	movs	r2, #52	@ 0x34
 8001480:	2100      	movs	r1, #0
 8001482:	4618      	mov	r0, r3
 8001484:	f005 fe05 	bl	8007092 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001488:	f107 0308 	add.w	r3, r7, #8
 800148c:	2200      	movs	r2, #0
 800148e:	601a      	str	r2, [r3, #0]
 8001490:	605a      	str	r2, [r3, #4]
 8001492:	609a      	str	r2, [r3, #8]
 8001494:	60da      	str	r2, [r3, #12]
 8001496:	611a      	str	r2, [r3, #16]
>>>>>>> 39e4d10438a821cc799a472af87a77c6796a1676
>>>>>>> ef0d341697957f8628c074acbc12bb9a12bbe146

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
<<<<<<< HEAD
=======
<<<<<<< HEAD
>>>>>>> ef0d341697957f8628c074acbc12bb9a12bbe146
 80013fc:	2300      	movs	r3, #0
 80013fe:	607b      	str	r3, [r7, #4]
 8001400:	4b2a      	ldr	r3, [pc, #168]	@ (80014ac <SystemClock_Config+0xd4>)
 8001402:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001404:	4a29      	ldr	r2, [pc, #164]	@ (80014ac <SystemClock_Config+0xd4>)
 8001406:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800140a:	6413      	str	r3, [r2, #64]	@ 0x40
 800140c:	4b27      	ldr	r3, [pc, #156]	@ (80014ac <SystemClock_Config+0xd4>)
 800140e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001410:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001414:	607b      	str	r3, [r7, #4]
 8001416:	687b      	ldr	r3, [r7, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 8001418:	2300      	movs	r3, #0
 800141a:	603b      	str	r3, [r7, #0]
 800141c:	4b24      	ldr	r3, [pc, #144]	@ (80014b0 <SystemClock_Config+0xd8>)
 800141e:	681b      	ldr	r3, [r3, #0]
 8001420:	f423 4340 	bic.w	r3, r3, #49152	@ 0xc000
 8001424:	4a22      	ldr	r2, [pc, #136]	@ (80014b0 <SystemClock_Config+0xd8>)
 8001426:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 800142a:	6013      	str	r3, [r2, #0]
 800142c:	4b20      	ldr	r3, [pc, #128]	@ (80014b0 <SystemClock_Config+0xd8>)
 800142e:	681b      	ldr	r3, [r3, #0]
 8001430:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 8001434:	603b      	str	r3, [r7, #0]
 8001436:	683b      	ldr	r3, [r7, #0]
<<<<<<< HEAD
=======
=======
 8001498:	2300      	movs	r3, #0
 800149a:	607b      	str	r3, [r7, #4]
 800149c:	4b2a      	ldr	r3, [pc, #168]	@ (8001548 <SystemClock_Config+0xd4>)
 800149e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80014a0:	4a29      	ldr	r2, [pc, #164]	@ (8001548 <SystemClock_Config+0xd4>)
 80014a2:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80014a6:	6413      	str	r3, [r2, #64]	@ 0x40
 80014a8:	4b27      	ldr	r3, [pc, #156]	@ (8001548 <SystemClock_Config+0xd4>)
 80014aa:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80014ac:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80014b0:	607b      	str	r3, [r7, #4]
 80014b2:	687b      	ldr	r3, [r7, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 80014b4:	2300      	movs	r3, #0
 80014b6:	603b      	str	r3, [r7, #0]
 80014b8:	4b24      	ldr	r3, [pc, #144]	@ (800154c <SystemClock_Config+0xd8>)
 80014ba:	681b      	ldr	r3, [r3, #0]
 80014bc:	f423 4340 	bic.w	r3, r3, #49152	@ 0xc000
 80014c0:	4a22      	ldr	r2, [pc, #136]	@ (800154c <SystemClock_Config+0xd8>)
 80014c2:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80014c6:	6013      	str	r3, [r2, #0]
 80014c8:	4b20      	ldr	r3, [pc, #128]	@ (800154c <SystemClock_Config+0xd8>)
 80014ca:	681b      	ldr	r3, [r3, #0]
 80014cc:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 80014d0:	603b      	str	r3, [r7, #0]
 80014d2:	683b      	ldr	r3, [r7, #0]
>>>>>>> 39e4d10438a821cc799a472af87a77c6796a1676
>>>>>>> ef0d341697957f8628c074acbc12bb9a12bbe146

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
<<<<<<< HEAD
=======
<<<<<<< HEAD
>>>>>>> ef0d341697957f8628c074acbc12bb9a12bbe146
 8001438:	2302      	movs	r3, #2
 800143a:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 800143c:	2301      	movs	r3, #1
 800143e:	62bb      	str	r3, [r7, #40]	@ 0x28
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8001440:	2310      	movs	r3, #16
 8001442:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001444:	2302      	movs	r3, #2
 8001446:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8001448:	2300      	movs	r3, #0
 800144a:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLM = 16;
 800144c:	2310      	movs	r3, #16
 800144e:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLN = 336;
 8001450:	f44f 73a8 	mov.w	r3, #336	@ 0x150
 8001454:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV4;
 8001456:	2304      	movs	r3, #4
 8001458:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLQ = 2;
 800145a:	2302      	movs	r3, #2
 800145c:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLR = 2;
 800145e:	2302      	movs	r3, #2
 8001460:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001462:	f107 031c 	add.w	r3, r7, #28
 8001466:	4618      	mov	r0, r3
<<<<<<< HEAD
 8001468:	f002 fcea 	bl	8003e40 <HAL_RCC_OscConfig>
=======
 8001468:	f002 fcde 	bl	8003e28 <HAL_RCC_OscConfig>
>>>>>>> ef0d341697957f8628c074acbc12bb9a12bbe146
 800146c:	4603      	mov	r3, r0
 800146e:	2b00      	cmp	r3, #0
 8001470:	d001      	beq.n	8001476 <SystemClock_Config+0x9e>
  {
    Error_Handler();
<<<<<<< HEAD
 8001472:	f000 fb41 	bl	8001af8 <Error_Handler>
=======
 8001472:	f000 fb35 	bl	8001ae0 <Error_Handler>
=======
 80014d4:	2302      	movs	r3, #2
 80014d6:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80014d8:	2301      	movs	r3, #1
 80014da:	62bb      	str	r3, [r7, #40]	@ 0x28
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80014dc:	2310      	movs	r3, #16
 80014de:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80014e0:	2302      	movs	r3, #2
 80014e2:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 80014e4:	2300      	movs	r3, #0
 80014e6:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLM = 16;
 80014e8:	2310      	movs	r3, #16
 80014ea:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLN = 336;
 80014ec:	f44f 73a8 	mov.w	r3, #336	@ 0x150
 80014f0:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV4;
 80014f2:	2304      	movs	r3, #4
 80014f4:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLQ = 2;
 80014f6:	2302      	movs	r3, #2
 80014f8:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLR = 2;
 80014fa:	2302      	movs	r3, #2
 80014fc:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80014fe:	f107 031c 	add.w	r3, r7, #28
 8001502:	4618      	mov	r0, r3
 8001504:	f002 fd1a 	bl	8003f3c <HAL_RCC_OscConfig>
 8001508:	4603      	mov	r3, r0
 800150a:	2b00      	cmp	r3, #0
 800150c:	d001      	beq.n	8001512 <SystemClock_Config+0x9e>
  {
    Error_Handler();
 800150e:	f000 fb71 	bl	8001bf4 <Error_Handler>
>>>>>>> 39e4d10438a821cc799a472af87a77c6796a1676
>>>>>>> ef0d341697957f8628c074acbc12bb9a12bbe146
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
<<<<<<< HEAD
=======
<<<<<<< HEAD
>>>>>>> ef0d341697957f8628c074acbc12bb9a12bbe146
 8001476:	230f      	movs	r3, #15
 8001478:	60bb      	str	r3, [r7, #8]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800147a:	2302      	movs	r3, #2
 800147c:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800147e:	2300      	movs	r3, #0
 8001480:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8001482:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8001486:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8001488:	2300      	movs	r3, #0
 800148a:	61bb      	str	r3, [r7, #24]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 800148c:	f107 0308 	add.w	r3, r7, #8
 8001490:	2102      	movs	r1, #2
 8001492:	4618      	mov	r0, r3
<<<<<<< HEAD
 8001494:	f002 f98a 	bl	80037ac <HAL_RCC_ClockConfig>
=======
 8001494:	f002 f97e 	bl	8003794 <HAL_RCC_ClockConfig>
>>>>>>> ef0d341697957f8628c074acbc12bb9a12bbe146
 8001498:	4603      	mov	r3, r0
 800149a:	2b00      	cmp	r3, #0
 800149c:	d001      	beq.n	80014a2 <SystemClock_Config+0xca>
  {
    Error_Handler();
<<<<<<< HEAD
 800149e:	f000 fb2b 	bl	8001af8 <Error_Handler>
=======
 800149e:	f000 fb1f 	bl	8001ae0 <Error_Handler>
>>>>>>> ef0d341697957f8628c074acbc12bb9a12bbe146
  }
}
 80014a2:	bf00      	nop
 80014a4:	3750      	adds	r7, #80	@ 0x50
 80014a6:	46bd      	mov	sp, r7
 80014a8:	bd80      	pop	{r7, pc}
 80014aa:	bf00      	nop
 80014ac:	40023800 	.word	0x40023800
 80014b0:	40007000 	.word	0x40007000

080014b4 <MX_ADC1_Init>:
<<<<<<< HEAD
=======
=======
 8001512:	230f      	movs	r3, #15
 8001514:	60bb      	str	r3, [r7, #8]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001516:	2302      	movs	r3, #2
 8001518:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800151a:	2300      	movs	r3, #0
 800151c:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 800151e:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8001522:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8001524:	2300      	movs	r3, #0
 8001526:	61bb      	str	r3, [r7, #24]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8001528:	f107 0308 	add.w	r3, r7, #8
 800152c:	2102      	movs	r1, #2
 800152e:	4618      	mov	r0, r3
 8001530:	f002 f9ba 	bl	80038a8 <HAL_RCC_ClockConfig>
 8001534:	4603      	mov	r3, r0
 8001536:	2b00      	cmp	r3, #0
 8001538:	d001      	beq.n	800153e <SystemClock_Config+0xca>
  {
    Error_Handler();
 800153a:	f000 fb5b 	bl	8001bf4 <Error_Handler>
  }
}
 800153e:	bf00      	nop
 8001540:	3750      	adds	r7, #80	@ 0x50
 8001542:	46bd      	mov	sp, r7
 8001544:	bd80      	pop	{r7, pc}
 8001546:	bf00      	nop
 8001548:	40023800 	.word	0x40023800
 800154c:	40007000 	.word	0x40007000

08001550 <MX_ADC1_Init>:
>>>>>>> 39e4d10438a821cc799a472af87a77c6796a1676
>>>>>>> ef0d341697957f8628c074acbc12bb9a12bbe146
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
<<<<<<< HEAD
 80014b4:	b580      	push	{r7, lr}
 80014b6:	b084      	sub	sp, #16
 80014b8:	af00      	add	r7, sp, #0
=======
<<<<<<< HEAD
 80014b4:	b580      	push	{r7, lr}
 80014b6:	b084      	sub	sp, #16
 80014b8:	af00      	add	r7, sp, #0
=======
 8001550:	b580      	push	{r7, lr}
 8001552:	b084      	sub	sp, #16
 8001554:	af00      	add	r7, sp, #0
>>>>>>> 39e4d10438a821cc799a472af87a77c6796a1676
>>>>>>> ef0d341697957f8628c074acbc12bb9a12bbe146

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
<<<<<<< HEAD
=======
<<<<<<< HEAD
>>>>>>> ef0d341697957f8628c074acbc12bb9a12bbe146
 80014ba:	463b      	mov	r3, r7
 80014bc:	2200      	movs	r2, #0
 80014be:	601a      	str	r2, [r3, #0]
 80014c0:	605a      	str	r2, [r3, #4]
 80014c2:	609a      	str	r2, [r3, #8]
 80014c4:	60da      	str	r2, [r3, #12]
<<<<<<< HEAD
=======
=======
 8001556:	463b      	mov	r3, r7
 8001558:	2200      	movs	r2, #0
 800155a:	601a      	str	r2, [r3, #0]
 800155c:	605a      	str	r2, [r3, #4]
 800155e:	609a      	str	r2, [r3, #8]
 8001560:	60da      	str	r2, [r3, #12]
>>>>>>> 39e4d10438a821cc799a472af87a77c6796a1676
>>>>>>> ef0d341697957f8628c074acbc12bb9a12bbe146

  /* USER CODE END ADC1_Init 1 */

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc1.Instance = ADC1;
<<<<<<< HEAD
=======
<<<<<<< HEAD
>>>>>>> ef0d341697957f8628c074acbc12bb9a12bbe146
 80014c6:	4b37      	ldr	r3, [pc, #220]	@ (80015a4 <MX_ADC1_Init+0xf0>)
 80014c8:	4a37      	ldr	r2, [pc, #220]	@ (80015a8 <MX_ADC1_Init+0xf4>)
 80014ca:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 80014cc:	4b35      	ldr	r3, [pc, #212]	@ (80015a4 <MX_ADC1_Init+0xf0>)
 80014ce:	f44f 3280 	mov.w	r2, #65536	@ 0x10000
 80014d2:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 80014d4:	4b33      	ldr	r3, [pc, #204]	@ (80015a4 <MX_ADC1_Init+0xf0>)
 80014d6:	2200      	movs	r2, #0
 80014d8:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = ENABLE;
 80014da:	4b32      	ldr	r3, [pc, #200]	@ (80015a4 <MX_ADC1_Init+0xf0>)
 80014dc:	2201      	movs	r2, #1
 80014de:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = DISABLE;
 80014e0:	4b30      	ldr	r3, [pc, #192]	@ (80015a4 <MX_ADC1_Init+0xf0>)
 80014e2:	2200      	movs	r2, #0
 80014e4:	761a      	strb	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 80014e6:	4b2f      	ldr	r3, [pc, #188]	@ (80015a4 <MX_ADC1_Init+0xf0>)
 80014e8:	2200      	movs	r2, #0
 80014ea:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_RISING;
 80014ee:	4b2d      	ldr	r3, [pc, #180]	@ (80015a4 <MX_ADC1_Init+0xf0>)
 80014f0:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80014f4:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc1.Init.ExternalTrigConv = ADC_EXTERNALTRIGCONV_T8_TRGO;
 80014f6:	4b2b      	ldr	r3, [pc, #172]	@ (80015a4 <MX_ADC1_Init+0xf0>)
 80014f8:	f04f 6260 	mov.w	r2, #234881024	@ 0xe000000
 80014fc:	629a      	str	r2, [r3, #40]	@ 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 80014fe:	4b29      	ldr	r3, [pc, #164]	@ (80015a4 <MX_ADC1_Init+0xf0>)
 8001500:	2200      	movs	r2, #0
 8001502:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 4;
 8001504:	4b27      	ldr	r3, [pc, #156]	@ (80015a4 <MX_ADC1_Init+0xf0>)
 8001506:	2204      	movs	r2, #4
 8001508:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = DISABLE;
 800150a:	4b26      	ldr	r3, [pc, #152]	@ (80015a4 <MX_ADC1_Init+0xf0>)
 800150c:	2200      	movs	r2, #0
 800150e:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8001512:	4b24      	ldr	r3, [pc, #144]	@ (80015a4 <MX_ADC1_Init+0xf0>)
 8001514:	2201      	movs	r2, #1
 8001516:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8001518:	4822      	ldr	r0, [pc, #136]	@ (80015a4 <MX_ADC1_Init+0xf0>)
<<<<<<< HEAD
 800151a:	f000 fe55 	bl	80021c8 <HAL_ADC_Init>
=======
 800151a:	f000 fe49 	bl	80021b0 <HAL_ADC_Init>
>>>>>>> ef0d341697957f8628c074acbc12bb9a12bbe146
 800151e:	4603      	mov	r3, r0
 8001520:	2b00      	cmp	r3, #0
 8001522:	d001      	beq.n	8001528 <MX_ADC1_Init+0x74>
  {
    Error_Handler();
<<<<<<< HEAD
 8001524:	f000 fae8 	bl	8001af8 <Error_Handler>
=======
 8001524:	f000 fadc 	bl	8001ae0 <Error_Handler>
=======
 8001562:	4b37      	ldr	r3, [pc, #220]	@ (8001640 <MX_ADC1_Init+0xf0>)
 8001564:	4a37      	ldr	r2, [pc, #220]	@ (8001644 <MX_ADC1_Init+0xf4>)
 8001566:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 8001568:	4b35      	ldr	r3, [pc, #212]	@ (8001640 <MX_ADC1_Init+0xf0>)
 800156a:	f44f 3280 	mov.w	r2, #65536	@ 0x10000
 800156e:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8001570:	4b33      	ldr	r3, [pc, #204]	@ (8001640 <MX_ADC1_Init+0xf0>)
 8001572:	2200      	movs	r2, #0
 8001574:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = ENABLE;
 8001576:	4b32      	ldr	r3, [pc, #200]	@ (8001640 <MX_ADC1_Init+0xf0>)
 8001578:	2201      	movs	r2, #1
 800157a:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = DISABLE;
 800157c:	4b30      	ldr	r3, [pc, #192]	@ (8001640 <MX_ADC1_Init+0xf0>)
 800157e:	2200      	movs	r2, #0
 8001580:	761a      	strb	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8001582:	4b2f      	ldr	r3, [pc, #188]	@ (8001640 <MX_ADC1_Init+0xf0>)
 8001584:	2200      	movs	r2, #0
 8001586:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_RISING;
 800158a:	4b2d      	ldr	r3, [pc, #180]	@ (8001640 <MX_ADC1_Init+0xf0>)
 800158c:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8001590:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc1.Init.ExternalTrigConv = ADC_EXTERNALTRIGCONV_T8_TRGO;
 8001592:	4b2b      	ldr	r3, [pc, #172]	@ (8001640 <MX_ADC1_Init+0xf0>)
 8001594:	f04f 6260 	mov.w	r2, #234881024	@ 0xe000000
 8001598:	629a      	str	r2, [r3, #40]	@ 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 800159a:	4b29      	ldr	r3, [pc, #164]	@ (8001640 <MX_ADC1_Init+0xf0>)
 800159c:	2200      	movs	r2, #0
 800159e:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 4;
 80015a0:	4b27      	ldr	r3, [pc, #156]	@ (8001640 <MX_ADC1_Init+0xf0>)
 80015a2:	2204      	movs	r2, #4
 80015a4:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = DISABLE;
 80015a6:	4b26      	ldr	r3, [pc, #152]	@ (8001640 <MX_ADC1_Init+0xf0>)
 80015a8:	2200      	movs	r2, #0
 80015aa:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 80015ae:	4b24      	ldr	r3, [pc, #144]	@ (8001640 <MX_ADC1_Init+0xf0>)
 80015b0:	2201      	movs	r2, #1
 80015b2:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 80015b4:	4822      	ldr	r0, [pc, #136]	@ (8001640 <MX_ADC1_Init+0xf0>)
 80015b6:	f000 fe85 	bl	80022c4 <HAL_ADC_Init>
 80015ba:	4603      	mov	r3, r0
 80015bc:	2b00      	cmp	r3, #0
 80015be:	d001      	beq.n	80015c4 <MX_ADC1_Init+0x74>
  {
    Error_Handler();
 80015c0:	f000 fb18 	bl	8001bf4 <Error_Handler>
>>>>>>> 39e4d10438a821cc799a472af87a77c6796a1676
>>>>>>> ef0d341697957f8628c074acbc12bb9a12bbe146
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_0;
<<<<<<< HEAD
=======
<<<<<<< HEAD
>>>>>>> ef0d341697957f8628c074acbc12bb9a12bbe146
 8001528:	2300      	movs	r3, #0
 800152a:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 1;
 800152c:	2301      	movs	r3, #1
 800152e:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_15CYCLES;
 8001530:	2301      	movs	r3, #1
 8001532:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8001534:	463b      	mov	r3, r7
 8001536:	4619      	mov	r1, r3
 8001538:	481a      	ldr	r0, [pc, #104]	@ (80015a4 <MX_ADC1_Init+0xf0>)
<<<<<<< HEAD
 800153a:	f000 ffad 	bl	8002498 <HAL_ADC_ConfigChannel>
=======
 800153a:	f000 ffa1 	bl	8002480 <HAL_ADC_ConfigChannel>
>>>>>>> ef0d341697957f8628c074acbc12bb9a12bbe146
 800153e:	4603      	mov	r3, r0
 8001540:	2b00      	cmp	r3, #0
 8001542:	d001      	beq.n	8001548 <MX_ADC1_Init+0x94>
  {
    Error_Handler();
<<<<<<< HEAD
 8001544:	f000 fad8 	bl	8001af8 <Error_Handler>
=======
 8001544:	f000 facc 	bl	8001ae0 <Error_Handler>
=======
 80015c4:	2300      	movs	r3, #0
 80015c6:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 1;
 80015c8:	2301      	movs	r3, #1
 80015ca:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_15CYCLES;
 80015cc:	2301      	movs	r3, #1
 80015ce:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80015d0:	463b      	mov	r3, r7
 80015d2:	4619      	mov	r1, r3
 80015d4:	481a      	ldr	r0, [pc, #104]	@ (8001640 <MX_ADC1_Init+0xf0>)
 80015d6:	f000 ffdd 	bl	8002594 <HAL_ADC_ConfigChannel>
 80015da:	4603      	mov	r3, r0
 80015dc:	2b00      	cmp	r3, #0
 80015de:	d001      	beq.n	80015e4 <MX_ADC1_Init+0x94>
  {
    Error_Handler();
 80015e0:	f000 fb08 	bl	8001bf4 <Error_Handler>
>>>>>>> 39e4d10438a821cc799a472af87a77c6796a1676
>>>>>>> ef0d341697957f8628c074acbc12bb9a12bbe146
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_1;
<<<<<<< HEAD
=======
<<<<<<< HEAD
>>>>>>> ef0d341697957f8628c074acbc12bb9a12bbe146
 8001548:	2301      	movs	r3, #1
 800154a:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 2;
 800154c:	2302      	movs	r3, #2
 800154e:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8001550:	463b      	mov	r3, r7
 8001552:	4619      	mov	r1, r3
 8001554:	4813      	ldr	r0, [pc, #76]	@ (80015a4 <MX_ADC1_Init+0xf0>)
<<<<<<< HEAD
 8001556:	f000 ff9f 	bl	8002498 <HAL_ADC_ConfigChannel>
=======
 8001556:	f000 ff93 	bl	8002480 <HAL_ADC_ConfigChannel>
>>>>>>> ef0d341697957f8628c074acbc12bb9a12bbe146
 800155a:	4603      	mov	r3, r0
 800155c:	2b00      	cmp	r3, #0
 800155e:	d001      	beq.n	8001564 <MX_ADC1_Init+0xb0>
  {
    Error_Handler();
<<<<<<< HEAD
 8001560:	f000 faca 	bl	8001af8 <Error_Handler>
=======
 8001560:	f000 fabe 	bl	8001ae0 <Error_Handler>
=======
 80015e4:	2301      	movs	r3, #1
 80015e6:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 2;
 80015e8:	2302      	movs	r3, #2
 80015ea:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80015ec:	463b      	mov	r3, r7
 80015ee:	4619      	mov	r1, r3
 80015f0:	4813      	ldr	r0, [pc, #76]	@ (8001640 <MX_ADC1_Init+0xf0>)
 80015f2:	f000 ffcf 	bl	8002594 <HAL_ADC_ConfigChannel>
 80015f6:	4603      	mov	r3, r0
 80015f8:	2b00      	cmp	r3, #0
 80015fa:	d001      	beq.n	8001600 <MX_ADC1_Init+0xb0>
  {
    Error_Handler();
 80015fc:	f000 fafa 	bl	8001bf4 <Error_Handler>
>>>>>>> 39e4d10438a821cc799a472af87a77c6796a1676
>>>>>>> ef0d341697957f8628c074acbc12bb9a12bbe146
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_4;
<<<<<<< HEAD
=======
<<<<<<< HEAD
>>>>>>> ef0d341697957f8628c074acbc12bb9a12bbe146
 8001564:	2304      	movs	r3, #4
 8001566:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 3;
 8001568:	2303      	movs	r3, #3
 800156a:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 800156c:	463b      	mov	r3, r7
 800156e:	4619      	mov	r1, r3
 8001570:	480c      	ldr	r0, [pc, #48]	@ (80015a4 <MX_ADC1_Init+0xf0>)
<<<<<<< HEAD
 8001572:	f000 ff91 	bl	8002498 <HAL_ADC_ConfigChannel>
=======
 8001572:	f000 ff85 	bl	8002480 <HAL_ADC_ConfigChannel>
>>>>>>> ef0d341697957f8628c074acbc12bb9a12bbe146
 8001576:	4603      	mov	r3, r0
 8001578:	2b00      	cmp	r3, #0
 800157a:	d001      	beq.n	8001580 <MX_ADC1_Init+0xcc>
  {
    Error_Handler();
<<<<<<< HEAD
 800157c:	f000 fabc 	bl	8001af8 <Error_Handler>
=======
 800157c:	f000 fab0 	bl	8001ae0 <Error_Handler>
=======
 8001600:	2304      	movs	r3, #4
 8001602:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 3;
 8001604:	2303      	movs	r3, #3
 8001606:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8001608:	463b      	mov	r3, r7
 800160a:	4619      	mov	r1, r3
 800160c:	480c      	ldr	r0, [pc, #48]	@ (8001640 <MX_ADC1_Init+0xf0>)
 800160e:	f000 ffc1 	bl	8002594 <HAL_ADC_ConfigChannel>
 8001612:	4603      	mov	r3, r0
 8001614:	2b00      	cmp	r3, #0
 8001616:	d001      	beq.n	800161c <MX_ADC1_Init+0xcc>
  {
    Error_Handler();
 8001618:	f000 faec 	bl	8001bf4 <Error_Handler>
>>>>>>> 39e4d10438a821cc799a472af87a77c6796a1676
>>>>>>> ef0d341697957f8628c074acbc12bb9a12bbe146
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_6;
<<<<<<< HEAD
=======
<<<<<<< HEAD
>>>>>>> ef0d341697957f8628c074acbc12bb9a12bbe146
 8001580:	2306      	movs	r3, #6
 8001582:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 4;
 8001584:	2304      	movs	r3, #4
 8001586:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8001588:	463b      	mov	r3, r7
 800158a:	4619      	mov	r1, r3
 800158c:	4805      	ldr	r0, [pc, #20]	@ (80015a4 <MX_ADC1_Init+0xf0>)
<<<<<<< HEAD
 800158e:	f000 ff83 	bl	8002498 <HAL_ADC_ConfigChannel>
=======
 800158e:	f000 ff77 	bl	8002480 <HAL_ADC_ConfigChannel>
>>>>>>> ef0d341697957f8628c074acbc12bb9a12bbe146
 8001592:	4603      	mov	r3, r0
 8001594:	2b00      	cmp	r3, #0
 8001596:	d001      	beq.n	800159c <MX_ADC1_Init+0xe8>
  {
    Error_Handler();
<<<<<<< HEAD
 8001598:	f000 faae 	bl	8001af8 <Error_Handler>
=======
 8001598:	f000 faa2 	bl	8001ae0 <Error_Handler>
=======
 800161c:	2306      	movs	r3, #6
 800161e:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 4;
 8001620:	2304      	movs	r3, #4
 8001622:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8001624:	463b      	mov	r3, r7
 8001626:	4619      	mov	r1, r3
 8001628:	4805      	ldr	r0, [pc, #20]	@ (8001640 <MX_ADC1_Init+0xf0>)
 800162a:	f000 ffb3 	bl	8002594 <HAL_ADC_ConfigChannel>
 800162e:	4603      	mov	r3, r0
 8001630:	2b00      	cmp	r3, #0
 8001632:	d001      	beq.n	8001638 <MX_ADC1_Init+0xe8>
  {
    Error_Handler();
 8001634:	f000 fade 	bl	8001bf4 <Error_Handler>
>>>>>>> 39e4d10438a821cc799a472af87a77c6796a1676
>>>>>>> ef0d341697957f8628c074acbc12bb9a12bbe146
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
<<<<<<< HEAD
=======
<<<<<<< HEAD
>>>>>>> ef0d341697957f8628c074acbc12bb9a12bbe146
 800159c:	bf00      	nop
 800159e:	3710      	adds	r7, #16
 80015a0:	46bd      	mov	sp, r7
 80015a2:	bd80      	pop	{r7, pc}
 80015a4:	200001f0 	.word	0x200001f0
 80015a8:	40012000 	.word	0x40012000

080015ac <MX_TIM8_Init>:
<<<<<<< HEAD
=======
=======
 8001638:	bf00      	nop
 800163a:	3710      	adds	r7, #16
 800163c:	46bd      	mov	sp, r7
 800163e:	bd80      	pop	{r7, pc}
 8001640:	200001f0 	.word	0x200001f0
 8001644:	40012000 	.word	0x40012000

08001648 <MX_TIM8_Init>:
>>>>>>> 39e4d10438a821cc799a472af87a77c6796a1676
>>>>>>> ef0d341697957f8628c074acbc12bb9a12bbe146
  * @brief TIM8 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM8_Init(void)
{
<<<<<<< HEAD
 80015ac:	b580      	push	{r7, lr}
 80015ae:	b096      	sub	sp, #88	@ 0x58
 80015b0:	af00      	add	r7, sp, #0
=======
<<<<<<< HEAD
 80015ac:	b580      	push	{r7, lr}
 80015ae:	b096      	sub	sp, #88	@ 0x58
 80015b0:	af00      	add	r7, sp, #0
=======
 8001648:	b580      	push	{r7, lr}
 800164a:	b096      	sub	sp, #88	@ 0x58
 800164c:	af00      	add	r7, sp, #0
>>>>>>> 39e4d10438a821cc799a472af87a77c6796a1676
>>>>>>> ef0d341697957f8628c074acbc12bb9a12bbe146

  /* USER CODE BEGIN TIM8_Init 0 */

  /* USER CODE END TIM8_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
<<<<<<< HEAD
=======
<<<<<<< HEAD
>>>>>>> ef0d341697957f8628c074acbc12bb9a12bbe146
 80015b2:	f107 0348 	add.w	r3, r7, #72	@ 0x48
 80015b6:	2200      	movs	r2, #0
 80015b8:	601a      	str	r2, [r3, #0]
 80015ba:	605a      	str	r2, [r3, #4]
 80015bc:	609a      	str	r2, [r3, #8]
 80015be:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80015c0:	f107 0340 	add.w	r3, r7, #64	@ 0x40
 80015c4:	2200      	movs	r2, #0
 80015c6:	601a      	str	r2, [r3, #0]
 80015c8:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 80015ca:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80015ce:	2200      	movs	r2, #0
 80015d0:	601a      	str	r2, [r3, #0]
 80015d2:	605a      	str	r2, [r3, #4]
 80015d4:	609a      	str	r2, [r3, #8]
 80015d6:	60da      	str	r2, [r3, #12]
 80015d8:	611a      	str	r2, [r3, #16]
 80015da:	615a      	str	r2, [r3, #20]
 80015dc:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 80015de:	1d3b      	adds	r3, r7, #4
 80015e0:	2220      	movs	r2, #32
 80015e2:	2100      	movs	r1, #0
 80015e4:	4618      	mov	r0, r3
<<<<<<< HEAD
 80015e6:	f005 fcd6 	bl	8006f96 <memset>
=======
 80015e6:	f005 fcca 	bl	8006f7e <memset>
=======
 800164e:	f107 0348 	add.w	r3, r7, #72	@ 0x48
 8001652:	2200      	movs	r2, #0
 8001654:	601a      	str	r2, [r3, #0]
 8001656:	605a      	str	r2, [r3, #4]
 8001658:	609a      	str	r2, [r3, #8]
 800165a:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800165c:	f107 0340 	add.w	r3, r7, #64	@ 0x40
 8001660:	2200      	movs	r2, #0
 8001662:	601a      	str	r2, [r3, #0]
 8001664:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8001666:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800166a:	2200      	movs	r2, #0
 800166c:	601a      	str	r2, [r3, #0]
 800166e:	605a      	str	r2, [r3, #4]
 8001670:	609a      	str	r2, [r3, #8]
 8001672:	60da      	str	r2, [r3, #12]
 8001674:	611a      	str	r2, [r3, #16]
 8001676:	615a      	str	r2, [r3, #20]
 8001678:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 800167a:	1d3b      	adds	r3, r7, #4
 800167c:	2220      	movs	r2, #32
 800167e:	2100      	movs	r1, #0
 8001680:	4618      	mov	r0, r3
 8001682:	f005 fd06 	bl	8007092 <memset>
>>>>>>> 39e4d10438a821cc799a472af87a77c6796a1676
>>>>>>> ef0d341697957f8628c074acbc12bb9a12bbe146

  /* USER CODE BEGIN TIM8_Init 1 */

  /* USER CODE END TIM8_Init 1 */
  htim8.Instance = TIM8;
<<<<<<< HEAD
=======
<<<<<<< HEAD
>>>>>>> ef0d341697957f8628c074acbc12bb9a12bbe146
 80015ea:	4b3e      	ldr	r3, [pc, #248]	@ (80016e4 <MX_TIM8_Init+0x138>)
 80015ec:	4a3e      	ldr	r2, [pc, #248]	@ (80016e8 <MX_TIM8_Init+0x13c>)
 80015ee:	601a      	str	r2, [r3, #0]
  htim8.Init.Prescaler = 99;
 80015f0:	4b3c      	ldr	r3, [pc, #240]	@ (80016e4 <MX_TIM8_Init+0x138>)
 80015f2:	2263      	movs	r2, #99	@ 0x63
 80015f4:	605a      	str	r2, [r3, #4]
  htim8.Init.CounterMode = TIM_COUNTERMODE_UP;
 80015f6:	4b3b      	ldr	r3, [pc, #236]	@ (80016e4 <MX_TIM8_Init+0x138>)
 80015f8:	2200      	movs	r2, #0
 80015fa:	609a      	str	r2, [r3, #8]
  htim8.Init.Period = 839;
 80015fc:	4b39      	ldr	r3, [pc, #228]	@ (80016e4 <MX_TIM8_Init+0x138>)
 80015fe:	f240 3247 	movw	r2, #839	@ 0x347
 8001602:	60da      	str	r2, [r3, #12]
  htim8.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001604:	4b37      	ldr	r3, [pc, #220]	@ (80016e4 <MX_TIM8_Init+0x138>)
 8001606:	2200      	movs	r2, #0
 8001608:	611a      	str	r2, [r3, #16]
  htim8.Init.RepetitionCounter = 0;
 800160a:	4b36      	ldr	r3, [pc, #216]	@ (80016e4 <MX_TIM8_Init+0x138>)
 800160c:	2200      	movs	r2, #0
 800160e:	615a      	str	r2, [r3, #20]
  htim8.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001610:	4b34      	ldr	r3, [pc, #208]	@ (80016e4 <MX_TIM8_Init+0x138>)
 8001612:	2200      	movs	r2, #0
 8001614:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim8) != HAL_OK)
 8001616:	4833      	ldr	r0, [pc, #204]	@ (80016e4 <MX_TIM8_Init+0x138>)
<<<<<<< HEAD
 8001618:	f002 feb0 	bl	800437c <HAL_TIM_Base_Init>
=======
 8001618:	f002 fea4 	bl	8004364 <HAL_TIM_Base_Init>
>>>>>>> ef0d341697957f8628c074acbc12bb9a12bbe146
 800161c:	4603      	mov	r3, r0
 800161e:	2b00      	cmp	r3, #0
 8001620:	d001      	beq.n	8001626 <MX_TIM8_Init+0x7a>
  {
    Error_Handler();
<<<<<<< HEAD
 8001622:	f000 fa69 	bl	8001af8 <Error_Handler>
=======
 8001622:	f000 fa5d 	bl	8001ae0 <Error_Handler>
>>>>>>> ef0d341697957f8628c074acbc12bb9a12bbe146
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001626:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800162a:	64bb      	str	r3, [r7, #72]	@ 0x48
  if (HAL_TIM_ConfigClockSource(&htim8, &sClockSourceConfig) != HAL_OK)
 800162c:	f107 0348 	add.w	r3, r7, #72	@ 0x48
 8001630:	4619      	mov	r1, r3
 8001632:	482c      	ldr	r0, [pc, #176]	@ (80016e4 <MX_TIM8_Init+0x138>)
<<<<<<< HEAD
 8001634:	f003 fa86 	bl	8004b44 <HAL_TIM_ConfigClockSource>
=======
 8001634:	f003 fa7a 	bl	8004b2c <HAL_TIM_ConfigClockSource>
>>>>>>> ef0d341697957f8628c074acbc12bb9a12bbe146
 8001638:	4603      	mov	r3, r0
 800163a:	2b00      	cmp	r3, #0
 800163c:	d001      	beq.n	8001642 <MX_TIM8_Init+0x96>
  {
    Error_Handler();
<<<<<<< HEAD
 800163e:	f000 fa5b 	bl	8001af8 <Error_Handler>
  }
  if (HAL_TIM_OC_Init(&htim8) != HAL_OK)
 8001642:	4828      	ldr	r0, [pc, #160]	@ (80016e4 <MX_TIM8_Init+0x138>)
 8001644:	f002 ffc2 	bl	80045cc <HAL_TIM_OC_Init>
=======
 800163e:	f000 fa4f 	bl	8001ae0 <Error_Handler>
  }
  if (HAL_TIM_OC_Init(&htim8) != HAL_OK)
 8001642:	4828      	ldr	r0, [pc, #160]	@ (80016e4 <MX_TIM8_Init+0x138>)
 8001644:	f002 ffb6 	bl	80045b4 <HAL_TIM_OC_Init>
>>>>>>> ef0d341697957f8628c074acbc12bb9a12bbe146
 8001648:	4603      	mov	r3, r0
 800164a:	2b00      	cmp	r3, #0
 800164c:	d001      	beq.n	8001652 <MX_TIM8_Init+0xa6>
  {
    Error_Handler();
<<<<<<< HEAD
 800164e:	f000 fa53 	bl	8001af8 <Error_Handler>
=======
 800164e:	f000 fa47 	bl	8001ae0 <Error_Handler>
>>>>>>> ef0d341697957f8628c074acbc12bb9a12bbe146
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_UPDATE;
 8001652:	2320      	movs	r3, #32
 8001654:	643b      	str	r3, [r7, #64]	@ 0x40
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001656:	2300      	movs	r3, #0
 8001658:	647b      	str	r3, [r7, #68]	@ 0x44
  if (HAL_TIMEx_MasterConfigSynchronization(&htim8, &sMasterConfig) != HAL_OK)
 800165a:	f107 0340 	add.w	r3, r7, #64	@ 0x40
 800165e:	4619      	mov	r1, r3
 8001660:	4820      	ldr	r0, [pc, #128]	@ (80016e4 <MX_TIM8_Init+0x138>)
<<<<<<< HEAD
 8001662:	f003 fe7b 	bl	800535c <HAL_TIMEx_MasterConfigSynchronization>
=======
 8001662:	f003 fe6f 	bl	8005344 <HAL_TIMEx_MasterConfigSynchronization>
>>>>>>> ef0d341697957f8628c074acbc12bb9a12bbe146
 8001666:	4603      	mov	r3, r0
 8001668:	2b00      	cmp	r3, #0
 800166a:	d001      	beq.n	8001670 <MX_TIM8_Init+0xc4>
  {
    Error_Handler();
<<<<<<< HEAD
 800166c:	f000 fa44 	bl	8001af8 <Error_Handler>
=======
 800166c:	f000 fa38 	bl	8001ae0 <Error_Handler>
>>>>>>> ef0d341697957f8628c074acbc12bb9a12bbe146
  }
  sConfigOC.OCMode = TIM_OCMODE_TOGGLE;
 8001670:	2330      	movs	r3, #48	@ 0x30
 8001672:	627b      	str	r3, [r7, #36]	@ 0x24
  sConfigOC.Pulse = 10;
 8001674:	230a      	movs	r3, #10
 8001676:	62bb      	str	r3, [r7, #40]	@ 0x28
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001678:	2300      	movs	r3, #0
 800167a:	62fb      	str	r3, [r7, #44]	@ 0x2c
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 800167c:	2300      	movs	r3, #0
 800167e:	633b      	str	r3, [r7, #48]	@ 0x30
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001680:	2300      	movs	r3, #0
 8001682:	637b      	str	r3, [r7, #52]	@ 0x34
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8001684:	2300      	movs	r3, #0
 8001686:	63bb      	str	r3, [r7, #56]	@ 0x38
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8001688:	2300      	movs	r3, #0
 800168a:	63fb      	str	r3, [r7, #60]	@ 0x3c
  if (HAL_TIM_OC_ConfigChannel(&htim8, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 800168c:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8001690:	2200      	movs	r2, #0
 8001692:	4619      	mov	r1, r3
 8001694:	4813      	ldr	r0, [pc, #76]	@ (80016e4 <MX_TIM8_Init+0x138>)
<<<<<<< HEAD
 8001696:	f003 f9f9 	bl	8004a8c <HAL_TIM_OC_ConfigChannel>
=======
 8001696:	f003 f9ed 	bl	8004a74 <HAL_TIM_OC_ConfigChannel>
>>>>>>> ef0d341697957f8628c074acbc12bb9a12bbe146
 800169a:	4603      	mov	r3, r0
 800169c:	2b00      	cmp	r3, #0
 800169e:	d001      	beq.n	80016a4 <MX_TIM8_Init+0xf8>
  {
    Error_Handler();
<<<<<<< HEAD
 80016a0:	f000 fa2a 	bl	8001af8 <Error_Handler>
=======
 80016a0:	f000 fa1e 	bl	8001ae0 <Error_Handler>
>>>>>>> ef0d341697957f8628c074acbc12bb9a12bbe146
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 80016a4:	2300      	movs	r3, #0
 80016a6:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 80016a8:	2300      	movs	r3, #0
 80016aa:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 80016ac:	2300      	movs	r3, #0
 80016ae:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 80016b0:	2300      	movs	r3, #0
 80016b2:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 80016b4:	2300      	movs	r3, #0
 80016b6:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 80016b8:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 80016bc:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 80016be:	2300      	movs	r3, #0
 80016c0:	623b      	str	r3, [r7, #32]
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim8, &sBreakDeadTimeConfig) != HAL_OK)
 80016c2:	1d3b      	adds	r3, r7, #4
 80016c4:	4619      	mov	r1, r3
 80016c6:	4807      	ldr	r0, [pc, #28]	@ (80016e4 <MX_TIM8_Init+0x138>)
<<<<<<< HEAD
 80016c8:	f003 fec4 	bl	8005454 <HAL_TIMEx_ConfigBreakDeadTime>
=======
 80016c8:	f003 feb8 	bl	800543c <HAL_TIMEx_ConfigBreakDeadTime>
>>>>>>> ef0d341697957f8628c074acbc12bb9a12bbe146
 80016cc:	4603      	mov	r3, r0
 80016ce:	2b00      	cmp	r3, #0
 80016d0:	d001      	beq.n	80016d6 <MX_TIM8_Init+0x12a>
  {
    Error_Handler();
<<<<<<< HEAD
 80016d2:	f000 fa11 	bl	8001af8 <Error_Handler>
=======
 80016d2:	f000 fa05 	bl	8001ae0 <Error_Handler>
=======
 8001686:	4b3e      	ldr	r3, [pc, #248]	@ (8001780 <MX_TIM8_Init+0x138>)
 8001688:	4a3e      	ldr	r2, [pc, #248]	@ (8001784 <MX_TIM8_Init+0x13c>)
 800168a:	601a      	str	r2, [r3, #0]
  htim8.Init.Prescaler = 99;
 800168c:	4b3c      	ldr	r3, [pc, #240]	@ (8001780 <MX_TIM8_Init+0x138>)
 800168e:	2263      	movs	r2, #99	@ 0x63
 8001690:	605a      	str	r2, [r3, #4]
  htim8.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001692:	4b3b      	ldr	r3, [pc, #236]	@ (8001780 <MX_TIM8_Init+0x138>)
 8001694:	2200      	movs	r2, #0
 8001696:	609a      	str	r2, [r3, #8]
  htim8.Init.Period = 839;
 8001698:	4b39      	ldr	r3, [pc, #228]	@ (8001780 <MX_TIM8_Init+0x138>)
 800169a:	f240 3247 	movw	r2, #839	@ 0x347
 800169e:	60da      	str	r2, [r3, #12]
  htim8.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80016a0:	4b37      	ldr	r3, [pc, #220]	@ (8001780 <MX_TIM8_Init+0x138>)
 80016a2:	2200      	movs	r2, #0
 80016a4:	611a      	str	r2, [r3, #16]
  htim8.Init.RepetitionCounter = 0;
 80016a6:	4b36      	ldr	r3, [pc, #216]	@ (8001780 <MX_TIM8_Init+0x138>)
 80016a8:	2200      	movs	r2, #0
 80016aa:	615a      	str	r2, [r3, #20]
  htim8.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80016ac:	4b34      	ldr	r3, [pc, #208]	@ (8001780 <MX_TIM8_Init+0x138>)
 80016ae:	2200      	movs	r2, #0
 80016b0:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim8) != HAL_OK)
 80016b2:	4833      	ldr	r0, [pc, #204]	@ (8001780 <MX_TIM8_Init+0x138>)
 80016b4:	f002 fee0 	bl	8004478 <HAL_TIM_Base_Init>
 80016b8:	4603      	mov	r3, r0
 80016ba:	2b00      	cmp	r3, #0
 80016bc:	d001      	beq.n	80016c2 <MX_TIM8_Init+0x7a>
  {
    Error_Handler();
 80016be:	f000 fa99 	bl	8001bf4 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80016c2:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80016c6:	64bb      	str	r3, [r7, #72]	@ 0x48
  if (HAL_TIM_ConfigClockSource(&htim8, &sClockSourceConfig) != HAL_OK)
 80016c8:	f107 0348 	add.w	r3, r7, #72	@ 0x48
 80016cc:	4619      	mov	r1, r3
 80016ce:	482c      	ldr	r0, [pc, #176]	@ (8001780 <MX_TIM8_Init+0x138>)
 80016d0:	f003 fab6 	bl	8004c40 <HAL_TIM_ConfigClockSource>
 80016d4:	4603      	mov	r3, r0
 80016d6:	2b00      	cmp	r3, #0
 80016d8:	d001      	beq.n	80016de <MX_TIM8_Init+0x96>
  {
    Error_Handler();
 80016da:	f000 fa8b 	bl	8001bf4 <Error_Handler>
  }
  if (HAL_TIM_OC_Init(&htim8) != HAL_OK)
 80016de:	4828      	ldr	r0, [pc, #160]	@ (8001780 <MX_TIM8_Init+0x138>)
 80016e0:	f002 fff2 	bl	80046c8 <HAL_TIM_OC_Init>
 80016e4:	4603      	mov	r3, r0
 80016e6:	2b00      	cmp	r3, #0
 80016e8:	d001      	beq.n	80016ee <MX_TIM8_Init+0xa6>
  {
    Error_Handler();
 80016ea:	f000 fa83 	bl	8001bf4 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_UPDATE;
 80016ee:	2320      	movs	r3, #32
 80016f0:	643b      	str	r3, [r7, #64]	@ 0x40
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80016f2:	2300      	movs	r3, #0
 80016f4:	647b      	str	r3, [r7, #68]	@ 0x44
  if (HAL_TIMEx_MasterConfigSynchronization(&htim8, &sMasterConfig) != HAL_OK)
 80016f6:	f107 0340 	add.w	r3, r7, #64	@ 0x40
 80016fa:	4619      	mov	r1, r3
 80016fc:	4820      	ldr	r0, [pc, #128]	@ (8001780 <MX_TIM8_Init+0x138>)
 80016fe:	f003 feab 	bl	8005458 <HAL_TIMEx_MasterConfigSynchronization>
 8001702:	4603      	mov	r3, r0
 8001704:	2b00      	cmp	r3, #0
 8001706:	d001      	beq.n	800170c <MX_TIM8_Init+0xc4>
  {
    Error_Handler();
 8001708:	f000 fa74 	bl	8001bf4 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_TOGGLE;
 800170c:	2330      	movs	r3, #48	@ 0x30
 800170e:	627b      	str	r3, [r7, #36]	@ 0x24
  sConfigOC.Pulse = 10;
 8001710:	230a      	movs	r3, #10
 8001712:	62bb      	str	r3, [r7, #40]	@ 0x28
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001714:	2300      	movs	r3, #0
 8001716:	62fb      	str	r3, [r7, #44]	@ 0x2c
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8001718:	2300      	movs	r3, #0
 800171a:	633b      	str	r3, [r7, #48]	@ 0x30
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 800171c:	2300      	movs	r3, #0
 800171e:	637b      	str	r3, [r7, #52]	@ 0x34
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8001720:	2300      	movs	r3, #0
 8001722:	63bb      	str	r3, [r7, #56]	@ 0x38
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8001724:	2300      	movs	r3, #0
 8001726:	63fb      	str	r3, [r7, #60]	@ 0x3c
  if (HAL_TIM_OC_ConfigChannel(&htim8, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8001728:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800172c:	2200      	movs	r2, #0
 800172e:	4619      	mov	r1, r3
 8001730:	4813      	ldr	r0, [pc, #76]	@ (8001780 <MX_TIM8_Init+0x138>)
 8001732:	f003 fa29 	bl	8004b88 <HAL_TIM_OC_ConfigChannel>
 8001736:	4603      	mov	r3, r0
 8001738:	2b00      	cmp	r3, #0
 800173a:	d001      	beq.n	8001740 <MX_TIM8_Init+0xf8>
  {
    Error_Handler();
 800173c:	f000 fa5a 	bl	8001bf4 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8001740:	2300      	movs	r3, #0
 8001742:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8001744:	2300      	movs	r3, #0
 8001746:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8001748:	2300      	movs	r3, #0
 800174a:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 800174c:	2300      	movs	r3, #0
 800174e:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8001750:	2300      	movs	r3, #0
 8001752:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8001754:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8001758:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 800175a:	2300      	movs	r3, #0
 800175c:	623b      	str	r3, [r7, #32]
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim8, &sBreakDeadTimeConfig) != HAL_OK)
 800175e:	1d3b      	adds	r3, r7, #4
 8001760:	4619      	mov	r1, r3
 8001762:	4807      	ldr	r0, [pc, #28]	@ (8001780 <MX_TIM8_Init+0x138>)
 8001764:	f003 fef4 	bl	8005550 <HAL_TIMEx_ConfigBreakDeadTime>
 8001768:	4603      	mov	r3, r0
 800176a:	2b00      	cmp	r3, #0
 800176c:	d001      	beq.n	8001772 <MX_TIM8_Init+0x12a>
  {
    Error_Handler();
 800176e:	f000 fa41 	bl	8001bf4 <Error_Handler>
>>>>>>> 39e4d10438a821cc799a472af87a77c6796a1676
>>>>>>> ef0d341697957f8628c074acbc12bb9a12bbe146
  }
  /* USER CODE BEGIN TIM8_Init 2 */

  /* USER CODE END TIM8_Init 2 */
  HAL_TIM_MspPostInit(&htim8);
<<<<<<< HEAD
 80016d6:	4803      	ldr	r0, [pc, #12]	@ (80016e4 <MX_TIM8_Init+0x138>)
 80016d8:	f000 fb16 	bl	8001d08 <HAL_TIM_MspPostInit>
=======
<<<<<<< HEAD
 80016d6:	4803      	ldr	r0, [pc, #12]	@ (80016e4 <MX_TIM8_Init+0x138>)
 80016d8:	f000 fb0a 	bl	8001cf0 <HAL_TIM_MspPostInit>
>>>>>>> ef0d341697957f8628c074acbc12bb9a12bbe146

}
 80016dc:	bf00      	nop
 80016de:	3758      	adds	r7, #88	@ 0x58
 80016e0:	46bd      	mov	sp, r7
 80016e2:	bd80      	pop	{r7, pc}
 80016e4:	20000298 	.word	0x20000298
 80016e8:	40010400 	.word	0x40010400

080016ec <MX_TIM10_Init>:
<<<<<<< HEAD
=======
=======
 8001772:	4803      	ldr	r0, [pc, #12]	@ (8001780 <MX_TIM8_Init+0x138>)
 8001774:	f000 fb46 	bl	8001e04 <HAL_TIM_MspPostInit>

}
 8001778:	bf00      	nop
 800177a:	3758      	adds	r7, #88	@ 0x58
 800177c:	46bd      	mov	sp, r7
 800177e:	bd80      	pop	{r7, pc}
 8001780:	20000298 	.word	0x20000298
 8001784:	40010400 	.word	0x40010400

08001788 <MX_TIM10_Init>:
>>>>>>> 39e4d10438a821cc799a472af87a77c6796a1676
>>>>>>> ef0d341697957f8628c074acbc12bb9a12bbe146
  * @brief TIM10 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM10_Init(void)
{
<<<<<<< HEAD
 80016ec:	b580      	push	{r7, lr}
 80016ee:	af00      	add	r7, sp, #0
=======
<<<<<<< HEAD
 80016ec:	b580      	push	{r7, lr}
 80016ee:	af00      	add	r7, sp, #0
=======
 8001788:	b580      	push	{r7, lr}
 800178a:	af00      	add	r7, sp, #0
>>>>>>> 39e4d10438a821cc799a472af87a77c6796a1676
>>>>>>> ef0d341697957f8628c074acbc12bb9a12bbe146
  /* USER CODE END TIM10_Init 0 */

  /* USER CODE BEGIN TIM10_Init 1 */

  /* USER CODE END TIM10_Init 1 */
  htim10.Instance = TIM10;
<<<<<<< HEAD
=======
<<<<<<< HEAD
>>>>>>> ef0d341697957f8628c074acbc12bb9a12bbe146
 80016f0:	4b0e      	ldr	r3, [pc, #56]	@ (800172c <MX_TIM10_Init+0x40>)
 80016f2:	4a0f      	ldr	r2, [pc, #60]	@ (8001730 <MX_TIM10_Init+0x44>)
 80016f4:	601a      	str	r2, [r3, #0]
  htim10.Init.Prescaler = 8399;
 80016f6:	4b0d      	ldr	r3, [pc, #52]	@ (800172c <MX_TIM10_Init+0x40>)
 80016f8:	f242 02cf 	movw	r2, #8399	@ 0x20cf
 80016fc:	605a      	str	r2, [r3, #4]
  htim10.Init.CounterMode = TIM_COUNTERMODE_UP;
 80016fe:	4b0b      	ldr	r3, [pc, #44]	@ (800172c <MX_TIM10_Init+0x40>)
 8001700:	2200      	movs	r2, #0
 8001702:	609a      	str	r2, [r3, #8]
  htim10.Init.Period = 9999;
 8001704:	4b09      	ldr	r3, [pc, #36]	@ (800172c <MX_TIM10_Init+0x40>)
 8001706:	f242 720f 	movw	r2, #9999	@ 0x270f
 800170a:	60da      	str	r2, [r3, #12]
  htim10.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800170c:	4b07      	ldr	r3, [pc, #28]	@ (800172c <MX_TIM10_Init+0x40>)
 800170e:	2200      	movs	r2, #0
 8001710:	611a      	str	r2, [r3, #16]
  htim10.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001712:	4b06      	ldr	r3, [pc, #24]	@ (800172c <MX_TIM10_Init+0x40>)
 8001714:	2200      	movs	r2, #0
 8001716:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim10) != HAL_OK)
 8001718:	4804      	ldr	r0, [pc, #16]	@ (800172c <MX_TIM10_Init+0x40>)
<<<<<<< HEAD
 800171a:	f002 fe2f 	bl	800437c <HAL_TIM_Base_Init>
=======
 800171a:	f002 fe23 	bl	8004364 <HAL_TIM_Base_Init>
>>>>>>> ef0d341697957f8628c074acbc12bb9a12bbe146
 800171e:	4603      	mov	r3, r0
 8001720:	2b00      	cmp	r3, #0
 8001722:	d001      	beq.n	8001728 <MX_TIM10_Init+0x3c>
  {
    Error_Handler();
<<<<<<< HEAD
 8001724:	f000 f9e8 	bl	8001af8 <Error_Handler>
=======
 8001724:	f000 f9dc 	bl	8001ae0 <Error_Handler>
=======
 800178c:	4b0e      	ldr	r3, [pc, #56]	@ (80017c8 <MX_TIM10_Init+0x40>)
 800178e:	4a0f      	ldr	r2, [pc, #60]	@ (80017cc <MX_TIM10_Init+0x44>)
 8001790:	601a      	str	r2, [r3, #0]
  htim10.Init.Prescaler = 8399;
 8001792:	4b0d      	ldr	r3, [pc, #52]	@ (80017c8 <MX_TIM10_Init+0x40>)
 8001794:	f242 02cf 	movw	r2, #8399	@ 0x20cf
 8001798:	605a      	str	r2, [r3, #4]
  htim10.Init.CounterMode = TIM_COUNTERMODE_UP;
 800179a:	4b0b      	ldr	r3, [pc, #44]	@ (80017c8 <MX_TIM10_Init+0x40>)
 800179c:	2200      	movs	r2, #0
 800179e:	609a      	str	r2, [r3, #8]
  htim10.Init.Period = 9999;
 80017a0:	4b09      	ldr	r3, [pc, #36]	@ (80017c8 <MX_TIM10_Init+0x40>)
 80017a2:	f242 720f 	movw	r2, #9999	@ 0x270f
 80017a6:	60da      	str	r2, [r3, #12]
  htim10.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80017a8:	4b07      	ldr	r3, [pc, #28]	@ (80017c8 <MX_TIM10_Init+0x40>)
 80017aa:	2200      	movs	r2, #0
 80017ac:	611a      	str	r2, [r3, #16]
  htim10.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80017ae:	4b06      	ldr	r3, [pc, #24]	@ (80017c8 <MX_TIM10_Init+0x40>)
 80017b0:	2200      	movs	r2, #0
 80017b2:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim10) != HAL_OK)
 80017b4:	4804      	ldr	r0, [pc, #16]	@ (80017c8 <MX_TIM10_Init+0x40>)
 80017b6:	f002 fe5f 	bl	8004478 <HAL_TIM_Base_Init>
 80017ba:	4603      	mov	r3, r0
 80017bc:	2b00      	cmp	r3, #0
 80017be:	d001      	beq.n	80017c4 <MX_TIM10_Init+0x3c>
  {
    Error_Handler();
 80017c0:	f000 fa18 	bl	8001bf4 <Error_Handler>
>>>>>>> 39e4d10438a821cc799a472af87a77c6796a1676
>>>>>>> ef0d341697957f8628c074acbc12bb9a12bbe146
  }
  /* USER CODE BEGIN TIM10_Init 2 */

  /* USER CODE END TIM10_Init 2 */

}
<<<<<<< HEAD
=======
<<<<<<< HEAD
>>>>>>> ef0d341697957f8628c074acbc12bb9a12bbe146
 8001728:	bf00      	nop
 800172a:	bd80      	pop	{r7, pc}
 800172c:	200002e0 	.word	0x200002e0
 8001730:	40014400 	.word	0x40014400

08001734 <MX_TIM11_Init>:
<<<<<<< HEAD
=======
=======
 80017c4:	bf00      	nop
 80017c6:	bd80      	pop	{r7, pc}
 80017c8:	200002e0 	.word	0x200002e0
 80017cc:	40014400 	.word	0x40014400

080017d0 <MX_TIM11_Init>:
>>>>>>> 39e4d10438a821cc799a472af87a77c6796a1676
>>>>>>> ef0d341697957f8628c074acbc12bb9a12bbe146
  * @brief TIM11 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM11_Init(void)
{
<<<<<<< HEAD
 8001734:	b580      	push	{r7, lr}
 8001736:	af00      	add	r7, sp, #0
=======
<<<<<<< HEAD
 8001734:	b580      	push	{r7, lr}
 8001736:	af00      	add	r7, sp, #0
=======
 80017d0:	b580      	push	{r7, lr}
 80017d2:	af00      	add	r7, sp, #0
>>>>>>> 39e4d10438a821cc799a472af87a77c6796a1676
>>>>>>> ef0d341697957f8628c074acbc12bb9a12bbe146
  /* USER CODE END TIM11_Init 0 */

  /* USER CODE BEGIN TIM11_Init 1 */

  /* USER CODE END TIM11_Init 1 */
  htim11.Instance = TIM11;
<<<<<<< HEAD
=======
<<<<<<< HEAD
>>>>>>> ef0d341697957f8628c074acbc12bb9a12bbe146
 8001738:	4b0e      	ldr	r3, [pc, #56]	@ (8001774 <MX_TIM11_Init+0x40>)
 800173a:	4a0f      	ldr	r2, [pc, #60]	@ (8001778 <MX_TIM11_Init+0x44>)
 800173c:	601a      	str	r2, [r3, #0]
  htim11.Init.Prescaler = 99;
 800173e:	4b0d      	ldr	r3, [pc, #52]	@ (8001774 <MX_TIM11_Init+0x40>)
 8001740:	2263      	movs	r2, #99	@ 0x63
 8001742:	605a      	str	r2, [r3, #4]
  htim11.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001744:	4b0b      	ldr	r3, [pc, #44]	@ (8001774 <MX_TIM11_Init+0x40>)
 8001746:	2200      	movs	r2, #0
 8001748:	609a      	str	r2, [r3, #8]
  htim11.Init.Period = 839;
 800174a:	4b0a      	ldr	r3, [pc, #40]	@ (8001774 <MX_TIM11_Init+0x40>)
 800174c:	f240 3247 	movw	r2, #839	@ 0x347
 8001750:	60da      	str	r2, [r3, #12]
  htim11.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001752:	4b08      	ldr	r3, [pc, #32]	@ (8001774 <MX_TIM11_Init+0x40>)
 8001754:	2200      	movs	r2, #0
 8001756:	611a      	str	r2, [r3, #16]
  htim11.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001758:	4b06      	ldr	r3, [pc, #24]	@ (8001774 <MX_TIM11_Init+0x40>)
 800175a:	2200      	movs	r2, #0
 800175c:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim11) != HAL_OK)
 800175e:	4805      	ldr	r0, [pc, #20]	@ (8001774 <MX_TIM11_Init+0x40>)
<<<<<<< HEAD
 8001760:	f002 fe0c 	bl	800437c <HAL_TIM_Base_Init>
=======
 8001760:	f002 fe00 	bl	8004364 <HAL_TIM_Base_Init>
>>>>>>> ef0d341697957f8628c074acbc12bb9a12bbe146
 8001764:	4603      	mov	r3, r0
 8001766:	2b00      	cmp	r3, #0
 8001768:	d001      	beq.n	800176e <MX_TIM11_Init+0x3a>
  {
    Error_Handler();
<<<<<<< HEAD
 800176a:	f000 f9c5 	bl	8001af8 <Error_Handler>
=======
 800176a:	f000 f9b9 	bl	8001ae0 <Error_Handler>
=======
 80017d4:	4b0e      	ldr	r3, [pc, #56]	@ (8001810 <MX_TIM11_Init+0x40>)
 80017d6:	4a0f      	ldr	r2, [pc, #60]	@ (8001814 <MX_TIM11_Init+0x44>)
 80017d8:	601a      	str	r2, [r3, #0]
  htim11.Init.Prescaler = 99;
 80017da:	4b0d      	ldr	r3, [pc, #52]	@ (8001810 <MX_TIM11_Init+0x40>)
 80017dc:	2263      	movs	r2, #99	@ 0x63
 80017de:	605a      	str	r2, [r3, #4]
  htim11.Init.CounterMode = TIM_COUNTERMODE_UP;
 80017e0:	4b0b      	ldr	r3, [pc, #44]	@ (8001810 <MX_TIM11_Init+0x40>)
 80017e2:	2200      	movs	r2, #0
 80017e4:	609a      	str	r2, [r3, #8]
  htim11.Init.Period = 839;
 80017e6:	4b0a      	ldr	r3, [pc, #40]	@ (8001810 <MX_TIM11_Init+0x40>)
 80017e8:	f240 3247 	movw	r2, #839	@ 0x347
 80017ec:	60da      	str	r2, [r3, #12]
  htim11.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80017ee:	4b08      	ldr	r3, [pc, #32]	@ (8001810 <MX_TIM11_Init+0x40>)
 80017f0:	2200      	movs	r2, #0
 80017f2:	611a      	str	r2, [r3, #16]
  htim11.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80017f4:	4b06      	ldr	r3, [pc, #24]	@ (8001810 <MX_TIM11_Init+0x40>)
 80017f6:	2200      	movs	r2, #0
 80017f8:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim11) != HAL_OK)
 80017fa:	4805      	ldr	r0, [pc, #20]	@ (8001810 <MX_TIM11_Init+0x40>)
 80017fc:	f002 fe3c 	bl	8004478 <HAL_TIM_Base_Init>
 8001800:	4603      	mov	r3, r0
 8001802:	2b00      	cmp	r3, #0
 8001804:	d001      	beq.n	800180a <MX_TIM11_Init+0x3a>
  {
    Error_Handler();
 8001806:	f000 f9f5 	bl	8001bf4 <Error_Handler>
>>>>>>> 39e4d10438a821cc799a472af87a77c6796a1676
>>>>>>> ef0d341697957f8628c074acbc12bb9a12bbe146
  }
  /* USER CODE BEGIN TIM11_Init 2 */

  /* USER CODE END TIM11_Init 2 */

}
<<<<<<< HEAD
=======
<<<<<<< HEAD
>>>>>>> ef0d341697957f8628c074acbc12bb9a12bbe146
 800176e:	bf00      	nop
 8001770:	bd80      	pop	{r7, pc}
 8001772:	bf00      	nop
 8001774:	20000328 	.word	0x20000328
 8001778:	40014800 	.word	0x40014800

0800177c <MX_USART2_UART_Init>:
<<<<<<< HEAD
=======
=======
 800180a:	bf00      	nop
 800180c:	bd80      	pop	{r7, pc}
 800180e:	bf00      	nop
 8001810:	20000328 	.word	0x20000328
 8001814:	40014800 	.word	0x40014800

08001818 <MX_USART2_UART_Init>:
>>>>>>> 39e4d10438a821cc799a472af87a77c6796a1676
>>>>>>> ef0d341697957f8628c074acbc12bb9a12bbe146
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
<<<<<<< HEAD
 800177c:	b580      	push	{r7, lr}
 800177e:	af00      	add	r7, sp, #0
=======
<<<<<<< HEAD
 800177c:	b580      	push	{r7, lr}
 800177e:	af00      	add	r7, sp, #0
=======
 8001818:	b580      	push	{r7, lr}
 800181a:	af00      	add	r7, sp, #0
>>>>>>> 39e4d10438a821cc799a472af87a77c6796a1676
>>>>>>> ef0d341697957f8628c074acbc12bb9a12bbe146
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
<<<<<<< HEAD
=======
<<<<<<< HEAD
>>>>>>> ef0d341697957f8628c074acbc12bb9a12bbe146
 8001780:	4b11      	ldr	r3, [pc, #68]	@ (80017c8 <MX_USART2_UART_Init+0x4c>)
 8001782:	4a12      	ldr	r2, [pc, #72]	@ (80017cc <MX_USART2_UART_Init+0x50>)
 8001784:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8001786:	4b10      	ldr	r3, [pc, #64]	@ (80017c8 <MX_USART2_UART_Init+0x4c>)
 8001788:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 800178c:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 800178e:	4b0e      	ldr	r3, [pc, #56]	@ (80017c8 <MX_USART2_UART_Init+0x4c>)
 8001790:	2200      	movs	r2, #0
 8001792:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8001794:	4b0c      	ldr	r3, [pc, #48]	@ (80017c8 <MX_USART2_UART_Init+0x4c>)
 8001796:	2200      	movs	r2, #0
 8001798:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 800179a:	4b0b      	ldr	r3, [pc, #44]	@ (80017c8 <MX_USART2_UART_Init+0x4c>)
 800179c:	2200      	movs	r2, #0
 800179e:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 80017a0:	4b09      	ldr	r3, [pc, #36]	@ (80017c8 <MX_USART2_UART_Init+0x4c>)
 80017a2:	220c      	movs	r2, #12
 80017a4:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80017a6:	4b08      	ldr	r3, [pc, #32]	@ (80017c8 <MX_USART2_UART_Init+0x4c>)
 80017a8:	2200      	movs	r2, #0
 80017aa:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 80017ac:	4b06      	ldr	r3, [pc, #24]	@ (80017c8 <MX_USART2_UART_Init+0x4c>)
 80017ae:	2200      	movs	r2, #0
 80017b0:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 80017b2:	4805      	ldr	r0, [pc, #20]	@ (80017c8 <MX_USART2_UART_Init+0x4c>)
<<<<<<< HEAD
 80017b4:	f003 feb4 	bl	8005520 <HAL_UART_Init>
=======
 80017b4:	f003 fea8 	bl	8005508 <HAL_UART_Init>
>>>>>>> ef0d341697957f8628c074acbc12bb9a12bbe146
 80017b8:	4603      	mov	r3, r0
 80017ba:	2b00      	cmp	r3, #0
 80017bc:	d001      	beq.n	80017c2 <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
<<<<<<< HEAD
 80017be:	f000 f99b 	bl	8001af8 <Error_Handler>
=======
 80017be:	f000 f98f 	bl	8001ae0 <Error_Handler>
=======
 800181c:	4b11      	ldr	r3, [pc, #68]	@ (8001864 <MX_USART2_UART_Init+0x4c>)
 800181e:	4a12      	ldr	r2, [pc, #72]	@ (8001868 <MX_USART2_UART_Init+0x50>)
 8001820:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8001822:	4b10      	ldr	r3, [pc, #64]	@ (8001864 <MX_USART2_UART_Init+0x4c>)
 8001824:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8001828:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 800182a:	4b0e      	ldr	r3, [pc, #56]	@ (8001864 <MX_USART2_UART_Init+0x4c>)
 800182c:	2200      	movs	r2, #0
 800182e:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8001830:	4b0c      	ldr	r3, [pc, #48]	@ (8001864 <MX_USART2_UART_Init+0x4c>)
 8001832:	2200      	movs	r2, #0
 8001834:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8001836:	4b0b      	ldr	r3, [pc, #44]	@ (8001864 <MX_USART2_UART_Init+0x4c>)
 8001838:	2200      	movs	r2, #0
 800183a:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 800183c:	4b09      	ldr	r3, [pc, #36]	@ (8001864 <MX_USART2_UART_Init+0x4c>)
 800183e:	220c      	movs	r2, #12
 8001840:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001842:	4b08      	ldr	r3, [pc, #32]	@ (8001864 <MX_USART2_UART_Init+0x4c>)
 8001844:	2200      	movs	r2, #0
 8001846:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8001848:	4b06      	ldr	r3, [pc, #24]	@ (8001864 <MX_USART2_UART_Init+0x4c>)
 800184a:	2200      	movs	r2, #0
 800184c:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 800184e:	4805      	ldr	r0, [pc, #20]	@ (8001864 <MX_USART2_UART_Init+0x4c>)
 8001850:	f003 fee4 	bl	800561c <HAL_UART_Init>
 8001854:	4603      	mov	r3, r0
 8001856:	2b00      	cmp	r3, #0
 8001858:	d001      	beq.n	800185e <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 800185a:	f000 f9cb 	bl	8001bf4 <Error_Handler>
>>>>>>> 39e4d10438a821cc799a472af87a77c6796a1676
>>>>>>> ef0d341697957f8628c074acbc12bb9a12bbe146
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
<<<<<<< HEAD
=======
<<<<<<< HEAD
>>>>>>> ef0d341697957f8628c074acbc12bb9a12bbe146
 80017c2:	bf00      	nop
 80017c4:	bd80      	pop	{r7, pc}
 80017c6:	bf00      	nop
 80017c8:	20000370 	.word	0x20000370
 80017cc:	40004400 	.word	0x40004400

080017d0 <MX_DMA_Init>:
<<<<<<< HEAD
=======
=======
 800185e:	bf00      	nop
 8001860:	bd80      	pop	{r7, pc}
 8001862:	bf00      	nop
 8001864:	20000370 	.word	0x20000370
 8001868:	40004400 	.word	0x40004400

0800186c <MX_DMA_Init>:
>>>>>>> 39e4d10438a821cc799a472af87a77c6796a1676
>>>>>>> ef0d341697957f8628c074acbc12bb9a12bbe146

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
<<<<<<< HEAD
=======
<<<<<<< HEAD
>>>>>>> ef0d341697957f8628c074acbc12bb9a12bbe146
 80017d0:	b580      	push	{r7, lr}
 80017d2:	b082      	sub	sp, #8
 80017d4:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA2_CLK_ENABLE();
 80017d6:	2300      	movs	r3, #0
 80017d8:	607b      	str	r3, [r7, #4]
 80017da:	4b0c      	ldr	r3, [pc, #48]	@ (800180c <MX_DMA_Init+0x3c>)
 80017dc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80017de:	4a0b      	ldr	r2, [pc, #44]	@ (800180c <MX_DMA_Init+0x3c>)
 80017e0:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 80017e4:	6313      	str	r3, [r2, #48]	@ 0x30
 80017e6:	4b09      	ldr	r3, [pc, #36]	@ (800180c <MX_DMA_Init+0x3c>)
 80017e8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80017ea:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80017ee:	607b      	str	r3, [r7, #4]
 80017f0:	687b      	ldr	r3, [r7, #4]
<<<<<<< HEAD
=======
=======
 800186c:	b580      	push	{r7, lr}
 800186e:	b082      	sub	sp, #8
 8001870:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA2_CLK_ENABLE();
 8001872:	2300      	movs	r3, #0
 8001874:	607b      	str	r3, [r7, #4]
 8001876:	4b0c      	ldr	r3, [pc, #48]	@ (80018a8 <MX_DMA_Init+0x3c>)
 8001878:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800187a:	4a0b      	ldr	r2, [pc, #44]	@ (80018a8 <MX_DMA_Init+0x3c>)
 800187c:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 8001880:	6313      	str	r3, [r2, #48]	@ 0x30
 8001882:	4b09      	ldr	r3, [pc, #36]	@ (80018a8 <MX_DMA_Init+0x3c>)
 8001884:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001886:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800188a:	607b      	str	r3, [r7, #4]
 800188c:	687b      	ldr	r3, [r7, #4]
>>>>>>> 39e4d10438a821cc799a472af87a77c6796a1676
>>>>>>> ef0d341697957f8628c074acbc12bb9a12bbe146

  /* DMA interrupt init */
  /* DMA2_Stream0_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream0_IRQn, 0, 0);
<<<<<<< HEAD
 80017f2:	2200      	movs	r2, #0
 80017f4:	2100      	movs	r1, #0
 80017f6:	2038      	movs	r0, #56	@ 0x38
 80017f8:	f001 f9d9 	bl	8002bae <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream0_IRQn);
 80017fc:	2038      	movs	r0, #56	@ 0x38
 80017fe:	f001 f9f2 	bl	8002be6 <HAL_NVIC_EnableIRQ>
=======
<<<<<<< HEAD
 80017f2:	2200      	movs	r2, #0
 80017f4:	2100      	movs	r1, #0
 80017f6:	2038      	movs	r0, #56	@ 0x38
 80017f8:	f001 f9cd 	bl	8002b96 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream0_IRQn);
 80017fc:	2038      	movs	r0, #56	@ 0x38
 80017fe:	f001 f9e6 	bl	8002bce <HAL_NVIC_EnableIRQ>
>>>>>>> ef0d341697957f8628c074acbc12bb9a12bbe146

}
 8001802:	bf00      	nop
 8001804:	3708      	adds	r7, #8
 8001806:	46bd      	mov	sp, r7
 8001808:	bd80      	pop	{r7, pc}
 800180a:	bf00      	nop
 800180c:	40023800 	.word	0x40023800

08001810 <MX_GPIO_Init>:
<<<<<<< HEAD
=======
=======
 800188e:	2200      	movs	r2, #0
 8001890:	2100      	movs	r1, #0
 8001892:	2038      	movs	r0, #56	@ 0x38
 8001894:	f001 fa09 	bl	8002caa <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream0_IRQn);
 8001898:	2038      	movs	r0, #56	@ 0x38
 800189a:	f001 fa22 	bl	8002ce2 <HAL_NVIC_EnableIRQ>

}
 800189e:	bf00      	nop
 80018a0:	3708      	adds	r7, #8
 80018a2:	46bd      	mov	sp, r7
 80018a4:	bd80      	pop	{r7, pc}
 80018a6:	bf00      	nop
 80018a8:	40023800 	.word	0x40023800

080018ac <MX_GPIO_Init>:
>>>>>>> 39e4d10438a821cc799a472af87a77c6796a1676
>>>>>>> ef0d341697957f8628c074acbc12bb9a12bbe146
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
<<<<<<< HEAD
=======
<<<<<<< HEAD
>>>>>>> ef0d341697957f8628c074acbc12bb9a12bbe146
 8001810:	b580      	push	{r7, lr}
 8001812:	b08a      	sub	sp, #40	@ 0x28
 8001814:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001816:	f107 0314 	add.w	r3, r7, #20
 800181a:	2200      	movs	r2, #0
 800181c:	601a      	str	r2, [r3, #0]
 800181e:	605a      	str	r2, [r3, #4]
 8001820:	609a      	str	r2, [r3, #8]
 8001822:	60da      	str	r2, [r3, #12]
 8001824:	611a      	str	r2, [r3, #16]
<<<<<<< HEAD
=======
=======
 80018ac:	b580      	push	{r7, lr}
 80018ae:	b08a      	sub	sp, #40	@ 0x28
 80018b0:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80018b2:	f107 0314 	add.w	r3, r7, #20
 80018b6:	2200      	movs	r2, #0
 80018b8:	601a      	str	r2, [r3, #0]
 80018ba:	605a      	str	r2, [r3, #4]
 80018bc:	609a      	str	r2, [r3, #8]
 80018be:	60da      	str	r2, [r3, #12]
 80018c0:	611a      	str	r2, [r3, #16]
>>>>>>> 39e4d10438a821cc799a472af87a77c6796a1676
>>>>>>> ef0d341697957f8628c074acbc12bb9a12bbe146
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
<<<<<<< HEAD
 8001826:	2300      	movs	r3, #0
 8001828:	613b      	str	r3, [r7, #16]
 800182a:	4b39      	ldr	r3, [pc, #228]	@ (8001910 <MX_GPIO_Init+0x100>)
 800182c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800182e:	4a38      	ldr	r2, [pc, #224]	@ (8001910 <MX_GPIO_Init+0x100>)
 8001830:	f043 0304 	orr.w	r3, r3, #4
 8001834:	6313      	str	r3, [r2, #48]	@ 0x30
 8001836:	4b36      	ldr	r3, [pc, #216]	@ (8001910 <MX_GPIO_Init+0x100>)
=======
<<<<<<< HEAD
 8001826:	2300      	movs	r3, #0
 8001828:	613b      	str	r3, [r7, #16]
 800182a:	4b33      	ldr	r3, [pc, #204]	@ (80018f8 <MX_GPIO_Init+0xe8>)
 800182c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800182e:	4a32      	ldr	r2, [pc, #200]	@ (80018f8 <MX_GPIO_Init+0xe8>)
 8001830:	f043 0304 	orr.w	r3, r3, #4
 8001834:	6313      	str	r3, [r2, #48]	@ 0x30
 8001836:	4b30      	ldr	r3, [pc, #192]	@ (80018f8 <MX_GPIO_Init+0xe8>)
>>>>>>> ef0d341697957f8628c074acbc12bb9a12bbe146
 8001838:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800183a:	f003 0304 	and.w	r3, r3, #4
 800183e:	613b      	str	r3, [r7, #16]
 8001840:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8001842:	2300      	movs	r3, #0
 8001844:	60fb      	str	r3, [r7, #12]
<<<<<<< HEAD
 8001846:	4b32      	ldr	r3, [pc, #200]	@ (8001910 <MX_GPIO_Init+0x100>)
 8001848:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800184a:	4a31      	ldr	r2, [pc, #196]	@ (8001910 <MX_GPIO_Init+0x100>)
 800184c:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8001850:	6313      	str	r3, [r2, #48]	@ 0x30
 8001852:	4b2f      	ldr	r3, [pc, #188]	@ (8001910 <MX_GPIO_Init+0x100>)
=======
 8001846:	4b2c      	ldr	r3, [pc, #176]	@ (80018f8 <MX_GPIO_Init+0xe8>)
 8001848:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800184a:	4a2b      	ldr	r2, [pc, #172]	@ (80018f8 <MX_GPIO_Init+0xe8>)
 800184c:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8001850:	6313      	str	r3, [r2, #48]	@ 0x30
 8001852:	4b29      	ldr	r3, [pc, #164]	@ (80018f8 <MX_GPIO_Init+0xe8>)
>>>>>>> ef0d341697957f8628c074acbc12bb9a12bbe146
 8001854:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001856:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800185a:	60fb      	str	r3, [r7, #12]
 800185c:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800185e:	2300      	movs	r3, #0
 8001860:	60bb      	str	r3, [r7, #8]
<<<<<<< HEAD
 8001862:	4b2b      	ldr	r3, [pc, #172]	@ (8001910 <MX_GPIO_Init+0x100>)
 8001864:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001866:	4a2a      	ldr	r2, [pc, #168]	@ (8001910 <MX_GPIO_Init+0x100>)
 8001868:	f043 0301 	orr.w	r3, r3, #1
 800186c:	6313      	str	r3, [r2, #48]	@ 0x30
 800186e:	4b28      	ldr	r3, [pc, #160]	@ (8001910 <MX_GPIO_Init+0x100>)
=======
 8001862:	4b25      	ldr	r3, [pc, #148]	@ (80018f8 <MX_GPIO_Init+0xe8>)
 8001864:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001866:	4a24      	ldr	r2, [pc, #144]	@ (80018f8 <MX_GPIO_Init+0xe8>)
 8001868:	f043 0301 	orr.w	r3, r3, #1
 800186c:	6313      	str	r3, [r2, #48]	@ 0x30
 800186e:	4b22      	ldr	r3, [pc, #136]	@ (80018f8 <MX_GPIO_Init+0xe8>)
>>>>>>> ef0d341697957f8628c074acbc12bb9a12bbe146
 8001870:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001872:	f003 0301 	and.w	r3, r3, #1
 8001876:	60bb      	str	r3, [r7, #8]
 8001878:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800187a:	2300      	movs	r3, #0
 800187c:	607b      	str	r3, [r7, #4]
<<<<<<< HEAD
 800187e:	4b24      	ldr	r3, [pc, #144]	@ (8001910 <MX_GPIO_Init+0x100>)
 8001880:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001882:	4a23      	ldr	r2, [pc, #140]	@ (8001910 <MX_GPIO_Init+0x100>)
 8001884:	f043 0302 	orr.w	r3, r3, #2
 8001888:	6313      	str	r3, [r2, #48]	@ 0x30
 800188a:	4b21      	ldr	r3, [pc, #132]	@ (8001910 <MX_GPIO_Init+0x100>)
=======
 800187e:	4b1e      	ldr	r3, [pc, #120]	@ (80018f8 <MX_GPIO_Init+0xe8>)
 8001880:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001882:	4a1d      	ldr	r2, [pc, #116]	@ (80018f8 <MX_GPIO_Init+0xe8>)
 8001884:	f043 0302 	orr.w	r3, r3, #2
 8001888:	6313      	str	r3, [r2, #48]	@ 0x30
 800188a:	4b1b      	ldr	r3, [pc, #108]	@ (80018f8 <MX_GPIO_Init+0xe8>)
>>>>>>> ef0d341697957f8628c074acbc12bb9a12bbe146
 800188c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800188e:	f003 0302 	and.w	r3, r3, #2
 8001892:	607b      	str	r3, [r7, #4]
 8001894:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 8001896:	2200      	movs	r2, #0
 8001898:	2120      	movs	r1, #32
<<<<<<< HEAD
 800189a:	481e      	ldr	r0, [pc, #120]	@ (8001914 <MX_GPIO_Init+0x104>)
 800189c:	f001 ff6c 	bl	8003778 <HAL_GPIO_WritePin>
=======
 800189a:	4818      	ldr	r0, [pc, #96]	@ (80018fc <MX_GPIO_Init+0xec>)
 800189c:	f001 ff60 	bl	8003760 <HAL_GPIO_WritePin>
>>>>>>> ef0d341697957f8628c074acbc12bb9a12bbe146

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 80018a0:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 80018a4:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 80018a6:	f44f 1304 	mov.w	r3, #2162688	@ 0x210000
 80018aa:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80018ac:	2300      	movs	r3, #0
 80018ae:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 80018b0:	f107 0314 	add.w	r3, r7, #20
 80018b4:	4619      	mov	r1, r3
<<<<<<< HEAD
 80018b6:	4818      	ldr	r0, [pc, #96]	@ (8001918 <MX_GPIO_Init+0x108>)
 80018b8:	f001 fdb2 	bl	8003420 <HAL_GPIO_Init>

  /*Configure GPIO pin : BOTAO_Pin */
  GPIO_InitStruct.Pin = BOTAO_Pin;
 80018bc:	2301      	movs	r3, #1
=======
 80018b6:	4812      	ldr	r0, [pc, #72]	@ (8001900 <MX_GPIO_Init+0xf0>)
 80018b8:	f001 fda6 	bl	8003408 <HAL_GPIO_Init>

  /*Configure GPIO pins : BOTAO_Pin BOTAO_OFFSET_Pin */
  GPIO_InitStruct.Pin = BOTAO_Pin|BOTAO_OFFSET_Pin;
 80018bc:	2303      	movs	r3, #3
>>>>>>> ef0d341697957f8628c074acbc12bb9a12bbe146
 80018be:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80018c0:	2300      	movs	r3, #0
 80018c2:	61bb      	str	r3, [r7, #24]
<<<<<<< HEAD
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 80018c4:	2301      	movs	r3, #1
 80018c6:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(BOTAO_GPIO_Port, &GPIO_InitStruct);
 80018c8:	f107 0314 	add.w	r3, r7, #20
 80018cc:	4619      	mov	r1, r3
 80018ce:	4812      	ldr	r0, [pc, #72]	@ (8001918 <MX_GPIO_Init+0x108>)
 80018d0:	f001 fda6 	bl	8003420 <HAL_GPIO_Init>

  /*Configure GPIO pin : BOTAO_OFFSET_Pin */
  GPIO_InitStruct.Pin = BOTAO_OFFSET_Pin;
 80018d4:	2302      	movs	r3, #2
 80018d6:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80018d8:	2300      	movs	r3, #0
 80018da:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80018dc:	2300      	movs	r3, #0
 80018de:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(BOTAO_OFFSET_GPIO_Port, &GPIO_InitStruct);
 80018e0:	f107 0314 	add.w	r3, r7, #20
 80018e4:	4619      	mov	r1, r3
 80018e6:	480c      	ldr	r0, [pc, #48]	@ (8001918 <MX_GPIO_Init+0x108>)
 80018e8:	f001 fd9a 	bl	8003420 <HAL_GPIO_Init>

  /*Configure GPIO pin : LD2_Pin */
  GPIO_InitStruct.Pin = LD2_Pin;
 80018ec:	2320      	movs	r3, #32
 80018ee:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80018f0:	2301      	movs	r3, #1
 80018f2:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80018f4:	2300      	movs	r3, #0
 80018f6:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80018f8:	2300      	movs	r3, #0
 80018fa:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 80018fc:	f107 0314 	add.w	r3, r7, #20
 8001900:	4619      	mov	r1, r3
 8001902:	4804      	ldr	r0, [pc, #16]	@ (8001914 <MX_GPIO_Init+0x104>)
 8001904:	f001 fd8c 	bl	8003420 <HAL_GPIO_Init>
=======
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80018c4:	2300      	movs	r3, #0
 80018c6:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80018c8:	f107 0314 	add.w	r3, r7, #20
 80018cc:	4619      	mov	r1, r3
 80018ce:	480c      	ldr	r0, [pc, #48]	@ (8001900 <MX_GPIO_Init+0xf0>)
 80018d0:	f001 fd9a 	bl	8003408 <HAL_GPIO_Init>

  /*Configure GPIO pin : LD2_Pin */
  GPIO_InitStruct.Pin = LD2_Pin;
 80018d4:	2320      	movs	r3, #32
 80018d6:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80018d8:	2301      	movs	r3, #1
 80018da:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80018dc:	2300      	movs	r3, #0
 80018de:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80018e0:	2300      	movs	r3, #0
 80018e2:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 80018e4:	f107 0314 	add.w	r3, r7, #20
 80018e8:	4619      	mov	r1, r3
 80018ea:	4804      	ldr	r0, [pc, #16]	@ (80018fc <MX_GPIO_Init+0xec>)
 80018ec:	f001 fd8c 	bl	8003408 <HAL_GPIO_Init>
=======
 80018c2:	2300      	movs	r3, #0
 80018c4:	613b      	str	r3, [r7, #16]
 80018c6:	4b33      	ldr	r3, [pc, #204]	@ (8001994 <MX_GPIO_Init+0xe8>)
 80018c8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80018ca:	4a32      	ldr	r2, [pc, #200]	@ (8001994 <MX_GPIO_Init+0xe8>)
 80018cc:	f043 0304 	orr.w	r3, r3, #4
 80018d0:	6313      	str	r3, [r2, #48]	@ 0x30
 80018d2:	4b30      	ldr	r3, [pc, #192]	@ (8001994 <MX_GPIO_Init+0xe8>)
 80018d4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80018d6:	f003 0304 	and.w	r3, r3, #4
 80018da:	613b      	str	r3, [r7, #16]
 80018dc:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80018de:	2300      	movs	r3, #0
 80018e0:	60fb      	str	r3, [r7, #12]
 80018e2:	4b2c      	ldr	r3, [pc, #176]	@ (8001994 <MX_GPIO_Init+0xe8>)
 80018e4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80018e6:	4a2b      	ldr	r2, [pc, #172]	@ (8001994 <MX_GPIO_Init+0xe8>)
 80018e8:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80018ec:	6313      	str	r3, [r2, #48]	@ 0x30
 80018ee:	4b29      	ldr	r3, [pc, #164]	@ (8001994 <MX_GPIO_Init+0xe8>)
 80018f0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80018f2:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80018f6:	60fb      	str	r3, [r7, #12]
 80018f8:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80018fa:	2300      	movs	r3, #0
 80018fc:	60bb      	str	r3, [r7, #8]
 80018fe:	4b25      	ldr	r3, [pc, #148]	@ (8001994 <MX_GPIO_Init+0xe8>)
 8001900:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001902:	4a24      	ldr	r2, [pc, #144]	@ (8001994 <MX_GPIO_Init+0xe8>)
 8001904:	f043 0301 	orr.w	r3, r3, #1
 8001908:	6313      	str	r3, [r2, #48]	@ 0x30
 800190a:	4b22      	ldr	r3, [pc, #136]	@ (8001994 <MX_GPIO_Init+0xe8>)
 800190c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800190e:	f003 0301 	and.w	r3, r3, #1
 8001912:	60bb      	str	r3, [r7, #8]
 8001914:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001916:	2300      	movs	r3, #0
 8001918:	607b      	str	r3, [r7, #4]
 800191a:	4b1e      	ldr	r3, [pc, #120]	@ (8001994 <MX_GPIO_Init+0xe8>)
 800191c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800191e:	4a1d      	ldr	r2, [pc, #116]	@ (8001994 <MX_GPIO_Init+0xe8>)
 8001920:	f043 0302 	orr.w	r3, r3, #2
 8001924:	6313      	str	r3, [r2, #48]	@ 0x30
 8001926:	4b1b      	ldr	r3, [pc, #108]	@ (8001994 <MX_GPIO_Init+0xe8>)
 8001928:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800192a:	f003 0302 	and.w	r3, r3, #2
 800192e:	607b      	str	r3, [r7, #4]
 8001930:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 8001932:	2200      	movs	r2, #0
 8001934:	2120      	movs	r1, #32
 8001936:	4818      	ldr	r0, [pc, #96]	@ (8001998 <MX_GPIO_Init+0xec>)
 8001938:	f001 ff9c 	bl	8003874 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 800193c:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8001940:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8001942:	f44f 1304 	mov.w	r3, #2162688	@ 0x210000
 8001946:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001948:	2300      	movs	r3, #0
 800194a:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 800194c:	f107 0314 	add.w	r3, r7, #20
 8001950:	4619      	mov	r1, r3
 8001952:	4812      	ldr	r0, [pc, #72]	@ (800199c <MX_GPIO_Init+0xf0>)
 8001954:	f001 fde2 	bl	800351c <HAL_GPIO_Init>

  /*Configure GPIO pins : BOTAO_Pin BOTAO_OFFSET_Pin */
  GPIO_InitStruct.Pin = BOTAO_Pin|BOTAO_OFFSET_Pin;
 8001958:	2303      	movs	r3, #3
 800195a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800195c:	2300      	movs	r3, #0
 800195e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001960:	2300      	movs	r3, #0
 8001962:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001964:	f107 0314 	add.w	r3, r7, #20
 8001968:	4619      	mov	r1, r3
 800196a:	480c      	ldr	r0, [pc, #48]	@ (800199c <MX_GPIO_Init+0xf0>)
 800196c:	f001 fdd6 	bl	800351c <HAL_GPIO_Init>

  /*Configure GPIO pin : LD2_Pin */
  GPIO_InitStruct.Pin = LD2_Pin;
 8001970:	2320      	movs	r3, #32
 8001972:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001974:	2301      	movs	r3, #1
 8001976:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001978:	2300      	movs	r3, #0
 800197a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800197c:	2300      	movs	r3, #0
 800197e:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 8001980:	f107 0314 	add.w	r3, r7, #20
 8001984:	4619      	mov	r1, r3
 8001986:	4804      	ldr	r0, [pc, #16]	@ (8001998 <MX_GPIO_Init+0xec>)
 8001988:	f001 fdc8 	bl	800351c <HAL_GPIO_Init>
>>>>>>> 39e4d10438a821cc799a472af87a77c6796a1676
>>>>>>> ef0d341697957f8628c074acbc12bb9a12bbe146

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
<<<<<<< HEAD
 8001908:	bf00      	nop
 800190a:	3728      	adds	r7, #40	@ 0x28
 800190c:	46bd      	mov	sp, r7
 800190e:	bd80      	pop	{r7, pc}
 8001910:	40023800 	.word	0x40023800
 8001914:	40020000 	.word	0x40020000
 8001918:	40020800 	.word	0x40020800

0800191c <HAL_TIM_PeriodElapsedCallback>:
=======
<<<<<<< HEAD
 80018f0:	bf00      	nop
 80018f2:	3728      	adds	r7, #40	@ 0x28
 80018f4:	46bd      	mov	sp, r7
 80018f6:	bd80      	pop	{r7, pc}
 80018f8:	40023800 	.word	0x40023800
 80018fc:	40020000 	.word	0x40020000
 8001900:	40020800 	.word	0x40020800

08001904 <HAL_TIM_PeriodElapsedCallback>:
=======
 800198c:	bf00      	nop
 800198e:	3728      	adds	r7, #40	@ 0x28
 8001990:	46bd      	mov	sp, r7
 8001992:	bd80      	pop	{r7, pc}
 8001994:	40023800 	.word	0x40023800
 8001998:	40020000 	.word	0x40020000
 800199c:	40020800 	.word	0x40020800

080019a0 <HAL_TIM_PeriodElapsedCallback>:
>>>>>>> 39e4d10438a821cc799a472af87a77c6796a1676
>>>>>>> ef0d341697957f8628c074acbc12bb9a12bbe146

/* USER CODE BEGIN 4 */

void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
<<<<<<< HEAD
 800191c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8001920:	b096      	sub	sp, #88	@ 0x58
 8001922:	af0e      	add	r7, sp, #56	@ 0x38
 8001924:	61f8      	str	r0, [r7, #28]
	if (htim->Instance==TIM10)
 8001926:	69fb      	ldr	r3, [r7, #28]
 8001928:	681b      	ldr	r3, [r3, #0]
 800192a:	4a35      	ldr	r2, [pc, #212]	@ (8001a00 <HAL_TIM_PeriodElapsedCallback+0xe4>)
 800192c:	4293      	cmp	r3, r2
 800192e:	d162      	bne.n	80019f6 <HAL_TIM_PeriodElapsedCallback+0xda>
	{
		snprintf(msg, msgSIZE, "{\"x\": %.2f ,\"y\": %.2f, \"z\": %.2f, \"angulo1\": %.2f, \"angulo2\": %.2f, \"angulo3\": %.2f, \"angulo4\": %.2f}\n",
 8001930:	4b34      	ldr	r3, [pc, #208]	@ (8001a04 <HAL_TIM_PeriodElapsedCallback+0xe8>)
 8001932:	681b      	ldr	r3, [r3, #0]
 8001934:	4618      	mov	r0, r3
 8001936:	f7fe fe27 	bl	8000588 <__aeabi_f2d>
 800193a:	4680      	mov	r8, r0
 800193c:	4689      	mov	r9, r1
 800193e:	4b32      	ldr	r3, [pc, #200]	@ (8001a08 <HAL_TIM_PeriodElapsedCallback+0xec>)
 8001940:	681b      	ldr	r3, [r3, #0]
 8001942:	4618      	mov	r0, r3
 8001944:	f7fe fe20 	bl	8000588 <__aeabi_f2d>
 8001948:	4682      	mov	sl, r0
 800194a:	468b      	mov	fp, r1
 800194c:	4b2f      	ldr	r3, [pc, #188]	@ (8001a0c <HAL_TIM_PeriodElapsedCallback+0xf0>)
 800194e:	681b      	ldr	r3, [r3, #0]
 8001950:	4618      	mov	r0, r3
 8001952:	f7fe fe19 	bl	8000588 <__aeabi_f2d>
 8001956:	e9c7 0104 	strd	r0, r1, [r7, #16]
				x, y, z, angulos_graus[0], angulos_graus[1] - angulos_graus[0], angulos_graus[2] - angulos_graus[1], angulos_graus[3]);
 800195a:	4b2d      	ldr	r3, [pc, #180]	@ (8001a10 <HAL_TIM_PeriodElapsedCallback+0xf4>)
 800195c:	681b      	ldr	r3, [r3, #0]
		snprintf(msg, msgSIZE, "{\"x\": %.2f ,\"y\": %.2f, \"z\": %.2f, \"angulo1\": %.2f, \"angulo2\": %.2f, \"angulo3\": %.2f, \"angulo4\": %.2f}\n",
 800195e:	4618      	mov	r0, r3
 8001960:	f7fe fe12 	bl	8000588 <__aeabi_f2d>
 8001964:	e9c7 0102 	strd	r0, r1, [r7, #8]
				x, y, z, angulos_graus[0], angulos_graus[1] - angulos_graus[0], angulos_graus[2] - angulos_graus[1], angulos_graus[3]);
 8001968:	4b29      	ldr	r3, [pc, #164]	@ (8001a10 <HAL_TIM_PeriodElapsedCallback+0xf4>)
 800196a:	ed93 7a01 	vldr	s14, [r3, #4]
 800196e:	4b28      	ldr	r3, [pc, #160]	@ (8001a10 <HAL_TIM_PeriodElapsedCallback+0xf4>)
 8001970:	edd3 7a00 	vldr	s15, [r3]
 8001974:	ee77 7a67 	vsub.f32	s15, s14, s15
		snprintf(msg, msgSIZE, "{\"x\": %.2f ,\"y\": %.2f, \"z\": %.2f, \"angulo1\": %.2f, \"angulo2\": %.2f, \"angulo3\": %.2f, \"angulo4\": %.2f}\n",
 8001978:	ee17 0a90 	vmov	r0, s15
 800197c:	f7fe fe04 	bl	8000588 <__aeabi_f2d>
 8001980:	e9c7 0100 	strd	r0, r1, [r7]
				x, y, z, angulos_graus[0], angulos_graus[1] - angulos_graus[0], angulos_graus[2] - angulos_graus[1], angulos_graus[3]);
 8001984:	4b22      	ldr	r3, [pc, #136]	@ (8001a10 <HAL_TIM_PeriodElapsedCallback+0xf4>)
 8001986:	ed93 7a02 	vldr	s14, [r3, #8]
 800198a:	4b21      	ldr	r3, [pc, #132]	@ (8001a10 <HAL_TIM_PeriodElapsedCallback+0xf4>)
 800198c:	edd3 7a01 	vldr	s15, [r3, #4]
 8001990:	ee77 7a67 	vsub.f32	s15, s14, s15
		snprintf(msg, msgSIZE, "{\"x\": %.2f ,\"y\": %.2f, \"z\": %.2f, \"angulo1\": %.2f, \"angulo2\": %.2f, \"angulo3\": %.2f, \"angulo4\": %.2f}\n",
 8001994:	ee17 0a90 	vmov	r0, s15
 8001998:	f7fe fdf6 	bl	8000588 <__aeabi_f2d>
 800199c:	4604      	mov	r4, r0
 800199e:	460d      	mov	r5, r1
				x, y, z, angulos_graus[0], angulos_graus[1] - angulos_graus[0], angulos_graus[2] - angulos_graus[1], angulos_graus[3]);
 80019a0:	4b1b      	ldr	r3, [pc, #108]	@ (8001a10 <HAL_TIM_PeriodElapsedCallback+0xf4>)
 80019a2:	68db      	ldr	r3, [r3, #12]
		snprintf(msg, msgSIZE, "{\"x\": %.2f ,\"y\": %.2f, \"z\": %.2f, \"angulo1\": %.2f, \"angulo2\": %.2f, \"angulo3\": %.2f, \"angulo4\": %.2f}\n",
 80019a4:	4618      	mov	r0, r3
 80019a6:	f7fe fdef 	bl	8000588 <__aeabi_f2d>
 80019aa:	4602      	mov	r2, r0
 80019ac:	460b      	mov	r3, r1
 80019ae:	e9cd 230c 	strd	r2, r3, [sp, #48]	@ 0x30
 80019b2:	e9cd 450a 	strd	r4, r5, [sp, #40]	@ 0x28
 80019b6:	ed97 7b00 	vldr	d7, [r7]
 80019ba:	ed8d 7b08 	vstr	d7, [sp, #32]
 80019be:	ed97 7b02 	vldr	d7, [r7, #8]
 80019c2:	ed8d 7b06 	vstr	d7, [sp, #24]
 80019c6:	ed97 7b04 	vldr	d7, [r7, #16]
 80019ca:	ed8d 7b04 	vstr	d7, [sp, #16]
 80019ce:	e9cd ab02 	strd	sl, fp, [sp, #8]
 80019d2:	e9cd 8900 	strd	r8, r9, [sp]
 80019d6:	4a0f      	ldr	r2, [pc, #60]	@ (8001a14 <HAL_TIM_PeriodElapsedCallback+0xf8>)
 80019d8:	f44f 71fa 	mov.w	r1, #500	@ 0x1f4
 80019dc:	480e      	ldr	r0, [pc, #56]	@ (8001a18 <HAL_TIM_PeriodElapsedCallback+0xfc>)
 80019de:	f005 fa63 	bl	8006ea8 <sniprintf>
		HAL_UART_Transmit_IT(&huart2, msg, strlen(msg));
 80019e2:	480d      	ldr	r0, [pc, #52]	@ (8001a18 <HAL_TIM_PeriodElapsedCallback+0xfc>)
 80019e4:	f7fe fc64 	bl	80002b0 <strlen>
 80019e8:	4603      	mov	r3, r0
 80019ea:	b29b      	uxth	r3, r3
 80019ec:	461a      	mov	r2, r3
 80019ee:	490a      	ldr	r1, [pc, #40]	@ (8001a18 <HAL_TIM_PeriodElapsedCallback+0xfc>)
 80019f0:	480a      	ldr	r0, [pc, #40]	@ (8001a1c <HAL_TIM_PeriodElapsedCallback+0x100>)
 80019f2:	f003 fde5 	bl	80055c0 <HAL_UART_Transmit_IT>
	}
}
 80019f6:	bf00      	nop
 80019f8:	3720      	adds	r7, #32
 80019fa:	46bd      	mov	sp, r7
 80019fc:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8001a00:	40014400 	.word	0x40014400
 8001a04:	20000400 	.word	0x20000400
 8001a08:	20000404 	.word	0x20000404
 8001a0c:	200003fc 	.word	0x200003fc
 8001a10:	200003e8 	.word	0x200003e8
 8001a14:	0800a2bc 	.word	0x0800a2bc
 8001a18:	20000408 	.word	0x20000408
 8001a1c:	20000370 	.word	0x20000370

08001a20 <HAL_UART_RxCpltCallback>:

void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8001a20:	b580      	push	{r7, lr}
 8001a22:	b084      	sub	sp, #16
 8001a24:	af00      	add	r7, sp, #0
 8001a26:	6078      	str	r0, [r7, #4]
	for(int u = 0; u < N_AMOSTRAS; u++){
 8001a28:	2300      	movs	r3, #0
 8001a2a:	60fb      	str	r3, [r7, #12]
 8001a2c:	e00b      	b.n	8001a46 <HAL_UART_RxCpltCallback+0x26>
		OFFSETS[u] = medidas[u];
 8001a2e:	4a0d      	ldr	r2, [pc, #52]	@ (8001a64 <HAL_UART_RxCpltCallback+0x44>)
 8001a30:	68fb      	ldr	r3, [r7, #12]
 8001a32:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8001a36:	b299      	uxth	r1, r3
 8001a38:	4a0b      	ldr	r2, [pc, #44]	@ (8001a68 <HAL_UART_RxCpltCallback+0x48>)
 8001a3a:	68fb      	ldr	r3, [r7, #12]
 8001a3c:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
	for(int u = 0; u < N_AMOSTRAS; u++){
 8001a40:	68fb      	ldr	r3, [r7, #12]
 8001a42:	3301      	adds	r3, #1
 8001a44:	60fb      	str	r3, [r7, #12]
 8001a46:	68fb      	ldr	r3, [r7, #12]
 8001a48:	2b03      	cmp	r3, #3
 8001a4a:	ddf0      	ble.n	8001a2e <HAL_UART_RxCpltCallback+0xe>
	}
	HAL_UART_Receive_IT(&huart2, set_offset ,1);
 8001a4c:	4b07      	ldr	r3, [pc, #28]	@ (8001a6c <HAL_UART_RxCpltCallback+0x4c>)
 8001a4e:	781b      	ldrb	r3, [r3, #0]
 8001a50:	2201      	movs	r2, #1
 8001a52:	4619      	mov	r1, r3
 8001a54:	4806      	ldr	r0, [pc, #24]	@ (8001a70 <HAL_UART_RxCpltCallback+0x50>)
 8001a56:	f003 fde9 	bl	800562c <HAL_UART_Receive_IT>
}
 8001a5a:	bf00      	nop
 8001a5c:	3710      	adds	r7, #16
 8001a5e:	46bd      	mov	sp, r7
 8001a60:	bd80      	pop	{r7, pc}
 8001a62:	bf00      	nop
 8001a64:	200003b8 	.word	0x200003b8
 8001a68:	200003c0 	.word	0x200003c0
 8001a6c:	200003c9 	.word	0x200003c9
 8001a70:	20000370 	.word	0x20000370

08001a74 <HAL_ADC_ConvCpltCallback>:

void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef* hadc){
 8001a74:	b580      	push	{r7, lr}
 8001a76:	b082      	sub	sp, #8
 8001a78:	af00      	add	r7, sp, #0
 8001a7a:	6078      	str	r0, [r7, #4]

	calc_ang();
 8001a7c:	f7ff fa7c 	bl	8000f78 <calc_ang>

	r = calc_r(); // Distancia radial
 8001a80:	f7ff faf0 	bl	8001064 <calc_r>
 8001a84:	eef0 7a40 	vmov.f32	s15, s0
 8001a88:	4b15      	ldr	r3, [pc, #84]	@ (8001ae0 <HAL_ADC_ConvCpltCallback+0x6c>)
 8001a8a:	edc3 7a00 	vstr	s15, [r3]
	z = calc_z();
 8001a8e:	f7ff fb37 	bl	8001100 <calc_z>
 8001a92:	eef0 7a40 	vmov.f32	s15, s0
 8001a96:	4b13      	ldr	r3, [pc, #76]	@ (8001ae4 <HAL_ADC_ConvCpltCallback+0x70>)
 8001a98:	edc3 7a00 	vstr	s15, [r3]
	x = calc_x(r);
 8001a9c:	4b10      	ldr	r3, [pc, #64]	@ (8001ae0 <HAL_ADC_ConvCpltCallback+0x6c>)
 8001a9e:	edd3 7a00 	vldr	s15, [r3]
 8001aa2:	eeb0 0a67 	vmov.f32	s0, s15
 8001aa6:	f7ff fb7d 	bl	80011a4 <calc_x>
 8001aaa:	eef0 7a40 	vmov.f32	s15, s0
 8001aae:	4b0e      	ldr	r3, [pc, #56]	@ (8001ae8 <HAL_ADC_ConvCpltCallback+0x74>)
 8001ab0:	edc3 7a00 	vstr	s15, [r3]
	y = calc_y(r);
 8001ab4:	4b0a      	ldr	r3, [pc, #40]	@ (8001ae0 <HAL_ADC_ConvCpltCallback+0x6c>)
 8001ab6:	edd3 7a00 	vldr	s15, [r3]
 8001aba:	eeb0 0a67 	vmov.f32	s0, s15
 8001abe:	f7ff fba1 	bl	8001204 <calc_y>
 8001ac2:	eef0 7a40 	vmov.f32	s15, s0
 8001ac6:	4b09      	ldr	r3, [pc, #36]	@ (8001aec <HAL_ADC_ConvCpltCallback+0x78>)
 8001ac8:	edc3 7a00 	vstr	s15, [r3]


	//snprintf(msg, msgSIZE, "{\"x\": %.2f ,\"y\": %.2f, \"z\": %.2f, \"angulo1\": %i, \"angulo2\": %.2f, \"angulo3\": %.2f, \"angulo4\": %.2f}\n",x, y, z, angulos_graus[0], angulos_graus[1], angulos_graus[2], angulos_graus[3]);
	HAL_ADC_Start_DMA(&hadc1, medidas, N_AMOSTRAS);
 8001acc:	2204      	movs	r2, #4
 8001ace:	4908      	ldr	r1, [pc, #32]	@ (8001af0 <HAL_ADC_ConvCpltCallback+0x7c>)
 8001ad0:	4808      	ldr	r0, [pc, #32]	@ (8001af4 <HAL_ADC_ConvCpltCallback+0x80>)
 8001ad2:	f000 fbbd 	bl	8002250 <HAL_ADC_Start_DMA>

}
 8001ad6:	bf00      	nop
 8001ad8:	3708      	adds	r7, #8
 8001ada:	46bd      	mov	sp, r7
 8001adc:	bd80      	pop	{r7, pc}
 8001ade:	bf00      	nop
 8001ae0:	200003f8 	.word	0x200003f8
 8001ae4:	200003fc 	.word	0x200003fc
 8001ae8:	20000400 	.word	0x20000400
 8001aec:	20000404 	.word	0x20000404
 8001af0:	200003b8 	.word	0x200003b8
 8001af4:	200001f0 	.word	0x200001f0

08001af8 <Error_Handler>:
=======
<<<<<<< HEAD
 8001904:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8001908:	b096      	sub	sp, #88	@ 0x58
 800190a:	af0e      	add	r7, sp, #56	@ 0x38
 800190c:	61f8      	str	r0, [r7, #28]
	if (htim->Instance==TIM10)
 800190e:	69fb      	ldr	r3, [r7, #28]
 8001910:	681b      	ldr	r3, [r3, #0]
 8001912:	4a35      	ldr	r2, [pc, #212]	@ (80019e8 <HAL_TIM_PeriodElapsedCallback+0xe4>)
 8001914:	4293      	cmp	r3, r2
 8001916:	d162      	bne.n	80019de <HAL_TIM_PeriodElapsedCallback+0xda>
	{
		snprintf(msg, msgSIZE, "{\"x\": %.2f ,\"y\": %.2f, \"z\": %.2f, \"angulo1\": %.2f, \"angulo2\": %.2f, \"angulo3\": %.2f, \"angulo4\": %.2f}\n",
 8001918:	4b34      	ldr	r3, [pc, #208]	@ (80019ec <HAL_TIM_PeriodElapsedCallback+0xe8>)
 800191a:	681b      	ldr	r3, [r3, #0]
 800191c:	4618      	mov	r0, r3
 800191e:	f7fe fe33 	bl	8000588 <__aeabi_f2d>
 8001922:	4680      	mov	r8, r0
 8001924:	4689      	mov	r9, r1
 8001926:	4b32      	ldr	r3, [pc, #200]	@ (80019f0 <HAL_TIM_PeriodElapsedCallback+0xec>)
 8001928:	681b      	ldr	r3, [r3, #0]
 800192a:	4618      	mov	r0, r3
 800192c:	f7fe fe2c 	bl	8000588 <__aeabi_f2d>
 8001930:	4682      	mov	sl, r0
 8001932:	468b      	mov	fp, r1
 8001934:	4b2f      	ldr	r3, [pc, #188]	@ (80019f4 <HAL_TIM_PeriodElapsedCallback+0xf0>)
 8001936:	681b      	ldr	r3, [r3, #0]
 8001938:	4618      	mov	r0, r3
 800193a:	f7fe fe25 	bl	8000588 <__aeabi_f2d>
 800193e:	e9c7 0104 	strd	r0, r1, [r7, #16]
				x, y, z, angulos_graus[0], angulos_graus[1] - angulos_graus[0], angulos_graus[2] - angulos_graus[1], angulos_graus[3]);
 8001942:	4b2d      	ldr	r3, [pc, #180]	@ (80019f8 <HAL_TIM_PeriodElapsedCallback+0xf4>)
 8001944:	681b      	ldr	r3, [r3, #0]
		snprintf(msg, msgSIZE, "{\"x\": %.2f ,\"y\": %.2f, \"z\": %.2f, \"angulo1\": %.2f, \"angulo2\": %.2f, \"angulo3\": %.2f, \"angulo4\": %.2f}\n",
 8001946:	4618      	mov	r0, r3
 8001948:	f7fe fe1e 	bl	8000588 <__aeabi_f2d>
 800194c:	e9c7 0102 	strd	r0, r1, [r7, #8]
				x, y, z, angulos_graus[0], angulos_graus[1] - angulos_graus[0], angulos_graus[2] - angulos_graus[1], angulos_graus[3]);
 8001950:	4b29      	ldr	r3, [pc, #164]	@ (80019f8 <HAL_TIM_PeriodElapsedCallback+0xf4>)
 8001952:	ed93 7a01 	vldr	s14, [r3, #4]
 8001956:	4b28      	ldr	r3, [pc, #160]	@ (80019f8 <HAL_TIM_PeriodElapsedCallback+0xf4>)
 8001958:	edd3 7a00 	vldr	s15, [r3]
 800195c:	ee77 7a67 	vsub.f32	s15, s14, s15
		snprintf(msg, msgSIZE, "{\"x\": %.2f ,\"y\": %.2f, \"z\": %.2f, \"angulo1\": %.2f, \"angulo2\": %.2f, \"angulo3\": %.2f, \"angulo4\": %.2f}\n",
 8001960:	ee17 0a90 	vmov	r0, s15
 8001964:	f7fe fe10 	bl	8000588 <__aeabi_f2d>
 8001968:	e9c7 0100 	strd	r0, r1, [r7]
				x, y, z, angulos_graus[0], angulos_graus[1] - angulos_graus[0], angulos_graus[2] - angulos_graus[1], angulos_graus[3]);
 800196c:	4b22      	ldr	r3, [pc, #136]	@ (80019f8 <HAL_TIM_PeriodElapsedCallback+0xf4>)
 800196e:	ed93 7a02 	vldr	s14, [r3, #8]
 8001972:	4b21      	ldr	r3, [pc, #132]	@ (80019f8 <HAL_TIM_PeriodElapsedCallback+0xf4>)
 8001974:	edd3 7a01 	vldr	s15, [r3, #4]
 8001978:	ee77 7a67 	vsub.f32	s15, s14, s15
		snprintf(msg, msgSIZE, "{\"x\": %.2f ,\"y\": %.2f, \"z\": %.2f, \"angulo1\": %.2f, \"angulo2\": %.2f, \"angulo3\": %.2f, \"angulo4\": %.2f}\n",
 800197c:	ee17 0a90 	vmov	r0, s15
 8001980:	f7fe fe02 	bl	8000588 <__aeabi_f2d>
 8001984:	4604      	mov	r4, r0
 8001986:	460d      	mov	r5, r1
				x, y, z, angulos_graus[0], angulos_graus[1] - angulos_graus[0], angulos_graus[2] - angulos_graus[1], angulos_graus[3]);
 8001988:	4b1b      	ldr	r3, [pc, #108]	@ (80019f8 <HAL_TIM_PeriodElapsedCallback+0xf4>)
 800198a:	68db      	ldr	r3, [r3, #12]
		snprintf(msg, msgSIZE, "{\"x\": %.2f ,\"y\": %.2f, \"z\": %.2f, \"angulo1\": %.2f, \"angulo2\": %.2f, \"angulo3\": %.2f, \"angulo4\": %.2f}\n",
 800198c:	4618      	mov	r0, r3
 800198e:	f7fe fdfb 	bl	8000588 <__aeabi_f2d>
 8001992:	4602      	mov	r2, r0
 8001994:	460b      	mov	r3, r1
 8001996:	e9cd 230c 	strd	r2, r3, [sp, #48]	@ 0x30
 800199a:	e9cd 450a 	strd	r4, r5, [sp, #40]	@ 0x28
 800199e:	ed97 7b00 	vldr	d7, [r7]
 80019a2:	ed8d 7b08 	vstr	d7, [sp, #32]
 80019a6:	ed97 7b02 	vldr	d7, [r7, #8]
 80019aa:	ed8d 7b06 	vstr	d7, [sp, #24]
 80019ae:	ed97 7b04 	vldr	d7, [r7, #16]
 80019b2:	ed8d 7b04 	vstr	d7, [sp, #16]
 80019b6:	e9cd ab02 	strd	sl, fp, [sp, #8]
 80019ba:	e9cd 8900 	strd	r8, r9, [sp]
 80019be:	4a0f      	ldr	r2, [pc, #60]	@ (80019fc <HAL_TIM_PeriodElapsedCallback+0xf8>)
 80019c0:	f44f 71fa 	mov.w	r1, #500	@ 0x1f4
 80019c4:	480e      	ldr	r0, [pc, #56]	@ (8001a00 <HAL_TIM_PeriodElapsedCallback+0xfc>)
 80019c6:	f005 fa63 	bl	8006e90 <sniprintf>
		HAL_UART_Transmit_IT(&huart2, msg, strlen(msg));
 80019ca:	480d      	ldr	r0, [pc, #52]	@ (8001a00 <HAL_TIM_PeriodElapsedCallback+0xfc>)
 80019cc:	f7fe fc70 	bl	80002b0 <strlen>
 80019d0:	4603      	mov	r3, r0
 80019d2:	b29b      	uxth	r3, r3
 80019d4:	461a      	mov	r2, r3
 80019d6:	490a      	ldr	r1, [pc, #40]	@ (8001a00 <HAL_TIM_PeriodElapsedCallback+0xfc>)
 80019d8:	480a      	ldr	r0, [pc, #40]	@ (8001a04 <HAL_TIM_PeriodElapsedCallback+0x100>)
 80019da:	f003 fde5 	bl	80055a8 <HAL_UART_Transmit_IT>
	}
}
 80019de:	bf00      	nop
 80019e0:	3720      	adds	r7, #32
 80019e2:	46bd      	mov	sp, r7
 80019e4:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80019e8:	40014400 	.word	0x40014400
 80019ec:	20000400 	.word	0x20000400
 80019f0:	20000404 	.word	0x20000404
 80019f4:	200003fc 	.word	0x200003fc
 80019f8:	200003e8 	.word	0x200003e8
 80019fc:	0800a2a4 	.word	0x0800a2a4
 8001a00:	20000408 	.word	0x20000408
 8001a04:	20000370 	.word	0x20000370

08001a08 <HAL_UART_RxCpltCallback>:

void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8001a08:	b580      	push	{r7, lr}
 8001a0a:	b084      	sub	sp, #16
 8001a0c:	af00      	add	r7, sp, #0
 8001a0e:	6078      	str	r0, [r7, #4]
	for(int u = 0; u < N_AMOSTRAS; u++){
 8001a10:	2300      	movs	r3, #0
 8001a12:	60fb      	str	r3, [r7, #12]
 8001a14:	e00b      	b.n	8001a2e <HAL_UART_RxCpltCallback+0x26>
		OFFSETS[u] = medidas[u];
 8001a16:	4a0d      	ldr	r2, [pc, #52]	@ (8001a4c <HAL_UART_RxCpltCallback+0x44>)
 8001a18:	68fb      	ldr	r3, [r7, #12]
 8001a1a:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8001a1e:	b299      	uxth	r1, r3
 8001a20:	4a0b      	ldr	r2, [pc, #44]	@ (8001a50 <HAL_UART_RxCpltCallback+0x48>)
 8001a22:	68fb      	ldr	r3, [r7, #12]
 8001a24:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
	for(int u = 0; u < N_AMOSTRAS; u++){
 8001a28:	68fb      	ldr	r3, [r7, #12]
 8001a2a:	3301      	adds	r3, #1
 8001a2c:	60fb      	str	r3, [r7, #12]
 8001a2e:	68fb      	ldr	r3, [r7, #12]
 8001a30:	2b03      	cmp	r3, #3
 8001a32:	ddf0      	ble.n	8001a16 <HAL_UART_RxCpltCallback+0xe>
	}
	HAL_UART_Receive_IT(&huart2, set_offset ,1);
 8001a34:	4b07      	ldr	r3, [pc, #28]	@ (8001a54 <HAL_UART_RxCpltCallback+0x4c>)
 8001a36:	781b      	ldrb	r3, [r3, #0]
 8001a38:	2201      	movs	r2, #1
 8001a3a:	4619      	mov	r1, r3
 8001a3c:	4806      	ldr	r0, [pc, #24]	@ (8001a58 <HAL_UART_RxCpltCallback+0x50>)
 8001a3e:	f003 fde9 	bl	8005614 <HAL_UART_Receive_IT>
}
 8001a42:	bf00      	nop
 8001a44:	3710      	adds	r7, #16
 8001a46:	46bd      	mov	sp, r7
 8001a48:	bd80      	pop	{r7, pc}
 8001a4a:	bf00      	nop
 8001a4c:	200003b8 	.word	0x200003b8
 8001a50:	200003c0 	.word	0x200003c0
 8001a54:	200003c9 	.word	0x200003c9
 8001a58:	20000370 	.word	0x20000370

08001a5c <HAL_ADC_ConvCpltCallback>:

void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef* hadc){
 8001a5c:	b580      	push	{r7, lr}
 8001a5e:	b082      	sub	sp, #8
 8001a60:	af00      	add	r7, sp, #0
 8001a62:	6078      	str	r0, [r7, #4]

	calc_ang();
 8001a64:	f7ff fa88 	bl	8000f78 <calc_ang>

	r = calc_r(); // Distancia radial
 8001a68:	f7ff fafc 	bl	8001064 <calc_r>
 8001a6c:	eef0 7a40 	vmov.f32	s15, s0
 8001a70:	4b15      	ldr	r3, [pc, #84]	@ (8001ac8 <HAL_ADC_ConvCpltCallback+0x6c>)
 8001a72:	edc3 7a00 	vstr	s15, [r3]
	z = calc_z();
 8001a76:	f7ff fb43 	bl	8001100 <calc_z>
 8001a7a:	eef0 7a40 	vmov.f32	s15, s0
 8001a7e:	4b13      	ldr	r3, [pc, #76]	@ (8001acc <HAL_ADC_ConvCpltCallback+0x70>)
 8001a80:	edc3 7a00 	vstr	s15, [r3]
	x = calc_x(r);
 8001a84:	4b10      	ldr	r3, [pc, #64]	@ (8001ac8 <HAL_ADC_ConvCpltCallback+0x6c>)
 8001a86:	edd3 7a00 	vldr	s15, [r3]
 8001a8a:	eeb0 0a67 	vmov.f32	s0, s15
 8001a8e:	f7ff fb89 	bl	80011a4 <calc_x>
 8001a92:	eef0 7a40 	vmov.f32	s15, s0
 8001a96:	4b0e      	ldr	r3, [pc, #56]	@ (8001ad0 <HAL_ADC_ConvCpltCallback+0x74>)
 8001a98:	edc3 7a00 	vstr	s15, [r3]
	y = calc_y(r);
 8001a9c:	4b0a      	ldr	r3, [pc, #40]	@ (8001ac8 <HAL_ADC_ConvCpltCallback+0x6c>)
 8001a9e:	edd3 7a00 	vldr	s15, [r3]
 8001aa2:	eeb0 0a67 	vmov.f32	s0, s15
 8001aa6:	f7ff fbad 	bl	8001204 <calc_y>
 8001aaa:	eef0 7a40 	vmov.f32	s15, s0
 8001aae:	4b09      	ldr	r3, [pc, #36]	@ (8001ad4 <HAL_ADC_ConvCpltCallback+0x78>)
 8001ab0:	edc3 7a00 	vstr	s15, [r3]

=======
 80019a0:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80019a4:	b0a4      	sub	sp, #144	@ 0x90
 80019a6:	af16      	add	r7, sp, #88	@ 0x58
 80019a8:	6378      	str	r0, [r7, #52]	@ 0x34
	if (htim->Instance==TIM10)
 80019aa:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80019ac:	681b      	ldr	r3, [r3, #0]
 80019ae:	4a47      	ldr	r2, [pc, #284]	@ (8001acc <HAL_TIM_PeriodElapsedCallback+0x12c>)
 80019b0:	4293      	cmp	r3, r2
 80019b2:	f040 8085 	bne.w	8001ac0 <HAL_TIM_PeriodElapsedCallback+0x120>
	{
		snprintf(msg, msgSIZE, "{\"x\": %.2f ,\"y\": %.2f, \"z\": %.2f, \"angulo1\": %.2f, \"angulo2\": %.2f, \"angulo3\": %.2f, \"angulo4\": %.2f, \"X\": %.2f, \"Y\": %.2f, \"Z\": %.2f,  \"guardar\": %i}\n",
 80019b6:	4b46      	ldr	r3, [pc, #280]	@ (8001ad0 <HAL_TIM_PeriodElapsedCallback+0x130>)
 80019b8:	681b      	ldr	r3, [r3, #0]
 80019ba:	4618      	mov	r0, r3
 80019bc:	f7fe fde4 	bl	8000588 <__aeabi_f2d>
 80019c0:	e9c7 010a 	strd	r0, r1, [r7, #40]	@ 0x28
 80019c4:	4b43      	ldr	r3, [pc, #268]	@ (8001ad4 <HAL_TIM_PeriodElapsedCallback+0x134>)
 80019c6:	681b      	ldr	r3, [r3, #0]
 80019c8:	4618      	mov	r0, r3
 80019ca:	f7fe fddd 	bl	8000588 <__aeabi_f2d>
 80019ce:	e9c7 0108 	strd	r0, r1, [r7, #32]
 80019d2:	4b41      	ldr	r3, [pc, #260]	@ (8001ad8 <HAL_TIM_PeriodElapsedCallback+0x138>)
 80019d4:	681b      	ldr	r3, [r3, #0]
 80019d6:	4618      	mov	r0, r3
 80019d8:	f7fe fdd6 	bl	8000588 <__aeabi_f2d>
 80019dc:	e9c7 0106 	strd	r0, r1, [r7, #24]
				x, y, z, angulos_graus[0], angulos_graus[1] - angulos_graus[0], angulos_graus[2] - angulos_graus[1], angulos_graus[3], coordenadas_xyz[0], coordenadas_xyz[1], coordenadas_xyz[2], soltou);
 80019e0:	4b3e      	ldr	r3, [pc, #248]	@ (8001adc <HAL_TIM_PeriodElapsedCallback+0x13c>)
 80019e2:	681b      	ldr	r3, [r3, #0]
		snprintf(msg, msgSIZE, "{\"x\": %.2f ,\"y\": %.2f, \"z\": %.2f, \"angulo1\": %.2f, \"angulo2\": %.2f, \"angulo3\": %.2f, \"angulo4\": %.2f, \"X\": %.2f, \"Y\": %.2f, \"Z\": %.2f,  \"guardar\": %i}\n",
 80019e4:	4618      	mov	r0, r3
 80019e6:	f7fe fdcf 	bl	8000588 <__aeabi_f2d>
 80019ea:	e9c7 0104 	strd	r0, r1, [r7, #16]
				x, y, z, angulos_graus[0], angulos_graus[1] - angulos_graus[0], angulos_graus[2] - angulos_graus[1], angulos_graus[3], coordenadas_xyz[0], coordenadas_xyz[1], coordenadas_xyz[2], soltou);
 80019ee:	4b3b      	ldr	r3, [pc, #236]	@ (8001adc <HAL_TIM_PeriodElapsedCallback+0x13c>)
 80019f0:	ed93 7a01 	vldr	s14, [r3, #4]
 80019f4:	4b39      	ldr	r3, [pc, #228]	@ (8001adc <HAL_TIM_PeriodElapsedCallback+0x13c>)
 80019f6:	edd3 7a00 	vldr	s15, [r3]
 80019fa:	ee77 7a67 	vsub.f32	s15, s14, s15
		snprintf(msg, msgSIZE, "{\"x\": %.2f ,\"y\": %.2f, \"z\": %.2f, \"angulo1\": %.2f, \"angulo2\": %.2f, \"angulo3\": %.2f, \"angulo4\": %.2f, \"X\": %.2f, \"Y\": %.2f, \"Z\": %.2f,  \"guardar\": %i}\n",
 80019fe:	ee17 0a90 	vmov	r0, s15
 8001a02:	f7fe fdc1 	bl	8000588 <__aeabi_f2d>
 8001a06:	e9c7 0102 	strd	r0, r1, [r7, #8]
				x, y, z, angulos_graus[0], angulos_graus[1] - angulos_graus[0], angulos_graus[2] - angulos_graus[1], angulos_graus[3], coordenadas_xyz[0], coordenadas_xyz[1], coordenadas_xyz[2], soltou);
 8001a0a:	4b34      	ldr	r3, [pc, #208]	@ (8001adc <HAL_TIM_PeriodElapsedCallback+0x13c>)
 8001a0c:	ed93 7a02 	vldr	s14, [r3, #8]
 8001a10:	4b32      	ldr	r3, [pc, #200]	@ (8001adc <HAL_TIM_PeriodElapsedCallback+0x13c>)
 8001a12:	edd3 7a01 	vldr	s15, [r3, #4]
 8001a16:	ee77 7a67 	vsub.f32	s15, s14, s15
		snprintf(msg, msgSIZE, "{\"x\": %.2f ,\"y\": %.2f, \"z\": %.2f, \"angulo1\": %.2f, \"angulo2\": %.2f, \"angulo3\": %.2f, \"angulo4\": %.2f, \"X\": %.2f, \"Y\": %.2f, \"Z\": %.2f,  \"guardar\": %i}\n",
 8001a1a:	ee17 0a90 	vmov	r0, s15
 8001a1e:	f7fe fdb3 	bl	8000588 <__aeabi_f2d>
 8001a22:	e9c7 0100 	strd	r0, r1, [r7]
				x, y, z, angulos_graus[0], angulos_graus[1] - angulos_graus[0], angulos_graus[2] - angulos_graus[1], angulos_graus[3], coordenadas_xyz[0], coordenadas_xyz[1], coordenadas_xyz[2], soltou);
 8001a26:	4b2d      	ldr	r3, [pc, #180]	@ (8001adc <HAL_TIM_PeriodElapsedCallback+0x13c>)
 8001a28:	68db      	ldr	r3, [r3, #12]
		snprintf(msg, msgSIZE, "{\"x\": %.2f ,\"y\": %.2f, \"z\": %.2f, \"angulo1\": %.2f, \"angulo2\": %.2f, \"angulo3\": %.2f, \"angulo4\": %.2f, \"X\": %.2f, \"Y\": %.2f, \"Z\": %.2f,  \"guardar\": %i}\n",
 8001a2a:	4618      	mov	r0, r3
 8001a2c:	f7fe fdac 	bl	8000588 <__aeabi_f2d>
 8001a30:	4682      	mov	sl, r0
 8001a32:	468b      	mov	fp, r1
				x, y, z, angulos_graus[0], angulos_graus[1] - angulos_graus[0], angulos_graus[2] - angulos_graus[1], angulos_graus[3], coordenadas_xyz[0], coordenadas_xyz[1], coordenadas_xyz[2], soltou);
 8001a34:	4b2a      	ldr	r3, [pc, #168]	@ (8001ae0 <HAL_TIM_PeriodElapsedCallback+0x140>)
 8001a36:	681b      	ldr	r3, [r3, #0]
		snprintf(msg, msgSIZE, "{\"x\": %.2f ,\"y\": %.2f, \"z\": %.2f, \"angulo1\": %.2f, \"angulo2\": %.2f, \"angulo3\": %.2f, \"angulo4\": %.2f, \"X\": %.2f, \"Y\": %.2f, \"Z\": %.2f,  \"guardar\": %i}\n",
 8001a38:	4618      	mov	r0, r3
 8001a3a:	f7fe fda5 	bl	8000588 <__aeabi_f2d>
 8001a3e:	4680      	mov	r8, r0
 8001a40:	4689      	mov	r9, r1
				x, y, z, angulos_graus[0], angulos_graus[1] - angulos_graus[0], angulos_graus[2] - angulos_graus[1], angulos_graus[3], coordenadas_xyz[0], coordenadas_xyz[1], coordenadas_xyz[2], soltou);
 8001a42:	4b27      	ldr	r3, [pc, #156]	@ (8001ae0 <HAL_TIM_PeriodElapsedCallback+0x140>)
 8001a44:	685b      	ldr	r3, [r3, #4]
		snprintf(msg, msgSIZE, "{\"x\": %.2f ,\"y\": %.2f, \"z\": %.2f, \"angulo1\": %.2f, \"angulo2\": %.2f, \"angulo3\": %.2f, \"angulo4\": %.2f, \"X\": %.2f, \"Y\": %.2f, \"Z\": %.2f,  \"guardar\": %i}\n",
 8001a46:	4618      	mov	r0, r3
 8001a48:	f7fe fd9e 	bl	8000588 <__aeabi_f2d>
 8001a4c:	4604      	mov	r4, r0
 8001a4e:	460d      	mov	r5, r1
				x, y, z, angulos_graus[0], angulos_graus[1] - angulos_graus[0], angulos_graus[2] - angulos_graus[1], angulos_graus[3], coordenadas_xyz[0], coordenadas_xyz[1], coordenadas_xyz[2], soltou);
 8001a50:	4b23      	ldr	r3, [pc, #140]	@ (8001ae0 <HAL_TIM_PeriodElapsedCallback+0x140>)
 8001a52:	689b      	ldr	r3, [r3, #8]
		snprintf(msg, msgSIZE, "{\"x\": %.2f ,\"y\": %.2f, \"z\": %.2f, \"angulo1\": %.2f, \"angulo2\": %.2f, \"angulo3\": %.2f, \"angulo4\": %.2f, \"X\": %.2f, \"Y\": %.2f, \"Z\": %.2f,  \"guardar\": %i}\n",
 8001a54:	4618      	mov	r0, r3
 8001a56:	f7fe fd97 	bl	8000588 <__aeabi_f2d>
 8001a5a:	4b22      	ldr	r3, [pc, #136]	@ (8001ae4 <HAL_TIM_PeriodElapsedCallback+0x144>)
 8001a5c:	781b      	ldrb	r3, [r3, #0]
 8001a5e:	9314      	str	r3, [sp, #80]	@ 0x50
 8001a60:	e9cd 0112 	strd	r0, r1, [sp, #72]	@ 0x48
 8001a64:	e9cd 4510 	strd	r4, r5, [sp, #64]	@ 0x40
 8001a68:	e9cd 890e 	strd	r8, r9, [sp, #56]	@ 0x38
 8001a6c:	e9cd ab0c 	strd	sl, fp, [sp, #48]	@ 0x30
 8001a70:	ed97 7b00 	vldr	d7, [r7]
 8001a74:	ed8d 7b0a 	vstr	d7, [sp, #40]	@ 0x28
 8001a78:	ed97 7b02 	vldr	d7, [r7, #8]
 8001a7c:	ed8d 7b08 	vstr	d7, [sp, #32]
 8001a80:	ed97 7b04 	vldr	d7, [r7, #16]
 8001a84:	ed8d 7b06 	vstr	d7, [sp, #24]
 8001a88:	ed97 7b06 	vldr	d7, [r7, #24]
 8001a8c:	ed8d 7b04 	vstr	d7, [sp, #16]
 8001a90:	ed97 7b08 	vldr	d7, [r7, #32]
 8001a94:	ed8d 7b02 	vstr	d7, [sp, #8]
 8001a98:	ed97 7b0a 	vldr	d7, [r7, #40]	@ 0x28
 8001a9c:	ed8d 7b00 	vstr	d7, [sp]
 8001aa0:	4a11      	ldr	r2, [pc, #68]	@ (8001ae8 <HAL_TIM_PeriodElapsedCallback+0x148>)
 8001aa2:	f44f 71fa 	mov.w	r1, #500	@ 0x1f4
 8001aa6:	4811      	ldr	r0, [pc, #68]	@ (8001aec <HAL_TIM_PeriodElapsedCallback+0x14c>)
 8001aa8:	f005 fa7c 	bl	8006fa4 <sniprintf>
		HAL_UART_Transmit_IT(&huart2, msg, strlen(msg));
 8001aac:	480f      	ldr	r0, [pc, #60]	@ (8001aec <HAL_TIM_PeriodElapsedCallback+0x14c>)
 8001aae:	f7fe fbff 	bl	80002b0 <strlen>
 8001ab2:	4603      	mov	r3, r0
 8001ab4:	b29b      	uxth	r3, r3
 8001ab6:	461a      	mov	r2, r3
 8001ab8:	490c      	ldr	r1, [pc, #48]	@ (8001aec <HAL_TIM_PeriodElapsedCallback+0x14c>)
 8001aba:	480d      	ldr	r0, [pc, #52]	@ (8001af0 <HAL_TIM_PeriodElapsedCallback+0x150>)
 8001abc:	f003 fdfe 	bl	80056bc <HAL_UART_Transmit_IT>
	}
}
 8001ac0:	bf00      	nop
 8001ac2:	3738      	adds	r7, #56	@ 0x38
 8001ac4:	46bd      	mov	sp, r7
 8001ac6:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8001aca:	bf00      	nop
 8001acc:	40014400 	.word	0x40014400
 8001ad0:	20000400 	.word	0x20000400
 8001ad4:	20000404 	.word	0x20000404
 8001ad8:	200003fc 	.word	0x200003fc
 8001adc:	200003e8 	.word	0x200003e8
 8001ae0:	200003cc 	.word	0x200003cc
 8001ae4:	200003c8 	.word	0x200003c8
 8001ae8:	0800a380 	.word	0x0800a380
 8001aec:	20000408 	.word	0x20000408
 8001af0:	20000370 	.word	0x20000370

08001af4 <HAL_UART_RxCpltCallback>:

void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8001af4:	b580      	push	{r7, lr}
 8001af6:	b084      	sub	sp, #16
 8001af8:	af00      	add	r7, sp, #0
 8001afa:	6078      	str	r0, [r7, #4]
	for(int u = 0; u < N_AMOSTRAS; u++){
 8001afc:	2300      	movs	r3, #0
 8001afe:	60fb      	str	r3, [r7, #12]
 8001b00:	e00b      	b.n	8001b1a <HAL_UART_RxCpltCallback+0x26>
		OFFSETS[u] = medidas[u];
 8001b02:	4a0d      	ldr	r2, [pc, #52]	@ (8001b38 <HAL_UART_RxCpltCallback+0x44>)
 8001b04:	68fb      	ldr	r3, [r7, #12]
 8001b06:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8001b0a:	b299      	uxth	r1, r3
 8001b0c:	4a0b      	ldr	r2, [pc, #44]	@ (8001b3c <HAL_UART_RxCpltCallback+0x48>)
 8001b0e:	68fb      	ldr	r3, [r7, #12]
 8001b10:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
	for(int u = 0; u < N_AMOSTRAS; u++){
 8001b14:	68fb      	ldr	r3, [r7, #12]
 8001b16:	3301      	adds	r3, #1
 8001b18:	60fb      	str	r3, [r7, #12]
 8001b1a:	68fb      	ldr	r3, [r7, #12]
 8001b1c:	2b03      	cmp	r3, #3
 8001b1e:	ddf0      	ble.n	8001b02 <HAL_UART_RxCpltCallback+0xe>
	}

	HAL_UART_Receive_IT(&huart2, set_offset ,1);
 8001b20:	4b07      	ldr	r3, [pc, #28]	@ (8001b40 <HAL_UART_RxCpltCallback+0x4c>)
 8001b22:	781b      	ldrb	r3, [r3, #0]
 8001b24:	2201      	movs	r2, #1
 8001b26:	4619      	mov	r1, r3
 8001b28:	4806      	ldr	r0, [pc, #24]	@ (8001b44 <HAL_UART_RxCpltCallback+0x50>)
 8001b2a:	f003 fdfd 	bl	8005728 <HAL_UART_Receive_IT>
}
 8001b2e:	bf00      	nop
 8001b30:	3710      	adds	r7, #16
 8001b32:	46bd      	mov	sp, r7
 8001b34:	bd80      	pop	{r7, pc}
 8001b36:	bf00      	nop
 8001b38:	200003b8 	.word	0x200003b8
 8001b3c:	200003c0 	.word	0x200003c0
 8001b40:	200003c9 	.word	0x200003c9
 8001b44:	20000370 	.word	0x20000370

08001b48 <HAL_ADC_ConvCpltCallback>:

void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef* hadc){
 8001b48:	b580      	push	{r7, lr}
 8001b4a:	b082      	sub	sp, #8
 8001b4c:	af00      	add	r7, sp, #0
 8001b4e:	6078      	str	r0, [r7, #4]

	calc_ang();
 8001b50:	f7ff fa12 	bl	8000f78 <calc_ang>

	r = calc_r(); // Distancia radial
 8001b54:	f7ff fa86 	bl	8001064 <calc_r>
 8001b58:	eef0 7a40 	vmov.f32	s15, s0
 8001b5c:	4b1d      	ldr	r3, [pc, #116]	@ (8001bd4 <HAL_ADC_ConvCpltCallback+0x8c>)
 8001b5e:	edc3 7a00 	vstr	s15, [r3]
	z = calc_z();
 8001b62:	f7ff facd 	bl	8001100 <calc_z>
 8001b66:	eef0 7a40 	vmov.f32	s15, s0
 8001b6a:	4b1b      	ldr	r3, [pc, #108]	@ (8001bd8 <HAL_ADC_ConvCpltCallback+0x90>)
 8001b6c:	edc3 7a00 	vstr	s15, [r3]
	x = calc_x(r);
 8001b70:	4b18      	ldr	r3, [pc, #96]	@ (8001bd4 <HAL_ADC_ConvCpltCallback+0x8c>)
 8001b72:	edd3 7a00 	vldr	s15, [r3]
 8001b76:	eeb0 0a67 	vmov.f32	s0, s15
 8001b7a:	f7ff fb13 	bl	80011a4 <calc_x>
 8001b7e:	eef0 7a40 	vmov.f32	s15, s0
 8001b82:	4b16      	ldr	r3, [pc, #88]	@ (8001bdc <HAL_ADC_ConvCpltCallback+0x94>)
 8001b84:	edc3 7a00 	vstr	s15, [r3]
	y = calc_y(r);
 8001b88:	4b12      	ldr	r3, [pc, #72]	@ (8001bd4 <HAL_ADC_ConvCpltCallback+0x8c>)
 8001b8a:	edd3 7a00 	vldr	s15, [r3]
 8001b8e:	eeb0 0a67 	vmov.f32	s0, s15
 8001b92:	f7ff fb37 	bl	8001204 <calc_y>
 8001b96:	eef0 7a40 	vmov.f32	s15, s0
 8001b9a:	4b11      	ldr	r3, [pc, #68]	@ (8001be0 <HAL_ADC_ConvCpltCallback+0x98>)
 8001b9c:	edc3 7a00 	vstr	s15, [r3]

	if(soltou == 1){ // Salva as coordenadas
 8001ba0:	4b10      	ldr	r3, [pc, #64]	@ (8001be4 <HAL_ADC_ConvCpltCallback+0x9c>)
 8001ba2:	781b      	ldrb	r3, [r3, #0]
 8001ba4:	2b01      	cmp	r3, #1
 8001ba6:	d10b      	bne.n	8001bc0 <HAL_ADC_ConvCpltCallback+0x78>
		coordenadas_xyz[0] = x;
 8001ba8:	4b0c      	ldr	r3, [pc, #48]	@ (8001bdc <HAL_ADC_ConvCpltCallback+0x94>)
 8001baa:	681b      	ldr	r3, [r3, #0]
 8001bac:	4a0e      	ldr	r2, [pc, #56]	@ (8001be8 <HAL_ADC_ConvCpltCallback+0xa0>)
 8001bae:	6013      	str	r3, [r2, #0]
		coordenadas_xyz[1] = y;
 8001bb0:	4b0b      	ldr	r3, [pc, #44]	@ (8001be0 <HAL_ADC_ConvCpltCallback+0x98>)
 8001bb2:	681b      	ldr	r3, [r3, #0]
 8001bb4:	4a0c      	ldr	r2, [pc, #48]	@ (8001be8 <HAL_ADC_ConvCpltCallback+0xa0>)
 8001bb6:	6053      	str	r3, [r2, #4]
		coordenadas_xyz[2] = z;
 8001bb8:	4b07      	ldr	r3, [pc, #28]	@ (8001bd8 <HAL_ADC_ConvCpltCallback+0x90>)
 8001bba:	681b      	ldr	r3, [r3, #0]
 8001bbc:	4a0a      	ldr	r2, [pc, #40]	@ (8001be8 <HAL_ADC_ConvCpltCallback+0xa0>)
 8001bbe:	6093      	str	r3, [r2, #8]
	}
>>>>>>> 39e4d10438a821cc799a472af87a77c6796a1676


	//snprintf(msg, msgSIZE, "{\"x\": %.2f ,\"y\": %.2f, \"z\": %.2f, \"angulo1\": %i, \"angulo2\": %.2f, \"angulo3\": %.2f, \"angulo4\": %.2f}\n",x, y, z, angulos_graus[0], angulos_graus[1], angulos_graus[2], angulos_graus[3]);
	HAL_ADC_Start_DMA(&hadc1, medidas, N_AMOSTRAS);
<<<<<<< HEAD
 8001ab4:	2204      	movs	r2, #4
 8001ab6:	4908      	ldr	r1, [pc, #32]	@ (8001ad8 <HAL_ADC_ConvCpltCallback+0x7c>)
 8001ab8:	4808      	ldr	r0, [pc, #32]	@ (8001adc <HAL_ADC_ConvCpltCallback+0x80>)
 8001aba:	f000 fbbd 	bl	8002238 <HAL_ADC_Start_DMA>

}
 8001abe:	bf00      	nop
 8001ac0:	3708      	adds	r7, #8
 8001ac2:	46bd      	mov	sp, r7
 8001ac4:	bd80      	pop	{r7, pc}
 8001ac6:	bf00      	nop
 8001ac8:	200003f8 	.word	0x200003f8
 8001acc:	200003fc 	.word	0x200003fc
 8001ad0:	20000400 	.word	0x20000400
 8001ad4:	20000404 	.word	0x20000404
 8001ad8:	200003b8 	.word	0x200003b8
 8001adc:	200001f0 	.word	0x200001f0

08001ae0 <Error_Handler>:
=======
 8001bc0:	2204      	movs	r2, #4
 8001bc2:	490a      	ldr	r1, [pc, #40]	@ (8001bec <HAL_ADC_ConvCpltCallback+0xa4>)
 8001bc4:	480a      	ldr	r0, [pc, #40]	@ (8001bf0 <HAL_ADC_ConvCpltCallback+0xa8>)
 8001bc6:	f000 fbc1 	bl	800234c <HAL_ADC_Start_DMA>

}
 8001bca:	bf00      	nop
 8001bcc:	3708      	adds	r7, #8
 8001bce:	46bd      	mov	sp, r7
 8001bd0:	bd80      	pop	{r7, pc}
 8001bd2:	bf00      	nop
 8001bd4:	200003f8 	.word	0x200003f8
 8001bd8:	200003fc 	.word	0x200003fc
 8001bdc:	20000400 	.word	0x20000400
 8001be0:	20000404 	.word	0x20000404
 8001be4:	200003c8 	.word	0x200003c8
 8001be8:	200003cc 	.word	0x200003cc
 8001bec:	200003b8 	.word	0x200003b8
 8001bf0:	200001f0 	.word	0x200001f0

08001bf4 <Error_Handler>:
>>>>>>> 39e4d10438a821cc799a472af87a77c6796a1676
>>>>>>> ef0d341697957f8628c074acbc12bb9a12bbe146
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
<<<<<<< HEAD
 8001af8:	b480      	push	{r7}
 8001afa:	af00      	add	r7, sp, #0
=======
<<<<<<< HEAD
 8001ae0:	b480      	push	{r7}
 8001ae2:	af00      	add	r7, sp, #0
=======
 8001bf4:	b480      	push	{r7}
 8001bf6:	af00      	add	r7, sp, #0
>>>>>>> 39e4d10438a821cc799a472af87a77c6796a1676
>>>>>>> ef0d341697957f8628c074acbc12bb9a12bbe146
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
<<<<<<< HEAD
 8001afc:	b672      	cpsid	i
}
 8001afe:	bf00      	nop
=======
<<<<<<< HEAD
 8001ae4:	b672      	cpsid	i
}
 8001ae6:	bf00      	nop
=======
 8001bf8:	b672      	cpsid	i
}
 8001bfa:	bf00      	nop
>>>>>>> 39e4d10438a821cc799a472af87a77c6796a1676
>>>>>>> ef0d341697957f8628c074acbc12bb9a12bbe146
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
<<<<<<< HEAD
 8001b00:	bf00      	nop
 8001b02:	e7fd      	b.n	8001b00 <Error_Handler+0x8>

08001b04 <HAL_MspInit>:
 8001b04:	b580      	push	{r7, lr}
 8001b06:	b082      	sub	sp, #8
 8001b08:	af00      	add	r7, sp, #0
 8001b0a:	2300      	movs	r3, #0
 8001b0c:	607b      	str	r3, [r7, #4]
 8001b0e:	4b10      	ldr	r3, [pc, #64]	@ (8001b50 <HAL_MspInit+0x4c>)
 8001b10:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001b12:	4a0f      	ldr	r2, [pc, #60]	@ (8001b50 <HAL_MspInit+0x4c>)
 8001b14:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8001b18:	6453      	str	r3, [r2, #68]	@ 0x44
 8001b1a:	4b0d      	ldr	r3, [pc, #52]	@ (8001b50 <HAL_MspInit+0x4c>)
 8001b1c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001b1e:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8001b22:	607b      	str	r3, [r7, #4]
 8001b24:	687b      	ldr	r3, [r7, #4]
 8001b26:	2300      	movs	r3, #0
 8001b28:	603b      	str	r3, [r7, #0]
 8001b2a:	4b09      	ldr	r3, [pc, #36]	@ (8001b50 <HAL_MspInit+0x4c>)
 8001b2c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001b2e:	4a08      	ldr	r2, [pc, #32]	@ (8001b50 <HAL_MspInit+0x4c>)
 8001b30:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001b34:	6413      	str	r3, [r2, #64]	@ 0x40
 8001b36:	4b06      	ldr	r3, [pc, #24]	@ (8001b50 <HAL_MspInit+0x4c>)
 8001b38:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001b3a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001b3e:	603b      	str	r3, [r7, #0]
 8001b40:	683b      	ldr	r3, [r7, #0]
 8001b42:	2007      	movs	r0, #7
 8001b44:	f001 f828 	bl	8002b98 <HAL_NVIC_SetPriorityGrouping>
 8001b48:	bf00      	nop
 8001b4a:	3708      	adds	r7, #8
 8001b4c:	46bd      	mov	sp, r7
 8001b4e:	bd80      	pop	{r7, pc}
 8001b50:	40023800 	.word	0x40023800
=======
<<<<<<< HEAD
 8001ae8:	bf00      	nop
 8001aea:	e7fd      	b.n	8001ae8 <Error_Handler+0x8>

08001aec <HAL_MspInit>:
=======
 8001bfc:	bf00      	nop
 8001bfe:	e7fd      	b.n	8001bfc <Error_Handler+0x8>

08001c00 <HAL_MspInit>:
>>>>>>> 39e4d10438a821cc799a472af87a77c6796a1676
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
<<<<<<< HEAD
 8001aec:	b580      	push	{r7, lr}
 8001aee:	b082      	sub	sp, #8
 8001af0:	af00      	add	r7, sp, #0
=======
 8001c00:	b580      	push	{r7, lr}
 8001c02:	b082      	sub	sp, #8
 8001c04:	af00      	add	r7, sp, #0
>>>>>>> 39e4d10438a821cc799a472af87a77c6796a1676
>>>>>>> ef0d341697957f8628c074acbc12bb9a12bbe146

08001b54 <HAL_ADC_MspInit>:
 8001b54:	b580      	push	{r7, lr}
 8001b56:	b08a      	sub	sp, #40	@ 0x28
 8001b58:	af00      	add	r7, sp, #0
 8001b5a:	6078      	str	r0, [r7, #4]
 8001b5c:	f107 0314 	add.w	r3, r7, #20
 8001b60:	2200      	movs	r2, #0
 8001b62:	601a      	str	r2, [r3, #0]
 8001b64:	605a      	str	r2, [r3, #4]
 8001b66:	609a      	str	r2, [r3, #8]
 8001b68:	60da      	str	r2, [r3, #12]
 8001b6a:	611a      	str	r2, [r3, #16]
 8001b6c:	687b      	ldr	r3, [r7, #4]
 8001b6e:	681b      	ldr	r3, [r3, #0]
 8001b70:	4a2e      	ldr	r2, [pc, #184]	@ (8001c2c <HAL_ADC_MspInit+0xd8>)
 8001b72:	4293      	cmp	r3, r2
 8001b74:	d156      	bne.n	8001c24 <HAL_ADC_MspInit+0xd0>
 8001b76:	2300      	movs	r3, #0
 8001b78:	613b      	str	r3, [r7, #16]
 8001b7a:	4b2d      	ldr	r3, [pc, #180]	@ (8001c30 <HAL_ADC_MspInit+0xdc>)
 8001b7c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001b7e:	4a2c      	ldr	r2, [pc, #176]	@ (8001c30 <HAL_ADC_MspInit+0xdc>)
 8001b80:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8001b84:	6453      	str	r3, [r2, #68]	@ 0x44
 8001b86:	4b2a      	ldr	r3, [pc, #168]	@ (8001c30 <HAL_ADC_MspInit+0xdc>)
 8001b88:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001b8a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001b8e:	613b      	str	r3, [r7, #16]
 8001b90:	693b      	ldr	r3, [r7, #16]
 8001b92:	2300      	movs	r3, #0
 8001b94:	60fb      	str	r3, [r7, #12]
 8001b96:	4b26      	ldr	r3, [pc, #152]	@ (8001c30 <HAL_ADC_MspInit+0xdc>)
 8001b98:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001b9a:	4a25      	ldr	r2, [pc, #148]	@ (8001c30 <HAL_ADC_MspInit+0xdc>)
 8001b9c:	f043 0301 	orr.w	r3, r3, #1
 8001ba0:	6313      	str	r3, [r2, #48]	@ 0x30
 8001ba2:	4b23      	ldr	r3, [pc, #140]	@ (8001c30 <HAL_ADC_MspInit+0xdc>)
 8001ba4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001ba6:	f003 0301 	and.w	r3, r3, #1
 8001baa:	60fb      	str	r3, [r7, #12]
 8001bac:	68fb      	ldr	r3, [r7, #12]
 8001bae:	2353      	movs	r3, #83	@ 0x53
 8001bb0:	617b      	str	r3, [r7, #20]
 8001bb2:	2303      	movs	r3, #3
 8001bb4:	61bb      	str	r3, [r7, #24]
 8001bb6:	2300      	movs	r3, #0
 8001bb8:	61fb      	str	r3, [r7, #28]
 8001bba:	f107 0314 	add.w	r3, r7, #20
 8001bbe:	4619      	mov	r1, r3
 8001bc0:	481c      	ldr	r0, [pc, #112]	@ (8001c34 <HAL_ADC_MspInit+0xe0>)
 8001bc2:	f001 fc2d 	bl	8003420 <HAL_GPIO_Init>
 8001bc6:	4b1c      	ldr	r3, [pc, #112]	@ (8001c38 <HAL_ADC_MspInit+0xe4>)
 8001bc8:	4a1c      	ldr	r2, [pc, #112]	@ (8001c3c <HAL_ADC_MspInit+0xe8>)
 8001bca:	601a      	str	r2, [r3, #0]
 8001bcc:	4b1a      	ldr	r3, [pc, #104]	@ (8001c38 <HAL_ADC_MspInit+0xe4>)
 8001bce:	2200      	movs	r2, #0
 8001bd0:	605a      	str	r2, [r3, #4]
 8001bd2:	4b19      	ldr	r3, [pc, #100]	@ (8001c38 <HAL_ADC_MspInit+0xe4>)
 8001bd4:	2200      	movs	r2, #0
 8001bd6:	609a      	str	r2, [r3, #8]
 8001bd8:	4b17      	ldr	r3, [pc, #92]	@ (8001c38 <HAL_ADC_MspInit+0xe4>)
 8001bda:	2200      	movs	r2, #0
 8001bdc:	60da      	str	r2, [r3, #12]
 8001bde:	4b16      	ldr	r3, [pc, #88]	@ (8001c38 <HAL_ADC_MspInit+0xe4>)
 8001be0:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8001be4:	611a      	str	r2, [r3, #16]
 8001be6:	4b14      	ldr	r3, [pc, #80]	@ (8001c38 <HAL_ADC_MspInit+0xe4>)
 8001be8:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8001bec:	615a      	str	r2, [r3, #20]
 8001bee:	4b12      	ldr	r3, [pc, #72]	@ (8001c38 <HAL_ADC_MspInit+0xe4>)
 8001bf0:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8001bf4:	619a      	str	r2, [r3, #24]
 8001bf6:	4b10      	ldr	r3, [pc, #64]	@ (8001c38 <HAL_ADC_MspInit+0xe4>)
 8001bf8:	2200      	movs	r2, #0
 8001bfa:	61da      	str	r2, [r3, #28]
 8001bfc:	4b0e      	ldr	r3, [pc, #56]	@ (8001c38 <HAL_ADC_MspInit+0xe4>)
 8001bfe:	2200      	movs	r2, #0
 8001c00:	621a      	str	r2, [r3, #32]
 8001c02:	4b0d      	ldr	r3, [pc, #52]	@ (8001c38 <HAL_ADC_MspInit+0xe4>)
 8001c04:	2200      	movs	r2, #0
 8001c06:	625a      	str	r2, [r3, #36]	@ 0x24
 8001c08:	480b      	ldr	r0, [pc, #44]	@ (8001c38 <HAL_ADC_MspInit+0xe4>)
 8001c0a:	f001 f807 	bl	8002c1c <HAL_DMA_Init>
 8001c0e:	4603      	mov	r3, r0
 8001c10:	2b00      	cmp	r3, #0
 8001c12:	d001      	beq.n	8001c18 <HAL_ADC_MspInit+0xc4>
 8001c14:	f7ff ff70 	bl	8001af8 <Error_Handler>
 8001c18:	687b      	ldr	r3, [r7, #4]
 8001c1a:	4a07      	ldr	r2, [pc, #28]	@ (8001c38 <HAL_ADC_MspInit+0xe4>)
 8001c1c:	639a      	str	r2, [r3, #56]	@ 0x38
 8001c1e:	4a06      	ldr	r2, [pc, #24]	@ (8001c38 <HAL_ADC_MspInit+0xe4>)
 8001c20:	687b      	ldr	r3, [r7, #4]
 8001c22:	6393      	str	r3, [r2, #56]	@ 0x38
 8001c24:	bf00      	nop
 8001c26:	3728      	adds	r7, #40	@ 0x28
 8001c28:	46bd      	mov	sp, r7
 8001c2a:	bd80      	pop	{r7, pc}
 8001c2c:	40012000 	.word	0x40012000
 8001c30:	40023800 	.word	0x40023800
 8001c34:	40020000 	.word	0x40020000
 8001c38:	20000238 	.word	0x20000238
 8001c3c:	40026410 	.word	0x40026410

08001c40 <HAL_TIM_Base_MspInit>:
 8001c40:	b580      	push	{r7, lr}
 8001c42:	b086      	sub	sp, #24
 8001c44:	af00      	add	r7, sp, #0
 8001c46:	6078      	str	r0, [r7, #4]
 8001c48:	687b      	ldr	r3, [r7, #4]
 8001c4a:	681b      	ldr	r3, [r3, #0]
 8001c4c:	4a2a      	ldr	r2, [pc, #168]	@ (8001cf8 <HAL_TIM_Base_MspInit+0xb8>)
 8001c4e:	4293      	cmp	r3, r2
 8001c50:	d11e      	bne.n	8001c90 <HAL_TIM_Base_MspInit+0x50>
 8001c52:	2300      	movs	r3, #0
 8001c54:	617b      	str	r3, [r7, #20]
 8001c56:	4b29      	ldr	r3, [pc, #164]	@ (8001cfc <HAL_TIM_Base_MspInit+0xbc>)
 8001c58:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001c5a:	4a28      	ldr	r2, [pc, #160]	@ (8001cfc <HAL_TIM_Base_MspInit+0xbc>)
 8001c5c:	f043 0302 	orr.w	r3, r3, #2
 8001c60:	6453      	str	r3, [r2, #68]	@ 0x44
 8001c62:	4b26      	ldr	r3, [pc, #152]	@ (8001cfc <HAL_TIM_Base_MspInit+0xbc>)
 8001c64:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001c66:	f003 0302 	and.w	r3, r3, #2
 8001c6a:	617b      	str	r3, [r7, #20]
 8001c6c:	697b      	ldr	r3, [r7, #20]
 8001c6e:	2200      	movs	r2, #0
 8001c70:	2100      	movs	r1, #0
 8001c72:	202c      	movs	r0, #44	@ 0x2c
 8001c74:	f000 ff9b 	bl	8002bae <HAL_NVIC_SetPriority>
 8001c78:	202c      	movs	r0, #44	@ 0x2c
 8001c7a:	f000 ffb4 	bl	8002be6 <HAL_NVIC_EnableIRQ>
 8001c7e:	2200      	movs	r2, #0
 8001c80:	2100      	movs	r1, #0
 8001c82:	202e      	movs	r0, #46	@ 0x2e
 8001c84:	f000 ff93 	bl	8002bae <HAL_NVIC_SetPriority>
 8001c88:	202e      	movs	r0, #46	@ 0x2e
 8001c8a:	f000 ffac 	bl	8002be6 <HAL_NVIC_EnableIRQ>
 8001c8e:	e02e      	b.n	8001cee <HAL_TIM_Base_MspInit+0xae>
 8001c90:	687b      	ldr	r3, [r7, #4]
 8001c92:	681b      	ldr	r3, [r3, #0]
 8001c94:	4a1a      	ldr	r2, [pc, #104]	@ (8001d00 <HAL_TIM_Base_MspInit+0xc0>)
 8001c96:	4293      	cmp	r3, r2
 8001c98:	d116      	bne.n	8001cc8 <HAL_TIM_Base_MspInit+0x88>
 8001c9a:	2300      	movs	r3, #0
 8001c9c:	613b      	str	r3, [r7, #16]
 8001c9e:	4b17      	ldr	r3, [pc, #92]	@ (8001cfc <HAL_TIM_Base_MspInit+0xbc>)
 8001ca0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001ca2:	4a16      	ldr	r2, [pc, #88]	@ (8001cfc <HAL_TIM_Base_MspInit+0xbc>)
 8001ca4:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8001ca8:	6453      	str	r3, [r2, #68]	@ 0x44
 8001caa:	4b14      	ldr	r3, [pc, #80]	@ (8001cfc <HAL_TIM_Base_MspInit+0xbc>)
 8001cac:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001cae:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001cb2:	613b      	str	r3, [r7, #16]
 8001cb4:	693b      	ldr	r3, [r7, #16]
 8001cb6:	2200      	movs	r2, #0
 8001cb8:	2100      	movs	r1, #0
 8001cba:	2019      	movs	r0, #25
 8001cbc:	f000 ff77 	bl	8002bae <HAL_NVIC_SetPriority>
 8001cc0:	2019      	movs	r0, #25
 8001cc2:	f000 ff90 	bl	8002be6 <HAL_NVIC_EnableIRQ>
 8001cc6:	e012      	b.n	8001cee <HAL_TIM_Base_MspInit+0xae>
 8001cc8:	687b      	ldr	r3, [r7, #4]
 8001cca:	681b      	ldr	r3, [r3, #0]
 8001ccc:	4a0d      	ldr	r2, [pc, #52]	@ (8001d04 <HAL_TIM_Base_MspInit+0xc4>)
 8001cce:	4293      	cmp	r3, r2
 8001cd0:	d10d      	bne.n	8001cee <HAL_TIM_Base_MspInit+0xae>
 8001cd2:	2300      	movs	r3, #0
 8001cd4:	60fb      	str	r3, [r7, #12]
 8001cd6:	4b09      	ldr	r3, [pc, #36]	@ (8001cfc <HAL_TIM_Base_MspInit+0xbc>)
 8001cd8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001cda:	4a08      	ldr	r2, [pc, #32]	@ (8001cfc <HAL_TIM_Base_MspInit+0xbc>)
 8001cdc:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8001ce0:	6453      	str	r3, [r2, #68]	@ 0x44
 8001ce2:	4b06      	ldr	r3, [pc, #24]	@ (8001cfc <HAL_TIM_Base_MspInit+0xbc>)
 8001ce4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001ce6:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8001cea:	60fb      	str	r3, [r7, #12]
 8001cec:	68fb      	ldr	r3, [r7, #12]
 8001cee:	bf00      	nop
 8001cf0:	3718      	adds	r7, #24
 8001cf2:	46bd      	mov	sp, r7
 8001cf4:	bd80      	pop	{r7, pc}
 8001cf6:	bf00      	nop
 8001cf8:	40010400 	.word	0x40010400
 8001cfc:	40023800 	.word	0x40023800
 8001d00:	40014400 	.word	0x40014400
 8001d04:	40014800 	.word	0x40014800

<<<<<<< HEAD
08001d08 <HAL_TIM_MspPostInit>:
 8001d08:	b580      	push	{r7, lr}
 8001d0a:	b088      	sub	sp, #32
 8001d0c:	af00      	add	r7, sp, #0
 8001d0e:	6078      	str	r0, [r7, #4]
 8001d10:	f107 030c 	add.w	r3, r7, #12
 8001d14:	2200      	movs	r2, #0
 8001d16:	601a      	str	r2, [r3, #0]
 8001d18:	605a      	str	r2, [r3, #4]
 8001d1a:	609a      	str	r2, [r3, #8]
 8001d1c:	60da      	str	r2, [r3, #12]
 8001d1e:	611a      	str	r2, [r3, #16]
 8001d20:	687b      	ldr	r3, [r7, #4]
 8001d22:	681b      	ldr	r3, [r3, #0]
 8001d24:	4a12      	ldr	r2, [pc, #72]	@ (8001d70 <HAL_TIM_MspPostInit+0x68>)
 8001d26:	4293      	cmp	r3, r2
 8001d28:	d11d      	bne.n	8001d66 <HAL_TIM_MspPostInit+0x5e>
 8001d2a:	2300      	movs	r3, #0
 8001d2c:	60bb      	str	r3, [r7, #8]
 8001d2e:	4b11      	ldr	r3, [pc, #68]	@ (8001d74 <HAL_TIM_MspPostInit+0x6c>)
 8001d30:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001d32:	4a10      	ldr	r2, [pc, #64]	@ (8001d74 <HAL_TIM_MspPostInit+0x6c>)
 8001d34:	f043 0304 	orr.w	r3, r3, #4
 8001d38:	6313      	str	r3, [r2, #48]	@ 0x30
 8001d3a:	4b0e      	ldr	r3, [pc, #56]	@ (8001d74 <HAL_TIM_MspPostInit+0x6c>)
 8001d3c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001d3e:	f003 0304 	and.w	r3, r3, #4
 8001d42:	60bb      	str	r3, [r7, #8]
 8001d44:	68bb      	ldr	r3, [r7, #8]
 8001d46:	2340      	movs	r3, #64	@ 0x40
 8001d48:	60fb      	str	r3, [r7, #12]
 8001d4a:	2302      	movs	r3, #2
 8001d4c:	613b      	str	r3, [r7, #16]
 8001d4e:	2300      	movs	r3, #0
 8001d50:	617b      	str	r3, [r7, #20]
 8001d52:	2300      	movs	r3, #0
 8001d54:	61bb      	str	r3, [r7, #24]
 8001d56:	2303      	movs	r3, #3
 8001d58:	61fb      	str	r3, [r7, #28]
 8001d5a:	f107 030c 	add.w	r3, r7, #12
 8001d5e:	4619      	mov	r1, r3
 8001d60:	4805      	ldr	r0, [pc, #20]	@ (8001d78 <HAL_TIM_MspPostInit+0x70>)
 8001d62:	f001 fb5d 	bl	8003420 <HAL_GPIO_Init>
 8001d66:	bf00      	nop
 8001d68:	3720      	adds	r7, #32
 8001d6a:	46bd      	mov	sp, r7
 8001d6c:	bd80      	pop	{r7, pc}
 8001d6e:	bf00      	nop
 8001d70:	40010400 	.word	0x40010400
 8001d74:	40023800 	.word	0x40023800
 8001d78:	40020800 	.word	0x40020800

08001d7c <HAL_UART_MspInit>:
 8001d7c:	b580      	push	{r7, lr}
 8001d7e:	b08a      	sub	sp, #40	@ 0x28
 8001d80:	af00      	add	r7, sp, #0
 8001d82:	6078      	str	r0, [r7, #4]
 8001d84:	f107 0314 	add.w	r3, r7, #20
 8001d88:	2200      	movs	r2, #0
 8001d8a:	601a      	str	r2, [r3, #0]
 8001d8c:	605a      	str	r2, [r3, #4]
 8001d8e:	609a      	str	r2, [r3, #8]
 8001d90:	60da      	str	r2, [r3, #12]
 8001d92:	611a      	str	r2, [r3, #16]
 8001d94:	687b      	ldr	r3, [r7, #4]
 8001d96:	681b      	ldr	r3, [r3, #0]
 8001d98:	4a1d      	ldr	r2, [pc, #116]	@ (8001e10 <HAL_UART_MspInit+0x94>)
 8001d9a:	4293      	cmp	r3, r2
 8001d9c:	d133      	bne.n	8001e06 <HAL_UART_MspInit+0x8a>
 8001d9e:	2300      	movs	r3, #0
 8001da0:	613b      	str	r3, [r7, #16]
 8001da2:	4b1c      	ldr	r3, [pc, #112]	@ (8001e14 <HAL_UART_MspInit+0x98>)
 8001da4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001da6:	4a1b      	ldr	r2, [pc, #108]	@ (8001e14 <HAL_UART_MspInit+0x98>)
 8001da8:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8001dac:	6413      	str	r3, [r2, #64]	@ 0x40
 8001dae:	4b19      	ldr	r3, [pc, #100]	@ (8001e14 <HAL_UART_MspInit+0x98>)
 8001db0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001db2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001db6:	613b      	str	r3, [r7, #16]
 8001db8:	693b      	ldr	r3, [r7, #16]
 8001dba:	2300      	movs	r3, #0
 8001dbc:	60fb      	str	r3, [r7, #12]
 8001dbe:	4b15      	ldr	r3, [pc, #84]	@ (8001e14 <HAL_UART_MspInit+0x98>)
 8001dc0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001dc2:	4a14      	ldr	r2, [pc, #80]	@ (8001e14 <HAL_UART_MspInit+0x98>)
 8001dc4:	f043 0301 	orr.w	r3, r3, #1
 8001dc8:	6313      	str	r3, [r2, #48]	@ 0x30
 8001dca:	4b12      	ldr	r3, [pc, #72]	@ (8001e14 <HAL_UART_MspInit+0x98>)
 8001dcc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001dce:	f003 0301 	and.w	r3, r3, #1
 8001dd2:	60fb      	str	r3, [r7, #12]
 8001dd4:	68fb      	ldr	r3, [r7, #12]
 8001dd6:	230c      	movs	r3, #12
 8001dd8:	617b      	str	r3, [r7, #20]
 8001dda:	2302      	movs	r3, #2
 8001ddc:	61bb      	str	r3, [r7, #24]
 8001dde:	2300      	movs	r3, #0
 8001de0:	61fb      	str	r3, [r7, #28]
 8001de2:	2303      	movs	r3, #3
 8001de4:	623b      	str	r3, [r7, #32]
 8001de6:	2307      	movs	r3, #7
 8001de8:	627b      	str	r3, [r7, #36]	@ 0x24
 8001dea:	f107 0314 	add.w	r3, r7, #20
 8001dee:	4619      	mov	r1, r3
 8001df0:	4809      	ldr	r0, [pc, #36]	@ (8001e18 <HAL_UART_MspInit+0x9c>)
 8001df2:	f001 fb15 	bl	8003420 <HAL_GPIO_Init>
 8001df6:	2200      	movs	r2, #0
 8001df8:	2100      	movs	r1, #0
 8001dfa:	2026      	movs	r0, #38	@ 0x26
 8001dfc:	f000 fed7 	bl	8002bae <HAL_NVIC_SetPriority>
 8001e00:	2026      	movs	r0, #38	@ 0x26
 8001e02:	f000 fef0 	bl	8002be6 <HAL_NVIC_EnableIRQ>
 8001e06:	bf00      	nop
 8001e08:	3728      	adds	r7, #40	@ 0x28
 8001e0a:	46bd      	mov	sp, r7
 8001e0c:	bd80      	pop	{r7, pc}
 8001e0e:	bf00      	nop
 8001e10:	40004400 	.word	0x40004400
 8001e14:	40023800 	.word	0x40023800
 8001e18:	40020000 	.word	0x40020000
=======
  __HAL_RCC_SYSCFG_CLK_ENABLE();
<<<<<<< HEAD
 8001af2:	2300      	movs	r3, #0
 8001af4:	607b      	str	r3, [r7, #4]
 8001af6:	4b10      	ldr	r3, [pc, #64]	@ (8001b38 <HAL_MspInit+0x4c>)
 8001af8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001afa:	4a0f      	ldr	r2, [pc, #60]	@ (8001b38 <HAL_MspInit+0x4c>)
 8001afc:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8001b00:	6453      	str	r3, [r2, #68]	@ 0x44
 8001b02:	4b0d      	ldr	r3, [pc, #52]	@ (8001b38 <HAL_MspInit+0x4c>)
 8001b04:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001b06:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8001b0a:	607b      	str	r3, [r7, #4]
 8001b0c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001b0e:	2300      	movs	r3, #0
 8001b10:	603b      	str	r3, [r7, #0]
 8001b12:	4b09      	ldr	r3, [pc, #36]	@ (8001b38 <HAL_MspInit+0x4c>)
 8001b14:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001b16:	4a08      	ldr	r2, [pc, #32]	@ (8001b38 <HAL_MspInit+0x4c>)
 8001b18:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001b1c:	6413      	str	r3, [r2, #64]	@ 0x40
 8001b1e:	4b06      	ldr	r3, [pc, #24]	@ (8001b38 <HAL_MspInit+0x4c>)
 8001b20:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001b22:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001b26:	603b      	str	r3, [r7, #0]
 8001b28:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 8001b2a:	2007      	movs	r0, #7
 8001b2c:	f001 f828 	bl	8002b80 <HAL_NVIC_SetPriorityGrouping>
=======
 8001c06:	2300      	movs	r3, #0
 8001c08:	607b      	str	r3, [r7, #4]
 8001c0a:	4b10      	ldr	r3, [pc, #64]	@ (8001c4c <HAL_MspInit+0x4c>)
 8001c0c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001c0e:	4a0f      	ldr	r2, [pc, #60]	@ (8001c4c <HAL_MspInit+0x4c>)
 8001c10:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8001c14:	6453      	str	r3, [r2, #68]	@ 0x44
 8001c16:	4b0d      	ldr	r3, [pc, #52]	@ (8001c4c <HAL_MspInit+0x4c>)
 8001c18:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001c1a:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8001c1e:	607b      	str	r3, [r7, #4]
 8001c20:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001c22:	2300      	movs	r3, #0
 8001c24:	603b      	str	r3, [r7, #0]
 8001c26:	4b09      	ldr	r3, [pc, #36]	@ (8001c4c <HAL_MspInit+0x4c>)
 8001c28:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001c2a:	4a08      	ldr	r2, [pc, #32]	@ (8001c4c <HAL_MspInit+0x4c>)
 8001c2c:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001c30:	6413      	str	r3, [r2, #64]	@ 0x40
 8001c32:	4b06      	ldr	r3, [pc, #24]	@ (8001c4c <HAL_MspInit+0x4c>)
 8001c34:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001c36:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001c3a:	603b      	str	r3, [r7, #0]
 8001c3c:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 8001c3e:	2007      	movs	r0, #7
 8001c40:	f001 f828 	bl	8002c94 <HAL_NVIC_SetPriorityGrouping>
>>>>>>> 39e4d10438a821cc799a472af87a77c6796a1676
  /* System interrupt init*/
>>>>>>> ef0d341697957f8628c074acbc12bb9a12bbe146

08001e1c <NMI_Handler>:
 8001e1c:	b480      	push	{r7}
 8001e1e:	af00      	add	r7, sp, #0
 8001e20:	bf00      	nop
 8001e22:	e7fd      	b.n	8001e20 <NMI_Handler+0x4>

<<<<<<< HEAD
08001e24 <HardFault_Handler>:
 8001e24:	b480      	push	{r7}
 8001e26:	af00      	add	r7, sp, #0
 8001e28:	bf00      	nop
 8001e2a:	e7fd      	b.n	8001e28 <HardFault_Handler+0x4>

08001e2c <MemManage_Handler>:
 8001e2c:	b480      	push	{r7}
 8001e2e:	af00      	add	r7, sp, #0
 8001e30:	bf00      	nop
 8001e32:	e7fd      	b.n	8001e30 <MemManage_Handler+0x4>

08001e34 <BusFault_Handler>:
 8001e34:	b480      	push	{r7}
 8001e36:	af00      	add	r7, sp, #0
 8001e38:	bf00      	nop
 8001e3a:	e7fd      	b.n	8001e38 <BusFault_Handler+0x4>

08001e3c <UsageFault_Handler>:
 8001e3c:	b480      	push	{r7}
 8001e3e:	af00      	add	r7, sp, #0
 8001e40:	bf00      	nop
 8001e42:	e7fd      	b.n	8001e40 <UsageFault_Handler+0x4>

08001e44 <SVC_Handler>:
 8001e44:	b480      	push	{r7}
 8001e46:	af00      	add	r7, sp, #0
 8001e48:	bf00      	nop
 8001e4a:	46bd      	mov	sp, r7
 8001e4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e50:	4770      	bx	lr

08001e52 <DebugMon_Handler>:
 8001e52:	b480      	push	{r7}
 8001e54:	af00      	add	r7, sp, #0
 8001e56:	bf00      	nop
 8001e58:	46bd      	mov	sp, r7
 8001e5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e5e:	4770      	bx	lr
=======
  /* USER CODE END MspInit 1 */
}
<<<<<<< HEAD
 8001b30:	bf00      	nop
 8001b32:	3708      	adds	r7, #8
 8001b34:	46bd      	mov	sp, r7
 8001b36:	bd80      	pop	{r7, pc}
 8001b38:	40023800 	.word	0x40023800

08001b3c <HAL_ADC_MspInit>:
=======
 8001c44:	bf00      	nop
 8001c46:	3708      	adds	r7, #8
 8001c48:	46bd      	mov	sp, r7
 8001c4a:	bd80      	pop	{r7, pc}
 8001c4c:	40023800 	.word	0x40023800

08001c50 <HAL_ADC_MspInit>:
>>>>>>> 39e4d10438a821cc799a472af87a77c6796a1676
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
<<<<<<< HEAD
 8001b3c:	b580      	push	{r7, lr}
 8001b3e:	b08a      	sub	sp, #40	@ 0x28
 8001b40:	af00      	add	r7, sp, #0
 8001b42:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001b44:	f107 0314 	add.w	r3, r7, #20
 8001b48:	2200      	movs	r2, #0
 8001b4a:	601a      	str	r2, [r3, #0]
 8001b4c:	605a      	str	r2, [r3, #4]
 8001b4e:	609a      	str	r2, [r3, #8]
 8001b50:	60da      	str	r2, [r3, #12]
 8001b52:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC1)
 8001b54:	687b      	ldr	r3, [r7, #4]
 8001b56:	681b      	ldr	r3, [r3, #0]
 8001b58:	4a2e      	ldr	r2, [pc, #184]	@ (8001c14 <HAL_ADC_MspInit+0xd8>)
 8001b5a:	4293      	cmp	r3, r2
 8001b5c:	d156      	bne.n	8001c0c <HAL_ADC_MspInit+0xd0>
=======
 8001c50:	b580      	push	{r7, lr}
 8001c52:	b08a      	sub	sp, #40	@ 0x28
 8001c54:	af00      	add	r7, sp, #0
 8001c56:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001c58:	f107 0314 	add.w	r3, r7, #20
 8001c5c:	2200      	movs	r2, #0
 8001c5e:	601a      	str	r2, [r3, #0]
 8001c60:	605a      	str	r2, [r3, #4]
 8001c62:	609a      	str	r2, [r3, #8]
 8001c64:	60da      	str	r2, [r3, #12]
 8001c66:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC1)
 8001c68:	687b      	ldr	r3, [r7, #4]
 8001c6a:	681b      	ldr	r3, [r3, #0]
 8001c6c:	4a2e      	ldr	r2, [pc, #184]	@ (8001d28 <HAL_ADC_MspInit+0xd8>)
 8001c6e:	4293      	cmp	r3, r2
 8001c70:	d156      	bne.n	8001d20 <HAL_ADC_MspInit+0xd0>
>>>>>>> 39e4d10438a821cc799a472af87a77c6796a1676
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
<<<<<<< HEAD
 8001b5e:	2300      	movs	r3, #0
 8001b60:	613b      	str	r3, [r7, #16]
 8001b62:	4b2d      	ldr	r3, [pc, #180]	@ (8001c18 <HAL_ADC_MspInit+0xdc>)
 8001b64:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001b66:	4a2c      	ldr	r2, [pc, #176]	@ (8001c18 <HAL_ADC_MspInit+0xdc>)
 8001b68:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8001b6c:	6453      	str	r3, [r2, #68]	@ 0x44
 8001b6e:	4b2a      	ldr	r3, [pc, #168]	@ (8001c18 <HAL_ADC_MspInit+0xdc>)
 8001b70:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001b72:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001b76:	613b      	str	r3, [r7, #16]
 8001b78:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001b7a:	2300      	movs	r3, #0
 8001b7c:	60fb      	str	r3, [r7, #12]
 8001b7e:	4b26      	ldr	r3, [pc, #152]	@ (8001c18 <HAL_ADC_MspInit+0xdc>)
 8001b80:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001b82:	4a25      	ldr	r2, [pc, #148]	@ (8001c18 <HAL_ADC_MspInit+0xdc>)
 8001b84:	f043 0301 	orr.w	r3, r3, #1
 8001b88:	6313      	str	r3, [r2, #48]	@ 0x30
 8001b8a:	4b23      	ldr	r3, [pc, #140]	@ (8001c18 <HAL_ADC_MspInit+0xdc>)
 8001b8c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001b8e:	f003 0301 	and.w	r3, r3, #1
 8001b92:	60fb      	str	r3, [r7, #12]
 8001b94:	68fb      	ldr	r3, [r7, #12]
=======
 8001c72:	2300      	movs	r3, #0
 8001c74:	613b      	str	r3, [r7, #16]
 8001c76:	4b2d      	ldr	r3, [pc, #180]	@ (8001d2c <HAL_ADC_MspInit+0xdc>)
 8001c78:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001c7a:	4a2c      	ldr	r2, [pc, #176]	@ (8001d2c <HAL_ADC_MspInit+0xdc>)
 8001c7c:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8001c80:	6453      	str	r3, [r2, #68]	@ 0x44
 8001c82:	4b2a      	ldr	r3, [pc, #168]	@ (8001d2c <HAL_ADC_MspInit+0xdc>)
 8001c84:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001c86:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001c8a:	613b      	str	r3, [r7, #16]
 8001c8c:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001c8e:	2300      	movs	r3, #0
 8001c90:	60fb      	str	r3, [r7, #12]
 8001c92:	4b26      	ldr	r3, [pc, #152]	@ (8001d2c <HAL_ADC_MspInit+0xdc>)
 8001c94:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001c96:	4a25      	ldr	r2, [pc, #148]	@ (8001d2c <HAL_ADC_MspInit+0xdc>)
 8001c98:	f043 0301 	orr.w	r3, r3, #1
 8001c9c:	6313      	str	r3, [r2, #48]	@ 0x30
 8001c9e:	4b23      	ldr	r3, [pc, #140]	@ (8001d2c <HAL_ADC_MspInit+0xdc>)
 8001ca0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001ca2:	f003 0301 	and.w	r3, r3, #1
 8001ca6:	60fb      	str	r3, [r7, #12]
 8001ca8:	68fb      	ldr	r3, [r7, #12]
>>>>>>> 39e4d10438a821cc799a472af87a77c6796a1676
    PA0-WKUP     ------> ADC1_IN0
    PA1     ------> ADC1_IN1
    PA4     ------> ADC1_IN4
    PA6     ------> ADC1_IN6
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_4|GPIO_PIN_6;
<<<<<<< HEAD
 8001b96:	2353      	movs	r3, #83	@ 0x53
 8001b98:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001b9a:	2303      	movs	r3, #3
 8001b9c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001b9e:	2300      	movs	r3, #0
 8001ba0:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001ba2:	f107 0314 	add.w	r3, r7, #20
 8001ba6:	4619      	mov	r1, r3
 8001ba8:	481c      	ldr	r0, [pc, #112]	@ (8001c1c <HAL_ADC_MspInit+0xe0>)
 8001baa:	f001 fc2d 	bl	8003408 <HAL_GPIO_Init>
=======
 8001caa:	2353      	movs	r3, #83	@ 0x53
 8001cac:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001cae:	2303      	movs	r3, #3
 8001cb0:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001cb2:	2300      	movs	r3, #0
 8001cb4:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001cb6:	f107 0314 	add.w	r3, r7, #20
 8001cba:	4619      	mov	r1, r3
 8001cbc:	481c      	ldr	r0, [pc, #112]	@ (8001d30 <HAL_ADC_MspInit+0xe0>)
 8001cbe:	f001 fc2d 	bl	800351c <HAL_GPIO_Init>
>>>>>>> 39e4d10438a821cc799a472af87a77c6796a1676

    /* ADC1 DMA Init */
    /* ADC1 Init */
    hdma_adc1.Instance = DMA2_Stream0;
<<<<<<< HEAD
 8001bae:	4b1c      	ldr	r3, [pc, #112]	@ (8001c20 <HAL_ADC_MspInit+0xe4>)
 8001bb0:	4a1c      	ldr	r2, [pc, #112]	@ (8001c24 <HAL_ADC_MspInit+0xe8>)
 8001bb2:	601a      	str	r2, [r3, #0]
    hdma_adc1.Init.Channel = DMA_CHANNEL_0;
 8001bb4:	4b1a      	ldr	r3, [pc, #104]	@ (8001c20 <HAL_ADC_MspInit+0xe4>)
 8001bb6:	2200      	movs	r2, #0
 8001bb8:	605a      	str	r2, [r3, #4]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8001bba:	4b19      	ldr	r3, [pc, #100]	@ (8001c20 <HAL_ADC_MspInit+0xe4>)
 8001bbc:	2200      	movs	r2, #0
 8001bbe:	609a      	str	r2, [r3, #8]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 8001bc0:	4b17      	ldr	r3, [pc, #92]	@ (8001c20 <HAL_ADC_MspInit+0xe4>)
 8001bc2:	2200      	movs	r2, #0
 8001bc4:	60da      	str	r2, [r3, #12]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 8001bc6:	4b16      	ldr	r3, [pc, #88]	@ (8001c20 <HAL_ADC_MspInit+0xe4>)
 8001bc8:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8001bcc:	611a      	str	r2, [r3, #16]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8001bce:	4b14      	ldr	r3, [pc, #80]	@ (8001c20 <HAL_ADC_MspInit+0xe4>)
 8001bd0:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8001bd4:	615a      	str	r2, [r3, #20]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8001bd6:	4b12      	ldr	r3, [pc, #72]	@ (8001c20 <HAL_ADC_MspInit+0xe4>)
 8001bd8:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8001bdc:	619a      	str	r2, [r3, #24]
    hdma_adc1.Init.Mode = DMA_NORMAL;
 8001bde:	4b10      	ldr	r3, [pc, #64]	@ (8001c20 <HAL_ADC_MspInit+0xe4>)
 8001be0:	2200      	movs	r2, #0
 8001be2:	61da      	str	r2, [r3, #28]
    hdma_adc1.Init.Priority = DMA_PRIORITY_LOW;
 8001be4:	4b0e      	ldr	r3, [pc, #56]	@ (8001c20 <HAL_ADC_MspInit+0xe4>)
 8001be6:	2200      	movs	r2, #0
 8001be8:	621a      	str	r2, [r3, #32]
    hdma_adc1.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8001bea:	4b0d      	ldr	r3, [pc, #52]	@ (8001c20 <HAL_ADC_MspInit+0xe4>)
 8001bec:	2200      	movs	r2, #0
 8001bee:	625a      	str	r2, [r3, #36]	@ 0x24
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 8001bf0:	480b      	ldr	r0, [pc, #44]	@ (8001c20 <HAL_ADC_MspInit+0xe4>)
 8001bf2:	f001 f807 	bl	8002c04 <HAL_DMA_Init>
 8001bf6:	4603      	mov	r3, r0
 8001bf8:	2b00      	cmp	r3, #0
 8001bfa:	d001      	beq.n	8001c00 <HAL_ADC_MspInit+0xc4>
    {
      Error_Handler();
 8001bfc:	f7ff ff70 	bl	8001ae0 <Error_Handler>
    }

    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc1);
 8001c00:	687b      	ldr	r3, [r7, #4]
 8001c02:	4a07      	ldr	r2, [pc, #28]	@ (8001c20 <HAL_ADC_MspInit+0xe4>)
 8001c04:	639a      	str	r2, [r3, #56]	@ 0x38
 8001c06:	4a06      	ldr	r2, [pc, #24]	@ (8001c20 <HAL_ADC_MspInit+0xe4>)
 8001c08:	687b      	ldr	r3, [r7, #4]
 8001c0a:	6393      	str	r3, [r2, #56]	@ 0x38
=======
 8001cc2:	4b1c      	ldr	r3, [pc, #112]	@ (8001d34 <HAL_ADC_MspInit+0xe4>)
 8001cc4:	4a1c      	ldr	r2, [pc, #112]	@ (8001d38 <HAL_ADC_MspInit+0xe8>)
 8001cc6:	601a      	str	r2, [r3, #0]
    hdma_adc1.Init.Channel = DMA_CHANNEL_0;
 8001cc8:	4b1a      	ldr	r3, [pc, #104]	@ (8001d34 <HAL_ADC_MspInit+0xe4>)
 8001cca:	2200      	movs	r2, #0
 8001ccc:	605a      	str	r2, [r3, #4]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8001cce:	4b19      	ldr	r3, [pc, #100]	@ (8001d34 <HAL_ADC_MspInit+0xe4>)
 8001cd0:	2200      	movs	r2, #0
 8001cd2:	609a      	str	r2, [r3, #8]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 8001cd4:	4b17      	ldr	r3, [pc, #92]	@ (8001d34 <HAL_ADC_MspInit+0xe4>)
 8001cd6:	2200      	movs	r2, #0
 8001cd8:	60da      	str	r2, [r3, #12]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 8001cda:	4b16      	ldr	r3, [pc, #88]	@ (8001d34 <HAL_ADC_MspInit+0xe4>)
 8001cdc:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8001ce0:	611a      	str	r2, [r3, #16]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8001ce2:	4b14      	ldr	r3, [pc, #80]	@ (8001d34 <HAL_ADC_MspInit+0xe4>)
 8001ce4:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8001ce8:	615a      	str	r2, [r3, #20]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8001cea:	4b12      	ldr	r3, [pc, #72]	@ (8001d34 <HAL_ADC_MspInit+0xe4>)
 8001cec:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8001cf0:	619a      	str	r2, [r3, #24]
    hdma_adc1.Init.Mode = DMA_NORMAL;
 8001cf2:	4b10      	ldr	r3, [pc, #64]	@ (8001d34 <HAL_ADC_MspInit+0xe4>)
 8001cf4:	2200      	movs	r2, #0
 8001cf6:	61da      	str	r2, [r3, #28]
    hdma_adc1.Init.Priority = DMA_PRIORITY_LOW;
 8001cf8:	4b0e      	ldr	r3, [pc, #56]	@ (8001d34 <HAL_ADC_MspInit+0xe4>)
 8001cfa:	2200      	movs	r2, #0
 8001cfc:	621a      	str	r2, [r3, #32]
    hdma_adc1.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8001cfe:	4b0d      	ldr	r3, [pc, #52]	@ (8001d34 <HAL_ADC_MspInit+0xe4>)
 8001d00:	2200      	movs	r2, #0
 8001d02:	625a      	str	r2, [r3, #36]	@ 0x24
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 8001d04:	480b      	ldr	r0, [pc, #44]	@ (8001d34 <HAL_ADC_MspInit+0xe4>)
 8001d06:	f001 f807 	bl	8002d18 <HAL_DMA_Init>
 8001d0a:	4603      	mov	r3, r0
 8001d0c:	2b00      	cmp	r3, #0
 8001d0e:	d001      	beq.n	8001d14 <HAL_ADC_MspInit+0xc4>
    {
      Error_Handler();
 8001d10:	f7ff ff70 	bl	8001bf4 <Error_Handler>
    }

    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc1);
 8001d14:	687b      	ldr	r3, [r7, #4]
 8001d16:	4a07      	ldr	r2, [pc, #28]	@ (8001d34 <HAL_ADC_MspInit+0xe4>)
 8001d18:	639a      	str	r2, [r3, #56]	@ 0x38
 8001d1a:	4a06      	ldr	r2, [pc, #24]	@ (8001d34 <HAL_ADC_MspInit+0xe4>)
 8001d1c:	687b      	ldr	r3, [r7, #4]
 8001d1e:	6393      	str	r3, [r2, #56]	@ 0x38
>>>>>>> 39e4d10438a821cc799a472af87a77c6796a1676
>>>>>>> ef0d341697957f8628c074acbc12bb9a12bbe146

08001e60 <PendSV_Handler>:
 8001e60:	b480      	push	{r7}
 8001e62:	af00      	add	r7, sp, #0
 8001e64:	bf00      	nop
 8001e66:	46bd      	mov	sp, r7
 8001e68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e6c:	4770      	bx	lr

<<<<<<< HEAD
08001e6e <SysTick_Handler>:
 8001e6e:	b580      	push	{r7, lr}
 8001e70:	af00      	add	r7, sp, #0
 8001e72:	f000 f989 	bl	8002188 <HAL_IncTick>
 8001e76:	bf00      	nop
 8001e78:	bd80      	pop	{r7, pc}
	...

08001e7c <TIM1_UP_TIM10_IRQHandler>:
 8001e7c:	b580      	push	{r7, lr}
 8001e7e:	af00      	add	r7, sp, #0
 8001e80:	4802      	ldr	r0, [pc, #8]	@ (8001e8c <TIM1_UP_TIM10_IRQHandler+0x10>)
 8001e82:	f002 fd13 	bl	80048ac <HAL_TIM_IRQHandler>
 8001e86:	bf00      	nop
 8001e88:	bd80      	pop	{r7, pc}
 8001e8a:	bf00      	nop
 8001e8c:	200002e0 	.word	0x200002e0

08001e90 <USART2_IRQHandler>:
 8001e90:	b580      	push	{r7, lr}
 8001e92:	af00      	add	r7, sp, #0
 8001e94:	4802      	ldr	r0, [pc, #8]	@ (8001ea0 <USART2_IRQHandler+0x10>)
 8001e96:	f003 fbef 	bl	8005678 <HAL_UART_IRQHandler>
 8001e9a:	bf00      	nop
 8001e9c:	bd80      	pop	{r7, pc}
 8001e9e:	bf00      	nop
 8001ea0:	20000370 	.word	0x20000370

08001ea4 <TIM8_UP_TIM13_IRQHandler>:
 8001ea4:	b580      	push	{r7, lr}
 8001ea6:	af00      	add	r7, sp, #0
 8001ea8:	4802      	ldr	r0, [pc, #8]	@ (8001eb4 <TIM8_UP_TIM13_IRQHandler+0x10>)
 8001eaa:	f002 fcff 	bl	80048ac <HAL_TIM_IRQHandler>
 8001eae:	bf00      	nop
 8001eb0:	bd80      	pop	{r7, pc}
 8001eb2:	bf00      	nop
 8001eb4:	20000298 	.word	0x20000298

08001eb8 <TIM8_CC_IRQHandler>:
 8001eb8:	b580      	push	{r7, lr}
 8001eba:	af00      	add	r7, sp, #0
 8001ebc:	4802      	ldr	r0, [pc, #8]	@ (8001ec8 <TIM8_CC_IRQHandler+0x10>)
 8001ebe:	f002 fcf5 	bl	80048ac <HAL_TIM_IRQHandler>
 8001ec2:	bf00      	nop
 8001ec4:	bd80      	pop	{r7, pc}
 8001ec6:	bf00      	nop
 8001ec8:	20000298 	.word	0x20000298

08001ecc <DMA2_Stream0_IRQHandler>:
 8001ecc:	b580      	push	{r7, lr}
 8001ece:	af00      	add	r7, sp, #0
 8001ed0:	4802      	ldr	r0, [pc, #8]	@ (8001edc <DMA2_Stream0_IRQHandler+0x10>)
 8001ed2:	f001 f83b 	bl	8002f4c <HAL_DMA_IRQHandler>
 8001ed6:	bf00      	nop
 8001ed8:	bd80      	pop	{r7, pc}
 8001eda:	bf00      	nop
 8001edc:	20000238 	.word	0x20000238

08001ee0 <_getpid>:
 8001ee0:	b480      	push	{r7}
 8001ee2:	af00      	add	r7, sp, #0
 8001ee4:	2301      	movs	r3, #1
 8001ee6:	4618      	mov	r0, r3
 8001ee8:	46bd      	mov	sp, r7
 8001eea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001eee:	4770      	bx	lr

08001ef0 <_kill>:
 8001ef0:	b580      	push	{r7, lr}
 8001ef2:	b082      	sub	sp, #8
 8001ef4:	af00      	add	r7, sp, #0
 8001ef6:	6078      	str	r0, [r7, #4]
 8001ef8:	6039      	str	r1, [r7, #0]
 8001efa:	f005 f8b1 	bl	8007060 <__errno>
 8001efe:	4603      	mov	r3, r0
 8001f00:	2216      	movs	r2, #22
 8001f02:	601a      	str	r2, [r3, #0]
 8001f04:	f04f 33ff 	mov.w	r3, #4294967295
 8001f08:	4618      	mov	r0, r3
 8001f0a:	3708      	adds	r7, #8
 8001f0c:	46bd      	mov	sp, r7
 8001f0e:	bd80      	pop	{r7, pc}

08001f10 <_exit>:
 8001f10:	b580      	push	{r7, lr}
 8001f12:	b082      	sub	sp, #8
 8001f14:	af00      	add	r7, sp, #0
 8001f16:	6078      	str	r0, [r7, #4]
 8001f18:	f04f 31ff 	mov.w	r1, #4294967295
 8001f1c:	6878      	ldr	r0, [r7, #4]
 8001f1e:	f7ff ffe7 	bl	8001ef0 <_kill>
 8001f22:	bf00      	nop
 8001f24:	e7fd      	b.n	8001f22 <_exit+0x12>

08001f26 <_read>:
 8001f26:	b580      	push	{r7, lr}
 8001f28:	b086      	sub	sp, #24
 8001f2a:	af00      	add	r7, sp, #0
 8001f2c:	60f8      	str	r0, [r7, #12]
 8001f2e:	60b9      	str	r1, [r7, #8]
 8001f30:	607a      	str	r2, [r7, #4]
 8001f32:	2300      	movs	r3, #0
 8001f34:	617b      	str	r3, [r7, #20]
 8001f36:	e00a      	b.n	8001f4e <_read+0x28>
 8001f38:	f3af 8000 	nop.w
 8001f3c:	4601      	mov	r1, r0
 8001f3e:	68bb      	ldr	r3, [r7, #8]
 8001f40:	1c5a      	adds	r2, r3, #1
 8001f42:	60ba      	str	r2, [r7, #8]
 8001f44:	b2ca      	uxtb	r2, r1
 8001f46:	701a      	strb	r2, [r3, #0]
 8001f48:	697b      	ldr	r3, [r7, #20]
 8001f4a:	3301      	adds	r3, #1
 8001f4c:	617b      	str	r3, [r7, #20]
 8001f4e:	697a      	ldr	r2, [r7, #20]
 8001f50:	687b      	ldr	r3, [r7, #4]
 8001f52:	429a      	cmp	r2, r3
 8001f54:	dbf0      	blt.n	8001f38 <_read+0x12>
 8001f56:	687b      	ldr	r3, [r7, #4]
 8001f58:	4618      	mov	r0, r3
 8001f5a:	3718      	adds	r7, #24
 8001f5c:	46bd      	mov	sp, r7
 8001f5e:	bd80      	pop	{r7, pc}

08001f60 <_write>:
 8001f60:	b580      	push	{r7, lr}
 8001f62:	b086      	sub	sp, #24
 8001f64:	af00      	add	r7, sp, #0
 8001f66:	60f8      	str	r0, [r7, #12]
 8001f68:	60b9      	str	r1, [r7, #8]
 8001f6a:	607a      	str	r2, [r7, #4]
 8001f6c:	2300      	movs	r3, #0
 8001f6e:	617b      	str	r3, [r7, #20]
 8001f70:	e009      	b.n	8001f86 <_write+0x26>
 8001f72:	68bb      	ldr	r3, [r7, #8]
 8001f74:	1c5a      	adds	r2, r3, #1
 8001f76:	60ba      	str	r2, [r7, #8]
 8001f78:	781b      	ldrb	r3, [r3, #0]
 8001f7a:	4618      	mov	r0, r3
 8001f7c:	f3af 8000 	nop.w
 8001f80:	697b      	ldr	r3, [r7, #20]
 8001f82:	3301      	adds	r3, #1
 8001f84:	617b      	str	r3, [r7, #20]
 8001f86:	697a      	ldr	r2, [r7, #20]
 8001f88:	687b      	ldr	r3, [r7, #4]
 8001f8a:	429a      	cmp	r2, r3
 8001f8c:	dbf1      	blt.n	8001f72 <_write+0x12>
 8001f8e:	687b      	ldr	r3, [r7, #4]
 8001f90:	4618      	mov	r0, r3
 8001f92:	3718      	adds	r7, #24
 8001f94:	46bd      	mov	sp, r7
 8001f96:	bd80      	pop	{r7, pc}

08001f98 <_close>:
=======
  }

}
<<<<<<< HEAD
 8001c0c:	bf00      	nop
 8001c0e:	3728      	adds	r7, #40	@ 0x28
 8001c10:	46bd      	mov	sp, r7
 8001c12:	bd80      	pop	{r7, pc}
 8001c14:	40012000 	.word	0x40012000
 8001c18:	40023800 	.word	0x40023800
 8001c1c:	40020000 	.word	0x40020000
 8001c20:	20000238 	.word	0x20000238
 8001c24:	40026410 	.word	0x40026410

08001c28 <HAL_TIM_Base_MspInit>:
=======
 8001d20:	bf00      	nop
 8001d22:	3728      	adds	r7, #40	@ 0x28
 8001d24:	46bd      	mov	sp, r7
 8001d26:	bd80      	pop	{r7, pc}
 8001d28:	40012000 	.word	0x40012000
 8001d2c:	40023800 	.word	0x40023800
 8001d30:	40020000 	.word	0x40020000
 8001d34:	20000238 	.word	0x20000238
 8001d38:	40026410 	.word	0x40026410

08001d3c <HAL_TIM_Base_MspInit>:
>>>>>>> 39e4d10438a821cc799a472af87a77c6796a1676
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
<<<<<<< HEAD
 8001c28:	b580      	push	{r7, lr}
 8001c2a:	b086      	sub	sp, #24
 8001c2c:	af00      	add	r7, sp, #0
 8001c2e:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM8)
 8001c30:	687b      	ldr	r3, [r7, #4]
 8001c32:	681b      	ldr	r3, [r3, #0]
 8001c34:	4a2a      	ldr	r2, [pc, #168]	@ (8001ce0 <HAL_TIM_Base_MspInit+0xb8>)
 8001c36:	4293      	cmp	r3, r2
 8001c38:	d11e      	bne.n	8001c78 <HAL_TIM_Base_MspInit+0x50>
=======
 8001d3c:	b580      	push	{r7, lr}
 8001d3e:	b086      	sub	sp, #24
 8001d40:	af00      	add	r7, sp, #0
 8001d42:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM8)
 8001d44:	687b      	ldr	r3, [r7, #4]
 8001d46:	681b      	ldr	r3, [r3, #0]
 8001d48:	4a2a      	ldr	r2, [pc, #168]	@ (8001df4 <HAL_TIM_Base_MspInit+0xb8>)
 8001d4a:	4293      	cmp	r3, r2
 8001d4c:	d11e      	bne.n	8001d8c <HAL_TIM_Base_MspInit+0x50>
>>>>>>> 39e4d10438a821cc799a472af87a77c6796a1676
  {
  /* USER CODE BEGIN TIM8_MspInit 0 */

  /* USER CODE END TIM8_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM8_CLK_ENABLE();
<<<<<<< HEAD
 8001c3a:	2300      	movs	r3, #0
 8001c3c:	617b      	str	r3, [r7, #20]
 8001c3e:	4b29      	ldr	r3, [pc, #164]	@ (8001ce4 <HAL_TIM_Base_MspInit+0xbc>)
 8001c40:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001c42:	4a28      	ldr	r2, [pc, #160]	@ (8001ce4 <HAL_TIM_Base_MspInit+0xbc>)
 8001c44:	f043 0302 	orr.w	r3, r3, #2
 8001c48:	6453      	str	r3, [r2, #68]	@ 0x44
 8001c4a:	4b26      	ldr	r3, [pc, #152]	@ (8001ce4 <HAL_TIM_Base_MspInit+0xbc>)
 8001c4c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001c4e:	f003 0302 	and.w	r3, r3, #2
 8001c52:	617b      	str	r3, [r7, #20]
 8001c54:	697b      	ldr	r3, [r7, #20]
    /* TIM8 interrupt Init */
    HAL_NVIC_SetPriority(TIM8_UP_TIM13_IRQn, 0, 0);
 8001c56:	2200      	movs	r2, #0
 8001c58:	2100      	movs	r1, #0
 8001c5a:	202c      	movs	r0, #44	@ 0x2c
 8001c5c:	f000 ff9b 	bl	8002b96 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM8_UP_TIM13_IRQn);
 8001c60:	202c      	movs	r0, #44	@ 0x2c
 8001c62:	f000 ffb4 	bl	8002bce <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(TIM8_CC_IRQn, 0, 0);
 8001c66:	2200      	movs	r2, #0
 8001c68:	2100      	movs	r1, #0
 8001c6a:	202e      	movs	r0, #46	@ 0x2e
 8001c6c:	f000 ff93 	bl	8002b96 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM8_CC_IRQn);
 8001c70:	202e      	movs	r0, #46	@ 0x2e
 8001c72:	f000 ffac 	bl	8002bce <HAL_NVIC_EnableIRQ>
=======
 8001d4e:	2300      	movs	r3, #0
 8001d50:	617b      	str	r3, [r7, #20]
 8001d52:	4b29      	ldr	r3, [pc, #164]	@ (8001df8 <HAL_TIM_Base_MspInit+0xbc>)
 8001d54:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001d56:	4a28      	ldr	r2, [pc, #160]	@ (8001df8 <HAL_TIM_Base_MspInit+0xbc>)
 8001d58:	f043 0302 	orr.w	r3, r3, #2
 8001d5c:	6453      	str	r3, [r2, #68]	@ 0x44
 8001d5e:	4b26      	ldr	r3, [pc, #152]	@ (8001df8 <HAL_TIM_Base_MspInit+0xbc>)
 8001d60:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001d62:	f003 0302 	and.w	r3, r3, #2
 8001d66:	617b      	str	r3, [r7, #20]
 8001d68:	697b      	ldr	r3, [r7, #20]
    /* TIM8 interrupt Init */
    HAL_NVIC_SetPriority(TIM8_UP_TIM13_IRQn, 0, 0);
 8001d6a:	2200      	movs	r2, #0
 8001d6c:	2100      	movs	r1, #0
 8001d6e:	202c      	movs	r0, #44	@ 0x2c
 8001d70:	f000 ff9b 	bl	8002caa <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM8_UP_TIM13_IRQn);
 8001d74:	202c      	movs	r0, #44	@ 0x2c
 8001d76:	f000 ffb4 	bl	8002ce2 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(TIM8_CC_IRQn, 0, 0);
 8001d7a:	2200      	movs	r2, #0
 8001d7c:	2100      	movs	r1, #0
 8001d7e:	202e      	movs	r0, #46	@ 0x2e
 8001d80:	f000 ff93 	bl	8002caa <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM8_CC_IRQn);
 8001d84:	202e      	movs	r0, #46	@ 0x2e
 8001d86:	f000 ffac 	bl	8002ce2 <HAL_NVIC_EnableIRQ>
>>>>>>> 39e4d10438a821cc799a472af87a77c6796a1676
  /* USER CODE BEGIN TIM11_MspInit 1 */

  /* USER CODE END TIM11_MspInit 1 */
  }

}
<<<<<<< HEAD
 8001c76:	e02e      	b.n	8001cd6 <HAL_TIM_Base_MspInit+0xae>
  else if(htim_base->Instance==TIM10)
 8001c78:	687b      	ldr	r3, [r7, #4]
 8001c7a:	681b      	ldr	r3, [r3, #0]
 8001c7c:	4a1a      	ldr	r2, [pc, #104]	@ (8001ce8 <HAL_TIM_Base_MspInit+0xc0>)
 8001c7e:	4293      	cmp	r3, r2
 8001c80:	d116      	bne.n	8001cb0 <HAL_TIM_Base_MspInit+0x88>
    __HAL_RCC_TIM10_CLK_ENABLE();
 8001c82:	2300      	movs	r3, #0
 8001c84:	613b      	str	r3, [r7, #16]
 8001c86:	4b17      	ldr	r3, [pc, #92]	@ (8001ce4 <HAL_TIM_Base_MspInit+0xbc>)
 8001c88:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001c8a:	4a16      	ldr	r2, [pc, #88]	@ (8001ce4 <HAL_TIM_Base_MspInit+0xbc>)
 8001c8c:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8001c90:	6453      	str	r3, [r2, #68]	@ 0x44
 8001c92:	4b14      	ldr	r3, [pc, #80]	@ (8001ce4 <HAL_TIM_Base_MspInit+0xbc>)
 8001c94:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001c96:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001c9a:	613b      	str	r3, [r7, #16]
 8001c9c:	693b      	ldr	r3, [r7, #16]
    HAL_NVIC_SetPriority(TIM1_UP_TIM10_IRQn, 0, 0);
 8001c9e:	2200      	movs	r2, #0
 8001ca0:	2100      	movs	r1, #0
 8001ca2:	2019      	movs	r0, #25
 8001ca4:	f000 ff77 	bl	8002b96 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_UP_TIM10_IRQn);
 8001ca8:	2019      	movs	r0, #25
 8001caa:	f000 ff90 	bl	8002bce <HAL_NVIC_EnableIRQ>
}
 8001cae:	e012      	b.n	8001cd6 <HAL_TIM_Base_MspInit+0xae>
  else if(htim_base->Instance==TIM11)
 8001cb0:	687b      	ldr	r3, [r7, #4]
 8001cb2:	681b      	ldr	r3, [r3, #0]
 8001cb4:	4a0d      	ldr	r2, [pc, #52]	@ (8001cec <HAL_TIM_Base_MspInit+0xc4>)
 8001cb6:	4293      	cmp	r3, r2
 8001cb8:	d10d      	bne.n	8001cd6 <HAL_TIM_Base_MspInit+0xae>
    __HAL_RCC_TIM11_CLK_ENABLE();
 8001cba:	2300      	movs	r3, #0
 8001cbc:	60fb      	str	r3, [r7, #12]
 8001cbe:	4b09      	ldr	r3, [pc, #36]	@ (8001ce4 <HAL_TIM_Base_MspInit+0xbc>)
 8001cc0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001cc2:	4a08      	ldr	r2, [pc, #32]	@ (8001ce4 <HAL_TIM_Base_MspInit+0xbc>)
 8001cc4:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8001cc8:	6453      	str	r3, [r2, #68]	@ 0x44
 8001cca:	4b06      	ldr	r3, [pc, #24]	@ (8001ce4 <HAL_TIM_Base_MspInit+0xbc>)
 8001ccc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001cce:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8001cd2:	60fb      	str	r3, [r7, #12]
 8001cd4:	68fb      	ldr	r3, [r7, #12]
}
 8001cd6:	bf00      	nop
 8001cd8:	3718      	adds	r7, #24
 8001cda:	46bd      	mov	sp, r7
 8001cdc:	bd80      	pop	{r7, pc}
 8001cde:	bf00      	nop
 8001ce0:	40010400 	.word	0x40010400
 8001ce4:	40023800 	.word	0x40023800
 8001ce8:	40014400 	.word	0x40014400
 8001cec:	40014800 	.word	0x40014800

08001cf0 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8001cf0:	b580      	push	{r7, lr}
 8001cf2:	b088      	sub	sp, #32
 8001cf4:	af00      	add	r7, sp, #0
 8001cf6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001cf8:	f107 030c 	add.w	r3, r7, #12
 8001cfc:	2200      	movs	r2, #0
 8001cfe:	601a      	str	r2, [r3, #0]
 8001d00:	605a      	str	r2, [r3, #4]
 8001d02:	609a      	str	r2, [r3, #8]
 8001d04:	60da      	str	r2, [r3, #12]
 8001d06:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM8)
 8001d08:	687b      	ldr	r3, [r7, #4]
 8001d0a:	681b      	ldr	r3, [r3, #0]
 8001d0c:	4a12      	ldr	r2, [pc, #72]	@ (8001d58 <HAL_TIM_MspPostInit+0x68>)
 8001d0e:	4293      	cmp	r3, r2
 8001d10:	d11d      	bne.n	8001d4e <HAL_TIM_MspPostInit+0x5e>
=======
 8001d8a:	e02e      	b.n	8001dea <HAL_TIM_Base_MspInit+0xae>
  else if(htim_base->Instance==TIM10)
 8001d8c:	687b      	ldr	r3, [r7, #4]
 8001d8e:	681b      	ldr	r3, [r3, #0]
 8001d90:	4a1a      	ldr	r2, [pc, #104]	@ (8001dfc <HAL_TIM_Base_MspInit+0xc0>)
 8001d92:	4293      	cmp	r3, r2
 8001d94:	d116      	bne.n	8001dc4 <HAL_TIM_Base_MspInit+0x88>
    __HAL_RCC_TIM10_CLK_ENABLE();
 8001d96:	2300      	movs	r3, #0
 8001d98:	613b      	str	r3, [r7, #16]
 8001d9a:	4b17      	ldr	r3, [pc, #92]	@ (8001df8 <HAL_TIM_Base_MspInit+0xbc>)
 8001d9c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001d9e:	4a16      	ldr	r2, [pc, #88]	@ (8001df8 <HAL_TIM_Base_MspInit+0xbc>)
 8001da0:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8001da4:	6453      	str	r3, [r2, #68]	@ 0x44
 8001da6:	4b14      	ldr	r3, [pc, #80]	@ (8001df8 <HAL_TIM_Base_MspInit+0xbc>)
 8001da8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001daa:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001dae:	613b      	str	r3, [r7, #16]
 8001db0:	693b      	ldr	r3, [r7, #16]
    HAL_NVIC_SetPriority(TIM1_UP_TIM10_IRQn, 0, 0);
 8001db2:	2200      	movs	r2, #0
 8001db4:	2100      	movs	r1, #0
 8001db6:	2019      	movs	r0, #25
 8001db8:	f000 ff77 	bl	8002caa <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_UP_TIM10_IRQn);
 8001dbc:	2019      	movs	r0, #25
 8001dbe:	f000 ff90 	bl	8002ce2 <HAL_NVIC_EnableIRQ>
}
 8001dc2:	e012      	b.n	8001dea <HAL_TIM_Base_MspInit+0xae>
  else if(htim_base->Instance==TIM11)
 8001dc4:	687b      	ldr	r3, [r7, #4]
 8001dc6:	681b      	ldr	r3, [r3, #0]
 8001dc8:	4a0d      	ldr	r2, [pc, #52]	@ (8001e00 <HAL_TIM_Base_MspInit+0xc4>)
 8001dca:	4293      	cmp	r3, r2
 8001dcc:	d10d      	bne.n	8001dea <HAL_TIM_Base_MspInit+0xae>
    __HAL_RCC_TIM11_CLK_ENABLE();
 8001dce:	2300      	movs	r3, #0
 8001dd0:	60fb      	str	r3, [r7, #12]
 8001dd2:	4b09      	ldr	r3, [pc, #36]	@ (8001df8 <HAL_TIM_Base_MspInit+0xbc>)
 8001dd4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001dd6:	4a08      	ldr	r2, [pc, #32]	@ (8001df8 <HAL_TIM_Base_MspInit+0xbc>)
 8001dd8:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8001ddc:	6453      	str	r3, [r2, #68]	@ 0x44
 8001dde:	4b06      	ldr	r3, [pc, #24]	@ (8001df8 <HAL_TIM_Base_MspInit+0xbc>)
 8001de0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001de2:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8001de6:	60fb      	str	r3, [r7, #12]
 8001de8:	68fb      	ldr	r3, [r7, #12]
}
 8001dea:	bf00      	nop
 8001dec:	3718      	adds	r7, #24
 8001dee:	46bd      	mov	sp, r7
 8001df0:	bd80      	pop	{r7, pc}
 8001df2:	bf00      	nop
 8001df4:	40010400 	.word	0x40010400
 8001df8:	40023800 	.word	0x40023800
 8001dfc:	40014400 	.word	0x40014400
 8001e00:	40014800 	.word	0x40014800

08001e04 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8001e04:	b580      	push	{r7, lr}
 8001e06:	b088      	sub	sp, #32
 8001e08:	af00      	add	r7, sp, #0
 8001e0a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001e0c:	f107 030c 	add.w	r3, r7, #12
 8001e10:	2200      	movs	r2, #0
 8001e12:	601a      	str	r2, [r3, #0]
 8001e14:	605a      	str	r2, [r3, #4]
 8001e16:	609a      	str	r2, [r3, #8]
 8001e18:	60da      	str	r2, [r3, #12]
 8001e1a:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM8)
 8001e1c:	687b      	ldr	r3, [r7, #4]
 8001e1e:	681b      	ldr	r3, [r3, #0]
 8001e20:	4a12      	ldr	r2, [pc, #72]	@ (8001e6c <HAL_TIM_MspPostInit+0x68>)
 8001e22:	4293      	cmp	r3, r2
 8001e24:	d11d      	bne.n	8001e62 <HAL_TIM_MspPostInit+0x5e>
>>>>>>> 39e4d10438a821cc799a472af87a77c6796a1676
  {
  /* USER CODE BEGIN TIM8_MspPostInit 0 */

  /* USER CODE END TIM8_MspPostInit 0 */

    __HAL_RCC_GPIOC_CLK_ENABLE();
<<<<<<< HEAD
 8001d12:	2300      	movs	r3, #0
 8001d14:	60bb      	str	r3, [r7, #8]
 8001d16:	4b11      	ldr	r3, [pc, #68]	@ (8001d5c <HAL_TIM_MspPostInit+0x6c>)
 8001d18:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001d1a:	4a10      	ldr	r2, [pc, #64]	@ (8001d5c <HAL_TIM_MspPostInit+0x6c>)
 8001d1c:	f043 0304 	orr.w	r3, r3, #4
 8001d20:	6313      	str	r3, [r2, #48]	@ 0x30
 8001d22:	4b0e      	ldr	r3, [pc, #56]	@ (8001d5c <HAL_TIM_MspPostInit+0x6c>)
 8001d24:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001d26:	f003 0304 	and.w	r3, r3, #4
 8001d2a:	60bb      	str	r3, [r7, #8]
 8001d2c:	68bb      	ldr	r3, [r7, #8]
=======
 8001e26:	2300      	movs	r3, #0
 8001e28:	60bb      	str	r3, [r7, #8]
 8001e2a:	4b11      	ldr	r3, [pc, #68]	@ (8001e70 <HAL_TIM_MspPostInit+0x6c>)
 8001e2c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001e2e:	4a10      	ldr	r2, [pc, #64]	@ (8001e70 <HAL_TIM_MspPostInit+0x6c>)
 8001e30:	f043 0304 	orr.w	r3, r3, #4
 8001e34:	6313      	str	r3, [r2, #48]	@ 0x30
 8001e36:	4b0e      	ldr	r3, [pc, #56]	@ (8001e70 <HAL_TIM_MspPostInit+0x6c>)
 8001e38:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001e3a:	f003 0304 	and.w	r3, r3, #4
 8001e3e:	60bb      	str	r3, [r7, #8]
 8001e40:	68bb      	ldr	r3, [r7, #8]
>>>>>>> 39e4d10438a821cc799a472af87a77c6796a1676
    /**TIM8 GPIO Configuration
    PC6     ------> TIM8_CH1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6;
<<<<<<< HEAD
 8001d2e:	2340      	movs	r3, #64	@ 0x40
 8001d30:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001d32:	2302      	movs	r3, #2
 8001d34:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001d36:	2300      	movs	r3, #0
 8001d38:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001d3a:	2300      	movs	r3, #0
 8001d3c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF3_TIM8;
 8001d3e:	2303      	movs	r3, #3
 8001d40:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001d42:	f107 030c 	add.w	r3, r7, #12
 8001d46:	4619      	mov	r1, r3
 8001d48:	4805      	ldr	r0, [pc, #20]	@ (8001d60 <HAL_TIM_MspPostInit+0x70>)
 8001d4a:	f001 fb5d 	bl	8003408 <HAL_GPIO_Init>
=======
 8001e42:	2340      	movs	r3, #64	@ 0x40
 8001e44:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001e46:	2302      	movs	r3, #2
 8001e48:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001e4a:	2300      	movs	r3, #0
 8001e4c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001e4e:	2300      	movs	r3, #0
 8001e50:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF3_TIM8;
 8001e52:	2303      	movs	r3, #3
 8001e54:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001e56:	f107 030c 	add.w	r3, r7, #12
 8001e5a:	4619      	mov	r1, r3
 8001e5c:	4805      	ldr	r0, [pc, #20]	@ (8001e74 <HAL_TIM_MspPostInit+0x70>)
 8001e5e:	f001 fb5d 	bl	800351c <HAL_GPIO_Init>
>>>>>>> 39e4d10438a821cc799a472af87a77c6796a1676
  /* USER CODE BEGIN TIM8_MspPostInit 1 */

  /* USER CODE END TIM8_MspPostInit 1 */
  }

}
<<<<<<< HEAD
 8001d4e:	bf00      	nop
 8001d50:	3720      	adds	r7, #32
 8001d52:	46bd      	mov	sp, r7
 8001d54:	bd80      	pop	{r7, pc}
 8001d56:	bf00      	nop
 8001d58:	40010400 	.word	0x40010400
 8001d5c:	40023800 	.word	0x40023800
 8001d60:	40020800 	.word	0x40020800

08001d64 <HAL_UART_MspInit>:
=======
 8001e62:	bf00      	nop
 8001e64:	3720      	adds	r7, #32
 8001e66:	46bd      	mov	sp, r7
 8001e68:	bd80      	pop	{r7, pc}
 8001e6a:	bf00      	nop
 8001e6c:	40010400 	.word	0x40010400
 8001e70:	40023800 	.word	0x40023800
 8001e74:	40020800 	.word	0x40020800

08001e78 <HAL_UART_MspInit>:
>>>>>>> 39e4d10438a821cc799a472af87a77c6796a1676
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
<<<<<<< HEAD
 8001d64:	b580      	push	{r7, lr}
 8001d66:	b08a      	sub	sp, #40	@ 0x28
 8001d68:	af00      	add	r7, sp, #0
 8001d6a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001d6c:	f107 0314 	add.w	r3, r7, #20
 8001d70:	2200      	movs	r2, #0
 8001d72:	601a      	str	r2, [r3, #0]
 8001d74:	605a      	str	r2, [r3, #4]
 8001d76:	609a      	str	r2, [r3, #8]
 8001d78:	60da      	str	r2, [r3, #12]
 8001d7a:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 8001d7c:	687b      	ldr	r3, [r7, #4]
 8001d7e:	681b      	ldr	r3, [r3, #0]
 8001d80:	4a1d      	ldr	r2, [pc, #116]	@ (8001df8 <HAL_UART_MspInit+0x94>)
 8001d82:	4293      	cmp	r3, r2
 8001d84:	d133      	bne.n	8001dee <HAL_UART_MspInit+0x8a>
=======
 8001e78:	b580      	push	{r7, lr}
 8001e7a:	b08a      	sub	sp, #40	@ 0x28
 8001e7c:	af00      	add	r7, sp, #0
 8001e7e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001e80:	f107 0314 	add.w	r3, r7, #20
 8001e84:	2200      	movs	r2, #0
 8001e86:	601a      	str	r2, [r3, #0]
 8001e88:	605a      	str	r2, [r3, #4]
 8001e8a:	609a      	str	r2, [r3, #8]
 8001e8c:	60da      	str	r2, [r3, #12]
 8001e8e:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 8001e90:	687b      	ldr	r3, [r7, #4]
 8001e92:	681b      	ldr	r3, [r3, #0]
 8001e94:	4a1d      	ldr	r2, [pc, #116]	@ (8001f0c <HAL_UART_MspInit+0x94>)
 8001e96:	4293      	cmp	r3, r2
 8001e98:	d133      	bne.n	8001f02 <HAL_UART_MspInit+0x8a>
>>>>>>> 39e4d10438a821cc799a472af87a77c6796a1676
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
<<<<<<< HEAD
 8001d86:	2300      	movs	r3, #0
 8001d88:	613b      	str	r3, [r7, #16]
 8001d8a:	4b1c      	ldr	r3, [pc, #112]	@ (8001dfc <HAL_UART_MspInit+0x98>)
 8001d8c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001d8e:	4a1b      	ldr	r2, [pc, #108]	@ (8001dfc <HAL_UART_MspInit+0x98>)
 8001d90:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8001d94:	6413      	str	r3, [r2, #64]	@ 0x40
 8001d96:	4b19      	ldr	r3, [pc, #100]	@ (8001dfc <HAL_UART_MspInit+0x98>)
 8001d98:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001d9a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001d9e:	613b      	str	r3, [r7, #16]
 8001da0:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001da2:	2300      	movs	r3, #0
 8001da4:	60fb      	str	r3, [r7, #12]
 8001da6:	4b15      	ldr	r3, [pc, #84]	@ (8001dfc <HAL_UART_MspInit+0x98>)
 8001da8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001daa:	4a14      	ldr	r2, [pc, #80]	@ (8001dfc <HAL_UART_MspInit+0x98>)
 8001dac:	f043 0301 	orr.w	r3, r3, #1
 8001db0:	6313      	str	r3, [r2, #48]	@ 0x30
 8001db2:	4b12      	ldr	r3, [pc, #72]	@ (8001dfc <HAL_UART_MspInit+0x98>)
 8001db4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001db6:	f003 0301 	and.w	r3, r3, #1
 8001dba:	60fb      	str	r3, [r7, #12]
 8001dbc:	68fb      	ldr	r3, [r7, #12]
=======
 8001e9a:	2300      	movs	r3, #0
 8001e9c:	613b      	str	r3, [r7, #16]
 8001e9e:	4b1c      	ldr	r3, [pc, #112]	@ (8001f10 <HAL_UART_MspInit+0x98>)
 8001ea0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001ea2:	4a1b      	ldr	r2, [pc, #108]	@ (8001f10 <HAL_UART_MspInit+0x98>)
 8001ea4:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8001ea8:	6413      	str	r3, [r2, #64]	@ 0x40
 8001eaa:	4b19      	ldr	r3, [pc, #100]	@ (8001f10 <HAL_UART_MspInit+0x98>)
 8001eac:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001eae:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001eb2:	613b      	str	r3, [r7, #16]
 8001eb4:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001eb6:	2300      	movs	r3, #0
 8001eb8:	60fb      	str	r3, [r7, #12]
 8001eba:	4b15      	ldr	r3, [pc, #84]	@ (8001f10 <HAL_UART_MspInit+0x98>)
 8001ebc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001ebe:	4a14      	ldr	r2, [pc, #80]	@ (8001f10 <HAL_UART_MspInit+0x98>)
 8001ec0:	f043 0301 	orr.w	r3, r3, #1
 8001ec4:	6313      	str	r3, [r2, #48]	@ 0x30
 8001ec6:	4b12      	ldr	r3, [pc, #72]	@ (8001f10 <HAL_UART_MspInit+0x98>)
 8001ec8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001eca:	f003 0301 	and.w	r3, r3, #1
 8001ece:	60fb      	str	r3, [r7, #12]
 8001ed0:	68fb      	ldr	r3, [r7, #12]
>>>>>>> 39e4d10438a821cc799a472af87a77c6796a1676
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
<<<<<<< HEAD
 8001dbe:	230c      	movs	r3, #12
 8001dc0:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001dc2:	2302      	movs	r3, #2
 8001dc4:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001dc6:	2300      	movs	r3, #0
 8001dc8:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001dca:	2303      	movs	r3, #3
 8001dcc:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8001dce:	2307      	movs	r3, #7
 8001dd0:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001dd2:	f107 0314 	add.w	r3, r7, #20
 8001dd6:	4619      	mov	r1, r3
 8001dd8:	4809      	ldr	r0, [pc, #36]	@ (8001e00 <HAL_UART_MspInit+0x9c>)
 8001dda:	f001 fb15 	bl	8003408 <HAL_GPIO_Init>

    /* USART2 interrupt Init */
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 8001dde:	2200      	movs	r2, #0
 8001de0:	2100      	movs	r1, #0
 8001de2:	2026      	movs	r0, #38	@ 0x26
 8001de4:	f000 fed7 	bl	8002b96 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 8001de8:	2026      	movs	r0, #38	@ 0x26
 8001dea:	f000 fef0 	bl	8002bce <HAL_NVIC_EnableIRQ>
=======
 8001ed2:	230c      	movs	r3, #12
 8001ed4:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001ed6:	2302      	movs	r3, #2
 8001ed8:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001eda:	2300      	movs	r3, #0
 8001edc:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001ede:	2303      	movs	r3, #3
 8001ee0:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8001ee2:	2307      	movs	r3, #7
 8001ee4:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001ee6:	f107 0314 	add.w	r3, r7, #20
 8001eea:	4619      	mov	r1, r3
 8001eec:	4809      	ldr	r0, [pc, #36]	@ (8001f14 <HAL_UART_MspInit+0x9c>)
 8001eee:	f001 fb15 	bl	800351c <HAL_GPIO_Init>

    /* USART2 interrupt Init */
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 8001ef2:	2200      	movs	r2, #0
 8001ef4:	2100      	movs	r1, #0
 8001ef6:	2026      	movs	r0, #38	@ 0x26
 8001ef8:	f000 fed7 	bl	8002caa <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 8001efc:	2026      	movs	r0, #38	@ 0x26
 8001efe:	f000 fef0 	bl	8002ce2 <HAL_NVIC_EnableIRQ>
>>>>>>> 39e4d10438a821cc799a472af87a77c6796a1676

  /* USER CODE END USART2_MspInit 1 */

  }

}
<<<<<<< HEAD
 8001dee:	bf00      	nop
 8001df0:	3728      	adds	r7, #40	@ 0x28
 8001df2:	46bd      	mov	sp, r7
 8001df4:	bd80      	pop	{r7, pc}
 8001df6:	bf00      	nop
 8001df8:	40004400 	.word	0x40004400
 8001dfc:	40023800 	.word	0x40023800
 8001e00:	40020000 	.word	0x40020000

08001e04 <NMI_Handler>:
=======
 8001f02:	bf00      	nop
 8001f04:	3728      	adds	r7, #40	@ 0x28
 8001f06:	46bd      	mov	sp, r7
 8001f08:	bd80      	pop	{r7, pc}
 8001f0a:	bf00      	nop
 8001f0c:	40004400 	.word	0x40004400
 8001f10:	40023800 	.word	0x40023800
 8001f14:	40020000 	.word	0x40020000

08001f18 <NMI_Handler>:
>>>>>>> 39e4d10438a821cc799a472af87a77c6796a1676
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
<<<<<<< HEAD
 8001e04:	b480      	push	{r7}
 8001e06:	af00      	add	r7, sp, #0
=======
 8001f18:	b480      	push	{r7}
 8001f1a:	af00      	add	r7, sp, #0
>>>>>>> 39e4d10438a821cc799a472af87a77c6796a1676
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
<<<<<<< HEAD
 8001e08:	bf00      	nop
 8001e0a:	e7fd      	b.n	8001e08 <NMI_Handler+0x4>

08001e0c <HardFault_Handler>:
=======
 8001f1c:	bf00      	nop
 8001f1e:	e7fd      	b.n	8001f1c <NMI_Handler+0x4>

08001f20 <HardFault_Handler>:
>>>>>>> 39e4d10438a821cc799a472af87a77c6796a1676

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
<<<<<<< HEAD
 8001e0c:	b480      	push	{r7}
 8001e0e:	af00      	add	r7, sp, #0
=======
 8001f20:	b480      	push	{r7}
 8001f22:	af00      	add	r7, sp, #0
>>>>>>> 39e4d10438a821cc799a472af87a77c6796a1676
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
<<<<<<< HEAD
 8001e10:	bf00      	nop
 8001e12:	e7fd      	b.n	8001e10 <HardFault_Handler+0x4>

08001e14 <MemManage_Handler>:
=======
 8001f24:	bf00      	nop
 8001f26:	e7fd      	b.n	8001f24 <HardFault_Handler+0x4>

08001f28 <MemManage_Handler>:
>>>>>>> 39e4d10438a821cc799a472af87a77c6796a1676

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
<<<<<<< HEAD
 8001e14:	b480      	push	{r7}
 8001e16:	af00      	add	r7, sp, #0
=======
 8001f28:	b480      	push	{r7}
 8001f2a:	af00      	add	r7, sp, #0
>>>>>>> 39e4d10438a821cc799a472af87a77c6796a1676
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
<<<<<<< HEAD
 8001e18:	bf00      	nop
 8001e1a:	e7fd      	b.n	8001e18 <MemManage_Handler+0x4>

08001e1c <BusFault_Handler>:
=======
 8001f2c:	bf00      	nop
 8001f2e:	e7fd      	b.n	8001f2c <MemManage_Handler+0x4>

08001f30 <BusFault_Handler>:
>>>>>>> 39e4d10438a821cc799a472af87a77c6796a1676

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
<<<<<<< HEAD
 8001e1c:	b480      	push	{r7}
 8001e1e:	af00      	add	r7, sp, #0
=======
 8001f30:	b480      	push	{r7}
 8001f32:	af00      	add	r7, sp, #0
>>>>>>> 39e4d10438a821cc799a472af87a77c6796a1676
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
<<<<<<< HEAD
 8001e20:	bf00      	nop
 8001e22:	e7fd      	b.n	8001e20 <BusFault_Handler+0x4>

08001e24 <UsageFault_Handler>:
=======
 8001f34:	bf00      	nop
 8001f36:	e7fd      	b.n	8001f34 <BusFault_Handler+0x4>

08001f38 <UsageFault_Handler>:
>>>>>>> 39e4d10438a821cc799a472af87a77c6796a1676

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
<<<<<<< HEAD
 8001e24:	b480      	push	{r7}
 8001e26:	af00      	add	r7, sp, #0
=======
 8001f38:	b480      	push	{r7}
 8001f3a:	af00      	add	r7, sp, #0
>>>>>>> 39e4d10438a821cc799a472af87a77c6796a1676
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
<<<<<<< HEAD
 8001e28:	bf00      	nop
 8001e2a:	e7fd      	b.n	8001e28 <UsageFault_Handler+0x4>

08001e2c <SVC_Handler>:
=======
 8001f3c:	bf00      	nop
 8001f3e:	e7fd      	b.n	8001f3c <UsageFault_Handler+0x4>

08001f40 <SVC_Handler>:
>>>>>>> 39e4d10438a821cc799a472af87a77c6796a1676

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
<<<<<<< HEAD
 8001e2c:	b480      	push	{r7}
 8001e2e:	af00      	add	r7, sp, #0
=======
 8001f40:	b480      	push	{r7}
 8001f42:	af00      	add	r7, sp, #0
>>>>>>> 39e4d10438a821cc799a472af87a77c6796a1676

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
<<<<<<< HEAD
 8001e30:	bf00      	nop
 8001e32:	46bd      	mov	sp, r7
 8001e34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e38:	4770      	bx	lr

08001e3a <DebugMon_Handler>:
=======
 8001f44:	bf00      	nop
 8001f46:	46bd      	mov	sp, r7
 8001f48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f4c:	4770      	bx	lr

08001f4e <DebugMon_Handler>:
>>>>>>> 39e4d10438a821cc799a472af87a77c6796a1676

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
<<<<<<< HEAD
 8001e3a:	b480      	push	{r7}
 8001e3c:	af00      	add	r7, sp, #0
=======
 8001f4e:	b480      	push	{r7}
 8001f50:	af00      	add	r7, sp, #0
>>>>>>> 39e4d10438a821cc799a472af87a77c6796a1676

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
<<<<<<< HEAD
 8001e3e:	bf00      	nop
 8001e40:	46bd      	mov	sp, r7
 8001e42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e46:	4770      	bx	lr

08001e48 <PendSV_Handler>:
=======
 8001f52:	bf00      	nop
 8001f54:	46bd      	mov	sp, r7
 8001f56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f5a:	4770      	bx	lr

08001f5c <PendSV_Handler>:
>>>>>>> 39e4d10438a821cc799a472af87a77c6796a1676

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
<<<<<<< HEAD
 8001e48:	b480      	push	{r7}
 8001e4a:	af00      	add	r7, sp, #0
=======
 8001f5c:	b480      	push	{r7}
 8001f5e:	af00      	add	r7, sp, #0
>>>>>>> 39e4d10438a821cc799a472af87a77c6796a1676

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
<<<<<<< HEAD
 8001e4c:	bf00      	nop
 8001e4e:	46bd      	mov	sp, r7
 8001e50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e54:	4770      	bx	lr

08001e56 <SysTick_Handler>:
=======
 8001f60:	bf00      	nop
 8001f62:	46bd      	mov	sp, r7
 8001f64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f68:	4770      	bx	lr

08001f6a <SysTick_Handler>:
>>>>>>> 39e4d10438a821cc799a472af87a77c6796a1676

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
<<<<<<< HEAD
 8001e56:	b580      	push	{r7, lr}
 8001e58:	af00      	add	r7, sp, #0
=======
 8001f6a:	b580      	push	{r7, lr}
 8001f6c:	af00      	add	r7, sp, #0
>>>>>>> 39e4d10438a821cc799a472af87a77c6796a1676
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
<<<<<<< HEAD
 8001e5a:	f000 f989 	bl	8002170 <HAL_IncTick>
=======
 8001f6e:	f000 f989 	bl	8002284 <HAL_IncTick>
>>>>>>> 39e4d10438a821cc799a472af87a77c6796a1676
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
<<<<<<< HEAD
 8001e5e:	bf00      	nop
 8001e60:	bd80      	pop	{r7, pc}
	...

08001e64 <TIM1_UP_TIM10_IRQHandler>:
=======
 8001f72:	bf00      	nop
 8001f74:	bd80      	pop	{r7, pc}
	...

08001f78 <TIM1_UP_TIM10_IRQHandler>:
>>>>>>> 39e4d10438a821cc799a472af87a77c6796a1676

/**
  * @brief This function handles TIM1 update interrupt and TIM10 global interrupt.
  */
void TIM1_UP_TIM10_IRQHandler(void)
{
<<<<<<< HEAD
 8001e64:	b580      	push	{r7, lr}
 8001e66:	af00      	add	r7, sp, #0
=======
 8001f78:	b580      	push	{r7, lr}
 8001f7a:	af00      	add	r7, sp, #0
>>>>>>> 39e4d10438a821cc799a472af87a77c6796a1676
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 0 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 0 */
  HAL_TIM_IRQHandler(&htim10);
<<<<<<< HEAD
 8001e68:	4802      	ldr	r0, [pc, #8]	@ (8001e74 <TIM1_UP_TIM10_IRQHandler+0x10>)
 8001e6a:	f002 fd13 	bl	8004894 <HAL_TIM_IRQHandler>
=======
 8001f7c:	4802      	ldr	r0, [pc, #8]	@ (8001f88 <TIM1_UP_TIM10_IRQHandler+0x10>)
 8001f7e:	f002 fd13 	bl	80049a8 <HAL_TIM_IRQHandler>
>>>>>>> 39e4d10438a821cc799a472af87a77c6796a1676
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 1 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 1 */
}
<<<<<<< HEAD
 8001e6e:	bf00      	nop
 8001e70:	bd80      	pop	{r7, pc}
 8001e72:	bf00      	nop
 8001e74:	200002e0 	.word	0x200002e0

08001e78 <USART2_IRQHandler>:
=======
 8001f82:	bf00      	nop
 8001f84:	bd80      	pop	{r7, pc}
 8001f86:	bf00      	nop
 8001f88:	200002e0 	.word	0x200002e0

08001f8c <USART2_IRQHandler>:
>>>>>>> 39e4d10438a821cc799a472af87a77c6796a1676

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
<<<<<<< HEAD
 8001e78:	b580      	push	{r7, lr}
 8001e7a:	af00      	add	r7, sp, #0
=======
 8001f8c:	b580      	push	{r7, lr}
 8001f8e:	af00      	add	r7, sp, #0
>>>>>>> 39e4d10438a821cc799a472af87a77c6796a1676
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
<<<<<<< HEAD
 8001e7c:	4802      	ldr	r0, [pc, #8]	@ (8001e88 <USART2_IRQHandler+0x10>)
 8001e7e:	f003 fbef 	bl	8005660 <HAL_UART_IRQHandler>
=======
 8001f90:	4802      	ldr	r0, [pc, #8]	@ (8001f9c <USART2_IRQHandler+0x10>)
 8001f92:	f003 fbef 	bl	8005774 <HAL_UART_IRQHandler>
>>>>>>> 39e4d10438a821cc799a472af87a77c6796a1676
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
<<<<<<< HEAD
 8001e82:	bf00      	nop
 8001e84:	bd80      	pop	{r7, pc}
 8001e86:	bf00      	nop
 8001e88:	20000370 	.word	0x20000370

08001e8c <TIM8_UP_TIM13_IRQHandler>:
=======
 8001f96:	bf00      	nop
 8001f98:	bd80      	pop	{r7, pc}
 8001f9a:	bf00      	nop
 8001f9c:	20000370 	.word	0x20000370

08001fa0 <TIM8_UP_TIM13_IRQHandler>:
>>>>>>> 39e4d10438a821cc799a472af87a77c6796a1676

/**
  * @brief This function handles TIM8 update interrupt and TIM13 global interrupt.
  */
void TIM8_UP_TIM13_IRQHandler(void)
{
<<<<<<< HEAD
 8001e8c:	b580      	push	{r7, lr}
 8001e8e:	af00      	add	r7, sp, #0
=======
 8001fa0:	b580      	push	{r7, lr}
 8001fa2:	af00      	add	r7, sp, #0
>>>>>>> 39e4d10438a821cc799a472af87a77c6796a1676
  /* USER CODE BEGIN TIM8_UP_TIM13_IRQn 0 */

  /* USER CODE END TIM8_UP_TIM13_IRQn 0 */
  HAL_TIM_IRQHandler(&htim8);
<<<<<<< HEAD
 8001e90:	4802      	ldr	r0, [pc, #8]	@ (8001e9c <TIM8_UP_TIM13_IRQHandler+0x10>)
 8001e92:	f002 fcff 	bl	8004894 <HAL_TIM_IRQHandler>
=======
 8001fa4:	4802      	ldr	r0, [pc, #8]	@ (8001fb0 <TIM8_UP_TIM13_IRQHandler+0x10>)
 8001fa6:	f002 fcff 	bl	80049a8 <HAL_TIM_IRQHandler>
>>>>>>> 39e4d10438a821cc799a472af87a77c6796a1676
  /* USER CODE BEGIN TIM8_UP_TIM13_IRQn 1 */

  /* USER CODE END TIM8_UP_TIM13_IRQn 1 */
}
<<<<<<< HEAD
 8001e96:	bf00      	nop
 8001e98:	bd80      	pop	{r7, pc}
 8001e9a:	bf00      	nop
 8001e9c:	20000298 	.word	0x20000298

08001ea0 <TIM8_CC_IRQHandler>:
=======
 8001faa:	bf00      	nop
 8001fac:	bd80      	pop	{r7, pc}
 8001fae:	bf00      	nop
 8001fb0:	20000298 	.word	0x20000298

08001fb4 <TIM8_CC_IRQHandler>:
>>>>>>> 39e4d10438a821cc799a472af87a77c6796a1676

/**
  * @brief This function handles TIM8 capture compare interrupt.
  */
void TIM8_CC_IRQHandler(void)
{
<<<<<<< HEAD
 8001ea0:	b580      	push	{r7, lr}
 8001ea2:	af00      	add	r7, sp, #0
=======
 8001fb4:	b580      	push	{r7, lr}
 8001fb6:	af00      	add	r7, sp, #0
>>>>>>> 39e4d10438a821cc799a472af87a77c6796a1676
  /* USER CODE BEGIN TIM8_CC_IRQn 0 */

  /* USER CODE END TIM8_CC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim8);
<<<<<<< HEAD
 8001ea4:	4802      	ldr	r0, [pc, #8]	@ (8001eb0 <TIM8_CC_IRQHandler+0x10>)
 8001ea6:	f002 fcf5 	bl	8004894 <HAL_TIM_IRQHandler>
=======
 8001fb8:	4802      	ldr	r0, [pc, #8]	@ (8001fc4 <TIM8_CC_IRQHandler+0x10>)
 8001fba:	f002 fcf5 	bl	80049a8 <HAL_TIM_IRQHandler>
>>>>>>> 39e4d10438a821cc799a472af87a77c6796a1676
  /* USER CODE BEGIN TIM8_CC_IRQn 1 */

  /* USER CODE END TIM8_CC_IRQn 1 */
}
<<<<<<< HEAD
 8001eaa:	bf00      	nop
 8001eac:	bd80      	pop	{r7, pc}
 8001eae:	bf00      	nop
 8001eb0:	20000298 	.word	0x20000298

08001eb4 <DMA2_Stream0_IRQHandler>:
=======
 8001fbe:	bf00      	nop
 8001fc0:	bd80      	pop	{r7, pc}
 8001fc2:	bf00      	nop
 8001fc4:	20000298 	.word	0x20000298

08001fc8 <DMA2_Stream0_IRQHandler>:
>>>>>>> 39e4d10438a821cc799a472af87a77c6796a1676

/**
  * @brief This function handles DMA2 stream0 global interrupt.
  */
void DMA2_Stream0_IRQHandler(void)
{
<<<<<<< HEAD
 8001eb4:	b580      	push	{r7, lr}
 8001eb6:	af00      	add	r7, sp, #0
=======
 8001fc8:	b580      	push	{r7, lr}
 8001fca:	af00      	add	r7, sp, #0
>>>>>>> 39e4d10438a821cc799a472af87a77c6796a1676
  /* USER CODE BEGIN DMA2_Stream0_IRQn 0 */

  /* USER CODE END DMA2_Stream0_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
<<<<<<< HEAD
 8001eb8:	4802      	ldr	r0, [pc, #8]	@ (8001ec4 <DMA2_Stream0_IRQHandler+0x10>)
 8001eba:	f001 f83b 	bl	8002f34 <HAL_DMA_IRQHandler>
=======
 8001fcc:	4802      	ldr	r0, [pc, #8]	@ (8001fd8 <DMA2_Stream0_IRQHandler+0x10>)
 8001fce:	f001 f83b 	bl	8003048 <HAL_DMA_IRQHandler>
>>>>>>> 39e4d10438a821cc799a472af87a77c6796a1676
  /* USER CODE BEGIN DMA2_Stream0_IRQn 1 */

  /* USER CODE END DMA2_Stream0_IRQn 1 */
}
<<<<<<< HEAD
 8001ebe:	bf00      	nop
 8001ec0:	bd80      	pop	{r7, pc}
 8001ec2:	bf00      	nop
 8001ec4:	20000238 	.word	0x20000238

08001ec8 <_getpid>:
 8001ec8:	b480      	push	{r7}
 8001eca:	af00      	add	r7, sp, #0
 8001ecc:	2301      	movs	r3, #1
 8001ece:	4618      	mov	r0, r3
 8001ed0:	46bd      	mov	sp, r7
 8001ed2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ed6:	4770      	bx	lr

08001ed8 <_kill>:
 8001ed8:	b580      	push	{r7, lr}
 8001eda:	b082      	sub	sp, #8
 8001edc:	af00      	add	r7, sp, #0
 8001ede:	6078      	str	r0, [r7, #4]
 8001ee0:	6039      	str	r1, [r7, #0]
 8001ee2:	f005 f8b1 	bl	8007048 <__errno>
 8001ee6:	4603      	mov	r3, r0
 8001ee8:	2216      	movs	r2, #22
 8001eea:	601a      	str	r2, [r3, #0]
 8001eec:	f04f 33ff 	mov.w	r3, #4294967295
 8001ef0:	4618      	mov	r0, r3
 8001ef2:	3708      	adds	r7, #8
 8001ef4:	46bd      	mov	sp, r7
 8001ef6:	bd80      	pop	{r7, pc}

08001ef8 <_exit>:
 8001ef8:	b580      	push	{r7, lr}
 8001efa:	b082      	sub	sp, #8
 8001efc:	af00      	add	r7, sp, #0
 8001efe:	6078      	str	r0, [r7, #4]
 8001f00:	f04f 31ff 	mov.w	r1, #4294967295
 8001f04:	6878      	ldr	r0, [r7, #4]
 8001f06:	f7ff ffe7 	bl	8001ed8 <_kill>
 8001f0a:	bf00      	nop
 8001f0c:	e7fd      	b.n	8001f0a <_exit+0x12>

08001f0e <_read>:
 8001f0e:	b580      	push	{r7, lr}
 8001f10:	b086      	sub	sp, #24
 8001f12:	af00      	add	r7, sp, #0
 8001f14:	60f8      	str	r0, [r7, #12]
 8001f16:	60b9      	str	r1, [r7, #8]
 8001f18:	607a      	str	r2, [r7, #4]
 8001f1a:	2300      	movs	r3, #0
 8001f1c:	617b      	str	r3, [r7, #20]
 8001f1e:	e00a      	b.n	8001f36 <_read+0x28>
 8001f20:	f3af 8000 	nop.w
 8001f24:	4601      	mov	r1, r0
 8001f26:	68bb      	ldr	r3, [r7, #8]
 8001f28:	1c5a      	adds	r2, r3, #1
 8001f2a:	60ba      	str	r2, [r7, #8]
 8001f2c:	b2ca      	uxtb	r2, r1
 8001f2e:	701a      	strb	r2, [r3, #0]
 8001f30:	697b      	ldr	r3, [r7, #20]
 8001f32:	3301      	adds	r3, #1
 8001f34:	617b      	str	r3, [r7, #20]
 8001f36:	697a      	ldr	r2, [r7, #20]
 8001f38:	687b      	ldr	r3, [r7, #4]
 8001f3a:	429a      	cmp	r2, r3
 8001f3c:	dbf0      	blt.n	8001f20 <_read+0x12>
 8001f3e:	687b      	ldr	r3, [r7, #4]
 8001f40:	4618      	mov	r0, r3
 8001f42:	3718      	adds	r7, #24
 8001f44:	46bd      	mov	sp, r7
 8001f46:	bd80      	pop	{r7, pc}

08001f48 <_write>:
 8001f48:	b580      	push	{r7, lr}
 8001f4a:	b086      	sub	sp, #24
 8001f4c:	af00      	add	r7, sp, #0
 8001f4e:	60f8      	str	r0, [r7, #12]
 8001f50:	60b9      	str	r1, [r7, #8]
 8001f52:	607a      	str	r2, [r7, #4]
 8001f54:	2300      	movs	r3, #0
 8001f56:	617b      	str	r3, [r7, #20]
 8001f58:	e009      	b.n	8001f6e <_write+0x26>
 8001f5a:	68bb      	ldr	r3, [r7, #8]
 8001f5c:	1c5a      	adds	r2, r3, #1
 8001f5e:	60ba      	str	r2, [r7, #8]
 8001f60:	781b      	ldrb	r3, [r3, #0]
 8001f62:	4618      	mov	r0, r3
 8001f64:	f3af 8000 	nop.w
 8001f68:	697b      	ldr	r3, [r7, #20]
 8001f6a:	3301      	adds	r3, #1
 8001f6c:	617b      	str	r3, [r7, #20]
 8001f6e:	697a      	ldr	r2, [r7, #20]
 8001f70:	687b      	ldr	r3, [r7, #4]
 8001f72:	429a      	cmp	r2, r3
 8001f74:	dbf1      	blt.n	8001f5a <_write+0x12>
 8001f76:	687b      	ldr	r3, [r7, #4]
 8001f78:	4618      	mov	r0, r3
 8001f7a:	3718      	adds	r7, #24
 8001f7c:	46bd      	mov	sp, r7
 8001f7e:	bd80      	pop	{r7, pc}

08001f80 <_close>:
 8001f80:	b480      	push	{r7}
 8001f82:	b083      	sub	sp, #12
 8001f84:	af00      	add	r7, sp, #0
 8001f86:	6078      	str	r0, [r7, #4]
 8001f88:	f04f 33ff 	mov.w	r3, #4294967295
 8001f8c:	4618      	mov	r0, r3
 8001f8e:	370c      	adds	r7, #12
 8001f90:	46bd      	mov	sp, r7
 8001f92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f96:	4770      	bx	lr

08001f98 <_fstat>:
>>>>>>> ef0d341697957f8628c074acbc12bb9a12bbe146
 8001f98:	b480      	push	{r7}
 8001f9a:	b083      	sub	sp, #12
 8001f9c:	af00      	add	r7, sp, #0
 8001f9e:	6078      	str	r0, [r7, #4]
<<<<<<< HEAD
 8001fa0:	f04f 33ff 	mov.w	r3, #4294967295
 8001fa4:	4618      	mov	r0, r3
 8001fa6:	370c      	adds	r7, #12
 8001fa8:	46bd      	mov	sp, r7
 8001faa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fae:	4770      	bx	lr

08001fb0 <_fstat>:
 8001fb0:	b480      	push	{r7}
 8001fb2:	b083      	sub	sp, #12
 8001fb4:	af00      	add	r7, sp, #0
 8001fb6:	6078      	str	r0, [r7, #4]
 8001fb8:	6039      	str	r1, [r7, #0]
 8001fba:	683b      	ldr	r3, [r7, #0]
 8001fbc:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8001fc0:	605a      	str	r2, [r3, #4]
 8001fc2:	2300      	movs	r3, #0
 8001fc4:	4618      	mov	r0, r3
 8001fc6:	370c      	adds	r7, #12
 8001fc8:	46bd      	mov	sp, r7
 8001fca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fce:	4770      	bx	lr

08001fd0 <_isatty>:
 8001fd0:	b480      	push	{r7}
 8001fd2:	b083      	sub	sp, #12
 8001fd4:	af00      	add	r7, sp, #0
 8001fd6:	6078      	str	r0, [r7, #4]
 8001fd8:	2301      	movs	r3, #1
 8001fda:	4618      	mov	r0, r3
 8001fdc:	370c      	adds	r7, #12
 8001fde:	46bd      	mov	sp, r7
 8001fe0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fe4:	4770      	bx	lr

08001fe6 <_lseek>:
 8001fe6:	b480      	push	{r7}
 8001fe8:	b085      	sub	sp, #20
 8001fea:	af00      	add	r7, sp, #0
 8001fec:	60f8      	str	r0, [r7, #12]
 8001fee:	60b9      	str	r1, [r7, #8]
 8001ff0:	607a      	str	r2, [r7, #4]
 8001ff2:	2300      	movs	r3, #0
 8001ff4:	4618      	mov	r0, r3
 8001ff6:	3714      	adds	r7, #20
 8001ff8:	46bd      	mov	sp, r7
 8001ffa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ffe:	4770      	bx	lr

08002000 <_sbrk>:
 8002000:	b580      	push	{r7, lr}
 8002002:	b086      	sub	sp, #24
 8002004:	af00      	add	r7, sp, #0
 8002006:	6078      	str	r0, [r7, #4]
 8002008:	4a14      	ldr	r2, [pc, #80]	@ (800205c <_sbrk+0x5c>)
 800200a:	4b15      	ldr	r3, [pc, #84]	@ (8002060 <_sbrk+0x60>)
 800200c:	1ad3      	subs	r3, r2, r3
 800200e:	617b      	str	r3, [r7, #20]
 8002010:	697b      	ldr	r3, [r7, #20]
 8002012:	613b      	str	r3, [r7, #16]
 8002014:	4b13      	ldr	r3, [pc, #76]	@ (8002064 <_sbrk+0x64>)
 8002016:	681b      	ldr	r3, [r3, #0]
 8002018:	2b00      	cmp	r3, #0
 800201a:	d102      	bne.n	8002022 <_sbrk+0x22>
 800201c:	4b11      	ldr	r3, [pc, #68]	@ (8002064 <_sbrk+0x64>)
 800201e:	4a12      	ldr	r2, [pc, #72]	@ (8002068 <_sbrk+0x68>)
 8002020:	601a      	str	r2, [r3, #0]
 8002022:	4b10      	ldr	r3, [pc, #64]	@ (8002064 <_sbrk+0x64>)
 8002024:	681a      	ldr	r2, [r3, #0]
 8002026:	687b      	ldr	r3, [r7, #4]
 8002028:	4413      	add	r3, r2
 800202a:	693a      	ldr	r2, [r7, #16]
 800202c:	429a      	cmp	r2, r3
 800202e:	d207      	bcs.n	8002040 <_sbrk+0x40>
 8002030:	f005 f816 	bl	8007060 <__errno>
 8002034:	4603      	mov	r3, r0
 8002036:	220c      	movs	r2, #12
 8002038:	601a      	str	r2, [r3, #0]
 800203a:	f04f 33ff 	mov.w	r3, #4294967295
 800203e:	e009      	b.n	8002054 <_sbrk+0x54>
 8002040:	4b08      	ldr	r3, [pc, #32]	@ (8002064 <_sbrk+0x64>)
 8002042:	681b      	ldr	r3, [r3, #0]
 8002044:	60fb      	str	r3, [r7, #12]
 8002046:	4b07      	ldr	r3, [pc, #28]	@ (8002064 <_sbrk+0x64>)
 8002048:	681a      	ldr	r2, [r3, #0]
 800204a:	687b      	ldr	r3, [r7, #4]
 800204c:	4413      	add	r3, r2
 800204e:	4a05      	ldr	r2, [pc, #20]	@ (8002064 <_sbrk+0x64>)
 8002050:	6013      	str	r3, [r2, #0]
 8002052:	68fb      	ldr	r3, [r7, #12]
=======
 8001fa0:	6039      	str	r1, [r7, #0]
 8001fa2:	683b      	ldr	r3, [r7, #0]
 8001fa4:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8001fa8:	605a      	str	r2, [r3, #4]
 8001faa:	2300      	movs	r3, #0
 8001fac:	4618      	mov	r0, r3
 8001fae:	370c      	adds	r7, #12
 8001fb0:	46bd      	mov	sp, r7
 8001fb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fb6:	4770      	bx	lr

08001fb8 <_isatty>:
 8001fb8:	b480      	push	{r7}
 8001fba:	b083      	sub	sp, #12
 8001fbc:	af00      	add	r7, sp, #0
 8001fbe:	6078      	str	r0, [r7, #4]
 8001fc0:	2301      	movs	r3, #1
 8001fc2:	4618      	mov	r0, r3
 8001fc4:	370c      	adds	r7, #12
 8001fc6:	46bd      	mov	sp, r7
 8001fc8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fcc:	4770      	bx	lr

08001fce <_lseek>:
 8001fce:	b480      	push	{r7}
 8001fd0:	b085      	sub	sp, #20
 8001fd2:	af00      	add	r7, sp, #0
 8001fd4:	60f8      	str	r0, [r7, #12]
 8001fd6:	60b9      	str	r1, [r7, #8]
 8001fd8:	607a      	str	r2, [r7, #4]
 8001fda:	2300      	movs	r3, #0
 8001fdc:	4618      	mov	r0, r3
 8001fde:	3714      	adds	r7, #20
 8001fe0:	46bd      	mov	sp, r7
 8001fe2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fe6:	4770      	bx	lr

08001fe8 <_sbrk>:
 8001fe8:	b580      	push	{r7, lr}
 8001fea:	b086      	sub	sp, #24
 8001fec:	af00      	add	r7, sp, #0
 8001fee:	6078      	str	r0, [r7, #4]
 8001ff0:	4a14      	ldr	r2, [pc, #80]	@ (8002044 <_sbrk+0x5c>)
 8001ff2:	4b15      	ldr	r3, [pc, #84]	@ (8002048 <_sbrk+0x60>)
 8001ff4:	1ad3      	subs	r3, r2, r3
 8001ff6:	617b      	str	r3, [r7, #20]
 8001ff8:	697b      	ldr	r3, [r7, #20]
 8001ffa:	613b      	str	r3, [r7, #16]
 8001ffc:	4b13      	ldr	r3, [pc, #76]	@ (800204c <_sbrk+0x64>)
 8001ffe:	681b      	ldr	r3, [r3, #0]
 8002000:	2b00      	cmp	r3, #0
 8002002:	d102      	bne.n	800200a <_sbrk+0x22>
 8002004:	4b11      	ldr	r3, [pc, #68]	@ (800204c <_sbrk+0x64>)
 8002006:	4a12      	ldr	r2, [pc, #72]	@ (8002050 <_sbrk+0x68>)
 8002008:	601a      	str	r2, [r3, #0]
 800200a:	4b10      	ldr	r3, [pc, #64]	@ (800204c <_sbrk+0x64>)
 800200c:	681a      	ldr	r2, [r3, #0]
 800200e:	687b      	ldr	r3, [r7, #4]
 8002010:	4413      	add	r3, r2
 8002012:	693a      	ldr	r2, [r7, #16]
 8002014:	429a      	cmp	r2, r3
 8002016:	d207      	bcs.n	8002028 <_sbrk+0x40>
 8002018:	f005 f816 	bl	8007048 <__errno>
 800201c:	4603      	mov	r3, r0
 800201e:	220c      	movs	r2, #12
 8002020:	601a      	str	r2, [r3, #0]
 8002022:	f04f 33ff 	mov.w	r3, #4294967295
 8002026:	e009      	b.n	800203c <_sbrk+0x54>
 8002028:	4b08      	ldr	r3, [pc, #32]	@ (800204c <_sbrk+0x64>)
 800202a:	681b      	ldr	r3, [r3, #0]
 800202c:	60fb      	str	r3, [r7, #12]
 800202e:	4b07      	ldr	r3, [pc, #28]	@ (800204c <_sbrk+0x64>)
 8002030:	681a      	ldr	r2, [r3, #0]
 8002032:	687b      	ldr	r3, [r7, #4]
 8002034:	4413      	add	r3, r2
 8002036:	4a05      	ldr	r2, [pc, #20]	@ (800204c <_sbrk+0x64>)
 8002038:	6013      	str	r3, [r2, #0]
 800203a:	68fb      	ldr	r3, [r7, #12]
 800203c:	4618      	mov	r0, r3
 800203e:	3718      	adds	r7, #24
 8002040:	46bd      	mov	sp, r7
 8002042:	bd80      	pop	{r7, pc}
 8002044:	20020000 	.word	0x20020000
 8002048:	00000400 	.word	0x00000400
 800204c:	200005fc 	.word	0x200005fc
 8002050:	20000750 	.word	0x20000750

08002054 <SystemInit>:
=======
 8001fd2:	bf00      	nop
 8001fd4:	bd80      	pop	{r7, pc}
 8001fd6:	bf00      	nop
 8001fd8:	20000238 	.word	0x20000238

08001fdc <_getpid>:
 8001fdc:	b480      	push	{r7}
 8001fde:	af00      	add	r7, sp, #0
 8001fe0:	2301      	movs	r3, #1
 8001fe2:	4618      	mov	r0, r3
 8001fe4:	46bd      	mov	sp, r7
 8001fe6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fea:	4770      	bx	lr

08001fec <_kill>:
 8001fec:	b580      	push	{r7, lr}
 8001fee:	b082      	sub	sp, #8
 8001ff0:	af00      	add	r7, sp, #0
 8001ff2:	6078      	str	r0, [r7, #4]
 8001ff4:	6039      	str	r1, [r7, #0]
 8001ff6:	f005 f8b1 	bl	800715c <__errno>
 8001ffa:	4603      	mov	r3, r0
 8001ffc:	2216      	movs	r2, #22
 8001ffe:	601a      	str	r2, [r3, #0]
 8002000:	f04f 33ff 	mov.w	r3, #4294967295
 8002004:	4618      	mov	r0, r3
 8002006:	3708      	adds	r7, #8
 8002008:	46bd      	mov	sp, r7
 800200a:	bd80      	pop	{r7, pc}

0800200c <_exit>:
 800200c:	b580      	push	{r7, lr}
 800200e:	b082      	sub	sp, #8
 8002010:	af00      	add	r7, sp, #0
 8002012:	6078      	str	r0, [r7, #4]
 8002014:	f04f 31ff 	mov.w	r1, #4294967295
 8002018:	6878      	ldr	r0, [r7, #4]
 800201a:	f7ff ffe7 	bl	8001fec <_kill>
 800201e:	bf00      	nop
 8002020:	e7fd      	b.n	800201e <_exit+0x12>

08002022 <_read>:
 8002022:	b580      	push	{r7, lr}
 8002024:	b086      	sub	sp, #24
 8002026:	af00      	add	r7, sp, #0
 8002028:	60f8      	str	r0, [r7, #12]
 800202a:	60b9      	str	r1, [r7, #8]
 800202c:	607a      	str	r2, [r7, #4]
 800202e:	2300      	movs	r3, #0
 8002030:	617b      	str	r3, [r7, #20]
 8002032:	e00a      	b.n	800204a <_read+0x28>
 8002034:	f3af 8000 	nop.w
 8002038:	4601      	mov	r1, r0
 800203a:	68bb      	ldr	r3, [r7, #8]
 800203c:	1c5a      	adds	r2, r3, #1
 800203e:	60ba      	str	r2, [r7, #8]
 8002040:	b2ca      	uxtb	r2, r1
 8002042:	701a      	strb	r2, [r3, #0]
 8002044:	697b      	ldr	r3, [r7, #20]
 8002046:	3301      	adds	r3, #1
 8002048:	617b      	str	r3, [r7, #20]
 800204a:	697a      	ldr	r2, [r7, #20]
 800204c:	687b      	ldr	r3, [r7, #4]
 800204e:	429a      	cmp	r2, r3
 8002050:	dbf0      	blt.n	8002034 <_read+0x12>
 8002052:	687b      	ldr	r3, [r7, #4]
>>>>>>> ef0d341697957f8628c074acbc12bb9a12bbe146
 8002054:	4618      	mov	r0, r3
 8002056:	3718      	adds	r7, #24
 8002058:	46bd      	mov	sp, r7
 800205a:	bd80      	pop	{r7, pc}
<<<<<<< HEAD
 800205c:	20020000 	.word	0x20020000
 8002060:	00000400 	.word	0x00000400
 8002064:	200005fc 	.word	0x200005fc
 8002068:	20000750 	.word	0x20000750

0800206c <SystemInit>:
 800206c:	b480      	push	{r7}
 800206e:	af00      	add	r7, sp, #0
 8002070:	4b06      	ldr	r3, [pc, #24]	@ (800208c <SystemInit+0x20>)
 8002072:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002076:	4a05      	ldr	r2, [pc, #20]	@ (800208c <SystemInit+0x20>)
 8002078:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 800207c:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
 8002080:	bf00      	nop
 8002082:	46bd      	mov	sp, r7
 8002084:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002088:	4770      	bx	lr
 800208a:	bf00      	nop
 800208c:	e000ed00 	.word	0xe000ed00

08002090 <Reset_Handler>:
 8002090:	f8df d034 	ldr.w	sp, [pc, #52]	@ 80020c8 <LoopFillZerobss+0xe>
 8002094:	f7ff ffea 	bl	800206c <SystemInit>
 8002098:	480c      	ldr	r0, [pc, #48]	@ (80020cc <LoopFillZerobss+0x12>)
 800209a:	490d      	ldr	r1, [pc, #52]	@ (80020d0 <LoopFillZerobss+0x16>)
 800209c:	4a0d      	ldr	r2, [pc, #52]	@ (80020d4 <LoopFillZerobss+0x1a>)
 800209e:	2300      	movs	r3, #0
 80020a0:	e002      	b.n	80020a8 <LoopCopyDataInit>

080020a2 <CopyDataInit>:
 80020a2:	58d4      	ldr	r4, [r2, r3]
 80020a4:	50c4      	str	r4, [r0, r3]
 80020a6:	3304      	adds	r3, #4

080020a8 <LoopCopyDataInit>:
 80020a8:	18c4      	adds	r4, r0, r3
 80020aa:	428c      	cmp	r4, r1
 80020ac:	d3f9      	bcc.n	80020a2 <CopyDataInit>
 80020ae:	4a0a      	ldr	r2, [pc, #40]	@ (80020d8 <LoopFillZerobss+0x1e>)
 80020b0:	4c0a      	ldr	r4, [pc, #40]	@ (80020dc <LoopFillZerobss+0x22>)
 80020b2:	2300      	movs	r3, #0
 80020b4:	e001      	b.n	80020ba <LoopFillZerobss>

080020b6 <FillZerobss>:
 80020b6:	6013      	str	r3, [r2, #0]
 80020b8:	3204      	adds	r2, #4

080020ba <LoopFillZerobss>:
 80020ba:	42a2      	cmp	r2, r4
 80020bc:	d3fb      	bcc.n	80020b6 <FillZerobss>
 80020be:	f004 ffd5 	bl	800706c <__libc_init_array>
 80020c2:	f7ff f8cf 	bl	8001264 <main>
 80020c6:	4770      	bx	lr
 80020c8:	20020000 	.word	0x20020000
 80020cc:	20000000 	.word	0x20000000
 80020d0:	200001d4 	.word	0x200001d4
 80020d4:	0800a8a8 	.word	0x0800a8a8
 80020d8:	200001d4 	.word	0x200001d4
 80020dc:	20000750 	.word	0x20000750

080020e0 <ADC_IRQHandler>:
 80020e0:	e7fe      	b.n	80020e0 <ADC_IRQHandler>
	...

080020e4 <HAL_Init>:
 80020e4:	b580      	push	{r7, lr}
 80020e6:	af00      	add	r7, sp, #0
 80020e8:	4b0e      	ldr	r3, [pc, #56]	@ (8002124 <HAL_Init+0x40>)
 80020ea:	681b      	ldr	r3, [r3, #0]
 80020ec:	4a0d      	ldr	r2, [pc, #52]	@ (8002124 <HAL_Init+0x40>)
 80020ee:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 80020f2:	6013      	str	r3, [r2, #0]
 80020f4:	4b0b      	ldr	r3, [pc, #44]	@ (8002124 <HAL_Init+0x40>)
 80020f6:	681b      	ldr	r3, [r3, #0]
 80020f8:	4a0a      	ldr	r2, [pc, #40]	@ (8002124 <HAL_Init+0x40>)
 80020fa:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 80020fe:	6013      	str	r3, [r2, #0]
 8002100:	4b08      	ldr	r3, [pc, #32]	@ (8002124 <HAL_Init+0x40>)
 8002102:	681b      	ldr	r3, [r3, #0]
 8002104:	4a07      	ldr	r2, [pc, #28]	@ (8002124 <HAL_Init+0x40>)
 8002106:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800210a:	6013      	str	r3, [r2, #0]
 800210c:	2003      	movs	r0, #3
 800210e:	f000 fd43 	bl	8002b98 <HAL_NVIC_SetPriorityGrouping>
 8002112:	2000      	movs	r0, #0
 8002114:	f000 f808 	bl	8002128 <HAL_InitTick>
 8002118:	f7ff fcf4 	bl	8001b04 <HAL_MspInit>
 800211c:	2300      	movs	r3, #0
 800211e:	4618      	mov	r0, r3
 8002120:	bd80      	pop	{r7, pc}
 8002122:	bf00      	nop
 8002124:	40023c00 	.word	0x40023c00

08002128 <HAL_InitTick>:
 8002128:	b580      	push	{r7, lr}
 800212a:	b082      	sub	sp, #8
 800212c:	af00      	add	r7, sp, #0
 800212e:	6078      	str	r0, [r7, #4]
 8002130:	4b12      	ldr	r3, [pc, #72]	@ (800217c <HAL_InitTick+0x54>)
 8002132:	681a      	ldr	r2, [r3, #0]
 8002134:	4b12      	ldr	r3, [pc, #72]	@ (8002180 <HAL_InitTick+0x58>)
 8002136:	781b      	ldrb	r3, [r3, #0]
 8002138:	4619      	mov	r1, r3
 800213a:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 800213e:	fbb3 f3f1 	udiv	r3, r3, r1
 8002142:	fbb2 f3f3 	udiv	r3, r2, r3
 8002146:	4618      	mov	r0, r3
 8002148:	f000 fd5b 	bl	8002c02 <HAL_SYSTICK_Config>
 800214c:	4603      	mov	r3, r0
 800214e:	2b00      	cmp	r3, #0
 8002150:	d001      	beq.n	8002156 <HAL_InitTick+0x2e>
 8002152:	2301      	movs	r3, #1
 8002154:	e00e      	b.n	8002174 <HAL_InitTick+0x4c>
 8002156:	687b      	ldr	r3, [r7, #4]
 8002158:	2b0f      	cmp	r3, #15
 800215a:	d80a      	bhi.n	8002172 <HAL_InitTick+0x4a>
 800215c:	2200      	movs	r2, #0
 800215e:	6879      	ldr	r1, [r7, #4]
 8002160:	f04f 30ff 	mov.w	r0, #4294967295
 8002164:	f000 fd23 	bl	8002bae <HAL_NVIC_SetPriority>
 8002168:	4a06      	ldr	r2, [pc, #24]	@ (8002184 <HAL_InitTick+0x5c>)
 800216a:	687b      	ldr	r3, [r7, #4]
 800216c:	6013      	str	r3, [r2, #0]
 800216e:	2300      	movs	r3, #0
 8002170:	e000      	b.n	8002174 <HAL_InitTick+0x4c>
 8002172:	2301      	movs	r3, #1
 8002174:	4618      	mov	r0, r3
 8002176:	3708      	adds	r7, #8
 8002178:	46bd      	mov	sp, r7
 800217a:	bd80      	pop	{r7, pc}
 800217c:	20000000 	.word	0x20000000
 8002180:	20000008 	.word	0x20000008
 8002184:	20000004 	.word	0x20000004

08002188 <HAL_IncTick>:
 8002188:	b480      	push	{r7}
 800218a:	af00      	add	r7, sp, #0
 800218c:	4b06      	ldr	r3, [pc, #24]	@ (80021a8 <HAL_IncTick+0x20>)
 800218e:	781b      	ldrb	r3, [r3, #0]
 8002190:	461a      	mov	r2, r3
 8002192:	4b06      	ldr	r3, [pc, #24]	@ (80021ac <HAL_IncTick+0x24>)
 8002194:	681b      	ldr	r3, [r3, #0]
 8002196:	4413      	add	r3, r2
 8002198:	4a04      	ldr	r2, [pc, #16]	@ (80021ac <HAL_IncTick+0x24>)
 800219a:	6013      	str	r3, [r2, #0]
 800219c:	bf00      	nop
 800219e:	46bd      	mov	sp, r7
 80021a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021a4:	4770      	bx	lr
 80021a6:	bf00      	nop
 80021a8:	20000008 	.word	0x20000008
 80021ac:	20000600 	.word	0x20000600

080021b0 <HAL_GetTick>:
 80021b0:	b480      	push	{r7}
 80021b2:	af00      	add	r7, sp, #0
 80021b4:	4b03      	ldr	r3, [pc, #12]	@ (80021c4 <HAL_GetTick+0x14>)
 80021b6:	681b      	ldr	r3, [r3, #0]
 80021b8:	4618      	mov	r0, r3
 80021ba:	46bd      	mov	sp, r7
 80021bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021c0:	4770      	bx	lr
 80021c2:	bf00      	nop
 80021c4:	20000600 	.word	0x20000600

080021c8 <HAL_ADC_Init>:
 80021c8:	b580      	push	{r7, lr}
 80021ca:	b084      	sub	sp, #16
 80021cc:	af00      	add	r7, sp, #0
 80021ce:	6078      	str	r0, [r7, #4]
 80021d0:	2300      	movs	r3, #0
 80021d2:	73fb      	strb	r3, [r7, #15]
 80021d4:	687b      	ldr	r3, [r7, #4]
 80021d6:	2b00      	cmp	r3, #0
 80021d8:	d101      	bne.n	80021de <HAL_ADC_Init+0x16>
 80021da:	2301      	movs	r3, #1
 80021dc:	e033      	b.n	8002246 <HAL_ADC_Init+0x7e>
 80021de:	687b      	ldr	r3, [r7, #4]
 80021e0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80021e2:	2b00      	cmp	r3, #0
 80021e4:	d109      	bne.n	80021fa <HAL_ADC_Init+0x32>
 80021e6:	6878      	ldr	r0, [r7, #4]
 80021e8:	f7ff fcb4 	bl	8001b54 <HAL_ADC_MspInit>
 80021ec:	687b      	ldr	r3, [r7, #4]
 80021ee:	2200      	movs	r2, #0
 80021f0:	645a      	str	r2, [r3, #68]	@ 0x44
 80021f2:	687b      	ldr	r3, [r7, #4]
 80021f4:	2200      	movs	r2, #0
 80021f6:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
 80021fa:	687b      	ldr	r3, [r7, #4]
 80021fc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80021fe:	f003 0310 	and.w	r3, r3, #16
 8002202:	2b00      	cmp	r3, #0
 8002204:	d118      	bne.n	8002238 <HAL_ADC_Init+0x70>
 8002206:	687b      	ldr	r3, [r7, #4]
 8002208:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800220a:	f423 5388 	bic.w	r3, r3, #4352	@ 0x1100
 800220e:	f023 0302 	bic.w	r3, r3, #2
 8002212:	f043 0202 	orr.w	r2, r3, #2
 8002216:	687b      	ldr	r3, [r7, #4]
 8002218:	641a      	str	r2, [r3, #64]	@ 0x40
 800221a:	6878      	ldr	r0, [r7, #4]
 800221c:	f000 fa6e 	bl	80026fc <ADC_Init>
 8002220:	687b      	ldr	r3, [r7, #4]
 8002222:	2200      	movs	r2, #0
 8002224:	645a      	str	r2, [r3, #68]	@ 0x44
 8002226:	687b      	ldr	r3, [r7, #4]
 8002228:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800222a:	f023 0303 	bic.w	r3, r3, #3
 800222e:	f043 0201 	orr.w	r2, r3, #1
 8002232:	687b      	ldr	r3, [r7, #4]
 8002234:	641a      	str	r2, [r3, #64]	@ 0x40
 8002236:	e001      	b.n	800223c <HAL_ADC_Init+0x74>
 8002238:	2301      	movs	r3, #1
 800223a:	73fb      	strb	r3, [r7, #15]
 800223c:	687b      	ldr	r3, [r7, #4]
 800223e:	2200      	movs	r2, #0
 8002240:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
 8002244:	7bfb      	ldrb	r3, [r7, #15]
 8002246:	4618      	mov	r0, r3
 8002248:	3710      	adds	r7, #16
 800224a:	46bd      	mov	sp, r7
 800224c:	bd80      	pop	{r7, pc}
	...

08002250 <HAL_ADC_Start_DMA>:
 8002250:	b580      	push	{r7, lr}
 8002252:	b086      	sub	sp, #24
 8002254:	af00      	add	r7, sp, #0
 8002256:	60f8      	str	r0, [r7, #12]
 8002258:	60b9      	str	r1, [r7, #8]
 800225a:	607a      	str	r2, [r7, #4]
 800225c:	2300      	movs	r3, #0
 800225e:	613b      	str	r3, [r7, #16]
 8002260:	68fb      	ldr	r3, [r7, #12]
 8002262:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8002266:	2b01      	cmp	r3, #1
 8002268:	d101      	bne.n	800226e <HAL_ADC_Start_DMA+0x1e>
 800226a:	2302      	movs	r3, #2
 800226c:	e0e9      	b.n	8002442 <HAL_ADC_Start_DMA+0x1f2>
 800226e:	68fb      	ldr	r3, [r7, #12]
 8002270:	2201      	movs	r2, #1
 8002272:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
 8002276:	68fb      	ldr	r3, [r7, #12]
 8002278:	681b      	ldr	r3, [r3, #0]
 800227a:	689b      	ldr	r3, [r3, #8]
 800227c:	f003 0301 	and.w	r3, r3, #1
 8002280:	2b01      	cmp	r3, #1
 8002282:	d018      	beq.n	80022b6 <HAL_ADC_Start_DMA+0x66>
 8002284:	68fb      	ldr	r3, [r7, #12]
 8002286:	681b      	ldr	r3, [r3, #0]
 8002288:	689a      	ldr	r2, [r3, #8]
 800228a:	68fb      	ldr	r3, [r7, #12]
 800228c:	681b      	ldr	r3, [r3, #0]
 800228e:	f042 0201 	orr.w	r2, r2, #1
 8002292:	609a      	str	r2, [r3, #8]
 8002294:	4b6d      	ldr	r3, [pc, #436]	@ (800244c <HAL_ADC_Start_DMA+0x1fc>)
 8002296:	681b      	ldr	r3, [r3, #0]
 8002298:	4a6d      	ldr	r2, [pc, #436]	@ (8002450 <HAL_ADC_Start_DMA+0x200>)
 800229a:	fba2 2303 	umull	r2, r3, r2, r3
 800229e:	0c9a      	lsrs	r2, r3, #18
 80022a0:	4613      	mov	r3, r2
 80022a2:	005b      	lsls	r3, r3, #1
 80022a4:	4413      	add	r3, r2
 80022a6:	613b      	str	r3, [r7, #16]
 80022a8:	e002      	b.n	80022b0 <HAL_ADC_Start_DMA+0x60>
 80022aa:	693b      	ldr	r3, [r7, #16]
 80022ac:	3b01      	subs	r3, #1
 80022ae:	613b      	str	r3, [r7, #16]
 80022b0:	693b      	ldr	r3, [r7, #16]
 80022b2:	2b00      	cmp	r3, #0
 80022b4:	d1f9      	bne.n	80022aa <HAL_ADC_Start_DMA+0x5a>
 80022b6:	68fb      	ldr	r3, [r7, #12]
 80022b8:	681b      	ldr	r3, [r3, #0]
 80022ba:	689b      	ldr	r3, [r3, #8]
 80022bc:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80022c0:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80022c4:	d107      	bne.n	80022d6 <HAL_ADC_Start_DMA+0x86>
 80022c6:	68fb      	ldr	r3, [r7, #12]
 80022c8:	681b      	ldr	r3, [r3, #0]
 80022ca:	689a      	ldr	r2, [r3, #8]
 80022cc:	68fb      	ldr	r3, [r7, #12]
 80022ce:	681b      	ldr	r3, [r3, #0]
 80022d0:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 80022d4:	609a      	str	r2, [r3, #8]
 80022d6:	68fb      	ldr	r3, [r7, #12]
 80022d8:	681b      	ldr	r3, [r3, #0]
 80022da:	689b      	ldr	r3, [r3, #8]
 80022dc:	f003 0301 	and.w	r3, r3, #1
 80022e0:	2b01      	cmp	r3, #1
 80022e2:	f040 80a1 	bne.w	8002428 <HAL_ADC_Start_DMA+0x1d8>
 80022e6:	68fb      	ldr	r3, [r7, #12]
 80022e8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80022ea:	f423 63e0 	bic.w	r3, r3, #1792	@ 0x700
 80022ee:	f023 0301 	bic.w	r3, r3, #1
 80022f2:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 80022f6:	68fb      	ldr	r3, [r7, #12]
 80022f8:	641a      	str	r2, [r3, #64]	@ 0x40
 80022fa:	68fb      	ldr	r3, [r7, #12]
 80022fc:	681b      	ldr	r3, [r3, #0]
 80022fe:	685b      	ldr	r3, [r3, #4]
 8002300:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002304:	2b00      	cmp	r3, #0
 8002306:	d007      	beq.n	8002318 <HAL_ADC_Start_DMA+0xc8>
 8002308:	68fb      	ldr	r3, [r7, #12]
 800230a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800230c:	f423 5340 	bic.w	r3, r3, #12288	@ 0x3000
 8002310:	f443 5280 	orr.w	r2, r3, #4096	@ 0x1000
 8002314:	68fb      	ldr	r3, [r7, #12]
 8002316:	641a      	str	r2, [r3, #64]	@ 0x40
 8002318:	68fb      	ldr	r3, [r7, #12]
 800231a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800231c:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8002320:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8002324:	d106      	bne.n	8002334 <HAL_ADC_Start_DMA+0xe4>
 8002326:	68fb      	ldr	r3, [r7, #12]
 8002328:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800232a:	f023 0206 	bic.w	r2, r3, #6
 800232e:	68fb      	ldr	r3, [r7, #12]
 8002330:	645a      	str	r2, [r3, #68]	@ 0x44
 8002332:	e002      	b.n	800233a <HAL_ADC_Start_DMA+0xea>
 8002334:	68fb      	ldr	r3, [r7, #12]
 8002336:	2200      	movs	r2, #0
 8002338:	645a      	str	r2, [r3, #68]	@ 0x44
 800233a:	68fb      	ldr	r3, [r7, #12]
 800233c:	2200      	movs	r2, #0
 800233e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
 8002342:	4b44      	ldr	r3, [pc, #272]	@ (8002454 <HAL_ADC_Start_DMA+0x204>)
 8002344:	617b      	str	r3, [r7, #20]
 8002346:	68fb      	ldr	r3, [r7, #12]
 8002348:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800234a:	4a43      	ldr	r2, [pc, #268]	@ (8002458 <HAL_ADC_Start_DMA+0x208>)
 800234c:	63da      	str	r2, [r3, #60]	@ 0x3c
 800234e:	68fb      	ldr	r3, [r7, #12]
 8002350:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002352:	4a42      	ldr	r2, [pc, #264]	@ (800245c <HAL_ADC_Start_DMA+0x20c>)
 8002354:	641a      	str	r2, [r3, #64]	@ 0x40
 8002356:	68fb      	ldr	r3, [r7, #12]
 8002358:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800235a:	4a41      	ldr	r2, [pc, #260]	@ (8002460 <HAL_ADC_Start_DMA+0x210>)
 800235c:	64da      	str	r2, [r3, #76]	@ 0x4c
 800235e:	68fb      	ldr	r3, [r7, #12]
 8002360:	681b      	ldr	r3, [r3, #0]
 8002362:	f06f 0222 	mvn.w	r2, #34	@ 0x22
 8002366:	601a      	str	r2, [r3, #0]
 8002368:	68fb      	ldr	r3, [r7, #12]
 800236a:	681b      	ldr	r3, [r3, #0]
 800236c:	685a      	ldr	r2, [r3, #4]
 800236e:	68fb      	ldr	r3, [r7, #12]
 8002370:	681b      	ldr	r3, [r3, #0]
 8002372:	f042 6280 	orr.w	r2, r2, #67108864	@ 0x4000000
 8002376:	605a      	str	r2, [r3, #4]
 8002378:	68fb      	ldr	r3, [r7, #12]
 800237a:	681b      	ldr	r3, [r3, #0]
 800237c:	689a      	ldr	r2, [r3, #8]
 800237e:	68fb      	ldr	r3, [r7, #12]
 8002380:	681b      	ldr	r3, [r3, #0]
 8002382:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8002386:	609a      	str	r2, [r3, #8]
 8002388:	68fb      	ldr	r3, [r7, #12]
 800238a:	6b98      	ldr	r0, [r3, #56]	@ 0x38
 800238c:	68fb      	ldr	r3, [r7, #12]
 800238e:	681b      	ldr	r3, [r3, #0]
 8002390:	334c      	adds	r3, #76	@ 0x4c
 8002392:	4619      	mov	r1, r3
 8002394:	68ba      	ldr	r2, [r7, #8]
 8002396:	687b      	ldr	r3, [r7, #4]
 8002398:	f000 fcee 	bl	8002d78 <HAL_DMA_Start_IT>
 800239c:	697b      	ldr	r3, [r7, #20]
 800239e:	685b      	ldr	r3, [r3, #4]
 80023a0:	f003 031f 	and.w	r3, r3, #31
 80023a4:	2b00      	cmp	r3, #0
 80023a6:	d12a      	bne.n	80023fe <HAL_ADC_Start_DMA+0x1ae>
 80023a8:	68fb      	ldr	r3, [r7, #12]
 80023aa:	681b      	ldr	r3, [r3, #0]
 80023ac:	4a2d      	ldr	r2, [pc, #180]	@ (8002464 <HAL_ADC_Start_DMA+0x214>)
 80023ae:	4293      	cmp	r3, r2
 80023b0:	d015      	beq.n	80023de <HAL_ADC_Start_DMA+0x18e>
 80023b2:	68fb      	ldr	r3, [r7, #12]
 80023b4:	681b      	ldr	r3, [r3, #0]
 80023b6:	4a2c      	ldr	r2, [pc, #176]	@ (8002468 <HAL_ADC_Start_DMA+0x218>)
 80023b8:	4293      	cmp	r3, r2
 80023ba:	d105      	bne.n	80023c8 <HAL_ADC_Start_DMA+0x178>
 80023bc:	4b25      	ldr	r3, [pc, #148]	@ (8002454 <HAL_ADC_Start_DMA+0x204>)
 80023be:	685b      	ldr	r3, [r3, #4]
 80023c0:	f003 031f 	and.w	r3, r3, #31
 80023c4:	2b00      	cmp	r3, #0
 80023c6:	d00a      	beq.n	80023de <HAL_ADC_Start_DMA+0x18e>
 80023c8:	68fb      	ldr	r3, [r7, #12]
 80023ca:	681b      	ldr	r3, [r3, #0]
 80023cc:	4a27      	ldr	r2, [pc, #156]	@ (800246c <HAL_ADC_Start_DMA+0x21c>)
 80023ce:	4293      	cmp	r3, r2
 80023d0:	d136      	bne.n	8002440 <HAL_ADC_Start_DMA+0x1f0>
 80023d2:	4b20      	ldr	r3, [pc, #128]	@ (8002454 <HAL_ADC_Start_DMA+0x204>)
 80023d4:	685b      	ldr	r3, [r3, #4]
 80023d6:	f003 0310 	and.w	r3, r3, #16
 80023da:	2b00      	cmp	r3, #0
 80023dc:	d130      	bne.n	8002440 <HAL_ADC_Start_DMA+0x1f0>
 80023de:	68fb      	ldr	r3, [r7, #12]
 80023e0:	681b      	ldr	r3, [r3, #0]
 80023e2:	689b      	ldr	r3, [r3, #8]
 80023e4:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 80023e8:	2b00      	cmp	r3, #0
 80023ea:	d129      	bne.n	8002440 <HAL_ADC_Start_DMA+0x1f0>
 80023ec:	68fb      	ldr	r3, [r7, #12]
 80023ee:	681b      	ldr	r3, [r3, #0]
 80023f0:	689a      	ldr	r2, [r3, #8]
 80023f2:	68fb      	ldr	r3, [r7, #12]
 80023f4:	681b      	ldr	r3, [r3, #0]
 80023f6:	f042 4280 	orr.w	r2, r2, #1073741824	@ 0x40000000
 80023fa:	609a      	str	r2, [r3, #8]
 80023fc:	e020      	b.n	8002440 <HAL_ADC_Start_DMA+0x1f0>
 80023fe:	68fb      	ldr	r3, [r7, #12]
 8002400:	681b      	ldr	r3, [r3, #0]
 8002402:	4a18      	ldr	r2, [pc, #96]	@ (8002464 <HAL_ADC_Start_DMA+0x214>)
 8002404:	4293      	cmp	r3, r2
 8002406:	d11b      	bne.n	8002440 <HAL_ADC_Start_DMA+0x1f0>
 8002408:	68fb      	ldr	r3, [r7, #12]
 800240a:	681b      	ldr	r3, [r3, #0]
 800240c:	689b      	ldr	r3, [r3, #8]
 800240e:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 8002412:	2b00      	cmp	r3, #0
 8002414:	d114      	bne.n	8002440 <HAL_ADC_Start_DMA+0x1f0>
 8002416:	68fb      	ldr	r3, [r7, #12]
 8002418:	681b      	ldr	r3, [r3, #0]
 800241a:	689a      	ldr	r2, [r3, #8]
 800241c:	68fb      	ldr	r3, [r7, #12]
 800241e:	681b      	ldr	r3, [r3, #0]
 8002420:	f042 4280 	orr.w	r2, r2, #1073741824	@ 0x40000000
 8002424:	609a      	str	r2, [r3, #8]
 8002426:	e00b      	b.n	8002440 <HAL_ADC_Start_DMA+0x1f0>
 8002428:	68fb      	ldr	r3, [r7, #12]
 800242a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800242c:	f043 0210 	orr.w	r2, r3, #16
 8002430:	68fb      	ldr	r3, [r7, #12]
 8002432:	641a      	str	r2, [r3, #64]	@ 0x40
 8002434:	68fb      	ldr	r3, [r7, #12]
 8002436:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002438:	f043 0201 	orr.w	r2, r3, #1
 800243c:	68fb      	ldr	r3, [r7, #12]
 800243e:	645a      	str	r2, [r3, #68]	@ 0x44
 8002440:	2300      	movs	r3, #0
 8002442:	4618      	mov	r0, r3
 8002444:	3718      	adds	r7, #24
 8002446:	46bd      	mov	sp, r7
 8002448:	bd80      	pop	{r7, pc}
 800244a:	bf00      	nop
 800244c:	20000000 	.word	0x20000000
 8002450:	431bde83 	.word	0x431bde83
 8002454:	40012300 	.word	0x40012300
 8002458:	080028f5 	.word	0x080028f5
 800245c:	080029af 	.word	0x080029af
 8002460:	080029cb 	.word	0x080029cb
 8002464:	40012000 	.word	0x40012000
 8002468:	40012100 	.word	0x40012100
 800246c:	40012200 	.word	0x40012200

08002470 <HAL_ADC_ConvHalfCpltCallback>:
 8002470:	b480      	push	{r7}
 8002472:	b083      	sub	sp, #12
 8002474:	af00      	add	r7, sp, #0
 8002476:	6078      	str	r0, [r7, #4]
 8002478:	bf00      	nop
 800247a:	370c      	adds	r7, #12
 800247c:	46bd      	mov	sp, r7
 800247e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002482:	4770      	bx	lr

08002484 <HAL_ADC_ErrorCallback>:
 8002484:	b480      	push	{r7}
 8002486:	b083      	sub	sp, #12
 8002488:	af00      	add	r7, sp, #0
 800248a:	6078      	str	r0, [r7, #4]
 800248c:	bf00      	nop
 800248e:	370c      	adds	r7, #12
 8002490:	46bd      	mov	sp, r7
 8002492:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002496:	4770      	bx	lr

08002498 <HAL_ADC_ConfigChannel>:
 8002498:	b480      	push	{r7}
 800249a:	b085      	sub	sp, #20
 800249c:	af00      	add	r7, sp, #0
 800249e:	6078      	str	r0, [r7, #4]
 80024a0:	6039      	str	r1, [r7, #0]
 80024a2:	2300      	movs	r3, #0
 80024a4:	60bb      	str	r3, [r7, #8]
 80024a6:	687b      	ldr	r3, [r7, #4]
 80024a8:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80024ac:	2b01      	cmp	r3, #1
 80024ae:	d101      	bne.n	80024b4 <HAL_ADC_ConfigChannel+0x1c>
 80024b0:	2302      	movs	r3, #2
 80024b2:	e113      	b.n	80026dc <HAL_ADC_ConfigChannel+0x244>
 80024b4:	687b      	ldr	r3, [r7, #4]
 80024b6:	2201      	movs	r2, #1
 80024b8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
 80024bc:	683b      	ldr	r3, [r7, #0]
 80024be:	681b      	ldr	r3, [r3, #0]
 80024c0:	2b09      	cmp	r3, #9
 80024c2:	d925      	bls.n	8002510 <HAL_ADC_ConfigChannel+0x78>
 80024c4:	687b      	ldr	r3, [r7, #4]
 80024c6:	681b      	ldr	r3, [r3, #0]
 80024c8:	68d9      	ldr	r1, [r3, #12]
 80024ca:	683b      	ldr	r3, [r7, #0]
 80024cc:	681b      	ldr	r3, [r3, #0]
 80024ce:	b29b      	uxth	r3, r3
 80024d0:	461a      	mov	r2, r3
 80024d2:	4613      	mov	r3, r2
 80024d4:	005b      	lsls	r3, r3, #1
 80024d6:	4413      	add	r3, r2
 80024d8:	3b1e      	subs	r3, #30
 80024da:	2207      	movs	r2, #7
 80024dc:	fa02 f303 	lsl.w	r3, r2, r3
 80024e0:	43da      	mvns	r2, r3
 80024e2:	687b      	ldr	r3, [r7, #4]
 80024e4:	681b      	ldr	r3, [r3, #0]
 80024e6:	400a      	ands	r2, r1
 80024e8:	60da      	str	r2, [r3, #12]
 80024ea:	687b      	ldr	r3, [r7, #4]
 80024ec:	681b      	ldr	r3, [r3, #0]
 80024ee:	68d9      	ldr	r1, [r3, #12]
 80024f0:	683b      	ldr	r3, [r7, #0]
 80024f2:	689a      	ldr	r2, [r3, #8]
 80024f4:	683b      	ldr	r3, [r7, #0]
 80024f6:	681b      	ldr	r3, [r3, #0]
 80024f8:	b29b      	uxth	r3, r3
 80024fa:	4618      	mov	r0, r3
 80024fc:	4603      	mov	r3, r0
 80024fe:	005b      	lsls	r3, r3, #1
 8002500:	4403      	add	r3, r0
 8002502:	3b1e      	subs	r3, #30
 8002504:	409a      	lsls	r2, r3
 8002506:	687b      	ldr	r3, [r7, #4]
 8002508:	681b      	ldr	r3, [r3, #0]
 800250a:	430a      	orrs	r2, r1
 800250c:	60da      	str	r2, [r3, #12]
 800250e:	e022      	b.n	8002556 <HAL_ADC_ConfigChannel+0xbe>
 8002510:	687b      	ldr	r3, [r7, #4]
 8002512:	681b      	ldr	r3, [r3, #0]
 8002514:	6919      	ldr	r1, [r3, #16]
 8002516:	683b      	ldr	r3, [r7, #0]
 8002518:	681b      	ldr	r3, [r3, #0]
 800251a:	b29b      	uxth	r3, r3
 800251c:	461a      	mov	r2, r3
 800251e:	4613      	mov	r3, r2
 8002520:	005b      	lsls	r3, r3, #1
 8002522:	4413      	add	r3, r2
 8002524:	2207      	movs	r2, #7
 8002526:	fa02 f303 	lsl.w	r3, r2, r3
 800252a:	43da      	mvns	r2, r3
 800252c:	687b      	ldr	r3, [r7, #4]
 800252e:	681b      	ldr	r3, [r3, #0]
 8002530:	400a      	ands	r2, r1
 8002532:	611a      	str	r2, [r3, #16]
 8002534:	687b      	ldr	r3, [r7, #4]
 8002536:	681b      	ldr	r3, [r3, #0]
 8002538:	6919      	ldr	r1, [r3, #16]
 800253a:	683b      	ldr	r3, [r7, #0]
 800253c:	689a      	ldr	r2, [r3, #8]
 800253e:	683b      	ldr	r3, [r7, #0]
 8002540:	681b      	ldr	r3, [r3, #0]
 8002542:	b29b      	uxth	r3, r3
 8002544:	4618      	mov	r0, r3
 8002546:	4603      	mov	r3, r0
 8002548:	005b      	lsls	r3, r3, #1
 800254a:	4403      	add	r3, r0
 800254c:	409a      	lsls	r2, r3
 800254e:	687b      	ldr	r3, [r7, #4]
 8002550:	681b      	ldr	r3, [r3, #0]
 8002552:	430a      	orrs	r2, r1
 8002554:	611a      	str	r2, [r3, #16]
 8002556:	683b      	ldr	r3, [r7, #0]
 8002558:	685b      	ldr	r3, [r3, #4]
 800255a:	2b06      	cmp	r3, #6
 800255c:	d824      	bhi.n	80025a8 <HAL_ADC_ConfigChannel+0x110>
 800255e:	687b      	ldr	r3, [r7, #4]
 8002560:	681b      	ldr	r3, [r3, #0]
 8002562:	6b59      	ldr	r1, [r3, #52]	@ 0x34
 8002564:	683b      	ldr	r3, [r7, #0]
 8002566:	685a      	ldr	r2, [r3, #4]
 8002568:	4613      	mov	r3, r2
 800256a:	009b      	lsls	r3, r3, #2
 800256c:	4413      	add	r3, r2
 800256e:	3b05      	subs	r3, #5
 8002570:	221f      	movs	r2, #31
 8002572:	fa02 f303 	lsl.w	r3, r2, r3
 8002576:	43da      	mvns	r2, r3
 8002578:	687b      	ldr	r3, [r7, #4]
 800257a:	681b      	ldr	r3, [r3, #0]
 800257c:	400a      	ands	r2, r1
 800257e:	635a      	str	r2, [r3, #52]	@ 0x34
 8002580:	687b      	ldr	r3, [r7, #4]
 8002582:	681b      	ldr	r3, [r3, #0]
 8002584:	6b59      	ldr	r1, [r3, #52]	@ 0x34
 8002586:	683b      	ldr	r3, [r7, #0]
 8002588:	681b      	ldr	r3, [r3, #0]
 800258a:	b29b      	uxth	r3, r3
 800258c:	4618      	mov	r0, r3
 800258e:	683b      	ldr	r3, [r7, #0]
 8002590:	685a      	ldr	r2, [r3, #4]
 8002592:	4613      	mov	r3, r2
 8002594:	009b      	lsls	r3, r3, #2
 8002596:	4413      	add	r3, r2
 8002598:	3b05      	subs	r3, #5
 800259a:	fa00 f203 	lsl.w	r2, r0, r3
 800259e:	687b      	ldr	r3, [r7, #4]
 80025a0:	681b      	ldr	r3, [r3, #0]
 80025a2:	430a      	orrs	r2, r1
 80025a4:	635a      	str	r2, [r3, #52]	@ 0x34
 80025a6:	e04c      	b.n	8002642 <HAL_ADC_ConfigChannel+0x1aa>
 80025a8:	683b      	ldr	r3, [r7, #0]
 80025aa:	685b      	ldr	r3, [r3, #4]
 80025ac:	2b0c      	cmp	r3, #12
 80025ae:	d824      	bhi.n	80025fa <HAL_ADC_ConfigChannel+0x162>
 80025b0:	687b      	ldr	r3, [r7, #4]
 80025b2:	681b      	ldr	r3, [r3, #0]
 80025b4:	6b19      	ldr	r1, [r3, #48]	@ 0x30
 80025b6:	683b      	ldr	r3, [r7, #0]
 80025b8:	685a      	ldr	r2, [r3, #4]
 80025ba:	4613      	mov	r3, r2
 80025bc:	009b      	lsls	r3, r3, #2
 80025be:	4413      	add	r3, r2
 80025c0:	3b23      	subs	r3, #35	@ 0x23
 80025c2:	221f      	movs	r2, #31
 80025c4:	fa02 f303 	lsl.w	r3, r2, r3
 80025c8:	43da      	mvns	r2, r3
 80025ca:	687b      	ldr	r3, [r7, #4]
 80025cc:	681b      	ldr	r3, [r3, #0]
 80025ce:	400a      	ands	r2, r1
 80025d0:	631a      	str	r2, [r3, #48]	@ 0x30
 80025d2:	687b      	ldr	r3, [r7, #4]
 80025d4:	681b      	ldr	r3, [r3, #0]
 80025d6:	6b19      	ldr	r1, [r3, #48]	@ 0x30
 80025d8:	683b      	ldr	r3, [r7, #0]
 80025da:	681b      	ldr	r3, [r3, #0]
 80025dc:	b29b      	uxth	r3, r3
 80025de:	4618      	mov	r0, r3
 80025e0:	683b      	ldr	r3, [r7, #0]
 80025e2:	685a      	ldr	r2, [r3, #4]
 80025e4:	4613      	mov	r3, r2
 80025e6:	009b      	lsls	r3, r3, #2
 80025e8:	4413      	add	r3, r2
 80025ea:	3b23      	subs	r3, #35	@ 0x23
 80025ec:	fa00 f203 	lsl.w	r2, r0, r3
 80025f0:	687b      	ldr	r3, [r7, #4]
 80025f2:	681b      	ldr	r3, [r3, #0]
 80025f4:	430a      	orrs	r2, r1
 80025f6:	631a      	str	r2, [r3, #48]	@ 0x30
 80025f8:	e023      	b.n	8002642 <HAL_ADC_ConfigChannel+0x1aa>
 80025fa:	687b      	ldr	r3, [r7, #4]
 80025fc:	681b      	ldr	r3, [r3, #0]
 80025fe:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 8002600:	683b      	ldr	r3, [r7, #0]
 8002602:	685a      	ldr	r2, [r3, #4]
 8002604:	4613      	mov	r3, r2
 8002606:	009b      	lsls	r3, r3, #2
 8002608:	4413      	add	r3, r2
 800260a:	3b41      	subs	r3, #65	@ 0x41
 800260c:	221f      	movs	r2, #31
 800260e:	fa02 f303 	lsl.w	r3, r2, r3
 8002612:	43da      	mvns	r2, r3
 8002614:	687b      	ldr	r3, [r7, #4]
 8002616:	681b      	ldr	r3, [r3, #0]
 8002618:	400a      	ands	r2, r1
 800261a:	62da      	str	r2, [r3, #44]	@ 0x2c
 800261c:	687b      	ldr	r3, [r7, #4]
 800261e:	681b      	ldr	r3, [r3, #0]
 8002620:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 8002622:	683b      	ldr	r3, [r7, #0]
 8002624:	681b      	ldr	r3, [r3, #0]
 8002626:	b29b      	uxth	r3, r3
 8002628:	4618      	mov	r0, r3
 800262a:	683b      	ldr	r3, [r7, #0]
 800262c:	685a      	ldr	r2, [r3, #4]
 800262e:	4613      	mov	r3, r2
 8002630:	009b      	lsls	r3, r3, #2
 8002632:	4413      	add	r3, r2
 8002634:	3b41      	subs	r3, #65	@ 0x41
 8002636:	fa00 f203 	lsl.w	r2, r0, r3
 800263a:	687b      	ldr	r3, [r7, #4]
 800263c:	681b      	ldr	r3, [r3, #0]
 800263e:	430a      	orrs	r2, r1
 8002640:	62da      	str	r2, [r3, #44]	@ 0x2c
 8002642:	4b29      	ldr	r3, [pc, #164]	@ (80026e8 <HAL_ADC_ConfigChannel+0x250>)
 8002644:	60fb      	str	r3, [r7, #12]
 8002646:	687b      	ldr	r3, [r7, #4]
 8002648:	681b      	ldr	r3, [r3, #0]
 800264a:	4a28      	ldr	r2, [pc, #160]	@ (80026ec <HAL_ADC_ConfigChannel+0x254>)
 800264c:	4293      	cmp	r3, r2
 800264e:	d10f      	bne.n	8002670 <HAL_ADC_ConfigChannel+0x1d8>
 8002650:	683b      	ldr	r3, [r7, #0]
 8002652:	681b      	ldr	r3, [r3, #0]
 8002654:	2b12      	cmp	r3, #18
 8002656:	d10b      	bne.n	8002670 <HAL_ADC_ConfigChannel+0x1d8>
 8002658:	68fb      	ldr	r3, [r7, #12]
 800265a:	685b      	ldr	r3, [r3, #4]
 800265c:	f423 0200 	bic.w	r2, r3, #8388608	@ 0x800000
 8002660:	68fb      	ldr	r3, [r7, #12]
 8002662:	605a      	str	r2, [r3, #4]
 8002664:	68fb      	ldr	r3, [r7, #12]
 8002666:	685b      	ldr	r3, [r3, #4]
 8002668:	f443 0280 	orr.w	r2, r3, #4194304	@ 0x400000
 800266c:	68fb      	ldr	r3, [r7, #12]
 800266e:	605a      	str	r2, [r3, #4]
 8002670:	687b      	ldr	r3, [r7, #4]
 8002672:	681b      	ldr	r3, [r3, #0]
 8002674:	4a1d      	ldr	r2, [pc, #116]	@ (80026ec <HAL_ADC_ConfigChannel+0x254>)
 8002676:	4293      	cmp	r3, r2
 8002678:	d12b      	bne.n	80026d2 <HAL_ADC_ConfigChannel+0x23a>
 800267a:	683b      	ldr	r3, [r7, #0]
 800267c:	681b      	ldr	r3, [r3, #0]
 800267e:	4a1c      	ldr	r2, [pc, #112]	@ (80026f0 <HAL_ADC_ConfigChannel+0x258>)
 8002680:	4293      	cmp	r3, r2
 8002682:	d003      	beq.n	800268c <HAL_ADC_ConfigChannel+0x1f4>
 8002684:	683b      	ldr	r3, [r7, #0]
 8002686:	681b      	ldr	r3, [r3, #0]
 8002688:	2b11      	cmp	r3, #17
 800268a:	d122      	bne.n	80026d2 <HAL_ADC_ConfigChannel+0x23a>
 800268c:	68fb      	ldr	r3, [r7, #12]
 800268e:	685b      	ldr	r3, [r3, #4]
 8002690:	f423 0280 	bic.w	r2, r3, #4194304	@ 0x400000
 8002694:	68fb      	ldr	r3, [r7, #12]
 8002696:	605a      	str	r2, [r3, #4]
 8002698:	68fb      	ldr	r3, [r7, #12]
 800269a:	685b      	ldr	r3, [r3, #4]
 800269c:	f443 0200 	orr.w	r2, r3, #8388608	@ 0x800000
 80026a0:	68fb      	ldr	r3, [r7, #12]
 80026a2:	605a      	str	r2, [r3, #4]
 80026a4:	683b      	ldr	r3, [r7, #0]
 80026a6:	681b      	ldr	r3, [r3, #0]
 80026a8:	4a11      	ldr	r2, [pc, #68]	@ (80026f0 <HAL_ADC_ConfigChannel+0x258>)
 80026aa:	4293      	cmp	r3, r2
 80026ac:	d111      	bne.n	80026d2 <HAL_ADC_ConfigChannel+0x23a>
 80026ae:	4b11      	ldr	r3, [pc, #68]	@ (80026f4 <HAL_ADC_ConfigChannel+0x25c>)
 80026b0:	681b      	ldr	r3, [r3, #0]
 80026b2:	4a11      	ldr	r2, [pc, #68]	@ (80026f8 <HAL_ADC_ConfigChannel+0x260>)
 80026b4:	fba2 2303 	umull	r2, r3, r2, r3
 80026b8:	0c9a      	lsrs	r2, r3, #18
 80026ba:	4613      	mov	r3, r2
 80026bc:	009b      	lsls	r3, r3, #2
 80026be:	4413      	add	r3, r2
 80026c0:	005b      	lsls	r3, r3, #1
 80026c2:	60bb      	str	r3, [r7, #8]
 80026c4:	e002      	b.n	80026cc <HAL_ADC_ConfigChannel+0x234>
 80026c6:	68bb      	ldr	r3, [r7, #8]
 80026c8:	3b01      	subs	r3, #1
 80026ca:	60bb      	str	r3, [r7, #8]
 80026cc:	68bb      	ldr	r3, [r7, #8]
 80026ce:	2b00      	cmp	r3, #0
 80026d0:	d1f9      	bne.n	80026c6 <HAL_ADC_ConfigChannel+0x22e>
 80026d2:	687b      	ldr	r3, [r7, #4]
 80026d4:	2200      	movs	r2, #0
 80026d6:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
 80026da:	2300      	movs	r3, #0
 80026dc:	4618      	mov	r0, r3
 80026de:	3714      	adds	r7, #20
 80026e0:	46bd      	mov	sp, r7
 80026e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026e6:	4770      	bx	lr
 80026e8:	40012300 	.word	0x40012300
 80026ec:	40012000 	.word	0x40012000
 80026f0:	10000012 	.word	0x10000012
 80026f4:	20000000 	.word	0x20000000
 80026f8:	431bde83 	.word	0x431bde83

080026fc <ADC_Init>:
 80026fc:	b480      	push	{r7}
 80026fe:	b085      	sub	sp, #20
 8002700:	af00      	add	r7, sp, #0
 8002702:	6078      	str	r0, [r7, #4]
 8002704:	4b79      	ldr	r3, [pc, #484]	@ (80028ec <ADC_Init+0x1f0>)
 8002706:	60fb      	str	r3, [r7, #12]
 8002708:	68fb      	ldr	r3, [r7, #12]
 800270a:	685b      	ldr	r3, [r3, #4]
 800270c:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 8002710:	68fb      	ldr	r3, [r7, #12]
 8002712:	605a      	str	r2, [r3, #4]
 8002714:	68fb      	ldr	r3, [r7, #12]
 8002716:	685a      	ldr	r2, [r3, #4]
 8002718:	687b      	ldr	r3, [r7, #4]
 800271a:	685b      	ldr	r3, [r3, #4]
 800271c:	431a      	orrs	r2, r3
 800271e:	68fb      	ldr	r3, [r7, #12]
 8002720:	605a      	str	r2, [r3, #4]
 8002722:	687b      	ldr	r3, [r7, #4]
 8002724:	681b      	ldr	r3, [r3, #0]
 8002726:	685a      	ldr	r2, [r3, #4]
 8002728:	687b      	ldr	r3, [r7, #4]
 800272a:	681b      	ldr	r3, [r3, #0]
 800272c:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8002730:	605a      	str	r2, [r3, #4]
 8002732:	687b      	ldr	r3, [r7, #4]
 8002734:	681b      	ldr	r3, [r3, #0]
 8002736:	6859      	ldr	r1, [r3, #4]
 8002738:	687b      	ldr	r3, [r7, #4]
 800273a:	691b      	ldr	r3, [r3, #16]
 800273c:	021a      	lsls	r2, r3, #8
 800273e:	687b      	ldr	r3, [r7, #4]
 8002740:	681b      	ldr	r3, [r3, #0]
 8002742:	430a      	orrs	r2, r1
 8002744:	605a      	str	r2, [r3, #4]
 8002746:	687b      	ldr	r3, [r7, #4]
 8002748:	681b      	ldr	r3, [r3, #0]
 800274a:	685a      	ldr	r2, [r3, #4]
 800274c:	687b      	ldr	r3, [r7, #4]
 800274e:	681b      	ldr	r3, [r3, #0]
 8002750:	f022 7240 	bic.w	r2, r2, #50331648	@ 0x3000000
 8002754:	605a      	str	r2, [r3, #4]
 8002756:	687b      	ldr	r3, [r7, #4]
 8002758:	681b      	ldr	r3, [r3, #0]
 800275a:	6859      	ldr	r1, [r3, #4]
 800275c:	687b      	ldr	r3, [r7, #4]
 800275e:	689a      	ldr	r2, [r3, #8]
 8002760:	687b      	ldr	r3, [r7, #4]
 8002762:	681b      	ldr	r3, [r3, #0]
 8002764:	430a      	orrs	r2, r1
 8002766:	605a      	str	r2, [r3, #4]
 8002768:	687b      	ldr	r3, [r7, #4]
 800276a:	681b      	ldr	r3, [r3, #0]
 800276c:	689a      	ldr	r2, [r3, #8]
 800276e:	687b      	ldr	r3, [r7, #4]
 8002770:	681b      	ldr	r3, [r3, #0]
 8002772:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8002776:	609a      	str	r2, [r3, #8]
 8002778:	687b      	ldr	r3, [r7, #4]
 800277a:	681b      	ldr	r3, [r3, #0]
 800277c:	6899      	ldr	r1, [r3, #8]
 800277e:	687b      	ldr	r3, [r7, #4]
 8002780:	68da      	ldr	r2, [r3, #12]
 8002782:	687b      	ldr	r3, [r7, #4]
 8002784:	681b      	ldr	r3, [r3, #0]
 8002786:	430a      	orrs	r2, r1
 8002788:	609a      	str	r2, [r3, #8]
 800278a:	687b      	ldr	r3, [r7, #4]
 800278c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800278e:	4a58      	ldr	r2, [pc, #352]	@ (80028f0 <ADC_Init+0x1f4>)
 8002790:	4293      	cmp	r3, r2
 8002792:	d022      	beq.n	80027da <ADC_Init+0xde>
 8002794:	687b      	ldr	r3, [r7, #4]
 8002796:	681b      	ldr	r3, [r3, #0]
 8002798:	689a      	ldr	r2, [r3, #8]
 800279a:	687b      	ldr	r3, [r7, #4]
 800279c:	681b      	ldr	r3, [r3, #0]
 800279e:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 80027a2:	609a      	str	r2, [r3, #8]
 80027a4:	687b      	ldr	r3, [r7, #4]
 80027a6:	681b      	ldr	r3, [r3, #0]
 80027a8:	6899      	ldr	r1, [r3, #8]
 80027aa:	687b      	ldr	r3, [r7, #4]
 80027ac:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 80027ae:	687b      	ldr	r3, [r7, #4]
 80027b0:	681b      	ldr	r3, [r3, #0]
 80027b2:	430a      	orrs	r2, r1
 80027b4:	609a      	str	r2, [r3, #8]
 80027b6:	687b      	ldr	r3, [r7, #4]
 80027b8:	681b      	ldr	r3, [r3, #0]
 80027ba:	689a      	ldr	r2, [r3, #8]
 80027bc:	687b      	ldr	r3, [r7, #4]
 80027be:	681b      	ldr	r3, [r3, #0]
 80027c0:	f022 5240 	bic.w	r2, r2, #805306368	@ 0x30000000
 80027c4:	609a      	str	r2, [r3, #8]
 80027c6:	687b      	ldr	r3, [r7, #4]
 80027c8:	681b      	ldr	r3, [r3, #0]
 80027ca:	6899      	ldr	r1, [r3, #8]
 80027cc:	687b      	ldr	r3, [r7, #4]
 80027ce:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80027d0:	687b      	ldr	r3, [r7, #4]
 80027d2:	681b      	ldr	r3, [r3, #0]
 80027d4:	430a      	orrs	r2, r1
 80027d6:	609a      	str	r2, [r3, #8]
 80027d8:	e00f      	b.n	80027fa <ADC_Init+0xfe>
 80027da:	687b      	ldr	r3, [r7, #4]
 80027dc:	681b      	ldr	r3, [r3, #0]
 80027de:	689a      	ldr	r2, [r3, #8]
 80027e0:	687b      	ldr	r3, [r7, #4]
 80027e2:	681b      	ldr	r3, [r3, #0]
 80027e4:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 80027e8:	609a      	str	r2, [r3, #8]
 80027ea:	687b      	ldr	r3, [r7, #4]
 80027ec:	681b      	ldr	r3, [r3, #0]
 80027ee:	689a      	ldr	r2, [r3, #8]
 80027f0:	687b      	ldr	r3, [r7, #4]
 80027f2:	681b      	ldr	r3, [r3, #0]
 80027f4:	f022 5240 	bic.w	r2, r2, #805306368	@ 0x30000000
 80027f8:	609a      	str	r2, [r3, #8]
 80027fa:	687b      	ldr	r3, [r7, #4]
 80027fc:	681b      	ldr	r3, [r3, #0]
 80027fe:	689a      	ldr	r2, [r3, #8]
 8002800:	687b      	ldr	r3, [r7, #4]
 8002802:	681b      	ldr	r3, [r3, #0]
 8002804:	f022 0202 	bic.w	r2, r2, #2
 8002808:	609a      	str	r2, [r3, #8]
 800280a:	687b      	ldr	r3, [r7, #4]
 800280c:	681b      	ldr	r3, [r3, #0]
 800280e:	6899      	ldr	r1, [r3, #8]
 8002810:	687b      	ldr	r3, [r7, #4]
 8002812:	7e1b      	ldrb	r3, [r3, #24]
 8002814:	005a      	lsls	r2, r3, #1
 8002816:	687b      	ldr	r3, [r7, #4]
 8002818:	681b      	ldr	r3, [r3, #0]
 800281a:	430a      	orrs	r2, r1
 800281c:	609a      	str	r2, [r3, #8]
 800281e:	687b      	ldr	r3, [r7, #4]
 8002820:	f893 3020 	ldrb.w	r3, [r3, #32]
 8002824:	2b00      	cmp	r3, #0
 8002826:	d01b      	beq.n	8002860 <ADC_Init+0x164>
 8002828:	687b      	ldr	r3, [r7, #4]
 800282a:	681b      	ldr	r3, [r3, #0]
 800282c:	685a      	ldr	r2, [r3, #4]
 800282e:	687b      	ldr	r3, [r7, #4]
 8002830:	681b      	ldr	r3, [r3, #0]
 8002832:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8002836:	605a      	str	r2, [r3, #4]
 8002838:	687b      	ldr	r3, [r7, #4]
 800283a:	681b      	ldr	r3, [r3, #0]
 800283c:	685a      	ldr	r2, [r3, #4]
 800283e:	687b      	ldr	r3, [r7, #4]
 8002840:	681b      	ldr	r3, [r3, #0]
 8002842:	f422 4260 	bic.w	r2, r2, #57344	@ 0xe000
 8002846:	605a      	str	r2, [r3, #4]
 8002848:	687b      	ldr	r3, [r7, #4]
 800284a:	681b      	ldr	r3, [r3, #0]
 800284c:	6859      	ldr	r1, [r3, #4]
 800284e:	687b      	ldr	r3, [r7, #4]
 8002850:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002852:	3b01      	subs	r3, #1
 8002854:	035a      	lsls	r2, r3, #13
 8002856:	687b      	ldr	r3, [r7, #4]
 8002858:	681b      	ldr	r3, [r3, #0]
 800285a:	430a      	orrs	r2, r1
 800285c:	605a      	str	r2, [r3, #4]
 800285e:	e007      	b.n	8002870 <ADC_Init+0x174>
 8002860:	687b      	ldr	r3, [r7, #4]
 8002862:	681b      	ldr	r3, [r3, #0]
 8002864:	685a      	ldr	r2, [r3, #4]
 8002866:	687b      	ldr	r3, [r7, #4]
 8002868:	681b      	ldr	r3, [r3, #0]
 800286a:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 800286e:	605a      	str	r2, [r3, #4]
 8002870:	687b      	ldr	r3, [r7, #4]
 8002872:	681b      	ldr	r3, [r3, #0]
 8002874:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8002876:	687b      	ldr	r3, [r7, #4]
 8002878:	681b      	ldr	r3, [r3, #0]
 800287a:	f422 0270 	bic.w	r2, r2, #15728640	@ 0xf00000
 800287e:	62da      	str	r2, [r3, #44]	@ 0x2c
 8002880:	687b      	ldr	r3, [r7, #4]
 8002882:	681b      	ldr	r3, [r3, #0]
 8002884:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 8002886:	687b      	ldr	r3, [r7, #4]
 8002888:	69db      	ldr	r3, [r3, #28]
 800288a:	3b01      	subs	r3, #1
 800288c:	051a      	lsls	r2, r3, #20
 800288e:	687b      	ldr	r3, [r7, #4]
 8002890:	681b      	ldr	r3, [r3, #0]
 8002892:	430a      	orrs	r2, r1
 8002894:	62da      	str	r2, [r3, #44]	@ 0x2c
 8002896:	687b      	ldr	r3, [r7, #4]
 8002898:	681b      	ldr	r3, [r3, #0]
 800289a:	689a      	ldr	r2, [r3, #8]
 800289c:	687b      	ldr	r3, [r7, #4]
 800289e:	681b      	ldr	r3, [r3, #0]
 80028a0:	f422 7200 	bic.w	r2, r2, #512	@ 0x200
 80028a4:	609a      	str	r2, [r3, #8]
 80028a6:	687b      	ldr	r3, [r7, #4]
 80028a8:	681b      	ldr	r3, [r3, #0]
 80028aa:	6899      	ldr	r1, [r3, #8]
 80028ac:	687b      	ldr	r3, [r7, #4]
 80028ae:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 80028b2:	025a      	lsls	r2, r3, #9
 80028b4:	687b      	ldr	r3, [r7, #4]
 80028b6:	681b      	ldr	r3, [r3, #0]
 80028b8:	430a      	orrs	r2, r1
 80028ba:	609a      	str	r2, [r3, #8]
 80028bc:	687b      	ldr	r3, [r7, #4]
 80028be:	681b      	ldr	r3, [r3, #0]
 80028c0:	689a      	ldr	r2, [r3, #8]
 80028c2:	687b      	ldr	r3, [r7, #4]
 80028c4:	681b      	ldr	r3, [r3, #0]
 80028c6:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80028ca:	609a      	str	r2, [r3, #8]
 80028cc:	687b      	ldr	r3, [r7, #4]
 80028ce:	681b      	ldr	r3, [r3, #0]
 80028d0:	6899      	ldr	r1, [r3, #8]
 80028d2:	687b      	ldr	r3, [r7, #4]
 80028d4:	695b      	ldr	r3, [r3, #20]
 80028d6:	029a      	lsls	r2, r3, #10
 80028d8:	687b      	ldr	r3, [r7, #4]
 80028da:	681b      	ldr	r3, [r3, #0]
 80028dc:	430a      	orrs	r2, r1
 80028de:	609a      	str	r2, [r3, #8]
 80028e0:	bf00      	nop
 80028e2:	3714      	adds	r7, #20
 80028e4:	46bd      	mov	sp, r7
 80028e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028ea:	4770      	bx	lr
 80028ec:	40012300 	.word	0x40012300
 80028f0:	0f000001 	.word	0x0f000001

080028f4 <ADC_DMAConvCplt>:
 80028f4:	b580      	push	{r7, lr}
 80028f6:	b084      	sub	sp, #16
 80028f8:	af00      	add	r7, sp, #0
 80028fa:	6078      	str	r0, [r7, #4]
 80028fc:	687b      	ldr	r3, [r7, #4]
 80028fe:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002900:	60fb      	str	r3, [r7, #12]
 8002902:	68fb      	ldr	r3, [r7, #12]
 8002904:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002906:	f003 0350 	and.w	r3, r3, #80	@ 0x50
 800290a:	2b00      	cmp	r3, #0
 800290c:	d13c      	bne.n	8002988 <ADC_DMAConvCplt+0x94>
 800290e:	68fb      	ldr	r3, [r7, #12]
 8002910:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002912:	f443 7200 	orr.w	r2, r3, #512	@ 0x200
 8002916:	68fb      	ldr	r3, [r7, #12]
 8002918:	641a      	str	r2, [r3, #64]	@ 0x40
 800291a:	68fb      	ldr	r3, [r7, #12]
 800291c:	681b      	ldr	r3, [r3, #0]
 800291e:	689b      	ldr	r3, [r3, #8]
 8002920:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 8002924:	2b00      	cmp	r3, #0
 8002926:	d12b      	bne.n	8002980 <ADC_DMAConvCplt+0x8c>
 8002928:	68fb      	ldr	r3, [r7, #12]
 800292a:	7e1b      	ldrb	r3, [r3, #24]
 800292c:	2b00      	cmp	r3, #0
 800292e:	d127      	bne.n	8002980 <ADC_DMAConvCplt+0x8c>
 8002930:	68fb      	ldr	r3, [r7, #12]
 8002932:	681b      	ldr	r3, [r3, #0]
 8002934:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002936:	f403 0370 	and.w	r3, r3, #15728640	@ 0xf00000
 800293a:	2b00      	cmp	r3, #0
 800293c:	d006      	beq.n	800294c <ADC_DMAConvCplt+0x58>
 800293e:	68fb      	ldr	r3, [r7, #12]
 8002940:	681b      	ldr	r3, [r3, #0]
 8002942:	689b      	ldr	r3, [r3, #8]
 8002944:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002948:	2b00      	cmp	r3, #0
 800294a:	d119      	bne.n	8002980 <ADC_DMAConvCplt+0x8c>
 800294c:	68fb      	ldr	r3, [r7, #12]
 800294e:	681b      	ldr	r3, [r3, #0]
 8002950:	685a      	ldr	r2, [r3, #4]
 8002952:	68fb      	ldr	r3, [r7, #12]
 8002954:	681b      	ldr	r3, [r3, #0]
 8002956:	f022 0220 	bic.w	r2, r2, #32
 800295a:	605a      	str	r2, [r3, #4]
 800295c:	68fb      	ldr	r3, [r7, #12]
 800295e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002960:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8002964:	68fb      	ldr	r3, [r7, #12]
 8002966:	641a      	str	r2, [r3, #64]	@ 0x40
 8002968:	68fb      	ldr	r3, [r7, #12]
 800296a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800296c:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8002970:	2b00      	cmp	r3, #0
 8002972:	d105      	bne.n	8002980 <ADC_DMAConvCplt+0x8c>
 8002974:	68fb      	ldr	r3, [r7, #12]
 8002976:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002978:	f043 0201 	orr.w	r2, r3, #1
 800297c:	68fb      	ldr	r3, [r7, #12]
 800297e:	641a      	str	r2, [r3, #64]	@ 0x40
 8002980:	68f8      	ldr	r0, [r7, #12]
 8002982:	f7ff f877 	bl	8001a74 <HAL_ADC_ConvCpltCallback>
 8002986:	e00e      	b.n	80029a6 <ADC_DMAConvCplt+0xb2>
 8002988:	68fb      	ldr	r3, [r7, #12]
 800298a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800298c:	f003 0310 	and.w	r3, r3, #16
 8002990:	2b00      	cmp	r3, #0
 8002992:	d003      	beq.n	800299c <ADC_DMAConvCplt+0xa8>
 8002994:	68f8      	ldr	r0, [r7, #12]
 8002996:	f7ff fd75 	bl	8002484 <HAL_ADC_ErrorCallback>
 800299a:	e004      	b.n	80029a6 <ADC_DMAConvCplt+0xb2>
 800299c:	68fb      	ldr	r3, [r7, #12]
 800299e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80029a0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80029a2:	6878      	ldr	r0, [r7, #4]
 80029a4:	4798      	blx	r3
 80029a6:	bf00      	nop
 80029a8:	3710      	adds	r7, #16
 80029aa:	46bd      	mov	sp, r7
 80029ac:	bd80      	pop	{r7, pc}

080029ae <ADC_DMAHalfConvCplt>:
 80029ae:	b580      	push	{r7, lr}
 80029b0:	b084      	sub	sp, #16
 80029b2:	af00      	add	r7, sp, #0
 80029b4:	6078      	str	r0, [r7, #4]
 80029b6:	687b      	ldr	r3, [r7, #4]
 80029b8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80029ba:	60fb      	str	r3, [r7, #12]
 80029bc:	68f8      	ldr	r0, [r7, #12]
 80029be:	f7ff fd57 	bl	8002470 <HAL_ADC_ConvHalfCpltCallback>
 80029c2:	bf00      	nop
 80029c4:	3710      	adds	r7, #16
 80029c6:	46bd      	mov	sp, r7
 80029c8:	bd80      	pop	{r7, pc}

080029ca <ADC_DMAError>:
 80029ca:	b580      	push	{r7, lr}
 80029cc:	b084      	sub	sp, #16
 80029ce:	af00      	add	r7, sp, #0
 80029d0:	6078      	str	r0, [r7, #4]
 80029d2:	687b      	ldr	r3, [r7, #4]
 80029d4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80029d6:	60fb      	str	r3, [r7, #12]
 80029d8:	68fb      	ldr	r3, [r7, #12]
 80029da:	2240      	movs	r2, #64	@ 0x40
 80029dc:	641a      	str	r2, [r3, #64]	@ 0x40
 80029de:	68fb      	ldr	r3, [r7, #12]
 80029e0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80029e2:	f043 0204 	orr.w	r2, r3, #4
 80029e6:	68fb      	ldr	r3, [r7, #12]
 80029e8:	645a      	str	r2, [r3, #68]	@ 0x44
 80029ea:	68f8      	ldr	r0, [r7, #12]
 80029ec:	f7ff fd4a 	bl	8002484 <HAL_ADC_ErrorCallback>
 80029f0:	bf00      	nop
 80029f2:	3710      	adds	r7, #16
 80029f4:	46bd      	mov	sp, r7
 80029f6:	bd80      	pop	{r7, pc}

080029f8 <__NVIC_SetPriorityGrouping>:
 80029f8:	b480      	push	{r7}
 80029fa:	b085      	sub	sp, #20
 80029fc:	af00      	add	r7, sp, #0
 80029fe:	6078      	str	r0, [r7, #4]
 8002a00:	687b      	ldr	r3, [r7, #4]
 8002a02:	f003 0307 	and.w	r3, r3, #7
 8002a06:	60fb      	str	r3, [r7, #12]
 8002a08:	4b0c      	ldr	r3, [pc, #48]	@ (8002a3c <__NVIC_SetPriorityGrouping+0x44>)
 8002a0a:	68db      	ldr	r3, [r3, #12]
 8002a0c:	60bb      	str	r3, [r7, #8]
 8002a0e:	68ba      	ldr	r2, [r7, #8]
 8002a10:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8002a14:	4013      	ands	r3, r2
 8002a16:	60bb      	str	r3, [r7, #8]
 8002a18:	68fb      	ldr	r3, [r7, #12]
 8002a1a:	021a      	lsls	r2, r3, #8
 8002a1c:	68bb      	ldr	r3, [r7, #8]
 8002a1e:	4313      	orrs	r3, r2
 8002a20:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8002a24:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8002a28:	60bb      	str	r3, [r7, #8]
 8002a2a:	4a04      	ldr	r2, [pc, #16]	@ (8002a3c <__NVIC_SetPriorityGrouping+0x44>)
 8002a2c:	68bb      	ldr	r3, [r7, #8]
 8002a2e:	60d3      	str	r3, [r2, #12]
 8002a30:	bf00      	nop
 8002a32:	3714      	adds	r7, #20
 8002a34:	46bd      	mov	sp, r7
 8002a36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a3a:	4770      	bx	lr
 8002a3c:	e000ed00 	.word	0xe000ed00

08002a40 <__NVIC_GetPriorityGrouping>:
 8002a40:	b480      	push	{r7}
 8002a42:	af00      	add	r7, sp, #0
 8002a44:	4b04      	ldr	r3, [pc, #16]	@ (8002a58 <__NVIC_GetPriorityGrouping+0x18>)
 8002a46:	68db      	ldr	r3, [r3, #12]
 8002a48:	0a1b      	lsrs	r3, r3, #8
 8002a4a:	f003 0307 	and.w	r3, r3, #7
 8002a4e:	4618      	mov	r0, r3
 8002a50:	46bd      	mov	sp, r7
 8002a52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a56:	4770      	bx	lr
 8002a58:	e000ed00 	.word	0xe000ed00

08002a5c <__NVIC_EnableIRQ>:
 8002a5c:	b480      	push	{r7}
 8002a5e:	b083      	sub	sp, #12
 8002a60:	af00      	add	r7, sp, #0
 8002a62:	4603      	mov	r3, r0
 8002a64:	71fb      	strb	r3, [r7, #7]
 8002a66:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002a6a:	2b00      	cmp	r3, #0
 8002a6c:	db0b      	blt.n	8002a86 <__NVIC_EnableIRQ+0x2a>
 8002a6e:	79fb      	ldrb	r3, [r7, #7]
 8002a70:	f003 021f 	and.w	r2, r3, #31
 8002a74:	4907      	ldr	r1, [pc, #28]	@ (8002a94 <__NVIC_EnableIRQ+0x38>)
 8002a76:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002a7a:	095b      	lsrs	r3, r3, #5
 8002a7c:	2001      	movs	r0, #1
 8002a7e:	fa00 f202 	lsl.w	r2, r0, r2
 8002a82:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
 8002a86:	bf00      	nop
 8002a88:	370c      	adds	r7, #12
 8002a8a:	46bd      	mov	sp, r7
 8002a8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a90:	4770      	bx	lr
 8002a92:	bf00      	nop
 8002a94:	e000e100 	.word	0xe000e100

08002a98 <__NVIC_SetPriority>:
 8002a98:	b480      	push	{r7}
 8002a9a:	b083      	sub	sp, #12
 8002a9c:	af00      	add	r7, sp, #0
 8002a9e:	4603      	mov	r3, r0
 8002aa0:	6039      	str	r1, [r7, #0]
 8002aa2:	71fb      	strb	r3, [r7, #7]
 8002aa4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002aa8:	2b00      	cmp	r3, #0
 8002aaa:	db0a      	blt.n	8002ac2 <__NVIC_SetPriority+0x2a>
 8002aac:	683b      	ldr	r3, [r7, #0]
 8002aae:	b2da      	uxtb	r2, r3
 8002ab0:	490c      	ldr	r1, [pc, #48]	@ (8002ae4 <__NVIC_SetPriority+0x4c>)
 8002ab2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002ab6:	0112      	lsls	r2, r2, #4
 8002ab8:	b2d2      	uxtb	r2, r2
 8002aba:	440b      	add	r3, r1
 8002abc:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
 8002ac0:	e00a      	b.n	8002ad8 <__NVIC_SetPriority+0x40>
 8002ac2:	683b      	ldr	r3, [r7, #0]
 8002ac4:	b2da      	uxtb	r2, r3
 8002ac6:	4908      	ldr	r1, [pc, #32]	@ (8002ae8 <__NVIC_SetPriority+0x50>)
 8002ac8:	79fb      	ldrb	r3, [r7, #7]
 8002aca:	f003 030f 	and.w	r3, r3, #15
 8002ace:	3b04      	subs	r3, #4
 8002ad0:	0112      	lsls	r2, r2, #4
 8002ad2:	b2d2      	uxtb	r2, r2
 8002ad4:	440b      	add	r3, r1
 8002ad6:	761a      	strb	r2, [r3, #24]
 8002ad8:	bf00      	nop
 8002ada:	370c      	adds	r7, #12
 8002adc:	46bd      	mov	sp, r7
 8002ade:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ae2:	4770      	bx	lr
 8002ae4:	e000e100 	.word	0xe000e100
 8002ae8:	e000ed00 	.word	0xe000ed00

08002aec <NVIC_EncodePriority>:
 8002aec:	b480      	push	{r7}
 8002aee:	b089      	sub	sp, #36	@ 0x24
 8002af0:	af00      	add	r7, sp, #0
 8002af2:	60f8      	str	r0, [r7, #12]
 8002af4:	60b9      	str	r1, [r7, #8]
 8002af6:	607a      	str	r2, [r7, #4]
 8002af8:	68fb      	ldr	r3, [r7, #12]
 8002afa:	f003 0307 	and.w	r3, r3, #7
 8002afe:	61fb      	str	r3, [r7, #28]
 8002b00:	69fb      	ldr	r3, [r7, #28]
 8002b02:	f1c3 0307 	rsb	r3, r3, #7
 8002b06:	2b04      	cmp	r3, #4
 8002b08:	bf28      	it	cs
 8002b0a:	2304      	movcs	r3, #4
 8002b0c:	61bb      	str	r3, [r7, #24]
 8002b0e:	69fb      	ldr	r3, [r7, #28]
 8002b10:	3304      	adds	r3, #4
 8002b12:	2b06      	cmp	r3, #6
 8002b14:	d902      	bls.n	8002b1c <NVIC_EncodePriority+0x30>
 8002b16:	69fb      	ldr	r3, [r7, #28]
 8002b18:	3b03      	subs	r3, #3
 8002b1a:	e000      	b.n	8002b1e <NVIC_EncodePriority+0x32>
 8002b1c:	2300      	movs	r3, #0
 8002b1e:	617b      	str	r3, [r7, #20]
 8002b20:	f04f 32ff 	mov.w	r2, #4294967295
 8002b24:	69bb      	ldr	r3, [r7, #24]
 8002b26:	fa02 f303 	lsl.w	r3, r2, r3
 8002b2a:	43da      	mvns	r2, r3
 8002b2c:	68bb      	ldr	r3, [r7, #8]
 8002b2e:	401a      	ands	r2, r3
 8002b30:	697b      	ldr	r3, [r7, #20]
 8002b32:	409a      	lsls	r2, r3
 8002b34:	f04f 31ff 	mov.w	r1, #4294967295
 8002b38:	697b      	ldr	r3, [r7, #20]
 8002b3a:	fa01 f303 	lsl.w	r3, r1, r3
 8002b3e:	43d9      	mvns	r1, r3
 8002b40:	687b      	ldr	r3, [r7, #4]
 8002b42:	400b      	ands	r3, r1
 8002b44:	4313      	orrs	r3, r2
 8002b46:	4618      	mov	r0, r3
 8002b48:	3724      	adds	r7, #36	@ 0x24
 8002b4a:	46bd      	mov	sp, r7
 8002b4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b50:	4770      	bx	lr
	...

08002b54 <SysTick_Config>:
 8002b54:	b580      	push	{r7, lr}
 8002b56:	b082      	sub	sp, #8
 8002b58:	af00      	add	r7, sp, #0
 8002b5a:	6078      	str	r0, [r7, #4]
 8002b5c:	687b      	ldr	r3, [r7, #4]
 8002b5e:	3b01      	subs	r3, #1
 8002b60:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8002b64:	d301      	bcc.n	8002b6a <SysTick_Config+0x16>
 8002b66:	2301      	movs	r3, #1
 8002b68:	e00f      	b.n	8002b8a <SysTick_Config+0x36>
 8002b6a:	4a0a      	ldr	r2, [pc, #40]	@ (8002b94 <SysTick_Config+0x40>)
 8002b6c:	687b      	ldr	r3, [r7, #4]
 8002b6e:	3b01      	subs	r3, #1
 8002b70:	6053      	str	r3, [r2, #4]
 8002b72:	210f      	movs	r1, #15
 8002b74:	f04f 30ff 	mov.w	r0, #4294967295
 8002b78:	f7ff ff8e 	bl	8002a98 <__NVIC_SetPriority>
 8002b7c:	4b05      	ldr	r3, [pc, #20]	@ (8002b94 <SysTick_Config+0x40>)
 8002b7e:	2200      	movs	r2, #0
 8002b80:	609a      	str	r2, [r3, #8]
 8002b82:	4b04      	ldr	r3, [pc, #16]	@ (8002b94 <SysTick_Config+0x40>)
 8002b84:	2207      	movs	r2, #7
 8002b86:	601a      	str	r2, [r3, #0]
 8002b88:	2300      	movs	r3, #0
 8002b8a:	4618      	mov	r0, r3
 8002b8c:	3708      	adds	r7, #8
 8002b8e:	46bd      	mov	sp, r7
 8002b90:	bd80      	pop	{r7, pc}
 8002b92:	bf00      	nop
 8002b94:	e000e010 	.word	0xe000e010

08002b98 <HAL_NVIC_SetPriorityGrouping>:
 8002b98:	b580      	push	{r7, lr}
 8002b9a:	b082      	sub	sp, #8
 8002b9c:	af00      	add	r7, sp, #0
 8002b9e:	6078      	str	r0, [r7, #4]
 8002ba0:	6878      	ldr	r0, [r7, #4]
 8002ba2:	f7ff ff29 	bl	80029f8 <__NVIC_SetPriorityGrouping>
 8002ba6:	bf00      	nop
 8002ba8:	3708      	adds	r7, #8
 8002baa:	46bd      	mov	sp, r7
 8002bac:	bd80      	pop	{r7, pc}

08002bae <HAL_NVIC_SetPriority>:
 8002bae:	b580      	push	{r7, lr}
 8002bb0:	b086      	sub	sp, #24
 8002bb2:	af00      	add	r7, sp, #0
 8002bb4:	4603      	mov	r3, r0
 8002bb6:	60b9      	str	r1, [r7, #8]
 8002bb8:	607a      	str	r2, [r7, #4]
 8002bba:	73fb      	strb	r3, [r7, #15]
 8002bbc:	2300      	movs	r3, #0
 8002bbe:	617b      	str	r3, [r7, #20]
 8002bc0:	f7ff ff3e 	bl	8002a40 <__NVIC_GetPriorityGrouping>
 8002bc4:	6178      	str	r0, [r7, #20]
 8002bc6:	687a      	ldr	r2, [r7, #4]
 8002bc8:	68b9      	ldr	r1, [r7, #8]
 8002bca:	6978      	ldr	r0, [r7, #20]
 8002bcc:	f7ff ff8e 	bl	8002aec <NVIC_EncodePriority>
 8002bd0:	4602      	mov	r2, r0
 8002bd2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002bd6:	4611      	mov	r1, r2
 8002bd8:	4618      	mov	r0, r3
 8002bda:	f7ff ff5d 	bl	8002a98 <__NVIC_SetPriority>
 8002bde:	bf00      	nop
 8002be0:	3718      	adds	r7, #24
 8002be2:	46bd      	mov	sp, r7
 8002be4:	bd80      	pop	{r7, pc}

08002be6 <HAL_NVIC_EnableIRQ>:
 8002be6:	b580      	push	{r7, lr}
 8002be8:	b082      	sub	sp, #8
 8002bea:	af00      	add	r7, sp, #0
 8002bec:	4603      	mov	r3, r0
 8002bee:	71fb      	strb	r3, [r7, #7]
 8002bf0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002bf4:	4618      	mov	r0, r3
 8002bf6:	f7ff ff31 	bl	8002a5c <__NVIC_EnableIRQ>
 8002bfa:	bf00      	nop
 8002bfc:	3708      	adds	r7, #8
 8002bfe:	46bd      	mov	sp, r7
 8002c00:	bd80      	pop	{r7, pc}

08002c02 <HAL_SYSTICK_Config>:
 8002c02:	b580      	push	{r7, lr}
 8002c04:	b082      	sub	sp, #8
 8002c06:	af00      	add	r7, sp, #0
 8002c08:	6078      	str	r0, [r7, #4]
 8002c0a:	6878      	ldr	r0, [r7, #4]
 8002c0c:	f7ff ffa2 	bl	8002b54 <SysTick_Config>
 8002c10:	4603      	mov	r3, r0
 8002c12:	4618      	mov	r0, r3
 8002c14:	3708      	adds	r7, #8
 8002c16:	46bd      	mov	sp, r7
 8002c18:	bd80      	pop	{r7, pc}
	...

08002c1c <HAL_DMA_Init>:
 8002c1c:	b580      	push	{r7, lr}
 8002c1e:	b086      	sub	sp, #24
 8002c20:	af00      	add	r7, sp, #0
 8002c22:	6078      	str	r0, [r7, #4]
 8002c24:	2300      	movs	r3, #0
 8002c26:	617b      	str	r3, [r7, #20]
 8002c28:	f7ff fac2 	bl	80021b0 <HAL_GetTick>
 8002c2c:	6138      	str	r0, [r7, #16]
 8002c2e:	687b      	ldr	r3, [r7, #4]
 8002c30:	2b00      	cmp	r3, #0
 8002c32:	d101      	bne.n	8002c38 <HAL_DMA_Init+0x1c>
 8002c34:	2301      	movs	r3, #1
 8002c36:	e099      	b.n	8002d6c <HAL_DMA_Init+0x150>
 8002c38:	687b      	ldr	r3, [r7, #4]
 8002c3a:	2202      	movs	r2, #2
 8002c3c:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
 8002c40:	687b      	ldr	r3, [r7, #4]
 8002c42:	2200      	movs	r2, #0
 8002c44:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
 8002c48:	687b      	ldr	r3, [r7, #4]
 8002c4a:	681b      	ldr	r3, [r3, #0]
 8002c4c:	681a      	ldr	r2, [r3, #0]
 8002c4e:	687b      	ldr	r3, [r7, #4]
 8002c50:	681b      	ldr	r3, [r3, #0]
 8002c52:	f022 0201 	bic.w	r2, r2, #1
 8002c56:	601a      	str	r2, [r3, #0]
 8002c58:	e00f      	b.n	8002c7a <HAL_DMA_Init+0x5e>
 8002c5a:	f7ff faa9 	bl	80021b0 <HAL_GetTick>
 8002c5e:	4602      	mov	r2, r0
 8002c60:	693b      	ldr	r3, [r7, #16]
 8002c62:	1ad3      	subs	r3, r2, r3
 8002c64:	2b05      	cmp	r3, #5
 8002c66:	d908      	bls.n	8002c7a <HAL_DMA_Init+0x5e>
 8002c68:	687b      	ldr	r3, [r7, #4]
 8002c6a:	2220      	movs	r2, #32
 8002c6c:	655a      	str	r2, [r3, #84]	@ 0x54
 8002c6e:	687b      	ldr	r3, [r7, #4]
 8002c70:	2203      	movs	r2, #3
 8002c72:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
 8002c76:	2303      	movs	r3, #3
 8002c78:	e078      	b.n	8002d6c <HAL_DMA_Init+0x150>
 8002c7a:	687b      	ldr	r3, [r7, #4]
 8002c7c:	681b      	ldr	r3, [r3, #0]
 8002c7e:	681b      	ldr	r3, [r3, #0]
 8002c80:	f003 0301 	and.w	r3, r3, #1
 8002c84:	2b00      	cmp	r3, #0
 8002c86:	d1e8      	bne.n	8002c5a <HAL_DMA_Init+0x3e>
 8002c88:	687b      	ldr	r3, [r7, #4]
 8002c8a:	681b      	ldr	r3, [r3, #0]
 8002c8c:	681b      	ldr	r3, [r3, #0]
 8002c8e:	617b      	str	r3, [r7, #20]
 8002c90:	697a      	ldr	r2, [r7, #20]
 8002c92:	4b38      	ldr	r3, [pc, #224]	@ (8002d74 <HAL_DMA_Init+0x158>)
 8002c94:	4013      	ands	r3, r2
 8002c96:	617b      	str	r3, [r7, #20]
 8002c98:	687b      	ldr	r3, [r7, #4]
 8002c9a:	685a      	ldr	r2, [r3, #4]
 8002c9c:	687b      	ldr	r3, [r7, #4]
 8002c9e:	689b      	ldr	r3, [r3, #8]
 8002ca0:	431a      	orrs	r2, r3
 8002ca2:	687b      	ldr	r3, [r7, #4]
 8002ca4:	68db      	ldr	r3, [r3, #12]
 8002ca6:	431a      	orrs	r2, r3
 8002ca8:	687b      	ldr	r3, [r7, #4]
 8002caa:	691b      	ldr	r3, [r3, #16]
 8002cac:	431a      	orrs	r2, r3
 8002cae:	687b      	ldr	r3, [r7, #4]
 8002cb0:	695b      	ldr	r3, [r3, #20]
 8002cb2:	431a      	orrs	r2, r3
 8002cb4:	687b      	ldr	r3, [r7, #4]
 8002cb6:	699b      	ldr	r3, [r3, #24]
 8002cb8:	431a      	orrs	r2, r3
 8002cba:	687b      	ldr	r3, [r7, #4]
 8002cbc:	69db      	ldr	r3, [r3, #28]
 8002cbe:	431a      	orrs	r2, r3
 8002cc0:	687b      	ldr	r3, [r7, #4]
 8002cc2:	6a1b      	ldr	r3, [r3, #32]
 8002cc4:	4313      	orrs	r3, r2
 8002cc6:	697a      	ldr	r2, [r7, #20]
 8002cc8:	4313      	orrs	r3, r2
 8002cca:	617b      	str	r3, [r7, #20]
 8002ccc:	687b      	ldr	r3, [r7, #4]
 8002cce:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002cd0:	2b04      	cmp	r3, #4
 8002cd2:	d107      	bne.n	8002ce4 <HAL_DMA_Init+0xc8>
 8002cd4:	687b      	ldr	r3, [r7, #4]
 8002cd6:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8002cd8:	687b      	ldr	r3, [r7, #4]
 8002cda:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002cdc:	4313      	orrs	r3, r2
 8002cde:	697a      	ldr	r2, [r7, #20]
 8002ce0:	4313      	orrs	r3, r2
 8002ce2:	617b      	str	r3, [r7, #20]
 8002ce4:	687b      	ldr	r3, [r7, #4]
 8002ce6:	681b      	ldr	r3, [r3, #0]
 8002ce8:	697a      	ldr	r2, [r7, #20]
 8002cea:	601a      	str	r2, [r3, #0]
 8002cec:	687b      	ldr	r3, [r7, #4]
 8002cee:	681b      	ldr	r3, [r3, #0]
 8002cf0:	695b      	ldr	r3, [r3, #20]
 8002cf2:	617b      	str	r3, [r7, #20]
 8002cf4:	697b      	ldr	r3, [r7, #20]
 8002cf6:	f023 0307 	bic.w	r3, r3, #7
 8002cfa:	617b      	str	r3, [r7, #20]
 8002cfc:	687b      	ldr	r3, [r7, #4]
 8002cfe:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002d00:	697a      	ldr	r2, [r7, #20]
 8002d02:	4313      	orrs	r3, r2
 8002d04:	617b      	str	r3, [r7, #20]
 8002d06:	687b      	ldr	r3, [r7, #4]
 8002d08:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002d0a:	2b04      	cmp	r3, #4
 8002d0c:	d117      	bne.n	8002d3e <HAL_DMA_Init+0x122>
 8002d0e:	687b      	ldr	r3, [r7, #4]
 8002d10:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002d12:	697a      	ldr	r2, [r7, #20]
 8002d14:	4313      	orrs	r3, r2
 8002d16:	617b      	str	r3, [r7, #20]
 8002d18:	687b      	ldr	r3, [r7, #4]
 8002d1a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002d1c:	2b00      	cmp	r3, #0
 8002d1e:	d00e      	beq.n	8002d3e <HAL_DMA_Init+0x122>
 8002d20:	6878      	ldr	r0, [r7, #4]
 8002d22:	f000 fb01 	bl	8003328 <DMA_CheckFifoParam>
 8002d26:	4603      	mov	r3, r0
 8002d28:	2b00      	cmp	r3, #0
 8002d2a:	d008      	beq.n	8002d3e <HAL_DMA_Init+0x122>
 8002d2c:	687b      	ldr	r3, [r7, #4]
 8002d2e:	2240      	movs	r2, #64	@ 0x40
 8002d30:	655a      	str	r2, [r3, #84]	@ 0x54
 8002d32:	687b      	ldr	r3, [r7, #4]
 8002d34:	2201      	movs	r2, #1
 8002d36:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
 8002d3a:	2301      	movs	r3, #1
 8002d3c:	e016      	b.n	8002d6c <HAL_DMA_Init+0x150>
 8002d3e:	687b      	ldr	r3, [r7, #4]
 8002d40:	681b      	ldr	r3, [r3, #0]
 8002d42:	697a      	ldr	r2, [r7, #20]
 8002d44:	615a      	str	r2, [r3, #20]
 8002d46:	6878      	ldr	r0, [r7, #4]
 8002d48:	f000 fab8 	bl	80032bc <DMA_CalcBaseAndBitshift>
 8002d4c:	4603      	mov	r3, r0
 8002d4e:	60fb      	str	r3, [r7, #12]
 8002d50:	687b      	ldr	r3, [r7, #4]
 8002d52:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002d54:	223f      	movs	r2, #63	@ 0x3f
 8002d56:	409a      	lsls	r2, r3
 8002d58:	68fb      	ldr	r3, [r7, #12]
 8002d5a:	609a      	str	r2, [r3, #8]
 8002d5c:	687b      	ldr	r3, [r7, #4]
 8002d5e:	2200      	movs	r2, #0
 8002d60:	655a      	str	r2, [r3, #84]	@ 0x54
 8002d62:	687b      	ldr	r3, [r7, #4]
 8002d64:	2201      	movs	r2, #1
 8002d66:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
 8002d6a:	2300      	movs	r3, #0
 8002d6c:	4618      	mov	r0, r3
 8002d6e:	3718      	adds	r7, #24
 8002d70:	46bd      	mov	sp, r7
 8002d72:	bd80      	pop	{r7, pc}
 8002d74:	f010803f 	.word	0xf010803f

08002d78 <HAL_DMA_Start_IT>:
 8002d78:	b580      	push	{r7, lr}
 8002d7a:	b086      	sub	sp, #24
 8002d7c:	af00      	add	r7, sp, #0
 8002d7e:	60f8      	str	r0, [r7, #12]
 8002d80:	60b9      	str	r1, [r7, #8]
 8002d82:	607a      	str	r2, [r7, #4]
 8002d84:	603b      	str	r3, [r7, #0]
 8002d86:	2300      	movs	r3, #0
 8002d88:	75fb      	strb	r3, [r7, #23]
 8002d8a:	68fb      	ldr	r3, [r7, #12]
 8002d8c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002d8e:	613b      	str	r3, [r7, #16]
 8002d90:	68fb      	ldr	r3, [r7, #12]
 8002d92:	f893 3034 	ldrb.w	r3, [r3, #52]	@ 0x34
 8002d96:	2b01      	cmp	r3, #1
 8002d98:	d101      	bne.n	8002d9e <HAL_DMA_Start_IT+0x26>
 8002d9a:	2302      	movs	r3, #2
 8002d9c:	e040      	b.n	8002e20 <HAL_DMA_Start_IT+0xa8>
 8002d9e:	68fb      	ldr	r3, [r7, #12]
 8002da0:	2201      	movs	r2, #1
 8002da2:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
 8002da6:	68fb      	ldr	r3, [r7, #12]
 8002da8:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8002dac:	b2db      	uxtb	r3, r3
 8002dae:	2b01      	cmp	r3, #1
 8002db0:	d12f      	bne.n	8002e12 <HAL_DMA_Start_IT+0x9a>
 8002db2:	68fb      	ldr	r3, [r7, #12]
 8002db4:	2202      	movs	r2, #2
 8002db6:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
 8002dba:	68fb      	ldr	r3, [r7, #12]
 8002dbc:	2200      	movs	r2, #0
 8002dbe:	655a      	str	r2, [r3, #84]	@ 0x54
 8002dc0:	683b      	ldr	r3, [r7, #0]
 8002dc2:	687a      	ldr	r2, [r7, #4]
 8002dc4:	68b9      	ldr	r1, [r7, #8]
 8002dc6:	68f8      	ldr	r0, [r7, #12]
 8002dc8:	f000 fa4a 	bl	8003260 <DMA_SetConfig>
 8002dcc:	68fb      	ldr	r3, [r7, #12]
 8002dce:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002dd0:	223f      	movs	r2, #63	@ 0x3f
 8002dd2:	409a      	lsls	r2, r3
 8002dd4:	693b      	ldr	r3, [r7, #16]
 8002dd6:	609a      	str	r2, [r3, #8]
 8002dd8:	68fb      	ldr	r3, [r7, #12]
 8002dda:	681b      	ldr	r3, [r3, #0]
 8002ddc:	681a      	ldr	r2, [r3, #0]
 8002dde:	68fb      	ldr	r3, [r7, #12]
 8002de0:	681b      	ldr	r3, [r3, #0]
 8002de2:	f042 0216 	orr.w	r2, r2, #22
 8002de6:	601a      	str	r2, [r3, #0]
 8002de8:	68fb      	ldr	r3, [r7, #12]
 8002dea:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002dec:	2b00      	cmp	r3, #0
 8002dee:	d007      	beq.n	8002e00 <HAL_DMA_Start_IT+0x88>
 8002df0:	68fb      	ldr	r3, [r7, #12]
 8002df2:	681b      	ldr	r3, [r3, #0]
 8002df4:	681a      	ldr	r2, [r3, #0]
 8002df6:	68fb      	ldr	r3, [r7, #12]
 8002df8:	681b      	ldr	r3, [r3, #0]
 8002dfa:	f042 0208 	orr.w	r2, r2, #8
 8002dfe:	601a      	str	r2, [r3, #0]
 8002e00:	68fb      	ldr	r3, [r7, #12]
 8002e02:	681b      	ldr	r3, [r3, #0]
 8002e04:	681a      	ldr	r2, [r3, #0]
 8002e06:	68fb      	ldr	r3, [r7, #12]
 8002e08:	681b      	ldr	r3, [r3, #0]
 8002e0a:	f042 0201 	orr.w	r2, r2, #1
 8002e0e:	601a      	str	r2, [r3, #0]
 8002e10:	e005      	b.n	8002e1e <HAL_DMA_Start_IT+0xa6>
 8002e12:	68fb      	ldr	r3, [r7, #12]
 8002e14:	2200      	movs	r2, #0
 8002e16:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
 8002e1a:	2302      	movs	r3, #2
 8002e1c:	75fb      	strb	r3, [r7, #23]
 8002e1e:	7dfb      	ldrb	r3, [r7, #23]
 8002e20:	4618      	mov	r0, r3
 8002e22:	3718      	adds	r7, #24
 8002e24:	46bd      	mov	sp, r7
 8002e26:	bd80      	pop	{r7, pc}

08002e28 <HAL_DMA_Abort>:
 8002e28:	b580      	push	{r7, lr}
 8002e2a:	b084      	sub	sp, #16
 8002e2c:	af00      	add	r7, sp, #0
 8002e2e:	6078      	str	r0, [r7, #4]
 8002e30:	687b      	ldr	r3, [r7, #4]
 8002e32:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002e34:	60fb      	str	r3, [r7, #12]
 8002e36:	f7ff f9bb 	bl	80021b0 <HAL_GetTick>
 8002e3a:	60b8      	str	r0, [r7, #8]
 8002e3c:	687b      	ldr	r3, [r7, #4]
 8002e3e:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8002e42:	b2db      	uxtb	r3, r3
 8002e44:	2b02      	cmp	r3, #2
 8002e46:	d008      	beq.n	8002e5a <HAL_DMA_Abort+0x32>
 8002e48:	687b      	ldr	r3, [r7, #4]
 8002e4a:	2280      	movs	r2, #128	@ 0x80
 8002e4c:	655a      	str	r2, [r3, #84]	@ 0x54
 8002e4e:	687b      	ldr	r3, [r7, #4]
 8002e50:	2200      	movs	r2, #0
 8002e52:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
 8002e56:	2301      	movs	r3, #1
 8002e58:	e052      	b.n	8002f00 <HAL_DMA_Abort+0xd8>
 8002e5a:	687b      	ldr	r3, [r7, #4]
 8002e5c:	681b      	ldr	r3, [r3, #0]
 8002e5e:	681a      	ldr	r2, [r3, #0]
 8002e60:	687b      	ldr	r3, [r7, #4]
 8002e62:	681b      	ldr	r3, [r3, #0]
 8002e64:	f022 0216 	bic.w	r2, r2, #22
 8002e68:	601a      	str	r2, [r3, #0]
 8002e6a:	687b      	ldr	r3, [r7, #4]
 8002e6c:	681b      	ldr	r3, [r3, #0]
 8002e6e:	695a      	ldr	r2, [r3, #20]
 8002e70:	687b      	ldr	r3, [r7, #4]
 8002e72:	681b      	ldr	r3, [r3, #0]
 8002e74:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8002e78:	615a      	str	r2, [r3, #20]
 8002e7a:	687b      	ldr	r3, [r7, #4]
 8002e7c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002e7e:	2b00      	cmp	r3, #0
 8002e80:	d103      	bne.n	8002e8a <HAL_DMA_Abort+0x62>
 8002e82:	687b      	ldr	r3, [r7, #4]
 8002e84:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8002e86:	2b00      	cmp	r3, #0
 8002e88:	d007      	beq.n	8002e9a <HAL_DMA_Abort+0x72>
 8002e8a:	687b      	ldr	r3, [r7, #4]
 8002e8c:	681b      	ldr	r3, [r3, #0]
 8002e8e:	681a      	ldr	r2, [r3, #0]
 8002e90:	687b      	ldr	r3, [r7, #4]
 8002e92:	681b      	ldr	r3, [r3, #0]
 8002e94:	f022 0208 	bic.w	r2, r2, #8
 8002e98:	601a      	str	r2, [r3, #0]
 8002e9a:	687b      	ldr	r3, [r7, #4]
 8002e9c:	681b      	ldr	r3, [r3, #0]
 8002e9e:	681a      	ldr	r2, [r3, #0]
 8002ea0:	687b      	ldr	r3, [r7, #4]
 8002ea2:	681b      	ldr	r3, [r3, #0]
 8002ea4:	f022 0201 	bic.w	r2, r2, #1
 8002ea8:	601a      	str	r2, [r3, #0]
 8002eaa:	e013      	b.n	8002ed4 <HAL_DMA_Abort+0xac>
 8002eac:	f7ff f980 	bl	80021b0 <HAL_GetTick>
 8002eb0:	4602      	mov	r2, r0
 8002eb2:	68bb      	ldr	r3, [r7, #8]
 8002eb4:	1ad3      	subs	r3, r2, r3
 8002eb6:	2b05      	cmp	r3, #5
 8002eb8:	d90c      	bls.n	8002ed4 <HAL_DMA_Abort+0xac>
 8002eba:	687b      	ldr	r3, [r7, #4]
 8002ebc:	2220      	movs	r2, #32
 8002ebe:	655a      	str	r2, [r3, #84]	@ 0x54
 8002ec0:	687b      	ldr	r3, [r7, #4]
 8002ec2:	2203      	movs	r2, #3
 8002ec4:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
 8002ec8:	687b      	ldr	r3, [r7, #4]
 8002eca:	2200      	movs	r2, #0
 8002ecc:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
 8002ed0:	2303      	movs	r3, #3
 8002ed2:	e015      	b.n	8002f00 <HAL_DMA_Abort+0xd8>
 8002ed4:	687b      	ldr	r3, [r7, #4]
 8002ed6:	681b      	ldr	r3, [r3, #0]
 8002ed8:	681b      	ldr	r3, [r3, #0]
 8002eda:	f003 0301 	and.w	r3, r3, #1
 8002ede:	2b00      	cmp	r3, #0
 8002ee0:	d1e4      	bne.n	8002eac <HAL_DMA_Abort+0x84>
 8002ee2:	687b      	ldr	r3, [r7, #4]
 8002ee4:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002ee6:	223f      	movs	r2, #63	@ 0x3f
 8002ee8:	409a      	lsls	r2, r3
 8002eea:	68fb      	ldr	r3, [r7, #12]
 8002eec:	609a      	str	r2, [r3, #8]
 8002eee:	687b      	ldr	r3, [r7, #4]
 8002ef0:	2201      	movs	r2, #1
 8002ef2:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
 8002ef6:	687b      	ldr	r3, [r7, #4]
 8002ef8:	2200      	movs	r2, #0
 8002efa:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
 8002efe:	2300      	movs	r3, #0
 8002f00:	4618      	mov	r0, r3
 8002f02:	3710      	adds	r7, #16
 8002f04:	46bd      	mov	sp, r7
 8002f06:	bd80      	pop	{r7, pc}

08002f08 <HAL_DMA_Abort_IT>:
 8002f08:	b480      	push	{r7}
 8002f0a:	b083      	sub	sp, #12
 8002f0c:	af00      	add	r7, sp, #0
 8002f0e:	6078      	str	r0, [r7, #4]
 8002f10:	687b      	ldr	r3, [r7, #4]
 8002f12:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8002f16:	b2db      	uxtb	r3, r3
 8002f18:	2b02      	cmp	r3, #2
 8002f1a:	d004      	beq.n	8002f26 <HAL_DMA_Abort_IT+0x1e>
 8002f1c:	687b      	ldr	r3, [r7, #4]
 8002f1e:	2280      	movs	r2, #128	@ 0x80
 8002f20:	655a      	str	r2, [r3, #84]	@ 0x54
 8002f22:	2301      	movs	r3, #1
 8002f24:	e00c      	b.n	8002f40 <HAL_DMA_Abort_IT+0x38>
 8002f26:	687b      	ldr	r3, [r7, #4]
 8002f28:	2205      	movs	r2, #5
 8002f2a:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
 8002f2e:	687b      	ldr	r3, [r7, #4]
 8002f30:	681b      	ldr	r3, [r3, #0]
 8002f32:	681a      	ldr	r2, [r3, #0]
 8002f34:	687b      	ldr	r3, [r7, #4]
 8002f36:	681b      	ldr	r3, [r3, #0]
 8002f38:	f022 0201 	bic.w	r2, r2, #1
 8002f3c:	601a      	str	r2, [r3, #0]
 8002f3e:	2300      	movs	r3, #0
 8002f40:	4618      	mov	r0, r3
 8002f42:	370c      	adds	r7, #12
 8002f44:	46bd      	mov	sp, r7
 8002f46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f4a:	4770      	bx	lr

08002f4c <HAL_DMA_IRQHandler>:
 8002f4c:	b580      	push	{r7, lr}
 8002f4e:	b086      	sub	sp, #24
 8002f50:	af00      	add	r7, sp, #0
 8002f52:	6078      	str	r0, [r7, #4]
 8002f54:	2300      	movs	r3, #0
 8002f56:	60bb      	str	r3, [r7, #8]
 8002f58:	4b8e      	ldr	r3, [pc, #568]	@ (8003194 <HAL_DMA_IRQHandler+0x248>)
 8002f5a:	681b      	ldr	r3, [r3, #0]
 8002f5c:	4a8e      	ldr	r2, [pc, #568]	@ (8003198 <HAL_DMA_IRQHandler+0x24c>)
 8002f5e:	fba2 2303 	umull	r2, r3, r2, r3
 8002f62:	0a9b      	lsrs	r3, r3, #10
 8002f64:	617b      	str	r3, [r7, #20]
 8002f66:	687b      	ldr	r3, [r7, #4]
 8002f68:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002f6a:	613b      	str	r3, [r7, #16]
 8002f6c:	693b      	ldr	r3, [r7, #16]
 8002f6e:	681b      	ldr	r3, [r3, #0]
 8002f70:	60fb      	str	r3, [r7, #12]
 8002f72:	687b      	ldr	r3, [r7, #4]
 8002f74:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002f76:	2208      	movs	r2, #8
 8002f78:	409a      	lsls	r2, r3
 8002f7a:	68fb      	ldr	r3, [r7, #12]
 8002f7c:	4013      	ands	r3, r2
 8002f7e:	2b00      	cmp	r3, #0
 8002f80:	d01a      	beq.n	8002fb8 <HAL_DMA_IRQHandler+0x6c>
 8002f82:	687b      	ldr	r3, [r7, #4]
 8002f84:	681b      	ldr	r3, [r3, #0]
 8002f86:	681b      	ldr	r3, [r3, #0]
 8002f88:	f003 0304 	and.w	r3, r3, #4
 8002f8c:	2b00      	cmp	r3, #0
 8002f8e:	d013      	beq.n	8002fb8 <HAL_DMA_IRQHandler+0x6c>
 8002f90:	687b      	ldr	r3, [r7, #4]
 8002f92:	681b      	ldr	r3, [r3, #0]
 8002f94:	681a      	ldr	r2, [r3, #0]
 8002f96:	687b      	ldr	r3, [r7, #4]
 8002f98:	681b      	ldr	r3, [r3, #0]
 8002f9a:	f022 0204 	bic.w	r2, r2, #4
 8002f9e:	601a      	str	r2, [r3, #0]
 8002fa0:	687b      	ldr	r3, [r7, #4]
 8002fa2:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002fa4:	2208      	movs	r2, #8
 8002fa6:	409a      	lsls	r2, r3
 8002fa8:	693b      	ldr	r3, [r7, #16]
 8002faa:	609a      	str	r2, [r3, #8]
 8002fac:	687b      	ldr	r3, [r7, #4]
 8002fae:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002fb0:	f043 0201 	orr.w	r2, r3, #1
 8002fb4:	687b      	ldr	r3, [r7, #4]
 8002fb6:	655a      	str	r2, [r3, #84]	@ 0x54
 8002fb8:	687b      	ldr	r3, [r7, #4]
 8002fba:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002fbc:	2201      	movs	r2, #1
 8002fbe:	409a      	lsls	r2, r3
 8002fc0:	68fb      	ldr	r3, [r7, #12]
 8002fc2:	4013      	ands	r3, r2
 8002fc4:	2b00      	cmp	r3, #0
 8002fc6:	d012      	beq.n	8002fee <HAL_DMA_IRQHandler+0xa2>
 8002fc8:	687b      	ldr	r3, [r7, #4]
 8002fca:	681b      	ldr	r3, [r3, #0]
 8002fcc:	695b      	ldr	r3, [r3, #20]
 8002fce:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002fd2:	2b00      	cmp	r3, #0
 8002fd4:	d00b      	beq.n	8002fee <HAL_DMA_IRQHandler+0xa2>
 8002fd6:	687b      	ldr	r3, [r7, #4]
 8002fd8:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002fda:	2201      	movs	r2, #1
 8002fdc:	409a      	lsls	r2, r3
 8002fde:	693b      	ldr	r3, [r7, #16]
 8002fe0:	609a      	str	r2, [r3, #8]
 8002fe2:	687b      	ldr	r3, [r7, #4]
 8002fe4:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002fe6:	f043 0202 	orr.w	r2, r3, #2
 8002fea:	687b      	ldr	r3, [r7, #4]
 8002fec:	655a      	str	r2, [r3, #84]	@ 0x54
 8002fee:	687b      	ldr	r3, [r7, #4]
 8002ff0:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002ff2:	2204      	movs	r2, #4
 8002ff4:	409a      	lsls	r2, r3
 8002ff6:	68fb      	ldr	r3, [r7, #12]
 8002ff8:	4013      	ands	r3, r2
 8002ffa:	2b00      	cmp	r3, #0
 8002ffc:	d012      	beq.n	8003024 <HAL_DMA_IRQHandler+0xd8>
 8002ffe:	687b      	ldr	r3, [r7, #4]
 8003000:	681b      	ldr	r3, [r3, #0]
 8003002:	681b      	ldr	r3, [r3, #0]
 8003004:	f003 0302 	and.w	r3, r3, #2
 8003008:	2b00      	cmp	r3, #0
 800300a:	d00b      	beq.n	8003024 <HAL_DMA_IRQHandler+0xd8>
 800300c:	687b      	ldr	r3, [r7, #4]
 800300e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003010:	2204      	movs	r2, #4
 8003012:	409a      	lsls	r2, r3
 8003014:	693b      	ldr	r3, [r7, #16]
 8003016:	609a      	str	r2, [r3, #8]
 8003018:	687b      	ldr	r3, [r7, #4]
 800301a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800301c:	f043 0204 	orr.w	r2, r3, #4
 8003020:	687b      	ldr	r3, [r7, #4]
 8003022:	655a      	str	r2, [r3, #84]	@ 0x54
 8003024:	687b      	ldr	r3, [r7, #4]
 8003026:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003028:	2210      	movs	r2, #16
 800302a:	409a      	lsls	r2, r3
 800302c:	68fb      	ldr	r3, [r7, #12]
 800302e:	4013      	ands	r3, r2
 8003030:	2b00      	cmp	r3, #0
 8003032:	d043      	beq.n	80030bc <HAL_DMA_IRQHandler+0x170>
 8003034:	687b      	ldr	r3, [r7, #4]
 8003036:	681b      	ldr	r3, [r3, #0]
 8003038:	681b      	ldr	r3, [r3, #0]
 800303a:	f003 0308 	and.w	r3, r3, #8
 800303e:	2b00      	cmp	r3, #0
 8003040:	d03c      	beq.n	80030bc <HAL_DMA_IRQHandler+0x170>
 8003042:	687b      	ldr	r3, [r7, #4]
 8003044:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003046:	2210      	movs	r2, #16
 8003048:	409a      	lsls	r2, r3
 800304a:	693b      	ldr	r3, [r7, #16]
 800304c:	609a      	str	r2, [r3, #8]
 800304e:	687b      	ldr	r3, [r7, #4]
 8003050:	681b      	ldr	r3, [r3, #0]
 8003052:	681b      	ldr	r3, [r3, #0]
 8003054:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8003058:	2b00      	cmp	r3, #0
 800305a:	d018      	beq.n	800308e <HAL_DMA_IRQHandler+0x142>
 800305c:	687b      	ldr	r3, [r7, #4]
 800305e:	681b      	ldr	r3, [r3, #0]
 8003060:	681b      	ldr	r3, [r3, #0]
 8003062:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8003066:	2b00      	cmp	r3, #0
 8003068:	d108      	bne.n	800307c <HAL_DMA_IRQHandler+0x130>
 800306a:	687b      	ldr	r3, [r7, #4]
 800306c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800306e:	2b00      	cmp	r3, #0
 8003070:	d024      	beq.n	80030bc <HAL_DMA_IRQHandler+0x170>
 8003072:	687b      	ldr	r3, [r7, #4]
 8003074:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003076:	6878      	ldr	r0, [r7, #4]
 8003078:	4798      	blx	r3
 800307a:	e01f      	b.n	80030bc <HAL_DMA_IRQHandler+0x170>
 800307c:	687b      	ldr	r3, [r7, #4]
 800307e:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8003080:	2b00      	cmp	r3, #0
 8003082:	d01b      	beq.n	80030bc <HAL_DMA_IRQHandler+0x170>
 8003084:	687b      	ldr	r3, [r7, #4]
 8003086:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8003088:	6878      	ldr	r0, [r7, #4]
 800308a:	4798      	blx	r3
 800308c:	e016      	b.n	80030bc <HAL_DMA_IRQHandler+0x170>
 800308e:	687b      	ldr	r3, [r7, #4]
 8003090:	681b      	ldr	r3, [r3, #0]
 8003092:	681b      	ldr	r3, [r3, #0]
 8003094:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003098:	2b00      	cmp	r3, #0
 800309a:	d107      	bne.n	80030ac <HAL_DMA_IRQHandler+0x160>
 800309c:	687b      	ldr	r3, [r7, #4]
 800309e:	681b      	ldr	r3, [r3, #0]
 80030a0:	681a      	ldr	r2, [r3, #0]
 80030a2:	687b      	ldr	r3, [r7, #4]
 80030a4:	681b      	ldr	r3, [r3, #0]
 80030a6:	f022 0208 	bic.w	r2, r2, #8
 80030aa:	601a      	str	r2, [r3, #0]
 80030ac:	687b      	ldr	r3, [r7, #4]
 80030ae:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80030b0:	2b00      	cmp	r3, #0
 80030b2:	d003      	beq.n	80030bc <HAL_DMA_IRQHandler+0x170>
 80030b4:	687b      	ldr	r3, [r7, #4]
 80030b6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80030b8:	6878      	ldr	r0, [r7, #4]
 80030ba:	4798      	blx	r3
 80030bc:	687b      	ldr	r3, [r7, #4]
 80030be:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80030c0:	2220      	movs	r2, #32
 80030c2:	409a      	lsls	r2, r3
 80030c4:	68fb      	ldr	r3, [r7, #12]
 80030c6:	4013      	ands	r3, r2
 80030c8:	2b00      	cmp	r3, #0
 80030ca:	f000 808f 	beq.w	80031ec <HAL_DMA_IRQHandler+0x2a0>
 80030ce:	687b      	ldr	r3, [r7, #4]
 80030d0:	681b      	ldr	r3, [r3, #0]
 80030d2:	681b      	ldr	r3, [r3, #0]
 80030d4:	f003 0310 	and.w	r3, r3, #16
 80030d8:	2b00      	cmp	r3, #0
 80030da:	f000 8087 	beq.w	80031ec <HAL_DMA_IRQHandler+0x2a0>
 80030de:	687b      	ldr	r3, [r7, #4]
 80030e0:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80030e2:	2220      	movs	r2, #32
 80030e4:	409a      	lsls	r2, r3
 80030e6:	693b      	ldr	r3, [r7, #16]
 80030e8:	609a      	str	r2, [r3, #8]
 80030ea:	687b      	ldr	r3, [r7, #4]
 80030ec:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 80030f0:	b2db      	uxtb	r3, r3
 80030f2:	2b05      	cmp	r3, #5
 80030f4:	d136      	bne.n	8003164 <HAL_DMA_IRQHandler+0x218>
 80030f6:	687b      	ldr	r3, [r7, #4]
 80030f8:	681b      	ldr	r3, [r3, #0]
 80030fa:	681a      	ldr	r2, [r3, #0]
 80030fc:	687b      	ldr	r3, [r7, #4]
 80030fe:	681b      	ldr	r3, [r3, #0]
 8003100:	f022 0216 	bic.w	r2, r2, #22
 8003104:	601a      	str	r2, [r3, #0]
 8003106:	687b      	ldr	r3, [r7, #4]
 8003108:	681b      	ldr	r3, [r3, #0]
 800310a:	695a      	ldr	r2, [r3, #20]
 800310c:	687b      	ldr	r3, [r7, #4]
 800310e:	681b      	ldr	r3, [r3, #0]
 8003110:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8003114:	615a      	str	r2, [r3, #20]
 8003116:	687b      	ldr	r3, [r7, #4]
 8003118:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800311a:	2b00      	cmp	r3, #0
 800311c:	d103      	bne.n	8003126 <HAL_DMA_IRQHandler+0x1da>
 800311e:	687b      	ldr	r3, [r7, #4]
 8003120:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8003122:	2b00      	cmp	r3, #0
 8003124:	d007      	beq.n	8003136 <HAL_DMA_IRQHandler+0x1ea>
 8003126:	687b      	ldr	r3, [r7, #4]
 8003128:	681b      	ldr	r3, [r3, #0]
 800312a:	681a      	ldr	r2, [r3, #0]
 800312c:	687b      	ldr	r3, [r7, #4]
 800312e:	681b      	ldr	r3, [r3, #0]
 8003130:	f022 0208 	bic.w	r2, r2, #8
 8003134:	601a      	str	r2, [r3, #0]
 8003136:	687b      	ldr	r3, [r7, #4]
 8003138:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800313a:	223f      	movs	r2, #63	@ 0x3f
 800313c:	409a      	lsls	r2, r3
 800313e:	693b      	ldr	r3, [r7, #16]
 8003140:	609a      	str	r2, [r3, #8]
 8003142:	687b      	ldr	r3, [r7, #4]
 8003144:	2201      	movs	r2, #1
 8003146:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
 800314a:	687b      	ldr	r3, [r7, #4]
 800314c:	2200      	movs	r2, #0
 800314e:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
 8003152:	687b      	ldr	r3, [r7, #4]
 8003154:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8003156:	2b00      	cmp	r3, #0
 8003158:	d07e      	beq.n	8003258 <HAL_DMA_IRQHandler+0x30c>
 800315a:	687b      	ldr	r3, [r7, #4]
 800315c:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800315e:	6878      	ldr	r0, [r7, #4]
 8003160:	4798      	blx	r3
 8003162:	e079      	b.n	8003258 <HAL_DMA_IRQHandler+0x30c>
 8003164:	687b      	ldr	r3, [r7, #4]
 8003166:	681b      	ldr	r3, [r3, #0]
 8003168:	681b      	ldr	r3, [r3, #0]
 800316a:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 800316e:	2b00      	cmp	r3, #0
 8003170:	d01d      	beq.n	80031ae <HAL_DMA_IRQHandler+0x262>
 8003172:	687b      	ldr	r3, [r7, #4]
 8003174:	681b      	ldr	r3, [r3, #0]
 8003176:	681b      	ldr	r3, [r3, #0]
 8003178:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 800317c:	2b00      	cmp	r3, #0
 800317e:	d10d      	bne.n	800319c <HAL_DMA_IRQHandler+0x250>
 8003180:	687b      	ldr	r3, [r7, #4]
 8003182:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003184:	2b00      	cmp	r3, #0
 8003186:	d031      	beq.n	80031ec <HAL_DMA_IRQHandler+0x2a0>
 8003188:	687b      	ldr	r3, [r7, #4]
 800318a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800318c:	6878      	ldr	r0, [r7, #4]
 800318e:	4798      	blx	r3
 8003190:	e02c      	b.n	80031ec <HAL_DMA_IRQHandler+0x2a0>
 8003192:	bf00      	nop
 8003194:	20000000 	.word	0x20000000
 8003198:	1b4e81b5 	.word	0x1b4e81b5
 800319c:	687b      	ldr	r3, [r7, #4]
 800319e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80031a0:	2b00      	cmp	r3, #0
 80031a2:	d023      	beq.n	80031ec <HAL_DMA_IRQHandler+0x2a0>
 80031a4:	687b      	ldr	r3, [r7, #4]
 80031a6:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80031a8:	6878      	ldr	r0, [r7, #4]
 80031aa:	4798      	blx	r3
 80031ac:	e01e      	b.n	80031ec <HAL_DMA_IRQHandler+0x2a0>
 80031ae:	687b      	ldr	r3, [r7, #4]
 80031b0:	681b      	ldr	r3, [r3, #0]
 80031b2:	681b      	ldr	r3, [r3, #0]
 80031b4:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80031b8:	2b00      	cmp	r3, #0
 80031ba:	d10f      	bne.n	80031dc <HAL_DMA_IRQHandler+0x290>
 80031bc:	687b      	ldr	r3, [r7, #4]
 80031be:	681b      	ldr	r3, [r3, #0]
 80031c0:	681a      	ldr	r2, [r3, #0]
 80031c2:	687b      	ldr	r3, [r7, #4]
 80031c4:	681b      	ldr	r3, [r3, #0]
 80031c6:	f022 0210 	bic.w	r2, r2, #16
 80031ca:	601a      	str	r2, [r3, #0]
 80031cc:	687b      	ldr	r3, [r7, #4]
 80031ce:	2201      	movs	r2, #1
 80031d0:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
 80031d4:	687b      	ldr	r3, [r7, #4]
 80031d6:	2200      	movs	r2, #0
 80031d8:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
 80031dc:	687b      	ldr	r3, [r7, #4]
 80031de:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80031e0:	2b00      	cmp	r3, #0
 80031e2:	d003      	beq.n	80031ec <HAL_DMA_IRQHandler+0x2a0>
 80031e4:	687b      	ldr	r3, [r7, #4]
 80031e6:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80031e8:	6878      	ldr	r0, [r7, #4]
 80031ea:	4798      	blx	r3
 80031ec:	687b      	ldr	r3, [r7, #4]
 80031ee:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80031f0:	2b00      	cmp	r3, #0
 80031f2:	d032      	beq.n	800325a <HAL_DMA_IRQHandler+0x30e>
 80031f4:	687b      	ldr	r3, [r7, #4]
 80031f6:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80031f8:	f003 0301 	and.w	r3, r3, #1
 80031fc:	2b00      	cmp	r3, #0
 80031fe:	d022      	beq.n	8003246 <HAL_DMA_IRQHandler+0x2fa>
 8003200:	687b      	ldr	r3, [r7, #4]
 8003202:	2205      	movs	r2, #5
 8003204:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
 8003208:	687b      	ldr	r3, [r7, #4]
 800320a:	681b      	ldr	r3, [r3, #0]
 800320c:	681a      	ldr	r2, [r3, #0]
 800320e:	687b      	ldr	r3, [r7, #4]
 8003210:	681b      	ldr	r3, [r3, #0]
 8003212:	f022 0201 	bic.w	r2, r2, #1
 8003216:	601a      	str	r2, [r3, #0]
 8003218:	68bb      	ldr	r3, [r7, #8]
 800321a:	3301      	adds	r3, #1
 800321c:	60bb      	str	r3, [r7, #8]
 800321e:	697a      	ldr	r2, [r7, #20]
 8003220:	429a      	cmp	r2, r3
 8003222:	d307      	bcc.n	8003234 <HAL_DMA_IRQHandler+0x2e8>
 8003224:	687b      	ldr	r3, [r7, #4]
 8003226:	681b      	ldr	r3, [r3, #0]
 8003228:	681b      	ldr	r3, [r3, #0]
 800322a:	f003 0301 	and.w	r3, r3, #1
 800322e:	2b00      	cmp	r3, #0
 8003230:	d1f2      	bne.n	8003218 <HAL_DMA_IRQHandler+0x2cc>
 8003232:	e000      	b.n	8003236 <HAL_DMA_IRQHandler+0x2ea>
 8003234:	bf00      	nop
 8003236:	687b      	ldr	r3, [r7, #4]
 8003238:	2201      	movs	r2, #1
 800323a:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
 800323e:	687b      	ldr	r3, [r7, #4]
 8003240:	2200      	movs	r2, #0
 8003242:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
 8003246:	687b      	ldr	r3, [r7, #4]
 8003248:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800324a:	2b00      	cmp	r3, #0
 800324c:	d005      	beq.n	800325a <HAL_DMA_IRQHandler+0x30e>
 800324e:	687b      	ldr	r3, [r7, #4]
 8003250:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003252:	6878      	ldr	r0, [r7, #4]
 8003254:	4798      	blx	r3
 8003256:	e000      	b.n	800325a <HAL_DMA_IRQHandler+0x30e>
 8003258:	bf00      	nop
 800325a:	3718      	adds	r7, #24
 800325c:	46bd      	mov	sp, r7
 800325e:	bd80      	pop	{r7, pc}

08003260 <DMA_SetConfig>:
 8003260:	b480      	push	{r7}
 8003262:	b085      	sub	sp, #20
 8003264:	af00      	add	r7, sp, #0
 8003266:	60f8      	str	r0, [r7, #12]
 8003268:	60b9      	str	r1, [r7, #8]
 800326a:	607a      	str	r2, [r7, #4]
 800326c:	603b      	str	r3, [r7, #0]
 800326e:	68fb      	ldr	r3, [r7, #12]
 8003270:	681b      	ldr	r3, [r3, #0]
 8003272:	681a      	ldr	r2, [r3, #0]
 8003274:	68fb      	ldr	r3, [r7, #12]
 8003276:	681b      	ldr	r3, [r3, #0]
 8003278:	f422 2280 	bic.w	r2, r2, #262144	@ 0x40000
 800327c:	601a      	str	r2, [r3, #0]
 800327e:	68fb      	ldr	r3, [r7, #12]
 8003280:	681b      	ldr	r3, [r3, #0]
 8003282:	683a      	ldr	r2, [r7, #0]
 8003284:	605a      	str	r2, [r3, #4]
 8003286:	68fb      	ldr	r3, [r7, #12]
 8003288:	689b      	ldr	r3, [r3, #8]
 800328a:	2b40      	cmp	r3, #64	@ 0x40
 800328c:	d108      	bne.n	80032a0 <DMA_SetConfig+0x40>
 800328e:	68fb      	ldr	r3, [r7, #12]
 8003290:	681b      	ldr	r3, [r3, #0]
 8003292:	687a      	ldr	r2, [r7, #4]
 8003294:	609a      	str	r2, [r3, #8]
 8003296:	68fb      	ldr	r3, [r7, #12]
 8003298:	681b      	ldr	r3, [r3, #0]
 800329a:	68ba      	ldr	r2, [r7, #8]
 800329c:	60da      	str	r2, [r3, #12]
 800329e:	e007      	b.n	80032b0 <DMA_SetConfig+0x50>
 80032a0:	68fb      	ldr	r3, [r7, #12]
 80032a2:	681b      	ldr	r3, [r3, #0]
 80032a4:	68ba      	ldr	r2, [r7, #8]
 80032a6:	609a      	str	r2, [r3, #8]
 80032a8:	68fb      	ldr	r3, [r7, #12]
 80032aa:	681b      	ldr	r3, [r3, #0]
 80032ac:	687a      	ldr	r2, [r7, #4]
 80032ae:	60da      	str	r2, [r3, #12]
 80032b0:	bf00      	nop
 80032b2:	3714      	adds	r7, #20
 80032b4:	46bd      	mov	sp, r7
 80032b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032ba:	4770      	bx	lr

080032bc <DMA_CalcBaseAndBitshift>:
 80032bc:	b480      	push	{r7}
 80032be:	b085      	sub	sp, #20
 80032c0:	af00      	add	r7, sp, #0
 80032c2:	6078      	str	r0, [r7, #4]
 80032c4:	687b      	ldr	r3, [r7, #4]
 80032c6:	681b      	ldr	r3, [r3, #0]
 80032c8:	b2db      	uxtb	r3, r3
 80032ca:	3b10      	subs	r3, #16
 80032cc:	4a14      	ldr	r2, [pc, #80]	@ (8003320 <DMA_CalcBaseAndBitshift+0x64>)
 80032ce:	fba2 2303 	umull	r2, r3, r2, r3
 80032d2:	091b      	lsrs	r3, r3, #4
 80032d4:	60fb      	str	r3, [r7, #12]
 80032d6:	4a13      	ldr	r2, [pc, #76]	@ (8003324 <DMA_CalcBaseAndBitshift+0x68>)
 80032d8:	68fb      	ldr	r3, [r7, #12]
 80032da:	4413      	add	r3, r2
 80032dc:	781b      	ldrb	r3, [r3, #0]
 80032de:	461a      	mov	r2, r3
 80032e0:	687b      	ldr	r3, [r7, #4]
 80032e2:	65da      	str	r2, [r3, #92]	@ 0x5c
 80032e4:	68fb      	ldr	r3, [r7, #12]
 80032e6:	2b03      	cmp	r3, #3
 80032e8:	d909      	bls.n	80032fe <DMA_CalcBaseAndBitshift+0x42>
 80032ea:	687b      	ldr	r3, [r7, #4]
 80032ec:	681b      	ldr	r3, [r3, #0]
 80032ee:	f423 737f 	bic.w	r3, r3, #1020	@ 0x3fc
 80032f2:	f023 0303 	bic.w	r3, r3, #3
 80032f6:	1d1a      	adds	r2, r3, #4
 80032f8:	687b      	ldr	r3, [r7, #4]
 80032fa:	659a      	str	r2, [r3, #88]	@ 0x58
 80032fc:	e007      	b.n	800330e <DMA_CalcBaseAndBitshift+0x52>
 80032fe:	687b      	ldr	r3, [r7, #4]
 8003300:	681b      	ldr	r3, [r3, #0]
 8003302:	f423 737f 	bic.w	r3, r3, #1020	@ 0x3fc
 8003306:	f023 0303 	bic.w	r3, r3, #3
 800330a:	687a      	ldr	r2, [r7, #4]
 800330c:	6593      	str	r3, [r2, #88]	@ 0x58
 800330e:	687b      	ldr	r3, [r7, #4]
 8003310:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003312:	4618      	mov	r0, r3
 8003314:	3714      	adds	r7, #20
 8003316:	46bd      	mov	sp, r7
 8003318:	f85d 7b04 	ldr.w	r7, [sp], #4
 800331c:	4770      	bx	lr
 800331e:	bf00      	nop
 8003320:	aaaaaaab 	.word	0xaaaaaaab
 8003324:	0800a348 	.word	0x0800a348

08003328 <DMA_CheckFifoParam>:
 8003328:	b480      	push	{r7}
 800332a:	b085      	sub	sp, #20
 800332c:	af00      	add	r7, sp, #0
 800332e:	6078      	str	r0, [r7, #4]
 8003330:	2300      	movs	r3, #0
 8003332:	73fb      	strb	r3, [r7, #15]
 8003334:	687b      	ldr	r3, [r7, #4]
 8003336:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003338:	60bb      	str	r3, [r7, #8]
 800333a:	687b      	ldr	r3, [r7, #4]
 800333c:	699b      	ldr	r3, [r3, #24]
 800333e:	2b00      	cmp	r3, #0
 8003340:	d11f      	bne.n	8003382 <DMA_CheckFifoParam+0x5a>
 8003342:	68bb      	ldr	r3, [r7, #8]
 8003344:	2b03      	cmp	r3, #3
 8003346:	d856      	bhi.n	80033f6 <DMA_CheckFifoParam+0xce>
 8003348:	a201      	add	r2, pc, #4	@ (adr r2, 8003350 <DMA_CheckFifoParam+0x28>)
 800334a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800334e:	bf00      	nop
 8003350:	08003361 	.word	0x08003361
 8003354:	08003373 	.word	0x08003373
 8003358:	08003361 	.word	0x08003361
 800335c:	080033f7 	.word	0x080033f7
 8003360:	687b      	ldr	r3, [r7, #4]
 8003362:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003364:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8003368:	2b00      	cmp	r3, #0
 800336a:	d046      	beq.n	80033fa <DMA_CheckFifoParam+0xd2>
 800336c:	2301      	movs	r3, #1
 800336e:	73fb      	strb	r3, [r7, #15]
 8003370:	e043      	b.n	80033fa <DMA_CheckFifoParam+0xd2>
 8003372:	687b      	ldr	r3, [r7, #4]
 8003374:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003376:	f1b3 7fc0 	cmp.w	r3, #25165824	@ 0x1800000
 800337a:	d140      	bne.n	80033fe <DMA_CheckFifoParam+0xd6>
 800337c:	2301      	movs	r3, #1
 800337e:	73fb      	strb	r3, [r7, #15]
 8003380:	e03d      	b.n	80033fe <DMA_CheckFifoParam+0xd6>
 8003382:	687b      	ldr	r3, [r7, #4]
 8003384:	699b      	ldr	r3, [r3, #24]
 8003386:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800338a:	d121      	bne.n	80033d0 <DMA_CheckFifoParam+0xa8>
 800338c:	68bb      	ldr	r3, [r7, #8]
 800338e:	2b03      	cmp	r3, #3
 8003390:	d837      	bhi.n	8003402 <DMA_CheckFifoParam+0xda>
 8003392:	a201      	add	r2, pc, #4	@ (adr r2, 8003398 <DMA_CheckFifoParam+0x70>)
 8003394:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003398:	080033a9 	.word	0x080033a9
 800339c:	080033af 	.word	0x080033af
 80033a0:	080033a9 	.word	0x080033a9
 80033a4:	080033c1 	.word	0x080033c1
 80033a8:	2301      	movs	r3, #1
 80033aa:	73fb      	strb	r3, [r7, #15]
 80033ac:	e030      	b.n	8003410 <DMA_CheckFifoParam+0xe8>
 80033ae:	687b      	ldr	r3, [r7, #4]
 80033b0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80033b2:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 80033b6:	2b00      	cmp	r3, #0
 80033b8:	d025      	beq.n	8003406 <DMA_CheckFifoParam+0xde>
 80033ba:	2301      	movs	r3, #1
 80033bc:	73fb      	strb	r3, [r7, #15]
 80033be:	e022      	b.n	8003406 <DMA_CheckFifoParam+0xde>
 80033c0:	687b      	ldr	r3, [r7, #4]
 80033c2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80033c4:	f1b3 7fc0 	cmp.w	r3, #25165824	@ 0x1800000
 80033c8:	d11f      	bne.n	800340a <DMA_CheckFifoParam+0xe2>
 80033ca:	2301      	movs	r3, #1
 80033cc:	73fb      	strb	r3, [r7, #15]
 80033ce:	e01c      	b.n	800340a <DMA_CheckFifoParam+0xe2>
 80033d0:	68bb      	ldr	r3, [r7, #8]
 80033d2:	2b02      	cmp	r3, #2
 80033d4:	d903      	bls.n	80033de <DMA_CheckFifoParam+0xb6>
 80033d6:	68bb      	ldr	r3, [r7, #8]
 80033d8:	2b03      	cmp	r3, #3
 80033da:	d003      	beq.n	80033e4 <DMA_CheckFifoParam+0xbc>
 80033dc:	e018      	b.n	8003410 <DMA_CheckFifoParam+0xe8>
 80033de:	2301      	movs	r3, #1
 80033e0:	73fb      	strb	r3, [r7, #15]
 80033e2:	e015      	b.n	8003410 <DMA_CheckFifoParam+0xe8>
 80033e4:	687b      	ldr	r3, [r7, #4]
 80033e6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80033e8:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 80033ec:	2b00      	cmp	r3, #0
 80033ee:	d00e      	beq.n	800340e <DMA_CheckFifoParam+0xe6>
 80033f0:	2301      	movs	r3, #1
 80033f2:	73fb      	strb	r3, [r7, #15]
 80033f4:	e00b      	b.n	800340e <DMA_CheckFifoParam+0xe6>
 80033f6:	bf00      	nop
 80033f8:	e00a      	b.n	8003410 <DMA_CheckFifoParam+0xe8>
 80033fa:	bf00      	nop
 80033fc:	e008      	b.n	8003410 <DMA_CheckFifoParam+0xe8>
 80033fe:	bf00      	nop
 8003400:	e006      	b.n	8003410 <DMA_CheckFifoParam+0xe8>
 8003402:	bf00      	nop
 8003404:	e004      	b.n	8003410 <DMA_CheckFifoParam+0xe8>
 8003406:	bf00      	nop
 8003408:	e002      	b.n	8003410 <DMA_CheckFifoParam+0xe8>
 800340a:	bf00      	nop
 800340c:	e000      	b.n	8003410 <DMA_CheckFifoParam+0xe8>
 800340e:	bf00      	nop
 8003410:	7bfb      	ldrb	r3, [r7, #15]
 8003412:	4618      	mov	r0, r3
 8003414:	3714      	adds	r7, #20
 8003416:	46bd      	mov	sp, r7
 8003418:	f85d 7b04 	ldr.w	r7, [sp], #4
 800341c:	4770      	bx	lr
 800341e:	bf00      	nop

08003420 <HAL_GPIO_Init>:
 8003420:	b480      	push	{r7}
 8003422:	b089      	sub	sp, #36	@ 0x24
 8003424:	af00      	add	r7, sp, #0
 8003426:	6078      	str	r0, [r7, #4]
 8003428:	6039      	str	r1, [r7, #0]
 800342a:	2300      	movs	r3, #0
 800342c:	617b      	str	r3, [r7, #20]
 800342e:	2300      	movs	r3, #0
 8003430:	613b      	str	r3, [r7, #16]
 8003432:	2300      	movs	r3, #0
 8003434:	61bb      	str	r3, [r7, #24]
 8003436:	2300      	movs	r3, #0
 8003438:	61fb      	str	r3, [r7, #28]
 800343a:	e165      	b.n	8003708 <HAL_GPIO_Init+0x2e8>
 800343c:	2201      	movs	r2, #1
 800343e:	69fb      	ldr	r3, [r7, #28]
 8003440:	fa02 f303 	lsl.w	r3, r2, r3
 8003444:	617b      	str	r3, [r7, #20]
 8003446:	683b      	ldr	r3, [r7, #0]
 8003448:	681b      	ldr	r3, [r3, #0]
 800344a:	697a      	ldr	r2, [r7, #20]
 800344c:	4013      	ands	r3, r2
 800344e:	613b      	str	r3, [r7, #16]
 8003450:	693a      	ldr	r2, [r7, #16]
 8003452:	697b      	ldr	r3, [r7, #20]
 8003454:	429a      	cmp	r2, r3
 8003456:	f040 8154 	bne.w	8003702 <HAL_GPIO_Init+0x2e2>
 800345a:	683b      	ldr	r3, [r7, #0]
 800345c:	685b      	ldr	r3, [r3, #4]
 800345e:	f003 0303 	and.w	r3, r3, #3
 8003462:	2b01      	cmp	r3, #1
 8003464:	d005      	beq.n	8003472 <HAL_GPIO_Init+0x52>
 8003466:	683b      	ldr	r3, [r7, #0]
 8003468:	685b      	ldr	r3, [r3, #4]
 800346a:	f003 0303 	and.w	r3, r3, #3
 800346e:	2b02      	cmp	r3, #2
 8003470:	d130      	bne.n	80034d4 <HAL_GPIO_Init+0xb4>
 8003472:	687b      	ldr	r3, [r7, #4]
 8003474:	689b      	ldr	r3, [r3, #8]
 8003476:	61bb      	str	r3, [r7, #24]
 8003478:	69fb      	ldr	r3, [r7, #28]
 800347a:	005b      	lsls	r3, r3, #1
 800347c:	2203      	movs	r2, #3
 800347e:	fa02 f303 	lsl.w	r3, r2, r3
 8003482:	43db      	mvns	r3, r3
 8003484:	69ba      	ldr	r2, [r7, #24]
 8003486:	4013      	ands	r3, r2
 8003488:	61bb      	str	r3, [r7, #24]
 800348a:	683b      	ldr	r3, [r7, #0]
 800348c:	68da      	ldr	r2, [r3, #12]
 800348e:	69fb      	ldr	r3, [r7, #28]
 8003490:	005b      	lsls	r3, r3, #1
 8003492:	fa02 f303 	lsl.w	r3, r2, r3
 8003496:	69ba      	ldr	r2, [r7, #24]
 8003498:	4313      	orrs	r3, r2
 800349a:	61bb      	str	r3, [r7, #24]
 800349c:	687b      	ldr	r3, [r7, #4]
 800349e:	69ba      	ldr	r2, [r7, #24]
 80034a0:	609a      	str	r2, [r3, #8]
 80034a2:	687b      	ldr	r3, [r7, #4]
 80034a4:	685b      	ldr	r3, [r3, #4]
 80034a6:	61bb      	str	r3, [r7, #24]
 80034a8:	2201      	movs	r2, #1
 80034aa:	69fb      	ldr	r3, [r7, #28]
 80034ac:	fa02 f303 	lsl.w	r3, r2, r3
 80034b0:	43db      	mvns	r3, r3
 80034b2:	69ba      	ldr	r2, [r7, #24]
 80034b4:	4013      	ands	r3, r2
 80034b6:	61bb      	str	r3, [r7, #24]
 80034b8:	683b      	ldr	r3, [r7, #0]
 80034ba:	685b      	ldr	r3, [r3, #4]
 80034bc:	091b      	lsrs	r3, r3, #4
 80034be:	f003 0201 	and.w	r2, r3, #1
 80034c2:	69fb      	ldr	r3, [r7, #28]
 80034c4:	fa02 f303 	lsl.w	r3, r2, r3
 80034c8:	69ba      	ldr	r2, [r7, #24]
 80034ca:	4313      	orrs	r3, r2
 80034cc:	61bb      	str	r3, [r7, #24]
 80034ce:	687b      	ldr	r3, [r7, #4]
 80034d0:	69ba      	ldr	r2, [r7, #24]
 80034d2:	605a      	str	r2, [r3, #4]
 80034d4:	683b      	ldr	r3, [r7, #0]
 80034d6:	685b      	ldr	r3, [r3, #4]
 80034d8:	f003 0303 	and.w	r3, r3, #3
 80034dc:	2b03      	cmp	r3, #3
 80034de:	d017      	beq.n	8003510 <HAL_GPIO_Init+0xf0>
 80034e0:	687b      	ldr	r3, [r7, #4]
 80034e2:	68db      	ldr	r3, [r3, #12]
 80034e4:	61bb      	str	r3, [r7, #24]
 80034e6:	69fb      	ldr	r3, [r7, #28]
 80034e8:	005b      	lsls	r3, r3, #1
 80034ea:	2203      	movs	r2, #3
 80034ec:	fa02 f303 	lsl.w	r3, r2, r3
 80034f0:	43db      	mvns	r3, r3
 80034f2:	69ba      	ldr	r2, [r7, #24]
 80034f4:	4013      	ands	r3, r2
 80034f6:	61bb      	str	r3, [r7, #24]
 80034f8:	683b      	ldr	r3, [r7, #0]
 80034fa:	689a      	ldr	r2, [r3, #8]
 80034fc:	69fb      	ldr	r3, [r7, #28]
 80034fe:	005b      	lsls	r3, r3, #1
 8003500:	fa02 f303 	lsl.w	r3, r2, r3
 8003504:	69ba      	ldr	r2, [r7, #24]
 8003506:	4313      	orrs	r3, r2
 8003508:	61bb      	str	r3, [r7, #24]
 800350a:	687b      	ldr	r3, [r7, #4]
 800350c:	69ba      	ldr	r2, [r7, #24]
 800350e:	60da      	str	r2, [r3, #12]
 8003510:	683b      	ldr	r3, [r7, #0]
 8003512:	685b      	ldr	r3, [r3, #4]
 8003514:	f003 0303 	and.w	r3, r3, #3
 8003518:	2b02      	cmp	r3, #2
 800351a:	d123      	bne.n	8003564 <HAL_GPIO_Init+0x144>
 800351c:	69fb      	ldr	r3, [r7, #28]
 800351e:	08da      	lsrs	r2, r3, #3
 8003520:	687b      	ldr	r3, [r7, #4]
 8003522:	3208      	adds	r2, #8
 8003524:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8003528:	61bb      	str	r3, [r7, #24]
 800352a:	69fb      	ldr	r3, [r7, #28]
 800352c:	f003 0307 	and.w	r3, r3, #7
 8003530:	009b      	lsls	r3, r3, #2
 8003532:	220f      	movs	r2, #15
 8003534:	fa02 f303 	lsl.w	r3, r2, r3
 8003538:	43db      	mvns	r3, r3
 800353a:	69ba      	ldr	r2, [r7, #24]
 800353c:	4013      	ands	r3, r2
 800353e:	61bb      	str	r3, [r7, #24]
 8003540:	683b      	ldr	r3, [r7, #0]
 8003542:	691a      	ldr	r2, [r3, #16]
 8003544:	69fb      	ldr	r3, [r7, #28]
 8003546:	f003 0307 	and.w	r3, r3, #7
 800354a:	009b      	lsls	r3, r3, #2
 800354c:	fa02 f303 	lsl.w	r3, r2, r3
 8003550:	69ba      	ldr	r2, [r7, #24]
 8003552:	4313      	orrs	r3, r2
 8003554:	61bb      	str	r3, [r7, #24]
 8003556:	69fb      	ldr	r3, [r7, #28]
 8003558:	08da      	lsrs	r2, r3, #3
 800355a:	687b      	ldr	r3, [r7, #4]
 800355c:	3208      	adds	r2, #8
 800355e:	69b9      	ldr	r1, [r7, #24]
 8003560:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
 8003564:	687b      	ldr	r3, [r7, #4]
 8003566:	681b      	ldr	r3, [r3, #0]
 8003568:	61bb      	str	r3, [r7, #24]
 800356a:	69fb      	ldr	r3, [r7, #28]
 800356c:	005b      	lsls	r3, r3, #1
 800356e:	2203      	movs	r2, #3
 8003570:	fa02 f303 	lsl.w	r3, r2, r3
 8003574:	43db      	mvns	r3, r3
 8003576:	69ba      	ldr	r2, [r7, #24]
 8003578:	4013      	ands	r3, r2
 800357a:	61bb      	str	r3, [r7, #24]
 800357c:	683b      	ldr	r3, [r7, #0]
 800357e:	685b      	ldr	r3, [r3, #4]
 8003580:	f003 0203 	and.w	r2, r3, #3
 8003584:	69fb      	ldr	r3, [r7, #28]
 8003586:	005b      	lsls	r3, r3, #1
 8003588:	fa02 f303 	lsl.w	r3, r2, r3
 800358c:	69ba      	ldr	r2, [r7, #24]
 800358e:	4313      	orrs	r3, r2
 8003590:	61bb      	str	r3, [r7, #24]
 8003592:	687b      	ldr	r3, [r7, #4]
 8003594:	69ba      	ldr	r2, [r7, #24]
 8003596:	601a      	str	r2, [r3, #0]
 8003598:	683b      	ldr	r3, [r7, #0]
 800359a:	685b      	ldr	r3, [r3, #4]
 800359c:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 80035a0:	2b00      	cmp	r3, #0
 80035a2:	f000 80ae 	beq.w	8003702 <HAL_GPIO_Init+0x2e2>
 80035a6:	2300      	movs	r3, #0
 80035a8:	60fb      	str	r3, [r7, #12]
 80035aa:	4b5d      	ldr	r3, [pc, #372]	@ (8003720 <HAL_GPIO_Init+0x300>)
 80035ac:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80035ae:	4a5c      	ldr	r2, [pc, #368]	@ (8003720 <HAL_GPIO_Init+0x300>)
 80035b0:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80035b4:	6453      	str	r3, [r2, #68]	@ 0x44
 80035b6:	4b5a      	ldr	r3, [pc, #360]	@ (8003720 <HAL_GPIO_Init+0x300>)
 80035b8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80035ba:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80035be:	60fb      	str	r3, [r7, #12]
 80035c0:	68fb      	ldr	r3, [r7, #12]
 80035c2:	4a58      	ldr	r2, [pc, #352]	@ (8003724 <HAL_GPIO_Init+0x304>)
 80035c4:	69fb      	ldr	r3, [r7, #28]
 80035c6:	089b      	lsrs	r3, r3, #2
 80035c8:	3302      	adds	r3, #2
 80035ca:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80035ce:	61bb      	str	r3, [r7, #24]
 80035d0:	69fb      	ldr	r3, [r7, #28]
 80035d2:	f003 0303 	and.w	r3, r3, #3
 80035d6:	009b      	lsls	r3, r3, #2
 80035d8:	220f      	movs	r2, #15
 80035da:	fa02 f303 	lsl.w	r3, r2, r3
 80035de:	43db      	mvns	r3, r3
 80035e0:	69ba      	ldr	r2, [r7, #24]
 80035e2:	4013      	ands	r3, r2
 80035e4:	61bb      	str	r3, [r7, #24]
 80035e6:	687b      	ldr	r3, [r7, #4]
 80035e8:	4a4f      	ldr	r2, [pc, #316]	@ (8003728 <HAL_GPIO_Init+0x308>)
 80035ea:	4293      	cmp	r3, r2
 80035ec:	d025      	beq.n	800363a <HAL_GPIO_Init+0x21a>
 80035ee:	687b      	ldr	r3, [r7, #4]
 80035f0:	4a4e      	ldr	r2, [pc, #312]	@ (800372c <HAL_GPIO_Init+0x30c>)
 80035f2:	4293      	cmp	r3, r2
 80035f4:	d01f      	beq.n	8003636 <HAL_GPIO_Init+0x216>
 80035f6:	687b      	ldr	r3, [r7, #4]
 80035f8:	4a4d      	ldr	r2, [pc, #308]	@ (8003730 <HAL_GPIO_Init+0x310>)
 80035fa:	4293      	cmp	r3, r2
 80035fc:	d019      	beq.n	8003632 <HAL_GPIO_Init+0x212>
 80035fe:	687b      	ldr	r3, [r7, #4]
 8003600:	4a4c      	ldr	r2, [pc, #304]	@ (8003734 <HAL_GPIO_Init+0x314>)
 8003602:	4293      	cmp	r3, r2
 8003604:	d013      	beq.n	800362e <HAL_GPIO_Init+0x20e>
 8003606:	687b      	ldr	r3, [r7, #4]
 8003608:	4a4b      	ldr	r2, [pc, #300]	@ (8003738 <HAL_GPIO_Init+0x318>)
 800360a:	4293      	cmp	r3, r2
 800360c:	d00d      	beq.n	800362a <HAL_GPIO_Init+0x20a>
 800360e:	687b      	ldr	r3, [r7, #4]
 8003610:	4a4a      	ldr	r2, [pc, #296]	@ (800373c <HAL_GPIO_Init+0x31c>)
 8003612:	4293      	cmp	r3, r2
 8003614:	d007      	beq.n	8003626 <HAL_GPIO_Init+0x206>
 8003616:	687b      	ldr	r3, [r7, #4]
 8003618:	4a49      	ldr	r2, [pc, #292]	@ (8003740 <HAL_GPIO_Init+0x320>)
 800361a:	4293      	cmp	r3, r2
 800361c:	d101      	bne.n	8003622 <HAL_GPIO_Init+0x202>
 800361e:	2306      	movs	r3, #6
 8003620:	e00c      	b.n	800363c <HAL_GPIO_Init+0x21c>
 8003622:	2307      	movs	r3, #7
 8003624:	e00a      	b.n	800363c <HAL_GPIO_Init+0x21c>
 8003626:	2305      	movs	r3, #5
 8003628:	e008      	b.n	800363c <HAL_GPIO_Init+0x21c>
 800362a:	2304      	movs	r3, #4
 800362c:	e006      	b.n	800363c <HAL_GPIO_Init+0x21c>
 800362e:	2303      	movs	r3, #3
 8003630:	e004      	b.n	800363c <HAL_GPIO_Init+0x21c>
 8003632:	2302      	movs	r3, #2
 8003634:	e002      	b.n	800363c <HAL_GPIO_Init+0x21c>
 8003636:	2301      	movs	r3, #1
 8003638:	e000      	b.n	800363c <HAL_GPIO_Init+0x21c>
 800363a:	2300      	movs	r3, #0
 800363c:	69fa      	ldr	r2, [r7, #28]
 800363e:	f002 0203 	and.w	r2, r2, #3
 8003642:	0092      	lsls	r2, r2, #2
 8003644:	4093      	lsls	r3, r2
 8003646:	69ba      	ldr	r2, [r7, #24]
 8003648:	4313      	orrs	r3, r2
 800364a:	61bb      	str	r3, [r7, #24]
 800364c:	4935      	ldr	r1, [pc, #212]	@ (8003724 <HAL_GPIO_Init+0x304>)
 800364e:	69fb      	ldr	r3, [r7, #28]
 8003650:	089b      	lsrs	r3, r3, #2
 8003652:	3302      	adds	r3, #2
 8003654:	69ba      	ldr	r2, [r7, #24]
 8003656:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
 800365a:	4b3a      	ldr	r3, [pc, #232]	@ (8003744 <HAL_GPIO_Init+0x324>)
 800365c:	689b      	ldr	r3, [r3, #8]
 800365e:	61bb      	str	r3, [r7, #24]
 8003660:	693b      	ldr	r3, [r7, #16]
 8003662:	43db      	mvns	r3, r3
 8003664:	69ba      	ldr	r2, [r7, #24]
 8003666:	4013      	ands	r3, r2
 8003668:	61bb      	str	r3, [r7, #24]
 800366a:	683b      	ldr	r3, [r7, #0]
 800366c:	685b      	ldr	r3, [r3, #4]
 800366e:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8003672:	2b00      	cmp	r3, #0
 8003674:	d003      	beq.n	800367e <HAL_GPIO_Init+0x25e>
 8003676:	69ba      	ldr	r2, [r7, #24]
 8003678:	693b      	ldr	r3, [r7, #16]
 800367a:	4313      	orrs	r3, r2
 800367c:	61bb      	str	r3, [r7, #24]
 800367e:	4a31      	ldr	r2, [pc, #196]	@ (8003744 <HAL_GPIO_Init+0x324>)
 8003680:	69bb      	ldr	r3, [r7, #24]
 8003682:	6093      	str	r3, [r2, #8]
 8003684:	4b2f      	ldr	r3, [pc, #188]	@ (8003744 <HAL_GPIO_Init+0x324>)
 8003686:	68db      	ldr	r3, [r3, #12]
 8003688:	61bb      	str	r3, [r7, #24]
 800368a:	693b      	ldr	r3, [r7, #16]
 800368c:	43db      	mvns	r3, r3
 800368e:	69ba      	ldr	r2, [r7, #24]
 8003690:	4013      	ands	r3, r2
 8003692:	61bb      	str	r3, [r7, #24]
 8003694:	683b      	ldr	r3, [r7, #0]
 8003696:	685b      	ldr	r3, [r3, #4]
 8003698:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 800369c:	2b00      	cmp	r3, #0
 800369e:	d003      	beq.n	80036a8 <HAL_GPIO_Init+0x288>
 80036a0:	69ba      	ldr	r2, [r7, #24]
 80036a2:	693b      	ldr	r3, [r7, #16]
 80036a4:	4313      	orrs	r3, r2
 80036a6:	61bb      	str	r3, [r7, #24]
 80036a8:	4a26      	ldr	r2, [pc, #152]	@ (8003744 <HAL_GPIO_Init+0x324>)
 80036aa:	69bb      	ldr	r3, [r7, #24]
 80036ac:	60d3      	str	r3, [r2, #12]
 80036ae:	4b25      	ldr	r3, [pc, #148]	@ (8003744 <HAL_GPIO_Init+0x324>)
 80036b0:	685b      	ldr	r3, [r3, #4]
 80036b2:	61bb      	str	r3, [r7, #24]
 80036b4:	693b      	ldr	r3, [r7, #16]
 80036b6:	43db      	mvns	r3, r3
 80036b8:	69ba      	ldr	r2, [r7, #24]
 80036ba:	4013      	ands	r3, r2
 80036bc:	61bb      	str	r3, [r7, #24]
 80036be:	683b      	ldr	r3, [r7, #0]
 80036c0:	685b      	ldr	r3, [r3, #4]
 80036c2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80036c6:	2b00      	cmp	r3, #0
 80036c8:	d003      	beq.n	80036d2 <HAL_GPIO_Init+0x2b2>
 80036ca:	69ba      	ldr	r2, [r7, #24]
 80036cc:	693b      	ldr	r3, [r7, #16]
 80036ce:	4313      	orrs	r3, r2
 80036d0:	61bb      	str	r3, [r7, #24]
 80036d2:	4a1c      	ldr	r2, [pc, #112]	@ (8003744 <HAL_GPIO_Init+0x324>)
 80036d4:	69bb      	ldr	r3, [r7, #24]
 80036d6:	6053      	str	r3, [r2, #4]
 80036d8:	4b1a      	ldr	r3, [pc, #104]	@ (8003744 <HAL_GPIO_Init+0x324>)
 80036da:	681b      	ldr	r3, [r3, #0]
 80036dc:	61bb      	str	r3, [r7, #24]
 80036de:	693b      	ldr	r3, [r7, #16]
 80036e0:	43db      	mvns	r3, r3
 80036e2:	69ba      	ldr	r2, [r7, #24]
 80036e4:	4013      	ands	r3, r2
 80036e6:	61bb      	str	r3, [r7, #24]
 80036e8:	683b      	ldr	r3, [r7, #0]
 80036ea:	685b      	ldr	r3, [r3, #4]
 80036ec:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80036f0:	2b00      	cmp	r3, #0
 80036f2:	d003      	beq.n	80036fc <HAL_GPIO_Init+0x2dc>
 80036f4:	69ba      	ldr	r2, [r7, #24]
 80036f6:	693b      	ldr	r3, [r7, #16]
 80036f8:	4313      	orrs	r3, r2
 80036fa:	61bb      	str	r3, [r7, #24]
 80036fc:	4a11      	ldr	r2, [pc, #68]	@ (8003744 <HAL_GPIO_Init+0x324>)
 80036fe:	69bb      	ldr	r3, [r7, #24]
 8003700:	6013      	str	r3, [r2, #0]
 8003702:	69fb      	ldr	r3, [r7, #28]
 8003704:	3301      	adds	r3, #1
 8003706:	61fb      	str	r3, [r7, #28]
 8003708:	69fb      	ldr	r3, [r7, #28]
 800370a:	2b0f      	cmp	r3, #15
 800370c:	f67f ae96 	bls.w	800343c <HAL_GPIO_Init+0x1c>
 8003710:	bf00      	nop
 8003712:	bf00      	nop
 8003714:	3724      	adds	r7, #36	@ 0x24
 8003716:	46bd      	mov	sp, r7
 8003718:	f85d 7b04 	ldr.w	r7, [sp], #4
 800371c:	4770      	bx	lr
 800371e:	bf00      	nop
 8003720:	40023800 	.word	0x40023800
 8003724:	40013800 	.word	0x40013800
 8003728:	40020000 	.word	0x40020000
 800372c:	40020400 	.word	0x40020400
 8003730:	40020800 	.word	0x40020800
 8003734:	40020c00 	.word	0x40020c00
 8003738:	40021000 	.word	0x40021000
 800373c:	40021400 	.word	0x40021400
 8003740:	40021800 	.word	0x40021800
 8003744:	40013c00 	.word	0x40013c00

08003748 <HAL_GPIO_ReadPin>:
 8003748:	b480      	push	{r7}
 800374a:	b085      	sub	sp, #20
 800374c:	af00      	add	r7, sp, #0
 800374e:	6078      	str	r0, [r7, #4]
 8003750:	460b      	mov	r3, r1
 8003752:	807b      	strh	r3, [r7, #2]
 8003754:	687b      	ldr	r3, [r7, #4]
 8003756:	691a      	ldr	r2, [r3, #16]
 8003758:	887b      	ldrh	r3, [r7, #2]
 800375a:	4013      	ands	r3, r2
 800375c:	2b00      	cmp	r3, #0
 800375e:	d002      	beq.n	8003766 <HAL_GPIO_ReadPin+0x1e>
 8003760:	2301      	movs	r3, #1
 8003762:	73fb      	strb	r3, [r7, #15]
 8003764:	e001      	b.n	800376a <HAL_GPIO_ReadPin+0x22>
 8003766:	2300      	movs	r3, #0
 8003768:	73fb      	strb	r3, [r7, #15]
 800376a:	7bfb      	ldrb	r3, [r7, #15]
 800376c:	4618      	mov	r0, r3
 800376e:	3714      	adds	r7, #20
 8003770:	46bd      	mov	sp, r7
 8003772:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003776:	4770      	bx	lr

08003778 <HAL_GPIO_WritePin>:
 8003778:	b480      	push	{r7}
 800377a:	b083      	sub	sp, #12
 800377c:	af00      	add	r7, sp, #0
 800377e:	6078      	str	r0, [r7, #4]
 8003780:	460b      	mov	r3, r1
 8003782:	807b      	strh	r3, [r7, #2]
 8003784:	4613      	mov	r3, r2
 8003786:	707b      	strb	r3, [r7, #1]
 8003788:	787b      	ldrb	r3, [r7, #1]
 800378a:	2b00      	cmp	r3, #0
 800378c:	d003      	beq.n	8003796 <HAL_GPIO_WritePin+0x1e>
 800378e:	887a      	ldrh	r2, [r7, #2]
 8003790:	687b      	ldr	r3, [r7, #4]
 8003792:	619a      	str	r2, [r3, #24]
 8003794:	e003      	b.n	800379e <HAL_GPIO_WritePin+0x26>
 8003796:	887b      	ldrh	r3, [r7, #2]
 8003798:	041a      	lsls	r2, r3, #16
 800379a:	687b      	ldr	r3, [r7, #4]
 800379c:	619a      	str	r2, [r3, #24]
 800379e:	bf00      	nop
 80037a0:	370c      	adds	r7, #12
 80037a2:	46bd      	mov	sp, r7
 80037a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037a8:	4770      	bx	lr
	...

080037ac <HAL_RCC_ClockConfig>:
 80037ac:	b580      	push	{r7, lr}
 80037ae:	b084      	sub	sp, #16
 80037b0:	af00      	add	r7, sp, #0
 80037b2:	6078      	str	r0, [r7, #4]
 80037b4:	6039      	str	r1, [r7, #0]
 80037b6:	687b      	ldr	r3, [r7, #4]
 80037b8:	2b00      	cmp	r3, #0
 80037ba:	d101      	bne.n	80037c0 <HAL_RCC_ClockConfig+0x14>
 80037bc:	2301      	movs	r3, #1
 80037be:	e0cc      	b.n	800395a <HAL_RCC_ClockConfig+0x1ae>
 80037c0:	4b68      	ldr	r3, [pc, #416]	@ (8003964 <HAL_RCC_ClockConfig+0x1b8>)
 80037c2:	681b      	ldr	r3, [r3, #0]
 80037c4:	f003 030f 	and.w	r3, r3, #15
 80037c8:	683a      	ldr	r2, [r7, #0]
 80037ca:	429a      	cmp	r2, r3
 80037cc:	d90c      	bls.n	80037e8 <HAL_RCC_ClockConfig+0x3c>
 80037ce:	4b65      	ldr	r3, [pc, #404]	@ (8003964 <HAL_RCC_ClockConfig+0x1b8>)
 80037d0:	683a      	ldr	r2, [r7, #0]
 80037d2:	b2d2      	uxtb	r2, r2
 80037d4:	701a      	strb	r2, [r3, #0]
 80037d6:	4b63      	ldr	r3, [pc, #396]	@ (8003964 <HAL_RCC_ClockConfig+0x1b8>)
 80037d8:	681b      	ldr	r3, [r3, #0]
 80037da:	f003 030f 	and.w	r3, r3, #15
 80037de:	683a      	ldr	r2, [r7, #0]
 80037e0:	429a      	cmp	r2, r3
 80037e2:	d001      	beq.n	80037e8 <HAL_RCC_ClockConfig+0x3c>
 80037e4:	2301      	movs	r3, #1
 80037e6:	e0b8      	b.n	800395a <HAL_RCC_ClockConfig+0x1ae>
 80037e8:	687b      	ldr	r3, [r7, #4]
 80037ea:	681b      	ldr	r3, [r3, #0]
 80037ec:	f003 0302 	and.w	r3, r3, #2
 80037f0:	2b00      	cmp	r3, #0
 80037f2:	d020      	beq.n	8003836 <HAL_RCC_ClockConfig+0x8a>
 80037f4:	687b      	ldr	r3, [r7, #4]
 80037f6:	681b      	ldr	r3, [r3, #0]
 80037f8:	f003 0304 	and.w	r3, r3, #4
 80037fc:	2b00      	cmp	r3, #0
 80037fe:	d005      	beq.n	800380c <HAL_RCC_ClockConfig+0x60>
 8003800:	4b59      	ldr	r3, [pc, #356]	@ (8003968 <HAL_RCC_ClockConfig+0x1bc>)
 8003802:	689b      	ldr	r3, [r3, #8]
 8003804:	4a58      	ldr	r2, [pc, #352]	@ (8003968 <HAL_RCC_ClockConfig+0x1bc>)
 8003806:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 800380a:	6093      	str	r3, [r2, #8]
 800380c:	687b      	ldr	r3, [r7, #4]
 800380e:	681b      	ldr	r3, [r3, #0]
 8003810:	f003 0308 	and.w	r3, r3, #8
 8003814:	2b00      	cmp	r3, #0
 8003816:	d005      	beq.n	8003824 <HAL_RCC_ClockConfig+0x78>
 8003818:	4b53      	ldr	r3, [pc, #332]	@ (8003968 <HAL_RCC_ClockConfig+0x1bc>)
 800381a:	689b      	ldr	r3, [r3, #8]
 800381c:	4a52      	ldr	r2, [pc, #328]	@ (8003968 <HAL_RCC_ClockConfig+0x1bc>)
 800381e:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 8003822:	6093      	str	r3, [r2, #8]
 8003824:	4b50      	ldr	r3, [pc, #320]	@ (8003968 <HAL_RCC_ClockConfig+0x1bc>)
 8003826:	689b      	ldr	r3, [r3, #8]
 8003828:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 800382c:	687b      	ldr	r3, [r7, #4]
 800382e:	689b      	ldr	r3, [r3, #8]
 8003830:	494d      	ldr	r1, [pc, #308]	@ (8003968 <HAL_RCC_ClockConfig+0x1bc>)
 8003832:	4313      	orrs	r3, r2
 8003834:	608b      	str	r3, [r1, #8]
 8003836:	687b      	ldr	r3, [r7, #4]
 8003838:	681b      	ldr	r3, [r3, #0]
 800383a:	f003 0301 	and.w	r3, r3, #1
 800383e:	2b00      	cmp	r3, #0
 8003840:	d044      	beq.n	80038cc <HAL_RCC_ClockConfig+0x120>
 8003842:	687b      	ldr	r3, [r7, #4]
 8003844:	685b      	ldr	r3, [r3, #4]
 8003846:	2b01      	cmp	r3, #1
 8003848:	d107      	bne.n	800385a <HAL_RCC_ClockConfig+0xae>
 800384a:	4b47      	ldr	r3, [pc, #284]	@ (8003968 <HAL_RCC_ClockConfig+0x1bc>)
 800384c:	681b      	ldr	r3, [r3, #0]
 800384e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003852:	2b00      	cmp	r3, #0
 8003854:	d119      	bne.n	800388a <HAL_RCC_ClockConfig+0xde>
 8003856:	2301      	movs	r3, #1
 8003858:	e07f      	b.n	800395a <HAL_RCC_ClockConfig+0x1ae>
 800385a:	687b      	ldr	r3, [r7, #4]
 800385c:	685b      	ldr	r3, [r3, #4]
 800385e:	2b02      	cmp	r3, #2
 8003860:	d003      	beq.n	800386a <HAL_RCC_ClockConfig+0xbe>
 8003862:	687b      	ldr	r3, [r7, #4]
 8003864:	685b      	ldr	r3, [r3, #4]
 8003866:	2b03      	cmp	r3, #3
 8003868:	d107      	bne.n	800387a <HAL_RCC_ClockConfig+0xce>
 800386a:	4b3f      	ldr	r3, [pc, #252]	@ (8003968 <HAL_RCC_ClockConfig+0x1bc>)
 800386c:	681b      	ldr	r3, [r3, #0]
 800386e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003872:	2b00      	cmp	r3, #0
 8003874:	d109      	bne.n	800388a <HAL_RCC_ClockConfig+0xde>
 8003876:	2301      	movs	r3, #1
 8003878:	e06f      	b.n	800395a <HAL_RCC_ClockConfig+0x1ae>
 800387a:	4b3b      	ldr	r3, [pc, #236]	@ (8003968 <HAL_RCC_ClockConfig+0x1bc>)
 800387c:	681b      	ldr	r3, [r3, #0]
 800387e:	f003 0302 	and.w	r3, r3, #2
 8003882:	2b00      	cmp	r3, #0
 8003884:	d101      	bne.n	800388a <HAL_RCC_ClockConfig+0xde>
 8003886:	2301      	movs	r3, #1
 8003888:	e067      	b.n	800395a <HAL_RCC_ClockConfig+0x1ae>
 800388a:	4b37      	ldr	r3, [pc, #220]	@ (8003968 <HAL_RCC_ClockConfig+0x1bc>)
 800388c:	689b      	ldr	r3, [r3, #8]
 800388e:	f023 0203 	bic.w	r2, r3, #3
 8003892:	687b      	ldr	r3, [r7, #4]
 8003894:	685b      	ldr	r3, [r3, #4]
 8003896:	4934      	ldr	r1, [pc, #208]	@ (8003968 <HAL_RCC_ClockConfig+0x1bc>)
 8003898:	4313      	orrs	r3, r2
 800389a:	608b      	str	r3, [r1, #8]
 800389c:	f7fe fc88 	bl	80021b0 <HAL_GetTick>
 80038a0:	60f8      	str	r0, [r7, #12]
 80038a2:	e00a      	b.n	80038ba <HAL_RCC_ClockConfig+0x10e>
 80038a4:	f7fe fc84 	bl	80021b0 <HAL_GetTick>
 80038a8:	4602      	mov	r2, r0
 80038aa:	68fb      	ldr	r3, [r7, #12]
 80038ac:	1ad3      	subs	r3, r2, r3
 80038ae:	f241 3288 	movw	r2, #5000	@ 0x1388
 80038b2:	4293      	cmp	r3, r2
 80038b4:	d901      	bls.n	80038ba <HAL_RCC_ClockConfig+0x10e>
 80038b6:	2303      	movs	r3, #3
 80038b8:	e04f      	b.n	800395a <HAL_RCC_ClockConfig+0x1ae>
 80038ba:	4b2b      	ldr	r3, [pc, #172]	@ (8003968 <HAL_RCC_ClockConfig+0x1bc>)
 80038bc:	689b      	ldr	r3, [r3, #8]
 80038be:	f003 020c 	and.w	r2, r3, #12
 80038c2:	687b      	ldr	r3, [r7, #4]
 80038c4:	685b      	ldr	r3, [r3, #4]
 80038c6:	009b      	lsls	r3, r3, #2
 80038c8:	429a      	cmp	r2, r3
 80038ca:	d1eb      	bne.n	80038a4 <HAL_RCC_ClockConfig+0xf8>
 80038cc:	4b25      	ldr	r3, [pc, #148]	@ (8003964 <HAL_RCC_ClockConfig+0x1b8>)
 80038ce:	681b      	ldr	r3, [r3, #0]
 80038d0:	f003 030f 	and.w	r3, r3, #15
 80038d4:	683a      	ldr	r2, [r7, #0]
 80038d6:	429a      	cmp	r2, r3
 80038d8:	d20c      	bcs.n	80038f4 <HAL_RCC_ClockConfig+0x148>
 80038da:	4b22      	ldr	r3, [pc, #136]	@ (8003964 <HAL_RCC_ClockConfig+0x1b8>)
 80038dc:	683a      	ldr	r2, [r7, #0]
 80038de:	b2d2      	uxtb	r2, r2
 80038e0:	701a      	strb	r2, [r3, #0]
 80038e2:	4b20      	ldr	r3, [pc, #128]	@ (8003964 <HAL_RCC_ClockConfig+0x1b8>)
 80038e4:	681b      	ldr	r3, [r3, #0]
 80038e6:	f003 030f 	and.w	r3, r3, #15
 80038ea:	683a      	ldr	r2, [r7, #0]
 80038ec:	429a      	cmp	r2, r3
 80038ee:	d001      	beq.n	80038f4 <HAL_RCC_ClockConfig+0x148>
 80038f0:	2301      	movs	r3, #1
 80038f2:	e032      	b.n	800395a <HAL_RCC_ClockConfig+0x1ae>
 80038f4:	687b      	ldr	r3, [r7, #4]
 80038f6:	681b      	ldr	r3, [r3, #0]
 80038f8:	f003 0304 	and.w	r3, r3, #4
 80038fc:	2b00      	cmp	r3, #0
 80038fe:	d008      	beq.n	8003912 <HAL_RCC_ClockConfig+0x166>
 8003900:	4b19      	ldr	r3, [pc, #100]	@ (8003968 <HAL_RCC_ClockConfig+0x1bc>)
 8003902:	689b      	ldr	r3, [r3, #8]
 8003904:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 8003908:	687b      	ldr	r3, [r7, #4]
 800390a:	68db      	ldr	r3, [r3, #12]
 800390c:	4916      	ldr	r1, [pc, #88]	@ (8003968 <HAL_RCC_ClockConfig+0x1bc>)
 800390e:	4313      	orrs	r3, r2
 8003910:	608b      	str	r3, [r1, #8]
 8003912:	687b      	ldr	r3, [r7, #4]
 8003914:	681b      	ldr	r3, [r3, #0]
 8003916:	f003 0308 	and.w	r3, r3, #8
 800391a:	2b00      	cmp	r3, #0
 800391c:	d009      	beq.n	8003932 <HAL_RCC_ClockConfig+0x186>
 800391e:	4b12      	ldr	r3, [pc, #72]	@ (8003968 <HAL_RCC_ClockConfig+0x1bc>)
 8003920:	689b      	ldr	r3, [r3, #8]
 8003922:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 8003926:	687b      	ldr	r3, [r7, #4]
 8003928:	691b      	ldr	r3, [r3, #16]
 800392a:	00db      	lsls	r3, r3, #3
 800392c:	490e      	ldr	r1, [pc, #56]	@ (8003968 <HAL_RCC_ClockConfig+0x1bc>)
 800392e:	4313      	orrs	r3, r2
 8003930:	608b      	str	r3, [r1, #8]
 8003932:	f000 f855 	bl	80039e0 <HAL_RCC_GetSysClockFreq>
 8003936:	4602      	mov	r2, r0
 8003938:	4b0b      	ldr	r3, [pc, #44]	@ (8003968 <HAL_RCC_ClockConfig+0x1bc>)
 800393a:	689b      	ldr	r3, [r3, #8]
 800393c:	091b      	lsrs	r3, r3, #4
 800393e:	f003 030f 	and.w	r3, r3, #15
 8003942:	490a      	ldr	r1, [pc, #40]	@ (800396c <HAL_RCC_ClockConfig+0x1c0>)
 8003944:	5ccb      	ldrb	r3, [r1, r3]
 8003946:	fa22 f303 	lsr.w	r3, r2, r3
 800394a:	4a09      	ldr	r2, [pc, #36]	@ (8003970 <HAL_RCC_ClockConfig+0x1c4>)
 800394c:	6013      	str	r3, [r2, #0]
 800394e:	4b09      	ldr	r3, [pc, #36]	@ (8003974 <HAL_RCC_ClockConfig+0x1c8>)
 8003950:	681b      	ldr	r3, [r3, #0]
 8003952:	4618      	mov	r0, r3
 8003954:	f7fe fbe8 	bl	8002128 <HAL_InitTick>
 8003958:	2300      	movs	r3, #0
 800395a:	4618      	mov	r0, r3
 800395c:	3710      	adds	r7, #16
 800395e:	46bd      	mov	sp, r7
 8003960:	bd80      	pop	{r7, pc}
 8003962:	bf00      	nop
 8003964:	40023c00 	.word	0x40023c00
 8003968:	40023800 	.word	0x40023800
 800396c:	0800a330 	.word	0x0800a330
 8003970:	20000000 	.word	0x20000000
 8003974:	20000004 	.word	0x20000004
=======

0800205c <_write>:
 800205c:	b580      	push	{r7, lr}
 800205e:	b086      	sub	sp, #24
 8002060:	af00      	add	r7, sp, #0
 8002062:	60f8      	str	r0, [r7, #12]
 8002064:	60b9      	str	r1, [r7, #8]
 8002066:	607a      	str	r2, [r7, #4]
 8002068:	2300      	movs	r3, #0
 800206a:	617b      	str	r3, [r7, #20]
 800206c:	e009      	b.n	8002082 <_write+0x26>
 800206e:	68bb      	ldr	r3, [r7, #8]
 8002070:	1c5a      	adds	r2, r3, #1
 8002072:	60ba      	str	r2, [r7, #8]
 8002074:	781b      	ldrb	r3, [r3, #0]
 8002076:	4618      	mov	r0, r3
 8002078:	f3af 8000 	nop.w
 800207c:	697b      	ldr	r3, [r7, #20]
 800207e:	3301      	adds	r3, #1
 8002080:	617b      	str	r3, [r7, #20]
 8002082:	697a      	ldr	r2, [r7, #20]
 8002084:	687b      	ldr	r3, [r7, #4]
 8002086:	429a      	cmp	r2, r3
 8002088:	dbf1      	blt.n	800206e <_write+0x12>
 800208a:	687b      	ldr	r3, [r7, #4]
 800208c:	4618      	mov	r0, r3
 800208e:	3718      	adds	r7, #24
 8002090:	46bd      	mov	sp, r7
 8002092:	bd80      	pop	{r7, pc}

08002094 <_close>:
 8002094:	b480      	push	{r7}
 8002096:	b083      	sub	sp, #12
 8002098:	af00      	add	r7, sp, #0
 800209a:	6078      	str	r0, [r7, #4]
 800209c:	f04f 33ff 	mov.w	r3, #4294967295
 80020a0:	4618      	mov	r0, r3
 80020a2:	370c      	adds	r7, #12
 80020a4:	46bd      	mov	sp, r7
 80020a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020aa:	4770      	bx	lr

080020ac <_fstat>:
 80020ac:	b480      	push	{r7}
 80020ae:	b083      	sub	sp, #12
 80020b0:	af00      	add	r7, sp, #0
 80020b2:	6078      	str	r0, [r7, #4]
 80020b4:	6039      	str	r1, [r7, #0]
 80020b6:	683b      	ldr	r3, [r7, #0]
 80020b8:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 80020bc:	605a      	str	r2, [r3, #4]
 80020be:	2300      	movs	r3, #0
 80020c0:	4618      	mov	r0, r3
 80020c2:	370c      	adds	r7, #12
 80020c4:	46bd      	mov	sp, r7
 80020c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020ca:	4770      	bx	lr

080020cc <_isatty>:
 80020cc:	b480      	push	{r7}
 80020ce:	b083      	sub	sp, #12
 80020d0:	af00      	add	r7, sp, #0
 80020d2:	6078      	str	r0, [r7, #4]
 80020d4:	2301      	movs	r3, #1
 80020d6:	4618      	mov	r0, r3
 80020d8:	370c      	adds	r7, #12
 80020da:	46bd      	mov	sp, r7
 80020dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020e0:	4770      	bx	lr

080020e2 <_lseek>:
 80020e2:	b480      	push	{r7}
 80020e4:	b085      	sub	sp, #20
 80020e6:	af00      	add	r7, sp, #0
 80020e8:	60f8      	str	r0, [r7, #12]
 80020ea:	60b9      	str	r1, [r7, #8]
 80020ec:	607a      	str	r2, [r7, #4]
 80020ee:	2300      	movs	r3, #0
 80020f0:	4618      	mov	r0, r3
 80020f2:	3714      	adds	r7, #20
 80020f4:	46bd      	mov	sp, r7
 80020f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020fa:	4770      	bx	lr

080020fc <_sbrk>:
 80020fc:	b580      	push	{r7, lr}
 80020fe:	b086      	sub	sp, #24
 8002100:	af00      	add	r7, sp, #0
 8002102:	6078      	str	r0, [r7, #4]
 8002104:	4a14      	ldr	r2, [pc, #80]	@ (8002158 <_sbrk+0x5c>)
 8002106:	4b15      	ldr	r3, [pc, #84]	@ (800215c <_sbrk+0x60>)
 8002108:	1ad3      	subs	r3, r2, r3
 800210a:	617b      	str	r3, [r7, #20]
 800210c:	697b      	ldr	r3, [r7, #20]
 800210e:	613b      	str	r3, [r7, #16]
 8002110:	4b13      	ldr	r3, [pc, #76]	@ (8002160 <_sbrk+0x64>)
 8002112:	681b      	ldr	r3, [r3, #0]
 8002114:	2b00      	cmp	r3, #0
 8002116:	d102      	bne.n	800211e <_sbrk+0x22>
 8002118:	4b11      	ldr	r3, [pc, #68]	@ (8002160 <_sbrk+0x64>)
 800211a:	4a12      	ldr	r2, [pc, #72]	@ (8002164 <_sbrk+0x68>)
 800211c:	601a      	str	r2, [r3, #0]
 800211e:	4b10      	ldr	r3, [pc, #64]	@ (8002160 <_sbrk+0x64>)
 8002120:	681a      	ldr	r2, [r3, #0]
 8002122:	687b      	ldr	r3, [r7, #4]
 8002124:	4413      	add	r3, r2
 8002126:	693a      	ldr	r2, [r7, #16]
 8002128:	429a      	cmp	r2, r3
 800212a:	d207      	bcs.n	800213c <_sbrk+0x40>
 800212c:	f005 f816 	bl	800715c <__errno>
 8002130:	4603      	mov	r3, r0
 8002132:	220c      	movs	r2, #12
 8002134:	601a      	str	r2, [r3, #0]
 8002136:	f04f 33ff 	mov.w	r3, #4294967295
 800213a:	e009      	b.n	8002150 <_sbrk+0x54>
 800213c:	4b08      	ldr	r3, [pc, #32]	@ (8002160 <_sbrk+0x64>)
 800213e:	681b      	ldr	r3, [r3, #0]
 8002140:	60fb      	str	r3, [r7, #12]
 8002142:	4b07      	ldr	r3, [pc, #28]	@ (8002160 <_sbrk+0x64>)
 8002144:	681a      	ldr	r2, [r3, #0]
 8002146:	687b      	ldr	r3, [r7, #4]
 8002148:	4413      	add	r3, r2
 800214a:	4a05      	ldr	r2, [pc, #20]	@ (8002160 <_sbrk+0x64>)
 800214c:	6013      	str	r3, [r2, #0]
 800214e:	68fb      	ldr	r3, [r7, #12]
 8002150:	4618      	mov	r0, r3
 8002152:	3718      	adds	r7, #24
 8002154:	46bd      	mov	sp, r7
 8002156:	bd80      	pop	{r7, pc}
 8002158:	20020000 	.word	0x20020000
 800215c:	00000400 	.word	0x00000400
 8002160:	200005fc 	.word	0x200005fc
 8002164:	20000750 	.word	0x20000750

08002168 <SystemInit>:
>>>>>>> 39e4d10438a821cc799a472af87a77c6796a1676
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
<<<<<<< HEAD
 8002054:	b480      	push	{r7}
 8002056:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8002058:	4b06      	ldr	r3, [pc, #24]	@ (8002074 <SystemInit+0x20>)
 800205a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800205e:	4a05      	ldr	r2, [pc, #20]	@ (8002074 <SystemInit+0x20>)
 8002060:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8002064:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
=======
 8002168:	b480      	push	{r7}
 800216a:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 800216c:	4b06      	ldr	r3, [pc, #24]	@ (8002188 <SystemInit+0x20>)
 800216e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002172:	4a05      	ldr	r2, [pc, #20]	@ (8002188 <SystemInit+0x20>)
 8002174:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8002178:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
>>>>>>> 39e4d10438a821cc799a472af87a77c6796a1676

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
<<<<<<< HEAD
 8002068:	bf00      	nop
 800206a:	46bd      	mov	sp, r7
 800206c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002070:	4770      	bx	lr
 8002072:	bf00      	nop
 8002074:	e000ed00 	.word	0xe000ed00

08002078 <Reset_Handler>:
 8002078:	f8df d034 	ldr.w	sp, [pc, #52]	@ 80020b0 <LoopFillZerobss+0xe>
 800207c:	f7ff ffea 	bl	8002054 <SystemInit>
 8002080:	480c      	ldr	r0, [pc, #48]	@ (80020b4 <LoopFillZerobss+0x12>)
 8002082:	490d      	ldr	r1, [pc, #52]	@ (80020b8 <LoopFillZerobss+0x16>)
 8002084:	4a0d      	ldr	r2, [pc, #52]	@ (80020bc <LoopFillZerobss+0x1a>)
 8002086:	2300      	movs	r3, #0
 8002088:	e002      	b.n	8002090 <LoopCopyDataInit>

0800208a <CopyDataInit>:
 800208a:	58d4      	ldr	r4, [r2, r3]
 800208c:	50c4      	str	r4, [r0, r3]
 800208e:	3304      	adds	r3, #4

08002090 <LoopCopyDataInit>:
 8002090:	18c4      	adds	r4, r0, r3
 8002092:	428c      	cmp	r4, r1
 8002094:	d3f9      	bcc.n	800208a <CopyDataInit>
 8002096:	4a0a      	ldr	r2, [pc, #40]	@ (80020c0 <LoopFillZerobss+0x1e>)
 8002098:	4c0a      	ldr	r4, [pc, #40]	@ (80020c4 <LoopFillZerobss+0x22>)
 800209a:	2300      	movs	r3, #0
 800209c:	e001      	b.n	80020a2 <LoopFillZerobss>

0800209e <FillZerobss>:
 800209e:	6013      	str	r3, [r2, #0]
 80020a0:	3204      	adds	r2, #4

080020a2 <LoopFillZerobss>:
 80020a2:	42a2      	cmp	r2, r4
 80020a4:	d3fb      	bcc.n	800209e <FillZerobss>
 80020a6:	f004 ffd5 	bl	8007054 <__libc_init_array>
 80020aa:	f7ff f8db 	bl	8001264 <main>
 80020ae:	4770      	bx	lr
 80020b0:	20020000 	.word	0x20020000
 80020b4:	20000000 	.word	0x20000000
 80020b8:	200001d4 	.word	0x200001d4
 80020bc:	0800a890 	.word	0x0800a890
 80020c0:	200001d4 	.word	0x200001d4
 80020c4:	20000750 	.word	0x20000750

080020c8 <ADC_IRQHandler>:
 80020c8:	e7fe      	b.n	80020c8 <ADC_IRQHandler>
	...

080020cc <HAL_Init>:
=======
 800217c:	bf00      	nop
 800217e:	46bd      	mov	sp, r7
 8002180:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002184:	4770      	bx	lr
 8002186:	bf00      	nop
 8002188:	e000ed00 	.word	0xe000ed00

0800218c <Reset_Handler>:
 800218c:	f8df d034 	ldr.w	sp, [pc, #52]	@ 80021c4 <LoopFillZerobss+0xe>
 8002190:	f7ff ffea 	bl	8002168 <SystemInit>
 8002194:	480c      	ldr	r0, [pc, #48]	@ (80021c8 <LoopFillZerobss+0x12>)
 8002196:	490d      	ldr	r1, [pc, #52]	@ (80021cc <LoopFillZerobss+0x16>)
 8002198:	4a0d      	ldr	r2, [pc, #52]	@ (80021d0 <LoopFillZerobss+0x1a>)
 800219a:	2300      	movs	r3, #0
 800219c:	e002      	b.n	80021a4 <LoopCopyDataInit>

0800219e <CopyDataInit>:
 800219e:	58d4      	ldr	r4, [r2, r3]
 80021a0:	50c4      	str	r4, [r0, r3]
 80021a2:	3304      	adds	r3, #4

080021a4 <LoopCopyDataInit>:
 80021a4:	18c4      	adds	r4, r0, r3
 80021a6:	428c      	cmp	r4, r1
 80021a8:	d3f9      	bcc.n	800219e <CopyDataInit>
 80021aa:	4a0a      	ldr	r2, [pc, #40]	@ (80021d4 <LoopFillZerobss+0x1e>)
 80021ac:	4c0a      	ldr	r4, [pc, #40]	@ (80021d8 <LoopFillZerobss+0x22>)
 80021ae:	2300      	movs	r3, #0
 80021b0:	e001      	b.n	80021b6 <LoopFillZerobss>

080021b2 <FillZerobss>:
 80021b2:	6013      	str	r3, [r2, #0]
 80021b4:	3204      	adds	r2, #4

080021b6 <LoopFillZerobss>:
 80021b6:	42a2      	cmp	r2, r4
 80021b8:	d3fb      	bcc.n	80021b2 <FillZerobss>
 80021ba:	f004 ffd5 	bl	8007168 <__libc_init_array>
 80021be:	f7ff f851 	bl	8001264 <main>
 80021c2:	4770      	bx	lr
 80021c4:	20020000 	.word	0x20020000
 80021c8:	20000000 	.word	0x20000000
 80021cc:	200001d4 	.word	0x200001d4
 80021d0:	0800a9a0 	.word	0x0800a9a0
 80021d4:	200001d4 	.word	0x200001d4
 80021d8:	20000750 	.word	0x20000750

080021dc <ADC_IRQHandler>:
 80021dc:	e7fe      	b.n	80021dc <ADC_IRQHandler>
	...

080021e0 <HAL_Init>:
>>>>>>> 39e4d10438a821cc799a472af87a77c6796a1676
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
<<<<<<< HEAD
 80020cc:	b580      	push	{r7, lr}
 80020ce:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 80020d0:	4b0e      	ldr	r3, [pc, #56]	@ (800210c <HAL_Init+0x40>)
 80020d2:	681b      	ldr	r3, [r3, #0]
 80020d4:	4a0d      	ldr	r2, [pc, #52]	@ (800210c <HAL_Init+0x40>)
 80020d6:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 80020da:	6013      	str	r3, [r2, #0]
=======
 80021e0:	b580      	push	{r7, lr}
 80021e2:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 80021e4:	4b0e      	ldr	r3, [pc, #56]	@ (8002220 <HAL_Init+0x40>)
 80021e6:	681b      	ldr	r3, [r3, #0]
 80021e8:	4a0d      	ldr	r2, [pc, #52]	@ (8002220 <HAL_Init+0x40>)
 80021ea:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 80021ee:	6013      	str	r3, [r2, #0]
>>>>>>> 39e4d10438a821cc799a472af87a77c6796a1676
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
<<<<<<< HEAD
 80020dc:	4b0b      	ldr	r3, [pc, #44]	@ (800210c <HAL_Init+0x40>)
 80020de:	681b      	ldr	r3, [r3, #0]
 80020e0:	4a0a      	ldr	r2, [pc, #40]	@ (800210c <HAL_Init+0x40>)
 80020e2:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 80020e6:	6013      	str	r3, [r2, #0]
=======
 80021f0:	4b0b      	ldr	r3, [pc, #44]	@ (8002220 <HAL_Init+0x40>)
 80021f2:	681b      	ldr	r3, [r3, #0]
 80021f4:	4a0a      	ldr	r2, [pc, #40]	@ (8002220 <HAL_Init+0x40>)
 80021f6:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 80021fa:	6013      	str	r3, [r2, #0]
>>>>>>> 39e4d10438a821cc799a472af87a77c6796a1676
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
<<<<<<< HEAD
 80020e8:	4b08      	ldr	r3, [pc, #32]	@ (800210c <HAL_Init+0x40>)
 80020ea:	681b      	ldr	r3, [r3, #0]
 80020ec:	4a07      	ldr	r2, [pc, #28]	@ (800210c <HAL_Init+0x40>)
 80020ee:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80020f2:	6013      	str	r3, [r2, #0]
=======
 80021fc:	4b08      	ldr	r3, [pc, #32]	@ (8002220 <HAL_Init+0x40>)
 80021fe:	681b      	ldr	r3, [r3, #0]
 8002200:	4a07      	ldr	r2, [pc, #28]	@ (8002220 <HAL_Init+0x40>)
 8002202:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8002206:	6013      	str	r3, [r2, #0]
>>>>>>> 39e4d10438a821cc799a472af87a77c6796a1676
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
<<<<<<< HEAD
 80020f4:	2003      	movs	r0, #3
 80020f6:	f000 fd43 	bl	8002b80 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80020fa:	2000      	movs	r0, #0
 80020fc:	f000 f808 	bl	8002110 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8002100:	f7ff fcf4 	bl	8001aec <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8002104:	2300      	movs	r3, #0
}
 8002106:	4618      	mov	r0, r3
 8002108:	bd80      	pop	{r7, pc}
 800210a:	bf00      	nop
 800210c:	40023c00 	.word	0x40023c00

08002110 <HAL_InitTick>:
=======
 8002208:	2003      	movs	r0, #3
 800220a:	f000 fd43 	bl	8002c94 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800220e:	2000      	movs	r0, #0
 8002210:	f000 f808 	bl	8002224 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8002214:	f7ff fcf4 	bl	8001c00 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8002218:	2300      	movs	r3, #0
}
 800221a:	4618      	mov	r0, r3
 800221c:	bd80      	pop	{r7, pc}
 800221e:	bf00      	nop
 8002220:	40023c00 	.word	0x40023c00

08002224 <HAL_InitTick>:
>>>>>>> 39e4d10438a821cc799a472af87a77c6796a1676
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
<<<<<<< HEAD
 8002110:	b580      	push	{r7, lr}
 8002112:	b082      	sub	sp, #8
 8002114:	af00      	add	r7, sp, #0
 8002116:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8002118:	4b12      	ldr	r3, [pc, #72]	@ (8002164 <HAL_InitTick+0x54>)
 800211a:	681a      	ldr	r2, [r3, #0]
 800211c:	4b12      	ldr	r3, [pc, #72]	@ (8002168 <HAL_InitTick+0x58>)
 800211e:	781b      	ldrb	r3, [r3, #0]
 8002120:	4619      	mov	r1, r3
 8002122:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8002126:	fbb3 f3f1 	udiv	r3, r3, r1
 800212a:	fbb2 f3f3 	udiv	r3, r2, r3
 800212e:	4618      	mov	r0, r3
 8002130:	f000 fd5b 	bl	8002bea <HAL_SYSTICK_Config>
 8002134:	4603      	mov	r3, r0
 8002136:	2b00      	cmp	r3, #0
 8002138:	d001      	beq.n	800213e <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 800213a:	2301      	movs	r3, #1
 800213c:	e00e      	b.n	800215c <HAL_InitTick+0x4c>
=======
 8002224:	b580      	push	{r7, lr}
 8002226:	b082      	sub	sp, #8
 8002228:	af00      	add	r7, sp, #0
 800222a:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 800222c:	4b12      	ldr	r3, [pc, #72]	@ (8002278 <HAL_InitTick+0x54>)
 800222e:	681a      	ldr	r2, [r3, #0]
 8002230:	4b12      	ldr	r3, [pc, #72]	@ (800227c <HAL_InitTick+0x58>)
 8002232:	781b      	ldrb	r3, [r3, #0]
 8002234:	4619      	mov	r1, r3
 8002236:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 800223a:	fbb3 f3f1 	udiv	r3, r3, r1
 800223e:	fbb2 f3f3 	udiv	r3, r2, r3
 8002242:	4618      	mov	r0, r3
 8002244:	f000 fd5b 	bl	8002cfe <HAL_SYSTICK_Config>
 8002248:	4603      	mov	r3, r0
 800224a:	2b00      	cmp	r3, #0
 800224c:	d001      	beq.n	8002252 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 800224e:	2301      	movs	r3, #1
 8002250:	e00e      	b.n	8002270 <HAL_InitTick+0x4c>
>>>>>>> 39e4d10438a821cc799a472af87a77c6796a1676
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
<<<<<<< HEAD
 800213e:	687b      	ldr	r3, [r7, #4]
 8002140:	2b0f      	cmp	r3, #15
 8002142:	d80a      	bhi.n	800215a <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8002144:	2200      	movs	r2, #0
 8002146:	6879      	ldr	r1, [r7, #4]
 8002148:	f04f 30ff 	mov.w	r0, #4294967295
 800214c:	f000 fd23 	bl	8002b96 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8002150:	4a06      	ldr	r2, [pc, #24]	@ (800216c <HAL_InitTick+0x5c>)
 8002152:	687b      	ldr	r3, [r7, #4]
 8002154:	6013      	str	r3, [r2, #0]
=======
 8002252:	687b      	ldr	r3, [r7, #4]
 8002254:	2b0f      	cmp	r3, #15
 8002256:	d80a      	bhi.n	800226e <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8002258:	2200      	movs	r2, #0
 800225a:	6879      	ldr	r1, [r7, #4]
 800225c:	f04f 30ff 	mov.w	r0, #4294967295
 8002260:	f000 fd23 	bl	8002caa <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8002264:	4a06      	ldr	r2, [pc, #24]	@ (8002280 <HAL_InitTick+0x5c>)
 8002266:	687b      	ldr	r3, [r7, #4]
 8002268:	6013      	str	r3, [r2, #0]
>>>>>>> 39e4d10438a821cc799a472af87a77c6796a1676
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
<<<<<<< HEAD
 8002156:	2300      	movs	r3, #0
 8002158:	e000      	b.n	800215c <HAL_InitTick+0x4c>
    return HAL_ERROR;
 800215a:	2301      	movs	r3, #1
}
 800215c:	4618      	mov	r0, r3
 800215e:	3708      	adds	r7, #8
 8002160:	46bd      	mov	sp, r7
 8002162:	bd80      	pop	{r7, pc}
 8002164:	20000000 	.word	0x20000000
 8002168:	20000008 	.word	0x20000008
 800216c:	20000004 	.word	0x20000004

08002170 <HAL_IncTick>:
=======
 800226a:	2300      	movs	r3, #0
 800226c:	e000      	b.n	8002270 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 800226e:	2301      	movs	r3, #1
}
 8002270:	4618      	mov	r0, r3
 8002272:	3708      	adds	r7, #8
 8002274:	46bd      	mov	sp, r7
 8002276:	bd80      	pop	{r7, pc}
 8002278:	20000000 	.word	0x20000000
 800227c:	20000008 	.word	0x20000008
 8002280:	20000004 	.word	0x20000004

08002284 <HAL_IncTick>:
>>>>>>> 39e4d10438a821cc799a472af87a77c6796a1676
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
<<<<<<< HEAD
 8002170:	b480      	push	{r7}
 8002172:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8002174:	4b06      	ldr	r3, [pc, #24]	@ (8002190 <HAL_IncTick+0x20>)
 8002176:	781b      	ldrb	r3, [r3, #0]
 8002178:	461a      	mov	r2, r3
 800217a:	4b06      	ldr	r3, [pc, #24]	@ (8002194 <HAL_IncTick+0x24>)
 800217c:	681b      	ldr	r3, [r3, #0]
 800217e:	4413      	add	r3, r2
 8002180:	4a04      	ldr	r2, [pc, #16]	@ (8002194 <HAL_IncTick+0x24>)
 8002182:	6013      	str	r3, [r2, #0]
}
 8002184:	bf00      	nop
 8002186:	46bd      	mov	sp, r7
 8002188:	f85d 7b04 	ldr.w	r7, [sp], #4
 800218c:	4770      	bx	lr
 800218e:	bf00      	nop
 8002190:	20000008 	.word	0x20000008
 8002194:	20000600 	.word	0x20000600

08002198 <HAL_GetTick>:
=======
 8002284:	b480      	push	{r7}
 8002286:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8002288:	4b06      	ldr	r3, [pc, #24]	@ (80022a4 <HAL_IncTick+0x20>)
 800228a:	781b      	ldrb	r3, [r3, #0]
 800228c:	461a      	mov	r2, r3
 800228e:	4b06      	ldr	r3, [pc, #24]	@ (80022a8 <HAL_IncTick+0x24>)
 8002290:	681b      	ldr	r3, [r3, #0]
 8002292:	4413      	add	r3, r2
 8002294:	4a04      	ldr	r2, [pc, #16]	@ (80022a8 <HAL_IncTick+0x24>)
 8002296:	6013      	str	r3, [r2, #0]
}
 8002298:	bf00      	nop
 800229a:	46bd      	mov	sp, r7
 800229c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022a0:	4770      	bx	lr
 80022a2:	bf00      	nop
 80022a4:	20000008 	.word	0x20000008
 80022a8:	20000600 	.word	0x20000600

080022ac <HAL_GetTick>:
>>>>>>> 39e4d10438a821cc799a472af87a77c6796a1676
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
<<<<<<< HEAD
 8002198:	b480      	push	{r7}
 800219a:	af00      	add	r7, sp, #0
  return uwTick;
 800219c:	4b03      	ldr	r3, [pc, #12]	@ (80021ac <HAL_GetTick+0x14>)
 800219e:	681b      	ldr	r3, [r3, #0]
}
 80021a0:	4618      	mov	r0, r3
 80021a2:	46bd      	mov	sp, r7
 80021a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021a8:	4770      	bx	lr
 80021aa:	bf00      	nop
 80021ac:	20000600 	.word	0x20000600

080021b0 <HAL_ADC_Init>:
=======
 80022ac:	b480      	push	{r7}
 80022ae:	af00      	add	r7, sp, #0
  return uwTick;
 80022b0:	4b03      	ldr	r3, [pc, #12]	@ (80022c0 <HAL_GetTick+0x14>)
 80022b2:	681b      	ldr	r3, [r3, #0]
}
 80022b4:	4618      	mov	r0, r3
 80022b6:	46bd      	mov	sp, r7
 80022b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022bc:	4770      	bx	lr
 80022be:	bf00      	nop
 80022c0:	20000600 	.word	0x20000600

080022c4 <HAL_ADC_Init>:
>>>>>>> 39e4d10438a821cc799a472af87a77c6796a1676
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
<<<<<<< HEAD
 80021b0:	b580      	push	{r7, lr}
 80021b2:	b084      	sub	sp, #16
 80021b4:	af00      	add	r7, sp, #0
 80021b6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80021b8:	2300      	movs	r3, #0
 80021ba:	73fb      	strb	r3, [r7, #15]

  /* Check ADC handle */
  if (hadc == NULL)
 80021bc:	687b      	ldr	r3, [r7, #4]
 80021be:	2b00      	cmp	r3, #0
 80021c0:	d101      	bne.n	80021c6 <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 80021c2:	2301      	movs	r3, #1
 80021c4:	e033      	b.n	800222e <HAL_ADC_Init+0x7e>
=======
 80022c4:	b580      	push	{r7, lr}
 80022c6:	b084      	sub	sp, #16
 80022c8:	af00      	add	r7, sp, #0
 80022ca:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80022cc:	2300      	movs	r3, #0
 80022ce:	73fb      	strb	r3, [r7, #15]

  /* Check ADC handle */
  if (hadc == NULL)
 80022d0:	687b      	ldr	r3, [r7, #4]
 80022d2:	2b00      	cmp	r3, #0
 80022d4:	d101      	bne.n	80022da <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 80022d6:	2301      	movs	r3, #1
 80022d8:	e033      	b.n	8002342 <HAL_ADC_Init+0x7e>
>>>>>>> 39e4d10438a821cc799a472af87a77c6796a1676
  if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }

  if (hadc->State == HAL_ADC_STATE_RESET)
<<<<<<< HEAD
 80021c6:	687b      	ldr	r3, [r7, #4]
 80021c8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80021ca:	2b00      	cmp	r3, #0
 80021cc:	d109      	bne.n	80021e2 <HAL_ADC_Init+0x32>
=======
 80022da:	687b      	ldr	r3, [r7, #4]
 80022dc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80022de:	2b00      	cmp	r3, #0
 80022e0:	d109      	bne.n	80022f6 <HAL_ADC_Init+0x32>
>>>>>>> 39e4d10438a821cc799a472af87a77c6796a1676

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
<<<<<<< HEAD
 80021ce:	6878      	ldr	r0, [r7, #4]
 80021d0:	f7ff fcb4 	bl	8001b3c <HAL_ADC_MspInit>
=======
 80022e2:	6878      	ldr	r0, [r7, #4]
 80022e4:	f7ff fcb4 	bl	8001c50 <HAL_ADC_MspInit>
>>>>>>> 39e4d10438a821cc799a472af87a77c6796a1676
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
<<<<<<< HEAD
 80021d4:	687b      	ldr	r3, [r7, #4]
 80021d6:	2200      	movs	r2, #0
 80021d8:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 80021da:	687b      	ldr	r3, [r7, #4]
 80021dc:	2200      	movs	r2, #0
 80021de:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
=======
 80022e8:	687b      	ldr	r3, [r7, #4]
 80022ea:	2200      	movs	r2, #0
 80022ec:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 80022ee:	687b      	ldr	r3, [r7, #4]
 80022f0:	2200      	movs	r2, #0
 80022f2:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
>>>>>>> 39e4d10438a821cc799a472af87a77c6796a1676
  }

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
<<<<<<< HEAD
 80021e2:	687b      	ldr	r3, [r7, #4]
 80021e4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80021e6:	f003 0310 	and.w	r3, r3, #16
 80021ea:	2b00      	cmp	r3, #0
 80021ec:	d118      	bne.n	8002220 <HAL_ADC_Init+0x70>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80021ee:	687b      	ldr	r3, [r7, #4]
 80021f0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80021f2:	f423 5388 	bic.w	r3, r3, #4352	@ 0x1100
 80021f6:	f023 0302 	bic.w	r3, r3, #2
 80021fa:	f043 0202 	orr.w	r2, r3, #2
 80021fe:	687b      	ldr	r3, [r7, #4]
 8002200:	641a      	str	r2, [r3, #64]	@ 0x40
=======
 80022f6:	687b      	ldr	r3, [r7, #4]
 80022f8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80022fa:	f003 0310 	and.w	r3, r3, #16
 80022fe:	2b00      	cmp	r3, #0
 8002300:	d118      	bne.n	8002334 <HAL_ADC_Init+0x70>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8002302:	687b      	ldr	r3, [r7, #4]
 8002304:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002306:	f423 5388 	bic.w	r3, r3, #4352	@ 0x1100
 800230a:	f023 0302 	bic.w	r3, r3, #2
 800230e:	f043 0202 	orr.w	r2, r3, #2
 8002312:	687b      	ldr	r3, [r7, #4]
 8002314:	641a      	str	r2, [r3, #64]	@ 0x40
>>>>>>> 39e4d10438a821cc799a472af87a77c6796a1676
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);

    /* Set ADC parameters */
    ADC_Init(hadc);
<<<<<<< HEAD
 8002202:	6878      	ldr	r0, [r7, #4]
 8002204:	f000 fa6e 	bl	80026e4 <ADC_Init>

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8002208:	687b      	ldr	r3, [r7, #4]
 800220a:	2200      	movs	r2, #0
 800220c:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 800220e:	687b      	ldr	r3, [r7, #4]
 8002210:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002212:	f023 0303 	bic.w	r3, r3, #3
 8002216:	f043 0201 	orr.w	r2, r3, #1
 800221a:	687b      	ldr	r3, [r7, #4]
 800221c:	641a      	str	r2, [r3, #64]	@ 0x40
 800221e:	e001      	b.n	8002224 <HAL_ADC_Init+0x74>
=======
 8002316:	6878      	ldr	r0, [r7, #4]
 8002318:	f000 fa6e 	bl	80027f8 <ADC_Init>

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 800231c:	687b      	ldr	r3, [r7, #4]
 800231e:	2200      	movs	r2, #0
 8002320:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8002322:	687b      	ldr	r3, [r7, #4]
 8002324:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002326:	f023 0303 	bic.w	r3, r3, #3
 800232a:	f043 0201 	orr.w	r2, r3, #1
 800232e:	687b      	ldr	r3, [r7, #4]
 8002330:	641a      	str	r2, [r3, #64]	@ 0x40
 8002332:	e001      	b.n	8002338 <HAL_ADC_Init+0x74>
>>>>>>> 39e4d10438a821cc799a472af87a77c6796a1676
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
<<<<<<< HEAD
 8002220:	2301      	movs	r3, #1
 8002222:	73fb      	strb	r3, [r7, #15]
=======
 8002334:	2301      	movs	r3, #1
 8002336:	73fb      	strb	r3, [r7, #15]
>>>>>>> 39e4d10438a821cc799a472af87a77c6796a1676
  }

  /* Release Lock */
  __HAL_UNLOCK(hadc);
<<<<<<< HEAD
 8002224:	687b      	ldr	r3, [r7, #4]
 8002226:	2200      	movs	r2, #0
 8002228:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Return function status */
  return tmp_hal_status;
 800222c:	7bfb      	ldrb	r3, [r7, #15]
}
 800222e:	4618      	mov	r0, r3
 8002230:	3710      	adds	r7, #16
 8002232:	46bd      	mov	sp, r7
 8002234:	bd80      	pop	{r7, pc}
	...

08002238 <HAL_ADC_Start_DMA>:
=======
 8002338:	687b      	ldr	r3, [r7, #4]
 800233a:	2200      	movs	r2, #0
 800233c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Return function status */
  return tmp_hal_status;
 8002340:	7bfb      	ldrb	r3, [r7, #15]
}
 8002342:	4618      	mov	r0, r3
 8002344:	3710      	adds	r7, #16
 8002346:	46bd      	mov	sp, r7
 8002348:	bd80      	pop	{r7, pc}
	...

0800234c <HAL_ADC_Start_DMA>:
>>>>>>> 39e4d10438a821cc799a472af87a77c6796a1676
  * @param  pData The destination Buffer address.
  * @param  Length The length of data to be transferred from ADC peripheral to memory.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start_DMA(ADC_HandleTypeDef *hadc, uint32_t *pData, uint32_t Length)
{
<<<<<<< HEAD
 8002238:	b580      	push	{r7, lr}
 800223a:	b086      	sub	sp, #24
 800223c:	af00      	add	r7, sp, #0
 800223e:	60f8      	str	r0, [r7, #12]
 8002240:	60b9      	str	r1, [r7, #8]
 8002242:	607a      	str	r2, [r7, #4]
  __IO uint32_t counter = 0U;
 8002244:	2300      	movs	r3, #0
 8002246:	613b      	str	r3, [r7, #16]
=======
 800234c:	b580      	push	{r7, lr}
 800234e:	b086      	sub	sp, #24
 8002350:	af00      	add	r7, sp, #0
 8002352:	60f8      	str	r0, [r7, #12]
 8002354:	60b9      	str	r1, [r7, #8]
 8002356:	607a      	str	r2, [r7, #4]
  __IO uint32_t counter = 0U;
 8002358:	2300      	movs	r3, #0
 800235a:	613b      	str	r3, [r7, #16]
>>>>>>> 39e4d10438a821cc799a472af87a77c6796a1676
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));

  /* Process locked */
  __HAL_LOCK(hadc);
<<<<<<< HEAD
 8002248:	68fb      	ldr	r3, [r7, #12]
 800224a:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800224e:	2b01      	cmp	r3, #1
 8002250:	d101      	bne.n	8002256 <HAL_ADC_Start_DMA+0x1e>
 8002252:	2302      	movs	r3, #2
 8002254:	e0e9      	b.n	800242a <HAL_ADC_Start_DMA+0x1f2>
 8002256:	68fb      	ldr	r3, [r7, #12]
 8002258:	2201      	movs	r2, #1
 800225a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
=======
 800235c:	68fb      	ldr	r3, [r7, #12]
 800235e:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8002362:	2b01      	cmp	r3, #1
 8002364:	d101      	bne.n	800236a <HAL_ADC_Start_DMA+0x1e>
 8002366:	2302      	movs	r3, #2
 8002368:	e0e9      	b.n	800253e <HAL_ADC_Start_DMA+0x1f2>
 800236a:	68fb      	ldr	r3, [r7, #12]
 800236c:	2201      	movs	r2, #1
 800236e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
>>>>>>> 39e4d10438a821cc799a472af87a77c6796a1676

  /* Enable the ADC peripheral */
  /* Check if ADC peripheral is disabled in order to enable it and wait during
  Tstab time the ADC's stabilization */
  if ((hadc->Instance->CR2 & ADC_CR2_ADON) != ADC_CR2_ADON)
<<<<<<< HEAD
 800225e:	68fb      	ldr	r3, [r7, #12]
 8002260:	681b      	ldr	r3, [r3, #0]
 8002262:	689b      	ldr	r3, [r3, #8]
 8002264:	f003 0301 	and.w	r3, r3, #1
 8002268:	2b01      	cmp	r3, #1
 800226a:	d018      	beq.n	800229e <HAL_ADC_Start_DMA+0x66>
  {
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 800226c:	68fb      	ldr	r3, [r7, #12]
 800226e:	681b      	ldr	r3, [r3, #0]
 8002270:	689a      	ldr	r2, [r3, #8]
 8002272:	68fb      	ldr	r3, [r7, #12]
 8002274:	681b      	ldr	r3, [r3, #0]
 8002276:	f042 0201 	orr.w	r2, r2, #1
 800227a:	609a      	str	r2, [r3, #8]
=======
 8002372:	68fb      	ldr	r3, [r7, #12]
 8002374:	681b      	ldr	r3, [r3, #0]
 8002376:	689b      	ldr	r3, [r3, #8]
 8002378:	f003 0301 	and.w	r3, r3, #1
 800237c:	2b01      	cmp	r3, #1
 800237e:	d018      	beq.n	80023b2 <HAL_ADC_Start_DMA+0x66>
  {
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 8002380:	68fb      	ldr	r3, [r7, #12]
 8002382:	681b      	ldr	r3, [r3, #0]
 8002384:	689a      	ldr	r2, [r3, #8]
 8002386:	68fb      	ldr	r3, [r7, #12]
 8002388:	681b      	ldr	r3, [r3, #0]
 800238a:	f042 0201 	orr.w	r2, r2, #1
 800238e:	609a      	str	r2, [r3, #8]
>>>>>>> 39e4d10438a821cc799a472af87a77c6796a1676

    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    counter = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
<<<<<<< HEAD
 800227c:	4b6d      	ldr	r3, [pc, #436]	@ (8002434 <HAL_ADC_Start_DMA+0x1fc>)
 800227e:	681b      	ldr	r3, [r3, #0]
 8002280:	4a6d      	ldr	r2, [pc, #436]	@ (8002438 <HAL_ADC_Start_DMA+0x200>)
 8002282:	fba2 2303 	umull	r2, r3, r2, r3
 8002286:	0c9a      	lsrs	r2, r3, #18
 8002288:	4613      	mov	r3, r2
 800228a:	005b      	lsls	r3, r3, #1
 800228c:	4413      	add	r3, r2
 800228e:	613b      	str	r3, [r7, #16]
    while (counter != 0U)
 8002290:	e002      	b.n	8002298 <HAL_ADC_Start_DMA+0x60>
    {
      counter--;
 8002292:	693b      	ldr	r3, [r7, #16]
 8002294:	3b01      	subs	r3, #1
 8002296:	613b      	str	r3, [r7, #16]
    while (counter != 0U)
 8002298:	693b      	ldr	r3, [r7, #16]
 800229a:	2b00      	cmp	r3, #0
 800229c:	d1f9      	bne.n	8002292 <HAL_ADC_Start_DMA+0x5a>
=======
 8002390:	4b6d      	ldr	r3, [pc, #436]	@ (8002548 <HAL_ADC_Start_DMA+0x1fc>)
 8002392:	681b      	ldr	r3, [r3, #0]
 8002394:	4a6d      	ldr	r2, [pc, #436]	@ (800254c <HAL_ADC_Start_DMA+0x200>)
 8002396:	fba2 2303 	umull	r2, r3, r2, r3
 800239a:	0c9a      	lsrs	r2, r3, #18
 800239c:	4613      	mov	r3, r2
 800239e:	005b      	lsls	r3, r3, #1
 80023a0:	4413      	add	r3, r2
 80023a2:	613b      	str	r3, [r7, #16]
    while (counter != 0U)
 80023a4:	e002      	b.n	80023ac <HAL_ADC_Start_DMA+0x60>
    {
      counter--;
 80023a6:	693b      	ldr	r3, [r7, #16]
 80023a8:	3b01      	subs	r3, #1
 80023aa:	613b      	str	r3, [r7, #16]
    while (counter != 0U)
 80023ac:	693b      	ldr	r3, [r7, #16]
 80023ae:	2b00      	cmp	r3, #0
 80023b0:	d1f9      	bne.n	80023a6 <HAL_ADC_Start_DMA+0x5a>
>>>>>>> 39e4d10438a821cc799a472af87a77c6796a1676
    }
  }

  /* Check ADC DMA Mode                                                     */
  /* - disable the DMA Mode if it is already enabled                        */
  if ((hadc->Instance->CR2 & ADC_CR2_DMA) == ADC_CR2_DMA)
<<<<<<< HEAD
 800229e:	68fb      	ldr	r3, [r7, #12]
 80022a0:	681b      	ldr	r3, [r3, #0]
 80022a2:	689b      	ldr	r3, [r3, #8]
 80022a4:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80022a8:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80022ac:	d107      	bne.n	80022be <HAL_ADC_Start_DMA+0x86>
  {
    CLEAR_BIT(hadc->Instance->CR2, ADC_CR2_DMA);
 80022ae:	68fb      	ldr	r3, [r7, #12]
 80022b0:	681b      	ldr	r3, [r3, #0]
 80022b2:	689a      	ldr	r2, [r3, #8]
 80022b4:	68fb      	ldr	r3, [r7, #12]
 80022b6:	681b      	ldr	r3, [r3, #0]
 80022b8:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 80022bc:	609a      	str	r2, [r3, #8]
=======
 80023b2:	68fb      	ldr	r3, [r7, #12]
 80023b4:	681b      	ldr	r3, [r3, #0]
 80023b6:	689b      	ldr	r3, [r3, #8]
 80023b8:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80023bc:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80023c0:	d107      	bne.n	80023d2 <HAL_ADC_Start_DMA+0x86>
  {
    CLEAR_BIT(hadc->Instance->CR2, ADC_CR2_DMA);
 80023c2:	68fb      	ldr	r3, [r7, #12]
 80023c4:	681b      	ldr	r3, [r3, #0]
 80023c6:	689a      	ldr	r2, [r3, #8]
 80023c8:	68fb      	ldr	r3, [r7, #12]
 80023ca:	681b      	ldr	r3, [r3, #0]
 80023cc:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 80023d0:	609a      	str	r2, [r3, #8]
>>>>>>> 39e4d10438a821cc799a472af87a77c6796a1676
  }

  /* Start conversion if ADC is effectively enabled */
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_ADON))
<<<<<<< HEAD
 80022be:	68fb      	ldr	r3, [r7, #12]
 80022c0:	681b      	ldr	r3, [r3, #0]
 80022c2:	689b      	ldr	r3, [r3, #8]
 80022c4:	f003 0301 	and.w	r3, r3, #1
 80022c8:	2b01      	cmp	r3, #1
 80022ca:	f040 80a1 	bne.w	8002410 <HAL_ADC_Start_DMA+0x1d8>
=======
 80023d2:	68fb      	ldr	r3, [r7, #12]
 80023d4:	681b      	ldr	r3, [r3, #0]
 80023d6:	689b      	ldr	r3, [r3, #8]
 80023d8:	f003 0301 	and.w	r3, r3, #1
 80023dc:	2b01      	cmp	r3, #1
 80023de:	f040 80a1 	bne.w	8002524 <HAL_ADC_Start_DMA+0x1d8>
>>>>>>> 39e4d10438a821cc799a472af87a77c6796a1676
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular group operation                */
    ADC_STATE_CLR_SET(hadc->State,
<<<<<<< HEAD
 80022ce:	68fb      	ldr	r3, [r7, #12]
 80022d0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80022d2:	f423 63e0 	bic.w	r3, r3, #1792	@ 0x700
 80022d6:	f023 0301 	bic.w	r3, r3, #1
 80022da:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 80022de:	68fb      	ldr	r3, [r7, #12]
 80022e0:	641a      	str	r2, [r3, #64]	@ 0x40
=======
 80023e2:	68fb      	ldr	r3, [r7, #12]
 80023e4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80023e6:	f423 63e0 	bic.w	r3, r3, #1792	@ 0x700
 80023ea:	f023 0301 	bic.w	r3, r3, #1
 80023ee:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 80023f2:	68fb      	ldr	r3, [r7, #12]
 80023f4:	641a      	str	r2, [r3, #64]	@ 0x40
>>>>>>> 39e4d10438a821cc799a472af87a77c6796a1676
                      HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR,
                      HAL_ADC_STATE_REG_BUSY);

    /* If conversions on group regular are also triggering group injected,    */
    /* update ADC state.                                                      */
    if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
<<<<<<< HEAD
 80022e2:	68fb      	ldr	r3, [r7, #12]
 80022e4:	681b      	ldr	r3, [r3, #0]
 80022e6:	685b      	ldr	r3, [r3, #4]
 80022e8:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80022ec:	2b00      	cmp	r3, #0
 80022ee:	d007      	beq.n	8002300 <HAL_ADC_Start_DMA+0xc8>
    {
      ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 80022f0:	68fb      	ldr	r3, [r7, #12]
 80022f2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80022f4:	f423 5340 	bic.w	r3, r3, #12288	@ 0x3000
 80022f8:	f443 5280 	orr.w	r2, r3, #4096	@ 0x1000
 80022fc:	68fb      	ldr	r3, [r7, #12]
 80022fe:	641a      	str	r2, [r3, #64]	@ 0x40
=======
 80023f6:	68fb      	ldr	r3, [r7, #12]
 80023f8:	681b      	ldr	r3, [r3, #0]
 80023fa:	685b      	ldr	r3, [r3, #4]
 80023fc:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002400:	2b00      	cmp	r3, #0
 8002402:	d007      	beq.n	8002414 <HAL_ADC_Start_DMA+0xc8>
    {
      ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 8002404:	68fb      	ldr	r3, [r7, #12]
 8002406:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002408:	f423 5340 	bic.w	r3, r3, #12288	@ 0x3000
 800240c:	f443 5280 	orr.w	r2, r3, #4096	@ 0x1000
 8002410:	68fb      	ldr	r3, [r7, #12]
 8002412:	641a      	str	r2, [r3, #64]	@ 0x40
>>>>>>> 39e4d10438a821cc799a472af87a77c6796a1676
    }

    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
<<<<<<< HEAD
 8002300:	68fb      	ldr	r3, [r7, #12]
 8002302:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002304:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8002308:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800230c:	d106      	bne.n	800231c <HAL_ADC_Start_DMA+0xe4>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));
 800230e:	68fb      	ldr	r3, [r7, #12]
 8002310:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002312:	f023 0206 	bic.w	r2, r3, #6
 8002316:	68fb      	ldr	r3, [r7, #12]
 8002318:	645a      	str	r2, [r3, #68]	@ 0x44
 800231a:	e002      	b.n	8002322 <HAL_ADC_Start_DMA+0xea>
=======
 8002414:	68fb      	ldr	r3, [r7, #12]
 8002416:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002418:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 800241c:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8002420:	d106      	bne.n	8002430 <HAL_ADC_Start_DMA+0xe4>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));
 8002422:	68fb      	ldr	r3, [r7, #12]
 8002424:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002426:	f023 0206 	bic.w	r2, r3, #6
 800242a:	68fb      	ldr	r3, [r7, #12]
 800242c:	645a      	str	r2, [r3, #68]	@ 0x44
 800242e:	e002      	b.n	8002436 <HAL_ADC_Start_DMA+0xea>
>>>>>>> 39e4d10438a821cc799a472af87a77c6796a1676
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
<<<<<<< HEAD
 800231c:	68fb      	ldr	r3, [r7, #12]
 800231e:	2200      	movs	r2, #0
 8002320:	645a      	str	r2, [r3, #68]	@ 0x44
=======
 8002430:	68fb      	ldr	r3, [r7, #12]
 8002432:	2200      	movs	r2, #0
 8002434:	645a      	str	r2, [r3, #68]	@ 0x44
>>>>>>> 39e4d10438a821cc799a472af87a77c6796a1676
    }

    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);
<<<<<<< HEAD
 8002322:	68fb      	ldr	r3, [r7, #12]
 8002324:	2200      	movs	r2, #0
 8002326:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
=======
 8002436:	68fb      	ldr	r3, [r7, #12]
 8002438:	2200      	movs	r2, #0
 800243a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
>>>>>>> 39e4d10438a821cc799a472af87a77c6796a1676

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
<<<<<<< HEAD
 800232a:	4b44      	ldr	r3, [pc, #272]	@ (800243c <HAL_ADC_Start_DMA+0x204>)
 800232c:	617b      	str	r3, [r7, #20]

    /* Set the DMA transfer complete callback */
    hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 800232e:	68fb      	ldr	r3, [r7, #12]
 8002330:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002332:	4a43      	ldr	r2, [pc, #268]	@ (8002440 <HAL_ADC_Start_DMA+0x208>)
 8002334:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Set the DMA half transfer complete callback */
    hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 8002336:	68fb      	ldr	r3, [r7, #12]
 8002338:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800233a:	4a42      	ldr	r2, [pc, #264]	@ (8002444 <HAL_ADC_Start_DMA+0x20c>)
 800233c:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Set the DMA error callback */
    hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 800233e:	68fb      	ldr	r3, [r7, #12]
 8002340:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002342:	4a41      	ldr	r2, [pc, #260]	@ (8002448 <HAL_ADC_Start_DMA+0x210>)
 8002344:	64da      	str	r2, [r3, #76]	@ 0x4c
=======
 800243e:	4b44      	ldr	r3, [pc, #272]	@ (8002550 <HAL_ADC_Start_DMA+0x204>)
 8002440:	617b      	str	r3, [r7, #20]

    /* Set the DMA transfer complete callback */
    hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 8002442:	68fb      	ldr	r3, [r7, #12]
 8002444:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002446:	4a43      	ldr	r2, [pc, #268]	@ (8002554 <HAL_ADC_Start_DMA+0x208>)
 8002448:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Set the DMA half transfer complete callback */
    hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 800244a:	68fb      	ldr	r3, [r7, #12]
 800244c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800244e:	4a42      	ldr	r2, [pc, #264]	@ (8002558 <HAL_ADC_Start_DMA+0x20c>)
 8002450:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Set the DMA error callback */
    hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 8002452:	68fb      	ldr	r3, [r7, #12]
 8002454:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002456:	4a41      	ldr	r2, [pc, #260]	@ (800255c <HAL_ADC_Start_DMA+0x210>)
 8002458:	64da      	str	r2, [r3, #76]	@ 0x4c
>>>>>>> 39e4d10438a821cc799a472af87a77c6796a1676
    /* Manage ADC and DMA start: ADC overrun interruption, DMA start, ADC     */
    /* start (in case of SW start):                                           */

    /* Clear regular group conversion flag and overrun flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC | ADC_FLAG_OVR);
<<<<<<< HEAD
 8002346:	68fb      	ldr	r3, [r7, #12]
 8002348:	681b      	ldr	r3, [r3, #0]
 800234a:	f06f 0222 	mvn.w	r2, #34	@ 0x22
 800234e:	601a      	str	r2, [r3, #0]

    /* Enable ADC overrun interrupt */
    __HAL_ADC_ENABLE_IT(hadc, ADC_IT_OVR);
 8002350:	68fb      	ldr	r3, [r7, #12]
 8002352:	681b      	ldr	r3, [r3, #0]
 8002354:	685a      	ldr	r2, [r3, #4]
 8002356:	68fb      	ldr	r3, [r7, #12]
 8002358:	681b      	ldr	r3, [r3, #0]
 800235a:	f042 6280 	orr.w	r2, r2, #67108864	@ 0x4000000
 800235e:	605a      	str	r2, [r3, #4]

    /* Enable ADC DMA mode */
    hadc->Instance->CR2 |= ADC_CR2_DMA;
 8002360:	68fb      	ldr	r3, [r7, #12]
 8002362:	681b      	ldr	r3, [r3, #0]
 8002364:	689a      	ldr	r2, [r3, #8]
 8002366:	68fb      	ldr	r3, [r7, #12]
 8002368:	681b      	ldr	r3, [r3, #0]
 800236a:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 800236e:	609a      	str	r2, [r3, #8]

    /* Start the DMA channel */
    HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 8002370:	68fb      	ldr	r3, [r7, #12]
 8002372:	6b98      	ldr	r0, [r3, #56]	@ 0x38
 8002374:	68fb      	ldr	r3, [r7, #12]
 8002376:	681b      	ldr	r3, [r3, #0]
 8002378:	334c      	adds	r3, #76	@ 0x4c
 800237a:	4619      	mov	r1, r3
 800237c:	68ba      	ldr	r2, [r7, #8]
 800237e:	687b      	ldr	r3, [r7, #4]
 8002380:	f000 fcee 	bl	8002d60 <HAL_DMA_Start_IT>

    /* Check if Multimode enabled */
    if (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_MULTI))
 8002384:	697b      	ldr	r3, [r7, #20]
 8002386:	685b      	ldr	r3, [r3, #4]
 8002388:	f003 031f 	and.w	r3, r3, #31
 800238c:	2b00      	cmp	r3, #0
 800238e:	d12a      	bne.n	80023e6 <HAL_ADC_Start_DMA+0x1ae>
    {
#if defined(ADC2) && defined(ADC3)
      if ((hadc->Instance == ADC1) || ((hadc->Instance == ADC2) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_0)) \
 8002390:	68fb      	ldr	r3, [r7, #12]
 8002392:	681b      	ldr	r3, [r3, #0]
 8002394:	4a2d      	ldr	r2, [pc, #180]	@ (800244c <HAL_ADC_Start_DMA+0x214>)
 8002396:	4293      	cmp	r3, r2
 8002398:	d015      	beq.n	80023c6 <HAL_ADC_Start_DMA+0x18e>
 800239a:	68fb      	ldr	r3, [r7, #12]
 800239c:	681b      	ldr	r3, [r3, #0]
 800239e:	4a2c      	ldr	r2, [pc, #176]	@ (8002450 <HAL_ADC_Start_DMA+0x218>)
 80023a0:	4293      	cmp	r3, r2
 80023a2:	d105      	bne.n	80023b0 <HAL_ADC_Start_DMA+0x178>
 80023a4:	4b25      	ldr	r3, [pc, #148]	@ (800243c <HAL_ADC_Start_DMA+0x204>)
 80023a6:	685b      	ldr	r3, [r3, #4]
 80023a8:	f003 031f 	and.w	r3, r3, #31
 80023ac:	2b00      	cmp	r3, #0
 80023ae:	d00a      	beq.n	80023c6 <HAL_ADC_Start_DMA+0x18e>
          || ((hadc->Instance == ADC3) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_4)))
 80023b0:	68fb      	ldr	r3, [r7, #12]
 80023b2:	681b      	ldr	r3, [r3, #0]
 80023b4:	4a27      	ldr	r2, [pc, #156]	@ (8002454 <HAL_ADC_Start_DMA+0x21c>)
 80023b6:	4293      	cmp	r3, r2
 80023b8:	d136      	bne.n	8002428 <HAL_ADC_Start_DMA+0x1f0>
 80023ba:	4b20      	ldr	r3, [pc, #128]	@ (800243c <HAL_ADC_Start_DMA+0x204>)
 80023bc:	685b      	ldr	r3, [r3, #4]
 80023be:	f003 0310 	and.w	r3, r3, #16
 80023c2:	2b00      	cmp	r3, #0
 80023c4:	d130      	bne.n	8002428 <HAL_ADC_Start_DMA+0x1f0>
=======
 800245a:	68fb      	ldr	r3, [r7, #12]
 800245c:	681b      	ldr	r3, [r3, #0]
 800245e:	f06f 0222 	mvn.w	r2, #34	@ 0x22
 8002462:	601a      	str	r2, [r3, #0]

    /* Enable ADC overrun interrupt */
    __HAL_ADC_ENABLE_IT(hadc, ADC_IT_OVR);
 8002464:	68fb      	ldr	r3, [r7, #12]
 8002466:	681b      	ldr	r3, [r3, #0]
 8002468:	685a      	ldr	r2, [r3, #4]
 800246a:	68fb      	ldr	r3, [r7, #12]
 800246c:	681b      	ldr	r3, [r3, #0]
 800246e:	f042 6280 	orr.w	r2, r2, #67108864	@ 0x4000000
 8002472:	605a      	str	r2, [r3, #4]

    /* Enable ADC DMA mode */
    hadc->Instance->CR2 |= ADC_CR2_DMA;
 8002474:	68fb      	ldr	r3, [r7, #12]
 8002476:	681b      	ldr	r3, [r3, #0]
 8002478:	689a      	ldr	r2, [r3, #8]
 800247a:	68fb      	ldr	r3, [r7, #12]
 800247c:	681b      	ldr	r3, [r3, #0]
 800247e:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8002482:	609a      	str	r2, [r3, #8]

    /* Start the DMA channel */
    HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 8002484:	68fb      	ldr	r3, [r7, #12]
 8002486:	6b98      	ldr	r0, [r3, #56]	@ 0x38
 8002488:	68fb      	ldr	r3, [r7, #12]
 800248a:	681b      	ldr	r3, [r3, #0]
 800248c:	334c      	adds	r3, #76	@ 0x4c
 800248e:	4619      	mov	r1, r3
 8002490:	68ba      	ldr	r2, [r7, #8]
 8002492:	687b      	ldr	r3, [r7, #4]
 8002494:	f000 fcee 	bl	8002e74 <HAL_DMA_Start_IT>

    /* Check if Multimode enabled */
    if (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_MULTI))
 8002498:	697b      	ldr	r3, [r7, #20]
 800249a:	685b      	ldr	r3, [r3, #4]
 800249c:	f003 031f 	and.w	r3, r3, #31
 80024a0:	2b00      	cmp	r3, #0
 80024a2:	d12a      	bne.n	80024fa <HAL_ADC_Start_DMA+0x1ae>
    {
#if defined(ADC2) && defined(ADC3)
      if ((hadc->Instance == ADC1) || ((hadc->Instance == ADC2) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_0)) \
 80024a4:	68fb      	ldr	r3, [r7, #12]
 80024a6:	681b      	ldr	r3, [r3, #0]
 80024a8:	4a2d      	ldr	r2, [pc, #180]	@ (8002560 <HAL_ADC_Start_DMA+0x214>)
 80024aa:	4293      	cmp	r3, r2
 80024ac:	d015      	beq.n	80024da <HAL_ADC_Start_DMA+0x18e>
 80024ae:	68fb      	ldr	r3, [r7, #12]
 80024b0:	681b      	ldr	r3, [r3, #0]
 80024b2:	4a2c      	ldr	r2, [pc, #176]	@ (8002564 <HAL_ADC_Start_DMA+0x218>)
 80024b4:	4293      	cmp	r3, r2
 80024b6:	d105      	bne.n	80024c4 <HAL_ADC_Start_DMA+0x178>
 80024b8:	4b25      	ldr	r3, [pc, #148]	@ (8002550 <HAL_ADC_Start_DMA+0x204>)
 80024ba:	685b      	ldr	r3, [r3, #4]
 80024bc:	f003 031f 	and.w	r3, r3, #31
 80024c0:	2b00      	cmp	r3, #0
 80024c2:	d00a      	beq.n	80024da <HAL_ADC_Start_DMA+0x18e>
          || ((hadc->Instance == ADC3) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_4)))
 80024c4:	68fb      	ldr	r3, [r7, #12]
 80024c6:	681b      	ldr	r3, [r3, #0]
 80024c8:	4a27      	ldr	r2, [pc, #156]	@ (8002568 <HAL_ADC_Start_DMA+0x21c>)
 80024ca:	4293      	cmp	r3, r2
 80024cc:	d136      	bne.n	800253c <HAL_ADC_Start_DMA+0x1f0>
 80024ce:	4b20      	ldr	r3, [pc, #128]	@ (8002550 <HAL_ADC_Start_DMA+0x204>)
 80024d0:	685b      	ldr	r3, [r3, #4]
 80024d2:	f003 0310 	and.w	r3, r3, #16
 80024d6:	2b00      	cmp	r3, #0
 80024d8:	d130      	bne.n	800253c <HAL_ADC_Start_DMA+0x1f0>
>>>>>>> 39e4d10438a821cc799a472af87a77c6796a1676
      {
#endif /* ADC2 || ADC3 */
        /* if no external trigger present enable software conversion of regular channels */
        if ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET)
<<<<<<< HEAD
 80023c6:	68fb      	ldr	r3, [r7, #12]
 80023c8:	681b      	ldr	r3, [r3, #0]
 80023ca:	689b      	ldr	r3, [r3, #8]
 80023cc:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 80023d0:	2b00      	cmp	r3, #0
 80023d2:	d129      	bne.n	8002428 <HAL_ADC_Start_DMA+0x1f0>
        {
          /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 80023d4:	68fb      	ldr	r3, [r7, #12]
 80023d6:	681b      	ldr	r3, [r3, #0]
 80023d8:	689a      	ldr	r2, [r3, #8]
 80023da:	68fb      	ldr	r3, [r7, #12]
 80023dc:	681b      	ldr	r3, [r3, #0]
 80023de:	f042 4280 	orr.w	r2, r2, #1073741824	@ 0x40000000
 80023e2:	609a      	str	r2, [r3, #8]
 80023e4:	e020      	b.n	8002428 <HAL_ADC_Start_DMA+0x1f0>
=======
 80024da:	68fb      	ldr	r3, [r7, #12]
 80024dc:	681b      	ldr	r3, [r3, #0]
 80024de:	689b      	ldr	r3, [r3, #8]
 80024e0:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 80024e4:	2b00      	cmp	r3, #0
 80024e6:	d129      	bne.n	800253c <HAL_ADC_Start_DMA+0x1f0>
        {
          /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 80024e8:	68fb      	ldr	r3, [r7, #12]
 80024ea:	681b      	ldr	r3, [r3, #0]
 80024ec:	689a      	ldr	r2, [r3, #8]
 80024ee:	68fb      	ldr	r3, [r7, #12]
 80024f0:	681b      	ldr	r3, [r3, #0]
 80024f2:	f042 4280 	orr.w	r2, r2, #1073741824	@ 0x40000000
 80024f6:	609a      	str	r2, [r3, #8]
 80024f8:	e020      	b.n	800253c <HAL_ADC_Start_DMA+0x1f0>
>>>>>>> 39e4d10438a821cc799a472af87a77c6796a1676
#endif /* ADC2 || ADC3 */
    }
    else
    {
      /* if instance of handle correspond to ADC1 and  no external trigger present enable software conversion of regular channels */
      if ((hadc->Instance == ADC1) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
<<<<<<< HEAD
 80023e6:	68fb      	ldr	r3, [r7, #12]
 80023e8:	681b      	ldr	r3, [r3, #0]
 80023ea:	4a18      	ldr	r2, [pc, #96]	@ (800244c <HAL_ADC_Start_DMA+0x214>)
 80023ec:	4293      	cmp	r3, r2
 80023ee:	d11b      	bne.n	8002428 <HAL_ADC_Start_DMA+0x1f0>
 80023f0:	68fb      	ldr	r3, [r7, #12]
 80023f2:	681b      	ldr	r3, [r3, #0]
 80023f4:	689b      	ldr	r3, [r3, #8]
 80023f6:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 80023fa:	2b00      	cmp	r3, #0
 80023fc:	d114      	bne.n	8002428 <HAL_ADC_Start_DMA+0x1f0>
      {
        /* Enable the selected ADC software conversion for regular group */
        hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 80023fe:	68fb      	ldr	r3, [r7, #12]
 8002400:	681b      	ldr	r3, [r3, #0]
 8002402:	689a      	ldr	r2, [r3, #8]
 8002404:	68fb      	ldr	r3, [r7, #12]
 8002406:	681b      	ldr	r3, [r3, #0]
 8002408:	f042 4280 	orr.w	r2, r2, #1073741824	@ 0x40000000
 800240c:	609a      	str	r2, [r3, #8]
 800240e:	e00b      	b.n	8002428 <HAL_ADC_Start_DMA+0x1f0>
=======
 80024fa:	68fb      	ldr	r3, [r7, #12]
 80024fc:	681b      	ldr	r3, [r3, #0]
 80024fe:	4a18      	ldr	r2, [pc, #96]	@ (8002560 <HAL_ADC_Start_DMA+0x214>)
 8002500:	4293      	cmp	r3, r2
 8002502:	d11b      	bne.n	800253c <HAL_ADC_Start_DMA+0x1f0>
 8002504:	68fb      	ldr	r3, [r7, #12]
 8002506:	681b      	ldr	r3, [r3, #0]
 8002508:	689b      	ldr	r3, [r3, #8]
 800250a:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 800250e:	2b00      	cmp	r3, #0
 8002510:	d114      	bne.n	800253c <HAL_ADC_Start_DMA+0x1f0>
      {
        /* Enable the selected ADC software conversion for regular group */
        hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8002512:	68fb      	ldr	r3, [r7, #12]
 8002514:	681b      	ldr	r3, [r3, #0]
 8002516:	689a      	ldr	r2, [r3, #8]
 8002518:	68fb      	ldr	r3, [r7, #12]
 800251a:	681b      	ldr	r3, [r3, #0]
 800251c:	f042 4280 	orr.w	r2, r2, #1073741824	@ 0x40000000
 8002520:	609a      	str	r2, [r3, #8]
 8002522:	e00b      	b.n	800253c <HAL_ADC_Start_DMA+0x1f0>
>>>>>>> 39e4d10438a821cc799a472af87a77c6796a1676
    }
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
<<<<<<< HEAD
 8002410:	68fb      	ldr	r3, [r7, #12]
 8002412:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002414:	f043 0210 	orr.w	r2, r3, #16
 8002418:	68fb      	ldr	r3, [r7, #12]
 800241a:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Set ADC error code to ADC IP internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800241c:	68fb      	ldr	r3, [r7, #12]
 800241e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002420:	f043 0201 	orr.w	r2, r3, #1
 8002424:	68fb      	ldr	r3, [r7, #12]
 8002426:	645a      	str	r2, [r3, #68]	@ 0x44
=======
 8002524:	68fb      	ldr	r3, [r7, #12]
 8002526:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002528:	f043 0210 	orr.w	r2, r3, #16
 800252c:	68fb      	ldr	r3, [r7, #12]
 800252e:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Set ADC error code to ADC IP internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002530:	68fb      	ldr	r3, [r7, #12]
 8002532:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002534:	f043 0201 	orr.w	r2, r3, #1
 8002538:	68fb      	ldr	r3, [r7, #12]
 800253a:	645a      	str	r2, [r3, #68]	@ 0x44
>>>>>>> 39e4d10438a821cc799a472af87a77c6796a1676
  }

  /* Return function status */
  return HAL_OK;
<<<<<<< HEAD
 8002428:	2300      	movs	r3, #0
}
 800242a:	4618      	mov	r0, r3
 800242c:	3718      	adds	r7, #24
 800242e:	46bd      	mov	sp, r7
 8002430:	bd80      	pop	{r7, pc}
 8002432:	bf00      	nop
 8002434:	20000000 	.word	0x20000000
 8002438:	431bde83 	.word	0x431bde83
 800243c:	40012300 	.word	0x40012300
 8002440:	080028dd 	.word	0x080028dd
 8002444:	08002997 	.word	0x08002997
 8002448:	080029b3 	.word	0x080029b3
 800244c:	40012000 	.word	0x40012000
 8002450:	40012100 	.word	0x40012100
 8002454:	40012200 	.word	0x40012200

08002458 <HAL_ADC_ConvHalfCpltCallback>:
=======
 800253c:	2300      	movs	r3, #0
}
 800253e:	4618      	mov	r0, r3
 8002540:	3718      	adds	r7, #24
 8002542:	46bd      	mov	sp, r7
 8002544:	bd80      	pop	{r7, pc}
 8002546:	bf00      	nop
 8002548:	20000000 	.word	0x20000000
 800254c:	431bde83 	.word	0x431bde83
 8002550:	40012300 	.word	0x40012300
 8002554:	080029f1 	.word	0x080029f1
 8002558:	08002aab 	.word	0x08002aab
 800255c:	08002ac7 	.word	0x08002ac7
 8002560:	40012000 	.word	0x40012000
 8002564:	40012100 	.word	0x40012100
 8002568:	40012200 	.word	0x40012200

0800256c <HAL_ADC_ConvHalfCpltCallback>:
>>>>>>> 39e4d10438a821cc799a472af87a77c6796a1676
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ConvHalfCpltCallback(ADC_HandleTypeDef *hadc)
{
<<<<<<< HEAD
 8002458:	b480      	push	{r7}
 800245a:	b083      	sub	sp, #12
 800245c:	af00      	add	r7, sp, #0
 800245e:	6078      	str	r0, [r7, #4]
=======
 800256c:	b480      	push	{r7}
 800256e:	b083      	sub	sp, #12
 8002570:	af00      	add	r7, sp, #0
 8002572:	6078      	str	r0, [r7, #4]
>>>>>>> 39e4d10438a821cc799a472af87a77c6796a1676
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ConvHalfCpltCallback could be implemented in the user file
   */
}
<<<<<<< HEAD
 8002460:	bf00      	nop
 8002462:	370c      	adds	r7, #12
 8002464:	46bd      	mov	sp, r7
 8002466:	f85d 7b04 	ldr.w	r7, [sp], #4
 800246a:	4770      	bx	lr

0800246c <HAL_ADC_ErrorCallback>:
=======
 8002574:	bf00      	nop
 8002576:	370c      	adds	r7, #12
 8002578:	46bd      	mov	sp, r7
 800257a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800257e:	4770      	bx	lr

08002580 <HAL_ADC_ErrorCallback>:
>>>>>>> 39e4d10438a821cc799a472af87a77c6796a1676
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
<<<<<<< HEAD
 800246c:	b480      	push	{r7}
 800246e:	b083      	sub	sp, #12
 8002470:	af00      	add	r7, sp, #0
 8002472:	6078      	str	r0, [r7, #4]
=======
 8002580:	b480      	push	{r7}
 8002582:	b083      	sub	sp, #12
 8002584:	af00      	add	r7, sp, #0
 8002586:	6078      	str	r0, [r7, #4]
>>>>>>> 39e4d10438a821cc799a472af87a77c6796a1676
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ErrorCallback could be implemented in the user file
   */
}
<<<<<<< HEAD
 8002474:	bf00      	nop
 8002476:	370c      	adds	r7, #12
 8002478:	46bd      	mov	sp, r7
 800247a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800247e:	4770      	bx	lr

08002480 <HAL_ADC_ConfigChannel>:
=======
 8002588:	bf00      	nop
 800258a:	370c      	adds	r7, #12
 800258c:	46bd      	mov	sp, r7
 800258e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002592:	4770      	bx	lr

08002594 <HAL_ADC_ConfigChannel>:
>>>>>>> 39e4d10438a821cc799a472af87a77c6796a1676
*         the configuration information for the specified ADC.
* @param  sConfig ADC configuration structure.
* @retval HAL status
*/
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, ADC_ChannelConfTypeDef *sConfig)
{
<<<<<<< HEAD
 8002480:	b480      	push	{r7}
 8002482:	b085      	sub	sp, #20
 8002484:	af00      	add	r7, sp, #0
 8002486:	6078      	str	r0, [r7, #4]
 8002488:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0U;
 800248a:	2300      	movs	r3, #0
 800248c:	60bb      	str	r3, [r7, #8]
=======
 8002594:	b480      	push	{r7}
 8002596:	b085      	sub	sp, #20
 8002598:	af00      	add	r7, sp, #0
 800259a:	6078      	str	r0, [r7, #4]
 800259c:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0U;
 800259e:	2300      	movs	r3, #0
 80025a0:	60bb      	str	r3, [r7, #8]
>>>>>>> 39e4d10438a821cc799a472af87a77c6796a1676
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));

  /* Process locked */
  __HAL_LOCK(hadc);
<<<<<<< HEAD
 800248e:	687b      	ldr	r3, [r7, #4]
 8002490:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8002494:	2b01      	cmp	r3, #1
 8002496:	d101      	bne.n	800249c <HAL_ADC_ConfigChannel+0x1c>
 8002498:	2302      	movs	r3, #2
 800249a:	e113      	b.n	80026c4 <HAL_ADC_ConfigChannel+0x244>
 800249c:	687b      	ldr	r3, [r7, #4]
 800249e:	2201      	movs	r2, #1
 80024a0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if (sConfig->Channel > ADC_CHANNEL_9)
 80024a4:	683b      	ldr	r3, [r7, #0]
 80024a6:	681b      	ldr	r3, [r3, #0]
 80024a8:	2b09      	cmp	r3, #9
 80024aa:	d925      	bls.n	80024f8 <HAL_ADC_ConfigChannel+0x78>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 80024ac:	687b      	ldr	r3, [r7, #4]
 80024ae:	681b      	ldr	r3, [r3, #0]
 80024b0:	68d9      	ldr	r1, [r3, #12]
 80024b2:	683b      	ldr	r3, [r7, #0]
 80024b4:	681b      	ldr	r3, [r3, #0]
 80024b6:	b29b      	uxth	r3, r3
 80024b8:	461a      	mov	r2, r3
 80024ba:	4613      	mov	r3, r2
 80024bc:	005b      	lsls	r3, r3, #1
 80024be:	4413      	add	r3, r2
 80024c0:	3b1e      	subs	r3, #30
 80024c2:	2207      	movs	r2, #7
 80024c4:	fa02 f303 	lsl.w	r3, r2, r3
 80024c8:	43da      	mvns	r2, r3
 80024ca:	687b      	ldr	r3, [r7, #4]
 80024cc:	681b      	ldr	r3, [r3, #0]
 80024ce:	400a      	ands	r2, r1
 80024d0:	60da      	str	r2, [r3, #12]

    /* Set the new sample time */
    hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 80024d2:	687b      	ldr	r3, [r7, #4]
 80024d4:	681b      	ldr	r3, [r3, #0]
 80024d6:	68d9      	ldr	r1, [r3, #12]
 80024d8:	683b      	ldr	r3, [r7, #0]
 80024da:	689a      	ldr	r2, [r3, #8]
 80024dc:	683b      	ldr	r3, [r7, #0]
 80024de:	681b      	ldr	r3, [r3, #0]
 80024e0:	b29b      	uxth	r3, r3
 80024e2:	4618      	mov	r0, r3
 80024e4:	4603      	mov	r3, r0
 80024e6:	005b      	lsls	r3, r3, #1
 80024e8:	4403      	add	r3, r0
 80024ea:	3b1e      	subs	r3, #30
 80024ec:	409a      	lsls	r2, r3
 80024ee:	687b      	ldr	r3, [r7, #4]
 80024f0:	681b      	ldr	r3, [r3, #0]
 80024f2:	430a      	orrs	r2, r1
 80024f4:	60da      	str	r2, [r3, #12]
 80024f6:	e022      	b.n	800253e <HAL_ADC_ConfigChannel+0xbe>
=======
 80025a2:	687b      	ldr	r3, [r7, #4]
 80025a4:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80025a8:	2b01      	cmp	r3, #1
 80025aa:	d101      	bne.n	80025b0 <HAL_ADC_ConfigChannel+0x1c>
 80025ac:	2302      	movs	r3, #2
 80025ae:	e113      	b.n	80027d8 <HAL_ADC_ConfigChannel+0x244>
 80025b0:	687b      	ldr	r3, [r7, #4]
 80025b2:	2201      	movs	r2, #1
 80025b4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if (sConfig->Channel > ADC_CHANNEL_9)
 80025b8:	683b      	ldr	r3, [r7, #0]
 80025ba:	681b      	ldr	r3, [r3, #0]
 80025bc:	2b09      	cmp	r3, #9
 80025be:	d925      	bls.n	800260c <HAL_ADC_ConfigChannel+0x78>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 80025c0:	687b      	ldr	r3, [r7, #4]
 80025c2:	681b      	ldr	r3, [r3, #0]
 80025c4:	68d9      	ldr	r1, [r3, #12]
 80025c6:	683b      	ldr	r3, [r7, #0]
 80025c8:	681b      	ldr	r3, [r3, #0]
 80025ca:	b29b      	uxth	r3, r3
 80025cc:	461a      	mov	r2, r3
 80025ce:	4613      	mov	r3, r2
 80025d0:	005b      	lsls	r3, r3, #1
 80025d2:	4413      	add	r3, r2
 80025d4:	3b1e      	subs	r3, #30
 80025d6:	2207      	movs	r2, #7
 80025d8:	fa02 f303 	lsl.w	r3, r2, r3
 80025dc:	43da      	mvns	r2, r3
 80025de:	687b      	ldr	r3, [r7, #4]
 80025e0:	681b      	ldr	r3, [r3, #0]
 80025e2:	400a      	ands	r2, r1
 80025e4:	60da      	str	r2, [r3, #12]

    /* Set the new sample time */
    hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 80025e6:	687b      	ldr	r3, [r7, #4]
 80025e8:	681b      	ldr	r3, [r3, #0]
 80025ea:	68d9      	ldr	r1, [r3, #12]
 80025ec:	683b      	ldr	r3, [r7, #0]
 80025ee:	689a      	ldr	r2, [r3, #8]
 80025f0:	683b      	ldr	r3, [r7, #0]
 80025f2:	681b      	ldr	r3, [r3, #0]
 80025f4:	b29b      	uxth	r3, r3
 80025f6:	4618      	mov	r0, r3
 80025f8:	4603      	mov	r3, r0
 80025fa:	005b      	lsls	r3, r3, #1
 80025fc:	4403      	add	r3, r0
 80025fe:	3b1e      	subs	r3, #30
 8002600:	409a      	lsls	r2, r3
 8002602:	687b      	ldr	r3, [r7, #4]
 8002604:	681b      	ldr	r3, [r3, #0]
 8002606:	430a      	orrs	r2, r1
 8002608:	60da      	str	r2, [r3, #12]
 800260a:	e022      	b.n	8002652 <HAL_ADC_ConfigChannel+0xbe>
>>>>>>> 39e4d10438a821cc799a472af87a77c6796a1676
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
<<<<<<< HEAD
 80024f8:	687b      	ldr	r3, [r7, #4]
 80024fa:	681b      	ldr	r3, [r3, #0]
 80024fc:	6919      	ldr	r1, [r3, #16]
 80024fe:	683b      	ldr	r3, [r7, #0]
 8002500:	681b      	ldr	r3, [r3, #0]
 8002502:	b29b      	uxth	r3, r3
 8002504:	461a      	mov	r2, r3
 8002506:	4613      	mov	r3, r2
 8002508:	005b      	lsls	r3, r3, #1
 800250a:	4413      	add	r3, r2
 800250c:	2207      	movs	r2, #7
 800250e:	fa02 f303 	lsl.w	r3, r2, r3
 8002512:	43da      	mvns	r2, r3
 8002514:	687b      	ldr	r3, [r7, #4]
 8002516:	681b      	ldr	r3, [r3, #0]
 8002518:	400a      	ands	r2, r1
 800251a:	611a      	str	r2, [r3, #16]

    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 800251c:	687b      	ldr	r3, [r7, #4]
 800251e:	681b      	ldr	r3, [r3, #0]
 8002520:	6919      	ldr	r1, [r3, #16]
 8002522:	683b      	ldr	r3, [r7, #0]
 8002524:	689a      	ldr	r2, [r3, #8]
 8002526:	683b      	ldr	r3, [r7, #0]
 8002528:	681b      	ldr	r3, [r3, #0]
 800252a:	b29b      	uxth	r3, r3
 800252c:	4618      	mov	r0, r3
 800252e:	4603      	mov	r3, r0
 8002530:	005b      	lsls	r3, r3, #1
 8002532:	4403      	add	r3, r0
 8002534:	409a      	lsls	r2, r3
 8002536:	687b      	ldr	r3, [r7, #4]
 8002538:	681b      	ldr	r3, [r3, #0]
 800253a:	430a      	orrs	r2, r1
 800253c:	611a      	str	r2, [r3, #16]
=======
 800260c:	687b      	ldr	r3, [r7, #4]
 800260e:	681b      	ldr	r3, [r3, #0]
 8002610:	6919      	ldr	r1, [r3, #16]
 8002612:	683b      	ldr	r3, [r7, #0]
 8002614:	681b      	ldr	r3, [r3, #0]
 8002616:	b29b      	uxth	r3, r3
 8002618:	461a      	mov	r2, r3
 800261a:	4613      	mov	r3, r2
 800261c:	005b      	lsls	r3, r3, #1
 800261e:	4413      	add	r3, r2
 8002620:	2207      	movs	r2, #7
 8002622:	fa02 f303 	lsl.w	r3, r2, r3
 8002626:	43da      	mvns	r2, r3
 8002628:	687b      	ldr	r3, [r7, #4]
 800262a:	681b      	ldr	r3, [r3, #0]
 800262c:	400a      	ands	r2, r1
 800262e:	611a      	str	r2, [r3, #16]

    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 8002630:	687b      	ldr	r3, [r7, #4]
 8002632:	681b      	ldr	r3, [r3, #0]
 8002634:	6919      	ldr	r1, [r3, #16]
 8002636:	683b      	ldr	r3, [r7, #0]
 8002638:	689a      	ldr	r2, [r3, #8]
 800263a:	683b      	ldr	r3, [r7, #0]
 800263c:	681b      	ldr	r3, [r3, #0]
 800263e:	b29b      	uxth	r3, r3
 8002640:	4618      	mov	r0, r3
 8002642:	4603      	mov	r3, r0
 8002644:	005b      	lsls	r3, r3, #1
 8002646:	4403      	add	r3, r0
 8002648:	409a      	lsls	r2, r3
 800264a:	687b      	ldr	r3, [r7, #4]
 800264c:	681b      	ldr	r3, [r3, #0]
 800264e:	430a      	orrs	r2, r1
 8002650:	611a      	str	r2, [r3, #16]
>>>>>>> 39e4d10438a821cc799a472af87a77c6796a1676
  }

  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
<<<<<<< HEAD
 800253e:	683b      	ldr	r3, [r7, #0]
 8002540:	685b      	ldr	r3, [r3, #4]
 8002542:	2b06      	cmp	r3, #6
 8002544:	d824      	bhi.n	8002590 <HAL_ADC_ConfigChannel+0x110>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 8002546:	687b      	ldr	r3, [r7, #4]
 8002548:	681b      	ldr	r3, [r3, #0]
 800254a:	6b59      	ldr	r1, [r3, #52]	@ 0x34
 800254c:	683b      	ldr	r3, [r7, #0]
 800254e:	685a      	ldr	r2, [r3, #4]
 8002550:	4613      	mov	r3, r2
 8002552:	009b      	lsls	r3, r3, #2
 8002554:	4413      	add	r3, r2
 8002556:	3b05      	subs	r3, #5
 8002558:	221f      	movs	r2, #31
 800255a:	fa02 f303 	lsl.w	r3, r2, r3
 800255e:	43da      	mvns	r2, r3
 8002560:	687b      	ldr	r3, [r7, #4]
 8002562:	681b      	ldr	r3, [r3, #0]
 8002564:	400a      	ands	r2, r1
 8002566:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 8002568:	687b      	ldr	r3, [r7, #4]
 800256a:	681b      	ldr	r3, [r3, #0]
 800256c:	6b59      	ldr	r1, [r3, #52]	@ 0x34
 800256e:	683b      	ldr	r3, [r7, #0]
 8002570:	681b      	ldr	r3, [r3, #0]
 8002572:	b29b      	uxth	r3, r3
 8002574:	4618      	mov	r0, r3
 8002576:	683b      	ldr	r3, [r7, #0]
 8002578:	685a      	ldr	r2, [r3, #4]
 800257a:	4613      	mov	r3, r2
 800257c:	009b      	lsls	r3, r3, #2
 800257e:	4413      	add	r3, r2
 8002580:	3b05      	subs	r3, #5
 8002582:	fa00 f203 	lsl.w	r2, r0, r3
 8002586:	687b      	ldr	r3, [r7, #4]
 8002588:	681b      	ldr	r3, [r3, #0]
 800258a:	430a      	orrs	r2, r1
 800258c:	635a      	str	r2, [r3, #52]	@ 0x34
 800258e:	e04c      	b.n	800262a <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 8002590:	683b      	ldr	r3, [r7, #0]
 8002592:	685b      	ldr	r3, [r3, #4]
 8002594:	2b0c      	cmp	r3, #12
 8002596:	d824      	bhi.n	80025e2 <HAL_ADC_ConfigChannel+0x162>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 8002598:	687b      	ldr	r3, [r7, #4]
 800259a:	681b      	ldr	r3, [r3, #0]
 800259c:	6b19      	ldr	r1, [r3, #48]	@ 0x30
 800259e:	683b      	ldr	r3, [r7, #0]
 80025a0:	685a      	ldr	r2, [r3, #4]
 80025a2:	4613      	mov	r3, r2
 80025a4:	009b      	lsls	r3, r3, #2
 80025a6:	4413      	add	r3, r2
 80025a8:	3b23      	subs	r3, #35	@ 0x23
 80025aa:	221f      	movs	r2, #31
 80025ac:	fa02 f303 	lsl.w	r3, r2, r3
 80025b0:	43da      	mvns	r2, r3
 80025b2:	687b      	ldr	r3, [r7, #4]
 80025b4:	681b      	ldr	r3, [r3, #0]
 80025b6:	400a      	ands	r2, r1
 80025b8:	631a      	str	r2, [r3, #48]	@ 0x30

    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 80025ba:	687b      	ldr	r3, [r7, #4]
 80025bc:	681b      	ldr	r3, [r3, #0]
 80025be:	6b19      	ldr	r1, [r3, #48]	@ 0x30
 80025c0:	683b      	ldr	r3, [r7, #0]
 80025c2:	681b      	ldr	r3, [r3, #0]
 80025c4:	b29b      	uxth	r3, r3
 80025c6:	4618      	mov	r0, r3
 80025c8:	683b      	ldr	r3, [r7, #0]
 80025ca:	685a      	ldr	r2, [r3, #4]
 80025cc:	4613      	mov	r3, r2
 80025ce:	009b      	lsls	r3, r3, #2
 80025d0:	4413      	add	r3, r2
 80025d2:	3b23      	subs	r3, #35	@ 0x23
 80025d4:	fa00 f203 	lsl.w	r2, r0, r3
 80025d8:	687b      	ldr	r3, [r7, #4]
 80025da:	681b      	ldr	r3, [r3, #0]
 80025dc:	430a      	orrs	r2, r1
 80025de:	631a      	str	r2, [r3, #48]	@ 0x30
 80025e0:	e023      	b.n	800262a <HAL_ADC_ConfigChannel+0x1aa>
=======
 8002652:	683b      	ldr	r3, [r7, #0]
 8002654:	685b      	ldr	r3, [r3, #4]
 8002656:	2b06      	cmp	r3, #6
 8002658:	d824      	bhi.n	80026a4 <HAL_ADC_ConfigChannel+0x110>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 800265a:	687b      	ldr	r3, [r7, #4]
 800265c:	681b      	ldr	r3, [r3, #0]
 800265e:	6b59      	ldr	r1, [r3, #52]	@ 0x34
 8002660:	683b      	ldr	r3, [r7, #0]
 8002662:	685a      	ldr	r2, [r3, #4]
 8002664:	4613      	mov	r3, r2
 8002666:	009b      	lsls	r3, r3, #2
 8002668:	4413      	add	r3, r2
 800266a:	3b05      	subs	r3, #5
 800266c:	221f      	movs	r2, #31
 800266e:	fa02 f303 	lsl.w	r3, r2, r3
 8002672:	43da      	mvns	r2, r3
 8002674:	687b      	ldr	r3, [r7, #4]
 8002676:	681b      	ldr	r3, [r3, #0]
 8002678:	400a      	ands	r2, r1
 800267a:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 800267c:	687b      	ldr	r3, [r7, #4]
 800267e:	681b      	ldr	r3, [r3, #0]
 8002680:	6b59      	ldr	r1, [r3, #52]	@ 0x34
 8002682:	683b      	ldr	r3, [r7, #0]
 8002684:	681b      	ldr	r3, [r3, #0]
 8002686:	b29b      	uxth	r3, r3
 8002688:	4618      	mov	r0, r3
 800268a:	683b      	ldr	r3, [r7, #0]
 800268c:	685a      	ldr	r2, [r3, #4]
 800268e:	4613      	mov	r3, r2
 8002690:	009b      	lsls	r3, r3, #2
 8002692:	4413      	add	r3, r2
 8002694:	3b05      	subs	r3, #5
 8002696:	fa00 f203 	lsl.w	r2, r0, r3
 800269a:	687b      	ldr	r3, [r7, #4]
 800269c:	681b      	ldr	r3, [r3, #0]
 800269e:	430a      	orrs	r2, r1
 80026a0:	635a      	str	r2, [r3, #52]	@ 0x34
 80026a2:	e04c      	b.n	800273e <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 80026a4:	683b      	ldr	r3, [r7, #0]
 80026a6:	685b      	ldr	r3, [r3, #4]
 80026a8:	2b0c      	cmp	r3, #12
 80026aa:	d824      	bhi.n	80026f6 <HAL_ADC_ConfigChannel+0x162>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 80026ac:	687b      	ldr	r3, [r7, #4]
 80026ae:	681b      	ldr	r3, [r3, #0]
 80026b0:	6b19      	ldr	r1, [r3, #48]	@ 0x30
 80026b2:	683b      	ldr	r3, [r7, #0]
 80026b4:	685a      	ldr	r2, [r3, #4]
 80026b6:	4613      	mov	r3, r2
 80026b8:	009b      	lsls	r3, r3, #2
 80026ba:	4413      	add	r3, r2
 80026bc:	3b23      	subs	r3, #35	@ 0x23
 80026be:	221f      	movs	r2, #31
 80026c0:	fa02 f303 	lsl.w	r3, r2, r3
 80026c4:	43da      	mvns	r2, r3
 80026c6:	687b      	ldr	r3, [r7, #4]
 80026c8:	681b      	ldr	r3, [r3, #0]
 80026ca:	400a      	ands	r2, r1
 80026cc:	631a      	str	r2, [r3, #48]	@ 0x30

    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 80026ce:	687b      	ldr	r3, [r7, #4]
 80026d0:	681b      	ldr	r3, [r3, #0]
 80026d2:	6b19      	ldr	r1, [r3, #48]	@ 0x30
 80026d4:	683b      	ldr	r3, [r7, #0]
 80026d6:	681b      	ldr	r3, [r3, #0]
 80026d8:	b29b      	uxth	r3, r3
 80026da:	4618      	mov	r0, r3
 80026dc:	683b      	ldr	r3, [r7, #0]
 80026de:	685a      	ldr	r2, [r3, #4]
 80026e0:	4613      	mov	r3, r2
 80026e2:	009b      	lsls	r3, r3, #2
 80026e4:	4413      	add	r3, r2
 80026e6:	3b23      	subs	r3, #35	@ 0x23
 80026e8:	fa00 f203 	lsl.w	r2, r0, r3
 80026ec:	687b      	ldr	r3, [r7, #4]
 80026ee:	681b      	ldr	r3, [r3, #0]
 80026f0:	430a      	orrs	r2, r1
 80026f2:	631a      	str	r2, [r3, #48]	@ 0x30
 80026f4:	e023      	b.n	800273e <HAL_ADC_ConfigChannel+0x1aa>
>>>>>>> 39e4d10438a821cc799a472af87a77c6796a1676
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
<<<<<<< HEAD
 80025e2:	687b      	ldr	r3, [r7, #4]
 80025e4:	681b      	ldr	r3, [r3, #0]
 80025e6:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 80025e8:	683b      	ldr	r3, [r7, #0]
 80025ea:	685a      	ldr	r2, [r3, #4]
 80025ec:	4613      	mov	r3, r2
 80025ee:	009b      	lsls	r3, r3, #2
 80025f0:	4413      	add	r3, r2
 80025f2:	3b41      	subs	r3, #65	@ 0x41
 80025f4:	221f      	movs	r2, #31
 80025f6:	fa02 f303 	lsl.w	r3, r2, r3
 80025fa:	43da      	mvns	r2, r3
 80025fc:	687b      	ldr	r3, [r7, #4]
 80025fe:	681b      	ldr	r3, [r3, #0]
 8002600:	400a      	ands	r2, r1
 8002602:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 8002604:	687b      	ldr	r3, [r7, #4]
 8002606:	681b      	ldr	r3, [r3, #0]
 8002608:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 800260a:	683b      	ldr	r3, [r7, #0]
 800260c:	681b      	ldr	r3, [r3, #0]
 800260e:	b29b      	uxth	r3, r3
 8002610:	4618      	mov	r0, r3
 8002612:	683b      	ldr	r3, [r7, #0]
 8002614:	685a      	ldr	r2, [r3, #4]
 8002616:	4613      	mov	r3, r2
 8002618:	009b      	lsls	r3, r3, #2
 800261a:	4413      	add	r3, r2
 800261c:	3b41      	subs	r3, #65	@ 0x41
 800261e:	fa00 f203 	lsl.w	r2, r0, r3
 8002622:	687b      	ldr	r3, [r7, #4]
 8002624:	681b      	ldr	r3, [r3, #0]
 8002626:	430a      	orrs	r2, r1
 8002628:	62da      	str	r2, [r3, #44]	@ 0x2c
=======
 80026f6:	687b      	ldr	r3, [r7, #4]
 80026f8:	681b      	ldr	r3, [r3, #0]
 80026fa:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 80026fc:	683b      	ldr	r3, [r7, #0]
 80026fe:	685a      	ldr	r2, [r3, #4]
 8002700:	4613      	mov	r3, r2
 8002702:	009b      	lsls	r3, r3, #2
 8002704:	4413      	add	r3, r2
 8002706:	3b41      	subs	r3, #65	@ 0x41
 8002708:	221f      	movs	r2, #31
 800270a:	fa02 f303 	lsl.w	r3, r2, r3
 800270e:	43da      	mvns	r2, r3
 8002710:	687b      	ldr	r3, [r7, #4]
 8002712:	681b      	ldr	r3, [r3, #0]
 8002714:	400a      	ands	r2, r1
 8002716:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 8002718:	687b      	ldr	r3, [r7, #4]
 800271a:	681b      	ldr	r3, [r3, #0]
 800271c:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 800271e:	683b      	ldr	r3, [r7, #0]
 8002720:	681b      	ldr	r3, [r3, #0]
 8002722:	b29b      	uxth	r3, r3
 8002724:	4618      	mov	r0, r3
 8002726:	683b      	ldr	r3, [r7, #0]
 8002728:	685a      	ldr	r2, [r3, #4]
 800272a:	4613      	mov	r3, r2
 800272c:	009b      	lsls	r3, r3, #2
 800272e:	4413      	add	r3, r2
 8002730:	3b41      	subs	r3, #65	@ 0x41
 8002732:	fa00 f203 	lsl.w	r2, r0, r3
 8002736:	687b      	ldr	r3, [r7, #4]
 8002738:	681b      	ldr	r3, [r3, #0]
 800273a:	430a      	orrs	r2, r1
 800273c:	62da      	str	r2, [r3, #44]	@ 0x2c
>>>>>>> 39e4d10438a821cc799a472af87a77c6796a1676
  }

  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
<<<<<<< HEAD
 800262a:	4b29      	ldr	r3, [pc, #164]	@ (80026d0 <HAL_ADC_ConfigChannel+0x250>)
 800262c:	60fb      	str	r3, [r7, #12]

  /* if ADC1 Channel_18 is selected for VBAT Channel ennable VBATE */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 800262e:	687b      	ldr	r3, [r7, #4]
 8002630:	681b      	ldr	r3, [r3, #0]
 8002632:	4a28      	ldr	r2, [pc, #160]	@ (80026d4 <HAL_ADC_ConfigChannel+0x254>)
 8002634:	4293      	cmp	r3, r2
 8002636:	d10f      	bne.n	8002658 <HAL_ADC_ConfigChannel+0x1d8>
 8002638:	683b      	ldr	r3, [r7, #0]
 800263a:	681b      	ldr	r3, [r3, #0]
 800263c:	2b12      	cmp	r3, #18
 800263e:	d10b      	bne.n	8002658 <HAL_ADC_ConfigChannel+0x1d8>
=======
 800273e:	4b29      	ldr	r3, [pc, #164]	@ (80027e4 <HAL_ADC_ConfigChannel+0x250>)
 8002740:	60fb      	str	r3, [r7, #12]

  /* if ADC1 Channel_18 is selected for VBAT Channel ennable VBATE */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 8002742:	687b      	ldr	r3, [r7, #4]
 8002744:	681b      	ldr	r3, [r3, #0]
 8002746:	4a28      	ldr	r2, [pc, #160]	@ (80027e8 <HAL_ADC_ConfigChannel+0x254>)
 8002748:	4293      	cmp	r3, r2
 800274a:	d10f      	bne.n	800276c <HAL_ADC_ConfigChannel+0x1d8>
 800274c:	683b      	ldr	r3, [r7, #0]
 800274e:	681b      	ldr	r3, [r3, #0]
 8002750:	2b12      	cmp	r3, #18
 8002752:	d10b      	bne.n	800276c <HAL_ADC_ConfigChannel+0x1d8>
>>>>>>> 39e4d10438a821cc799a472af87a77c6796a1676
  {
    /* Disable the TEMPSENSOR channel in case of using board with multiplixed ADC_CHANNEL_VBAT & ADC_CHANNEL_TEMPSENSOR*/
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_TSVREFE;
<<<<<<< HEAD
 8002640:	68fb      	ldr	r3, [r7, #12]
 8002642:	685b      	ldr	r3, [r3, #4]
 8002644:	f423 0200 	bic.w	r2, r3, #8388608	@ 0x800000
 8002648:	68fb      	ldr	r3, [r7, #12]
 800264a:	605a      	str	r2, [r3, #4]
    }
    /* Enable the VBAT channel*/
    tmpADC_Common->CCR |= ADC_CCR_VBATE;
 800264c:	68fb      	ldr	r3, [r7, #12]
 800264e:	685b      	ldr	r3, [r3, #4]
 8002650:	f443 0280 	orr.w	r2, r3, #4194304	@ 0x400000
 8002654:	68fb      	ldr	r3, [r7, #12]
 8002656:	605a      	str	r2, [r3, #4]
=======
 8002754:	68fb      	ldr	r3, [r7, #12]
 8002756:	685b      	ldr	r3, [r3, #4]
 8002758:	f423 0200 	bic.w	r2, r3, #8388608	@ 0x800000
 800275c:	68fb      	ldr	r3, [r7, #12]
 800275e:	605a      	str	r2, [r3, #4]
    }
    /* Enable the VBAT channel*/
    tmpADC_Common->CCR |= ADC_CCR_VBATE;
 8002760:	68fb      	ldr	r3, [r7, #12]
 8002762:	685b      	ldr	r3, [r3, #4]
 8002764:	f443 0280 	orr.w	r2, r3, #4194304	@ 0x400000
 8002768:	68fb      	ldr	r3, [r7, #12]
 800276a:	605a      	str	r2, [r3, #4]
>>>>>>> 39e4d10438a821cc799a472af87a77c6796a1676
  }

  /* if ADC1 Channel_16 or Channel_18 is selected for Temperature sensor or
     Channel_17 is selected for VREFINT enable TSVREFE */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
<<<<<<< HEAD
 8002658:	687b      	ldr	r3, [r7, #4]
 800265a:	681b      	ldr	r3, [r3, #0]
 800265c:	4a1d      	ldr	r2, [pc, #116]	@ (80026d4 <HAL_ADC_ConfigChannel+0x254>)
 800265e:	4293      	cmp	r3, r2
 8002660:	d12b      	bne.n	80026ba <HAL_ADC_ConfigChannel+0x23a>
 8002662:	683b      	ldr	r3, [r7, #0]
 8002664:	681b      	ldr	r3, [r3, #0]
 8002666:	4a1c      	ldr	r2, [pc, #112]	@ (80026d8 <HAL_ADC_ConfigChannel+0x258>)
 8002668:	4293      	cmp	r3, r2
 800266a:	d003      	beq.n	8002674 <HAL_ADC_ConfigChannel+0x1f4>
 800266c:	683b      	ldr	r3, [r7, #0]
 800266e:	681b      	ldr	r3, [r3, #0]
 8002670:	2b11      	cmp	r3, #17
 8002672:	d122      	bne.n	80026ba <HAL_ADC_ConfigChannel+0x23a>
=======
 800276c:	687b      	ldr	r3, [r7, #4]
 800276e:	681b      	ldr	r3, [r3, #0]
 8002770:	4a1d      	ldr	r2, [pc, #116]	@ (80027e8 <HAL_ADC_ConfigChannel+0x254>)
 8002772:	4293      	cmp	r3, r2
 8002774:	d12b      	bne.n	80027ce <HAL_ADC_ConfigChannel+0x23a>
 8002776:	683b      	ldr	r3, [r7, #0]
 8002778:	681b      	ldr	r3, [r3, #0]
 800277a:	4a1c      	ldr	r2, [pc, #112]	@ (80027ec <HAL_ADC_ConfigChannel+0x258>)
 800277c:	4293      	cmp	r3, r2
 800277e:	d003      	beq.n	8002788 <HAL_ADC_ConfigChannel+0x1f4>
 8002780:	683b      	ldr	r3, [r7, #0]
 8002782:	681b      	ldr	r3, [r3, #0]
 8002784:	2b11      	cmp	r3, #17
 8002786:	d122      	bne.n	80027ce <HAL_ADC_ConfigChannel+0x23a>
>>>>>>> 39e4d10438a821cc799a472af87a77c6796a1676
  {
    /* Disable the VBAT channel in case of using board with multiplixed ADC_CHANNEL_VBAT & ADC_CHANNEL_TEMPSENSOR*/
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_VBATE;
<<<<<<< HEAD
 8002674:	68fb      	ldr	r3, [r7, #12]
 8002676:	685b      	ldr	r3, [r3, #4]
 8002678:	f423 0280 	bic.w	r2, r3, #4194304	@ 0x400000
 800267c:	68fb      	ldr	r3, [r7, #12]
 800267e:	605a      	str	r2, [r3, #4]
    }
    /* Enable the Temperature sensor and VREFINT channel*/
    tmpADC_Common->CCR |= ADC_CCR_TSVREFE;
 8002680:	68fb      	ldr	r3, [r7, #12]
 8002682:	685b      	ldr	r3, [r3, #4]
 8002684:	f443 0200 	orr.w	r2, r3, #8388608	@ 0x800000
 8002688:	68fb      	ldr	r3, [r7, #12]
 800268a:	605a      	str	r2, [r3, #4]

    if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 800268c:	683b      	ldr	r3, [r7, #0]
 800268e:	681b      	ldr	r3, [r3, #0]
 8002690:	4a11      	ldr	r2, [pc, #68]	@ (80026d8 <HAL_ADC_ConfigChannel+0x258>)
 8002692:	4293      	cmp	r3, r2
 8002694:	d111      	bne.n	80026ba <HAL_ADC_ConfigChannel+0x23a>
=======
 8002788:	68fb      	ldr	r3, [r7, #12]
 800278a:	685b      	ldr	r3, [r3, #4]
 800278c:	f423 0280 	bic.w	r2, r3, #4194304	@ 0x400000
 8002790:	68fb      	ldr	r3, [r7, #12]
 8002792:	605a      	str	r2, [r3, #4]
    }
    /* Enable the Temperature sensor and VREFINT channel*/
    tmpADC_Common->CCR |= ADC_CCR_TSVREFE;
 8002794:	68fb      	ldr	r3, [r7, #12]
 8002796:	685b      	ldr	r3, [r3, #4]
 8002798:	f443 0200 	orr.w	r2, r3, #8388608	@ 0x800000
 800279c:	68fb      	ldr	r3, [r7, #12]
 800279e:	605a      	str	r2, [r3, #4]

    if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 80027a0:	683b      	ldr	r3, [r7, #0]
 80027a2:	681b      	ldr	r3, [r3, #0]
 80027a4:	4a11      	ldr	r2, [pc, #68]	@ (80027ec <HAL_ADC_ConfigChannel+0x258>)
 80027a6:	4293      	cmp	r3, r2
 80027a8:	d111      	bne.n	80027ce <HAL_ADC_ConfigChannel+0x23a>
>>>>>>> 39e4d10438a821cc799a472af87a77c6796a1676
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
<<<<<<< HEAD
 8002696:	4b11      	ldr	r3, [pc, #68]	@ (80026dc <HAL_ADC_ConfigChannel+0x25c>)
 8002698:	681b      	ldr	r3, [r3, #0]
 800269a:	4a11      	ldr	r2, [pc, #68]	@ (80026e0 <HAL_ADC_ConfigChannel+0x260>)
 800269c:	fba2 2303 	umull	r2, r3, r2, r3
 80026a0:	0c9a      	lsrs	r2, r3, #18
 80026a2:	4613      	mov	r3, r2
 80026a4:	009b      	lsls	r3, r3, #2
 80026a6:	4413      	add	r3, r2
 80026a8:	005b      	lsls	r3, r3, #1
 80026aa:	60bb      	str	r3, [r7, #8]
      while (counter != 0U)
 80026ac:	e002      	b.n	80026b4 <HAL_ADC_ConfigChannel+0x234>
      {
        counter--;
 80026ae:	68bb      	ldr	r3, [r7, #8]
 80026b0:	3b01      	subs	r3, #1
 80026b2:	60bb      	str	r3, [r7, #8]
      while (counter != 0U)
 80026b4:	68bb      	ldr	r3, [r7, #8]
 80026b6:	2b00      	cmp	r3, #0
 80026b8:	d1f9      	bne.n	80026ae <HAL_ADC_ConfigChannel+0x22e>
=======
 80027aa:	4b11      	ldr	r3, [pc, #68]	@ (80027f0 <HAL_ADC_ConfigChannel+0x25c>)
 80027ac:	681b      	ldr	r3, [r3, #0]
 80027ae:	4a11      	ldr	r2, [pc, #68]	@ (80027f4 <HAL_ADC_ConfigChannel+0x260>)
 80027b0:	fba2 2303 	umull	r2, r3, r2, r3
 80027b4:	0c9a      	lsrs	r2, r3, #18
 80027b6:	4613      	mov	r3, r2
 80027b8:	009b      	lsls	r3, r3, #2
 80027ba:	4413      	add	r3, r2
 80027bc:	005b      	lsls	r3, r3, #1
 80027be:	60bb      	str	r3, [r7, #8]
      while (counter != 0U)
 80027c0:	e002      	b.n	80027c8 <HAL_ADC_ConfigChannel+0x234>
      {
        counter--;
 80027c2:	68bb      	ldr	r3, [r7, #8]
 80027c4:	3b01      	subs	r3, #1
 80027c6:	60bb      	str	r3, [r7, #8]
      while (counter != 0U)
 80027c8:	68bb      	ldr	r3, [r7, #8]
 80027ca:	2b00      	cmp	r3, #0
 80027cc:	d1f9      	bne.n	80027c2 <HAL_ADC_ConfigChannel+0x22e>
>>>>>>> 39e4d10438a821cc799a472af87a77c6796a1676
      }
    }
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
<<<<<<< HEAD
 80026ba:	687b      	ldr	r3, [r7, #4]
 80026bc:	2200      	movs	r2, #0
 80026be:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Return function status */
  return HAL_OK;
 80026c2:	2300      	movs	r3, #0
}
 80026c4:	4618      	mov	r0, r3
 80026c6:	3714      	adds	r7, #20
 80026c8:	46bd      	mov	sp, r7
 80026ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026ce:	4770      	bx	lr
 80026d0:	40012300 	.word	0x40012300
 80026d4:	40012000 	.word	0x40012000
 80026d8:	10000012 	.word	0x10000012
 80026dc:	20000000 	.word	0x20000000
 80026e0:	431bde83 	.word	0x431bde83

080026e4 <ADC_Init>:
=======
 80027ce:	687b      	ldr	r3, [r7, #4]
 80027d0:	2200      	movs	r2, #0
 80027d2:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Return function status */
  return HAL_OK;
 80027d6:	2300      	movs	r3, #0
}
 80027d8:	4618      	mov	r0, r3
 80027da:	3714      	adds	r7, #20
 80027dc:	46bd      	mov	sp, r7
 80027de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027e2:	4770      	bx	lr
 80027e4:	40012300 	.word	0x40012300
 80027e8:	40012000 	.word	0x40012000
 80027ec:	10000012 	.word	0x10000012
 80027f0:	20000000 	.word	0x20000000
 80027f4:	431bde83 	.word	0x431bde83

080027f8 <ADC_Init>:
>>>>>>> 39e4d10438a821cc799a472af87a77c6796a1676
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef *hadc)
{
<<<<<<< HEAD
 80026e4:	b480      	push	{r7}
 80026e6:	b085      	sub	sp, #20
 80026e8:	af00      	add	r7, sp, #0
 80026ea:	6078      	str	r0, [r7, #4]
=======
 80027f8:	b480      	push	{r7}
 80027fa:	b085      	sub	sp, #20
 80027fc:	af00      	add	r7, sp, #0
 80027fe:	6078      	str	r0, [r7, #4]
>>>>>>> 39e4d10438a821cc799a472af87a77c6796a1676

  /* Set ADC parameters */
  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
<<<<<<< HEAD
 80026ec:	4b79      	ldr	r3, [pc, #484]	@ (80028d4 <ADC_Init+0x1f0>)
 80026ee:	60fb      	str	r3, [r7, #12]

  /* Set the ADC clock prescaler */
  tmpADC_Common->CCR &= ~(ADC_CCR_ADCPRE);
 80026f0:	68fb      	ldr	r3, [r7, #12]
 80026f2:	685b      	ldr	r3, [r3, #4]
 80026f4:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 80026f8:	68fb      	ldr	r3, [r7, #12]
 80026fa:	605a      	str	r2, [r3, #4]
  tmpADC_Common->CCR |=  hadc->Init.ClockPrescaler;
 80026fc:	68fb      	ldr	r3, [r7, #12]
 80026fe:	685a      	ldr	r2, [r3, #4]
 8002700:	687b      	ldr	r3, [r7, #4]
 8002702:	685b      	ldr	r3, [r3, #4]
 8002704:	431a      	orrs	r2, r3
 8002706:	68fb      	ldr	r3, [r7, #12]
 8002708:	605a      	str	r2, [r3, #4]

  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 800270a:	687b      	ldr	r3, [r7, #4]
 800270c:	681b      	ldr	r3, [r3, #0]
 800270e:	685a      	ldr	r2, [r3, #4]
 8002710:	687b      	ldr	r3, [r7, #4]
 8002712:	681b      	ldr	r3, [r3, #0]
 8002714:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8002718:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 800271a:	687b      	ldr	r3, [r7, #4]
 800271c:	681b      	ldr	r3, [r3, #0]
 800271e:	6859      	ldr	r1, [r3, #4]
 8002720:	687b      	ldr	r3, [r7, #4]
 8002722:	691b      	ldr	r3, [r3, #16]
 8002724:	021a      	lsls	r2, r3, #8
 8002726:	687b      	ldr	r3, [r7, #4]
 8002728:	681b      	ldr	r3, [r3, #0]
 800272a:	430a      	orrs	r2, r1
 800272c:	605a      	str	r2, [r3, #4]

  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 800272e:	687b      	ldr	r3, [r7, #4]
 8002730:	681b      	ldr	r3, [r3, #0]
 8002732:	685a      	ldr	r2, [r3, #4]
 8002734:	687b      	ldr	r3, [r7, #4]
 8002736:	681b      	ldr	r3, [r3, #0]
 8002738:	f022 7240 	bic.w	r2, r2, #50331648	@ 0x3000000
 800273c:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 800273e:	687b      	ldr	r3, [r7, #4]
 8002740:	681b      	ldr	r3, [r3, #0]
 8002742:	6859      	ldr	r1, [r3, #4]
 8002744:	687b      	ldr	r3, [r7, #4]
 8002746:	689a      	ldr	r2, [r3, #8]
 8002748:	687b      	ldr	r3, [r7, #4]
 800274a:	681b      	ldr	r3, [r3, #0]
 800274c:	430a      	orrs	r2, r1
 800274e:	605a      	str	r2, [r3, #4]

  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 8002750:	687b      	ldr	r3, [r7, #4]
 8002752:	681b      	ldr	r3, [r3, #0]
 8002754:	689a      	ldr	r2, [r3, #8]
 8002756:	687b      	ldr	r3, [r7, #4]
 8002758:	681b      	ldr	r3, [r3, #0]
 800275a:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 800275e:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 8002760:	687b      	ldr	r3, [r7, #4]
 8002762:	681b      	ldr	r3, [r3, #0]
 8002764:	6899      	ldr	r1, [r3, #8]
 8002766:	687b      	ldr	r3, [r7, #4]
 8002768:	68da      	ldr	r2, [r3, #12]
 800276a:	687b      	ldr	r3, [r7, #4]
 800276c:	681b      	ldr	r3, [r3, #0]
 800276e:	430a      	orrs	r2, r1
 8002770:	609a      	str	r2, [r3, #8]
=======
 8002800:	4b79      	ldr	r3, [pc, #484]	@ (80029e8 <ADC_Init+0x1f0>)
 8002802:	60fb      	str	r3, [r7, #12]

  /* Set the ADC clock prescaler */
  tmpADC_Common->CCR &= ~(ADC_CCR_ADCPRE);
 8002804:	68fb      	ldr	r3, [r7, #12]
 8002806:	685b      	ldr	r3, [r3, #4]
 8002808:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 800280c:	68fb      	ldr	r3, [r7, #12]
 800280e:	605a      	str	r2, [r3, #4]
  tmpADC_Common->CCR |=  hadc->Init.ClockPrescaler;
 8002810:	68fb      	ldr	r3, [r7, #12]
 8002812:	685a      	ldr	r2, [r3, #4]
 8002814:	687b      	ldr	r3, [r7, #4]
 8002816:	685b      	ldr	r3, [r3, #4]
 8002818:	431a      	orrs	r2, r3
 800281a:	68fb      	ldr	r3, [r7, #12]
 800281c:	605a      	str	r2, [r3, #4]

  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 800281e:	687b      	ldr	r3, [r7, #4]
 8002820:	681b      	ldr	r3, [r3, #0]
 8002822:	685a      	ldr	r2, [r3, #4]
 8002824:	687b      	ldr	r3, [r7, #4]
 8002826:	681b      	ldr	r3, [r3, #0]
 8002828:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 800282c:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 800282e:	687b      	ldr	r3, [r7, #4]
 8002830:	681b      	ldr	r3, [r3, #0]
 8002832:	6859      	ldr	r1, [r3, #4]
 8002834:	687b      	ldr	r3, [r7, #4]
 8002836:	691b      	ldr	r3, [r3, #16]
 8002838:	021a      	lsls	r2, r3, #8
 800283a:	687b      	ldr	r3, [r7, #4]
 800283c:	681b      	ldr	r3, [r3, #0]
 800283e:	430a      	orrs	r2, r1
 8002840:	605a      	str	r2, [r3, #4]

  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 8002842:	687b      	ldr	r3, [r7, #4]
 8002844:	681b      	ldr	r3, [r3, #0]
 8002846:	685a      	ldr	r2, [r3, #4]
 8002848:	687b      	ldr	r3, [r7, #4]
 800284a:	681b      	ldr	r3, [r3, #0]
 800284c:	f022 7240 	bic.w	r2, r2, #50331648	@ 0x3000000
 8002850:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 8002852:	687b      	ldr	r3, [r7, #4]
 8002854:	681b      	ldr	r3, [r3, #0]
 8002856:	6859      	ldr	r1, [r3, #4]
 8002858:	687b      	ldr	r3, [r7, #4]
 800285a:	689a      	ldr	r2, [r3, #8]
 800285c:	687b      	ldr	r3, [r7, #4]
 800285e:	681b      	ldr	r3, [r3, #0]
 8002860:	430a      	orrs	r2, r1
 8002862:	605a      	str	r2, [r3, #4]

  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 8002864:	687b      	ldr	r3, [r7, #4]
 8002866:	681b      	ldr	r3, [r3, #0]
 8002868:	689a      	ldr	r2, [r3, #8]
 800286a:	687b      	ldr	r3, [r7, #4]
 800286c:	681b      	ldr	r3, [r3, #0]
 800286e:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8002872:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 8002874:	687b      	ldr	r3, [r7, #4]
 8002876:	681b      	ldr	r3, [r3, #0]
 8002878:	6899      	ldr	r1, [r3, #8]
 800287a:	687b      	ldr	r3, [r7, #4]
 800287c:	68da      	ldr	r2, [r3, #12]
 800287e:	687b      	ldr	r3, [r7, #4]
 8002880:	681b      	ldr	r3, [r3, #0]
 8002882:	430a      	orrs	r2, r1
 8002884:	609a      	str	r2, [r3, #8]
>>>>>>> 39e4d10438a821cc799a472af87a77c6796a1676
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
<<<<<<< HEAD
 8002772:	687b      	ldr	r3, [r7, #4]
 8002774:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002776:	4a58      	ldr	r2, [pc, #352]	@ (80028d8 <ADC_Init+0x1f4>)
 8002778:	4293      	cmp	r3, r2
 800277a:	d022      	beq.n	80027c2 <ADC_Init+0xde>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 800277c:	687b      	ldr	r3, [r7, #4]
 800277e:	681b      	ldr	r3, [r3, #0]
 8002780:	689a      	ldr	r2, [r3, #8]
 8002782:	687b      	ldr	r3, [r7, #4]
 8002784:	681b      	ldr	r3, [r3, #0]
 8002786:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 800278a:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 800278c:	687b      	ldr	r3, [r7, #4]
 800278e:	681b      	ldr	r3, [r3, #0]
 8002790:	6899      	ldr	r1, [r3, #8]
 8002792:	687b      	ldr	r3, [r7, #4]
 8002794:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8002796:	687b      	ldr	r3, [r7, #4]
 8002798:	681b      	ldr	r3, [r3, #0]
 800279a:	430a      	orrs	r2, r1
 800279c:	609a      	str	r2, [r3, #8]

    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 800279e:	687b      	ldr	r3, [r7, #4]
 80027a0:	681b      	ldr	r3, [r3, #0]
 80027a2:	689a      	ldr	r2, [r3, #8]
 80027a4:	687b      	ldr	r3, [r7, #4]
 80027a6:	681b      	ldr	r3, [r3, #0]
 80027a8:	f022 5240 	bic.w	r2, r2, #805306368	@ 0x30000000
 80027ac:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 80027ae:	687b      	ldr	r3, [r7, #4]
 80027b0:	681b      	ldr	r3, [r3, #0]
 80027b2:	6899      	ldr	r1, [r3, #8]
 80027b4:	687b      	ldr	r3, [r7, #4]
 80027b6:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80027b8:	687b      	ldr	r3, [r7, #4]
 80027ba:	681b      	ldr	r3, [r3, #0]
 80027bc:	430a      	orrs	r2, r1
 80027be:	609a      	str	r2, [r3, #8]
 80027c0:	e00f      	b.n	80027e2 <ADC_Init+0xfe>
=======
 8002886:	687b      	ldr	r3, [r7, #4]
 8002888:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800288a:	4a58      	ldr	r2, [pc, #352]	@ (80029ec <ADC_Init+0x1f4>)
 800288c:	4293      	cmp	r3, r2
 800288e:	d022      	beq.n	80028d6 <ADC_Init+0xde>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8002890:	687b      	ldr	r3, [r7, #4]
 8002892:	681b      	ldr	r3, [r3, #0]
 8002894:	689a      	ldr	r2, [r3, #8]
 8002896:	687b      	ldr	r3, [r7, #4]
 8002898:	681b      	ldr	r3, [r3, #0]
 800289a:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 800289e:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 80028a0:	687b      	ldr	r3, [r7, #4]
 80028a2:	681b      	ldr	r3, [r3, #0]
 80028a4:	6899      	ldr	r1, [r3, #8]
 80028a6:	687b      	ldr	r3, [r7, #4]
 80028a8:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 80028aa:	687b      	ldr	r3, [r7, #4]
 80028ac:	681b      	ldr	r3, [r3, #0]
 80028ae:	430a      	orrs	r2, r1
 80028b0:	609a      	str	r2, [r3, #8]

    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 80028b2:	687b      	ldr	r3, [r7, #4]
 80028b4:	681b      	ldr	r3, [r3, #0]
 80028b6:	689a      	ldr	r2, [r3, #8]
 80028b8:	687b      	ldr	r3, [r7, #4]
 80028ba:	681b      	ldr	r3, [r3, #0]
 80028bc:	f022 5240 	bic.w	r2, r2, #805306368	@ 0x30000000
 80028c0:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 80028c2:	687b      	ldr	r3, [r7, #4]
 80028c4:	681b      	ldr	r3, [r3, #0]
 80028c6:	6899      	ldr	r1, [r3, #8]
 80028c8:	687b      	ldr	r3, [r7, #4]
 80028ca:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80028cc:	687b      	ldr	r3, [r7, #4]
 80028ce:	681b      	ldr	r3, [r3, #0]
 80028d0:	430a      	orrs	r2, r1
 80028d2:	609a      	str	r2, [r3, #8]
 80028d4:	e00f      	b.n	80028f6 <ADC_Init+0xfe>
>>>>>>> 39e4d10438a821cc799a472af87a77c6796a1676
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
<<<<<<< HEAD
 80027c2:	687b      	ldr	r3, [r7, #4]
 80027c4:	681b      	ldr	r3, [r3, #0]
 80027c6:	689a      	ldr	r2, [r3, #8]
 80027c8:	687b      	ldr	r3, [r7, #4]
 80027ca:	681b      	ldr	r3, [r3, #0]
 80027cc:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 80027d0:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 80027d2:	687b      	ldr	r3, [r7, #4]
 80027d4:	681b      	ldr	r3, [r3, #0]
 80027d6:	689a      	ldr	r2, [r3, #8]
 80027d8:	687b      	ldr	r3, [r7, #4]
 80027da:	681b      	ldr	r3, [r3, #0]
 80027dc:	f022 5240 	bic.w	r2, r2, #805306368	@ 0x30000000
 80027e0:	609a      	str	r2, [r3, #8]
=======
 80028d6:	687b      	ldr	r3, [r7, #4]
 80028d8:	681b      	ldr	r3, [r3, #0]
 80028da:	689a      	ldr	r2, [r3, #8]
 80028dc:	687b      	ldr	r3, [r7, #4]
 80028de:	681b      	ldr	r3, [r3, #0]
 80028e0:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 80028e4:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 80028e6:	687b      	ldr	r3, [r7, #4]
 80028e8:	681b      	ldr	r3, [r3, #0]
 80028ea:	689a      	ldr	r2, [r3, #8]
 80028ec:	687b      	ldr	r3, [r7, #4]
 80028ee:	681b      	ldr	r3, [r3, #0]
 80028f0:	f022 5240 	bic.w	r2, r2, #805306368	@ 0x30000000
 80028f4:	609a      	str	r2, [r3, #8]
>>>>>>> 39e4d10438a821cc799a472af87a77c6796a1676
  }

  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
<<<<<<< HEAD
 80027e2:	687b      	ldr	r3, [r7, #4]
 80027e4:	681b      	ldr	r3, [r3, #0]
 80027e6:	689a      	ldr	r2, [r3, #8]
 80027e8:	687b      	ldr	r3, [r7, #4]
 80027ea:	681b      	ldr	r3, [r3, #0]
 80027ec:	f022 0202 	bic.w	r2, r2, #2
 80027f0:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 80027f2:	687b      	ldr	r3, [r7, #4]
 80027f4:	681b      	ldr	r3, [r3, #0]
 80027f6:	6899      	ldr	r1, [r3, #8]
 80027f8:	687b      	ldr	r3, [r7, #4]
 80027fa:	7e1b      	ldrb	r3, [r3, #24]
 80027fc:	005a      	lsls	r2, r3, #1
 80027fe:	687b      	ldr	r3, [r7, #4]
 8002800:	681b      	ldr	r3, [r3, #0]
 8002802:	430a      	orrs	r2, r1
 8002804:	609a      	str	r2, [r3, #8]

  if (hadc->Init.DiscontinuousConvMode != DISABLE)
 8002806:	687b      	ldr	r3, [r7, #4]
 8002808:	f893 3020 	ldrb.w	r3, [r3, #32]
 800280c:	2b00      	cmp	r3, #0
 800280e:	d01b      	beq.n	8002848 <ADC_Init+0x164>
=======
 80028f6:	687b      	ldr	r3, [r7, #4]
 80028f8:	681b      	ldr	r3, [r3, #0]
 80028fa:	689a      	ldr	r2, [r3, #8]
 80028fc:	687b      	ldr	r3, [r7, #4]
 80028fe:	681b      	ldr	r3, [r3, #0]
 8002900:	f022 0202 	bic.w	r2, r2, #2
 8002904:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 8002906:	687b      	ldr	r3, [r7, #4]
 8002908:	681b      	ldr	r3, [r3, #0]
 800290a:	6899      	ldr	r1, [r3, #8]
 800290c:	687b      	ldr	r3, [r7, #4]
 800290e:	7e1b      	ldrb	r3, [r3, #24]
 8002910:	005a      	lsls	r2, r3, #1
 8002912:	687b      	ldr	r3, [r7, #4]
 8002914:	681b      	ldr	r3, [r3, #0]
 8002916:	430a      	orrs	r2, r1
 8002918:	609a      	str	r2, [r3, #8]

  if (hadc->Init.DiscontinuousConvMode != DISABLE)
 800291a:	687b      	ldr	r3, [r7, #4]
 800291c:	f893 3020 	ldrb.w	r3, [r3, #32]
 8002920:	2b00      	cmp	r3, #0
 8002922:	d01b      	beq.n	800295c <ADC_Init+0x164>
>>>>>>> 39e4d10438a821cc799a472af87a77c6796a1676
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));

    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
<<<<<<< HEAD
 8002810:	687b      	ldr	r3, [r7, #4]
 8002812:	681b      	ldr	r3, [r3, #0]
 8002814:	685a      	ldr	r2, [r3, #4]
 8002816:	687b      	ldr	r3, [r7, #4]
 8002818:	681b      	ldr	r3, [r3, #0]
 800281a:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 800281e:	605a      	str	r2, [r3, #4]

    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 8002820:	687b      	ldr	r3, [r7, #4]
 8002822:	681b      	ldr	r3, [r3, #0]
 8002824:	685a      	ldr	r2, [r3, #4]
 8002826:	687b      	ldr	r3, [r7, #4]
 8002828:	681b      	ldr	r3, [r3, #0]
 800282a:	f422 4260 	bic.w	r2, r2, #57344	@ 0xe000
 800282e:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 8002830:	687b      	ldr	r3, [r7, #4]
 8002832:	681b      	ldr	r3, [r3, #0]
 8002834:	6859      	ldr	r1, [r3, #4]
 8002836:	687b      	ldr	r3, [r7, #4]
 8002838:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800283a:	3b01      	subs	r3, #1
 800283c:	035a      	lsls	r2, r3, #13
 800283e:	687b      	ldr	r3, [r7, #4]
 8002840:	681b      	ldr	r3, [r3, #0]
 8002842:	430a      	orrs	r2, r1
 8002844:	605a      	str	r2, [r3, #4]
 8002846:	e007      	b.n	8002858 <ADC_Init+0x174>
=======
 8002924:	687b      	ldr	r3, [r7, #4]
 8002926:	681b      	ldr	r3, [r3, #0]
 8002928:	685a      	ldr	r2, [r3, #4]
 800292a:	687b      	ldr	r3, [r7, #4]
 800292c:	681b      	ldr	r3, [r3, #0]
 800292e:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8002932:	605a      	str	r2, [r3, #4]

    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 8002934:	687b      	ldr	r3, [r7, #4]
 8002936:	681b      	ldr	r3, [r3, #0]
 8002938:	685a      	ldr	r2, [r3, #4]
 800293a:	687b      	ldr	r3, [r7, #4]
 800293c:	681b      	ldr	r3, [r3, #0]
 800293e:	f422 4260 	bic.w	r2, r2, #57344	@ 0xe000
 8002942:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 8002944:	687b      	ldr	r3, [r7, #4]
 8002946:	681b      	ldr	r3, [r3, #0]
 8002948:	6859      	ldr	r1, [r3, #4]
 800294a:	687b      	ldr	r3, [r7, #4]
 800294c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800294e:	3b01      	subs	r3, #1
 8002950:	035a      	lsls	r2, r3, #13
 8002952:	687b      	ldr	r3, [r7, #4]
 8002954:	681b      	ldr	r3, [r3, #0]
 8002956:	430a      	orrs	r2, r1
 8002958:	605a      	str	r2, [r3, #4]
 800295a:	e007      	b.n	800296c <ADC_Init+0x174>
>>>>>>> 39e4d10438a821cc799a472af87a77c6796a1676
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
<<<<<<< HEAD
 8002848:	687b      	ldr	r3, [r7, #4]
 800284a:	681b      	ldr	r3, [r3, #0]
 800284c:	685a      	ldr	r2, [r3, #4]
 800284e:	687b      	ldr	r3, [r7, #4]
 8002850:	681b      	ldr	r3, [r3, #0]
 8002852:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8002856:	605a      	str	r2, [r3, #4]
=======
 800295c:	687b      	ldr	r3, [r7, #4]
 800295e:	681b      	ldr	r3, [r3, #0]
 8002960:	685a      	ldr	r2, [r3, #4]
 8002962:	687b      	ldr	r3, [r7, #4]
 8002964:	681b      	ldr	r3, [r3, #0]
 8002966:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 800296a:	605a      	str	r2, [r3, #4]
>>>>>>> 39e4d10438a821cc799a472af87a77c6796a1676
  }

  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
<<<<<<< HEAD
 8002858:	687b      	ldr	r3, [r7, #4]
 800285a:	681b      	ldr	r3, [r3, #0]
 800285c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800285e:	687b      	ldr	r3, [r7, #4]
 8002860:	681b      	ldr	r3, [r3, #0]
 8002862:	f422 0270 	bic.w	r2, r2, #15728640	@ 0xf00000
 8002866:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 8002868:	687b      	ldr	r3, [r7, #4]
 800286a:	681b      	ldr	r3, [r3, #0]
 800286c:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 800286e:	687b      	ldr	r3, [r7, #4]
 8002870:	69db      	ldr	r3, [r3, #28]
 8002872:	3b01      	subs	r3, #1
 8002874:	051a      	lsls	r2, r3, #20
 8002876:	687b      	ldr	r3, [r7, #4]
 8002878:	681b      	ldr	r3, [r3, #0]
 800287a:	430a      	orrs	r2, r1
 800287c:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 800287e:	687b      	ldr	r3, [r7, #4]
 8002880:	681b      	ldr	r3, [r3, #0]
 8002882:	689a      	ldr	r2, [r3, #8]
 8002884:	687b      	ldr	r3, [r7, #4]
 8002886:	681b      	ldr	r3, [r3, #0]
 8002888:	f422 7200 	bic.w	r2, r2, #512	@ 0x200
 800288c:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 800288e:	687b      	ldr	r3, [r7, #4]
 8002890:	681b      	ldr	r3, [r3, #0]
 8002892:	6899      	ldr	r1, [r3, #8]
 8002894:	687b      	ldr	r3, [r7, #4]
 8002896:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 800289a:	025a      	lsls	r2, r3, #9
 800289c:	687b      	ldr	r3, [r7, #4]
 800289e:	681b      	ldr	r3, [r3, #0]
 80028a0:	430a      	orrs	r2, r1
 80028a2:	609a      	str	r2, [r3, #8]

  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 80028a4:	687b      	ldr	r3, [r7, #4]
 80028a6:	681b      	ldr	r3, [r3, #0]
 80028a8:	689a      	ldr	r2, [r3, #8]
 80028aa:	687b      	ldr	r3, [r7, #4]
 80028ac:	681b      	ldr	r3, [r3, #0]
 80028ae:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80028b2:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 80028b4:	687b      	ldr	r3, [r7, #4]
 80028b6:	681b      	ldr	r3, [r3, #0]
 80028b8:	6899      	ldr	r1, [r3, #8]
 80028ba:	687b      	ldr	r3, [r7, #4]
 80028bc:	695b      	ldr	r3, [r3, #20]
 80028be:	029a      	lsls	r2, r3, #10
 80028c0:	687b      	ldr	r3, [r7, #4]
 80028c2:	681b      	ldr	r3, [r3, #0]
 80028c4:	430a      	orrs	r2, r1
 80028c6:	609a      	str	r2, [r3, #8]
}
 80028c8:	bf00      	nop
 80028ca:	3714      	adds	r7, #20
 80028cc:	46bd      	mov	sp, r7
 80028ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028d2:	4770      	bx	lr
 80028d4:	40012300 	.word	0x40012300
 80028d8:	0f000001 	.word	0x0f000001

080028dc <ADC_DMAConvCplt>:
=======
 800296c:	687b      	ldr	r3, [r7, #4]
 800296e:	681b      	ldr	r3, [r3, #0]
 8002970:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8002972:	687b      	ldr	r3, [r7, #4]
 8002974:	681b      	ldr	r3, [r3, #0]
 8002976:	f422 0270 	bic.w	r2, r2, #15728640	@ 0xf00000
 800297a:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 800297c:	687b      	ldr	r3, [r7, #4]
 800297e:	681b      	ldr	r3, [r3, #0]
 8002980:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 8002982:	687b      	ldr	r3, [r7, #4]
 8002984:	69db      	ldr	r3, [r3, #28]
 8002986:	3b01      	subs	r3, #1
 8002988:	051a      	lsls	r2, r3, #20
 800298a:	687b      	ldr	r3, [r7, #4]
 800298c:	681b      	ldr	r3, [r3, #0]
 800298e:	430a      	orrs	r2, r1
 8002990:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 8002992:	687b      	ldr	r3, [r7, #4]
 8002994:	681b      	ldr	r3, [r3, #0]
 8002996:	689a      	ldr	r2, [r3, #8]
 8002998:	687b      	ldr	r3, [r7, #4]
 800299a:	681b      	ldr	r3, [r3, #0]
 800299c:	f422 7200 	bic.w	r2, r2, #512	@ 0x200
 80029a0:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 80029a2:	687b      	ldr	r3, [r7, #4]
 80029a4:	681b      	ldr	r3, [r3, #0]
 80029a6:	6899      	ldr	r1, [r3, #8]
 80029a8:	687b      	ldr	r3, [r7, #4]
 80029aa:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 80029ae:	025a      	lsls	r2, r3, #9
 80029b0:	687b      	ldr	r3, [r7, #4]
 80029b2:	681b      	ldr	r3, [r3, #0]
 80029b4:	430a      	orrs	r2, r1
 80029b6:	609a      	str	r2, [r3, #8]

  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 80029b8:	687b      	ldr	r3, [r7, #4]
 80029ba:	681b      	ldr	r3, [r3, #0]
 80029bc:	689a      	ldr	r2, [r3, #8]
 80029be:	687b      	ldr	r3, [r7, #4]
 80029c0:	681b      	ldr	r3, [r3, #0]
 80029c2:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80029c6:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 80029c8:	687b      	ldr	r3, [r7, #4]
 80029ca:	681b      	ldr	r3, [r3, #0]
 80029cc:	6899      	ldr	r1, [r3, #8]
 80029ce:	687b      	ldr	r3, [r7, #4]
 80029d0:	695b      	ldr	r3, [r3, #20]
 80029d2:	029a      	lsls	r2, r3, #10
 80029d4:	687b      	ldr	r3, [r7, #4]
 80029d6:	681b      	ldr	r3, [r3, #0]
 80029d8:	430a      	orrs	r2, r1
 80029da:	609a      	str	r2, [r3, #8]
}
 80029dc:	bf00      	nop
 80029de:	3714      	adds	r7, #20
 80029e0:	46bd      	mov	sp, r7
 80029e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029e6:	4770      	bx	lr
 80029e8:	40012300 	.word	0x40012300
 80029ec:	0f000001 	.word	0x0f000001

080029f0 <ADC_DMAConvCplt>:
>>>>>>> 39e4d10438a821cc799a472af87a77c6796a1676
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAConvCplt(DMA_HandleTypeDef *hdma)
{
<<<<<<< HEAD
 80028dc:	b580      	push	{r7, lr}
 80028de:	b084      	sub	sp, #16
 80028e0:	af00      	add	r7, sp, #0
 80028e2:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80028e4:	687b      	ldr	r3, [r7, #4]
 80028e6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80028e8:	60fb      	str	r3, [r7, #12]

  /* Update state machine on conversion status if not in error state */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA))
 80028ea:	68fb      	ldr	r3, [r7, #12]
 80028ec:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80028ee:	f003 0350 	and.w	r3, r3, #80	@ 0x50
 80028f2:	2b00      	cmp	r3, #0
 80028f4:	d13c      	bne.n	8002970 <ADC_DMAConvCplt+0x94>
  {
    /* Update ADC state machine */
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 80028f6:	68fb      	ldr	r3, [r7, #12]
 80028f8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80028fa:	f443 7200 	orr.w	r2, r3, #512	@ 0x200
 80028fe:	68fb      	ldr	r3, [r7, #12]
 8002900:	641a      	str	r2, [r3, #64]	@ 0x40
=======
 80029f0:	b580      	push	{r7, lr}
 80029f2:	b084      	sub	sp, #16
 80029f4:	af00      	add	r7, sp, #0
 80029f6:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80029f8:	687b      	ldr	r3, [r7, #4]
 80029fa:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80029fc:	60fb      	str	r3, [r7, #12]

  /* Update state machine on conversion status if not in error state */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA))
 80029fe:	68fb      	ldr	r3, [r7, #12]
 8002a00:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002a02:	f003 0350 	and.w	r3, r3, #80	@ 0x50
 8002a06:	2b00      	cmp	r3, #0
 8002a08:	d13c      	bne.n	8002a84 <ADC_DMAConvCplt+0x94>
  {
    /* Update ADC state machine */
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8002a0a:	68fb      	ldr	r3, [r7, #12]
 8002a0c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002a0e:	f443 7200 	orr.w	r2, r3, #512	@ 0x200
 8002a12:	68fb      	ldr	r3, [r7, #12]
 8002a14:	641a      	str	r2, [r3, #64]	@ 0x40
>>>>>>> 39e4d10438a821cc799a472af87a77c6796a1676
    /* by external trigger, continuous mode or scan sequence on going.      */
    /* Note: On STM32F4, there is no independent flag of end of sequence.   */
    /*       The test of scan sequence on going is done either with scan    */
    /*       sequence disabled or with end of conversion flag set to        */
    /*       of end of sequence.                                            */
    if (ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
<<<<<<< HEAD
 8002902:	68fb      	ldr	r3, [r7, #12]
 8002904:	681b      	ldr	r3, [r3, #0]
 8002906:	689b      	ldr	r3, [r3, #8]
 8002908:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 800290c:	2b00      	cmp	r3, #0
 800290e:	d12b      	bne.n	8002968 <ADC_DMAConvCplt+0x8c>
        (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8002910:	68fb      	ldr	r3, [r7, #12]
 8002912:	7e1b      	ldrb	r3, [r3, #24]
    if (ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8002914:	2b00      	cmp	r3, #0
 8002916:	d127      	bne.n	8002968 <ADC_DMAConvCplt+0x8c>
        (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 8002918:	68fb      	ldr	r3, [r7, #12]
 800291a:	681b      	ldr	r3, [r3, #0]
 800291c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800291e:	f403 0370 	and.w	r3, r3, #15728640	@ 0xf00000
        (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8002922:	2b00      	cmp	r3, #0
 8002924:	d006      	beq.n	8002934 <ADC_DMAConvCplt+0x58>
         HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)))
 8002926:	68fb      	ldr	r3, [r7, #12]
 8002928:	681b      	ldr	r3, [r3, #0]
 800292a:	689b      	ldr	r3, [r3, #8]
 800292c:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
        (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 8002930:	2b00      	cmp	r3, #0
 8002932:	d119      	bne.n	8002968 <ADC_DMAConvCplt+0x8c>
=======
 8002a16:	68fb      	ldr	r3, [r7, #12]
 8002a18:	681b      	ldr	r3, [r3, #0]
 8002a1a:	689b      	ldr	r3, [r3, #8]
 8002a1c:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 8002a20:	2b00      	cmp	r3, #0
 8002a22:	d12b      	bne.n	8002a7c <ADC_DMAConvCplt+0x8c>
        (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8002a24:	68fb      	ldr	r3, [r7, #12]
 8002a26:	7e1b      	ldrb	r3, [r3, #24]
    if (ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8002a28:	2b00      	cmp	r3, #0
 8002a2a:	d127      	bne.n	8002a7c <ADC_DMAConvCplt+0x8c>
        (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 8002a2c:	68fb      	ldr	r3, [r7, #12]
 8002a2e:	681b      	ldr	r3, [r3, #0]
 8002a30:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002a32:	f403 0370 	and.w	r3, r3, #15728640	@ 0xf00000
        (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8002a36:	2b00      	cmp	r3, #0
 8002a38:	d006      	beq.n	8002a48 <ADC_DMAConvCplt+0x58>
         HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)))
 8002a3a:	68fb      	ldr	r3, [r7, #12]
 8002a3c:	681b      	ldr	r3, [r3, #0]
 8002a3e:	689b      	ldr	r3, [r3, #8]
 8002a40:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
        (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 8002a44:	2b00      	cmp	r3, #0
 8002a46:	d119      	bne.n	8002a7c <ADC_DMAConvCplt+0x8c>
>>>>>>> 39e4d10438a821cc799a472af87a77c6796a1676
    {
      /* Disable ADC end of single conversion interrupt on group regular */
      /* Note: Overrun interrupt was enabled with EOC interrupt in          */
      /* HAL_ADC_Start_IT(), but is not disabled here because can be used   */
      /* by overrun IRQ process below.                                      */
      __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC);
<<<<<<< HEAD
 8002934:	68fb      	ldr	r3, [r7, #12]
 8002936:	681b      	ldr	r3, [r3, #0]
 8002938:	685a      	ldr	r2, [r3, #4]
 800293a:	68fb      	ldr	r3, [r7, #12]
 800293c:	681b      	ldr	r3, [r3, #0]
 800293e:	f022 0220 	bic.w	r2, r2, #32
 8002942:	605a      	str	r2, [r3, #4]

      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 8002944:	68fb      	ldr	r3, [r7, #12]
 8002946:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002948:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 800294c:	68fb      	ldr	r3, [r7, #12]
 800294e:	641a      	str	r2, [r3, #64]	@ 0x40

      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8002950:	68fb      	ldr	r3, [r7, #12]
 8002952:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002954:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8002958:	2b00      	cmp	r3, #0
 800295a:	d105      	bne.n	8002968 <ADC_DMAConvCplt+0x8c>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 800295c:	68fb      	ldr	r3, [r7, #12]
 800295e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002960:	f043 0201 	orr.w	r2, r3, #1
 8002964:	68fb      	ldr	r3, [r7, #12]
 8002966:	641a      	str	r2, [r3, #64]	@ 0x40
=======
 8002a48:	68fb      	ldr	r3, [r7, #12]
 8002a4a:	681b      	ldr	r3, [r3, #0]
 8002a4c:	685a      	ldr	r2, [r3, #4]
 8002a4e:	68fb      	ldr	r3, [r7, #12]
 8002a50:	681b      	ldr	r3, [r3, #0]
 8002a52:	f022 0220 	bic.w	r2, r2, #32
 8002a56:	605a      	str	r2, [r3, #4]

      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 8002a58:	68fb      	ldr	r3, [r7, #12]
 8002a5a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002a5c:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8002a60:	68fb      	ldr	r3, [r7, #12]
 8002a62:	641a      	str	r2, [r3, #64]	@ 0x40

      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8002a64:	68fb      	ldr	r3, [r7, #12]
 8002a66:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002a68:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8002a6c:	2b00      	cmp	r3, #0
 8002a6e:	d105      	bne.n	8002a7c <ADC_DMAConvCplt+0x8c>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8002a70:	68fb      	ldr	r3, [r7, #12]
 8002a72:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002a74:	f043 0201 	orr.w	r2, r3, #1
 8002a78:	68fb      	ldr	r3, [r7, #12]
 8002a7a:	641a      	str	r2, [r3, #64]	@ 0x40
>>>>>>> 39e4d10438a821cc799a472af87a77c6796a1676

    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
<<<<<<< HEAD
 8002968:	68f8      	ldr	r0, [r7, #12]
 800296a:	f7ff f877 	bl	8001a5c <HAL_ADC_ConvCpltCallback>
=======
 8002a7c:	68f8      	ldr	r0, [r7, #12]
 8002a7e:	f7ff f863 	bl	8001b48 <HAL_ADC_ConvCpltCallback>
>>>>>>> 39e4d10438a821cc799a472af87a77c6796a1676
    {
      /* Call DMA error callback */
      hadc->DMA_Handle->XferErrorCallback(hdma);
    }
  }
}
<<<<<<< HEAD
 800296e:	e00e      	b.n	800298e <ADC_DMAConvCplt+0xb2>
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) != 0UL)
 8002970:	68fb      	ldr	r3, [r7, #12]
 8002972:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002974:	f003 0310 	and.w	r3, r3, #16
 8002978:	2b00      	cmp	r3, #0
 800297a:	d003      	beq.n	8002984 <ADC_DMAConvCplt+0xa8>
      HAL_ADC_ErrorCallback(hadc);
 800297c:	68f8      	ldr	r0, [r7, #12]
 800297e:	f7ff fd75 	bl	800246c <HAL_ADC_ErrorCallback>
}
 8002982:	e004      	b.n	800298e <ADC_DMAConvCplt+0xb2>
      hadc->DMA_Handle->XferErrorCallback(hdma);
 8002984:	68fb      	ldr	r3, [r7, #12]
 8002986:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002988:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800298a:	6878      	ldr	r0, [r7, #4]
 800298c:	4798      	blx	r3
}
 800298e:	bf00      	nop
 8002990:	3710      	adds	r7, #16
 8002992:	46bd      	mov	sp, r7
 8002994:	bd80      	pop	{r7, pc}

08002996 <ADC_DMAHalfConvCplt>:
=======
 8002a82:	e00e      	b.n	8002aa2 <ADC_DMAConvCplt+0xb2>
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) != 0UL)
 8002a84:	68fb      	ldr	r3, [r7, #12]
 8002a86:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002a88:	f003 0310 	and.w	r3, r3, #16
 8002a8c:	2b00      	cmp	r3, #0
 8002a8e:	d003      	beq.n	8002a98 <ADC_DMAConvCplt+0xa8>
      HAL_ADC_ErrorCallback(hadc);
 8002a90:	68f8      	ldr	r0, [r7, #12]
 8002a92:	f7ff fd75 	bl	8002580 <HAL_ADC_ErrorCallback>
}
 8002a96:	e004      	b.n	8002aa2 <ADC_DMAConvCplt+0xb2>
      hadc->DMA_Handle->XferErrorCallback(hdma);
 8002a98:	68fb      	ldr	r3, [r7, #12]
 8002a9a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002a9c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002a9e:	6878      	ldr	r0, [r7, #4]
 8002aa0:	4798      	blx	r3
}
 8002aa2:	bf00      	nop
 8002aa4:	3710      	adds	r7, #16
 8002aa6:	46bd      	mov	sp, r7
 8002aa8:	bd80      	pop	{r7, pc}

08002aaa <ADC_DMAHalfConvCplt>:
>>>>>>> 39e4d10438a821cc799a472af87a77c6796a1676
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)
{
<<<<<<< HEAD
 8002996:	b580      	push	{r7, lr}
 8002998:	b084      	sub	sp, #16
 800299a:	af00      	add	r7, sp, #0
 800299c:	6078      	str	r0, [r7, #4]
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800299e:	687b      	ldr	r3, [r7, #4]
 80029a0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80029a2:	60fb      	str	r3, [r7, #12]
=======
 8002aaa:	b580      	push	{r7, lr}
 8002aac:	b084      	sub	sp, #16
 8002aae:	af00      	add	r7, sp, #0
 8002ab0:	6078      	str	r0, [r7, #4]
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8002ab2:	687b      	ldr	r3, [r7, #4]
 8002ab4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002ab6:	60fb      	str	r3, [r7, #12]
>>>>>>> 39e4d10438a821cc799a472af87a77c6796a1676
  /* Half conversion callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ConvHalfCpltCallback(hadc);
#else
  HAL_ADC_ConvHalfCpltCallback(hadc);
<<<<<<< HEAD
 80029a4:	68f8      	ldr	r0, [r7, #12]
 80029a6:	f7ff fd57 	bl	8002458 <HAL_ADC_ConvHalfCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 80029aa:	bf00      	nop
 80029ac:	3710      	adds	r7, #16
 80029ae:	46bd      	mov	sp, r7
 80029b0:	bd80      	pop	{r7, pc}

080029b2 <ADC_DMAError>:
=======
 8002ab8:	68f8      	ldr	r0, [r7, #12]
 8002aba:	f7ff fd57 	bl	800256c <HAL_ADC_ConvHalfCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8002abe:	bf00      	nop
 8002ac0:	3710      	adds	r7, #16
 8002ac2:	46bd      	mov	sp, r7
 8002ac4:	bd80      	pop	{r7, pc}

08002ac6 <ADC_DMAError>:
>>>>>>> 39e4d10438a821cc799a472af87a77c6796a1676
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAError(DMA_HandleTypeDef *hdma)
{
<<<<<<< HEAD
 80029b2:	b580      	push	{r7, lr}
 80029b4:	b084      	sub	sp, #16
 80029b6:	af00      	add	r7, sp, #0
 80029b8:	6078      	str	r0, [r7, #4]
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80029ba:	687b      	ldr	r3, [r7, #4]
 80029bc:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80029be:	60fb      	str	r3, [r7, #12]
  hadc->State = HAL_ADC_STATE_ERROR_DMA;
 80029c0:	68fb      	ldr	r3, [r7, #12]
 80029c2:	2240      	movs	r2, #64	@ 0x40
 80029c4:	641a      	str	r2, [r3, #64]	@ 0x40
  /* Set ADC error code to DMA error */
  hadc->ErrorCode |= HAL_ADC_ERROR_DMA;
 80029c6:	68fb      	ldr	r3, [r7, #12]
 80029c8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80029ca:	f043 0204 	orr.w	r2, r3, #4
 80029ce:	68fb      	ldr	r3, [r7, #12]
 80029d0:	645a      	str	r2, [r3, #68]	@ 0x44
=======
 8002ac6:	b580      	push	{r7, lr}
 8002ac8:	b084      	sub	sp, #16
 8002aca:	af00      	add	r7, sp, #0
 8002acc:	6078      	str	r0, [r7, #4]
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8002ace:	687b      	ldr	r3, [r7, #4]
 8002ad0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002ad2:	60fb      	str	r3, [r7, #12]
  hadc->State = HAL_ADC_STATE_ERROR_DMA;
 8002ad4:	68fb      	ldr	r3, [r7, #12]
 8002ad6:	2240      	movs	r2, #64	@ 0x40
 8002ad8:	641a      	str	r2, [r3, #64]	@ 0x40
  /* Set ADC error code to DMA error */
  hadc->ErrorCode |= HAL_ADC_ERROR_DMA;
 8002ada:	68fb      	ldr	r3, [r7, #12]
 8002adc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002ade:	f043 0204 	orr.w	r2, r3, #4
 8002ae2:	68fb      	ldr	r3, [r7, #12]
 8002ae4:	645a      	str	r2, [r3, #68]	@ 0x44
>>>>>>> 39e4d10438a821cc799a472af87a77c6796a1676
  /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ErrorCallback(hadc);
#else
  HAL_ADC_ErrorCallback(hadc);
<<<<<<< HEAD
 80029d2:	68f8      	ldr	r0, [r7, #12]
 80029d4:	f7ff fd4a 	bl	800246c <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 80029d8:	bf00      	nop
 80029da:	3710      	adds	r7, #16
 80029dc:	46bd      	mov	sp, r7
 80029de:	bd80      	pop	{r7, pc}

080029e0 <__NVIC_SetPriorityGrouping>:
=======
 8002ae6:	68f8      	ldr	r0, [r7, #12]
 8002ae8:	f7ff fd4a 	bl	8002580 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8002aec:	bf00      	nop
 8002aee:	3710      	adds	r7, #16
 8002af0:	46bd      	mov	sp, r7
 8002af2:	bd80      	pop	{r7, pc}

08002af4 <__NVIC_SetPriorityGrouping>:
>>>>>>> 39e4d10438a821cc799a472af87a77c6796a1676
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
<<<<<<< HEAD
 80029e0:	b480      	push	{r7}
 80029e2:	b085      	sub	sp, #20
 80029e4:	af00      	add	r7, sp, #0
 80029e6:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80029e8:	687b      	ldr	r3, [r7, #4]
 80029ea:	f003 0307 	and.w	r3, r3, #7
 80029ee:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80029f0:	4b0c      	ldr	r3, [pc, #48]	@ (8002a24 <__NVIC_SetPriorityGrouping+0x44>)
 80029f2:	68db      	ldr	r3, [r3, #12]
 80029f4:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80029f6:	68ba      	ldr	r2, [r7, #8]
 80029f8:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 80029fc:	4013      	ands	r3, r2
 80029fe:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8002a00:	68fb      	ldr	r3, [r7, #12]
 8002a02:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002a04:	68bb      	ldr	r3, [r7, #8]
 8002a06:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8002a08:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8002a0c:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8002a10:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8002a12:	4a04      	ldr	r2, [pc, #16]	@ (8002a24 <__NVIC_SetPriorityGrouping+0x44>)
 8002a14:	68bb      	ldr	r3, [r7, #8]
 8002a16:	60d3      	str	r3, [r2, #12]
}
 8002a18:	bf00      	nop
 8002a1a:	3714      	adds	r7, #20
 8002a1c:	46bd      	mov	sp, r7
 8002a1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a22:	4770      	bx	lr
 8002a24:	e000ed00 	.word	0xe000ed00

08002a28 <__NVIC_GetPriorityGrouping>:
=======
 8002af4:	b480      	push	{r7}
 8002af6:	b085      	sub	sp, #20
 8002af8:	af00      	add	r7, sp, #0
 8002afa:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002afc:	687b      	ldr	r3, [r7, #4]
 8002afe:	f003 0307 	and.w	r3, r3, #7
 8002b02:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002b04:	4b0c      	ldr	r3, [pc, #48]	@ (8002b38 <__NVIC_SetPriorityGrouping+0x44>)
 8002b06:	68db      	ldr	r3, [r3, #12]
 8002b08:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8002b0a:	68ba      	ldr	r2, [r7, #8]
 8002b0c:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8002b10:	4013      	ands	r3, r2
 8002b12:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8002b14:	68fb      	ldr	r3, [r7, #12]
 8002b16:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002b18:	68bb      	ldr	r3, [r7, #8]
 8002b1a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8002b1c:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8002b20:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8002b24:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8002b26:	4a04      	ldr	r2, [pc, #16]	@ (8002b38 <__NVIC_SetPriorityGrouping+0x44>)
 8002b28:	68bb      	ldr	r3, [r7, #8]
 8002b2a:	60d3      	str	r3, [r2, #12]
}
 8002b2c:	bf00      	nop
 8002b2e:	3714      	adds	r7, #20
 8002b30:	46bd      	mov	sp, r7
 8002b32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b36:	4770      	bx	lr
 8002b38:	e000ed00 	.word	0xe000ed00

08002b3c <__NVIC_GetPriorityGrouping>:
>>>>>>> 39e4d10438a821cc799a472af87a77c6796a1676
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
<<<<<<< HEAD
 8002a28:	b480      	push	{r7}
 8002a2a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002a2c:	4b04      	ldr	r3, [pc, #16]	@ (8002a40 <__NVIC_GetPriorityGrouping+0x18>)
 8002a2e:	68db      	ldr	r3, [r3, #12]
 8002a30:	0a1b      	lsrs	r3, r3, #8
 8002a32:	f003 0307 	and.w	r3, r3, #7
}
 8002a36:	4618      	mov	r0, r3
 8002a38:	46bd      	mov	sp, r7
 8002a3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a3e:	4770      	bx	lr
 8002a40:	e000ed00 	.word	0xe000ed00

08002a44 <__NVIC_EnableIRQ>:
=======
 8002b3c:	b480      	push	{r7}
 8002b3e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002b40:	4b04      	ldr	r3, [pc, #16]	@ (8002b54 <__NVIC_GetPriorityGrouping+0x18>)
 8002b42:	68db      	ldr	r3, [r3, #12]
 8002b44:	0a1b      	lsrs	r3, r3, #8
 8002b46:	f003 0307 	and.w	r3, r3, #7
}
 8002b4a:	4618      	mov	r0, r3
 8002b4c:	46bd      	mov	sp, r7
 8002b4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b52:	4770      	bx	lr
 8002b54:	e000ed00 	.word	0xe000ed00

08002b58 <__NVIC_EnableIRQ>:
>>>>>>> 39e4d10438a821cc799a472af87a77c6796a1676
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
<<<<<<< HEAD
 8002a44:	b480      	push	{r7}
 8002a46:	b083      	sub	sp, #12
 8002a48:	af00      	add	r7, sp, #0
 8002a4a:	4603      	mov	r3, r0
 8002a4c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002a4e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002a52:	2b00      	cmp	r3, #0
 8002a54:	db0b      	blt.n	8002a6e <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002a56:	79fb      	ldrb	r3, [r7, #7]
 8002a58:	f003 021f 	and.w	r2, r3, #31
 8002a5c:	4907      	ldr	r1, [pc, #28]	@ (8002a7c <__NVIC_EnableIRQ+0x38>)
 8002a5e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002a62:	095b      	lsrs	r3, r3, #5
 8002a64:	2001      	movs	r0, #1
 8002a66:	fa00 f202 	lsl.w	r2, r0, r2
 8002a6a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8002a6e:	bf00      	nop
 8002a70:	370c      	adds	r7, #12
 8002a72:	46bd      	mov	sp, r7
 8002a74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a78:	4770      	bx	lr
 8002a7a:	bf00      	nop
 8002a7c:	e000e100 	.word	0xe000e100

08002a80 <__NVIC_SetPriority>:
=======
 8002b58:	b480      	push	{r7}
 8002b5a:	b083      	sub	sp, #12
 8002b5c:	af00      	add	r7, sp, #0
 8002b5e:	4603      	mov	r3, r0
 8002b60:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002b62:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002b66:	2b00      	cmp	r3, #0
 8002b68:	db0b      	blt.n	8002b82 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002b6a:	79fb      	ldrb	r3, [r7, #7]
 8002b6c:	f003 021f 	and.w	r2, r3, #31
 8002b70:	4907      	ldr	r1, [pc, #28]	@ (8002b90 <__NVIC_EnableIRQ+0x38>)
 8002b72:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002b76:	095b      	lsrs	r3, r3, #5
 8002b78:	2001      	movs	r0, #1
 8002b7a:	fa00 f202 	lsl.w	r2, r0, r2
 8002b7e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8002b82:	bf00      	nop
 8002b84:	370c      	adds	r7, #12
 8002b86:	46bd      	mov	sp, r7
 8002b88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b8c:	4770      	bx	lr
 8002b8e:	bf00      	nop
 8002b90:	e000e100 	.word	0xe000e100

08002b94 <__NVIC_SetPriority>:
>>>>>>> 39e4d10438a821cc799a472af87a77c6796a1676
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
<<<<<<< HEAD
 8002a80:	b480      	push	{r7}
 8002a82:	b083      	sub	sp, #12
 8002a84:	af00      	add	r7, sp, #0
 8002a86:	4603      	mov	r3, r0
 8002a88:	6039      	str	r1, [r7, #0]
 8002a8a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002a8c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002a90:	2b00      	cmp	r3, #0
 8002a92:	db0a      	blt.n	8002aaa <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002a94:	683b      	ldr	r3, [r7, #0]
 8002a96:	b2da      	uxtb	r2, r3
 8002a98:	490c      	ldr	r1, [pc, #48]	@ (8002acc <__NVIC_SetPriority+0x4c>)
 8002a9a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002a9e:	0112      	lsls	r2, r2, #4
 8002aa0:	b2d2      	uxtb	r2, r2
 8002aa2:	440b      	add	r3, r1
 8002aa4:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
=======
 8002b94:	b480      	push	{r7}
 8002b96:	b083      	sub	sp, #12
 8002b98:	af00      	add	r7, sp, #0
 8002b9a:	4603      	mov	r3, r0
 8002b9c:	6039      	str	r1, [r7, #0]
 8002b9e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002ba0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002ba4:	2b00      	cmp	r3, #0
 8002ba6:	db0a      	blt.n	8002bbe <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002ba8:	683b      	ldr	r3, [r7, #0]
 8002baa:	b2da      	uxtb	r2, r3
 8002bac:	490c      	ldr	r1, [pc, #48]	@ (8002be0 <__NVIC_SetPriority+0x4c>)
 8002bae:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002bb2:	0112      	lsls	r2, r2, #4
 8002bb4:	b2d2      	uxtb	r2, r2
 8002bb6:	440b      	add	r3, r1
 8002bb8:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
>>>>>>> 39e4d10438a821cc799a472af87a77c6796a1676
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
<<<<<<< HEAD
 8002aa8:	e00a      	b.n	8002ac0 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002aaa:	683b      	ldr	r3, [r7, #0]
 8002aac:	b2da      	uxtb	r2, r3
 8002aae:	4908      	ldr	r1, [pc, #32]	@ (8002ad0 <__NVIC_SetPriority+0x50>)
 8002ab0:	79fb      	ldrb	r3, [r7, #7]
 8002ab2:	f003 030f 	and.w	r3, r3, #15
 8002ab6:	3b04      	subs	r3, #4
 8002ab8:	0112      	lsls	r2, r2, #4
 8002aba:	b2d2      	uxtb	r2, r2
 8002abc:	440b      	add	r3, r1
 8002abe:	761a      	strb	r2, [r3, #24]
}
 8002ac0:	bf00      	nop
 8002ac2:	370c      	adds	r7, #12
 8002ac4:	46bd      	mov	sp, r7
 8002ac6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002aca:	4770      	bx	lr
 8002acc:	e000e100 	.word	0xe000e100
 8002ad0:	e000ed00 	.word	0xe000ed00

08002ad4 <NVIC_EncodePriority>:
=======
 8002bbc:	e00a      	b.n	8002bd4 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002bbe:	683b      	ldr	r3, [r7, #0]
 8002bc0:	b2da      	uxtb	r2, r3
 8002bc2:	4908      	ldr	r1, [pc, #32]	@ (8002be4 <__NVIC_SetPriority+0x50>)
 8002bc4:	79fb      	ldrb	r3, [r7, #7]
 8002bc6:	f003 030f 	and.w	r3, r3, #15
 8002bca:	3b04      	subs	r3, #4
 8002bcc:	0112      	lsls	r2, r2, #4
 8002bce:	b2d2      	uxtb	r2, r2
 8002bd0:	440b      	add	r3, r1
 8002bd2:	761a      	strb	r2, [r3, #24]
}
 8002bd4:	bf00      	nop
 8002bd6:	370c      	adds	r7, #12
 8002bd8:	46bd      	mov	sp, r7
 8002bda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bde:	4770      	bx	lr
 8002be0:	e000e100 	.word	0xe000e100
 8002be4:	e000ed00 	.word	0xe000ed00

08002be8 <NVIC_EncodePriority>:
>>>>>>> 39e4d10438a821cc799a472af87a77c6796a1676
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
<<<<<<< HEAD
 8002ad4:	b480      	push	{r7}
 8002ad6:	b089      	sub	sp, #36	@ 0x24
 8002ad8:	af00      	add	r7, sp, #0
 8002ada:	60f8      	str	r0, [r7, #12]
 8002adc:	60b9      	str	r1, [r7, #8]
 8002ade:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002ae0:	68fb      	ldr	r3, [r7, #12]
 8002ae2:	f003 0307 	and.w	r3, r3, #7
 8002ae6:	61fb      	str	r3, [r7, #28]
=======
 8002be8:	b480      	push	{r7}
 8002bea:	b089      	sub	sp, #36	@ 0x24
 8002bec:	af00      	add	r7, sp, #0
 8002bee:	60f8      	str	r0, [r7, #12]
 8002bf0:	60b9      	str	r1, [r7, #8]
 8002bf2:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002bf4:	68fb      	ldr	r3, [r7, #12]
 8002bf6:	f003 0307 	and.w	r3, r3, #7
 8002bfa:	61fb      	str	r3, [r7, #28]
>>>>>>> 39e4d10438a821cc799a472af87a77c6796a1676
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
<<<<<<< HEAD
 8002ae8:	69fb      	ldr	r3, [r7, #28]
 8002aea:	f1c3 0307 	rsb	r3, r3, #7
 8002aee:	2b04      	cmp	r3, #4
 8002af0:	bf28      	it	cs
 8002af2:	2304      	movcs	r3, #4
 8002af4:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002af6:	69fb      	ldr	r3, [r7, #28]
 8002af8:	3304      	adds	r3, #4
 8002afa:	2b06      	cmp	r3, #6
 8002afc:	d902      	bls.n	8002b04 <NVIC_EncodePriority+0x30>
 8002afe:	69fb      	ldr	r3, [r7, #28]
 8002b00:	3b03      	subs	r3, #3
 8002b02:	e000      	b.n	8002b06 <NVIC_EncodePriority+0x32>
 8002b04:	2300      	movs	r3, #0
 8002b06:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002b08:	f04f 32ff 	mov.w	r2, #4294967295
 8002b0c:	69bb      	ldr	r3, [r7, #24]
 8002b0e:	fa02 f303 	lsl.w	r3, r2, r3
 8002b12:	43da      	mvns	r2, r3
 8002b14:	68bb      	ldr	r3, [r7, #8]
 8002b16:	401a      	ands	r2, r3
 8002b18:	697b      	ldr	r3, [r7, #20]
 8002b1a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002b1c:	f04f 31ff 	mov.w	r1, #4294967295
 8002b20:	697b      	ldr	r3, [r7, #20]
 8002b22:	fa01 f303 	lsl.w	r3, r1, r3
 8002b26:	43d9      	mvns	r1, r3
 8002b28:	687b      	ldr	r3, [r7, #4]
 8002b2a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002b2c:	4313      	orrs	r3, r2
         );
}
 8002b2e:	4618      	mov	r0, r3
 8002b30:	3724      	adds	r7, #36	@ 0x24
 8002b32:	46bd      	mov	sp, r7
 8002b34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b38:	4770      	bx	lr
	...

08002b3c <SysTick_Config>:
=======
 8002bfc:	69fb      	ldr	r3, [r7, #28]
 8002bfe:	f1c3 0307 	rsb	r3, r3, #7
 8002c02:	2b04      	cmp	r3, #4
 8002c04:	bf28      	it	cs
 8002c06:	2304      	movcs	r3, #4
 8002c08:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002c0a:	69fb      	ldr	r3, [r7, #28]
 8002c0c:	3304      	adds	r3, #4
 8002c0e:	2b06      	cmp	r3, #6
 8002c10:	d902      	bls.n	8002c18 <NVIC_EncodePriority+0x30>
 8002c12:	69fb      	ldr	r3, [r7, #28]
 8002c14:	3b03      	subs	r3, #3
 8002c16:	e000      	b.n	8002c1a <NVIC_EncodePriority+0x32>
 8002c18:	2300      	movs	r3, #0
 8002c1a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002c1c:	f04f 32ff 	mov.w	r2, #4294967295
 8002c20:	69bb      	ldr	r3, [r7, #24]
 8002c22:	fa02 f303 	lsl.w	r3, r2, r3
 8002c26:	43da      	mvns	r2, r3
 8002c28:	68bb      	ldr	r3, [r7, #8]
 8002c2a:	401a      	ands	r2, r3
 8002c2c:	697b      	ldr	r3, [r7, #20]
 8002c2e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002c30:	f04f 31ff 	mov.w	r1, #4294967295
 8002c34:	697b      	ldr	r3, [r7, #20]
 8002c36:	fa01 f303 	lsl.w	r3, r1, r3
 8002c3a:	43d9      	mvns	r1, r3
 8002c3c:	687b      	ldr	r3, [r7, #4]
 8002c3e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002c40:	4313      	orrs	r3, r2
         );
}
 8002c42:	4618      	mov	r0, r3
 8002c44:	3724      	adds	r7, #36	@ 0x24
 8002c46:	46bd      	mov	sp, r7
 8002c48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c4c:	4770      	bx	lr
	...

08002c50 <SysTick_Config>:
>>>>>>> 39e4d10438a821cc799a472af87a77c6796a1676
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
<<<<<<< HEAD
 8002b3c:	b580      	push	{r7, lr}
 8002b3e:	b082      	sub	sp, #8
 8002b40:	af00      	add	r7, sp, #0
 8002b42:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002b44:	687b      	ldr	r3, [r7, #4]
 8002b46:	3b01      	subs	r3, #1
 8002b48:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8002b4c:	d301      	bcc.n	8002b52 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8002b4e:	2301      	movs	r3, #1
 8002b50:	e00f      	b.n	8002b72 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8002b52:	4a0a      	ldr	r2, [pc, #40]	@ (8002b7c <SysTick_Config+0x40>)
 8002b54:	687b      	ldr	r3, [r7, #4]
 8002b56:	3b01      	subs	r3, #1
 8002b58:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8002b5a:	210f      	movs	r1, #15
 8002b5c:	f04f 30ff 	mov.w	r0, #4294967295
 8002b60:	f7ff ff8e 	bl	8002a80 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002b64:	4b05      	ldr	r3, [pc, #20]	@ (8002b7c <SysTick_Config+0x40>)
 8002b66:	2200      	movs	r2, #0
 8002b68:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8002b6a:	4b04      	ldr	r3, [pc, #16]	@ (8002b7c <SysTick_Config+0x40>)
 8002b6c:	2207      	movs	r2, #7
 8002b6e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8002b70:	2300      	movs	r3, #0
}
 8002b72:	4618      	mov	r0, r3
 8002b74:	3708      	adds	r7, #8
 8002b76:	46bd      	mov	sp, r7
 8002b78:	bd80      	pop	{r7, pc}
 8002b7a:	bf00      	nop
 8002b7c:	e000e010 	.word	0xe000e010

08002b80 <HAL_NVIC_SetPriorityGrouping>:
=======
 8002c50:	b580      	push	{r7, lr}
 8002c52:	b082      	sub	sp, #8
 8002c54:	af00      	add	r7, sp, #0
 8002c56:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002c58:	687b      	ldr	r3, [r7, #4]
 8002c5a:	3b01      	subs	r3, #1
 8002c5c:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8002c60:	d301      	bcc.n	8002c66 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8002c62:	2301      	movs	r3, #1
 8002c64:	e00f      	b.n	8002c86 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8002c66:	4a0a      	ldr	r2, [pc, #40]	@ (8002c90 <SysTick_Config+0x40>)
 8002c68:	687b      	ldr	r3, [r7, #4]
 8002c6a:	3b01      	subs	r3, #1
 8002c6c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8002c6e:	210f      	movs	r1, #15
 8002c70:	f04f 30ff 	mov.w	r0, #4294967295
 8002c74:	f7ff ff8e 	bl	8002b94 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002c78:	4b05      	ldr	r3, [pc, #20]	@ (8002c90 <SysTick_Config+0x40>)
 8002c7a:	2200      	movs	r2, #0
 8002c7c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8002c7e:	4b04      	ldr	r3, [pc, #16]	@ (8002c90 <SysTick_Config+0x40>)
 8002c80:	2207      	movs	r2, #7
 8002c82:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8002c84:	2300      	movs	r3, #0
}
 8002c86:	4618      	mov	r0, r3
 8002c88:	3708      	adds	r7, #8
 8002c8a:	46bd      	mov	sp, r7
 8002c8c:	bd80      	pop	{r7, pc}
 8002c8e:	bf00      	nop
 8002c90:	e000e010 	.word	0xe000e010

08002c94 <HAL_NVIC_SetPriorityGrouping>:
>>>>>>> 39e4d10438a821cc799a472af87a77c6796a1676
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
<<<<<<< HEAD
 8002b80:	b580      	push	{r7, lr}
 8002b82:	b082      	sub	sp, #8
 8002b84:	af00      	add	r7, sp, #0
 8002b86:	6078      	str	r0, [r7, #4]
=======
 8002c94:	b580      	push	{r7, lr}
 8002c96:	b082      	sub	sp, #8
 8002c98:	af00      	add	r7, sp, #0
 8002c9a:	6078      	str	r0, [r7, #4]
>>>>>>> 39e4d10438a821cc799a472af87a77c6796a1676
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
<<<<<<< HEAD
 8002b88:	6878      	ldr	r0, [r7, #4]
 8002b8a:	f7ff ff29 	bl	80029e0 <__NVIC_SetPriorityGrouping>
}
 8002b8e:	bf00      	nop
 8002b90:	3708      	adds	r7, #8
 8002b92:	46bd      	mov	sp, r7
 8002b94:	bd80      	pop	{r7, pc}

08002b96 <HAL_NVIC_SetPriority>:
=======
 8002c9c:	6878      	ldr	r0, [r7, #4]
 8002c9e:	f7ff ff29 	bl	8002af4 <__NVIC_SetPriorityGrouping>
}
 8002ca2:	bf00      	nop
 8002ca4:	3708      	adds	r7, #8
 8002ca6:	46bd      	mov	sp, r7
 8002ca8:	bd80      	pop	{r7, pc}

08002caa <HAL_NVIC_SetPriority>:
>>>>>>> 39e4d10438a821cc799a472af87a77c6796a1676
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
<<<<<<< HEAD
 8002b96:	b580      	push	{r7, lr}
 8002b98:	b086      	sub	sp, #24
 8002b9a:	af00      	add	r7, sp, #0
 8002b9c:	4603      	mov	r3, r0
 8002b9e:	60b9      	str	r1, [r7, #8]
 8002ba0:	607a      	str	r2, [r7, #4]
 8002ba2:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8002ba4:	2300      	movs	r3, #0
 8002ba6:	617b      	str	r3, [r7, #20]
=======
 8002caa:	b580      	push	{r7, lr}
 8002cac:	b086      	sub	sp, #24
 8002cae:	af00      	add	r7, sp, #0
 8002cb0:	4603      	mov	r3, r0
 8002cb2:	60b9      	str	r1, [r7, #8]
 8002cb4:	607a      	str	r2, [r7, #4]
 8002cb6:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8002cb8:	2300      	movs	r3, #0
 8002cba:	617b      	str	r3, [r7, #20]
>>>>>>> 39e4d10438a821cc799a472af87a77c6796a1676
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
<<<<<<< HEAD
 8002ba8:	f7ff ff3e 	bl	8002a28 <__NVIC_GetPriorityGrouping>
 8002bac:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8002bae:	687a      	ldr	r2, [r7, #4]
 8002bb0:	68b9      	ldr	r1, [r7, #8]
 8002bb2:	6978      	ldr	r0, [r7, #20]
 8002bb4:	f7ff ff8e 	bl	8002ad4 <NVIC_EncodePriority>
 8002bb8:	4602      	mov	r2, r0
 8002bba:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002bbe:	4611      	mov	r1, r2
 8002bc0:	4618      	mov	r0, r3
 8002bc2:	f7ff ff5d 	bl	8002a80 <__NVIC_SetPriority>
}
 8002bc6:	bf00      	nop
 8002bc8:	3718      	adds	r7, #24
 8002bca:	46bd      	mov	sp, r7
 8002bcc:	bd80      	pop	{r7, pc}

08002bce <HAL_NVIC_EnableIRQ>:
=======
 8002cbc:	f7ff ff3e 	bl	8002b3c <__NVIC_GetPriorityGrouping>
 8002cc0:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8002cc2:	687a      	ldr	r2, [r7, #4]
 8002cc4:	68b9      	ldr	r1, [r7, #8]
 8002cc6:	6978      	ldr	r0, [r7, #20]
 8002cc8:	f7ff ff8e 	bl	8002be8 <NVIC_EncodePriority>
 8002ccc:	4602      	mov	r2, r0
 8002cce:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002cd2:	4611      	mov	r1, r2
 8002cd4:	4618      	mov	r0, r3
 8002cd6:	f7ff ff5d 	bl	8002b94 <__NVIC_SetPriority>
}
 8002cda:	bf00      	nop
 8002cdc:	3718      	adds	r7, #24
 8002cde:	46bd      	mov	sp, r7
 8002ce0:	bd80      	pop	{r7, pc}

08002ce2 <HAL_NVIC_EnableIRQ>:
>>>>>>> 39e4d10438a821cc799a472af87a77c6796a1676
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
<<<<<<< HEAD
 8002bce:	b580      	push	{r7, lr}
 8002bd0:	b082      	sub	sp, #8
 8002bd2:	af00      	add	r7, sp, #0
 8002bd4:	4603      	mov	r3, r0
 8002bd6:	71fb      	strb	r3, [r7, #7]
=======
 8002ce2:	b580      	push	{r7, lr}
 8002ce4:	b082      	sub	sp, #8
 8002ce6:	af00      	add	r7, sp, #0
 8002ce8:	4603      	mov	r3, r0
 8002cea:	71fb      	strb	r3, [r7, #7]
>>>>>>> 39e4d10438a821cc799a472af87a77c6796a1676
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
<<<<<<< HEAD
 8002bd8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002bdc:	4618      	mov	r0, r3
 8002bde:	f7ff ff31 	bl	8002a44 <__NVIC_EnableIRQ>
}
 8002be2:	bf00      	nop
 8002be4:	3708      	adds	r7, #8
 8002be6:	46bd      	mov	sp, r7
 8002be8:	bd80      	pop	{r7, pc}

08002bea <HAL_SYSTICK_Config>:
=======
 8002cec:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002cf0:	4618      	mov	r0, r3
 8002cf2:	f7ff ff31 	bl	8002b58 <__NVIC_EnableIRQ>
}
 8002cf6:	bf00      	nop
 8002cf8:	3708      	adds	r7, #8
 8002cfa:	46bd      	mov	sp, r7
 8002cfc:	bd80      	pop	{r7, pc}

08002cfe <HAL_SYSTICK_Config>:
>>>>>>> 39e4d10438a821cc799a472af87a77c6796a1676
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
<<<<<<< HEAD
 8002bea:	b580      	push	{r7, lr}
 8002bec:	b082      	sub	sp, #8
 8002bee:	af00      	add	r7, sp, #0
 8002bf0:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8002bf2:	6878      	ldr	r0, [r7, #4]
 8002bf4:	f7ff ffa2 	bl	8002b3c <SysTick_Config>
 8002bf8:	4603      	mov	r3, r0
}
 8002bfa:	4618      	mov	r0, r3
 8002bfc:	3708      	adds	r7, #8
 8002bfe:	46bd      	mov	sp, r7
 8002c00:	bd80      	pop	{r7, pc}
	...

08002c04 <HAL_DMA_Init>:
=======
 8002cfe:	b580      	push	{r7, lr}
 8002d00:	b082      	sub	sp, #8
 8002d02:	af00      	add	r7, sp, #0
 8002d04:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8002d06:	6878      	ldr	r0, [r7, #4]
 8002d08:	f7ff ffa2 	bl	8002c50 <SysTick_Config>
 8002d0c:	4603      	mov	r3, r0
}
 8002d0e:	4618      	mov	r0, r3
 8002d10:	3708      	adds	r7, #8
 8002d12:	46bd      	mov	sp, r7
 8002d14:	bd80      	pop	{r7, pc}
	...

08002d18 <HAL_DMA_Init>:
>>>>>>> 39e4d10438a821cc799a472af87a77c6796a1676
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
<<<<<<< HEAD
 8002c04:	b580      	push	{r7, lr}
 8002c06:	b086      	sub	sp, #24
 8002c08:	af00      	add	r7, sp, #0
 8002c0a:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8002c0c:	2300      	movs	r3, #0
 8002c0e:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 8002c10:	f7ff fac2 	bl	8002198 <HAL_GetTick>
 8002c14:	6138      	str	r0, [r7, #16]
=======
 8002d18:	b580      	push	{r7, lr}
 8002d1a:	b086      	sub	sp, #24
 8002d1c:	af00      	add	r7, sp, #0
 8002d1e:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8002d20:	2300      	movs	r3, #0
 8002d22:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 8002d24:	f7ff fac2 	bl	80022ac <HAL_GetTick>
 8002d28:	6138      	str	r0, [r7, #16]
>>>>>>> 39e4d10438a821cc799a472af87a77c6796a1676
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
<<<<<<< HEAD
 8002c16:	687b      	ldr	r3, [r7, #4]
 8002c18:	2b00      	cmp	r3, #0
 8002c1a:	d101      	bne.n	8002c20 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 8002c1c:	2301      	movs	r3, #1
 8002c1e:	e099      	b.n	8002d54 <HAL_DMA_Init+0x150>
=======
 8002d2a:	687b      	ldr	r3, [r7, #4]
 8002d2c:	2b00      	cmp	r3, #0
 8002d2e:	d101      	bne.n	8002d34 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 8002d30:	2301      	movs	r3, #1
 8002d32:	e099      	b.n	8002e68 <HAL_DMA_Init+0x150>
>>>>>>> 39e4d10438a821cc799a472af87a77c6796a1676
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
<<<<<<< HEAD
 8002c20:	687b      	ldr	r3, [r7, #4]
 8002c22:	2202      	movs	r2, #2
 8002c24:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 8002c28:	687b      	ldr	r3, [r7, #4]
 8002c2a:	2200      	movs	r2, #0
 8002c2c:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 8002c30:	687b      	ldr	r3, [r7, #4]
 8002c32:	681b      	ldr	r3, [r3, #0]
 8002c34:	681a      	ldr	r2, [r3, #0]
 8002c36:	687b      	ldr	r3, [r7, #4]
 8002c38:	681b      	ldr	r3, [r3, #0]
 8002c3a:	f022 0201 	bic.w	r2, r2, #1
 8002c3e:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8002c40:	e00f      	b.n	8002c62 <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8002c42:	f7ff faa9 	bl	8002198 <HAL_GetTick>
 8002c46:	4602      	mov	r2, r0
 8002c48:	693b      	ldr	r3, [r7, #16]
 8002c4a:	1ad3      	subs	r3, r2, r3
 8002c4c:	2b05      	cmp	r3, #5
 8002c4e:	d908      	bls.n	8002c62 <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8002c50:	687b      	ldr	r3, [r7, #4]
 8002c52:	2220      	movs	r2, #32
 8002c54:	655a      	str	r2, [r3, #84]	@ 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 8002c56:	687b      	ldr	r3, [r7, #4]
 8002c58:	2203      	movs	r2, #3
 8002c5a:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
      
      return HAL_TIMEOUT;
 8002c5e:	2303      	movs	r3, #3
 8002c60:	e078      	b.n	8002d54 <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8002c62:	687b      	ldr	r3, [r7, #4]
 8002c64:	681b      	ldr	r3, [r3, #0]
 8002c66:	681b      	ldr	r3, [r3, #0]
 8002c68:	f003 0301 	and.w	r3, r3, #1
 8002c6c:	2b00      	cmp	r3, #0
 8002c6e:	d1e8      	bne.n	8002c42 <HAL_DMA_Init+0x3e>
=======
 8002d34:	687b      	ldr	r3, [r7, #4]
 8002d36:	2202      	movs	r2, #2
 8002d38:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 8002d3c:	687b      	ldr	r3, [r7, #4]
 8002d3e:	2200      	movs	r2, #0
 8002d40:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 8002d44:	687b      	ldr	r3, [r7, #4]
 8002d46:	681b      	ldr	r3, [r3, #0]
 8002d48:	681a      	ldr	r2, [r3, #0]
 8002d4a:	687b      	ldr	r3, [r7, #4]
 8002d4c:	681b      	ldr	r3, [r3, #0]
 8002d4e:	f022 0201 	bic.w	r2, r2, #1
 8002d52:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8002d54:	e00f      	b.n	8002d76 <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8002d56:	f7ff faa9 	bl	80022ac <HAL_GetTick>
 8002d5a:	4602      	mov	r2, r0
 8002d5c:	693b      	ldr	r3, [r7, #16]
 8002d5e:	1ad3      	subs	r3, r2, r3
 8002d60:	2b05      	cmp	r3, #5
 8002d62:	d908      	bls.n	8002d76 <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8002d64:	687b      	ldr	r3, [r7, #4]
 8002d66:	2220      	movs	r2, #32
 8002d68:	655a      	str	r2, [r3, #84]	@ 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 8002d6a:	687b      	ldr	r3, [r7, #4]
 8002d6c:	2203      	movs	r2, #3
 8002d6e:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
      
      return HAL_TIMEOUT;
 8002d72:	2303      	movs	r3, #3
 8002d74:	e078      	b.n	8002e68 <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8002d76:	687b      	ldr	r3, [r7, #4]
 8002d78:	681b      	ldr	r3, [r3, #0]
 8002d7a:	681b      	ldr	r3, [r3, #0]
 8002d7c:	f003 0301 	and.w	r3, r3, #1
 8002d80:	2b00      	cmp	r3, #0
 8002d82:	d1e8      	bne.n	8002d56 <HAL_DMA_Init+0x3e>
>>>>>>> 39e4d10438a821cc799a472af87a77c6796a1676
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
<<<<<<< HEAD
 8002c70:	687b      	ldr	r3, [r7, #4]
 8002c72:	681b      	ldr	r3, [r3, #0]
 8002c74:	681b      	ldr	r3, [r3, #0]
 8002c76:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8002c78:	697a      	ldr	r2, [r7, #20]
 8002c7a:	4b38      	ldr	r3, [pc, #224]	@ (8002d5c <HAL_DMA_Init+0x158>)
 8002c7c:	4013      	ands	r3, r2
 8002c7e:	617b      	str	r3, [r7, #20]
=======
 8002d84:	687b      	ldr	r3, [r7, #4]
 8002d86:	681b      	ldr	r3, [r3, #0]
 8002d88:	681b      	ldr	r3, [r3, #0]
 8002d8a:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8002d8c:	697a      	ldr	r2, [r7, #20]
 8002d8e:	4b38      	ldr	r3, [pc, #224]	@ (8002e70 <HAL_DMA_Init+0x158>)
 8002d90:	4013      	ands	r3, r2
 8002d92:	617b      	str	r3, [r7, #20]
>>>>>>> 39e4d10438a821cc799a472af87a77c6796a1676
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
<<<<<<< HEAD
 8002c80:	687b      	ldr	r3, [r7, #4]
 8002c82:	685a      	ldr	r2, [r3, #4]
 8002c84:	687b      	ldr	r3, [r7, #4]
 8002c86:	689b      	ldr	r3, [r3, #8]
 8002c88:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002c8a:	687b      	ldr	r3, [r7, #4]
 8002c8c:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8002c8e:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002c90:	687b      	ldr	r3, [r7, #4]
 8002c92:	691b      	ldr	r3, [r3, #16]
 8002c94:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002c96:	687b      	ldr	r3, [r7, #4]
 8002c98:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002c9a:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002c9c:	687b      	ldr	r3, [r7, #4]
 8002c9e:	699b      	ldr	r3, [r3, #24]
 8002ca0:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8002ca2:	687b      	ldr	r3, [r7, #4]
 8002ca4:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002ca6:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8002ca8:	687b      	ldr	r3, [r7, #4]
 8002caa:	6a1b      	ldr	r3, [r3, #32]
 8002cac:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8002cae:	697a      	ldr	r2, [r7, #20]
 8002cb0:	4313      	orrs	r3, r2
 8002cb2:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8002cb4:	687b      	ldr	r3, [r7, #4]
 8002cb6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002cb8:	2b04      	cmp	r3, #4
 8002cba:	d107      	bne.n	8002ccc <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8002cbc:	687b      	ldr	r3, [r7, #4]
 8002cbe:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8002cc0:	687b      	ldr	r3, [r7, #4]
 8002cc2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002cc4:	4313      	orrs	r3, r2
 8002cc6:	697a      	ldr	r2, [r7, #20]
 8002cc8:	4313      	orrs	r3, r2
 8002cca:	617b      	str	r3, [r7, #20]
=======
 8002d94:	687b      	ldr	r3, [r7, #4]
 8002d96:	685a      	ldr	r2, [r3, #4]
 8002d98:	687b      	ldr	r3, [r7, #4]
 8002d9a:	689b      	ldr	r3, [r3, #8]
 8002d9c:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002d9e:	687b      	ldr	r3, [r7, #4]
 8002da0:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8002da2:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002da4:	687b      	ldr	r3, [r7, #4]
 8002da6:	691b      	ldr	r3, [r3, #16]
 8002da8:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002daa:	687b      	ldr	r3, [r7, #4]
 8002dac:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002dae:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002db0:	687b      	ldr	r3, [r7, #4]
 8002db2:	699b      	ldr	r3, [r3, #24]
 8002db4:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8002db6:	687b      	ldr	r3, [r7, #4]
 8002db8:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002dba:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8002dbc:	687b      	ldr	r3, [r7, #4]
 8002dbe:	6a1b      	ldr	r3, [r3, #32]
 8002dc0:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8002dc2:	697a      	ldr	r2, [r7, #20]
 8002dc4:	4313      	orrs	r3, r2
 8002dc6:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8002dc8:	687b      	ldr	r3, [r7, #4]
 8002dca:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002dcc:	2b04      	cmp	r3, #4
 8002dce:	d107      	bne.n	8002de0 <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8002dd0:	687b      	ldr	r3, [r7, #4]
 8002dd2:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8002dd4:	687b      	ldr	r3, [r7, #4]
 8002dd6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002dd8:	4313      	orrs	r3, r2
 8002dda:	697a      	ldr	r2, [r7, #20]
 8002ddc:	4313      	orrs	r3, r2
 8002dde:	617b      	str	r3, [r7, #20]
>>>>>>> 39e4d10438a821cc799a472af87a77c6796a1676
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
<<<<<<< HEAD
 8002ccc:	687b      	ldr	r3, [r7, #4]
 8002cce:	681b      	ldr	r3, [r3, #0]
 8002cd0:	697a      	ldr	r2, [r7, #20]
 8002cd2:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 8002cd4:	687b      	ldr	r3, [r7, #4]
 8002cd6:	681b      	ldr	r3, [r3, #0]
 8002cd8:	695b      	ldr	r3, [r3, #20]
 8002cda:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8002cdc:	697b      	ldr	r3, [r7, #20]
 8002cde:	f023 0307 	bic.w	r3, r3, #7
 8002ce2:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 8002ce4:	687b      	ldr	r3, [r7, #4]
 8002ce6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002ce8:	697a      	ldr	r2, [r7, #20]
 8002cea:	4313      	orrs	r3, r2
 8002cec:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8002cee:	687b      	ldr	r3, [r7, #4]
 8002cf0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002cf2:	2b04      	cmp	r3, #4
 8002cf4:	d117      	bne.n	8002d26 <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 8002cf6:	687b      	ldr	r3, [r7, #4]
 8002cf8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002cfa:	697a      	ldr	r2, [r7, #20]
 8002cfc:	4313      	orrs	r3, r2
 8002cfe:	617b      	str	r3, [r7, #20]
=======
 8002de0:	687b      	ldr	r3, [r7, #4]
 8002de2:	681b      	ldr	r3, [r3, #0]
 8002de4:	697a      	ldr	r2, [r7, #20]
 8002de6:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 8002de8:	687b      	ldr	r3, [r7, #4]
 8002dea:	681b      	ldr	r3, [r3, #0]
 8002dec:	695b      	ldr	r3, [r3, #20]
 8002dee:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8002df0:	697b      	ldr	r3, [r7, #20]
 8002df2:	f023 0307 	bic.w	r3, r3, #7
 8002df6:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 8002df8:	687b      	ldr	r3, [r7, #4]
 8002dfa:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002dfc:	697a      	ldr	r2, [r7, #20]
 8002dfe:	4313      	orrs	r3, r2
 8002e00:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8002e02:	687b      	ldr	r3, [r7, #4]
 8002e04:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002e06:	2b04      	cmp	r3, #4
 8002e08:	d117      	bne.n	8002e3a <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 8002e0a:	687b      	ldr	r3, [r7, #4]
 8002e0c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002e0e:	697a      	ldr	r2, [r7, #20]
 8002e10:	4313      	orrs	r3, r2
 8002e12:	617b      	str	r3, [r7, #20]
>>>>>>> 39e4d10438a821cc799a472af87a77c6796a1676
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
<<<<<<< HEAD
 8002d00:	687b      	ldr	r3, [r7, #4]
 8002d02:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002d04:	2b00      	cmp	r3, #0
 8002d06:	d00e      	beq.n	8002d26 <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8002d08:	6878      	ldr	r0, [r7, #4]
 8002d0a:	f000 fb01 	bl	8003310 <DMA_CheckFifoParam>
 8002d0e:	4603      	mov	r3, r0
 8002d10:	2b00      	cmp	r3, #0
 8002d12:	d008      	beq.n	8002d26 <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8002d14:	687b      	ldr	r3, [r7, #4]
 8002d16:	2240      	movs	r2, #64	@ 0x40
 8002d18:	655a      	str	r2, [r3, #84]	@ 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8002d1a:	687b      	ldr	r3, [r7, #4]
 8002d1c:	2201      	movs	r2, #1
 8002d1e:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
        
        return HAL_ERROR; 
 8002d22:	2301      	movs	r3, #1
 8002d24:	e016      	b.n	8002d54 <HAL_DMA_Init+0x150>
=======
 8002e14:	687b      	ldr	r3, [r7, #4]
 8002e16:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002e18:	2b00      	cmp	r3, #0
 8002e1a:	d00e      	beq.n	8002e3a <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8002e1c:	6878      	ldr	r0, [r7, #4]
 8002e1e:	f000 fb01 	bl	8003424 <DMA_CheckFifoParam>
 8002e22:	4603      	mov	r3, r0
 8002e24:	2b00      	cmp	r3, #0
 8002e26:	d008      	beq.n	8002e3a <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8002e28:	687b      	ldr	r3, [r7, #4]
 8002e2a:	2240      	movs	r2, #64	@ 0x40
 8002e2c:	655a      	str	r2, [r3, #84]	@ 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8002e2e:	687b      	ldr	r3, [r7, #4]
 8002e30:	2201      	movs	r2, #1
 8002e32:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
        
        return HAL_ERROR; 
 8002e36:	2301      	movs	r3, #1
 8002e38:	e016      	b.n	8002e68 <HAL_DMA_Init+0x150>
>>>>>>> 39e4d10438a821cc799a472af87a77c6796a1676
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
<<<<<<< HEAD
 8002d26:	687b      	ldr	r3, [r7, #4]
 8002d28:	681b      	ldr	r3, [r3, #0]
 8002d2a:	697a      	ldr	r2, [r7, #20]
 8002d2c:	615a      	str	r2, [r3, #20]
=======
 8002e3a:	687b      	ldr	r3, [r7, #4]
 8002e3c:	681b      	ldr	r3, [r3, #0]
 8002e3e:	697a      	ldr	r2, [r7, #20]
 8002e40:	615a      	str	r2, [r3, #20]
>>>>>>> 39e4d10438a821cc799a472af87a77c6796a1676

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
<<<<<<< HEAD
 8002d2e:	6878      	ldr	r0, [r7, #4]
 8002d30:	f000 fab8 	bl	80032a4 <DMA_CalcBaseAndBitshift>
 8002d34:	4603      	mov	r3, r0
 8002d36:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8002d38:	687b      	ldr	r3, [r7, #4]
 8002d3a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002d3c:	223f      	movs	r2, #63	@ 0x3f
 8002d3e:	409a      	lsls	r2, r3
 8002d40:	68fb      	ldr	r3, [r7, #12]
 8002d42:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8002d44:	687b      	ldr	r3, [r7, #4]
 8002d46:	2200      	movs	r2, #0
 8002d48:	655a      	str	r2, [r3, #84]	@ 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8002d4a:	687b      	ldr	r3, [r7, #4]
 8002d4c:	2201      	movs	r2, #1
 8002d4e:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

  return HAL_OK;
 8002d52:	2300      	movs	r3, #0
}
 8002d54:	4618      	mov	r0, r3
 8002d56:	3718      	adds	r7, #24
 8002d58:	46bd      	mov	sp, r7
 8002d5a:	bd80      	pop	{r7, pc}
 8002d5c:	f010803f 	.word	0xf010803f

08002d60 <HAL_DMA_Start_IT>:
=======
 8002e42:	6878      	ldr	r0, [r7, #4]
 8002e44:	f000 fab8 	bl	80033b8 <DMA_CalcBaseAndBitshift>
 8002e48:	4603      	mov	r3, r0
 8002e4a:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8002e4c:	687b      	ldr	r3, [r7, #4]
 8002e4e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002e50:	223f      	movs	r2, #63	@ 0x3f
 8002e52:	409a      	lsls	r2, r3
 8002e54:	68fb      	ldr	r3, [r7, #12]
 8002e56:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8002e58:	687b      	ldr	r3, [r7, #4]
 8002e5a:	2200      	movs	r2, #0
 8002e5c:	655a      	str	r2, [r3, #84]	@ 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8002e5e:	687b      	ldr	r3, [r7, #4]
 8002e60:	2201      	movs	r2, #1
 8002e62:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

  return HAL_OK;
 8002e66:	2300      	movs	r3, #0
}
 8002e68:	4618      	mov	r0, r3
 8002e6a:	3718      	adds	r7, #24
 8002e6c:	46bd      	mov	sp, r7
 8002e6e:	bd80      	pop	{r7, pc}
 8002e70:	f010803f 	.word	0xf010803f

08002e74 <HAL_DMA_Start_IT>:
>>>>>>> 39e4d10438a821cc799a472af87a77c6796a1676
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
<<<<<<< HEAD
 8002d60:	b580      	push	{r7, lr}
 8002d62:	b086      	sub	sp, #24
 8002d64:	af00      	add	r7, sp, #0
 8002d66:	60f8      	str	r0, [r7, #12]
 8002d68:	60b9      	str	r1, [r7, #8]
 8002d6a:	607a      	str	r2, [r7, #4]
 8002d6c:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8002d6e:	2300      	movs	r3, #0
 8002d70:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8002d72:	68fb      	ldr	r3, [r7, #12]
 8002d74:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002d76:	613b      	str	r3, [r7, #16]
=======
 8002e74:	b580      	push	{r7, lr}
 8002e76:	b086      	sub	sp, #24
 8002e78:	af00      	add	r7, sp, #0
 8002e7a:	60f8      	str	r0, [r7, #12]
 8002e7c:	60b9      	str	r1, [r7, #8]
 8002e7e:	607a      	str	r2, [r7, #4]
 8002e80:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8002e82:	2300      	movs	r3, #0
 8002e84:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8002e86:	68fb      	ldr	r3, [r7, #12]
 8002e88:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002e8a:	613b      	str	r3, [r7, #16]
>>>>>>> 39e4d10438a821cc799a472af87a77c6796a1676
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
<<<<<<< HEAD
 8002d78:	68fb      	ldr	r3, [r7, #12]
 8002d7a:	f893 3034 	ldrb.w	r3, [r3, #52]	@ 0x34
 8002d7e:	2b01      	cmp	r3, #1
 8002d80:	d101      	bne.n	8002d86 <HAL_DMA_Start_IT+0x26>
 8002d82:	2302      	movs	r3, #2
 8002d84:	e040      	b.n	8002e08 <HAL_DMA_Start_IT+0xa8>
 8002d86:	68fb      	ldr	r3, [r7, #12]
 8002d88:	2201      	movs	r2, #1
 8002d8a:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 8002d8e:	68fb      	ldr	r3, [r7, #12]
 8002d90:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8002d94:	b2db      	uxtb	r3, r3
 8002d96:	2b01      	cmp	r3, #1
 8002d98:	d12f      	bne.n	8002dfa <HAL_DMA_Start_IT+0x9a>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8002d9a:	68fb      	ldr	r3, [r7, #12]
 8002d9c:	2202      	movs	r2, #2
 8002d9e:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8002da2:	68fb      	ldr	r3, [r7, #12]
 8002da4:	2200      	movs	r2, #0
 8002da6:	655a      	str	r2, [r3, #84]	@ 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8002da8:	683b      	ldr	r3, [r7, #0]
 8002daa:	687a      	ldr	r2, [r7, #4]
 8002dac:	68b9      	ldr	r1, [r7, #8]
 8002dae:	68f8      	ldr	r0, [r7, #12]
 8002db0:	f000 fa4a 	bl	8003248 <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8002db4:	68fb      	ldr	r3, [r7, #12]
 8002db6:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002db8:	223f      	movs	r2, #63	@ 0x3f
 8002dba:	409a      	lsls	r2, r3
 8002dbc:	693b      	ldr	r3, [r7, #16]
 8002dbe:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 8002dc0:	68fb      	ldr	r3, [r7, #12]
 8002dc2:	681b      	ldr	r3, [r3, #0]
 8002dc4:	681a      	ldr	r2, [r3, #0]
 8002dc6:	68fb      	ldr	r3, [r7, #12]
 8002dc8:	681b      	ldr	r3, [r3, #0]
 8002dca:	f042 0216 	orr.w	r2, r2, #22
 8002dce:	601a      	str	r2, [r3, #0]
    
    if(hdma->XferHalfCpltCallback != NULL)
 8002dd0:	68fb      	ldr	r3, [r7, #12]
 8002dd2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002dd4:	2b00      	cmp	r3, #0
 8002dd6:	d007      	beq.n	8002de8 <HAL_DMA_Start_IT+0x88>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 8002dd8:	68fb      	ldr	r3, [r7, #12]
 8002dda:	681b      	ldr	r3, [r3, #0]
 8002ddc:	681a      	ldr	r2, [r3, #0]
 8002dde:	68fb      	ldr	r3, [r7, #12]
 8002de0:	681b      	ldr	r3, [r3, #0]
 8002de2:	f042 0208 	orr.w	r2, r2, #8
 8002de6:	601a      	str	r2, [r3, #0]
=======
 8002e8c:	68fb      	ldr	r3, [r7, #12]
 8002e8e:	f893 3034 	ldrb.w	r3, [r3, #52]	@ 0x34
 8002e92:	2b01      	cmp	r3, #1
 8002e94:	d101      	bne.n	8002e9a <HAL_DMA_Start_IT+0x26>
 8002e96:	2302      	movs	r3, #2
 8002e98:	e040      	b.n	8002f1c <HAL_DMA_Start_IT+0xa8>
 8002e9a:	68fb      	ldr	r3, [r7, #12]
 8002e9c:	2201      	movs	r2, #1
 8002e9e:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 8002ea2:	68fb      	ldr	r3, [r7, #12]
 8002ea4:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8002ea8:	b2db      	uxtb	r3, r3
 8002eaa:	2b01      	cmp	r3, #1
 8002eac:	d12f      	bne.n	8002f0e <HAL_DMA_Start_IT+0x9a>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8002eae:	68fb      	ldr	r3, [r7, #12]
 8002eb0:	2202      	movs	r2, #2
 8002eb2:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8002eb6:	68fb      	ldr	r3, [r7, #12]
 8002eb8:	2200      	movs	r2, #0
 8002eba:	655a      	str	r2, [r3, #84]	@ 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8002ebc:	683b      	ldr	r3, [r7, #0]
 8002ebe:	687a      	ldr	r2, [r7, #4]
 8002ec0:	68b9      	ldr	r1, [r7, #8]
 8002ec2:	68f8      	ldr	r0, [r7, #12]
 8002ec4:	f000 fa4a 	bl	800335c <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8002ec8:	68fb      	ldr	r3, [r7, #12]
 8002eca:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002ecc:	223f      	movs	r2, #63	@ 0x3f
 8002ece:	409a      	lsls	r2, r3
 8002ed0:	693b      	ldr	r3, [r7, #16]
 8002ed2:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 8002ed4:	68fb      	ldr	r3, [r7, #12]
 8002ed6:	681b      	ldr	r3, [r3, #0]
 8002ed8:	681a      	ldr	r2, [r3, #0]
 8002eda:	68fb      	ldr	r3, [r7, #12]
 8002edc:	681b      	ldr	r3, [r3, #0]
 8002ede:	f042 0216 	orr.w	r2, r2, #22
 8002ee2:	601a      	str	r2, [r3, #0]
    
    if(hdma->XferHalfCpltCallback != NULL)
 8002ee4:	68fb      	ldr	r3, [r7, #12]
 8002ee6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002ee8:	2b00      	cmp	r3, #0
 8002eea:	d007      	beq.n	8002efc <HAL_DMA_Start_IT+0x88>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 8002eec:	68fb      	ldr	r3, [r7, #12]
 8002eee:	681b      	ldr	r3, [r3, #0]
 8002ef0:	681a      	ldr	r2, [r3, #0]
 8002ef2:	68fb      	ldr	r3, [r7, #12]
 8002ef4:	681b      	ldr	r3, [r3, #0]
 8002ef6:	f042 0208 	orr.w	r2, r2, #8
 8002efa:	601a      	str	r2, [r3, #0]
>>>>>>> 39e4d10438a821cc799a472af87a77c6796a1676
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
<<<<<<< HEAD
 8002de8:	68fb      	ldr	r3, [r7, #12]
 8002dea:	681b      	ldr	r3, [r3, #0]
 8002dec:	681a      	ldr	r2, [r3, #0]
 8002dee:	68fb      	ldr	r3, [r7, #12]
 8002df0:	681b      	ldr	r3, [r3, #0]
 8002df2:	f042 0201 	orr.w	r2, r2, #1
 8002df6:	601a      	str	r2, [r3, #0]
 8002df8:	e005      	b.n	8002e06 <HAL_DMA_Start_IT+0xa6>
=======
 8002efc:	68fb      	ldr	r3, [r7, #12]
 8002efe:	681b      	ldr	r3, [r3, #0]
 8002f00:	681a      	ldr	r2, [r3, #0]
 8002f02:	68fb      	ldr	r3, [r7, #12]
 8002f04:	681b      	ldr	r3, [r3, #0]
 8002f06:	f042 0201 	orr.w	r2, r2, #1
 8002f0a:	601a      	str	r2, [r3, #0]
 8002f0c:	e005      	b.n	8002f1a <HAL_DMA_Start_IT+0xa6>
>>>>>>> 39e4d10438a821cc799a472af87a77c6796a1676
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
<<<<<<< HEAD
 8002dfa:	68fb      	ldr	r3, [r7, #12]
 8002dfc:	2200      	movs	r2, #0
 8002dfe:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 8002e02:	2302      	movs	r3, #2
 8002e04:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 8002e06:	7dfb      	ldrb	r3, [r7, #23]
}
 8002e08:	4618      	mov	r0, r3
 8002e0a:	3718      	adds	r7, #24
 8002e0c:	46bd      	mov	sp, r7
 8002e0e:	bd80      	pop	{r7, pc}

08002e10 <HAL_DMA_Abort>:
=======
 8002f0e:	68fb      	ldr	r3, [r7, #12]
 8002f10:	2200      	movs	r2, #0
 8002f12:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 8002f16:	2302      	movs	r3, #2
 8002f18:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 8002f1a:	7dfb      	ldrb	r3, [r7, #23]
}
 8002f1c:	4618      	mov	r0, r3
 8002f1e:	3718      	adds	r7, #24
 8002f20:	46bd      	mov	sp, r7
 8002f22:	bd80      	pop	{r7, pc}

08002f24 <HAL_DMA_Abort>:
>>>>>>> 39e4d10438a821cc799a472af87a77c6796a1676
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
<<<<<<< HEAD
 8002e10:	b580      	push	{r7, lr}
 8002e12:	b084      	sub	sp, #16
 8002e14:	af00      	add	r7, sp, #0
 8002e16:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8002e18:	687b      	ldr	r3, [r7, #4]
 8002e1a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002e1c:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 8002e1e:	f7ff f9bb 	bl	8002198 <HAL_GetTick>
 8002e22:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8002e24:	687b      	ldr	r3, [r7, #4]
 8002e26:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8002e2a:	b2db      	uxtb	r3, r3
 8002e2c:	2b02      	cmp	r3, #2
 8002e2e:	d008      	beq.n	8002e42 <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8002e30:	687b      	ldr	r3, [r7, #4]
 8002e32:	2280      	movs	r2, #128	@ 0x80
 8002e34:	655a      	str	r2, [r3, #84]	@ 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002e36:	687b      	ldr	r3, [r7, #4]
 8002e38:	2200      	movs	r2, #0
 8002e3a:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    
    return HAL_ERROR;
 8002e3e:	2301      	movs	r3, #1
 8002e40:	e052      	b.n	8002ee8 <HAL_DMA_Abort+0xd8>
=======
 8002f24:	b580      	push	{r7, lr}
 8002f26:	b084      	sub	sp, #16
 8002f28:	af00      	add	r7, sp, #0
 8002f2a:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8002f2c:	687b      	ldr	r3, [r7, #4]
 8002f2e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002f30:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 8002f32:	f7ff f9bb 	bl	80022ac <HAL_GetTick>
 8002f36:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8002f38:	687b      	ldr	r3, [r7, #4]
 8002f3a:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8002f3e:	b2db      	uxtb	r3, r3
 8002f40:	2b02      	cmp	r3, #2
 8002f42:	d008      	beq.n	8002f56 <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8002f44:	687b      	ldr	r3, [r7, #4]
 8002f46:	2280      	movs	r2, #128	@ 0x80
 8002f48:	655a      	str	r2, [r3, #84]	@ 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002f4a:	687b      	ldr	r3, [r7, #4]
 8002f4c:	2200      	movs	r2, #0
 8002f4e:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    
    return HAL_ERROR;
 8002f52:	2301      	movs	r3, #1
 8002f54:	e052      	b.n	8002ffc <HAL_DMA_Abort+0xd8>
>>>>>>> 39e4d10438a821cc799a472af87a77c6796a1676
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
<<<<<<< HEAD
 8002e42:	687b      	ldr	r3, [r7, #4]
 8002e44:	681b      	ldr	r3, [r3, #0]
 8002e46:	681a      	ldr	r2, [r3, #0]
 8002e48:	687b      	ldr	r3, [r7, #4]
 8002e4a:	681b      	ldr	r3, [r3, #0]
 8002e4c:	f022 0216 	bic.w	r2, r2, #22
 8002e50:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 8002e52:	687b      	ldr	r3, [r7, #4]
 8002e54:	681b      	ldr	r3, [r3, #0]
 8002e56:	695a      	ldr	r2, [r3, #20]
 8002e58:	687b      	ldr	r3, [r7, #4]
 8002e5a:	681b      	ldr	r3, [r3, #0]
 8002e5c:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8002e60:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8002e62:	687b      	ldr	r3, [r7, #4]
 8002e64:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002e66:	2b00      	cmp	r3, #0
 8002e68:	d103      	bne.n	8002e72 <HAL_DMA_Abort+0x62>
 8002e6a:	687b      	ldr	r3, [r7, #4]
 8002e6c:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8002e6e:	2b00      	cmp	r3, #0
 8002e70:	d007      	beq.n	8002e82 <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 8002e72:	687b      	ldr	r3, [r7, #4]
 8002e74:	681b      	ldr	r3, [r3, #0]
 8002e76:	681a      	ldr	r2, [r3, #0]
 8002e78:	687b      	ldr	r3, [r7, #4]
 8002e7a:	681b      	ldr	r3, [r3, #0]
 8002e7c:	f022 0208 	bic.w	r2, r2, #8
 8002e80:	601a      	str	r2, [r3, #0]
=======
 8002f56:	687b      	ldr	r3, [r7, #4]
 8002f58:	681b      	ldr	r3, [r3, #0]
 8002f5a:	681a      	ldr	r2, [r3, #0]
 8002f5c:	687b      	ldr	r3, [r7, #4]
 8002f5e:	681b      	ldr	r3, [r3, #0]
 8002f60:	f022 0216 	bic.w	r2, r2, #22
 8002f64:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 8002f66:	687b      	ldr	r3, [r7, #4]
 8002f68:	681b      	ldr	r3, [r3, #0]
 8002f6a:	695a      	ldr	r2, [r3, #20]
 8002f6c:	687b      	ldr	r3, [r7, #4]
 8002f6e:	681b      	ldr	r3, [r3, #0]
 8002f70:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8002f74:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8002f76:	687b      	ldr	r3, [r7, #4]
 8002f78:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002f7a:	2b00      	cmp	r3, #0
 8002f7c:	d103      	bne.n	8002f86 <HAL_DMA_Abort+0x62>
 8002f7e:	687b      	ldr	r3, [r7, #4]
 8002f80:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8002f82:	2b00      	cmp	r3, #0
 8002f84:	d007      	beq.n	8002f96 <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 8002f86:	687b      	ldr	r3, [r7, #4]
 8002f88:	681b      	ldr	r3, [r3, #0]
 8002f8a:	681a      	ldr	r2, [r3, #0]
 8002f8c:	687b      	ldr	r3, [r7, #4]
 8002f8e:	681b      	ldr	r3, [r3, #0]
 8002f90:	f022 0208 	bic.w	r2, r2, #8
 8002f94:	601a      	str	r2, [r3, #0]
>>>>>>> 39e4d10438a821cc799a472af87a77c6796a1676
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
<<<<<<< HEAD
 8002e82:	687b      	ldr	r3, [r7, #4]
 8002e84:	681b      	ldr	r3, [r3, #0]
 8002e86:	681a      	ldr	r2, [r3, #0]
 8002e88:	687b      	ldr	r3, [r7, #4]
 8002e8a:	681b      	ldr	r3, [r3, #0]
 8002e8c:	f022 0201 	bic.w	r2, r2, #1
 8002e90:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8002e92:	e013      	b.n	8002ebc <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8002e94:	f7ff f980 	bl	8002198 <HAL_GetTick>
 8002e98:	4602      	mov	r2, r0
 8002e9a:	68bb      	ldr	r3, [r7, #8]
 8002e9c:	1ad3      	subs	r3, r2, r3
 8002e9e:	2b05      	cmp	r3, #5
 8002ea0:	d90c      	bls.n	8002ebc <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8002ea2:	687b      	ldr	r3, [r7, #4]
 8002ea4:	2220      	movs	r2, #32
 8002ea6:	655a      	str	r2, [r3, #84]	@ 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 8002ea8:	687b      	ldr	r3, [r7, #4]
 8002eaa:	2203      	movs	r2, #3
 8002eac:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8002eb0:	687b      	ldr	r3, [r7, #4]
 8002eb2:	2200      	movs	r2, #0
 8002eb4:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
        
        return HAL_TIMEOUT;
 8002eb8:	2303      	movs	r3, #3
 8002eba:	e015      	b.n	8002ee8 <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8002ebc:	687b      	ldr	r3, [r7, #4]
 8002ebe:	681b      	ldr	r3, [r3, #0]
 8002ec0:	681b      	ldr	r3, [r3, #0]
 8002ec2:	f003 0301 	and.w	r3, r3, #1
 8002ec6:	2b00      	cmp	r3, #0
 8002ec8:	d1e4      	bne.n	8002e94 <HAL_DMA_Abort+0x84>
=======
 8002f96:	687b      	ldr	r3, [r7, #4]
 8002f98:	681b      	ldr	r3, [r3, #0]
 8002f9a:	681a      	ldr	r2, [r3, #0]
 8002f9c:	687b      	ldr	r3, [r7, #4]
 8002f9e:	681b      	ldr	r3, [r3, #0]
 8002fa0:	f022 0201 	bic.w	r2, r2, #1
 8002fa4:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8002fa6:	e013      	b.n	8002fd0 <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8002fa8:	f7ff f980 	bl	80022ac <HAL_GetTick>
 8002fac:	4602      	mov	r2, r0
 8002fae:	68bb      	ldr	r3, [r7, #8]
 8002fb0:	1ad3      	subs	r3, r2, r3
 8002fb2:	2b05      	cmp	r3, #5
 8002fb4:	d90c      	bls.n	8002fd0 <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8002fb6:	687b      	ldr	r3, [r7, #4]
 8002fb8:	2220      	movs	r2, #32
 8002fba:	655a      	str	r2, [r3, #84]	@ 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 8002fbc:	687b      	ldr	r3, [r7, #4]
 8002fbe:	2203      	movs	r2, #3
 8002fc0:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8002fc4:	687b      	ldr	r3, [r7, #4]
 8002fc6:	2200      	movs	r2, #0
 8002fc8:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
        
        return HAL_TIMEOUT;
 8002fcc:	2303      	movs	r3, #3
 8002fce:	e015      	b.n	8002ffc <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8002fd0:	687b      	ldr	r3, [r7, #4]
 8002fd2:	681b      	ldr	r3, [r3, #0]
 8002fd4:	681b      	ldr	r3, [r3, #0]
 8002fd6:	f003 0301 	and.w	r3, r3, #1
 8002fda:	2b00      	cmp	r3, #0
 8002fdc:	d1e4      	bne.n	8002fa8 <HAL_DMA_Abort+0x84>
>>>>>>> 39e4d10438a821cc799a472af87a77c6796a1676
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
<<<<<<< HEAD
 8002eca:	687b      	ldr	r3, [r7, #4]
 8002ecc:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002ece:	223f      	movs	r2, #63	@ 0x3f
 8002ed0:	409a      	lsls	r2, r3
 8002ed2:	68fb      	ldr	r3, [r7, #12]
 8002ed4:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 8002ed6:	687b      	ldr	r3, [r7, #4]
 8002ed8:	2201      	movs	r2, #1
 8002eda:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002ede:	687b      	ldr	r3, [r7, #4]
 8002ee0:	2200      	movs	r2, #0
 8002ee2:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  }
  return HAL_OK;
 8002ee6:	2300      	movs	r3, #0
}
 8002ee8:	4618      	mov	r0, r3
 8002eea:	3710      	adds	r7, #16
 8002eec:	46bd      	mov	sp, r7
 8002eee:	bd80      	pop	{r7, pc}

08002ef0 <HAL_DMA_Abort_IT>:
=======
 8002fde:	687b      	ldr	r3, [r7, #4]
 8002fe0:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002fe2:	223f      	movs	r2, #63	@ 0x3f
 8002fe4:	409a      	lsls	r2, r3
 8002fe6:	68fb      	ldr	r3, [r7, #12]
 8002fe8:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 8002fea:	687b      	ldr	r3, [r7, #4]
 8002fec:	2201      	movs	r2, #1
 8002fee:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002ff2:	687b      	ldr	r3, [r7, #4]
 8002ff4:	2200      	movs	r2, #0
 8002ff6:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  }
  return HAL_OK;
 8002ffa:	2300      	movs	r3, #0
}
 8002ffc:	4618      	mov	r0, r3
 8002ffe:	3710      	adds	r7, #16
 8003000:	46bd      	mov	sp, r7
 8003002:	bd80      	pop	{r7, pc}

08003004 <HAL_DMA_Abort_IT>:
>>>>>>> 39e4d10438a821cc799a472af87a77c6796a1676
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
<<<<<<< HEAD
 8002ef0:	b480      	push	{r7}
 8002ef2:	b083      	sub	sp, #12
 8002ef4:	af00      	add	r7, sp, #0
 8002ef6:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8002ef8:	687b      	ldr	r3, [r7, #4]
 8002efa:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8002efe:	b2db      	uxtb	r3, r3
 8002f00:	2b02      	cmp	r3, #2
 8002f02:	d004      	beq.n	8002f0e <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8002f04:	687b      	ldr	r3, [r7, #4]
 8002f06:	2280      	movs	r2, #128	@ 0x80
 8002f08:	655a      	str	r2, [r3, #84]	@ 0x54
    return HAL_ERROR;
 8002f0a:	2301      	movs	r3, #1
 8002f0c:	e00c      	b.n	8002f28 <HAL_DMA_Abort_IT+0x38>
=======
 8003004:	b480      	push	{r7}
 8003006:	b083      	sub	sp, #12
 8003008:	af00      	add	r7, sp, #0
 800300a:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 800300c:	687b      	ldr	r3, [r7, #4]
 800300e:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8003012:	b2db      	uxtb	r3, r3
 8003014:	2b02      	cmp	r3, #2
 8003016:	d004      	beq.n	8003022 <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8003018:	687b      	ldr	r3, [r7, #4]
 800301a:	2280      	movs	r2, #128	@ 0x80
 800301c:	655a      	str	r2, [r3, #84]	@ 0x54
    return HAL_ERROR;
 800301e:	2301      	movs	r3, #1
 8003020:	e00c      	b.n	800303c <HAL_DMA_Abort_IT+0x38>
>>>>>>> 39e4d10438a821cc799a472af87a77c6796a1676
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
<<<<<<< HEAD
 8002f0e:	687b      	ldr	r3, [r7, #4]
 8002f10:	2205      	movs	r2, #5
 8002f12:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8002f16:	687b      	ldr	r3, [r7, #4]
 8002f18:	681b      	ldr	r3, [r3, #0]
 8002f1a:	681a      	ldr	r2, [r3, #0]
 8002f1c:	687b      	ldr	r3, [r7, #4]
 8002f1e:	681b      	ldr	r3, [r3, #0]
 8002f20:	f022 0201 	bic.w	r2, r2, #1
 8002f24:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 8002f26:	2300      	movs	r3, #0
}
 8002f28:	4618      	mov	r0, r3
 8002f2a:	370c      	adds	r7, #12
 8002f2c:	46bd      	mov	sp, r7
 8002f2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f32:	4770      	bx	lr

08002f34 <HAL_DMA_IRQHandler>:
=======
 8003022:	687b      	ldr	r3, [r7, #4]
 8003024:	2205      	movs	r2, #5
 8003026:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 800302a:	687b      	ldr	r3, [r7, #4]
 800302c:	681b      	ldr	r3, [r3, #0]
 800302e:	681a      	ldr	r2, [r3, #0]
 8003030:	687b      	ldr	r3, [r7, #4]
 8003032:	681b      	ldr	r3, [r3, #0]
 8003034:	f022 0201 	bic.w	r2, r2, #1
 8003038:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 800303a:	2300      	movs	r3, #0
}
 800303c:	4618      	mov	r0, r3
 800303e:	370c      	adds	r7, #12
 8003040:	46bd      	mov	sp, r7
 8003042:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003046:	4770      	bx	lr

08003048 <HAL_DMA_IRQHandler>:
>>>>>>> 39e4d10438a821cc799a472af87a77c6796a1676
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
<<<<<<< HEAD
 8002f34:	b580      	push	{r7, lr}
 8002f36:	b086      	sub	sp, #24
 8002f38:	af00      	add	r7, sp, #0
 8002f3a:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 8002f3c:	2300      	movs	r3, #0
 8002f3e:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 8002f40:	4b8e      	ldr	r3, [pc, #568]	@ (800317c <HAL_DMA_IRQHandler+0x248>)
 8002f42:	681b      	ldr	r3, [r3, #0]
 8002f44:	4a8e      	ldr	r2, [pc, #568]	@ (8003180 <HAL_DMA_IRQHandler+0x24c>)
 8002f46:	fba2 2303 	umull	r2, r3, r2, r3
 8002f4a:	0a9b      	lsrs	r3, r3, #10
 8002f4c:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8002f4e:	687b      	ldr	r3, [r7, #4]
 8002f50:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002f52:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 8002f54:	693b      	ldr	r3, [r7, #16]
 8002f56:	681b      	ldr	r3, [r3, #0]
 8002f58:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 8002f5a:	687b      	ldr	r3, [r7, #4]
 8002f5c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002f5e:	2208      	movs	r2, #8
 8002f60:	409a      	lsls	r2, r3
 8002f62:	68fb      	ldr	r3, [r7, #12]
 8002f64:	4013      	ands	r3, r2
 8002f66:	2b00      	cmp	r3, #0
 8002f68:	d01a      	beq.n	8002fa0 <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 8002f6a:	687b      	ldr	r3, [r7, #4]
 8002f6c:	681b      	ldr	r3, [r3, #0]
 8002f6e:	681b      	ldr	r3, [r3, #0]
 8002f70:	f003 0304 	and.w	r3, r3, #4
 8002f74:	2b00      	cmp	r3, #0
 8002f76:	d013      	beq.n	8002fa0 <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 8002f78:	687b      	ldr	r3, [r7, #4]
 8002f7a:	681b      	ldr	r3, [r3, #0]
 8002f7c:	681a      	ldr	r2, [r3, #0]
 8002f7e:	687b      	ldr	r3, [r7, #4]
 8002f80:	681b      	ldr	r3, [r3, #0]
 8002f82:	f022 0204 	bic.w	r2, r2, #4
 8002f86:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 8002f88:	687b      	ldr	r3, [r7, #4]
 8002f8a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002f8c:	2208      	movs	r2, #8
 8002f8e:	409a      	lsls	r2, r3
 8002f90:	693b      	ldr	r3, [r7, #16]
 8002f92:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8002f94:	687b      	ldr	r3, [r7, #4]
 8002f96:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002f98:	f043 0201 	orr.w	r2, r3, #1
 8002f9c:	687b      	ldr	r3, [r7, #4]
 8002f9e:	655a      	str	r2, [r3, #84]	@ 0x54
=======
 8003048:	b580      	push	{r7, lr}
 800304a:	b086      	sub	sp, #24
 800304c:	af00      	add	r7, sp, #0
 800304e:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 8003050:	2300      	movs	r3, #0
 8003052:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 8003054:	4b8e      	ldr	r3, [pc, #568]	@ (8003290 <HAL_DMA_IRQHandler+0x248>)
 8003056:	681b      	ldr	r3, [r3, #0]
 8003058:	4a8e      	ldr	r2, [pc, #568]	@ (8003294 <HAL_DMA_IRQHandler+0x24c>)
 800305a:	fba2 2303 	umull	r2, r3, r2, r3
 800305e:	0a9b      	lsrs	r3, r3, #10
 8003060:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8003062:	687b      	ldr	r3, [r7, #4]
 8003064:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003066:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 8003068:	693b      	ldr	r3, [r7, #16]
 800306a:	681b      	ldr	r3, [r3, #0]
 800306c:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 800306e:	687b      	ldr	r3, [r7, #4]
 8003070:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003072:	2208      	movs	r2, #8
 8003074:	409a      	lsls	r2, r3
 8003076:	68fb      	ldr	r3, [r7, #12]
 8003078:	4013      	ands	r3, r2
 800307a:	2b00      	cmp	r3, #0
 800307c:	d01a      	beq.n	80030b4 <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 800307e:	687b      	ldr	r3, [r7, #4]
 8003080:	681b      	ldr	r3, [r3, #0]
 8003082:	681b      	ldr	r3, [r3, #0]
 8003084:	f003 0304 	and.w	r3, r3, #4
 8003088:	2b00      	cmp	r3, #0
 800308a:	d013      	beq.n	80030b4 <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 800308c:	687b      	ldr	r3, [r7, #4]
 800308e:	681b      	ldr	r3, [r3, #0]
 8003090:	681a      	ldr	r2, [r3, #0]
 8003092:	687b      	ldr	r3, [r7, #4]
 8003094:	681b      	ldr	r3, [r3, #0]
 8003096:	f022 0204 	bic.w	r2, r2, #4
 800309a:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 800309c:	687b      	ldr	r3, [r7, #4]
 800309e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80030a0:	2208      	movs	r2, #8
 80030a2:	409a      	lsls	r2, r3
 80030a4:	693b      	ldr	r3, [r7, #16]
 80030a6:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 80030a8:	687b      	ldr	r3, [r7, #4]
 80030aa:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80030ac:	f043 0201 	orr.w	r2, r3, #1
 80030b0:	687b      	ldr	r3, [r7, #4]
 80030b2:	655a      	str	r2, [r3, #84]	@ 0x54
>>>>>>> 39e4d10438a821cc799a472af87a77c6796a1676
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
<<<<<<< HEAD
 8002fa0:	687b      	ldr	r3, [r7, #4]
 8002fa2:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002fa4:	2201      	movs	r2, #1
 8002fa6:	409a      	lsls	r2, r3
 8002fa8:	68fb      	ldr	r3, [r7, #12]
 8002faa:	4013      	ands	r3, r2
 8002fac:	2b00      	cmp	r3, #0
 8002fae:	d012      	beq.n	8002fd6 <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 8002fb0:	687b      	ldr	r3, [r7, #4]
 8002fb2:	681b      	ldr	r3, [r3, #0]
 8002fb4:	695b      	ldr	r3, [r3, #20]
 8002fb6:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002fba:	2b00      	cmp	r3, #0
 8002fbc:	d00b      	beq.n	8002fd6 <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 8002fbe:	687b      	ldr	r3, [r7, #4]
 8002fc0:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002fc2:	2201      	movs	r2, #1
 8002fc4:	409a      	lsls	r2, r3
 8002fc6:	693b      	ldr	r3, [r7, #16]
 8002fc8:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 8002fca:	687b      	ldr	r3, [r7, #4]
 8002fcc:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002fce:	f043 0202 	orr.w	r2, r3, #2
 8002fd2:	687b      	ldr	r3, [r7, #4]
 8002fd4:	655a      	str	r2, [r3, #84]	@ 0x54
=======
 80030b4:	687b      	ldr	r3, [r7, #4]
 80030b6:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80030b8:	2201      	movs	r2, #1
 80030ba:	409a      	lsls	r2, r3
 80030bc:	68fb      	ldr	r3, [r7, #12]
 80030be:	4013      	ands	r3, r2
 80030c0:	2b00      	cmp	r3, #0
 80030c2:	d012      	beq.n	80030ea <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 80030c4:	687b      	ldr	r3, [r7, #4]
 80030c6:	681b      	ldr	r3, [r3, #0]
 80030c8:	695b      	ldr	r3, [r3, #20]
 80030ca:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80030ce:	2b00      	cmp	r3, #0
 80030d0:	d00b      	beq.n	80030ea <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 80030d2:	687b      	ldr	r3, [r7, #4]
 80030d4:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80030d6:	2201      	movs	r2, #1
 80030d8:	409a      	lsls	r2, r3
 80030da:	693b      	ldr	r3, [r7, #16]
 80030dc:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 80030de:	687b      	ldr	r3, [r7, #4]
 80030e0:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80030e2:	f043 0202 	orr.w	r2, r3, #2
 80030e6:	687b      	ldr	r3, [r7, #4]
 80030e8:	655a      	str	r2, [r3, #84]	@ 0x54
>>>>>>> 39e4d10438a821cc799a472af87a77c6796a1676
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
<<<<<<< HEAD
 8002fd6:	687b      	ldr	r3, [r7, #4]
 8002fd8:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002fda:	2204      	movs	r2, #4
 8002fdc:	409a      	lsls	r2, r3
 8002fde:	68fb      	ldr	r3, [r7, #12]
 8002fe0:	4013      	ands	r3, r2
 8002fe2:	2b00      	cmp	r3, #0
 8002fe4:	d012      	beq.n	800300c <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 8002fe6:	687b      	ldr	r3, [r7, #4]
 8002fe8:	681b      	ldr	r3, [r3, #0]
 8002fea:	681b      	ldr	r3, [r3, #0]
 8002fec:	f003 0302 	and.w	r3, r3, #2
 8002ff0:	2b00      	cmp	r3, #0
 8002ff2:	d00b      	beq.n	800300c <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 8002ff4:	687b      	ldr	r3, [r7, #4]
 8002ff6:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002ff8:	2204      	movs	r2, #4
 8002ffa:	409a      	lsls	r2, r3
 8002ffc:	693b      	ldr	r3, [r7, #16]
 8002ffe:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8003000:	687b      	ldr	r3, [r7, #4]
 8003002:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003004:	f043 0204 	orr.w	r2, r3, #4
 8003008:	687b      	ldr	r3, [r7, #4]
 800300a:	655a      	str	r2, [r3, #84]	@ 0x54
=======
 80030ea:	687b      	ldr	r3, [r7, #4]
 80030ec:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80030ee:	2204      	movs	r2, #4
 80030f0:	409a      	lsls	r2, r3
 80030f2:	68fb      	ldr	r3, [r7, #12]
 80030f4:	4013      	ands	r3, r2
 80030f6:	2b00      	cmp	r3, #0
 80030f8:	d012      	beq.n	8003120 <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 80030fa:	687b      	ldr	r3, [r7, #4]
 80030fc:	681b      	ldr	r3, [r3, #0]
 80030fe:	681b      	ldr	r3, [r3, #0]
 8003100:	f003 0302 	and.w	r3, r3, #2
 8003104:	2b00      	cmp	r3, #0
 8003106:	d00b      	beq.n	8003120 <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 8003108:	687b      	ldr	r3, [r7, #4]
 800310a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800310c:	2204      	movs	r2, #4
 800310e:	409a      	lsls	r2, r3
 8003110:	693b      	ldr	r3, [r7, #16]
 8003112:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8003114:	687b      	ldr	r3, [r7, #4]
 8003116:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003118:	f043 0204 	orr.w	r2, r3, #4
 800311c:	687b      	ldr	r3, [r7, #4]
 800311e:	655a      	str	r2, [r3, #84]	@ 0x54
>>>>>>> 39e4d10438a821cc799a472af87a77c6796a1676
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
<<<<<<< HEAD
 800300c:	687b      	ldr	r3, [r7, #4]
 800300e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003010:	2210      	movs	r2, #16
 8003012:	409a      	lsls	r2, r3
 8003014:	68fb      	ldr	r3, [r7, #12]
 8003016:	4013      	ands	r3, r2
 8003018:	2b00      	cmp	r3, #0
 800301a:	d043      	beq.n	80030a4 <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 800301c:	687b      	ldr	r3, [r7, #4]
 800301e:	681b      	ldr	r3, [r3, #0]
 8003020:	681b      	ldr	r3, [r3, #0]
 8003022:	f003 0308 	and.w	r3, r3, #8
 8003026:	2b00      	cmp	r3, #0
 8003028:	d03c      	beq.n	80030a4 <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 800302a:	687b      	ldr	r3, [r7, #4]
 800302c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800302e:	2210      	movs	r2, #16
 8003030:	409a      	lsls	r2, r3
 8003032:	693b      	ldr	r3, [r7, #16]
 8003034:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8003036:	687b      	ldr	r3, [r7, #4]
 8003038:	681b      	ldr	r3, [r3, #0]
 800303a:	681b      	ldr	r3, [r3, #0]
 800303c:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8003040:	2b00      	cmp	r3, #0
 8003042:	d018      	beq.n	8003076 <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8003044:	687b      	ldr	r3, [r7, #4]
 8003046:	681b      	ldr	r3, [r3, #0]
 8003048:	681b      	ldr	r3, [r3, #0]
 800304a:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 800304e:	2b00      	cmp	r3, #0
 8003050:	d108      	bne.n	8003064 <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 8003052:	687b      	ldr	r3, [r7, #4]
 8003054:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003056:	2b00      	cmp	r3, #0
 8003058:	d024      	beq.n	80030a4 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 800305a:	687b      	ldr	r3, [r7, #4]
 800305c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800305e:	6878      	ldr	r0, [r7, #4]
 8003060:	4798      	blx	r3
 8003062:	e01f      	b.n	80030a4 <HAL_DMA_IRQHandler+0x170>
=======
 8003120:	687b      	ldr	r3, [r7, #4]
 8003122:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003124:	2210      	movs	r2, #16
 8003126:	409a      	lsls	r2, r3
 8003128:	68fb      	ldr	r3, [r7, #12]
 800312a:	4013      	ands	r3, r2
 800312c:	2b00      	cmp	r3, #0
 800312e:	d043      	beq.n	80031b8 <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 8003130:	687b      	ldr	r3, [r7, #4]
 8003132:	681b      	ldr	r3, [r3, #0]
 8003134:	681b      	ldr	r3, [r3, #0]
 8003136:	f003 0308 	and.w	r3, r3, #8
 800313a:	2b00      	cmp	r3, #0
 800313c:	d03c      	beq.n	80031b8 <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 800313e:	687b      	ldr	r3, [r7, #4]
 8003140:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003142:	2210      	movs	r2, #16
 8003144:	409a      	lsls	r2, r3
 8003146:	693b      	ldr	r3, [r7, #16]
 8003148:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 800314a:	687b      	ldr	r3, [r7, #4]
 800314c:	681b      	ldr	r3, [r3, #0]
 800314e:	681b      	ldr	r3, [r3, #0]
 8003150:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8003154:	2b00      	cmp	r3, #0
 8003156:	d018      	beq.n	800318a <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8003158:	687b      	ldr	r3, [r7, #4]
 800315a:	681b      	ldr	r3, [r3, #0]
 800315c:	681b      	ldr	r3, [r3, #0]
 800315e:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8003162:	2b00      	cmp	r3, #0
 8003164:	d108      	bne.n	8003178 <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 8003166:	687b      	ldr	r3, [r7, #4]
 8003168:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800316a:	2b00      	cmp	r3, #0
 800316c:	d024      	beq.n	80031b8 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 800316e:	687b      	ldr	r3, [r7, #4]
 8003170:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003172:	6878      	ldr	r0, [r7, #4]
 8003174:	4798      	blx	r3
 8003176:	e01f      	b.n	80031b8 <HAL_DMA_IRQHandler+0x170>
>>>>>>> 39e4d10438a821cc799a472af87a77c6796a1676
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
<<<<<<< HEAD
 8003064:	687b      	ldr	r3, [r7, #4]
 8003066:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8003068:	2b00      	cmp	r3, #0
 800306a:	d01b      	beq.n	80030a4 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 800306c:	687b      	ldr	r3, [r7, #4]
 800306e:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8003070:	6878      	ldr	r0, [r7, #4]
 8003072:	4798      	blx	r3
 8003074:	e016      	b.n	80030a4 <HAL_DMA_IRQHandler+0x170>
=======
 8003178:	687b      	ldr	r3, [r7, #4]
 800317a:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800317c:	2b00      	cmp	r3, #0
 800317e:	d01b      	beq.n	80031b8 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 8003180:	687b      	ldr	r3, [r7, #4]
 8003182:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8003184:	6878      	ldr	r0, [r7, #4]
 8003186:	4798      	blx	r3
 8003188:	e016      	b.n	80031b8 <HAL_DMA_IRQHandler+0x170>
>>>>>>> 39e4d10438a821cc799a472af87a77c6796a1676
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
<<<<<<< HEAD
 8003076:	687b      	ldr	r3, [r7, #4]
 8003078:	681b      	ldr	r3, [r3, #0]
 800307a:	681b      	ldr	r3, [r3, #0]
 800307c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003080:	2b00      	cmp	r3, #0
 8003082:	d107      	bne.n	8003094 <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8003084:	687b      	ldr	r3, [r7, #4]
 8003086:	681b      	ldr	r3, [r3, #0]
 8003088:	681a      	ldr	r2, [r3, #0]
 800308a:	687b      	ldr	r3, [r7, #4]
 800308c:	681b      	ldr	r3, [r3, #0]
 800308e:	f022 0208 	bic.w	r2, r2, #8
 8003092:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 8003094:	687b      	ldr	r3, [r7, #4]
 8003096:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003098:	2b00      	cmp	r3, #0
 800309a:	d003      	beq.n	80030a4 <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 800309c:	687b      	ldr	r3, [r7, #4]
 800309e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80030a0:	6878      	ldr	r0, [r7, #4]
 80030a2:	4798      	blx	r3
=======
 800318a:	687b      	ldr	r3, [r7, #4]
 800318c:	681b      	ldr	r3, [r3, #0]
 800318e:	681b      	ldr	r3, [r3, #0]
 8003190:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003194:	2b00      	cmp	r3, #0
 8003196:	d107      	bne.n	80031a8 <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8003198:	687b      	ldr	r3, [r7, #4]
 800319a:	681b      	ldr	r3, [r3, #0]
 800319c:	681a      	ldr	r2, [r3, #0]
 800319e:	687b      	ldr	r3, [r7, #4]
 80031a0:	681b      	ldr	r3, [r3, #0]
 80031a2:	f022 0208 	bic.w	r2, r2, #8
 80031a6:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 80031a8:	687b      	ldr	r3, [r7, #4]
 80031aa:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80031ac:	2b00      	cmp	r3, #0
 80031ae:	d003      	beq.n	80031b8 <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 80031b0:	687b      	ldr	r3, [r7, #4]
 80031b2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80031b4:	6878      	ldr	r0, [r7, #4]
 80031b6:	4798      	blx	r3
>>>>>>> 39e4d10438a821cc799a472af87a77c6796a1676
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
<<<<<<< HEAD
 80030a4:	687b      	ldr	r3, [r7, #4]
 80030a6:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80030a8:	2220      	movs	r2, #32
 80030aa:	409a      	lsls	r2, r3
 80030ac:	68fb      	ldr	r3, [r7, #12]
 80030ae:	4013      	ands	r3, r2
 80030b0:	2b00      	cmp	r3, #0
 80030b2:	f000 808f 	beq.w	80031d4 <HAL_DMA_IRQHandler+0x2a0>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 80030b6:	687b      	ldr	r3, [r7, #4]
 80030b8:	681b      	ldr	r3, [r3, #0]
 80030ba:	681b      	ldr	r3, [r3, #0]
 80030bc:	f003 0310 	and.w	r3, r3, #16
 80030c0:	2b00      	cmp	r3, #0
 80030c2:	f000 8087 	beq.w	80031d4 <HAL_DMA_IRQHandler+0x2a0>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 80030c6:	687b      	ldr	r3, [r7, #4]
 80030c8:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80030ca:	2220      	movs	r2, #32
 80030cc:	409a      	lsls	r2, r3
 80030ce:	693b      	ldr	r3, [r7, #16]
 80030d0:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 80030d2:	687b      	ldr	r3, [r7, #4]
 80030d4:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 80030d8:	b2db      	uxtb	r3, r3
 80030da:	2b05      	cmp	r3, #5
 80030dc:	d136      	bne.n	800314c <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 80030de:	687b      	ldr	r3, [r7, #4]
 80030e0:	681b      	ldr	r3, [r3, #0]
 80030e2:	681a      	ldr	r2, [r3, #0]
 80030e4:	687b      	ldr	r3, [r7, #4]
 80030e6:	681b      	ldr	r3, [r3, #0]
 80030e8:	f022 0216 	bic.w	r2, r2, #22
 80030ec:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 80030ee:	687b      	ldr	r3, [r7, #4]
 80030f0:	681b      	ldr	r3, [r3, #0]
 80030f2:	695a      	ldr	r2, [r3, #20]
 80030f4:	687b      	ldr	r3, [r7, #4]
 80030f6:	681b      	ldr	r3, [r3, #0]
 80030f8:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 80030fc:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 80030fe:	687b      	ldr	r3, [r7, #4]
 8003100:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003102:	2b00      	cmp	r3, #0
 8003104:	d103      	bne.n	800310e <HAL_DMA_IRQHandler+0x1da>
 8003106:	687b      	ldr	r3, [r7, #4]
 8003108:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800310a:	2b00      	cmp	r3, #0
 800310c:	d007      	beq.n	800311e <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 800310e:	687b      	ldr	r3, [r7, #4]
 8003110:	681b      	ldr	r3, [r3, #0]
 8003112:	681a      	ldr	r2, [r3, #0]
 8003114:	687b      	ldr	r3, [r7, #4]
 8003116:	681b      	ldr	r3, [r3, #0]
 8003118:	f022 0208 	bic.w	r2, r2, #8
 800311c:	601a      	str	r2, [r3, #0]
=======
 80031b8:	687b      	ldr	r3, [r7, #4]
 80031ba:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80031bc:	2220      	movs	r2, #32
 80031be:	409a      	lsls	r2, r3
 80031c0:	68fb      	ldr	r3, [r7, #12]
 80031c2:	4013      	ands	r3, r2
 80031c4:	2b00      	cmp	r3, #0
 80031c6:	f000 808f 	beq.w	80032e8 <HAL_DMA_IRQHandler+0x2a0>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 80031ca:	687b      	ldr	r3, [r7, #4]
 80031cc:	681b      	ldr	r3, [r3, #0]
 80031ce:	681b      	ldr	r3, [r3, #0]
 80031d0:	f003 0310 	and.w	r3, r3, #16
 80031d4:	2b00      	cmp	r3, #0
 80031d6:	f000 8087 	beq.w	80032e8 <HAL_DMA_IRQHandler+0x2a0>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 80031da:	687b      	ldr	r3, [r7, #4]
 80031dc:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80031de:	2220      	movs	r2, #32
 80031e0:	409a      	lsls	r2, r3
 80031e2:	693b      	ldr	r3, [r7, #16]
 80031e4:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 80031e6:	687b      	ldr	r3, [r7, #4]
 80031e8:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 80031ec:	b2db      	uxtb	r3, r3
 80031ee:	2b05      	cmp	r3, #5
 80031f0:	d136      	bne.n	8003260 <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 80031f2:	687b      	ldr	r3, [r7, #4]
 80031f4:	681b      	ldr	r3, [r3, #0]
 80031f6:	681a      	ldr	r2, [r3, #0]
 80031f8:	687b      	ldr	r3, [r7, #4]
 80031fa:	681b      	ldr	r3, [r3, #0]
 80031fc:	f022 0216 	bic.w	r2, r2, #22
 8003200:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 8003202:	687b      	ldr	r3, [r7, #4]
 8003204:	681b      	ldr	r3, [r3, #0]
 8003206:	695a      	ldr	r2, [r3, #20]
 8003208:	687b      	ldr	r3, [r7, #4]
 800320a:	681b      	ldr	r3, [r3, #0]
 800320c:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8003210:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8003212:	687b      	ldr	r3, [r7, #4]
 8003214:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003216:	2b00      	cmp	r3, #0
 8003218:	d103      	bne.n	8003222 <HAL_DMA_IRQHandler+0x1da>
 800321a:	687b      	ldr	r3, [r7, #4]
 800321c:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800321e:	2b00      	cmp	r3, #0
 8003220:	d007      	beq.n	8003232 <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8003222:	687b      	ldr	r3, [r7, #4]
 8003224:	681b      	ldr	r3, [r3, #0]
 8003226:	681a      	ldr	r2, [r3, #0]
 8003228:	687b      	ldr	r3, [r7, #4]
 800322a:	681b      	ldr	r3, [r3, #0]
 800322c:	f022 0208 	bic.w	r2, r2, #8
 8003230:	601a      	str	r2, [r3, #0]
>>>>>>> 39e4d10438a821cc799a472af87a77c6796a1676
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
<<<<<<< HEAD
 800311e:	687b      	ldr	r3, [r7, #4]
 8003120:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003122:	223f      	movs	r2, #63	@ 0x3f
 8003124:	409a      	lsls	r2, r3
 8003126:	693b      	ldr	r3, [r7, #16]
 8003128:	609a      	str	r2, [r3, #8]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 800312a:	687b      	ldr	r3, [r7, #4]
 800312c:	2201      	movs	r2, #1
 800312e:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8003132:	687b      	ldr	r3, [r7, #4]
 8003134:	2200      	movs	r2, #0
 8003136:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

        if(hdma->XferAbortCallback != NULL)
 800313a:	687b      	ldr	r3, [r7, #4]
 800313c:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800313e:	2b00      	cmp	r3, #0
 8003140:	d07e      	beq.n	8003240 <HAL_DMA_IRQHandler+0x30c>
        {
          hdma->XferAbortCallback(hdma);
 8003142:	687b      	ldr	r3, [r7, #4]
 8003144:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8003146:	6878      	ldr	r0, [r7, #4]
 8003148:	4798      	blx	r3
        }
        return;
 800314a:	e079      	b.n	8003240 <HAL_DMA_IRQHandler+0x30c>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 800314c:	687b      	ldr	r3, [r7, #4]
 800314e:	681b      	ldr	r3, [r3, #0]
 8003150:	681b      	ldr	r3, [r3, #0]
 8003152:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8003156:	2b00      	cmp	r3, #0
 8003158:	d01d      	beq.n	8003196 <HAL_DMA_IRQHandler+0x262>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 800315a:	687b      	ldr	r3, [r7, #4]
 800315c:	681b      	ldr	r3, [r3, #0]
 800315e:	681b      	ldr	r3, [r3, #0]
 8003160:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8003164:	2b00      	cmp	r3, #0
 8003166:	d10d      	bne.n	8003184 <HAL_DMA_IRQHandler+0x250>
        {
          if(hdma->XferM1CpltCallback != NULL)
 8003168:	687b      	ldr	r3, [r7, #4]
 800316a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800316c:	2b00      	cmp	r3, #0
 800316e:	d031      	beq.n	80031d4 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 8003170:	687b      	ldr	r3, [r7, #4]
 8003172:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003174:	6878      	ldr	r0, [r7, #4]
 8003176:	4798      	blx	r3
 8003178:	e02c      	b.n	80031d4 <HAL_DMA_IRQHandler+0x2a0>
 800317a:	bf00      	nop
 800317c:	20000000 	.word	0x20000000
 8003180:	1b4e81b5 	.word	0x1b4e81b5
=======
 8003232:	687b      	ldr	r3, [r7, #4]
 8003234:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003236:	223f      	movs	r2, #63	@ 0x3f
 8003238:	409a      	lsls	r2, r3
 800323a:	693b      	ldr	r3, [r7, #16]
 800323c:	609a      	str	r2, [r3, #8]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 800323e:	687b      	ldr	r3, [r7, #4]
 8003240:	2201      	movs	r2, #1
 8003242:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8003246:	687b      	ldr	r3, [r7, #4]
 8003248:	2200      	movs	r2, #0
 800324a:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

        if(hdma->XferAbortCallback != NULL)
 800324e:	687b      	ldr	r3, [r7, #4]
 8003250:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8003252:	2b00      	cmp	r3, #0
 8003254:	d07e      	beq.n	8003354 <HAL_DMA_IRQHandler+0x30c>
        {
          hdma->XferAbortCallback(hdma);
 8003256:	687b      	ldr	r3, [r7, #4]
 8003258:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800325a:	6878      	ldr	r0, [r7, #4]
 800325c:	4798      	blx	r3
        }
        return;
 800325e:	e079      	b.n	8003354 <HAL_DMA_IRQHandler+0x30c>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8003260:	687b      	ldr	r3, [r7, #4]
 8003262:	681b      	ldr	r3, [r3, #0]
 8003264:	681b      	ldr	r3, [r3, #0]
 8003266:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 800326a:	2b00      	cmp	r3, #0
 800326c:	d01d      	beq.n	80032aa <HAL_DMA_IRQHandler+0x262>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 800326e:	687b      	ldr	r3, [r7, #4]
 8003270:	681b      	ldr	r3, [r3, #0]
 8003272:	681b      	ldr	r3, [r3, #0]
 8003274:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8003278:	2b00      	cmp	r3, #0
 800327a:	d10d      	bne.n	8003298 <HAL_DMA_IRQHandler+0x250>
        {
          if(hdma->XferM1CpltCallback != NULL)
 800327c:	687b      	ldr	r3, [r7, #4]
 800327e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003280:	2b00      	cmp	r3, #0
 8003282:	d031      	beq.n	80032e8 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 8003284:	687b      	ldr	r3, [r7, #4]
 8003286:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003288:	6878      	ldr	r0, [r7, #4]
 800328a:	4798      	blx	r3
 800328c:	e02c      	b.n	80032e8 <HAL_DMA_IRQHandler+0x2a0>
 800328e:	bf00      	nop
 8003290:	20000000 	.word	0x20000000
 8003294:	1b4e81b5 	.word	0x1b4e81b5
>>>>>>> 39e4d10438a821cc799a472af87a77c6796a1676
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
<<<<<<< HEAD
 8003184:	687b      	ldr	r3, [r7, #4]
 8003186:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003188:	2b00      	cmp	r3, #0
 800318a:	d023      	beq.n	80031d4 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 800318c:	687b      	ldr	r3, [r7, #4]
 800318e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003190:	6878      	ldr	r0, [r7, #4]
 8003192:	4798      	blx	r3
 8003194:	e01e      	b.n	80031d4 <HAL_DMA_IRQHandler+0x2a0>
=======
 8003298:	687b      	ldr	r3, [r7, #4]
 800329a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800329c:	2b00      	cmp	r3, #0
 800329e:	d023      	beq.n	80032e8 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 80032a0:	687b      	ldr	r3, [r7, #4]
 80032a2:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80032a4:	6878      	ldr	r0, [r7, #4]
 80032a6:	4798      	blx	r3
 80032a8:	e01e      	b.n	80032e8 <HAL_DMA_IRQHandler+0x2a0>
>>>>>>> 39e4d10438a821cc799a472af87a77c6796a1676
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
<<<<<<< HEAD
 8003196:	687b      	ldr	r3, [r7, #4]
 8003198:	681b      	ldr	r3, [r3, #0]
 800319a:	681b      	ldr	r3, [r3, #0]
 800319c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80031a0:	2b00      	cmp	r3, #0
 80031a2:	d10f      	bne.n	80031c4 <HAL_DMA_IRQHandler+0x290>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 80031a4:	687b      	ldr	r3, [r7, #4]
 80031a6:	681b      	ldr	r3, [r3, #0]
 80031a8:	681a      	ldr	r2, [r3, #0]
 80031aa:	687b      	ldr	r3, [r7, #4]
 80031ac:	681b      	ldr	r3, [r3, #0]
 80031ae:	f022 0210 	bic.w	r2, r2, #16
 80031b2:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 80031b4:	687b      	ldr	r3, [r7, #4]
 80031b6:	2201      	movs	r2, #1
 80031b8:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 80031bc:	687b      	ldr	r3, [r7, #4]
 80031be:	2200      	movs	r2, #0
 80031c0:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 80031c4:	687b      	ldr	r3, [r7, #4]
 80031c6:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80031c8:	2b00      	cmp	r3, #0
 80031ca:	d003      	beq.n	80031d4 <HAL_DMA_IRQHandler+0x2a0>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 80031cc:	687b      	ldr	r3, [r7, #4]
 80031ce:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80031d0:	6878      	ldr	r0, [r7, #4]
 80031d2:	4798      	blx	r3
=======
 80032aa:	687b      	ldr	r3, [r7, #4]
 80032ac:	681b      	ldr	r3, [r3, #0]
 80032ae:	681b      	ldr	r3, [r3, #0]
 80032b0:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80032b4:	2b00      	cmp	r3, #0
 80032b6:	d10f      	bne.n	80032d8 <HAL_DMA_IRQHandler+0x290>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 80032b8:	687b      	ldr	r3, [r7, #4]
 80032ba:	681b      	ldr	r3, [r3, #0]
 80032bc:	681a      	ldr	r2, [r3, #0]
 80032be:	687b      	ldr	r3, [r7, #4]
 80032c0:	681b      	ldr	r3, [r3, #0]
 80032c2:	f022 0210 	bic.w	r2, r2, #16
 80032c6:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 80032c8:	687b      	ldr	r3, [r7, #4]
 80032ca:	2201      	movs	r2, #1
 80032cc:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 80032d0:	687b      	ldr	r3, [r7, #4]
 80032d2:	2200      	movs	r2, #0
 80032d4:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 80032d8:	687b      	ldr	r3, [r7, #4]
 80032da:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80032dc:	2b00      	cmp	r3, #0
 80032de:	d003      	beq.n	80032e8 <HAL_DMA_IRQHandler+0x2a0>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 80032e0:	687b      	ldr	r3, [r7, #4]
 80032e2:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80032e4:	6878      	ldr	r0, [r7, #4]
 80032e6:	4798      	blx	r3
>>>>>>> 39e4d10438a821cc799a472af87a77c6796a1676
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
<<<<<<< HEAD
 80031d4:	687b      	ldr	r3, [r7, #4]
 80031d6:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80031d8:	2b00      	cmp	r3, #0
 80031da:	d032      	beq.n	8003242 <HAL_DMA_IRQHandler+0x30e>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 80031dc:	687b      	ldr	r3, [r7, #4]
 80031de:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80031e0:	f003 0301 	and.w	r3, r3, #1
 80031e4:	2b00      	cmp	r3, #0
 80031e6:	d022      	beq.n	800322e <HAL_DMA_IRQHandler+0x2fa>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 80031e8:	687b      	ldr	r3, [r7, #4]
 80031ea:	2205      	movs	r2, #5
 80031ec:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 80031f0:	687b      	ldr	r3, [r7, #4]
 80031f2:	681b      	ldr	r3, [r3, #0]
 80031f4:	681a      	ldr	r2, [r3, #0]
 80031f6:	687b      	ldr	r3, [r7, #4]
 80031f8:	681b      	ldr	r3, [r3, #0]
 80031fa:	f022 0201 	bic.w	r2, r2, #1
 80031fe:	601a      	str	r2, [r3, #0]
=======
 80032e8:	687b      	ldr	r3, [r7, #4]
 80032ea:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80032ec:	2b00      	cmp	r3, #0
 80032ee:	d032      	beq.n	8003356 <HAL_DMA_IRQHandler+0x30e>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 80032f0:	687b      	ldr	r3, [r7, #4]
 80032f2:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80032f4:	f003 0301 	and.w	r3, r3, #1
 80032f8:	2b00      	cmp	r3, #0
 80032fa:	d022      	beq.n	8003342 <HAL_DMA_IRQHandler+0x2fa>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 80032fc:	687b      	ldr	r3, [r7, #4]
 80032fe:	2205      	movs	r2, #5
 8003300:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 8003304:	687b      	ldr	r3, [r7, #4]
 8003306:	681b      	ldr	r3, [r3, #0]
 8003308:	681a      	ldr	r2, [r3, #0]
 800330a:	687b      	ldr	r3, [r7, #4]
 800330c:	681b      	ldr	r3, [r3, #0]
 800330e:	f022 0201 	bic.w	r2, r2, #1
 8003312:	601a      	str	r2, [r3, #0]
>>>>>>> 39e4d10438a821cc799a472af87a77c6796a1676

      do
      {
        if (++count > timeout)
<<<<<<< HEAD
 8003200:	68bb      	ldr	r3, [r7, #8]
 8003202:	3301      	adds	r3, #1
 8003204:	60bb      	str	r3, [r7, #8]
 8003206:	697a      	ldr	r2, [r7, #20]
 8003208:	429a      	cmp	r2, r3
 800320a:	d307      	bcc.n	800321c <HAL_DMA_IRQHandler+0x2e8>
=======
 8003314:	68bb      	ldr	r3, [r7, #8]
 8003316:	3301      	adds	r3, #1
 8003318:	60bb      	str	r3, [r7, #8]
 800331a:	697a      	ldr	r2, [r7, #20]
 800331c:	429a      	cmp	r2, r3
 800331e:	d307      	bcc.n	8003330 <HAL_DMA_IRQHandler+0x2e8>
>>>>>>> 39e4d10438a821cc799a472af87a77c6796a1676
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
<<<<<<< HEAD
 800320c:	687b      	ldr	r3, [r7, #4]
 800320e:	681b      	ldr	r3, [r3, #0]
 8003210:	681b      	ldr	r3, [r3, #0]
 8003212:	f003 0301 	and.w	r3, r3, #1
 8003216:	2b00      	cmp	r3, #0
 8003218:	d1f2      	bne.n	8003200 <HAL_DMA_IRQHandler+0x2cc>
 800321a:	e000      	b.n	800321e <HAL_DMA_IRQHandler+0x2ea>
          break;
 800321c:	bf00      	nop

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 800321e:	687b      	ldr	r3, [r7, #4]
 8003220:	2201      	movs	r2, #1
 8003222:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8003226:	687b      	ldr	r3, [r7, #4]
 8003228:	2200      	movs	r2, #0
 800322a:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    }

    if(hdma->XferErrorCallback != NULL)
 800322e:	687b      	ldr	r3, [r7, #4]
 8003230:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003232:	2b00      	cmp	r3, #0
 8003234:	d005      	beq.n	8003242 <HAL_DMA_IRQHandler+0x30e>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8003236:	687b      	ldr	r3, [r7, #4]
 8003238:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800323a:	6878      	ldr	r0, [r7, #4]
 800323c:	4798      	blx	r3
 800323e:	e000      	b.n	8003242 <HAL_DMA_IRQHandler+0x30e>
        return;
 8003240:	bf00      	nop
    }
  }
}
 8003242:	3718      	adds	r7, #24
 8003244:	46bd      	mov	sp, r7
 8003246:	bd80      	pop	{r7, pc}

08003248 <DMA_SetConfig>:
=======
 8003320:	687b      	ldr	r3, [r7, #4]
 8003322:	681b      	ldr	r3, [r3, #0]
 8003324:	681b      	ldr	r3, [r3, #0]
 8003326:	f003 0301 	and.w	r3, r3, #1
 800332a:	2b00      	cmp	r3, #0
 800332c:	d1f2      	bne.n	8003314 <HAL_DMA_IRQHandler+0x2cc>
 800332e:	e000      	b.n	8003332 <HAL_DMA_IRQHandler+0x2ea>
          break;
 8003330:	bf00      	nop

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8003332:	687b      	ldr	r3, [r7, #4]
 8003334:	2201      	movs	r2, #1
 8003336:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 800333a:	687b      	ldr	r3, [r7, #4]
 800333c:	2200      	movs	r2, #0
 800333e:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    }

    if(hdma->XferErrorCallback != NULL)
 8003342:	687b      	ldr	r3, [r7, #4]
 8003344:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003346:	2b00      	cmp	r3, #0
 8003348:	d005      	beq.n	8003356 <HAL_DMA_IRQHandler+0x30e>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 800334a:	687b      	ldr	r3, [r7, #4]
 800334c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800334e:	6878      	ldr	r0, [r7, #4]
 8003350:	4798      	blx	r3
 8003352:	e000      	b.n	8003356 <HAL_DMA_IRQHandler+0x30e>
        return;
 8003354:	bf00      	nop
    }
  }
}
 8003356:	3718      	adds	r7, #24
 8003358:	46bd      	mov	sp, r7
 800335a:	bd80      	pop	{r7, pc}

0800335c <DMA_SetConfig>:
>>>>>>> 39e4d10438a821cc799a472af87a77c6796a1676
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
<<<<<<< HEAD
 8003248:	b480      	push	{r7}
 800324a:	b085      	sub	sp, #20
 800324c:	af00      	add	r7, sp, #0
 800324e:	60f8      	str	r0, [r7, #12]
 8003250:	60b9      	str	r1, [r7, #8]
 8003252:	607a      	str	r2, [r7, #4]
 8003254:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 8003256:	68fb      	ldr	r3, [r7, #12]
 8003258:	681b      	ldr	r3, [r3, #0]
 800325a:	681a      	ldr	r2, [r3, #0]
 800325c:	68fb      	ldr	r3, [r7, #12]
 800325e:	681b      	ldr	r3, [r3, #0]
 8003260:	f422 2280 	bic.w	r2, r2, #262144	@ 0x40000
 8003264:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 8003266:	68fb      	ldr	r3, [r7, #12]
 8003268:	681b      	ldr	r3, [r3, #0]
 800326a:	683a      	ldr	r2, [r7, #0]
 800326c:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 800326e:	68fb      	ldr	r3, [r7, #12]
 8003270:	689b      	ldr	r3, [r3, #8]
 8003272:	2b40      	cmp	r3, #64	@ 0x40
 8003274:	d108      	bne.n	8003288 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 8003276:	68fb      	ldr	r3, [r7, #12]
 8003278:	681b      	ldr	r3, [r3, #0]
 800327a:	687a      	ldr	r2, [r7, #4]
 800327c:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 800327e:	68fb      	ldr	r3, [r7, #12]
 8003280:	681b      	ldr	r3, [r3, #0]
 8003282:	68ba      	ldr	r2, [r7, #8]
 8003284:	60da      	str	r2, [r3, #12]
=======
 800335c:	b480      	push	{r7}
 800335e:	b085      	sub	sp, #20
 8003360:	af00      	add	r7, sp, #0
 8003362:	60f8      	str	r0, [r7, #12]
 8003364:	60b9      	str	r1, [r7, #8]
 8003366:	607a      	str	r2, [r7, #4]
 8003368:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 800336a:	68fb      	ldr	r3, [r7, #12]
 800336c:	681b      	ldr	r3, [r3, #0]
 800336e:	681a      	ldr	r2, [r3, #0]
 8003370:	68fb      	ldr	r3, [r7, #12]
 8003372:	681b      	ldr	r3, [r3, #0]
 8003374:	f422 2280 	bic.w	r2, r2, #262144	@ 0x40000
 8003378:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 800337a:	68fb      	ldr	r3, [r7, #12]
 800337c:	681b      	ldr	r3, [r3, #0]
 800337e:	683a      	ldr	r2, [r7, #0]
 8003380:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8003382:	68fb      	ldr	r3, [r7, #12]
 8003384:	689b      	ldr	r3, [r3, #8]
 8003386:	2b40      	cmp	r3, #64	@ 0x40
 8003388:	d108      	bne.n	800339c <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 800338a:	68fb      	ldr	r3, [r7, #12]
 800338c:	681b      	ldr	r3, [r3, #0]
 800338e:	687a      	ldr	r2, [r7, #4]
 8003390:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 8003392:	68fb      	ldr	r3, [r7, #12]
 8003394:	681b      	ldr	r3, [r3, #0]
 8003396:	68ba      	ldr	r2, [r7, #8]
 8003398:	60da      	str	r2, [r3, #12]
>>>>>>> 39e4d10438a821cc799a472af87a77c6796a1676
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
<<<<<<< HEAD
 8003286:	e007      	b.n	8003298 <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 8003288:	68fb      	ldr	r3, [r7, #12]
 800328a:	681b      	ldr	r3, [r3, #0]
 800328c:	68ba      	ldr	r2, [r7, #8]
 800328e:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 8003290:	68fb      	ldr	r3, [r7, #12]
 8003292:	681b      	ldr	r3, [r3, #0]
 8003294:	687a      	ldr	r2, [r7, #4]
 8003296:	60da      	str	r2, [r3, #12]
}
 8003298:	bf00      	nop
 800329a:	3714      	adds	r7, #20
 800329c:	46bd      	mov	sp, r7
 800329e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032a2:	4770      	bx	lr

080032a4 <DMA_CalcBaseAndBitshift>:
=======
 800339a:	e007      	b.n	80033ac <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 800339c:	68fb      	ldr	r3, [r7, #12]
 800339e:	681b      	ldr	r3, [r3, #0]
 80033a0:	68ba      	ldr	r2, [r7, #8]
 80033a2:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 80033a4:	68fb      	ldr	r3, [r7, #12]
 80033a6:	681b      	ldr	r3, [r3, #0]
 80033a8:	687a      	ldr	r2, [r7, #4]
 80033aa:	60da      	str	r2, [r3, #12]
}
 80033ac:	bf00      	nop
 80033ae:	3714      	adds	r7, #20
 80033b0:	46bd      	mov	sp, r7
 80033b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033b6:	4770      	bx	lr

080033b8 <DMA_CalcBaseAndBitshift>:
>>>>>>> 39e4d10438a821cc799a472af87a77c6796a1676
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
<<<<<<< HEAD
 80032a4:	b480      	push	{r7}
 80032a6:	b085      	sub	sp, #20
 80032a8:	af00      	add	r7, sp, #0
 80032aa:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 80032ac:	687b      	ldr	r3, [r7, #4]
 80032ae:	681b      	ldr	r3, [r3, #0]
 80032b0:	b2db      	uxtb	r3, r3
 80032b2:	3b10      	subs	r3, #16
 80032b4:	4a14      	ldr	r2, [pc, #80]	@ (8003308 <DMA_CalcBaseAndBitshift+0x64>)
 80032b6:	fba2 2303 	umull	r2, r3, r2, r3
 80032ba:	091b      	lsrs	r3, r3, #4
 80032bc:	60fb      	str	r3, [r7, #12]
=======
 80033b8:	b480      	push	{r7}
 80033ba:	b085      	sub	sp, #20
 80033bc:	af00      	add	r7, sp, #0
 80033be:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 80033c0:	687b      	ldr	r3, [r7, #4]
 80033c2:	681b      	ldr	r3, [r3, #0]
 80033c4:	b2db      	uxtb	r3, r3
 80033c6:	3b10      	subs	r3, #16
 80033c8:	4a14      	ldr	r2, [pc, #80]	@ (800341c <DMA_CalcBaseAndBitshift+0x64>)
 80033ca:	fba2 2303 	umull	r2, r3, r2, r3
 80033ce:	091b      	lsrs	r3, r3, #4
 80033d0:	60fb      	str	r3, [r7, #12]
>>>>>>> 39e4d10438a821cc799a472af87a77c6796a1676
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
<<<<<<< HEAD
 80032be:	4a13      	ldr	r2, [pc, #76]	@ (800330c <DMA_CalcBaseAndBitshift+0x68>)
 80032c0:	68fb      	ldr	r3, [r7, #12]
 80032c2:	4413      	add	r3, r2
 80032c4:	781b      	ldrb	r3, [r3, #0]
 80032c6:	461a      	mov	r2, r3
 80032c8:	687b      	ldr	r3, [r7, #4]
 80032ca:	65da      	str	r2, [r3, #92]	@ 0x5c
  
  if (stream_number > 3U)
 80032cc:	68fb      	ldr	r3, [r7, #12]
 80032ce:	2b03      	cmp	r3, #3
 80032d0:	d909      	bls.n	80032e6 <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 80032d2:	687b      	ldr	r3, [r7, #4]
 80032d4:	681b      	ldr	r3, [r3, #0]
 80032d6:	f423 737f 	bic.w	r3, r3, #1020	@ 0x3fc
 80032da:	f023 0303 	bic.w	r3, r3, #3
 80032de:	1d1a      	adds	r2, r3, #4
 80032e0:	687b      	ldr	r3, [r7, #4]
 80032e2:	659a      	str	r2, [r3, #88]	@ 0x58
 80032e4:	e007      	b.n	80032f6 <DMA_CalcBaseAndBitshift+0x52>
=======
 80033d2:	4a13      	ldr	r2, [pc, #76]	@ (8003420 <DMA_CalcBaseAndBitshift+0x68>)
 80033d4:	68fb      	ldr	r3, [r7, #12]
 80033d6:	4413      	add	r3, r2
 80033d8:	781b      	ldrb	r3, [r3, #0]
 80033da:	461a      	mov	r2, r3
 80033dc:	687b      	ldr	r3, [r7, #4]
 80033de:	65da      	str	r2, [r3, #92]	@ 0x5c
  
  if (stream_number > 3U)
 80033e0:	68fb      	ldr	r3, [r7, #12]
 80033e2:	2b03      	cmp	r3, #3
 80033e4:	d909      	bls.n	80033fa <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 80033e6:	687b      	ldr	r3, [r7, #4]
 80033e8:	681b      	ldr	r3, [r3, #0]
 80033ea:	f423 737f 	bic.w	r3, r3, #1020	@ 0x3fc
 80033ee:	f023 0303 	bic.w	r3, r3, #3
 80033f2:	1d1a      	adds	r2, r3, #4
 80033f4:	687b      	ldr	r3, [r7, #4]
 80033f6:	659a      	str	r2, [r3, #88]	@ 0x58
 80033f8:	e007      	b.n	800340a <DMA_CalcBaseAndBitshift+0x52>
>>>>>>> 39e4d10438a821cc799a472af87a77c6796a1676
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
<<<<<<< HEAD
 80032e6:	687b      	ldr	r3, [r7, #4]
 80032e8:	681b      	ldr	r3, [r3, #0]
 80032ea:	f423 737f 	bic.w	r3, r3, #1020	@ 0x3fc
 80032ee:	f023 0303 	bic.w	r3, r3, #3
 80032f2:	687a      	ldr	r2, [r7, #4]
 80032f4:	6593      	str	r3, [r2, #88]	@ 0x58
  }
  
  return hdma->StreamBaseAddress;
 80032f6:	687b      	ldr	r3, [r7, #4]
 80032f8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
}
 80032fa:	4618      	mov	r0, r3
 80032fc:	3714      	adds	r7, #20
 80032fe:	46bd      	mov	sp, r7
 8003300:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003304:	4770      	bx	lr
 8003306:	bf00      	nop
 8003308:	aaaaaaab 	.word	0xaaaaaaab
 800330c:	0800a330 	.word	0x0800a330

08003310 <DMA_CheckFifoParam>:
=======
 80033fa:	687b      	ldr	r3, [r7, #4]
 80033fc:	681b      	ldr	r3, [r3, #0]
 80033fe:	f423 737f 	bic.w	r3, r3, #1020	@ 0x3fc
 8003402:	f023 0303 	bic.w	r3, r3, #3
 8003406:	687a      	ldr	r2, [r7, #4]
 8003408:	6593      	str	r3, [r2, #88]	@ 0x58
  }
  
  return hdma->StreamBaseAddress;
 800340a:	687b      	ldr	r3, [r7, #4]
 800340c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
}
 800340e:	4618      	mov	r0, r3
 8003410:	3714      	adds	r7, #20
 8003412:	46bd      	mov	sp, r7
 8003414:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003418:	4770      	bx	lr
 800341a:	bf00      	nop
 800341c:	aaaaaaab 	.word	0xaaaaaaab
 8003420:	0800a43c 	.word	0x0800a43c

08003424 <DMA_CheckFifoParam>:
>>>>>>> 39e4d10438a821cc799a472af87a77c6796a1676
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
<<<<<<< HEAD
 8003310:	b480      	push	{r7}
 8003312:	b085      	sub	sp, #20
 8003314:	af00      	add	r7, sp, #0
 8003316:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8003318:	2300      	movs	r3, #0
 800331a:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 800331c:	687b      	ldr	r3, [r7, #4]
 800331e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003320:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 8003322:	687b      	ldr	r3, [r7, #4]
 8003324:	699b      	ldr	r3, [r3, #24]
 8003326:	2b00      	cmp	r3, #0
 8003328:	d11f      	bne.n	800336a <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 800332a:	68bb      	ldr	r3, [r7, #8]
 800332c:	2b03      	cmp	r3, #3
 800332e:	d856      	bhi.n	80033de <DMA_CheckFifoParam+0xce>
 8003330:	a201      	add	r2, pc, #4	@ (adr r2, 8003338 <DMA_CheckFifoParam+0x28>)
 8003332:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003336:	bf00      	nop
 8003338:	08003349 	.word	0x08003349
 800333c:	0800335b 	.word	0x0800335b
 8003340:	08003349 	.word	0x08003349
 8003344:	080033df 	.word	0x080033df
=======
 8003424:	b480      	push	{r7}
 8003426:	b085      	sub	sp, #20
 8003428:	af00      	add	r7, sp, #0
 800342a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800342c:	2300      	movs	r3, #0
 800342e:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 8003430:	687b      	ldr	r3, [r7, #4]
 8003432:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003434:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 8003436:	687b      	ldr	r3, [r7, #4]
 8003438:	699b      	ldr	r3, [r3, #24]
 800343a:	2b00      	cmp	r3, #0
 800343c:	d11f      	bne.n	800347e <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 800343e:	68bb      	ldr	r3, [r7, #8]
 8003440:	2b03      	cmp	r3, #3
 8003442:	d856      	bhi.n	80034f2 <DMA_CheckFifoParam+0xce>
 8003444:	a201      	add	r2, pc, #4	@ (adr r2, 800344c <DMA_CheckFifoParam+0x28>)
 8003446:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800344a:	bf00      	nop
 800344c:	0800345d 	.word	0x0800345d
 8003450:	0800346f 	.word	0x0800346f
 8003454:	0800345d 	.word	0x0800345d
 8003458:	080034f3 	.word	0x080034f3
>>>>>>> 39e4d10438a821cc799a472af87a77c6796a1676
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
<<<<<<< HEAD
 8003348:	687b      	ldr	r3, [r7, #4]
 800334a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800334c:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8003350:	2b00      	cmp	r3, #0
 8003352:	d046      	beq.n	80033e2 <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 8003354:	2301      	movs	r3, #1
 8003356:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8003358:	e043      	b.n	80033e2 <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 800335a:	687b      	ldr	r3, [r7, #4]
 800335c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800335e:	f1b3 7fc0 	cmp.w	r3, #25165824	@ 0x1800000
 8003362:	d140      	bne.n	80033e6 <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 8003364:	2301      	movs	r3, #1
 8003366:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8003368:	e03d      	b.n	80033e6 <DMA_CheckFifoParam+0xd6>
=======
 800345c:	687b      	ldr	r3, [r7, #4]
 800345e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003460:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8003464:	2b00      	cmp	r3, #0
 8003466:	d046      	beq.n	80034f6 <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 8003468:	2301      	movs	r3, #1
 800346a:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800346c:	e043      	b.n	80034f6 <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 800346e:	687b      	ldr	r3, [r7, #4]
 8003470:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003472:	f1b3 7fc0 	cmp.w	r3, #25165824	@ 0x1800000
 8003476:	d140      	bne.n	80034fa <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 8003478:	2301      	movs	r3, #1
 800347a:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800347c:	e03d      	b.n	80034fa <DMA_CheckFifoParam+0xd6>
>>>>>>> 39e4d10438a821cc799a472af87a77c6796a1676
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
<<<<<<< HEAD
 800336a:	687b      	ldr	r3, [r7, #4]
 800336c:	699b      	ldr	r3, [r3, #24]
 800336e:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8003372:	d121      	bne.n	80033b8 <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 8003374:	68bb      	ldr	r3, [r7, #8]
 8003376:	2b03      	cmp	r3, #3
 8003378:	d837      	bhi.n	80033ea <DMA_CheckFifoParam+0xda>
 800337a:	a201      	add	r2, pc, #4	@ (adr r2, 8003380 <DMA_CheckFifoParam+0x70>)
 800337c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003380:	08003391 	.word	0x08003391
 8003384:	08003397 	.word	0x08003397
 8003388:	08003391 	.word	0x08003391
 800338c:	080033a9 	.word	0x080033a9
=======
 800347e:	687b      	ldr	r3, [r7, #4]
 8003480:	699b      	ldr	r3, [r3, #24]
 8003482:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8003486:	d121      	bne.n	80034cc <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 8003488:	68bb      	ldr	r3, [r7, #8]
 800348a:	2b03      	cmp	r3, #3
 800348c:	d837      	bhi.n	80034fe <DMA_CheckFifoParam+0xda>
 800348e:	a201      	add	r2, pc, #4	@ (adr r2, 8003494 <DMA_CheckFifoParam+0x70>)
 8003490:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003494:	080034a5 	.word	0x080034a5
 8003498:	080034ab 	.word	0x080034ab
 800349c:	080034a5 	.word	0x080034a5
 80034a0:	080034bd 	.word	0x080034bd
>>>>>>> 39e4d10438a821cc799a472af87a77c6796a1676
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
<<<<<<< HEAD
 8003390:	2301      	movs	r3, #1
 8003392:	73fb      	strb	r3, [r7, #15]
      break;
 8003394:	e030      	b.n	80033f8 <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8003396:	687b      	ldr	r3, [r7, #4]
 8003398:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800339a:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 800339e:	2b00      	cmp	r3, #0
 80033a0:	d025      	beq.n	80033ee <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 80033a2:	2301      	movs	r3, #1
 80033a4:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80033a6:	e022      	b.n	80033ee <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 80033a8:	687b      	ldr	r3, [r7, #4]
 80033aa:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80033ac:	f1b3 7fc0 	cmp.w	r3, #25165824	@ 0x1800000
 80033b0:	d11f      	bne.n	80033f2 <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 80033b2:	2301      	movs	r3, #1
 80033b4:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 80033b6:	e01c      	b.n	80033f2 <DMA_CheckFifoParam+0xe2>
=======
 80034a4:	2301      	movs	r3, #1
 80034a6:	73fb      	strb	r3, [r7, #15]
      break;
 80034a8:	e030      	b.n	800350c <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80034aa:	687b      	ldr	r3, [r7, #4]
 80034ac:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80034ae:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 80034b2:	2b00      	cmp	r3, #0
 80034b4:	d025      	beq.n	8003502 <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 80034b6:	2301      	movs	r3, #1
 80034b8:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80034ba:	e022      	b.n	8003502 <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 80034bc:	687b      	ldr	r3, [r7, #4]
 80034be:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80034c0:	f1b3 7fc0 	cmp.w	r3, #25165824	@ 0x1800000
 80034c4:	d11f      	bne.n	8003506 <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 80034c6:	2301      	movs	r3, #1
 80034c8:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 80034ca:	e01c      	b.n	8003506 <DMA_CheckFifoParam+0xe2>
>>>>>>> 39e4d10438a821cc799a472af87a77c6796a1676
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
<<<<<<< HEAD
 80033b8:	68bb      	ldr	r3, [r7, #8]
 80033ba:	2b02      	cmp	r3, #2
 80033bc:	d903      	bls.n	80033c6 <DMA_CheckFifoParam+0xb6>
 80033be:	68bb      	ldr	r3, [r7, #8]
 80033c0:	2b03      	cmp	r3, #3
 80033c2:	d003      	beq.n	80033cc <DMA_CheckFifoParam+0xbc>
=======
 80034cc:	68bb      	ldr	r3, [r7, #8]
 80034ce:	2b02      	cmp	r3, #2
 80034d0:	d903      	bls.n	80034da <DMA_CheckFifoParam+0xb6>
 80034d2:	68bb      	ldr	r3, [r7, #8]
 80034d4:	2b03      	cmp	r3, #3
 80034d6:	d003      	beq.n	80034e0 <DMA_CheckFifoParam+0xbc>
>>>>>>> 39e4d10438a821cc799a472af87a77c6796a1676
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
<<<<<<< HEAD
 80033c4:	e018      	b.n	80033f8 <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 80033c6:	2301      	movs	r3, #1
 80033c8:	73fb      	strb	r3, [r7, #15]
      break;
 80033ca:	e015      	b.n	80033f8 <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80033cc:	687b      	ldr	r3, [r7, #4]
 80033ce:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80033d0:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 80033d4:	2b00      	cmp	r3, #0
 80033d6:	d00e      	beq.n	80033f6 <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 80033d8:	2301      	movs	r3, #1
 80033da:	73fb      	strb	r3, [r7, #15]
      break;
 80033dc:	e00b      	b.n	80033f6 <DMA_CheckFifoParam+0xe6>
      break;
 80033de:	bf00      	nop
 80033e0:	e00a      	b.n	80033f8 <DMA_CheckFifoParam+0xe8>
      break;
 80033e2:	bf00      	nop
 80033e4:	e008      	b.n	80033f8 <DMA_CheckFifoParam+0xe8>
      break;
 80033e6:	bf00      	nop
 80033e8:	e006      	b.n	80033f8 <DMA_CheckFifoParam+0xe8>
      break;
 80033ea:	bf00      	nop
 80033ec:	e004      	b.n	80033f8 <DMA_CheckFifoParam+0xe8>
      break;
 80033ee:	bf00      	nop
 80033f0:	e002      	b.n	80033f8 <DMA_CheckFifoParam+0xe8>
      break;   
 80033f2:	bf00      	nop
 80033f4:	e000      	b.n	80033f8 <DMA_CheckFifoParam+0xe8>
      break;
 80033f6:	bf00      	nop
=======
 80034d8:	e018      	b.n	800350c <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 80034da:	2301      	movs	r3, #1
 80034dc:	73fb      	strb	r3, [r7, #15]
      break;
 80034de:	e015      	b.n	800350c <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80034e0:	687b      	ldr	r3, [r7, #4]
 80034e2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80034e4:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 80034e8:	2b00      	cmp	r3, #0
 80034ea:	d00e      	beq.n	800350a <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 80034ec:	2301      	movs	r3, #1
 80034ee:	73fb      	strb	r3, [r7, #15]
      break;
 80034f0:	e00b      	b.n	800350a <DMA_CheckFifoParam+0xe6>
      break;
 80034f2:	bf00      	nop
 80034f4:	e00a      	b.n	800350c <DMA_CheckFifoParam+0xe8>
      break;
 80034f6:	bf00      	nop
 80034f8:	e008      	b.n	800350c <DMA_CheckFifoParam+0xe8>
      break;
 80034fa:	bf00      	nop
 80034fc:	e006      	b.n	800350c <DMA_CheckFifoParam+0xe8>
      break;
 80034fe:	bf00      	nop
 8003500:	e004      	b.n	800350c <DMA_CheckFifoParam+0xe8>
      break;
 8003502:	bf00      	nop
 8003504:	e002      	b.n	800350c <DMA_CheckFifoParam+0xe8>
      break;   
 8003506:	bf00      	nop
 8003508:	e000      	b.n	800350c <DMA_CheckFifoParam+0xe8>
      break;
 800350a:	bf00      	nop
>>>>>>> 39e4d10438a821cc799a472af87a77c6796a1676
    }
  } 
  
  return status; 
<<<<<<< HEAD
 80033f8:	7bfb      	ldrb	r3, [r7, #15]
}
 80033fa:	4618      	mov	r0, r3
 80033fc:	3714      	adds	r7, #20
 80033fe:	46bd      	mov	sp, r7
 8003400:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003404:	4770      	bx	lr
 8003406:	bf00      	nop

08003408 <HAL_GPIO_Init>:
=======
 800350c:	7bfb      	ldrb	r3, [r7, #15]
}
 800350e:	4618      	mov	r0, r3
 8003510:	3714      	adds	r7, #20
 8003512:	46bd      	mov	sp, r7
 8003514:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003518:	4770      	bx	lr
 800351a:	bf00      	nop

0800351c <HAL_GPIO_Init>:
>>>>>>> 39e4d10438a821cc799a472af87a77c6796a1676
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
<<<<<<< HEAD
 8003408:	b480      	push	{r7}
 800340a:	b089      	sub	sp, #36	@ 0x24
 800340c:	af00      	add	r7, sp, #0
 800340e:	6078      	str	r0, [r7, #4]
 8003410:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8003412:	2300      	movs	r3, #0
 8003414:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8003416:	2300      	movs	r3, #0
 8003418:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 800341a:	2300      	movs	r3, #0
 800341c:	61bb      	str	r3, [r7, #24]
=======
 800351c:	b480      	push	{r7}
 800351e:	b089      	sub	sp, #36	@ 0x24
 8003520:	af00      	add	r7, sp, #0
 8003522:	6078      	str	r0, [r7, #4]
 8003524:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8003526:	2300      	movs	r3, #0
 8003528:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 800352a:	2300      	movs	r3, #0
 800352c:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 800352e:	2300      	movs	r3, #0
 8003530:	61bb      	str	r3, [r7, #24]
>>>>>>> 39e4d10438a821cc799a472af87a77c6796a1676
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
<<<<<<< HEAD
 800341e:	2300      	movs	r3, #0
 8003420:	61fb      	str	r3, [r7, #28]
 8003422:	e165      	b.n	80036f0 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8003424:	2201      	movs	r2, #1
 8003426:	69fb      	ldr	r3, [r7, #28]
 8003428:	fa02 f303 	lsl.w	r3, r2, r3
 800342c:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800342e:	683b      	ldr	r3, [r7, #0]
 8003430:	681b      	ldr	r3, [r3, #0]
 8003432:	697a      	ldr	r2, [r7, #20]
 8003434:	4013      	ands	r3, r2
 8003436:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8003438:	693a      	ldr	r2, [r7, #16]
 800343a:	697b      	ldr	r3, [r7, #20]
 800343c:	429a      	cmp	r2, r3
 800343e:	f040 8154 	bne.w	80036ea <HAL_GPIO_Init+0x2e2>
=======
 8003532:	2300      	movs	r3, #0
 8003534:	61fb      	str	r3, [r7, #28]
 8003536:	e165      	b.n	8003804 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8003538:	2201      	movs	r2, #1
 800353a:	69fb      	ldr	r3, [r7, #28]
 800353c:	fa02 f303 	lsl.w	r3, r2, r3
 8003540:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8003542:	683b      	ldr	r3, [r7, #0]
 8003544:	681b      	ldr	r3, [r3, #0]
 8003546:	697a      	ldr	r2, [r7, #20]
 8003548:	4013      	ands	r3, r2
 800354a:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 800354c:	693a      	ldr	r2, [r7, #16]
 800354e:	697b      	ldr	r3, [r7, #20]
 8003550:	429a      	cmp	r2, r3
 8003552:	f040 8154 	bne.w	80037fe <HAL_GPIO_Init+0x2e2>
>>>>>>> 39e4d10438a821cc799a472af87a77c6796a1676
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
<<<<<<< HEAD
 8003442:	683b      	ldr	r3, [r7, #0]
 8003444:	685b      	ldr	r3, [r3, #4]
 8003446:	f003 0303 	and.w	r3, r3, #3
 800344a:	2b01      	cmp	r3, #1
 800344c:	d005      	beq.n	800345a <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800344e:	683b      	ldr	r3, [r7, #0]
 8003450:	685b      	ldr	r3, [r3, #4]
 8003452:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8003456:	2b02      	cmp	r3, #2
 8003458:	d130      	bne.n	80034bc <HAL_GPIO_Init+0xb4>
=======
 8003556:	683b      	ldr	r3, [r7, #0]
 8003558:	685b      	ldr	r3, [r3, #4]
 800355a:	f003 0303 	and.w	r3, r3, #3
 800355e:	2b01      	cmp	r3, #1
 8003560:	d005      	beq.n	800356e <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8003562:	683b      	ldr	r3, [r7, #0]
 8003564:	685b      	ldr	r3, [r3, #4]
 8003566:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800356a:	2b02      	cmp	r3, #2
 800356c:	d130      	bne.n	80035d0 <HAL_GPIO_Init+0xb4>
>>>>>>> 39e4d10438a821cc799a472af87a77c6796a1676
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
<<<<<<< HEAD
 800345a:	687b      	ldr	r3, [r7, #4]
 800345c:	689b      	ldr	r3, [r3, #8]
 800345e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8003460:	69fb      	ldr	r3, [r7, #28]
 8003462:	005b      	lsls	r3, r3, #1
 8003464:	2203      	movs	r2, #3
 8003466:	fa02 f303 	lsl.w	r3, r2, r3
 800346a:	43db      	mvns	r3, r3
 800346c:	69ba      	ldr	r2, [r7, #24]
 800346e:	4013      	ands	r3, r2
 8003470:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8003472:	683b      	ldr	r3, [r7, #0]
 8003474:	68da      	ldr	r2, [r3, #12]
 8003476:	69fb      	ldr	r3, [r7, #28]
 8003478:	005b      	lsls	r3, r3, #1
 800347a:	fa02 f303 	lsl.w	r3, r2, r3
 800347e:	69ba      	ldr	r2, [r7, #24]
 8003480:	4313      	orrs	r3, r2
 8003482:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8003484:	687b      	ldr	r3, [r7, #4]
 8003486:	69ba      	ldr	r2, [r7, #24]
 8003488:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800348a:	687b      	ldr	r3, [r7, #4]
 800348c:	685b      	ldr	r3, [r3, #4]
 800348e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8003490:	2201      	movs	r2, #1
 8003492:	69fb      	ldr	r3, [r7, #28]
 8003494:	fa02 f303 	lsl.w	r3, r2, r3
 8003498:	43db      	mvns	r3, r3
 800349a:	69ba      	ldr	r2, [r7, #24]
 800349c:	4013      	ands	r3, r2
 800349e:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80034a0:	683b      	ldr	r3, [r7, #0]
 80034a2:	685b      	ldr	r3, [r3, #4]
 80034a4:	091b      	lsrs	r3, r3, #4
 80034a6:	f003 0201 	and.w	r2, r3, #1
 80034aa:	69fb      	ldr	r3, [r7, #28]
 80034ac:	fa02 f303 	lsl.w	r3, r2, r3
 80034b0:	69ba      	ldr	r2, [r7, #24]
 80034b2:	4313      	orrs	r3, r2
 80034b4:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80034b6:	687b      	ldr	r3, [r7, #4]
 80034b8:	69ba      	ldr	r2, [r7, #24]
 80034ba:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80034bc:	683b      	ldr	r3, [r7, #0]
 80034be:	685b      	ldr	r3, [r3, #4]
 80034c0:	f003 0303 	and.w	r3, r3, #3
 80034c4:	2b03      	cmp	r3, #3
 80034c6:	d017      	beq.n	80034f8 <HAL_GPIO_Init+0xf0>
=======
 800356e:	687b      	ldr	r3, [r7, #4]
 8003570:	689b      	ldr	r3, [r3, #8]
 8003572:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8003574:	69fb      	ldr	r3, [r7, #28]
 8003576:	005b      	lsls	r3, r3, #1
 8003578:	2203      	movs	r2, #3
 800357a:	fa02 f303 	lsl.w	r3, r2, r3
 800357e:	43db      	mvns	r3, r3
 8003580:	69ba      	ldr	r2, [r7, #24]
 8003582:	4013      	ands	r3, r2
 8003584:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8003586:	683b      	ldr	r3, [r7, #0]
 8003588:	68da      	ldr	r2, [r3, #12]
 800358a:	69fb      	ldr	r3, [r7, #28]
 800358c:	005b      	lsls	r3, r3, #1
 800358e:	fa02 f303 	lsl.w	r3, r2, r3
 8003592:	69ba      	ldr	r2, [r7, #24]
 8003594:	4313      	orrs	r3, r2
 8003596:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8003598:	687b      	ldr	r3, [r7, #4]
 800359a:	69ba      	ldr	r2, [r7, #24]
 800359c:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800359e:	687b      	ldr	r3, [r7, #4]
 80035a0:	685b      	ldr	r3, [r3, #4]
 80035a2:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80035a4:	2201      	movs	r2, #1
 80035a6:	69fb      	ldr	r3, [r7, #28]
 80035a8:	fa02 f303 	lsl.w	r3, r2, r3
 80035ac:	43db      	mvns	r3, r3
 80035ae:	69ba      	ldr	r2, [r7, #24]
 80035b0:	4013      	ands	r3, r2
 80035b2:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80035b4:	683b      	ldr	r3, [r7, #0]
 80035b6:	685b      	ldr	r3, [r3, #4]
 80035b8:	091b      	lsrs	r3, r3, #4
 80035ba:	f003 0201 	and.w	r2, r3, #1
 80035be:	69fb      	ldr	r3, [r7, #28]
 80035c0:	fa02 f303 	lsl.w	r3, r2, r3
 80035c4:	69ba      	ldr	r2, [r7, #24]
 80035c6:	4313      	orrs	r3, r2
 80035c8:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80035ca:	687b      	ldr	r3, [r7, #4]
 80035cc:	69ba      	ldr	r2, [r7, #24]
 80035ce:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80035d0:	683b      	ldr	r3, [r7, #0]
 80035d2:	685b      	ldr	r3, [r3, #4]
 80035d4:	f003 0303 	and.w	r3, r3, #3
 80035d8:	2b03      	cmp	r3, #3
 80035da:	d017      	beq.n	800360c <HAL_GPIO_Init+0xf0>
>>>>>>> 39e4d10438a821cc799a472af87a77c6796a1676
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
<<<<<<< HEAD
 80034c8:	687b      	ldr	r3, [r7, #4]
 80034ca:	68db      	ldr	r3, [r3, #12]
 80034cc:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 80034ce:	69fb      	ldr	r3, [r7, #28]
 80034d0:	005b      	lsls	r3, r3, #1
 80034d2:	2203      	movs	r2, #3
 80034d4:	fa02 f303 	lsl.w	r3, r2, r3
 80034d8:	43db      	mvns	r3, r3
 80034da:	69ba      	ldr	r2, [r7, #24]
 80034dc:	4013      	ands	r3, r2
 80034de:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80034e0:	683b      	ldr	r3, [r7, #0]
 80034e2:	689a      	ldr	r2, [r3, #8]
 80034e4:	69fb      	ldr	r3, [r7, #28]
 80034e6:	005b      	lsls	r3, r3, #1
 80034e8:	fa02 f303 	lsl.w	r3, r2, r3
 80034ec:	69ba      	ldr	r2, [r7, #24]
 80034ee:	4313      	orrs	r3, r2
 80034f0:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 80034f2:	687b      	ldr	r3, [r7, #4]
 80034f4:	69ba      	ldr	r2, [r7, #24]
 80034f6:	60da      	str	r2, [r3, #12]
=======
 80035dc:	687b      	ldr	r3, [r7, #4]
 80035de:	68db      	ldr	r3, [r3, #12]
 80035e0:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 80035e2:	69fb      	ldr	r3, [r7, #28]
 80035e4:	005b      	lsls	r3, r3, #1
 80035e6:	2203      	movs	r2, #3
 80035e8:	fa02 f303 	lsl.w	r3, r2, r3
 80035ec:	43db      	mvns	r3, r3
 80035ee:	69ba      	ldr	r2, [r7, #24]
 80035f0:	4013      	ands	r3, r2
 80035f2:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80035f4:	683b      	ldr	r3, [r7, #0]
 80035f6:	689a      	ldr	r2, [r3, #8]
 80035f8:	69fb      	ldr	r3, [r7, #28]
 80035fa:	005b      	lsls	r3, r3, #1
 80035fc:	fa02 f303 	lsl.w	r3, r2, r3
 8003600:	69ba      	ldr	r2, [r7, #24]
 8003602:	4313      	orrs	r3, r2
 8003604:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8003606:	687b      	ldr	r3, [r7, #4]
 8003608:	69ba      	ldr	r2, [r7, #24]
 800360a:	60da      	str	r2, [r3, #12]
>>>>>>> 39e4d10438a821cc799a472af87a77c6796a1676
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
<<<<<<< HEAD
 80034f8:	683b      	ldr	r3, [r7, #0]
 80034fa:	685b      	ldr	r3, [r3, #4]
 80034fc:	f003 0303 	and.w	r3, r3, #3
 8003500:	2b02      	cmp	r3, #2
 8003502:	d123      	bne.n	800354c <HAL_GPIO_Init+0x144>
=======
 800360c:	683b      	ldr	r3, [r7, #0]
 800360e:	685b      	ldr	r3, [r3, #4]
 8003610:	f003 0303 	and.w	r3, r3, #3
 8003614:	2b02      	cmp	r3, #2
 8003616:	d123      	bne.n	8003660 <HAL_GPIO_Init+0x144>
>>>>>>> 39e4d10438a821cc799a472af87a77c6796a1676
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
<<<<<<< HEAD
 8003504:	69fb      	ldr	r3, [r7, #28]
 8003506:	08da      	lsrs	r2, r3, #3
 8003508:	687b      	ldr	r3, [r7, #4]
 800350a:	3208      	adds	r2, #8
 800350c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8003510:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8003512:	69fb      	ldr	r3, [r7, #28]
 8003514:	f003 0307 	and.w	r3, r3, #7
 8003518:	009b      	lsls	r3, r3, #2
 800351a:	220f      	movs	r2, #15
 800351c:	fa02 f303 	lsl.w	r3, r2, r3
 8003520:	43db      	mvns	r3, r3
 8003522:	69ba      	ldr	r2, [r7, #24]
 8003524:	4013      	ands	r3, r2
 8003526:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8003528:	683b      	ldr	r3, [r7, #0]
 800352a:	691a      	ldr	r2, [r3, #16]
 800352c:	69fb      	ldr	r3, [r7, #28]
 800352e:	f003 0307 	and.w	r3, r3, #7
 8003532:	009b      	lsls	r3, r3, #2
 8003534:	fa02 f303 	lsl.w	r3, r2, r3
 8003538:	69ba      	ldr	r2, [r7, #24]
 800353a:	4313      	orrs	r3, r2
 800353c:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 800353e:	69fb      	ldr	r3, [r7, #28]
 8003540:	08da      	lsrs	r2, r3, #3
 8003542:	687b      	ldr	r3, [r7, #4]
 8003544:	3208      	adds	r2, #8
 8003546:	69b9      	ldr	r1, [r7, #24]
 8003548:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
=======
 8003618:	69fb      	ldr	r3, [r7, #28]
 800361a:	08da      	lsrs	r2, r3, #3
 800361c:	687b      	ldr	r3, [r7, #4]
 800361e:	3208      	adds	r2, #8
 8003620:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8003624:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8003626:	69fb      	ldr	r3, [r7, #28]
 8003628:	f003 0307 	and.w	r3, r3, #7
 800362c:	009b      	lsls	r3, r3, #2
 800362e:	220f      	movs	r2, #15
 8003630:	fa02 f303 	lsl.w	r3, r2, r3
 8003634:	43db      	mvns	r3, r3
 8003636:	69ba      	ldr	r2, [r7, #24]
 8003638:	4013      	ands	r3, r2
 800363a:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 800363c:	683b      	ldr	r3, [r7, #0]
 800363e:	691a      	ldr	r2, [r3, #16]
 8003640:	69fb      	ldr	r3, [r7, #28]
 8003642:	f003 0307 	and.w	r3, r3, #7
 8003646:	009b      	lsls	r3, r3, #2
 8003648:	fa02 f303 	lsl.w	r3, r2, r3
 800364c:	69ba      	ldr	r2, [r7, #24]
 800364e:	4313      	orrs	r3, r2
 8003650:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8003652:	69fb      	ldr	r3, [r7, #28]
 8003654:	08da      	lsrs	r2, r3, #3
 8003656:	687b      	ldr	r3, [r7, #4]
 8003658:	3208      	adds	r2, #8
 800365a:	69b9      	ldr	r1, [r7, #24]
 800365c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
>>>>>>> 39e4d10438a821cc799a472af87a77c6796a1676
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
<<<<<<< HEAD
 800354c:	687b      	ldr	r3, [r7, #4]
 800354e:	681b      	ldr	r3, [r3, #0]
 8003550:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8003552:	69fb      	ldr	r3, [r7, #28]
 8003554:	005b      	lsls	r3, r3, #1
 8003556:	2203      	movs	r2, #3
 8003558:	fa02 f303 	lsl.w	r3, r2, r3
 800355c:	43db      	mvns	r3, r3
 800355e:	69ba      	ldr	r2, [r7, #24]
 8003560:	4013      	ands	r3, r2
 8003562:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8003564:	683b      	ldr	r3, [r7, #0]
 8003566:	685b      	ldr	r3, [r3, #4]
 8003568:	f003 0203 	and.w	r2, r3, #3
 800356c:	69fb      	ldr	r3, [r7, #28]
 800356e:	005b      	lsls	r3, r3, #1
 8003570:	fa02 f303 	lsl.w	r3, r2, r3
 8003574:	69ba      	ldr	r2, [r7, #24]
 8003576:	4313      	orrs	r3, r2
 8003578:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 800357a:	687b      	ldr	r3, [r7, #4]
 800357c:	69ba      	ldr	r2, [r7, #24]
 800357e:	601a      	str	r2, [r3, #0]
=======
 8003660:	687b      	ldr	r3, [r7, #4]
 8003662:	681b      	ldr	r3, [r3, #0]
 8003664:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8003666:	69fb      	ldr	r3, [r7, #28]
 8003668:	005b      	lsls	r3, r3, #1
 800366a:	2203      	movs	r2, #3
 800366c:	fa02 f303 	lsl.w	r3, r2, r3
 8003670:	43db      	mvns	r3, r3
 8003672:	69ba      	ldr	r2, [r7, #24]
 8003674:	4013      	ands	r3, r2
 8003676:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8003678:	683b      	ldr	r3, [r7, #0]
 800367a:	685b      	ldr	r3, [r3, #4]
 800367c:	f003 0203 	and.w	r2, r3, #3
 8003680:	69fb      	ldr	r3, [r7, #28]
 8003682:	005b      	lsls	r3, r3, #1
 8003684:	fa02 f303 	lsl.w	r3, r2, r3
 8003688:	69ba      	ldr	r2, [r7, #24]
 800368a:	4313      	orrs	r3, r2
 800368c:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 800368e:	687b      	ldr	r3, [r7, #4]
 8003690:	69ba      	ldr	r2, [r7, #24]
 8003692:	601a      	str	r2, [r3, #0]
>>>>>>> 39e4d10438a821cc799a472af87a77c6796a1676

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
<<<<<<< HEAD
 8003580:	683b      	ldr	r3, [r7, #0]
 8003582:	685b      	ldr	r3, [r3, #4]
 8003584:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8003588:	2b00      	cmp	r3, #0
 800358a:	f000 80ae 	beq.w	80036ea <HAL_GPIO_Init+0x2e2>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800358e:	2300      	movs	r3, #0
 8003590:	60fb      	str	r3, [r7, #12]
 8003592:	4b5d      	ldr	r3, [pc, #372]	@ (8003708 <HAL_GPIO_Init+0x300>)
 8003594:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003596:	4a5c      	ldr	r2, [pc, #368]	@ (8003708 <HAL_GPIO_Init+0x300>)
 8003598:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 800359c:	6453      	str	r3, [r2, #68]	@ 0x44
 800359e:	4b5a      	ldr	r3, [pc, #360]	@ (8003708 <HAL_GPIO_Init+0x300>)
 80035a0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80035a2:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80035a6:	60fb      	str	r3, [r7, #12]
 80035a8:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 80035aa:	4a58      	ldr	r2, [pc, #352]	@ (800370c <HAL_GPIO_Init+0x304>)
 80035ac:	69fb      	ldr	r3, [r7, #28]
 80035ae:	089b      	lsrs	r3, r3, #2
 80035b0:	3302      	adds	r3, #2
 80035b2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80035b6:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 80035b8:	69fb      	ldr	r3, [r7, #28]
 80035ba:	f003 0303 	and.w	r3, r3, #3
 80035be:	009b      	lsls	r3, r3, #2
 80035c0:	220f      	movs	r2, #15
 80035c2:	fa02 f303 	lsl.w	r3, r2, r3
 80035c6:	43db      	mvns	r3, r3
 80035c8:	69ba      	ldr	r2, [r7, #24]
 80035ca:	4013      	ands	r3, r2
 80035cc:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 80035ce:	687b      	ldr	r3, [r7, #4]
 80035d0:	4a4f      	ldr	r2, [pc, #316]	@ (8003710 <HAL_GPIO_Init+0x308>)
 80035d2:	4293      	cmp	r3, r2
 80035d4:	d025      	beq.n	8003622 <HAL_GPIO_Init+0x21a>
 80035d6:	687b      	ldr	r3, [r7, #4]
 80035d8:	4a4e      	ldr	r2, [pc, #312]	@ (8003714 <HAL_GPIO_Init+0x30c>)
 80035da:	4293      	cmp	r3, r2
 80035dc:	d01f      	beq.n	800361e <HAL_GPIO_Init+0x216>
 80035de:	687b      	ldr	r3, [r7, #4]
 80035e0:	4a4d      	ldr	r2, [pc, #308]	@ (8003718 <HAL_GPIO_Init+0x310>)
 80035e2:	4293      	cmp	r3, r2
 80035e4:	d019      	beq.n	800361a <HAL_GPIO_Init+0x212>
 80035e6:	687b      	ldr	r3, [r7, #4]
 80035e8:	4a4c      	ldr	r2, [pc, #304]	@ (800371c <HAL_GPIO_Init+0x314>)
 80035ea:	4293      	cmp	r3, r2
 80035ec:	d013      	beq.n	8003616 <HAL_GPIO_Init+0x20e>
 80035ee:	687b      	ldr	r3, [r7, #4]
 80035f0:	4a4b      	ldr	r2, [pc, #300]	@ (8003720 <HAL_GPIO_Init+0x318>)
 80035f2:	4293      	cmp	r3, r2
 80035f4:	d00d      	beq.n	8003612 <HAL_GPIO_Init+0x20a>
 80035f6:	687b      	ldr	r3, [r7, #4]
 80035f8:	4a4a      	ldr	r2, [pc, #296]	@ (8003724 <HAL_GPIO_Init+0x31c>)
 80035fa:	4293      	cmp	r3, r2
 80035fc:	d007      	beq.n	800360e <HAL_GPIO_Init+0x206>
 80035fe:	687b      	ldr	r3, [r7, #4]
 8003600:	4a49      	ldr	r2, [pc, #292]	@ (8003728 <HAL_GPIO_Init+0x320>)
 8003602:	4293      	cmp	r3, r2
 8003604:	d101      	bne.n	800360a <HAL_GPIO_Init+0x202>
 8003606:	2306      	movs	r3, #6
 8003608:	e00c      	b.n	8003624 <HAL_GPIO_Init+0x21c>
 800360a:	2307      	movs	r3, #7
 800360c:	e00a      	b.n	8003624 <HAL_GPIO_Init+0x21c>
 800360e:	2305      	movs	r3, #5
 8003610:	e008      	b.n	8003624 <HAL_GPIO_Init+0x21c>
 8003612:	2304      	movs	r3, #4
 8003614:	e006      	b.n	8003624 <HAL_GPIO_Init+0x21c>
 8003616:	2303      	movs	r3, #3
 8003618:	e004      	b.n	8003624 <HAL_GPIO_Init+0x21c>
 800361a:	2302      	movs	r3, #2
 800361c:	e002      	b.n	8003624 <HAL_GPIO_Init+0x21c>
 800361e:	2301      	movs	r3, #1
 8003620:	e000      	b.n	8003624 <HAL_GPIO_Init+0x21c>
 8003622:	2300      	movs	r3, #0
 8003624:	69fa      	ldr	r2, [r7, #28]
 8003626:	f002 0203 	and.w	r2, r2, #3
 800362a:	0092      	lsls	r2, r2, #2
 800362c:	4093      	lsls	r3, r2
 800362e:	69ba      	ldr	r2, [r7, #24]
 8003630:	4313      	orrs	r3, r2
 8003632:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8003634:	4935      	ldr	r1, [pc, #212]	@ (800370c <HAL_GPIO_Init+0x304>)
 8003636:	69fb      	ldr	r3, [r7, #28]
 8003638:	089b      	lsrs	r3, r3, #2
 800363a:	3302      	adds	r3, #2
 800363c:	69ba      	ldr	r2, [r7, #24]
 800363e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8003642:	4b3a      	ldr	r3, [pc, #232]	@ (800372c <HAL_GPIO_Init+0x324>)
 8003644:	689b      	ldr	r3, [r3, #8]
 8003646:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003648:	693b      	ldr	r3, [r7, #16]
 800364a:	43db      	mvns	r3, r3
 800364c:	69ba      	ldr	r2, [r7, #24]
 800364e:	4013      	ands	r3, r2
 8003650:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8003652:	683b      	ldr	r3, [r7, #0]
 8003654:	685b      	ldr	r3, [r3, #4]
 8003656:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 800365a:	2b00      	cmp	r3, #0
 800365c:	d003      	beq.n	8003666 <HAL_GPIO_Init+0x25e>
        {
          temp |= iocurrent;
 800365e:	69ba      	ldr	r2, [r7, #24]
 8003660:	693b      	ldr	r3, [r7, #16]
 8003662:	4313      	orrs	r3, r2
 8003664:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8003666:	4a31      	ldr	r2, [pc, #196]	@ (800372c <HAL_GPIO_Init+0x324>)
 8003668:	69bb      	ldr	r3, [r7, #24]
 800366a:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 800366c:	4b2f      	ldr	r3, [pc, #188]	@ (800372c <HAL_GPIO_Init+0x324>)
 800366e:	68db      	ldr	r3, [r3, #12]
 8003670:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003672:	693b      	ldr	r3, [r7, #16]
 8003674:	43db      	mvns	r3, r3
 8003676:	69ba      	ldr	r2, [r7, #24]
 8003678:	4013      	ands	r3, r2
 800367a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 800367c:	683b      	ldr	r3, [r7, #0]
 800367e:	685b      	ldr	r3, [r3, #4]
 8003680:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8003684:	2b00      	cmp	r3, #0
 8003686:	d003      	beq.n	8003690 <HAL_GPIO_Init+0x288>
        {
          temp |= iocurrent;
 8003688:	69ba      	ldr	r2, [r7, #24]
 800368a:	693b      	ldr	r3, [r7, #16]
 800368c:	4313      	orrs	r3, r2
 800368e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8003690:	4a26      	ldr	r2, [pc, #152]	@ (800372c <HAL_GPIO_Init+0x324>)
 8003692:	69bb      	ldr	r3, [r7, #24]
 8003694:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8003696:	4b25      	ldr	r3, [pc, #148]	@ (800372c <HAL_GPIO_Init+0x324>)
 8003698:	685b      	ldr	r3, [r3, #4]
 800369a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800369c:	693b      	ldr	r3, [r7, #16]
 800369e:	43db      	mvns	r3, r3
 80036a0:	69ba      	ldr	r2, [r7, #24]
 80036a2:	4013      	ands	r3, r2
 80036a4:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 80036a6:	683b      	ldr	r3, [r7, #0]
 80036a8:	685b      	ldr	r3, [r3, #4]
 80036aa:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80036ae:	2b00      	cmp	r3, #0
 80036b0:	d003      	beq.n	80036ba <HAL_GPIO_Init+0x2b2>
        {
          temp |= iocurrent;
 80036b2:	69ba      	ldr	r2, [r7, #24]
 80036b4:	693b      	ldr	r3, [r7, #16]
 80036b6:	4313      	orrs	r3, r2
 80036b8:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 80036ba:	4a1c      	ldr	r2, [pc, #112]	@ (800372c <HAL_GPIO_Init+0x324>)
 80036bc:	69bb      	ldr	r3, [r7, #24]
 80036be:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80036c0:	4b1a      	ldr	r3, [pc, #104]	@ (800372c <HAL_GPIO_Init+0x324>)
 80036c2:	681b      	ldr	r3, [r3, #0]
 80036c4:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80036c6:	693b      	ldr	r3, [r7, #16]
 80036c8:	43db      	mvns	r3, r3
 80036ca:	69ba      	ldr	r2, [r7, #24]
 80036cc:	4013      	ands	r3, r2
 80036ce:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 80036d0:	683b      	ldr	r3, [r7, #0]
 80036d2:	685b      	ldr	r3, [r3, #4]
 80036d4:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80036d8:	2b00      	cmp	r3, #0
 80036da:	d003      	beq.n	80036e4 <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 80036dc:	69ba      	ldr	r2, [r7, #24]
 80036de:	693b      	ldr	r3, [r7, #16]
 80036e0:	4313      	orrs	r3, r2
 80036e2:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 80036e4:	4a11      	ldr	r2, [pc, #68]	@ (800372c <HAL_GPIO_Init+0x324>)
 80036e6:	69bb      	ldr	r3, [r7, #24]
 80036e8:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 80036ea:	69fb      	ldr	r3, [r7, #28]
 80036ec:	3301      	adds	r3, #1
 80036ee:	61fb      	str	r3, [r7, #28]
 80036f0:	69fb      	ldr	r3, [r7, #28]
 80036f2:	2b0f      	cmp	r3, #15
 80036f4:	f67f ae96 	bls.w	8003424 <HAL_GPIO_Init+0x1c>
=======
 8003694:	683b      	ldr	r3, [r7, #0]
 8003696:	685b      	ldr	r3, [r3, #4]
 8003698:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 800369c:	2b00      	cmp	r3, #0
 800369e:	f000 80ae 	beq.w	80037fe <HAL_GPIO_Init+0x2e2>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80036a2:	2300      	movs	r3, #0
 80036a4:	60fb      	str	r3, [r7, #12]
 80036a6:	4b5d      	ldr	r3, [pc, #372]	@ (800381c <HAL_GPIO_Init+0x300>)
 80036a8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80036aa:	4a5c      	ldr	r2, [pc, #368]	@ (800381c <HAL_GPIO_Init+0x300>)
 80036ac:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80036b0:	6453      	str	r3, [r2, #68]	@ 0x44
 80036b2:	4b5a      	ldr	r3, [pc, #360]	@ (800381c <HAL_GPIO_Init+0x300>)
 80036b4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80036b6:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80036ba:	60fb      	str	r3, [r7, #12]
 80036bc:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 80036be:	4a58      	ldr	r2, [pc, #352]	@ (8003820 <HAL_GPIO_Init+0x304>)
 80036c0:	69fb      	ldr	r3, [r7, #28]
 80036c2:	089b      	lsrs	r3, r3, #2
 80036c4:	3302      	adds	r3, #2
 80036c6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80036ca:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 80036cc:	69fb      	ldr	r3, [r7, #28]
 80036ce:	f003 0303 	and.w	r3, r3, #3
 80036d2:	009b      	lsls	r3, r3, #2
 80036d4:	220f      	movs	r2, #15
 80036d6:	fa02 f303 	lsl.w	r3, r2, r3
 80036da:	43db      	mvns	r3, r3
 80036dc:	69ba      	ldr	r2, [r7, #24]
 80036de:	4013      	ands	r3, r2
 80036e0:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 80036e2:	687b      	ldr	r3, [r7, #4]
 80036e4:	4a4f      	ldr	r2, [pc, #316]	@ (8003824 <HAL_GPIO_Init+0x308>)
 80036e6:	4293      	cmp	r3, r2
 80036e8:	d025      	beq.n	8003736 <HAL_GPIO_Init+0x21a>
 80036ea:	687b      	ldr	r3, [r7, #4]
 80036ec:	4a4e      	ldr	r2, [pc, #312]	@ (8003828 <HAL_GPIO_Init+0x30c>)
 80036ee:	4293      	cmp	r3, r2
 80036f0:	d01f      	beq.n	8003732 <HAL_GPIO_Init+0x216>
 80036f2:	687b      	ldr	r3, [r7, #4]
 80036f4:	4a4d      	ldr	r2, [pc, #308]	@ (800382c <HAL_GPIO_Init+0x310>)
 80036f6:	4293      	cmp	r3, r2
 80036f8:	d019      	beq.n	800372e <HAL_GPIO_Init+0x212>
 80036fa:	687b      	ldr	r3, [r7, #4]
 80036fc:	4a4c      	ldr	r2, [pc, #304]	@ (8003830 <HAL_GPIO_Init+0x314>)
 80036fe:	4293      	cmp	r3, r2
 8003700:	d013      	beq.n	800372a <HAL_GPIO_Init+0x20e>
 8003702:	687b      	ldr	r3, [r7, #4]
 8003704:	4a4b      	ldr	r2, [pc, #300]	@ (8003834 <HAL_GPIO_Init+0x318>)
 8003706:	4293      	cmp	r3, r2
 8003708:	d00d      	beq.n	8003726 <HAL_GPIO_Init+0x20a>
 800370a:	687b      	ldr	r3, [r7, #4]
 800370c:	4a4a      	ldr	r2, [pc, #296]	@ (8003838 <HAL_GPIO_Init+0x31c>)
 800370e:	4293      	cmp	r3, r2
 8003710:	d007      	beq.n	8003722 <HAL_GPIO_Init+0x206>
 8003712:	687b      	ldr	r3, [r7, #4]
 8003714:	4a49      	ldr	r2, [pc, #292]	@ (800383c <HAL_GPIO_Init+0x320>)
 8003716:	4293      	cmp	r3, r2
 8003718:	d101      	bne.n	800371e <HAL_GPIO_Init+0x202>
 800371a:	2306      	movs	r3, #6
 800371c:	e00c      	b.n	8003738 <HAL_GPIO_Init+0x21c>
 800371e:	2307      	movs	r3, #7
 8003720:	e00a      	b.n	8003738 <HAL_GPIO_Init+0x21c>
 8003722:	2305      	movs	r3, #5
 8003724:	e008      	b.n	8003738 <HAL_GPIO_Init+0x21c>
 8003726:	2304      	movs	r3, #4
 8003728:	e006      	b.n	8003738 <HAL_GPIO_Init+0x21c>
 800372a:	2303      	movs	r3, #3
 800372c:	e004      	b.n	8003738 <HAL_GPIO_Init+0x21c>
 800372e:	2302      	movs	r3, #2
 8003730:	e002      	b.n	8003738 <HAL_GPIO_Init+0x21c>
 8003732:	2301      	movs	r3, #1
 8003734:	e000      	b.n	8003738 <HAL_GPIO_Init+0x21c>
 8003736:	2300      	movs	r3, #0
 8003738:	69fa      	ldr	r2, [r7, #28]
 800373a:	f002 0203 	and.w	r2, r2, #3
 800373e:	0092      	lsls	r2, r2, #2
 8003740:	4093      	lsls	r3, r2
 8003742:	69ba      	ldr	r2, [r7, #24]
 8003744:	4313      	orrs	r3, r2
 8003746:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8003748:	4935      	ldr	r1, [pc, #212]	@ (8003820 <HAL_GPIO_Init+0x304>)
 800374a:	69fb      	ldr	r3, [r7, #28]
 800374c:	089b      	lsrs	r3, r3, #2
 800374e:	3302      	adds	r3, #2
 8003750:	69ba      	ldr	r2, [r7, #24]
 8003752:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8003756:	4b3a      	ldr	r3, [pc, #232]	@ (8003840 <HAL_GPIO_Init+0x324>)
 8003758:	689b      	ldr	r3, [r3, #8]
 800375a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800375c:	693b      	ldr	r3, [r7, #16]
 800375e:	43db      	mvns	r3, r3
 8003760:	69ba      	ldr	r2, [r7, #24]
 8003762:	4013      	ands	r3, r2
 8003764:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8003766:	683b      	ldr	r3, [r7, #0]
 8003768:	685b      	ldr	r3, [r3, #4]
 800376a:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 800376e:	2b00      	cmp	r3, #0
 8003770:	d003      	beq.n	800377a <HAL_GPIO_Init+0x25e>
        {
          temp |= iocurrent;
 8003772:	69ba      	ldr	r2, [r7, #24]
 8003774:	693b      	ldr	r3, [r7, #16]
 8003776:	4313      	orrs	r3, r2
 8003778:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 800377a:	4a31      	ldr	r2, [pc, #196]	@ (8003840 <HAL_GPIO_Init+0x324>)
 800377c:	69bb      	ldr	r3, [r7, #24]
 800377e:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8003780:	4b2f      	ldr	r3, [pc, #188]	@ (8003840 <HAL_GPIO_Init+0x324>)
 8003782:	68db      	ldr	r3, [r3, #12]
 8003784:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003786:	693b      	ldr	r3, [r7, #16]
 8003788:	43db      	mvns	r3, r3
 800378a:	69ba      	ldr	r2, [r7, #24]
 800378c:	4013      	ands	r3, r2
 800378e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8003790:	683b      	ldr	r3, [r7, #0]
 8003792:	685b      	ldr	r3, [r3, #4]
 8003794:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8003798:	2b00      	cmp	r3, #0
 800379a:	d003      	beq.n	80037a4 <HAL_GPIO_Init+0x288>
        {
          temp |= iocurrent;
 800379c:	69ba      	ldr	r2, [r7, #24]
 800379e:	693b      	ldr	r3, [r7, #16]
 80037a0:	4313      	orrs	r3, r2
 80037a2:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 80037a4:	4a26      	ldr	r2, [pc, #152]	@ (8003840 <HAL_GPIO_Init+0x324>)
 80037a6:	69bb      	ldr	r3, [r7, #24]
 80037a8:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 80037aa:	4b25      	ldr	r3, [pc, #148]	@ (8003840 <HAL_GPIO_Init+0x324>)
 80037ac:	685b      	ldr	r3, [r3, #4]
 80037ae:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80037b0:	693b      	ldr	r3, [r7, #16]
 80037b2:	43db      	mvns	r3, r3
 80037b4:	69ba      	ldr	r2, [r7, #24]
 80037b6:	4013      	ands	r3, r2
 80037b8:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 80037ba:	683b      	ldr	r3, [r7, #0]
 80037bc:	685b      	ldr	r3, [r3, #4]
 80037be:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80037c2:	2b00      	cmp	r3, #0
 80037c4:	d003      	beq.n	80037ce <HAL_GPIO_Init+0x2b2>
        {
          temp |= iocurrent;
 80037c6:	69ba      	ldr	r2, [r7, #24]
 80037c8:	693b      	ldr	r3, [r7, #16]
 80037ca:	4313      	orrs	r3, r2
 80037cc:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 80037ce:	4a1c      	ldr	r2, [pc, #112]	@ (8003840 <HAL_GPIO_Init+0x324>)
 80037d0:	69bb      	ldr	r3, [r7, #24]
 80037d2:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80037d4:	4b1a      	ldr	r3, [pc, #104]	@ (8003840 <HAL_GPIO_Init+0x324>)
 80037d6:	681b      	ldr	r3, [r3, #0]
 80037d8:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80037da:	693b      	ldr	r3, [r7, #16]
 80037dc:	43db      	mvns	r3, r3
 80037de:	69ba      	ldr	r2, [r7, #24]
 80037e0:	4013      	ands	r3, r2
 80037e2:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 80037e4:	683b      	ldr	r3, [r7, #0]
 80037e6:	685b      	ldr	r3, [r3, #4]
 80037e8:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80037ec:	2b00      	cmp	r3, #0
 80037ee:	d003      	beq.n	80037f8 <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 80037f0:	69ba      	ldr	r2, [r7, #24]
 80037f2:	693b      	ldr	r3, [r7, #16]
 80037f4:	4313      	orrs	r3, r2
 80037f6:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 80037f8:	4a11      	ldr	r2, [pc, #68]	@ (8003840 <HAL_GPIO_Init+0x324>)
 80037fa:	69bb      	ldr	r3, [r7, #24]
 80037fc:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 80037fe:	69fb      	ldr	r3, [r7, #28]
 8003800:	3301      	adds	r3, #1
 8003802:	61fb      	str	r3, [r7, #28]
 8003804:	69fb      	ldr	r3, [r7, #28]
 8003806:	2b0f      	cmp	r3, #15
 8003808:	f67f ae96 	bls.w	8003538 <HAL_GPIO_Init+0x1c>
>>>>>>> 39e4d10438a821cc799a472af87a77c6796a1676
      }
    }
  }
}
<<<<<<< HEAD
 80036f8:	bf00      	nop
 80036fa:	bf00      	nop
 80036fc:	3724      	adds	r7, #36	@ 0x24
 80036fe:	46bd      	mov	sp, r7
 8003700:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003704:	4770      	bx	lr
 8003706:	bf00      	nop
 8003708:	40023800 	.word	0x40023800
 800370c:	40013800 	.word	0x40013800
 8003710:	40020000 	.word	0x40020000
 8003714:	40020400 	.word	0x40020400
 8003718:	40020800 	.word	0x40020800
 800371c:	40020c00 	.word	0x40020c00
 8003720:	40021000 	.word	0x40021000
 8003724:	40021400 	.word	0x40021400
 8003728:	40021800 	.word	0x40021800
 800372c:	40013c00 	.word	0x40013c00

08003730 <HAL_GPIO_ReadPin>:
=======
 800380c:	bf00      	nop
 800380e:	bf00      	nop
 8003810:	3724      	adds	r7, #36	@ 0x24
 8003812:	46bd      	mov	sp, r7
 8003814:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003818:	4770      	bx	lr
 800381a:	bf00      	nop
 800381c:	40023800 	.word	0x40023800
 8003820:	40013800 	.word	0x40013800
 8003824:	40020000 	.word	0x40020000
 8003828:	40020400 	.word	0x40020400
 800382c:	40020800 	.word	0x40020800
 8003830:	40020c00 	.word	0x40020c00
 8003834:	40021000 	.word	0x40021000
 8003838:	40021400 	.word	0x40021400
 800383c:	40021800 	.word	0x40021800
 8003840:	40013c00 	.word	0x40013c00

08003844 <HAL_GPIO_ReadPin>:
>>>>>>> 39e4d10438a821cc799a472af87a77c6796a1676
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
<<<<<<< HEAD
 8003730:	b480      	push	{r7}
 8003732:	b085      	sub	sp, #20
 8003734:	af00      	add	r7, sp, #0
 8003736:	6078      	str	r0, [r7, #4]
 8003738:	460b      	mov	r3, r1
 800373a:	807b      	strh	r3, [r7, #2]
=======
 8003844:	b480      	push	{r7}
 8003846:	b085      	sub	sp, #20
 8003848:	af00      	add	r7, sp, #0
 800384a:	6078      	str	r0, [r7, #4]
 800384c:	460b      	mov	r3, r1
 800384e:	807b      	strh	r3, [r7, #2]
>>>>>>> 39e4d10438a821cc799a472af87a77c6796a1676
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
<<<<<<< HEAD
 800373c:	687b      	ldr	r3, [r7, #4]
 800373e:	691a      	ldr	r2, [r3, #16]
 8003740:	887b      	ldrh	r3, [r7, #2]
 8003742:	4013      	ands	r3, r2
 8003744:	2b00      	cmp	r3, #0
 8003746:	d002      	beq.n	800374e <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8003748:	2301      	movs	r3, #1
 800374a:	73fb      	strb	r3, [r7, #15]
 800374c:	e001      	b.n	8003752 <HAL_GPIO_ReadPin+0x22>
=======
 8003850:	687b      	ldr	r3, [r7, #4]
 8003852:	691a      	ldr	r2, [r3, #16]
 8003854:	887b      	ldrh	r3, [r7, #2]
 8003856:	4013      	ands	r3, r2
 8003858:	2b00      	cmp	r3, #0
 800385a:	d002      	beq.n	8003862 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 800385c:	2301      	movs	r3, #1
 800385e:	73fb      	strb	r3, [r7, #15]
 8003860:	e001      	b.n	8003866 <HAL_GPIO_ReadPin+0x22>
>>>>>>> 39e4d10438a821cc799a472af87a77c6796a1676
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
<<<<<<< HEAD
 800374e:	2300      	movs	r3, #0
 8003750:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8003752:	7bfb      	ldrb	r3, [r7, #15]
}
 8003754:	4618      	mov	r0, r3
 8003756:	3714      	adds	r7, #20
 8003758:	46bd      	mov	sp, r7
 800375a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800375e:	4770      	bx	lr

08003760 <HAL_GPIO_WritePin>:
=======
 8003862:	2300      	movs	r3, #0
 8003864:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8003866:	7bfb      	ldrb	r3, [r7, #15]
}
 8003868:	4618      	mov	r0, r3
 800386a:	3714      	adds	r7, #20
 800386c:	46bd      	mov	sp, r7
 800386e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003872:	4770      	bx	lr

08003874 <HAL_GPIO_WritePin>:
>>>>>>> 39e4d10438a821cc799a472af87a77c6796a1676
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
<<<<<<< HEAD
 8003760:	b480      	push	{r7}
 8003762:	b083      	sub	sp, #12
 8003764:	af00      	add	r7, sp, #0
 8003766:	6078      	str	r0, [r7, #4]
 8003768:	460b      	mov	r3, r1
 800376a:	807b      	strh	r3, [r7, #2]
 800376c:	4613      	mov	r3, r2
 800376e:	707b      	strb	r3, [r7, #1]
=======
 8003874:	b480      	push	{r7}
 8003876:	b083      	sub	sp, #12
 8003878:	af00      	add	r7, sp, #0
 800387a:	6078      	str	r0, [r7, #4]
 800387c:	460b      	mov	r3, r1
 800387e:	807b      	strh	r3, [r7, #2]
 8003880:	4613      	mov	r3, r2
 8003882:	707b      	strb	r3, [r7, #1]
>>>>>>> 39e4d10438a821cc799a472af87a77c6796a1676
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
<<<<<<< HEAD
 8003770:	787b      	ldrb	r3, [r7, #1]
 8003772:	2b00      	cmp	r3, #0
 8003774:	d003      	beq.n	800377e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8003776:	887a      	ldrh	r2, [r7, #2]
 8003778:	687b      	ldr	r3, [r7, #4]
 800377a:	619a      	str	r2, [r3, #24]
=======
 8003884:	787b      	ldrb	r3, [r7, #1]
 8003886:	2b00      	cmp	r3, #0
 8003888:	d003      	beq.n	8003892 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800388a:	887a      	ldrh	r2, [r7, #2]
 800388c:	687b      	ldr	r3, [r7, #4]
 800388e:	619a      	str	r2, [r3, #24]
>>>>>>> 39e4d10438a821cc799a472af87a77c6796a1676
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
<<<<<<< HEAD
 800377c:	e003      	b.n	8003786 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 800377e:	887b      	ldrh	r3, [r7, #2]
 8003780:	041a      	lsls	r2, r3, #16
 8003782:	687b      	ldr	r3, [r7, #4]
 8003784:	619a      	str	r2, [r3, #24]
}
 8003786:	bf00      	nop
 8003788:	370c      	adds	r7, #12
 800378a:	46bd      	mov	sp, r7
 800378c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003790:	4770      	bx	lr
	...

08003794 <HAL_RCC_ClockConfig>:
=======
 8003890:	e003      	b.n	800389a <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8003892:	887b      	ldrh	r3, [r7, #2]
 8003894:	041a      	lsls	r2, r3, #16
 8003896:	687b      	ldr	r3, [r7, #4]
 8003898:	619a      	str	r2, [r3, #24]
}
 800389a:	bf00      	nop
 800389c:	370c      	adds	r7, #12
 800389e:	46bd      	mov	sp, r7
 80038a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038a4:	4770      	bx	lr
	...

080038a8 <HAL_RCC_ClockConfig>:
>>>>>>> 39e4d10438a821cc799a472af87a77c6796a1676
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
<<<<<<< HEAD
 8003794:	b580      	push	{r7, lr}
 8003796:	b084      	sub	sp, #16
 8003798:	af00      	add	r7, sp, #0
 800379a:	6078      	str	r0, [r7, #4]
 800379c:	6039      	str	r1, [r7, #0]
=======
 80038a8:	b580      	push	{r7, lr}
 80038aa:	b084      	sub	sp, #16
 80038ac:	af00      	add	r7, sp, #0
 80038ae:	6078      	str	r0, [r7, #4]
 80038b0:	6039      	str	r1, [r7, #0]
>>>>>>> 39e4d10438a821cc799a472af87a77c6796a1676
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
<<<<<<< HEAD
 800379e:	687b      	ldr	r3, [r7, #4]
 80037a0:	2b00      	cmp	r3, #0
 80037a2:	d101      	bne.n	80037a8 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80037a4:	2301      	movs	r3, #1
 80037a6:	e0cc      	b.n	8003942 <HAL_RCC_ClockConfig+0x1ae>
=======
 80038b2:	687b      	ldr	r3, [r7, #4]
 80038b4:	2b00      	cmp	r3, #0
 80038b6:	d101      	bne.n	80038bc <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80038b8:	2301      	movs	r3, #1
 80038ba:	e0cc      	b.n	8003a56 <HAL_RCC_ClockConfig+0x1ae>
>>>>>>> 39e4d10438a821cc799a472af87a77c6796a1676
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
<<<<<<< HEAD
 80037a8:	4b68      	ldr	r3, [pc, #416]	@ (800394c <HAL_RCC_ClockConfig+0x1b8>)
 80037aa:	681b      	ldr	r3, [r3, #0]
 80037ac:	f003 030f 	and.w	r3, r3, #15
 80037b0:	683a      	ldr	r2, [r7, #0]
 80037b2:	429a      	cmp	r2, r3
 80037b4:	d90c      	bls.n	80037d0 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80037b6:	4b65      	ldr	r3, [pc, #404]	@ (800394c <HAL_RCC_ClockConfig+0x1b8>)
 80037b8:	683a      	ldr	r2, [r7, #0]
 80037ba:	b2d2      	uxtb	r2, r2
 80037bc:	701a      	strb	r2, [r3, #0]
=======
 80038bc:	4b68      	ldr	r3, [pc, #416]	@ (8003a60 <HAL_RCC_ClockConfig+0x1b8>)
 80038be:	681b      	ldr	r3, [r3, #0]
 80038c0:	f003 030f 	and.w	r3, r3, #15
 80038c4:	683a      	ldr	r2, [r7, #0]
 80038c6:	429a      	cmp	r2, r3
 80038c8:	d90c      	bls.n	80038e4 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80038ca:	4b65      	ldr	r3, [pc, #404]	@ (8003a60 <HAL_RCC_ClockConfig+0x1b8>)
 80038cc:	683a      	ldr	r2, [r7, #0]
 80038ce:	b2d2      	uxtb	r2, r2
 80038d0:	701a      	strb	r2, [r3, #0]
>>>>>>> 39e4d10438a821cc799a472af87a77c6796a1676

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
<<<<<<< HEAD
 80037be:	4b63      	ldr	r3, [pc, #396]	@ (800394c <HAL_RCC_ClockConfig+0x1b8>)
 80037c0:	681b      	ldr	r3, [r3, #0]
 80037c2:	f003 030f 	and.w	r3, r3, #15
 80037c6:	683a      	ldr	r2, [r7, #0]
 80037c8:	429a      	cmp	r2, r3
 80037ca:	d001      	beq.n	80037d0 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 80037cc:	2301      	movs	r3, #1
 80037ce:	e0b8      	b.n	8003942 <HAL_RCC_ClockConfig+0x1ae>
=======
 80038d2:	4b63      	ldr	r3, [pc, #396]	@ (8003a60 <HAL_RCC_ClockConfig+0x1b8>)
 80038d4:	681b      	ldr	r3, [r3, #0]
 80038d6:	f003 030f 	and.w	r3, r3, #15
 80038da:	683a      	ldr	r2, [r7, #0]
 80038dc:	429a      	cmp	r2, r3
 80038de:	d001      	beq.n	80038e4 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 80038e0:	2301      	movs	r3, #1
 80038e2:	e0b8      	b.n	8003a56 <HAL_RCC_ClockConfig+0x1ae>
>>>>>>> 39e4d10438a821cc799a472af87a77c6796a1676
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
<<<<<<< HEAD
 80037d0:	687b      	ldr	r3, [r7, #4]
 80037d2:	681b      	ldr	r3, [r3, #0]
 80037d4:	f003 0302 	and.w	r3, r3, #2
 80037d8:	2b00      	cmp	r3, #0
 80037da:	d020      	beq.n	800381e <HAL_RCC_ClockConfig+0x8a>
=======
 80038e4:	687b      	ldr	r3, [r7, #4]
 80038e6:	681b      	ldr	r3, [r3, #0]
 80038e8:	f003 0302 	and.w	r3, r3, #2
 80038ec:	2b00      	cmp	r3, #0
 80038ee:	d020      	beq.n	8003932 <HAL_RCC_ClockConfig+0x8a>
>>>>>>> 39e4d10438a821cc799a472af87a77c6796a1676
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
<<<<<<< HEAD
 80037dc:	687b      	ldr	r3, [r7, #4]
 80037de:	681b      	ldr	r3, [r3, #0]
 80037e0:	f003 0304 	and.w	r3, r3, #4
 80037e4:	2b00      	cmp	r3, #0
 80037e6:	d005      	beq.n	80037f4 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80037e8:	4b59      	ldr	r3, [pc, #356]	@ (8003950 <HAL_RCC_ClockConfig+0x1bc>)
 80037ea:	689b      	ldr	r3, [r3, #8]
 80037ec:	4a58      	ldr	r2, [pc, #352]	@ (8003950 <HAL_RCC_ClockConfig+0x1bc>)
 80037ee:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 80037f2:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80037f4:	687b      	ldr	r3, [r7, #4]
 80037f6:	681b      	ldr	r3, [r3, #0]
 80037f8:	f003 0308 	and.w	r3, r3, #8
 80037fc:	2b00      	cmp	r3, #0
 80037fe:	d005      	beq.n	800380c <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8003800:	4b53      	ldr	r3, [pc, #332]	@ (8003950 <HAL_RCC_ClockConfig+0x1bc>)
 8003802:	689b      	ldr	r3, [r3, #8]
 8003804:	4a52      	ldr	r2, [pc, #328]	@ (8003950 <HAL_RCC_ClockConfig+0x1bc>)
 8003806:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 800380a:	6093      	str	r3, [r2, #8]
=======
 80038f0:	687b      	ldr	r3, [r7, #4]
 80038f2:	681b      	ldr	r3, [r3, #0]
 80038f4:	f003 0304 	and.w	r3, r3, #4
 80038f8:	2b00      	cmp	r3, #0
 80038fa:	d005      	beq.n	8003908 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80038fc:	4b59      	ldr	r3, [pc, #356]	@ (8003a64 <HAL_RCC_ClockConfig+0x1bc>)
 80038fe:	689b      	ldr	r3, [r3, #8]
 8003900:	4a58      	ldr	r2, [pc, #352]	@ (8003a64 <HAL_RCC_ClockConfig+0x1bc>)
 8003902:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 8003906:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003908:	687b      	ldr	r3, [r7, #4]
 800390a:	681b      	ldr	r3, [r3, #0]
 800390c:	f003 0308 	and.w	r3, r3, #8
 8003910:	2b00      	cmp	r3, #0
 8003912:	d005      	beq.n	8003920 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8003914:	4b53      	ldr	r3, [pc, #332]	@ (8003a64 <HAL_RCC_ClockConfig+0x1bc>)
 8003916:	689b      	ldr	r3, [r3, #8]
 8003918:	4a52      	ldr	r2, [pc, #328]	@ (8003a64 <HAL_RCC_ClockConfig+0x1bc>)
 800391a:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 800391e:	6093      	str	r3, [r2, #8]
>>>>>>> 39e4d10438a821cc799a472af87a77c6796a1676
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
<<<<<<< HEAD
 800380c:	4b50      	ldr	r3, [pc, #320]	@ (8003950 <HAL_RCC_ClockConfig+0x1bc>)
 800380e:	689b      	ldr	r3, [r3, #8]
 8003810:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8003814:	687b      	ldr	r3, [r7, #4]
 8003816:	689b      	ldr	r3, [r3, #8]
 8003818:	494d      	ldr	r1, [pc, #308]	@ (8003950 <HAL_RCC_ClockConfig+0x1bc>)
 800381a:	4313      	orrs	r3, r2
 800381c:	608b      	str	r3, [r1, #8]
=======
 8003920:	4b50      	ldr	r3, [pc, #320]	@ (8003a64 <HAL_RCC_ClockConfig+0x1bc>)
 8003922:	689b      	ldr	r3, [r3, #8]
 8003924:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8003928:	687b      	ldr	r3, [r7, #4]
 800392a:	689b      	ldr	r3, [r3, #8]
 800392c:	494d      	ldr	r1, [pc, #308]	@ (8003a64 <HAL_RCC_ClockConfig+0x1bc>)
 800392e:	4313      	orrs	r3, r2
 8003930:	608b      	str	r3, [r1, #8]
>>>>>>> 39e4d10438a821cc799a472af87a77c6796a1676
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
<<<<<<< HEAD
 800381e:	687b      	ldr	r3, [r7, #4]
 8003820:	681b      	ldr	r3, [r3, #0]
 8003822:	f003 0301 	and.w	r3, r3, #1
 8003826:	2b00      	cmp	r3, #0
 8003828:	d044      	beq.n	80038b4 <HAL_RCC_ClockConfig+0x120>
=======
 8003932:	687b      	ldr	r3, [r7, #4]
 8003934:	681b      	ldr	r3, [r3, #0]
 8003936:	f003 0301 	and.w	r3, r3, #1
 800393a:	2b00      	cmp	r3, #0
 800393c:	d044      	beq.n	80039c8 <HAL_RCC_ClockConfig+0x120>
>>>>>>> 39e4d10438a821cc799a472af87a77c6796a1676
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
<<<<<<< HEAD
 800382a:	687b      	ldr	r3, [r7, #4]
 800382c:	685b      	ldr	r3, [r3, #4]
 800382e:	2b01      	cmp	r3, #1
 8003830:	d107      	bne.n	8003842 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003832:	4b47      	ldr	r3, [pc, #284]	@ (8003950 <HAL_RCC_ClockConfig+0x1bc>)
 8003834:	681b      	ldr	r3, [r3, #0]
 8003836:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800383a:	2b00      	cmp	r3, #0
 800383c:	d119      	bne.n	8003872 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800383e:	2301      	movs	r3, #1
 8003840:	e07f      	b.n	8003942 <HAL_RCC_ClockConfig+0x1ae>
=======
 800393e:	687b      	ldr	r3, [r7, #4]
 8003940:	685b      	ldr	r3, [r3, #4]
 8003942:	2b01      	cmp	r3, #1
 8003944:	d107      	bne.n	8003956 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003946:	4b47      	ldr	r3, [pc, #284]	@ (8003a64 <HAL_RCC_ClockConfig+0x1bc>)
 8003948:	681b      	ldr	r3, [r3, #0]
 800394a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800394e:	2b00      	cmp	r3, #0
 8003950:	d119      	bne.n	8003986 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003952:	2301      	movs	r3, #1
 8003954:	e07f      	b.n	8003a56 <HAL_RCC_ClockConfig+0x1ae>
>>>>>>> 39e4d10438a821cc799a472af87a77c6796a1676
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
<<<<<<< HEAD
 8003842:	687b      	ldr	r3, [r7, #4]
 8003844:	685b      	ldr	r3, [r3, #4]
 8003846:	2b02      	cmp	r3, #2
 8003848:	d003      	beq.n	8003852 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 800384a:	687b      	ldr	r3, [r7, #4]
 800384c:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800384e:	2b03      	cmp	r3, #3
 8003850:	d107      	bne.n	8003862 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003852:	4b3f      	ldr	r3, [pc, #252]	@ (8003950 <HAL_RCC_ClockConfig+0x1bc>)
 8003854:	681b      	ldr	r3, [r3, #0]
 8003856:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800385a:	2b00      	cmp	r3, #0
 800385c:	d109      	bne.n	8003872 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800385e:	2301      	movs	r3, #1
 8003860:	e06f      	b.n	8003942 <HAL_RCC_ClockConfig+0x1ae>
=======
 8003956:	687b      	ldr	r3, [r7, #4]
 8003958:	685b      	ldr	r3, [r3, #4]
 800395a:	2b02      	cmp	r3, #2
 800395c:	d003      	beq.n	8003966 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 800395e:	687b      	ldr	r3, [r7, #4]
 8003960:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8003962:	2b03      	cmp	r3, #3
 8003964:	d107      	bne.n	8003976 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003966:	4b3f      	ldr	r3, [pc, #252]	@ (8003a64 <HAL_RCC_ClockConfig+0x1bc>)
 8003968:	681b      	ldr	r3, [r3, #0]
 800396a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800396e:	2b00      	cmp	r3, #0
 8003970:	d109      	bne.n	8003986 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003972:	2301      	movs	r3, #1
 8003974:	e06f      	b.n	8003a56 <HAL_RCC_ClockConfig+0x1ae>
>>>>>>> 39e4d10438a821cc799a472af87a77c6796a1676
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
<<<<<<< HEAD
 8003862:	4b3b      	ldr	r3, [pc, #236]	@ (8003950 <HAL_RCC_ClockConfig+0x1bc>)
 8003864:	681b      	ldr	r3, [r3, #0]
 8003866:	f003 0302 	and.w	r3, r3, #2
 800386a:	2b00      	cmp	r3, #0
 800386c:	d101      	bne.n	8003872 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800386e:	2301      	movs	r3, #1
 8003870:	e067      	b.n	8003942 <HAL_RCC_ClockConfig+0x1ae>
=======
 8003976:	4b3b      	ldr	r3, [pc, #236]	@ (8003a64 <HAL_RCC_ClockConfig+0x1bc>)
 8003978:	681b      	ldr	r3, [r3, #0]
 800397a:	f003 0302 	and.w	r3, r3, #2
 800397e:	2b00      	cmp	r3, #0
 8003980:	d101      	bne.n	8003986 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003982:	2301      	movs	r3, #1
 8003984:	e067      	b.n	8003a56 <HAL_RCC_ClockConfig+0x1ae>
>>>>>>> 39e4d10438a821cc799a472af87a77c6796a1676
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
<<<<<<< HEAD
 8003872:	4b37      	ldr	r3, [pc, #220]	@ (8003950 <HAL_RCC_ClockConfig+0x1bc>)
 8003874:	689b      	ldr	r3, [r3, #8]
 8003876:	f023 0203 	bic.w	r2, r3, #3
 800387a:	687b      	ldr	r3, [r7, #4]
 800387c:	685b      	ldr	r3, [r3, #4]
 800387e:	4934      	ldr	r1, [pc, #208]	@ (8003950 <HAL_RCC_ClockConfig+0x1bc>)
 8003880:	4313      	orrs	r3, r2
 8003882:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8003884:	f7fe fc88 	bl	8002198 <HAL_GetTick>
 8003888:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800388a:	e00a      	b.n	80038a2 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800388c:	f7fe fc84 	bl	8002198 <HAL_GetTick>
 8003890:	4602      	mov	r2, r0
 8003892:	68fb      	ldr	r3, [r7, #12]
 8003894:	1ad3      	subs	r3, r2, r3
 8003896:	f241 3288 	movw	r2, #5000	@ 0x1388
 800389a:	4293      	cmp	r3, r2
 800389c:	d901      	bls.n	80038a2 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800389e:	2303      	movs	r3, #3
 80038a0:	e04f      	b.n	8003942 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80038a2:	4b2b      	ldr	r3, [pc, #172]	@ (8003950 <HAL_RCC_ClockConfig+0x1bc>)
 80038a4:	689b      	ldr	r3, [r3, #8]
 80038a6:	f003 020c 	and.w	r2, r3, #12
 80038aa:	687b      	ldr	r3, [r7, #4]
 80038ac:	685b      	ldr	r3, [r3, #4]
 80038ae:	009b      	lsls	r3, r3, #2
 80038b0:	429a      	cmp	r2, r3
 80038b2:	d1eb      	bne.n	800388c <HAL_RCC_ClockConfig+0xf8>
=======
 8003986:	4b37      	ldr	r3, [pc, #220]	@ (8003a64 <HAL_RCC_ClockConfig+0x1bc>)
 8003988:	689b      	ldr	r3, [r3, #8]
 800398a:	f023 0203 	bic.w	r2, r3, #3
 800398e:	687b      	ldr	r3, [r7, #4]
 8003990:	685b      	ldr	r3, [r3, #4]
 8003992:	4934      	ldr	r1, [pc, #208]	@ (8003a64 <HAL_RCC_ClockConfig+0x1bc>)
 8003994:	4313      	orrs	r3, r2
 8003996:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8003998:	f7fe fc88 	bl	80022ac <HAL_GetTick>
 800399c:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800399e:	e00a      	b.n	80039b6 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80039a0:	f7fe fc84 	bl	80022ac <HAL_GetTick>
 80039a4:	4602      	mov	r2, r0
 80039a6:	68fb      	ldr	r3, [r7, #12]
 80039a8:	1ad3      	subs	r3, r2, r3
 80039aa:	f241 3288 	movw	r2, #5000	@ 0x1388
 80039ae:	4293      	cmp	r3, r2
 80039b0:	d901      	bls.n	80039b6 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80039b2:	2303      	movs	r3, #3
 80039b4:	e04f      	b.n	8003a56 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80039b6:	4b2b      	ldr	r3, [pc, #172]	@ (8003a64 <HAL_RCC_ClockConfig+0x1bc>)
 80039b8:	689b      	ldr	r3, [r3, #8]
 80039ba:	f003 020c 	and.w	r2, r3, #12
 80039be:	687b      	ldr	r3, [r7, #4]
 80039c0:	685b      	ldr	r3, [r3, #4]
 80039c2:	009b      	lsls	r3, r3, #2
 80039c4:	429a      	cmp	r2, r3
 80039c6:	d1eb      	bne.n	80039a0 <HAL_RCC_ClockConfig+0xf8>
>>>>>>> 39e4d10438a821cc799a472af87a77c6796a1676
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
<<<<<<< HEAD
 80038b4:	4b25      	ldr	r3, [pc, #148]	@ (800394c <HAL_RCC_ClockConfig+0x1b8>)
 80038b6:	681b      	ldr	r3, [r3, #0]
 80038b8:	f003 030f 	and.w	r3, r3, #15
 80038bc:	683a      	ldr	r2, [r7, #0]
 80038be:	429a      	cmp	r2, r3
 80038c0:	d20c      	bcs.n	80038dc <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80038c2:	4b22      	ldr	r3, [pc, #136]	@ (800394c <HAL_RCC_ClockConfig+0x1b8>)
 80038c4:	683a      	ldr	r2, [r7, #0]
 80038c6:	b2d2      	uxtb	r2, r2
 80038c8:	701a      	strb	r2, [r3, #0]
=======
 80039c8:	4b25      	ldr	r3, [pc, #148]	@ (8003a60 <HAL_RCC_ClockConfig+0x1b8>)
 80039ca:	681b      	ldr	r3, [r3, #0]
 80039cc:	f003 030f 	and.w	r3, r3, #15
 80039d0:	683a      	ldr	r2, [r7, #0]
 80039d2:	429a      	cmp	r2, r3
 80039d4:	d20c      	bcs.n	80039f0 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80039d6:	4b22      	ldr	r3, [pc, #136]	@ (8003a60 <HAL_RCC_ClockConfig+0x1b8>)
 80039d8:	683a      	ldr	r2, [r7, #0]
 80039da:	b2d2      	uxtb	r2, r2
 80039dc:	701a      	strb	r2, [r3, #0]
>>>>>>> 39e4d10438a821cc799a472af87a77c6796a1676

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
<<<<<<< HEAD
 80038ca:	4b20      	ldr	r3, [pc, #128]	@ (800394c <HAL_RCC_ClockConfig+0x1b8>)
 80038cc:	681b      	ldr	r3, [r3, #0]
 80038ce:	f003 030f 	and.w	r3, r3, #15
 80038d2:	683a      	ldr	r2, [r7, #0]
 80038d4:	429a      	cmp	r2, r3
 80038d6:	d001      	beq.n	80038dc <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 80038d8:	2301      	movs	r3, #1
 80038da:	e032      	b.n	8003942 <HAL_RCC_ClockConfig+0x1ae>
=======
 80039de:	4b20      	ldr	r3, [pc, #128]	@ (8003a60 <HAL_RCC_ClockConfig+0x1b8>)
 80039e0:	681b      	ldr	r3, [r3, #0]
 80039e2:	f003 030f 	and.w	r3, r3, #15
 80039e6:	683a      	ldr	r2, [r7, #0]
 80039e8:	429a      	cmp	r2, r3
 80039ea:	d001      	beq.n	80039f0 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 80039ec:	2301      	movs	r3, #1
 80039ee:	e032      	b.n	8003a56 <HAL_RCC_ClockConfig+0x1ae>
>>>>>>> 39e4d10438a821cc799a472af87a77c6796a1676
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
<<<<<<< HEAD
 80038dc:	687b      	ldr	r3, [r7, #4]
 80038de:	681b      	ldr	r3, [r3, #0]
 80038e0:	f003 0304 	and.w	r3, r3, #4
 80038e4:	2b00      	cmp	r3, #0
 80038e6:	d008      	beq.n	80038fa <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80038e8:	4b19      	ldr	r3, [pc, #100]	@ (8003950 <HAL_RCC_ClockConfig+0x1bc>)
 80038ea:	689b      	ldr	r3, [r3, #8]
 80038ec:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 80038f0:	687b      	ldr	r3, [r7, #4]
 80038f2:	68db      	ldr	r3, [r3, #12]
 80038f4:	4916      	ldr	r1, [pc, #88]	@ (8003950 <HAL_RCC_ClockConfig+0x1bc>)
 80038f6:	4313      	orrs	r3, r2
 80038f8:	608b      	str	r3, [r1, #8]
=======
 80039f0:	687b      	ldr	r3, [r7, #4]
 80039f2:	681b      	ldr	r3, [r3, #0]
 80039f4:	f003 0304 	and.w	r3, r3, #4
 80039f8:	2b00      	cmp	r3, #0
 80039fa:	d008      	beq.n	8003a0e <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80039fc:	4b19      	ldr	r3, [pc, #100]	@ (8003a64 <HAL_RCC_ClockConfig+0x1bc>)
 80039fe:	689b      	ldr	r3, [r3, #8]
 8003a00:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 8003a04:	687b      	ldr	r3, [r7, #4]
 8003a06:	68db      	ldr	r3, [r3, #12]
 8003a08:	4916      	ldr	r1, [pc, #88]	@ (8003a64 <HAL_RCC_ClockConfig+0x1bc>)
 8003a0a:	4313      	orrs	r3, r2
 8003a0c:	608b      	str	r3, [r1, #8]
>>>>>>> 39e4d10438a821cc799a472af87a77c6796a1676
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
<<<<<<< HEAD
 80038fa:	687b      	ldr	r3, [r7, #4]
 80038fc:	681b      	ldr	r3, [r3, #0]
 80038fe:	f003 0308 	and.w	r3, r3, #8
 8003902:	2b00      	cmp	r3, #0
 8003904:	d009      	beq.n	800391a <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8003906:	4b12      	ldr	r3, [pc, #72]	@ (8003950 <HAL_RCC_ClockConfig+0x1bc>)
 8003908:	689b      	ldr	r3, [r3, #8]
 800390a:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 800390e:	687b      	ldr	r3, [r7, #4]
 8003910:	691b      	ldr	r3, [r3, #16]
 8003912:	00db      	lsls	r3, r3, #3
 8003914:	490e      	ldr	r1, [pc, #56]	@ (8003950 <HAL_RCC_ClockConfig+0x1bc>)
 8003916:	4313      	orrs	r3, r2
 8003918:	608b      	str	r3, [r1, #8]
=======
 8003a0e:	687b      	ldr	r3, [r7, #4]
 8003a10:	681b      	ldr	r3, [r3, #0]
 8003a12:	f003 0308 	and.w	r3, r3, #8
 8003a16:	2b00      	cmp	r3, #0
 8003a18:	d009      	beq.n	8003a2e <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8003a1a:	4b12      	ldr	r3, [pc, #72]	@ (8003a64 <HAL_RCC_ClockConfig+0x1bc>)
 8003a1c:	689b      	ldr	r3, [r3, #8]
 8003a1e:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 8003a22:	687b      	ldr	r3, [r7, #4]
 8003a24:	691b      	ldr	r3, [r3, #16]
 8003a26:	00db      	lsls	r3, r3, #3
 8003a28:	490e      	ldr	r1, [pc, #56]	@ (8003a64 <HAL_RCC_ClockConfig+0x1bc>)
 8003a2a:	4313      	orrs	r3, r2
 8003a2c:	608b      	str	r3, [r1, #8]
>>>>>>> 39e4d10438a821cc799a472af87a77c6796a1676
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
<<<<<<< HEAD
 800391a:	f000 f855 	bl	80039c8 <HAL_RCC_GetSysClockFreq>
 800391e:	4602      	mov	r2, r0
 8003920:	4b0b      	ldr	r3, [pc, #44]	@ (8003950 <HAL_RCC_ClockConfig+0x1bc>)
 8003922:	689b      	ldr	r3, [r3, #8]
 8003924:	091b      	lsrs	r3, r3, #4
 8003926:	f003 030f 	and.w	r3, r3, #15
 800392a:	490a      	ldr	r1, [pc, #40]	@ (8003954 <HAL_RCC_ClockConfig+0x1c0>)
 800392c:	5ccb      	ldrb	r3, [r1, r3]
 800392e:	fa22 f303 	lsr.w	r3, r2, r3
 8003932:	4a09      	ldr	r2, [pc, #36]	@ (8003958 <HAL_RCC_ClockConfig+0x1c4>)
 8003934:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8003936:	4b09      	ldr	r3, [pc, #36]	@ (800395c <HAL_RCC_ClockConfig+0x1c8>)
 8003938:	681b      	ldr	r3, [r3, #0]
 800393a:	4618      	mov	r0, r3
 800393c:	f7fe fbe8 	bl	8002110 <HAL_InitTick>

  return HAL_OK;
 8003940:	2300      	movs	r3, #0
}
 8003942:	4618      	mov	r0, r3
 8003944:	3710      	adds	r7, #16
 8003946:	46bd      	mov	sp, r7
 8003948:	bd80      	pop	{r7, pc}
 800394a:	bf00      	nop
 800394c:	40023c00 	.word	0x40023c00
 8003950:	40023800 	.word	0x40023800
 8003954:	0800a318 	.word	0x0800a318
 8003958:	20000000 	.word	0x20000000
 800395c:	20000004 	.word	0x20000004

08003960 <HAL_RCC_GetHCLKFreq>:
=======
 8003a2e:	f000 f855 	bl	8003adc <HAL_RCC_GetSysClockFreq>
 8003a32:	4602      	mov	r2, r0
 8003a34:	4b0b      	ldr	r3, [pc, #44]	@ (8003a64 <HAL_RCC_ClockConfig+0x1bc>)
 8003a36:	689b      	ldr	r3, [r3, #8]
 8003a38:	091b      	lsrs	r3, r3, #4
 8003a3a:	f003 030f 	and.w	r3, r3, #15
 8003a3e:	490a      	ldr	r1, [pc, #40]	@ (8003a68 <HAL_RCC_ClockConfig+0x1c0>)
 8003a40:	5ccb      	ldrb	r3, [r1, r3]
 8003a42:	fa22 f303 	lsr.w	r3, r2, r3
 8003a46:	4a09      	ldr	r2, [pc, #36]	@ (8003a6c <HAL_RCC_ClockConfig+0x1c4>)
 8003a48:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8003a4a:	4b09      	ldr	r3, [pc, #36]	@ (8003a70 <HAL_RCC_ClockConfig+0x1c8>)
 8003a4c:	681b      	ldr	r3, [r3, #0]
 8003a4e:	4618      	mov	r0, r3
 8003a50:	f7fe fbe8 	bl	8002224 <HAL_InitTick>

  return HAL_OK;
 8003a54:	2300      	movs	r3, #0
}
 8003a56:	4618      	mov	r0, r3
 8003a58:	3710      	adds	r7, #16
 8003a5a:	46bd      	mov	sp, r7
 8003a5c:	bd80      	pop	{r7, pc}
 8003a5e:	bf00      	nop
 8003a60:	40023c00 	.word	0x40023c00
 8003a64:	40023800 	.word	0x40023800
 8003a68:	0800a424 	.word	0x0800a424
 8003a6c:	20000000 	.word	0x20000000
 8003a70:	20000004 	.word	0x20000004

08003a74 <HAL_RCC_GetHCLKFreq>:
>>>>>>> 39e4d10438a821cc799a472af87a77c6796a1676
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
<<<<<<< HEAD
 8003960:	b480      	push	{r7}
 8003962:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8003964:	4b03      	ldr	r3, [pc, #12]	@ (8003974 <HAL_RCC_GetHCLKFreq+0x14>)
 8003966:	681b      	ldr	r3, [r3, #0]
}
 8003968:	4618      	mov	r0, r3
 800396a:	46bd      	mov	sp, r7
 800396c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003970:	4770      	bx	lr
 8003972:	bf00      	nop
 8003974:	20000000 	.word	0x20000000

08003978 <HAL_RCC_GetPCLK1Freq>:
=======
 8003a74:	b480      	push	{r7}
 8003a76:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8003a78:	4b03      	ldr	r3, [pc, #12]	@ (8003a88 <HAL_RCC_GetHCLKFreq+0x14>)
 8003a7a:	681b      	ldr	r3, [r3, #0]
}
 8003a7c:	4618      	mov	r0, r3
 8003a7e:	46bd      	mov	sp, r7
 8003a80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a84:	4770      	bx	lr
 8003a86:	bf00      	nop
 8003a88:	20000000 	.word	0x20000000

08003a8c <HAL_RCC_GetPCLK1Freq>:
>>>>>>> 39e4d10438a821cc799a472af87a77c6796a1676
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
<<<<<<< HEAD
 8003978:	b580      	push	{r7, lr}
 800397a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 800397c:	f7ff fff0 	bl	8003960 <HAL_RCC_GetHCLKFreq>
 8003980:	4602      	mov	r2, r0
 8003982:	4b05      	ldr	r3, [pc, #20]	@ (8003998 <HAL_RCC_GetPCLK1Freq+0x20>)
 8003984:	689b      	ldr	r3, [r3, #8]
 8003986:	0a9b      	lsrs	r3, r3, #10
 8003988:	f003 0307 	and.w	r3, r3, #7
 800398c:	4903      	ldr	r1, [pc, #12]	@ (800399c <HAL_RCC_GetPCLK1Freq+0x24>)
 800398e:	5ccb      	ldrb	r3, [r1, r3]
 8003990:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003994:	4618      	mov	r0, r3
 8003996:	bd80      	pop	{r7, pc}
 8003998:	40023800 	.word	0x40023800
 800399c:	0800a328 	.word	0x0800a328

080039a0 <HAL_RCC_GetPCLK2Freq>:
=======
 8003a8c:	b580      	push	{r7, lr}
 8003a8e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8003a90:	f7ff fff0 	bl	8003a74 <HAL_RCC_GetHCLKFreq>
 8003a94:	4602      	mov	r2, r0
 8003a96:	4b05      	ldr	r3, [pc, #20]	@ (8003aac <HAL_RCC_GetPCLK1Freq+0x20>)
 8003a98:	689b      	ldr	r3, [r3, #8]
 8003a9a:	0a9b      	lsrs	r3, r3, #10
 8003a9c:	f003 0307 	and.w	r3, r3, #7
 8003aa0:	4903      	ldr	r1, [pc, #12]	@ (8003ab0 <HAL_RCC_GetPCLK1Freq+0x24>)
 8003aa2:	5ccb      	ldrb	r3, [r1, r3]
 8003aa4:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003aa8:	4618      	mov	r0, r3
 8003aaa:	bd80      	pop	{r7, pc}
 8003aac:	40023800 	.word	0x40023800
 8003ab0:	0800a434 	.word	0x0800a434

08003ab4 <HAL_RCC_GetPCLK2Freq>:
>>>>>>> 39e4d10438a821cc799a472af87a77c6796a1676
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
<<<<<<< HEAD
 80039a0:	b580      	push	{r7, lr}
 80039a2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 80039a4:	f7ff ffdc 	bl	8003960 <HAL_RCC_GetHCLKFreq>
 80039a8:	4602      	mov	r2, r0
 80039aa:	4b05      	ldr	r3, [pc, #20]	@ (80039c0 <HAL_RCC_GetPCLK2Freq+0x20>)
 80039ac:	689b      	ldr	r3, [r3, #8]
 80039ae:	0b5b      	lsrs	r3, r3, #13
 80039b0:	f003 0307 	and.w	r3, r3, #7
 80039b4:	4903      	ldr	r1, [pc, #12]	@ (80039c4 <HAL_RCC_GetPCLK2Freq+0x24>)
 80039b6:	5ccb      	ldrb	r3, [r1, r3]
 80039b8:	fa22 f303 	lsr.w	r3, r2, r3
}
 80039bc:	4618      	mov	r0, r3
 80039be:	bd80      	pop	{r7, pc}
 80039c0:	40023800 	.word	0x40023800
 80039c4:	0800a328 	.word	0x0800a328

080039c8 <HAL_RCC_GetSysClockFreq>:
=======
 8003ab4:	b580      	push	{r7, lr}
 8003ab6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8003ab8:	f7ff ffdc 	bl	8003a74 <HAL_RCC_GetHCLKFreq>
 8003abc:	4602      	mov	r2, r0
 8003abe:	4b05      	ldr	r3, [pc, #20]	@ (8003ad4 <HAL_RCC_GetPCLK2Freq+0x20>)
 8003ac0:	689b      	ldr	r3, [r3, #8]
 8003ac2:	0b5b      	lsrs	r3, r3, #13
 8003ac4:	f003 0307 	and.w	r3, r3, #7
 8003ac8:	4903      	ldr	r1, [pc, #12]	@ (8003ad8 <HAL_RCC_GetPCLK2Freq+0x24>)
 8003aca:	5ccb      	ldrb	r3, [r1, r3]
 8003acc:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003ad0:	4618      	mov	r0, r3
 8003ad2:	bd80      	pop	{r7, pc}
 8003ad4:	40023800 	.word	0x40023800
 8003ad8:	0800a434 	.word	0x0800a434

08003adc <HAL_RCC_GetSysClockFreq>:
>>>>>>> 39e4d10438a821cc799a472af87a77c6796a1676
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
<<<<<<< HEAD
 80039c8:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80039cc:	b0ae      	sub	sp, #184	@ 0xb8
 80039ce:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 80039d0:	2300      	movs	r3, #0
 80039d2:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
  uint32_t pllvco = 0U;
 80039d6:	2300      	movs	r3, #0
 80039d8:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
  uint32_t pllp = 0U;
 80039dc:	2300      	movs	r3, #0
 80039de:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
  uint32_t pllr = 0U;
 80039e2:	2300      	movs	r3, #0
 80039e4:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
  uint32_t sysclockfreq = 0U;
 80039e8:	2300      	movs	r3, #0
 80039ea:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80039ee:	4bcb      	ldr	r3, [pc, #812]	@ (8003d1c <HAL_RCC_GetSysClockFreq+0x354>)
 80039f0:	689b      	ldr	r3, [r3, #8]
 80039f2:	f003 030c 	and.w	r3, r3, #12
 80039f6:	2b0c      	cmp	r3, #12
 80039f8:	f200 8206 	bhi.w	8003e08 <HAL_RCC_GetSysClockFreq+0x440>
 80039fc:	a201      	add	r2, pc, #4	@ (adr r2, 8003a04 <HAL_RCC_GetSysClockFreq+0x3c>)
 80039fe:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003a02:	bf00      	nop
 8003a04:	08003a39 	.word	0x08003a39
 8003a08:	08003e09 	.word	0x08003e09
 8003a0c:	08003e09 	.word	0x08003e09
 8003a10:	08003e09 	.word	0x08003e09
 8003a14:	08003a41 	.word	0x08003a41
 8003a18:	08003e09 	.word	0x08003e09
 8003a1c:	08003e09 	.word	0x08003e09
 8003a20:	08003e09 	.word	0x08003e09
 8003a24:	08003a49 	.word	0x08003a49
 8003a28:	08003e09 	.word	0x08003e09
 8003a2c:	08003e09 	.word	0x08003e09
 8003a30:	08003e09 	.word	0x08003e09
 8003a34:	08003c39 	.word	0x08003c39
=======
 8003adc:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8003ae0:	b0ae      	sub	sp, #184	@ 0xb8
 8003ae2:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 8003ae4:	2300      	movs	r3, #0
 8003ae6:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
  uint32_t pllvco = 0U;
 8003aea:	2300      	movs	r3, #0
 8003aec:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
  uint32_t pllp = 0U;
 8003af0:	2300      	movs	r3, #0
 8003af2:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
  uint32_t pllr = 0U;
 8003af6:	2300      	movs	r3, #0
 8003af8:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
  uint32_t sysclockfreq = 0U;
 8003afc:	2300      	movs	r3, #0
 8003afe:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8003b02:	4bcb      	ldr	r3, [pc, #812]	@ (8003e30 <HAL_RCC_GetSysClockFreq+0x354>)
 8003b04:	689b      	ldr	r3, [r3, #8]
 8003b06:	f003 030c 	and.w	r3, r3, #12
 8003b0a:	2b0c      	cmp	r3, #12
 8003b0c:	f200 8206 	bhi.w	8003f1c <HAL_RCC_GetSysClockFreq+0x440>
 8003b10:	a201      	add	r2, pc, #4	@ (adr r2, 8003b18 <HAL_RCC_GetSysClockFreq+0x3c>)
 8003b12:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003b16:	bf00      	nop
 8003b18:	08003b4d 	.word	0x08003b4d
 8003b1c:	08003f1d 	.word	0x08003f1d
 8003b20:	08003f1d 	.word	0x08003f1d
 8003b24:	08003f1d 	.word	0x08003f1d
 8003b28:	08003b55 	.word	0x08003b55
 8003b2c:	08003f1d 	.word	0x08003f1d
 8003b30:	08003f1d 	.word	0x08003f1d
 8003b34:	08003f1d 	.word	0x08003f1d
 8003b38:	08003b5d 	.word	0x08003b5d
 8003b3c:	08003f1d 	.word	0x08003f1d
 8003b40:	08003f1d 	.word	0x08003f1d
 8003b44:	08003f1d 	.word	0x08003f1d
 8003b48:	08003d4d 	.word	0x08003d4d
>>>>>>> 39e4d10438a821cc799a472af87a77c6796a1676
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
<<<<<<< HEAD
 8003a38:	4bb9      	ldr	r3, [pc, #740]	@ (8003d20 <HAL_RCC_GetSysClockFreq+0x358>)
 8003a3a:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
       break;
 8003a3e:	e1e7      	b.n	8003e10 <HAL_RCC_GetSysClockFreq+0x448>
=======
 8003b4c:	4bb9      	ldr	r3, [pc, #740]	@ (8003e34 <HAL_RCC_GetSysClockFreq+0x358>)
 8003b4e:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
       break;
 8003b52:	e1e7      	b.n	8003f24 <HAL_RCC_GetSysClockFreq+0x448>
>>>>>>> 39e4d10438a821cc799a472af87a77c6796a1676
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
<<<<<<< HEAD
 8003a40:	4bb8      	ldr	r3, [pc, #736]	@ (8003d24 <HAL_RCC_GetSysClockFreq+0x35c>)
 8003a42:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
      break;
 8003a46:	e1e3      	b.n	8003e10 <HAL_RCC_GetSysClockFreq+0x448>
=======
 8003b54:	4bb8      	ldr	r3, [pc, #736]	@ (8003e38 <HAL_RCC_GetSysClockFreq+0x35c>)
 8003b56:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
      break;
 8003b5a:	e1e3      	b.n	8003f24 <HAL_RCC_GetSysClockFreq+0x448>
>>>>>>> 39e4d10438a821cc799a472af87a77c6796a1676
    }
    case RCC_CFGR_SWS_PLL:  /* PLL/PLLP used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
<<<<<<< HEAD
 8003a48:	4bb4      	ldr	r3, [pc, #720]	@ (8003d1c <HAL_RCC_GetSysClockFreq+0x354>)
 8003a4a:	685b      	ldr	r3, [r3, #4]
 8003a4c:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8003a50:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8003a54:	4bb1      	ldr	r3, [pc, #708]	@ (8003d1c <HAL_RCC_GetSysClockFreq+0x354>)
 8003a56:	685b      	ldr	r3, [r3, #4]
 8003a58:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8003a5c:	2b00      	cmp	r3, #0
 8003a5e:	d071      	beq.n	8003b44 <HAL_RCC_GetSysClockFreq+0x17c>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003a60:	4bae      	ldr	r3, [pc, #696]	@ (8003d1c <HAL_RCC_GetSysClockFreq+0x354>)
 8003a62:	685b      	ldr	r3, [r3, #4]
 8003a64:	099b      	lsrs	r3, r3, #6
 8003a66:	2200      	movs	r2, #0
 8003a68:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 8003a6c:	f8c7 209c 	str.w	r2, [r7, #156]	@ 0x9c
 8003a70:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8003a74:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003a78:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 8003a7c:	2300      	movs	r3, #0
 8003a7e:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 8003a82:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	@ 0x90
 8003a86:	4622      	mov	r2, r4
 8003a88:	462b      	mov	r3, r5
 8003a8a:	f04f 0000 	mov.w	r0, #0
 8003a8e:	f04f 0100 	mov.w	r1, #0
 8003a92:	0159      	lsls	r1, r3, #5
 8003a94:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8003a98:	0150      	lsls	r0, r2, #5
 8003a9a:	4602      	mov	r2, r0
 8003a9c:	460b      	mov	r3, r1
 8003a9e:	4621      	mov	r1, r4
 8003aa0:	1a51      	subs	r1, r2, r1
 8003aa2:	6439      	str	r1, [r7, #64]	@ 0x40
 8003aa4:	4629      	mov	r1, r5
 8003aa6:	eb63 0301 	sbc.w	r3, r3, r1
 8003aaa:	647b      	str	r3, [r7, #68]	@ 0x44
 8003aac:	f04f 0200 	mov.w	r2, #0
 8003ab0:	f04f 0300 	mov.w	r3, #0
 8003ab4:	e9d7 8910 	ldrd	r8, r9, [r7, #64]	@ 0x40
 8003ab8:	4649      	mov	r1, r9
 8003aba:	018b      	lsls	r3, r1, #6
 8003abc:	4641      	mov	r1, r8
 8003abe:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8003ac2:	4641      	mov	r1, r8
 8003ac4:	018a      	lsls	r2, r1, #6
 8003ac6:	4641      	mov	r1, r8
 8003ac8:	1a51      	subs	r1, r2, r1
 8003aca:	63b9      	str	r1, [r7, #56]	@ 0x38
 8003acc:	4649      	mov	r1, r9
 8003ace:	eb63 0301 	sbc.w	r3, r3, r1
 8003ad2:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8003ad4:	f04f 0200 	mov.w	r2, #0
 8003ad8:	f04f 0300 	mov.w	r3, #0
 8003adc:	e9d7 890e 	ldrd	r8, r9, [r7, #56]	@ 0x38
 8003ae0:	4649      	mov	r1, r9
 8003ae2:	00cb      	lsls	r3, r1, #3
 8003ae4:	4641      	mov	r1, r8
 8003ae6:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8003aea:	4641      	mov	r1, r8
 8003aec:	00ca      	lsls	r2, r1, #3
 8003aee:	4610      	mov	r0, r2
 8003af0:	4619      	mov	r1, r3
 8003af2:	4603      	mov	r3, r0
 8003af4:	4622      	mov	r2, r4
 8003af6:	189b      	adds	r3, r3, r2
 8003af8:	633b      	str	r3, [r7, #48]	@ 0x30
 8003afa:	462b      	mov	r3, r5
 8003afc:	460a      	mov	r2, r1
 8003afe:	eb42 0303 	adc.w	r3, r2, r3
 8003b02:	637b      	str	r3, [r7, #52]	@ 0x34
 8003b04:	f04f 0200 	mov.w	r2, #0
 8003b08:	f04f 0300 	mov.w	r3, #0
 8003b0c:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	@ 0x30
 8003b10:	4629      	mov	r1, r5
 8003b12:	024b      	lsls	r3, r1, #9
 8003b14:	4621      	mov	r1, r4
 8003b16:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8003b1a:	4621      	mov	r1, r4
 8003b1c:	024a      	lsls	r2, r1, #9
 8003b1e:	4610      	mov	r0, r2
 8003b20:	4619      	mov	r1, r3
 8003b22:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8003b26:	2200      	movs	r2, #0
 8003b28:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 8003b2c:	f8c7 208c 	str.w	r2, [r7, #140]	@ 0x8c
 8003b30:	e9d7 2322 	ldrd	r2, r3, [r7, #136]	@ 0x88
 8003b34:	f7fd f8a8 	bl	8000c88 <__aeabi_uldivmod>
 8003b38:	4602      	mov	r2, r0
 8003b3a:	460b      	mov	r3, r1
 8003b3c:	4613      	mov	r3, r2
 8003b3e:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8003b42:	e067      	b.n	8003c14 <HAL_RCC_GetSysClockFreq+0x24c>
=======
 8003b5c:	4bb4      	ldr	r3, [pc, #720]	@ (8003e30 <HAL_RCC_GetSysClockFreq+0x354>)
 8003b5e:	685b      	ldr	r3, [r3, #4]
 8003b60:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8003b64:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8003b68:	4bb1      	ldr	r3, [pc, #708]	@ (8003e30 <HAL_RCC_GetSysClockFreq+0x354>)
 8003b6a:	685b      	ldr	r3, [r3, #4]
 8003b6c:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8003b70:	2b00      	cmp	r3, #0
 8003b72:	d071      	beq.n	8003c58 <HAL_RCC_GetSysClockFreq+0x17c>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003b74:	4bae      	ldr	r3, [pc, #696]	@ (8003e30 <HAL_RCC_GetSysClockFreq+0x354>)
 8003b76:	685b      	ldr	r3, [r3, #4]
 8003b78:	099b      	lsrs	r3, r3, #6
 8003b7a:	2200      	movs	r2, #0
 8003b7c:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 8003b80:	f8c7 209c 	str.w	r2, [r7, #156]	@ 0x9c
 8003b84:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8003b88:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003b8c:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 8003b90:	2300      	movs	r3, #0
 8003b92:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 8003b96:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	@ 0x90
 8003b9a:	4622      	mov	r2, r4
 8003b9c:	462b      	mov	r3, r5
 8003b9e:	f04f 0000 	mov.w	r0, #0
 8003ba2:	f04f 0100 	mov.w	r1, #0
 8003ba6:	0159      	lsls	r1, r3, #5
 8003ba8:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8003bac:	0150      	lsls	r0, r2, #5
 8003bae:	4602      	mov	r2, r0
 8003bb0:	460b      	mov	r3, r1
 8003bb2:	4621      	mov	r1, r4
 8003bb4:	1a51      	subs	r1, r2, r1
 8003bb6:	6439      	str	r1, [r7, #64]	@ 0x40
 8003bb8:	4629      	mov	r1, r5
 8003bba:	eb63 0301 	sbc.w	r3, r3, r1
 8003bbe:	647b      	str	r3, [r7, #68]	@ 0x44
 8003bc0:	f04f 0200 	mov.w	r2, #0
 8003bc4:	f04f 0300 	mov.w	r3, #0
 8003bc8:	e9d7 8910 	ldrd	r8, r9, [r7, #64]	@ 0x40
 8003bcc:	4649      	mov	r1, r9
 8003bce:	018b      	lsls	r3, r1, #6
 8003bd0:	4641      	mov	r1, r8
 8003bd2:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8003bd6:	4641      	mov	r1, r8
 8003bd8:	018a      	lsls	r2, r1, #6
 8003bda:	4641      	mov	r1, r8
 8003bdc:	1a51      	subs	r1, r2, r1
 8003bde:	63b9      	str	r1, [r7, #56]	@ 0x38
 8003be0:	4649      	mov	r1, r9
 8003be2:	eb63 0301 	sbc.w	r3, r3, r1
 8003be6:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8003be8:	f04f 0200 	mov.w	r2, #0
 8003bec:	f04f 0300 	mov.w	r3, #0
 8003bf0:	e9d7 890e 	ldrd	r8, r9, [r7, #56]	@ 0x38
 8003bf4:	4649      	mov	r1, r9
 8003bf6:	00cb      	lsls	r3, r1, #3
 8003bf8:	4641      	mov	r1, r8
 8003bfa:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8003bfe:	4641      	mov	r1, r8
 8003c00:	00ca      	lsls	r2, r1, #3
 8003c02:	4610      	mov	r0, r2
 8003c04:	4619      	mov	r1, r3
 8003c06:	4603      	mov	r3, r0
 8003c08:	4622      	mov	r2, r4
 8003c0a:	189b      	adds	r3, r3, r2
 8003c0c:	633b      	str	r3, [r7, #48]	@ 0x30
 8003c0e:	462b      	mov	r3, r5
 8003c10:	460a      	mov	r2, r1
 8003c12:	eb42 0303 	adc.w	r3, r2, r3
 8003c16:	637b      	str	r3, [r7, #52]	@ 0x34
 8003c18:	f04f 0200 	mov.w	r2, #0
 8003c1c:	f04f 0300 	mov.w	r3, #0
 8003c20:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	@ 0x30
 8003c24:	4629      	mov	r1, r5
 8003c26:	024b      	lsls	r3, r1, #9
 8003c28:	4621      	mov	r1, r4
 8003c2a:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8003c2e:	4621      	mov	r1, r4
 8003c30:	024a      	lsls	r2, r1, #9
 8003c32:	4610      	mov	r0, r2
 8003c34:	4619      	mov	r1, r3
 8003c36:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8003c3a:	2200      	movs	r2, #0
 8003c3c:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 8003c40:	f8c7 208c 	str.w	r2, [r7, #140]	@ 0x8c
 8003c44:	e9d7 2322 	ldrd	r2, r3, [r7, #136]	@ 0x88
 8003c48:	f7fd f81e 	bl	8000c88 <__aeabi_uldivmod>
 8003c4c:	4602      	mov	r2, r0
 8003c4e:	460b      	mov	r3, r1
 8003c50:	4613      	mov	r3, r2
 8003c52:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8003c56:	e067      	b.n	8003d28 <HAL_RCC_GetSysClockFreq+0x24c>
>>>>>>> 39e4d10438a821cc799a472af87a77c6796a1676
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
<<<<<<< HEAD
 8003b44:	4b75      	ldr	r3, [pc, #468]	@ (8003d1c <HAL_RCC_GetSysClockFreq+0x354>)
 8003b46:	685b      	ldr	r3, [r3, #4]
 8003b48:	099b      	lsrs	r3, r3, #6
 8003b4a:	2200      	movs	r2, #0
 8003b4c:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8003b50:	f8c7 2084 	str.w	r2, [r7, #132]	@ 0x84
 8003b54:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 8003b58:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003b5c:	67bb      	str	r3, [r7, #120]	@ 0x78
 8003b5e:	2300      	movs	r3, #0
 8003b60:	67fb      	str	r3, [r7, #124]	@ 0x7c
 8003b62:	e9d7 451e 	ldrd	r4, r5, [r7, #120]	@ 0x78
 8003b66:	4622      	mov	r2, r4
 8003b68:	462b      	mov	r3, r5
 8003b6a:	f04f 0000 	mov.w	r0, #0
 8003b6e:	f04f 0100 	mov.w	r1, #0
 8003b72:	0159      	lsls	r1, r3, #5
 8003b74:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8003b78:	0150      	lsls	r0, r2, #5
 8003b7a:	4602      	mov	r2, r0
 8003b7c:	460b      	mov	r3, r1
 8003b7e:	4621      	mov	r1, r4
 8003b80:	1a51      	subs	r1, r2, r1
 8003b82:	62b9      	str	r1, [r7, #40]	@ 0x28
 8003b84:	4629      	mov	r1, r5
 8003b86:	eb63 0301 	sbc.w	r3, r3, r1
 8003b8a:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8003b8c:	f04f 0200 	mov.w	r2, #0
 8003b90:	f04f 0300 	mov.w	r3, #0
 8003b94:	e9d7 890a 	ldrd	r8, r9, [r7, #40]	@ 0x28
 8003b98:	4649      	mov	r1, r9
 8003b9a:	018b      	lsls	r3, r1, #6
 8003b9c:	4641      	mov	r1, r8
 8003b9e:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8003ba2:	4641      	mov	r1, r8
 8003ba4:	018a      	lsls	r2, r1, #6
 8003ba6:	4641      	mov	r1, r8
 8003ba8:	ebb2 0a01 	subs.w	sl, r2, r1
 8003bac:	4649      	mov	r1, r9
 8003bae:	eb63 0b01 	sbc.w	fp, r3, r1
 8003bb2:	f04f 0200 	mov.w	r2, #0
 8003bb6:	f04f 0300 	mov.w	r3, #0
 8003bba:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8003bbe:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8003bc2:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8003bc6:	4692      	mov	sl, r2
 8003bc8:	469b      	mov	fp, r3
 8003bca:	4623      	mov	r3, r4
 8003bcc:	eb1a 0303 	adds.w	r3, sl, r3
 8003bd0:	623b      	str	r3, [r7, #32]
 8003bd2:	462b      	mov	r3, r5
 8003bd4:	eb4b 0303 	adc.w	r3, fp, r3
 8003bd8:	627b      	str	r3, [r7, #36]	@ 0x24
 8003bda:	f04f 0200 	mov.w	r2, #0
 8003bde:	f04f 0300 	mov.w	r3, #0
 8003be2:	e9d7 4508 	ldrd	r4, r5, [r7, #32]
 8003be6:	4629      	mov	r1, r5
 8003be8:	028b      	lsls	r3, r1, #10
 8003bea:	4621      	mov	r1, r4
 8003bec:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8003bf0:	4621      	mov	r1, r4
 8003bf2:	028a      	lsls	r2, r1, #10
 8003bf4:	4610      	mov	r0, r2
 8003bf6:	4619      	mov	r1, r3
 8003bf8:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8003bfc:	2200      	movs	r2, #0
 8003bfe:	673b      	str	r3, [r7, #112]	@ 0x70
 8003c00:	677a      	str	r2, [r7, #116]	@ 0x74
 8003c02:	e9d7 231c 	ldrd	r2, r3, [r7, #112]	@ 0x70
 8003c06:	f7fd f83f 	bl	8000c88 <__aeabi_uldivmod>
 8003c0a:	4602      	mov	r2, r0
 8003c0c:	460b      	mov	r3, r1
 8003c0e:	4613      	mov	r3, r2
 8003c10:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8003c14:	4b41      	ldr	r3, [pc, #260]	@ (8003d1c <HAL_RCC_GetSysClockFreq+0x354>)
 8003c16:	685b      	ldr	r3, [r3, #4]
 8003c18:	0c1b      	lsrs	r3, r3, #16
 8003c1a:	f003 0303 	and.w	r3, r3, #3
 8003c1e:	3301      	adds	r3, #1
 8003c20:	005b      	lsls	r3, r3, #1
 8003c22:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8

      sysclockfreq = pllvco/pllp;
 8003c26:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 8003c2a:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 8003c2e:	fbb2 f3f3 	udiv	r3, r2, r3
 8003c32:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
      break;
 8003c36:	e0eb      	b.n	8003e10 <HAL_RCC_GetSysClockFreq+0x448>
=======
 8003c58:	4b75      	ldr	r3, [pc, #468]	@ (8003e30 <HAL_RCC_GetSysClockFreq+0x354>)
 8003c5a:	685b      	ldr	r3, [r3, #4]
 8003c5c:	099b      	lsrs	r3, r3, #6
 8003c5e:	2200      	movs	r2, #0
 8003c60:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8003c64:	f8c7 2084 	str.w	r2, [r7, #132]	@ 0x84
 8003c68:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 8003c6c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003c70:	67bb      	str	r3, [r7, #120]	@ 0x78
 8003c72:	2300      	movs	r3, #0
 8003c74:	67fb      	str	r3, [r7, #124]	@ 0x7c
 8003c76:	e9d7 451e 	ldrd	r4, r5, [r7, #120]	@ 0x78
 8003c7a:	4622      	mov	r2, r4
 8003c7c:	462b      	mov	r3, r5
 8003c7e:	f04f 0000 	mov.w	r0, #0
 8003c82:	f04f 0100 	mov.w	r1, #0
 8003c86:	0159      	lsls	r1, r3, #5
 8003c88:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8003c8c:	0150      	lsls	r0, r2, #5
 8003c8e:	4602      	mov	r2, r0
 8003c90:	460b      	mov	r3, r1
 8003c92:	4621      	mov	r1, r4
 8003c94:	1a51      	subs	r1, r2, r1
 8003c96:	62b9      	str	r1, [r7, #40]	@ 0x28
 8003c98:	4629      	mov	r1, r5
 8003c9a:	eb63 0301 	sbc.w	r3, r3, r1
 8003c9e:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8003ca0:	f04f 0200 	mov.w	r2, #0
 8003ca4:	f04f 0300 	mov.w	r3, #0
 8003ca8:	e9d7 890a 	ldrd	r8, r9, [r7, #40]	@ 0x28
 8003cac:	4649      	mov	r1, r9
 8003cae:	018b      	lsls	r3, r1, #6
 8003cb0:	4641      	mov	r1, r8
 8003cb2:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8003cb6:	4641      	mov	r1, r8
 8003cb8:	018a      	lsls	r2, r1, #6
 8003cba:	4641      	mov	r1, r8
 8003cbc:	ebb2 0a01 	subs.w	sl, r2, r1
 8003cc0:	4649      	mov	r1, r9
 8003cc2:	eb63 0b01 	sbc.w	fp, r3, r1
 8003cc6:	f04f 0200 	mov.w	r2, #0
 8003cca:	f04f 0300 	mov.w	r3, #0
 8003cce:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8003cd2:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8003cd6:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8003cda:	4692      	mov	sl, r2
 8003cdc:	469b      	mov	fp, r3
 8003cde:	4623      	mov	r3, r4
 8003ce0:	eb1a 0303 	adds.w	r3, sl, r3
 8003ce4:	623b      	str	r3, [r7, #32]
 8003ce6:	462b      	mov	r3, r5
 8003ce8:	eb4b 0303 	adc.w	r3, fp, r3
 8003cec:	627b      	str	r3, [r7, #36]	@ 0x24
 8003cee:	f04f 0200 	mov.w	r2, #0
 8003cf2:	f04f 0300 	mov.w	r3, #0
 8003cf6:	e9d7 4508 	ldrd	r4, r5, [r7, #32]
 8003cfa:	4629      	mov	r1, r5
 8003cfc:	028b      	lsls	r3, r1, #10
 8003cfe:	4621      	mov	r1, r4
 8003d00:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8003d04:	4621      	mov	r1, r4
 8003d06:	028a      	lsls	r2, r1, #10
 8003d08:	4610      	mov	r0, r2
 8003d0a:	4619      	mov	r1, r3
 8003d0c:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8003d10:	2200      	movs	r2, #0
 8003d12:	673b      	str	r3, [r7, #112]	@ 0x70
 8003d14:	677a      	str	r2, [r7, #116]	@ 0x74
 8003d16:	e9d7 231c 	ldrd	r2, r3, [r7, #112]	@ 0x70
 8003d1a:	f7fc ffb5 	bl	8000c88 <__aeabi_uldivmod>
 8003d1e:	4602      	mov	r2, r0
 8003d20:	460b      	mov	r3, r1
 8003d22:	4613      	mov	r3, r2
 8003d24:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8003d28:	4b41      	ldr	r3, [pc, #260]	@ (8003e30 <HAL_RCC_GetSysClockFreq+0x354>)
 8003d2a:	685b      	ldr	r3, [r3, #4]
 8003d2c:	0c1b      	lsrs	r3, r3, #16
 8003d2e:	f003 0303 	and.w	r3, r3, #3
 8003d32:	3301      	adds	r3, #1
 8003d34:	005b      	lsls	r3, r3, #1
 8003d36:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8

      sysclockfreq = pllvco/pllp;
 8003d3a:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 8003d3e:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 8003d42:	fbb2 f3f3 	udiv	r3, r2, r3
 8003d46:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
      break;
 8003d4a:	e0eb      	b.n	8003f24 <HAL_RCC_GetSysClockFreq+0x448>
>>>>>>> 39e4d10438a821cc799a472af87a77c6796a1676
    }
    case RCC_CFGR_SWS_PLLR:  /* PLL/PLLR used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
<<<<<<< HEAD
 8003c38:	4b38      	ldr	r3, [pc, #224]	@ (8003d1c <HAL_RCC_GetSysClockFreq+0x354>)
 8003c3a:	685b      	ldr	r3, [r3, #4]
 8003c3c:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8003c40:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8003c44:	4b35      	ldr	r3, [pc, #212]	@ (8003d1c <HAL_RCC_GetSysClockFreq+0x354>)
 8003c46:	685b      	ldr	r3, [r3, #4]
 8003c48:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8003c4c:	2b00      	cmp	r3, #0
 8003c4e:	d06b      	beq.n	8003d28 <HAL_RCC_GetSysClockFreq+0x360>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003c50:	4b32      	ldr	r3, [pc, #200]	@ (8003d1c <HAL_RCC_GetSysClockFreq+0x354>)
 8003c52:	685b      	ldr	r3, [r3, #4]
 8003c54:	099b      	lsrs	r3, r3, #6
 8003c56:	2200      	movs	r2, #0
 8003c58:	66bb      	str	r3, [r7, #104]	@ 0x68
 8003c5a:	66fa      	str	r2, [r7, #108]	@ 0x6c
 8003c5c:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8003c5e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003c62:	663b      	str	r3, [r7, #96]	@ 0x60
 8003c64:	2300      	movs	r3, #0
 8003c66:	667b      	str	r3, [r7, #100]	@ 0x64
 8003c68:	e9d7 4518 	ldrd	r4, r5, [r7, #96]	@ 0x60
 8003c6c:	4622      	mov	r2, r4
 8003c6e:	462b      	mov	r3, r5
 8003c70:	f04f 0000 	mov.w	r0, #0
 8003c74:	f04f 0100 	mov.w	r1, #0
 8003c78:	0159      	lsls	r1, r3, #5
 8003c7a:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8003c7e:	0150      	lsls	r0, r2, #5
 8003c80:	4602      	mov	r2, r0
 8003c82:	460b      	mov	r3, r1
 8003c84:	4621      	mov	r1, r4
 8003c86:	1a51      	subs	r1, r2, r1
 8003c88:	61b9      	str	r1, [r7, #24]
 8003c8a:	4629      	mov	r1, r5
 8003c8c:	eb63 0301 	sbc.w	r3, r3, r1
 8003c90:	61fb      	str	r3, [r7, #28]
 8003c92:	f04f 0200 	mov.w	r2, #0
 8003c96:	f04f 0300 	mov.w	r3, #0
 8003c9a:	e9d7 ab06 	ldrd	sl, fp, [r7, #24]
 8003c9e:	4659      	mov	r1, fp
 8003ca0:	018b      	lsls	r3, r1, #6
 8003ca2:	4651      	mov	r1, sl
 8003ca4:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8003ca8:	4651      	mov	r1, sl
 8003caa:	018a      	lsls	r2, r1, #6
 8003cac:	4651      	mov	r1, sl
 8003cae:	ebb2 0801 	subs.w	r8, r2, r1
 8003cb2:	4659      	mov	r1, fp
 8003cb4:	eb63 0901 	sbc.w	r9, r3, r1
 8003cb8:	f04f 0200 	mov.w	r2, #0
 8003cbc:	f04f 0300 	mov.w	r3, #0
 8003cc0:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8003cc4:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8003cc8:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8003ccc:	4690      	mov	r8, r2
 8003cce:	4699      	mov	r9, r3
 8003cd0:	4623      	mov	r3, r4
 8003cd2:	eb18 0303 	adds.w	r3, r8, r3
 8003cd6:	613b      	str	r3, [r7, #16]
 8003cd8:	462b      	mov	r3, r5
 8003cda:	eb49 0303 	adc.w	r3, r9, r3
 8003cde:	617b      	str	r3, [r7, #20]
 8003ce0:	f04f 0200 	mov.w	r2, #0
 8003ce4:	f04f 0300 	mov.w	r3, #0
 8003ce8:	e9d7 4504 	ldrd	r4, r5, [r7, #16]
 8003cec:	4629      	mov	r1, r5
 8003cee:	024b      	lsls	r3, r1, #9
 8003cf0:	4621      	mov	r1, r4
 8003cf2:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8003cf6:	4621      	mov	r1, r4
 8003cf8:	024a      	lsls	r2, r1, #9
 8003cfa:	4610      	mov	r0, r2
 8003cfc:	4619      	mov	r1, r3
 8003cfe:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8003d02:	2200      	movs	r2, #0
 8003d04:	65bb      	str	r3, [r7, #88]	@ 0x58
 8003d06:	65fa      	str	r2, [r7, #92]	@ 0x5c
 8003d08:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	@ 0x58
 8003d0c:	f7fc ffbc 	bl	8000c88 <__aeabi_uldivmod>
 8003d10:	4602      	mov	r2, r0
 8003d12:	460b      	mov	r3, r1
 8003d14:	4613      	mov	r3, r2
 8003d16:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8003d1a:	e065      	b.n	8003de8 <HAL_RCC_GetSysClockFreq+0x420>
 8003d1c:	40023800 	.word	0x40023800
 8003d20:	00f42400 	.word	0x00f42400
 8003d24:	007a1200 	.word	0x007a1200
=======
 8003d4c:	4b38      	ldr	r3, [pc, #224]	@ (8003e30 <HAL_RCC_GetSysClockFreq+0x354>)
 8003d4e:	685b      	ldr	r3, [r3, #4]
 8003d50:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8003d54:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8003d58:	4b35      	ldr	r3, [pc, #212]	@ (8003e30 <HAL_RCC_GetSysClockFreq+0x354>)
 8003d5a:	685b      	ldr	r3, [r3, #4]
 8003d5c:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8003d60:	2b00      	cmp	r3, #0
 8003d62:	d06b      	beq.n	8003e3c <HAL_RCC_GetSysClockFreq+0x360>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003d64:	4b32      	ldr	r3, [pc, #200]	@ (8003e30 <HAL_RCC_GetSysClockFreq+0x354>)
 8003d66:	685b      	ldr	r3, [r3, #4]
 8003d68:	099b      	lsrs	r3, r3, #6
 8003d6a:	2200      	movs	r2, #0
 8003d6c:	66bb      	str	r3, [r7, #104]	@ 0x68
 8003d6e:	66fa      	str	r2, [r7, #108]	@ 0x6c
 8003d70:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8003d72:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003d76:	663b      	str	r3, [r7, #96]	@ 0x60
 8003d78:	2300      	movs	r3, #0
 8003d7a:	667b      	str	r3, [r7, #100]	@ 0x64
 8003d7c:	e9d7 4518 	ldrd	r4, r5, [r7, #96]	@ 0x60
 8003d80:	4622      	mov	r2, r4
 8003d82:	462b      	mov	r3, r5
 8003d84:	f04f 0000 	mov.w	r0, #0
 8003d88:	f04f 0100 	mov.w	r1, #0
 8003d8c:	0159      	lsls	r1, r3, #5
 8003d8e:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8003d92:	0150      	lsls	r0, r2, #5
 8003d94:	4602      	mov	r2, r0
 8003d96:	460b      	mov	r3, r1
 8003d98:	4621      	mov	r1, r4
 8003d9a:	1a51      	subs	r1, r2, r1
 8003d9c:	61b9      	str	r1, [r7, #24]
 8003d9e:	4629      	mov	r1, r5
 8003da0:	eb63 0301 	sbc.w	r3, r3, r1
 8003da4:	61fb      	str	r3, [r7, #28]
 8003da6:	f04f 0200 	mov.w	r2, #0
 8003daa:	f04f 0300 	mov.w	r3, #0
 8003dae:	e9d7 ab06 	ldrd	sl, fp, [r7, #24]
 8003db2:	4659      	mov	r1, fp
 8003db4:	018b      	lsls	r3, r1, #6
 8003db6:	4651      	mov	r1, sl
 8003db8:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8003dbc:	4651      	mov	r1, sl
 8003dbe:	018a      	lsls	r2, r1, #6
 8003dc0:	4651      	mov	r1, sl
 8003dc2:	ebb2 0801 	subs.w	r8, r2, r1
 8003dc6:	4659      	mov	r1, fp
 8003dc8:	eb63 0901 	sbc.w	r9, r3, r1
 8003dcc:	f04f 0200 	mov.w	r2, #0
 8003dd0:	f04f 0300 	mov.w	r3, #0
 8003dd4:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8003dd8:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8003ddc:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8003de0:	4690      	mov	r8, r2
 8003de2:	4699      	mov	r9, r3
 8003de4:	4623      	mov	r3, r4
 8003de6:	eb18 0303 	adds.w	r3, r8, r3
 8003dea:	613b      	str	r3, [r7, #16]
 8003dec:	462b      	mov	r3, r5
 8003dee:	eb49 0303 	adc.w	r3, r9, r3
 8003df2:	617b      	str	r3, [r7, #20]
 8003df4:	f04f 0200 	mov.w	r2, #0
 8003df8:	f04f 0300 	mov.w	r3, #0
 8003dfc:	e9d7 4504 	ldrd	r4, r5, [r7, #16]
 8003e00:	4629      	mov	r1, r5
 8003e02:	024b      	lsls	r3, r1, #9
 8003e04:	4621      	mov	r1, r4
 8003e06:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8003e0a:	4621      	mov	r1, r4
 8003e0c:	024a      	lsls	r2, r1, #9
 8003e0e:	4610      	mov	r0, r2
 8003e10:	4619      	mov	r1, r3
 8003e12:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8003e16:	2200      	movs	r2, #0
 8003e18:	65bb      	str	r3, [r7, #88]	@ 0x58
 8003e1a:	65fa      	str	r2, [r7, #92]	@ 0x5c
 8003e1c:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	@ 0x58
 8003e20:	f7fc ff32 	bl	8000c88 <__aeabi_uldivmod>
 8003e24:	4602      	mov	r2, r0
 8003e26:	460b      	mov	r3, r1
 8003e28:	4613      	mov	r3, r2
 8003e2a:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8003e2e:	e065      	b.n	8003efc <HAL_RCC_GetSysClockFreq+0x420>
 8003e30:	40023800 	.word	0x40023800
 8003e34:	00f42400 	.word	0x00f42400
 8003e38:	007a1200 	.word	0x007a1200
>>>>>>> 39e4d10438a821cc799a472af87a77c6796a1676
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
<<<<<<< HEAD
 8003d28:	4b3d      	ldr	r3, [pc, #244]	@ (8003e20 <HAL_RCC_GetSysClockFreq+0x458>)
 8003d2a:	685b      	ldr	r3, [r3, #4]
 8003d2c:	099b      	lsrs	r3, r3, #6
 8003d2e:	2200      	movs	r2, #0
 8003d30:	4618      	mov	r0, r3
 8003d32:	4611      	mov	r1, r2
 8003d34:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8003d38:	653b      	str	r3, [r7, #80]	@ 0x50
 8003d3a:	2300      	movs	r3, #0
 8003d3c:	657b      	str	r3, [r7, #84]	@ 0x54
 8003d3e:	e9d7 8914 	ldrd	r8, r9, [r7, #80]	@ 0x50
 8003d42:	4642      	mov	r2, r8
 8003d44:	464b      	mov	r3, r9
 8003d46:	f04f 0000 	mov.w	r0, #0
 8003d4a:	f04f 0100 	mov.w	r1, #0
 8003d4e:	0159      	lsls	r1, r3, #5
 8003d50:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8003d54:	0150      	lsls	r0, r2, #5
 8003d56:	4602      	mov	r2, r0
 8003d58:	460b      	mov	r3, r1
 8003d5a:	4641      	mov	r1, r8
 8003d5c:	1a51      	subs	r1, r2, r1
 8003d5e:	60b9      	str	r1, [r7, #8]
 8003d60:	4649      	mov	r1, r9
 8003d62:	eb63 0301 	sbc.w	r3, r3, r1
 8003d66:	60fb      	str	r3, [r7, #12]
 8003d68:	f04f 0200 	mov.w	r2, #0
 8003d6c:	f04f 0300 	mov.w	r3, #0
 8003d70:	e9d7 ab02 	ldrd	sl, fp, [r7, #8]
 8003d74:	4659      	mov	r1, fp
 8003d76:	018b      	lsls	r3, r1, #6
 8003d78:	4651      	mov	r1, sl
 8003d7a:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8003d7e:	4651      	mov	r1, sl
 8003d80:	018a      	lsls	r2, r1, #6
 8003d82:	4651      	mov	r1, sl
 8003d84:	1a54      	subs	r4, r2, r1
 8003d86:	4659      	mov	r1, fp
 8003d88:	eb63 0501 	sbc.w	r5, r3, r1
 8003d8c:	f04f 0200 	mov.w	r2, #0
 8003d90:	f04f 0300 	mov.w	r3, #0
 8003d94:	00eb      	lsls	r3, r5, #3
 8003d96:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8003d9a:	00e2      	lsls	r2, r4, #3
 8003d9c:	4614      	mov	r4, r2
 8003d9e:	461d      	mov	r5, r3
 8003da0:	4643      	mov	r3, r8
 8003da2:	18e3      	adds	r3, r4, r3
 8003da4:	603b      	str	r3, [r7, #0]
 8003da6:	464b      	mov	r3, r9
 8003da8:	eb45 0303 	adc.w	r3, r5, r3
 8003dac:	607b      	str	r3, [r7, #4]
 8003dae:	f04f 0200 	mov.w	r2, #0
 8003db2:	f04f 0300 	mov.w	r3, #0
 8003db6:	e9d7 4500 	ldrd	r4, r5, [r7]
 8003dba:	4629      	mov	r1, r5
 8003dbc:	028b      	lsls	r3, r1, #10
 8003dbe:	4621      	mov	r1, r4
 8003dc0:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8003dc4:	4621      	mov	r1, r4
 8003dc6:	028a      	lsls	r2, r1, #10
 8003dc8:	4610      	mov	r0, r2
 8003dca:	4619      	mov	r1, r3
 8003dcc:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8003dd0:	2200      	movs	r2, #0
 8003dd2:	64bb      	str	r3, [r7, #72]	@ 0x48
 8003dd4:	64fa      	str	r2, [r7, #76]	@ 0x4c
 8003dd6:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	@ 0x48
 8003dda:	f7fc ff55 	bl	8000c88 <__aeabi_uldivmod>
 8003dde:	4602      	mov	r2, r0
 8003de0:	460b      	mov	r3, r1
 8003de2:	4613      	mov	r3, r2
 8003de4:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
      }
      pllr = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos);
 8003de8:	4b0d      	ldr	r3, [pc, #52]	@ (8003e20 <HAL_RCC_GetSysClockFreq+0x458>)
 8003dea:	685b      	ldr	r3, [r3, #4]
 8003dec:	0f1b      	lsrs	r3, r3, #28
 8003dee:	f003 0307 	and.w	r3, r3, #7
 8003df2:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4

      sysclockfreq = pllvco/pllr;
 8003df6:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 8003dfa:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 8003dfe:	fbb2 f3f3 	udiv	r3, r2, r3
 8003e02:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
      break;
 8003e06:	e003      	b.n	8003e10 <HAL_RCC_GetSysClockFreq+0x448>
=======
 8003e3c:	4b3d      	ldr	r3, [pc, #244]	@ (8003f34 <HAL_RCC_GetSysClockFreq+0x458>)
 8003e3e:	685b      	ldr	r3, [r3, #4]
 8003e40:	099b      	lsrs	r3, r3, #6
 8003e42:	2200      	movs	r2, #0
 8003e44:	4618      	mov	r0, r3
 8003e46:	4611      	mov	r1, r2
 8003e48:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8003e4c:	653b      	str	r3, [r7, #80]	@ 0x50
 8003e4e:	2300      	movs	r3, #0
 8003e50:	657b      	str	r3, [r7, #84]	@ 0x54
 8003e52:	e9d7 8914 	ldrd	r8, r9, [r7, #80]	@ 0x50
 8003e56:	4642      	mov	r2, r8
 8003e58:	464b      	mov	r3, r9
 8003e5a:	f04f 0000 	mov.w	r0, #0
 8003e5e:	f04f 0100 	mov.w	r1, #0
 8003e62:	0159      	lsls	r1, r3, #5
 8003e64:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8003e68:	0150      	lsls	r0, r2, #5
 8003e6a:	4602      	mov	r2, r0
 8003e6c:	460b      	mov	r3, r1
 8003e6e:	4641      	mov	r1, r8
 8003e70:	1a51      	subs	r1, r2, r1
 8003e72:	60b9      	str	r1, [r7, #8]
 8003e74:	4649      	mov	r1, r9
 8003e76:	eb63 0301 	sbc.w	r3, r3, r1
 8003e7a:	60fb      	str	r3, [r7, #12]
 8003e7c:	f04f 0200 	mov.w	r2, #0
 8003e80:	f04f 0300 	mov.w	r3, #0
 8003e84:	e9d7 ab02 	ldrd	sl, fp, [r7, #8]
 8003e88:	4659      	mov	r1, fp
 8003e8a:	018b      	lsls	r3, r1, #6
 8003e8c:	4651      	mov	r1, sl
 8003e8e:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8003e92:	4651      	mov	r1, sl
 8003e94:	018a      	lsls	r2, r1, #6
 8003e96:	4651      	mov	r1, sl
 8003e98:	1a54      	subs	r4, r2, r1
 8003e9a:	4659      	mov	r1, fp
 8003e9c:	eb63 0501 	sbc.w	r5, r3, r1
 8003ea0:	f04f 0200 	mov.w	r2, #0
 8003ea4:	f04f 0300 	mov.w	r3, #0
 8003ea8:	00eb      	lsls	r3, r5, #3
 8003eaa:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8003eae:	00e2      	lsls	r2, r4, #3
 8003eb0:	4614      	mov	r4, r2
 8003eb2:	461d      	mov	r5, r3
 8003eb4:	4643      	mov	r3, r8
 8003eb6:	18e3      	adds	r3, r4, r3
 8003eb8:	603b      	str	r3, [r7, #0]
 8003eba:	464b      	mov	r3, r9
 8003ebc:	eb45 0303 	adc.w	r3, r5, r3
 8003ec0:	607b      	str	r3, [r7, #4]
 8003ec2:	f04f 0200 	mov.w	r2, #0
 8003ec6:	f04f 0300 	mov.w	r3, #0
 8003eca:	e9d7 4500 	ldrd	r4, r5, [r7]
 8003ece:	4629      	mov	r1, r5
 8003ed0:	028b      	lsls	r3, r1, #10
 8003ed2:	4621      	mov	r1, r4
 8003ed4:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8003ed8:	4621      	mov	r1, r4
 8003eda:	028a      	lsls	r2, r1, #10
 8003edc:	4610      	mov	r0, r2
 8003ede:	4619      	mov	r1, r3
 8003ee0:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8003ee4:	2200      	movs	r2, #0
 8003ee6:	64bb      	str	r3, [r7, #72]	@ 0x48
 8003ee8:	64fa      	str	r2, [r7, #76]	@ 0x4c
 8003eea:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	@ 0x48
 8003eee:	f7fc fecb 	bl	8000c88 <__aeabi_uldivmod>
 8003ef2:	4602      	mov	r2, r0
 8003ef4:	460b      	mov	r3, r1
 8003ef6:	4613      	mov	r3, r2
 8003ef8:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
      }
      pllr = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos);
 8003efc:	4b0d      	ldr	r3, [pc, #52]	@ (8003f34 <HAL_RCC_GetSysClockFreq+0x458>)
 8003efe:	685b      	ldr	r3, [r3, #4]
 8003f00:	0f1b      	lsrs	r3, r3, #28
 8003f02:	f003 0307 	and.w	r3, r3, #7
 8003f06:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4

      sysclockfreq = pllvco/pllr;
 8003f0a:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 8003f0e:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 8003f12:	fbb2 f3f3 	udiv	r3, r2, r3
 8003f16:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
      break;
 8003f1a:	e003      	b.n	8003f24 <HAL_RCC_GetSysClockFreq+0x448>
>>>>>>> 39e4d10438a821cc799a472af87a77c6796a1676
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
<<<<<<< HEAD
 8003e08:	4b06      	ldr	r3, [pc, #24]	@ (8003e24 <HAL_RCC_GetSysClockFreq+0x45c>)
 8003e0a:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
      break;
 8003e0e:	bf00      	nop
    }
  }
  return sysclockfreq;
 8003e10:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
}
 8003e14:	4618      	mov	r0, r3
 8003e16:	37b8      	adds	r7, #184	@ 0xb8
 8003e18:	46bd      	mov	sp, r7
 8003e1a:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8003e1e:	bf00      	nop
 8003e20:	40023800 	.word	0x40023800
 8003e24:	00f42400 	.word	0x00f42400

08003e28 <HAL_RCC_OscConfig>:
=======
 8003f1c:	4b06      	ldr	r3, [pc, #24]	@ (8003f38 <HAL_RCC_GetSysClockFreq+0x45c>)
 8003f1e:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
      break;
 8003f22:	bf00      	nop
    }
  }
  return sysclockfreq;
 8003f24:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
}
 8003f28:	4618      	mov	r0, r3
 8003f2a:	37b8      	adds	r7, #184	@ 0xb8
 8003f2c:	46bd      	mov	sp, r7
 8003f2e:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8003f32:	bf00      	nop
 8003f34:	40023800 	.word	0x40023800
 8003f38:	00f42400 	.word	0x00f42400

08003f3c <HAL_RCC_OscConfig>:
>>>>>>> 39e4d10438a821cc799a472af87a77c6796a1676
  * @note   This function add the PLL/PLLR factor management during PLL configuration this feature
  *         is only available in STM32F410xx/STM32F446xx/STM32F469xx/STM32F479xx/STM32F412Zx/STM32F412Vx/STM32F412Rx/STM32F412Cx devices
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
<<<<<<< HEAD
 8003e28:	b580      	push	{r7, lr}
 8003e2a:	b086      	sub	sp, #24
 8003e2c:	af00      	add	r7, sp, #0
 8003e2e:	6078      	str	r0, [r7, #4]
=======
 8003f3c:	b580      	push	{r7, lr}
 8003f3e:	b086      	sub	sp, #24
 8003f40:	af00      	add	r7, sp, #0
 8003f42:	6078      	str	r0, [r7, #4]
>>>>>>> 39e4d10438a821cc799a472af87a77c6796a1676
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
<<<<<<< HEAD
 8003e30:	687b      	ldr	r3, [r7, #4]
 8003e32:	2b00      	cmp	r3, #0
 8003e34:	d101      	bne.n	8003e3a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8003e36:	2301      	movs	r3, #1
 8003e38:	e28d      	b.n	8004356 <HAL_RCC_OscConfig+0x52e>
=======
 8003f44:	687b      	ldr	r3, [r7, #4]
 8003f46:	2b00      	cmp	r3, #0
 8003f48:	d101      	bne.n	8003f4e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8003f4a:	2301      	movs	r3, #1
 8003f4c:	e28d      	b.n	800446a <HAL_RCC_OscConfig+0x52e>
>>>>>>> 39e4d10438a821cc799a472af87a77c6796a1676
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
<<<<<<< HEAD
 8003e3a:	687b      	ldr	r3, [r7, #4]
 8003e3c:	681b      	ldr	r3, [r3, #0]
 8003e3e:	f003 0301 	and.w	r3, r3, #1
 8003e42:	2b00      	cmp	r3, #0
 8003e44:	f000 8083 	beq.w	8003f4e <HAL_RCC_OscConfig+0x126>
=======
 8003f4e:	687b      	ldr	r3, [r7, #4]
 8003f50:	681b      	ldr	r3, [r3, #0]
 8003f52:	f003 0301 	and.w	r3, r3, #1
 8003f56:	2b00      	cmp	r3, #0
 8003f58:	f000 8083 	beq.w	8004062 <HAL_RCC_OscConfig+0x126>
>>>>>>> 39e4d10438a821cc799a472af87a77c6796a1676
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
<<<<<<< HEAD
 8003e48:	4b94      	ldr	r3, [pc, #592]	@ (800409c <HAL_RCC_OscConfig+0x274>)
 8003e4a:	689b      	ldr	r3, [r3, #8]
 8003e4c:	f003 030c 	and.w	r3, r3, #12
 8003e50:	2b04      	cmp	r3, #4
 8003e52:	d019      	beq.n	8003e88 <HAL_RCC_OscConfig+0x60>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 8003e54:	4b91      	ldr	r3, [pc, #580]	@ (800409c <HAL_RCC_OscConfig+0x274>)
 8003e56:	689b      	ldr	r3, [r3, #8]
 8003e58:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 8003e5c:	2b08      	cmp	r3, #8
 8003e5e:	d106      	bne.n	8003e6e <HAL_RCC_OscConfig+0x46>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 8003e60:	4b8e      	ldr	r3, [pc, #568]	@ (800409c <HAL_RCC_OscConfig+0x274>)
 8003e62:	685b      	ldr	r3, [r3, #4]
 8003e64:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8003e68:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8003e6c:	d00c      	beq.n	8003e88 <HAL_RCC_OscConfig+0x60>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8003e6e:	4b8b      	ldr	r3, [pc, #556]	@ (800409c <HAL_RCC_OscConfig+0x274>)
 8003e70:	689b      	ldr	r3, [r3, #8]
 8003e72:	f003 030c 	and.w	r3, r3, #12
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 8003e76:	2b0c      	cmp	r3, #12
 8003e78:	d112      	bne.n	8003ea0 <HAL_RCC_OscConfig+0x78>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8003e7a:	4b88      	ldr	r3, [pc, #544]	@ (800409c <HAL_RCC_OscConfig+0x274>)
 8003e7c:	685b      	ldr	r3, [r3, #4]
 8003e7e:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8003e82:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8003e86:	d10b      	bne.n	8003ea0 <HAL_RCC_OscConfig+0x78>
=======
 8003f5c:	4b94      	ldr	r3, [pc, #592]	@ (80041b0 <HAL_RCC_OscConfig+0x274>)
 8003f5e:	689b      	ldr	r3, [r3, #8]
 8003f60:	f003 030c 	and.w	r3, r3, #12
 8003f64:	2b04      	cmp	r3, #4
 8003f66:	d019      	beq.n	8003f9c <HAL_RCC_OscConfig+0x60>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 8003f68:	4b91      	ldr	r3, [pc, #580]	@ (80041b0 <HAL_RCC_OscConfig+0x274>)
 8003f6a:	689b      	ldr	r3, [r3, #8]
 8003f6c:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 8003f70:	2b08      	cmp	r3, #8
 8003f72:	d106      	bne.n	8003f82 <HAL_RCC_OscConfig+0x46>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 8003f74:	4b8e      	ldr	r3, [pc, #568]	@ (80041b0 <HAL_RCC_OscConfig+0x274>)
 8003f76:	685b      	ldr	r3, [r3, #4]
 8003f78:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8003f7c:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8003f80:	d00c      	beq.n	8003f9c <HAL_RCC_OscConfig+0x60>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8003f82:	4b8b      	ldr	r3, [pc, #556]	@ (80041b0 <HAL_RCC_OscConfig+0x274>)
 8003f84:	689b      	ldr	r3, [r3, #8]
 8003f86:	f003 030c 	and.w	r3, r3, #12
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 8003f8a:	2b0c      	cmp	r3, #12
 8003f8c:	d112      	bne.n	8003fb4 <HAL_RCC_OscConfig+0x78>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8003f8e:	4b88      	ldr	r3, [pc, #544]	@ (80041b0 <HAL_RCC_OscConfig+0x274>)
 8003f90:	685b      	ldr	r3, [r3, #4]
 8003f92:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8003f96:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8003f9a:	d10b      	bne.n	8003fb4 <HAL_RCC_OscConfig+0x78>
>>>>>>> 39e4d10438a821cc799a472af87a77c6796a1676
#else
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
#endif /* STM32F446xx */
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
<<<<<<< HEAD
 8003e88:	4b84      	ldr	r3, [pc, #528]	@ (800409c <HAL_RCC_OscConfig+0x274>)
 8003e8a:	681b      	ldr	r3, [r3, #0]
 8003e8c:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003e90:	2b00      	cmp	r3, #0
 8003e92:	d05b      	beq.n	8003f4c <HAL_RCC_OscConfig+0x124>
 8003e94:	687b      	ldr	r3, [r7, #4]
 8003e96:	685b      	ldr	r3, [r3, #4]
 8003e98:	2b00      	cmp	r3, #0
 8003e9a:	d157      	bne.n	8003f4c <HAL_RCC_OscConfig+0x124>
      {
        return HAL_ERROR;
 8003e9c:	2301      	movs	r3, #1
 8003e9e:	e25a      	b.n	8004356 <HAL_RCC_OscConfig+0x52e>
=======
 8003f9c:	4b84      	ldr	r3, [pc, #528]	@ (80041b0 <HAL_RCC_OscConfig+0x274>)
 8003f9e:	681b      	ldr	r3, [r3, #0]
 8003fa0:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003fa4:	2b00      	cmp	r3, #0
 8003fa6:	d05b      	beq.n	8004060 <HAL_RCC_OscConfig+0x124>
 8003fa8:	687b      	ldr	r3, [r7, #4]
 8003faa:	685b      	ldr	r3, [r3, #4]
 8003fac:	2b00      	cmp	r3, #0
 8003fae:	d157      	bne.n	8004060 <HAL_RCC_OscConfig+0x124>
      {
        return HAL_ERROR;
 8003fb0:	2301      	movs	r3, #1
 8003fb2:	e25a      	b.n	800446a <HAL_RCC_OscConfig+0x52e>
>>>>>>> 39e4d10438a821cc799a472af87a77c6796a1676
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
<<<<<<< HEAD
 8003ea0:	687b      	ldr	r3, [r7, #4]
 8003ea2:	685b      	ldr	r3, [r3, #4]
 8003ea4:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8003ea8:	d106      	bne.n	8003eb8 <HAL_RCC_OscConfig+0x90>
 8003eaa:	4b7c      	ldr	r3, [pc, #496]	@ (800409c <HAL_RCC_OscConfig+0x274>)
 8003eac:	681b      	ldr	r3, [r3, #0]
 8003eae:	4a7b      	ldr	r2, [pc, #492]	@ (800409c <HAL_RCC_OscConfig+0x274>)
 8003eb0:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8003eb4:	6013      	str	r3, [r2, #0]
 8003eb6:	e01d      	b.n	8003ef4 <HAL_RCC_OscConfig+0xcc>
 8003eb8:	687b      	ldr	r3, [r7, #4]
 8003eba:	685b      	ldr	r3, [r3, #4]
 8003ebc:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8003ec0:	d10c      	bne.n	8003edc <HAL_RCC_OscConfig+0xb4>
 8003ec2:	4b76      	ldr	r3, [pc, #472]	@ (800409c <HAL_RCC_OscConfig+0x274>)
 8003ec4:	681b      	ldr	r3, [r3, #0]
 8003ec6:	4a75      	ldr	r2, [pc, #468]	@ (800409c <HAL_RCC_OscConfig+0x274>)
 8003ec8:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8003ecc:	6013      	str	r3, [r2, #0]
 8003ece:	4b73      	ldr	r3, [pc, #460]	@ (800409c <HAL_RCC_OscConfig+0x274>)
 8003ed0:	681b      	ldr	r3, [r3, #0]
 8003ed2:	4a72      	ldr	r2, [pc, #456]	@ (800409c <HAL_RCC_OscConfig+0x274>)
 8003ed4:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8003ed8:	6013      	str	r3, [r2, #0]
 8003eda:	e00b      	b.n	8003ef4 <HAL_RCC_OscConfig+0xcc>
 8003edc:	4b6f      	ldr	r3, [pc, #444]	@ (800409c <HAL_RCC_OscConfig+0x274>)
 8003ede:	681b      	ldr	r3, [r3, #0]
 8003ee0:	4a6e      	ldr	r2, [pc, #440]	@ (800409c <HAL_RCC_OscConfig+0x274>)
 8003ee2:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8003ee6:	6013      	str	r3, [r2, #0]
 8003ee8:	4b6c      	ldr	r3, [pc, #432]	@ (800409c <HAL_RCC_OscConfig+0x274>)
 8003eea:	681b      	ldr	r3, [r3, #0]
 8003eec:	4a6b      	ldr	r2, [pc, #428]	@ (800409c <HAL_RCC_OscConfig+0x274>)
 8003eee:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8003ef2:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8003ef4:	687b      	ldr	r3, [r7, #4]
 8003ef6:	685b      	ldr	r3, [r3, #4]
 8003ef8:	2b00      	cmp	r3, #0
 8003efa:	d013      	beq.n	8003f24 <HAL_RCC_OscConfig+0xfc>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003efc:	f7fe f94c 	bl	8002198 <HAL_GetTick>
 8003f00:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003f02:	e008      	b.n	8003f16 <HAL_RCC_OscConfig+0xee>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8003f04:	f7fe f948 	bl	8002198 <HAL_GetTick>
 8003f08:	4602      	mov	r2, r0
 8003f0a:	693b      	ldr	r3, [r7, #16]
 8003f0c:	1ad3      	subs	r3, r2, r3
 8003f0e:	2b64      	cmp	r3, #100	@ 0x64
 8003f10:	d901      	bls.n	8003f16 <HAL_RCC_OscConfig+0xee>
          {
            return HAL_TIMEOUT;
 8003f12:	2303      	movs	r3, #3
 8003f14:	e21f      	b.n	8004356 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003f16:	4b61      	ldr	r3, [pc, #388]	@ (800409c <HAL_RCC_OscConfig+0x274>)
 8003f18:	681b      	ldr	r3, [r3, #0]
 8003f1a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003f1e:	2b00      	cmp	r3, #0
 8003f20:	d0f0      	beq.n	8003f04 <HAL_RCC_OscConfig+0xdc>
 8003f22:	e014      	b.n	8003f4e <HAL_RCC_OscConfig+0x126>
=======
 8003fb4:	687b      	ldr	r3, [r7, #4]
 8003fb6:	685b      	ldr	r3, [r3, #4]
 8003fb8:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8003fbc:	d106      	bne.n	8003fcc <HAL_RCC_OscConfig+0x90>
 8003fbe:	4b7c      	ldr	r3, [pc, #496]	@ (80041b0 <HAL_RCC_OscConfig+0x274>)
 8003fc0:	681b      	ldr	r3, [r3, #0]
 8003fc2:	4a7b      	ldr	r2, [pc, #492]	@ (80041b0 <HAL_RCC_OscConfig+0x274>)
 8003fc4:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8003fc8:	6013      	str	r3, [r2, #0]
 8003fca:	e01d      	b.n	8004008 <HAL_RCC_OscConfig+0xcc>
 8003fcc:	687b      	ldr	r3, [r7, #4]
 8003fce:	685b      	ldr	r3, [r3, #4]
 8003fd0:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8003fd4:	d10c      	bne.n	8003ff0 <HAL_RCC_OscConfig+0xb4>
 8003fd6:	4b76      	ldr	r3, [pc, #472]	@ (80041b0 <HAL_RCC_OscConfig+0x274>)
 8003fd8:	681b      	ldr	r3, [r3, #0]
 8003fda:	4a75      	ldr	r2, [pc, #468]	@ (80041b0 <HAL_RCC_OscConfig+0x274>)
 8003fdc:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8003fe0:	6013      	str	r3, [r2, #0]
 8003fe2:	4b73      	ldr	r3, [pc, #460]	@ (80041b0 <HAL_RCC_OscConfig+0x274>)
 8003fe4:	681b      	ldr	r3, [r3, #0]
 8003fe6:	4a72      	ldr	r2, [pc, #456]	@ (80041b0 <HAL_RCC_OscConfig+0x274>)
 8003fe8:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8003fec:	6013      	str	r3, [r2, #0]
 8003fee:	e00b      	b.n	8004008 <HAL_RCC_OscConfig+0xcc>
 8003ff0:	4b6f      	ldr	r3, [pc, #444]	@ (80041b0 <HAL_RCC_OscConfig+0x274>)
 8003ff2:	681b      	ldr	r3, [r3, #0]
 8003ff4:	4a6e      	ldr	r2, [pc, #440]	@ (80041b0 <HAL_RCC_OscConfig+0x274>)
 8003ff6:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8003ffa:	6013      	str	r3, [r2, #0]
 8003ffc:	4b6c      	ldr	r3, [pc, #432]	@ (80041b0 <HAL_RCC_OscConfig+0x274>)
 8003ffe:	681b      	ldr	r3, [r3, #0]
 8004000:	4a6b      	ldr	r2, [pc, #428]	@ (80041b0 <HAL_RCC_OscConfig+0x274>)
 8004002:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8004006:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8004008:	687b      	ldr	r3, [r7, #4]
 800400a:	685b      	ldr	r3, [r3, #4]
 800400c:	2b00      	cmp	r3, #0
 800400e:	d013      	beq.n	8004038 <HAL_RCC_OscConfig+0xfc>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004010:	f7fe f94c 	bl	80022ac <HAL_GetTick>
 8004014:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004016:	e008      	b.n	800402a <HAL_RCC_OscConfig+0xee>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8004018:	f7fe f948 	bl	80022ac <HAL_GetTick>
 800401c:	4602      	mov	r2, r0
 800401e:	693b      	ldr	r3, [r7, #16]
 8004020:	1ad3      	subs	r3, r2, r3
 8004022:	2b64      	cmp	r3, #100	@ 0x64
 8004024:	d901      	bls.n	800402a <HAL_RCC_OscConfig+0xee>
          {
            return HAL_TIMEOUT;
 8004026:	2303      	movs	r3, #3
 8004028:	e21f      	b.n	800446a <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800402a:	4b61      	ldr	r3, [pc, #388]	@ (80041b0 <HAL_RCC_OscConfig+0x274>)
 800402c:	681b      	ldr	r3, [r3, #0]
 800402e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004032:	2b00      	cmp	r3, #0
 8004034:	d0f0      	beq.n	8004018 <HAL_RCC_OscConfig+0xdc>
 8004036:	e014      	b.n	8004062 <HAL_RCC_OscConfig+0x126>
>>>>>>> 39e4d10438a821cc799a472af87a77c6796a1676
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
<<<<<<< HEAD
 8003f24:	f7fe f938 	bl	8002198 <HAL_GetTick>
 8003f28:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003f2a:	e008      	b.n	8003f3e <HAL_RCC_OscConfig+0x116>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8003f2c:	f7fe f934 	bl	8002198 <HAL_GetTick>
 8003f30:	4602      	mov	r2, r0
 8003f32:	693b      	ldr	r3, [r7, #16]
 8003f34:	1ad3      	subs	r3, r2, r3
 8003f36:	2b64      	cmp	r3, #100	@ 0x64
 8003f38:	d901      	bls.n	8003f3e <HAL_RCC_OscConfig+0x116>
          {
            return HAL_TIMEOUT;
 8003f3a:	2303      	movs	r3, #3
 8003f3c:	e20b      	b.n	8004356 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003f3e:	4b57      	ldr	r3, [pc, #348]	@ (800409c <HAL_RCC_OscConfig+0x274>)
 8003f40:	681b      	ldr	r3, [r3, #0]
 8003f42:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003f46:	2b00      	cmp	r3, #0
 8003f48:	d1f0      	bne.n	8003f2c <HAL_RCC_OscConfig+0x104>
 8003f4a:	e000      	b.n	8003f4e <HAL_RCC_OscConfig+0x126>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003f4c:	bf00      	nop
=======
 8004038:	f7fe f938 	bl	80022ac <HAL_GetTick>
 800403c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800403e:	e008      	b.n	8004052 <HAL_RCC_OscConfig+0x116>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8004040:	f7fe f934 	bl	80022ac <HAL_GetTick>
 8004044:	4602      	mov	r2, r0
 8004046:	693b      	ldr	r3, [r7, #16]
 8004048:	1ad3      	subs	r3, r2, r3
 800404a:	2b64      	cmp	r3, #100	@ 0x64
 800404c:	d901      	bls.n	8004052 <HAL_RCC_OscConfig+0x116>
          {
            return HAL_TIMEOUT;
 800404e:	2303      	movs	r3, #3
 8004050:	e20b      	b.n	800446a <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8004052:	4b57      	ldr	r3, [pc, #348]	@ (80041b0 <HAL_RCC_OscConfig+0x274>)
 8004054:	681b      	ldr	r3, [r3, #0]
 8004056:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800405a:	2b00      	cmp	r3, #0
 800405c:	d1f0      	bne.n	8004040 <HAL_RCC_OscConfig+0x104>
 800405e:	e000      	b.n	8004062 <HAL_RCC_OscConfig+0x126>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004060:	bf00      	nop
>>>>>>> 39e4d10438a821cc799a472af87a77c6796a1676
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
<<<<<<< HEAD
 8003f4e:	687b      	ldr	r3, [r7, #4]
 8003f50:	681b      	ldr	r3, [r3, #0]
 8003f52:	f003 0302 	and.w	r3, r3, #2
 8003f56:	2b00      	cmp	r3, #0
 8003f58:	d06f      	beq.n	800403a <HAL_RCC_OscConfig+0x212>
=======
 8004062:	687b      	ldr	r3, [r7, #4]
 8004064:	681b      	ldr	r3, [r3, #0]
 8004066:	f003 0302 	and.w	r3, r3, #2
 800406a:	2b00      	cmp	r3, #0
 800406c:	d06f      	beq.n	800414e <HAL_RCC_OscConfig+0x212>
>>>>>>> 39e4d10438a821cc799a472af87a77c6796a1676
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
<<<<<<< HEAD
 8003f5a:	4b50      	ldr	r3, [pc, #320]	@ (800409c <HAL_RCC_OscConfig+0x274>)
 8003f5c:	689b      	ldr	r3, [r3, #8]
 8003f5e:	f003 030c 	and.w	r3, r3, #12
 8003f62:	2b00      	cmp	r3, #0
 8003f64:	d017      	beq.n	8003f96 <HAL_RCC_OscConfig+0x16e>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 8003f66:	4b4d      	ldr	r3, [pc, #308]	@ (800409c <HAL_RCC_OscConfig+0x274>)
 8003f68:	689b      	ldr	r3, [r3, #8]
 8003f6a:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 8003f6e:	2b08      	cmp	r3, #8
 8003f70:	d105      	bne.n	8003f7e <HAL_RCC_OscConfig+0x156>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 8003f72:	4b4a      	ldr	r3, [pc, #296]	@ (800409c <HAL_RCC_OscConfig+0x274>)
 8003f74:	685b      	ldr	r3, [r3, #4]
 8003f76:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8003f7a:	2b00      	cmp	r3, #0
 8003f7c:	d00b      	beq.n	8003f96 <HAL_RCC_OscConfig+0x16e>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8003f7e:	4b47      	ldr	r3, [pc, #284]	@ (800409c <HAL_RCC_OscConfig+0x274>)
 8003f80:	689b      	ldr	r3, [r3, #8]
 8003f82:	f003 030c 	and.w	r3, r3, #12
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 8003f86:	2b0c      	cmp	r3, #12
 8003f88:	d11c      	bne.n	8003fc4 <HAL_RCC_OscConfig+0x19c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8003f8a:	4b44      	ldr	r3, [pc, #272]	@ (800409c <HAL_RCC_OscConfig+0x274>)
 8003f8c:	685b      	ldr	r3, [r3, #4]
 8003f8e:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8003f92:	2b00      	cmp	r3, #0
 8003f94:	d116      	bne.n	8003fc4 <HAL_RCC_OscConfig+0x19c>
=======
 800406e:	4b50      	ldr	r3, [pc, #320]	@ (80041b0 <HAL_RCC_OscConfig+0x274>)
 8004070:	689b      	ldr	r3, [r3, #8]
 8004072:	f003 030c 	and.w	r3, r3, #12
 8004076:	2b00      	cmp	r3, #0
 8004078:	d017      	beq.n	80040aa <HAL_RCC_OscConfig+0x16e>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 800407a:	4b4d      	ldr	r3, [pc, #308]	@ (80041b0 <HAL_RCC_OscConfig+0x274>)
 800407c:	689b      	ldr	r3, [r3, #8]
 800407e:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 8004082:	2b08      	cmp	r3, #8
 8004084:	d105      	bne.n	8004092 <HAL_RCC_OscConfig+0x156>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 8004086:	4b4a      	ldr	r3, [pc, #296]	@ (80041b0 <HAL_RCC_OscConfig+0x274>)
 8004088:	685b      	ldr	r3, [r3, #4]
 800408a:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800408e:	2b00      	cmp	r3, #0
 8004090:	d00b      	beq.n	80040aa <HAL_RCC_OscConfig+0x16e>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8004092:	4b47      	ldr	r3, [pc, #284]	@ (80041b0 <HAL_RCC_OscConfig+0x274>)
 8004094:	689b      	ldr	r3, [r3, #8]
 8004096:	f003 030c 	and.w	r3, r3, #12
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 800409a:	2b0c      	cmp	r3, #12
 800409c:	d11c      	bne.n	80040d8 <HAL_RCC_OscConfig+0x19c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800409e:	4b44      	ldr	r3, [pc, #272]	@ (80041b0 <HAL_RCC_OscConfig+0x274>)
 80040a0:	685b      	ldr	r3, [r3, #4]
 80040a2:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80040a6:	2b00      	cmp	r3, #0
 80040a8:	d116      	bne.n	80040d8 <HAL_RCC_OscConfig+0x19c>
>>>>>>> 39e4d10438a821cc799a472af87a77c6796a1676
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
#endif /* STM32F446xx */
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
<<<<<<< HEAD
 8003f96:	4b41      	ldr	r3, [pc, #260]	@ (800409c <HAL_RCC_OscConfig+0x274>)
 8003f98:	681b      	ldr	r3, [r3, #0]
 8003f9a:	f003 0302 	and.w	r3, r3, #2
 8003f9e:	2b00      	cmp	r3, #0
 8003fa0:	d005      	beq.n	8003fae <HAL_RCC_OscConfig+0x186>
 8003fa2:	687b      	ldr	r3, [r7, #4]
 8003fa4:	68db      	ldr	r3, [r3, #12]
 8003fa6:	2b01      	cmp	r3, #1
 8003fa8:	d001      	beq.n	8003fae <HAL_RCC_OscConfig+0x186>
      {
        return HAL_ERROR;
 8003faa:	2301      	movs	r3, #1
 8003fac:	e1d3      	b.n	8004356 <HAL_RCC_OscConfig+0x52e>
=======
 80040aa:	4b41      	ldr	r3, [pc, #260]	@ (80041b0 <HAL_RCC_OscConfig+0x274>)
 80040ac:	681b      	ldr	r3, [r3, #0]
 80040ae:	f003 0302 	and.w	r3, r3, #2
 80040b2:	2b00      	cmp	r3, #0
 80040b4:	d005      	beq.n	80040c2 <HAL_RCC_OscConfig+0x186>
 80040b6:	687b      	ldr	r3, [r7, #4]
 80040b8:	68db      	ldr	r3, [r3, #12]
 80040ba:	2b01      	cmp	r3, #1
 80040bc:	d001      	beq.n	80040c2 <HAL_RCC_OscConfig+0x186>
      {
        return HAL_ERROR;
 80040be:	2301      	movs	r3, #1
 80040c0:	e1d3      	b.n	800446a <HAL_RCC_OscConfig+0x52e>
>>>>>>> 39e4d10438a821cc799a472af87a77c6796a1676
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
<<<<<<< HEAD
 8003fae:	4b3b      	ldr	r3, [pc, #236]	@ (800409c <HAL_RCC_OscConfig+0x274>)
 8003fb0:	681b      	ldr	r3, [r3, #0]
 8003fb2:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8003fb6:	687b      	ldr	r3, [r7, #4]
 8003fb8:	691b      	ldr	r3, [r3, #16]
 8003fba:	00db      	lsls	r3, r3, #3
 8003fbc:	4937      	ldr	r1, [pc, #220]	@ (800409c <HAL_RCC_OscConfig+0x274>)
 8003fbe:	4313      	orrs	r3, r2
 8003fc0:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003fc2:	e03a      	b.n	800403a <HAL_RCC_OscConfig+0x212>
=======
 80040c2:	4b3b      	ldr	r3, [pc, #236]	@ (80041b0 <HAL_RCC_OscConfig+0x274>)
 80040c4:	681b      	ldr	r3, [r3, #0]
 80040c6:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 80040ca:	687b      	ldr	r3, [r7, #4]
 80040cc:	691b      	ldr	r3, [r3, #16]
 80040ce:	00db      	lsls	r3, r3, #3
 80040d0:	4937      	ldr	r1, [pc, #220]	@ (80041b0 <HAL_RCC_OscConfig+0x274>)
 80040d2:	4313      	orrs	r3, r2
 80040d4:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80040d6:	e03a      	b.n	800414e <HAL_RCC_OscConfig+0x212>
>>>>>>> 39e4d10438a821cc799a472af87a77c6796a1676
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
<<<<<<< HEAD
 8003fc4:	687b      	ldr	r3, [r7, #4]
 8003fc6:	68db      	ldr	r3, [r3, #12]
 8003fc8:	2b00      	cmp	r3, #0
 8003fca:	d020      	beq.n	800400e <HAL_RCC_OscConfig+0x1e6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8003fcc:	4b34      	ldr	r3, [pc, #208]	@ (80040a0 <HAL_RCC_OscConfig+0x278>)
 8003fce:	2201      	movs	r2, #1
 8003fd0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003fd2:	f7fe f8e1 	bl	8002198 <HAL_GetTick>
 8003fd6:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003fd8:	e008      	b.n	8003fec <HAL_RCC_OscConfig+0x1c4>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8003fda:	f7fe f8dd 	bl	8002198 <HAL_GetTick>
 8003fde:	4602      	mov	r2, r0
 8003fe0:	693b      	ldr	r3, [r7, #16]
 8003fe2:	1ad3      	subs	r3, r2, r3
 8003fe4:	2b02      	cmp	r3, #2
 8003fe6:	d901      	bls.n	8003fec <HAL_RCC_OscConfig+0x1c4>
          {
            return HAL_TIMEOUT;
 8003fe8:	2303      	movs	r3, #3
 8003fea:	e1b4      	b.n	8004356 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003fec:	4b2b      	ldr	r3, [pc, #172]	@ (800409c <HAL_RCC_OscConfig+0x274>)
 8003fee:	681b      	ldr	r3, [r3, #0]
 8003ff0:	f003 0302 	and.w	r3, r3, #2
 8003ff4:	2b00      	cmp	r3, #0
 8003ff6:	d0f0      	beq.n	8003fda <HAL_RCC_OscConfig+0x1b2>
=======
 80040d8:	687b      	ldr	r3, [r7, #4]
 80040da:	68db      	ldr	r3, [r3, #12]
 80040dc:	2b00      	cmp	r3, #0
 80040de:	d020      	beq.n	8004122 <HAL_RCC_OscConfig+0x1e6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80040e0:	4b34      	ldr	r3, [pc, #208]	@ (80041b4 <HAL_RCC_OscConfig+0x278>)
 80040e2:	2201      	movs	r2, #1
 80040e4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80040e6:	f7fe f8e1 	bl	80022ac <HAL_GetTick>
 80040ea:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80040ec:	e008      	b.n	8004100 <HAL_RCC_OscConfig+0x1c4>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80040ee:	f7fe f8dd 	bl	80022ac <HAL_GetTick>
 80040f2:	4602      	mov	r2, r0
 80040f4:	693b      	ldr	r3, [r7, #16]
 80040f6:	1ad3      	subs	r3, r2, r3
 80040f8:	2b02      	cmp	r3, #2
 80040fa:	d901      	bls.n	8004100 <HAL_RCC_OscConfig+0x1c4>
          {
            return HAL_TIMEOUT;
 80040fc:	2303      	movs	r3, #3
 80040fe:	e1b4      	b.n	800446a <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004100:	4b2b      	ldr	r3, [pc, #172]	@ (80041b0 <HAL_RCC_OscConfig+0x274>)
 8004102:	681b      	ldr	r3, [r3, #0]
 8004104:	f003 0302 	and.w	r3, r3, #2
 8004108:	2b00      	cmp	r3, #0
 800410a:	d0f0      	beq.n	80040ee <HAL_RCC_OscConfig+0x1b2>
>>>>>>> 39e4d10438a821cc799a472af87a77c6796a1676
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
<<<<<<< HEAD
 8003ff8:	4b28      	ldr	r3, [pc, #160]	@ (800409c <HAL_RCC_OscConfig+0x274>)
 8003ffa:	681b      	ldr	r3, [r3, #0]
 8003ffc:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8004000:	687b      	ldr	r3, [r7, #4]
 8004002:	691b      	ldr	r3, [r3, #16]
 8004004:	00db      	lsls	r3, r3, #3
 8004006:	4925      	ldr	r1, [pc, #148]	@ (800409c <HAL_RCC_OscConfig+0x274>)
 8004008:	4313      	orrs	r3, r2
 800400a:	600b      	str	r3, [r1, #0]
 800400c:	e015      	b.n	800403a <HAL_RCC_OscConfig+0x212>
=======
 800410c:	4b28      	ldr	r3, [pc, #160]	@ (80041b0 <HAL_RCC_OscConfig+0x274>)
 800410e:	681b      	ldr	r3, [r3, #0]
 8004110:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8004114:	687b      	ldr	r3, [r7, #4]
 8004116:	691b      	ldr	r3, [r3, #16]
 8004118:	00db      	lsls	r3, r3, #3
 800411a:	4925      	ldr	r1, [pc, #148]	@ (80041b0 <HAL_RCC_OscConfig+0x274>)
 800411c:	4313      	orrs	r3, r2
 800411e:	600b      	str	r3, [r1, #0]
 8004120:	e015      	b.n	800414e <HAL_RCC_OscConfig+0x212>
>>>>>>> 39e4d10438a821cc799a472af87a77c6796a1676
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
<<<<<<< HEAD
 800400e:	4b24      	ldr	r3, [pc, #144]	@ (80040a0 <HAL_RCC_OscConfig+0x278>)
 8004010:	2200      	movs	r2, #0
 8004012:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004014:	f7fe f8c0 	bl	8002198 <HAL_GetTick>
 8004018:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800401a:	e008      	b.n	800402e <HAL_RCC_OscConfig+0x206>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800401c:	f7fe f8bc 	bl	8002198 <HAL_GetTick>
 8004020:	4602      	mov	r2, r0
 8004022:	693b      	ldr	r3, [r7, #16]
 8004024:	1ad3      	subs	r3, r2, r3
 8004026:	2b02      	cmp	r3, #2
 8004028:	d901      	bls.n	800402e <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 800402a:	2303      	movs	r3, #3
 800402c:	e193      	b.n	8004356 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800402e:	4b1b      	ldr	r3, [pc, #108]	@ (800409c <HAL_RCC_OscConfig+0x274>)
 8004030:	681b      	ldr	r3, [r3, #0]
 8004032:	f003 0302 	and.w	r3, r3, #2
 8004036:	2b00      	cmp	r3, #0
 8004038:	d1f0      	bne.n	800401c <HAL_RCC_OscConfig+0x1f4>
=======
 8004122:	4b24      	ldr	r3, [pc, #144]	@ (80041b4 <HAL_RCC_OscConfig+0x278>)
 8004124:	2200      	movs	r2, #0
 8004126:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004128:	f7fe f8c0 	bl	80022ac <HAL_GetTick>
 800412c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800412e:	e008      	b.n	8004142 <HAL_RCC_OscConfig+0x206>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8004130:	f7fe f8bc 	bl	80022ac <HAL_GetTick>
 8004134:	4602      	mov	r2, r0
 8004136:	693b      	ldr	r3, [r7, #16]
 8004138:	1ad3      	subs	r3, r2, r3
 800413a:	2b02      	cmp	r3, #2
 800413c:	d901      	bls.n	8004142 <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 800413e:	2303      	movs	r3, #3
 8004140:	e193      	b.n	800446a <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8004142:	4b1b      	ldr	r3, [pc, #108]	@ (80041b0 <HAL_RCC_OscConfig+0x274>)
 8004144:	681b      	ldr	r3, [r3, #0]
 8004146:	f003 0302 	and.w	r3, r3, #2
 800414a:	2b00      	cmp	r3, #0
 800414c:	d1f0      	bne.n	8004130 <HAL_RCC_OscConfig+0x1f4>
>>>>>>> 39e4d10438a821cc799a472af87a77c6796a1676
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
<<<<<<< HEAD
 800403a:	687b      	ldr	r3, [r7, #4]
 800403c:	681b      	ldr	r3, [r3, #0]
 800403e:	f003 0308 	and.w	r3, r3, #8
 8004042:	2b00      	cmp	r3, #0
 8004044:	d036      	beq.n	80040b4 <HAL_RCC_OscConfig+0x28c>
=======
 800414e:	687b      	ldr	r3, [r7, #4]
 8004150:	681b      	ldr	r3, [r3, #0]
 8004152:	f003 0308 	and.w	r3, r3, #8
 8004156:	2b00      	cmp	r3, #0
 8004158:	d036      	beq.n	80041c8 <HAL_RCC_OscConfig+0x28c>
>>>>>>> 39e4d10438a821cc799a472af87a77c6796a1676
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
<<<<<<< HEAD
 8004046:	687b      	ldr	r3, [r7, #4]
 8004048:	695b      	ldr	r3, [r3, #20]
 800404a:	2b00      	cmp	r3, #0
 800404c:	d016      	beq.n	800407c <HAL_RCC_OscConfig+0x254>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800404e:	4b15      	ldr	r3, [pc, #84]	@ (80040a4 <HAL_RCC_OscConfig+0x27c>)
 8004050:	2201      	movs	r2, #1
 8004052:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004054:	f7fe f8a0 	bl	8002198 <HAL_GetTick>
 8004058:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800405a:	e008      	b.n	800406e <HAL_RCC_OscConfig+0x246>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800405c:	f7fe f89c 	bl	8002198 <HAL_GetTick>
 8004060:	4602      	mov	r2, r0
 8004062:	693b      	ldr	r3, [r7, #16]
 8004064:	1ad3      	subs	r3, r2, r3
 8004066:	2b02      	cmp	r3, #2
 8004068:	d901      	bls.n	800406e <HAL_RCC_OscConfig+0x246>
        {
          return HAL_TIMEOUT;
 800406a:	2303      	movs	r3, #3
 800406c:	e173      	b.n	8004356 <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800406e:	4b0b      	ldr	r3, [pc, #44]	@ (800409c <HAL_RCC_OscConfig+0x274>)
 8004070:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8004072:	f003 0302 	and.w	r3, r3, #2
 8004076:	2b00      	cmp	r3, #0
 8004078:	d0f0      	beq.n	800405c <HAL_RCC_OscConfig+0x234>
 800407a:	e01b      	b.n	80040b4 <HAL_RCC_OscConfig+0x28c>
=======
 800415a:	687b      	ldr	r3, [r7, #4]
 800415c:	695b      	ldr	r3, [r3, #20]
 800415e:	2b00      	cmp	r3, #0
 8004160:	d016      	beq.n	8004190 <HAL_RCC_OscConfig+0x254>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8004162:	4b15      	ldr	r3, [pc, #84]	@ (80041b8 <HAL_RCC_OscConfig+0x27c>)
 8004164:	2201      	movs	r2, #1
 8004166:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004168:	f7fe f8a0 	bl	80022ac <HAL_GetTick>
 800416c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800416e:	e008      	b.n	8004182 <HAL_RCC_OscConfig+0x246>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8004170:	f7fe f89c 	bl	80022ac <HAL_GetTick>
 8004174:	4602      	mov	r2, r0
 8004176:	693b      	ldr	r3, [r7, #16]
 8004178:	1ad3      	subs	r3, r2, r3
 800417a:	2b02      	cmp	r3, #2
 800417c:	d901      	bls.n	8004182 <HAL_RCC_OscConfig+0x246>
        {
          return HAL_TIMEOUT;
 800417e:	2303      	movs	r3, #3
 8004180:	e173      	b.n	800446a <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8004182:	4b0b      	ldr	r3, [pc, #44]	@ (80041b0 <HAL_RCC_OscConfig+0x274>)
 8004184:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8004186:	f003 0302 	and.w	r3, r3, #2
 800418a:	2b00      	cmp	r3, #0
 800418c:	d0f0      	beq.n	8004170 <HAL_RCC_OscConfig+0x234>
 800418e:	e01b      	b.n	80041c8 <HAL_RCC_OscConfig+0x28c>
>>>>>>> 39e4d10438a821cc799a472af87a77c6796a1676
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
<<<<<<< HEAD
 800407c:	4b09      	ldr	r3, [pc, #36]	@ (80040a4 <HAL_RCC_OscConfig+0x27c>)
 800407e:	2200      	movs	r2, #0
 8004080:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004082:	f7fe f889 	bl	8002198 <HAL_GetTick>
 8004086:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8004088:	e00e      	b.n	80040a8 <HAL_RCC_OscConfig+0x280>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800408a:	f7fe f885 	bl	8002198 <HAL_GetTick>
 800408e:	4602      	mov	r2, r0
 8004090:	693b      	ldr	r3, [r7, #16]
 8004092:	1ad3      	subs	r3, r2, r3
 8004094:	2b02      	cmp	r3, #2
 8004096:	d907      	bls.n	80040a8 <HAL_RCC_OscConfig+0x280>
        {
          return HAL_TIMEOUT;
 8004098:	2303      	movs	r3, #3
 800409a:	e15c      	b.n	8004356 <HAL_RCC_OscConfig+0x52e>
 800409c:	40023800 	.word	0x40023800
 80040a0:	42470000 	.word	0x42470000
 80040a4:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80040a8:	4b8a      	ldr	r3, [pc, #552]	@ (80042d4 <HAL_RCC_OscConfig+0x4ac>)
 80040aa:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80040ac:	f003 0302 	and.w	r3, r3, #2
 80040b0:	2b00      	cmp	r3, #0
 80040b2:	d1ea      	bne.n	800408a <HAL_RCC_OscConfig+0x262>
=======
 8004190:	4b09      	ldr	r3, [pc, #36]	@ (80041b8 <HAL_RCC_OscConfig+0x27c>)
 8004192:	2200      	movs	r2, #0
 8004194:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004196:	f7fe f889 	bl	80022ac <HAL_GetTick>
 800419a:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800419c:	e00e      	b.n	80041bc <HAL_RCC_OscConfig+0x280>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800419e:	f7fe f885 	bl	80022ac <HAL_GetTick>
 80041a2:	4602      	mov	r2, r0
 80041a4:	693b      	ldr	r3, [r7, #16]
 80041a6:	1ad3      	subs	r3, r2, r3
 80041a8:	2b02      	cmp	r3, #2
 80041aa:	d907      	bls.n	80041bc <HAL_RCC_OscConfig+0x280>
        {
          return HAL_TIMEOUT;
 80041ac:	2303      	movs	r3, #3
 80041ae:	e15c      	b.n	800446a <HAL_RCC_OscConfig+0x52e>
 80041b0:	40023800 	.word	0x40023800
 80041b4:	42470000 	.word	0x42470000
 80041b8:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80041bc:	4b8a      	ldr	r3, [pc, #552]	@ (80043e8 <HAL_RCC_OscConfig+0x4ac>)
 80041be:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80041c0:	f003 0302 	and.w	r3, r3, #2
 80041c4:	2b00      	cmp	r3, #0
 80041c6:	d1ea      	bne.n	800419e <HAL_RCC_OscConfig+0x262>
>>>>>>> 39e4d10438a821cc799a472af87a77c6796a1676
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
<<<<<<< HEAD
 80040b4:	687b      	ldr	r3, [r7, #4]
 80040b6:	681b      	ldr	r3, [r3, #0]
 80040b8:	f003 0304 	and.w	r3, r3, #4
 80040bc:	2b00      	cmp	r3, #0
 80040be:	f000 8097 	beq.w	80041f0 <HAL_RCC_OscConfig+0x3c8>
  {
    FlagStatus       pwrclkchanged = RESET;
 80040c2:	2300      	movs	r3, #0
 80040c4:	75fb      	strb	r3, [r7, #23]
=======
 80041c8:	687b      	ldr	r3, [r7, #4]
 80041ca:	681b      	ldr	r3, [r3, #0]
 80041cc:	f003 0304 	and.w	r3, r3, #4
 80041d0:	2b00      	cmp	r3, #0
 80041d2:	f000 8097 	beq.w	8004304 <HAL_RCC_OscConfig+0x3c8>
  {
    FlagStatus       pwrclkchanged = RESET;
 80041d6:	2300      	movs	r3, #0
 80041d8:	75fb      	strb	r3, [r7, #23]
>>>>>>> 39e4d10438a821cc799a472af87a77c6796a1676
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
<<<<<<< HEAD
 80040c6:	4b83      	ldr	r3, [pc, #524]	@ (80042d4 <HAL_RCC_OscConfig+0x4ac>)
 80040c8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80040ca:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80040ce:	2b00      	cmp	r3, #0
 80040d0:	d10f      	bne.n	80040f2 <HAL_RCC_OscConfig+0x2ca>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80040d2:	2300      	movs	r3, #0
 80040d4:	60bb      	str	r3, [r7, #8]
 80040d6:	4b7f      	ldr	r3, [pc, #508]	@ (80042d4 <HAL_RCC_OscConfig+0x4ac>)
 80040d8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80040da:	4a7e      	ldr	r2, [pc, #504]	@ (80042d4 <HAL_RCC_OscConfig+0x4ac>)
 80040dc:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80040e0:	6413      	str	r3, [r2, #64]	@ 0x40
 80040e2:	4b7c      	ldr	r3, [pc, #496]	@ (80042d4 <HAL_RCC_OscConfig+0x4ac>)
 80040e4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80040e6:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80040ea:	60bb      	str	r3, [r7, #8]
 80040ec:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80040ee:	2301      	movs	r3, #1
 80040f0:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80040f2:	4b79      	ldr	r3, [pc, #484]	@ (80042d8 <HAL_RCC_OscConfig+0x4b0>)
 80040f4:	681b      	ldr	r3, [r3, #0]
 80040f6:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80040fa:	2b00      	cmp	r3, #0
 80040fc:	d118      	bne.n	8004130 <HAL_RCC_OscConfig+0x308>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80040fe:	4b76      	ldr	r3, [pc, #472]	@ (80042d8 <HAL_RCC_OscConfig+0x4b0>)
 8004100:	681b      	ldr	r3, [r3, #0]
 8004102:	4a75      	ldr	r2, [pc, #468]	@ (80042d8 <HAL_RCC_OscConfig+0x4b0>)
 8004104:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8004108:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800410a:	f7fe f845 	bl	8002198 <HAL_GetTick>
 800410e:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004110:	e008      	b.n	8004124 <HAL_RCC_OscConfig+0x2fc>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004112:	f7fe f841 	bl	8002198 <HAL_GetTick>
 8004116:	4602      	mov	r2, r0
 8004118:	693b      	ldr	r3, [r7, #16]
 800411a:	1ad3      	subs	r3, r2, r3
 800411c:	2b02      	cmp	r3, #2
 800411e:	d901      	bls.n	8004124 <HAL_RCC_OscConfig+0x2fc>
        {
          return HAL_TIMEOUT;
 8004120:	2303      	movs	r3, #3
 8004122:	e118      	b.n	8004356 <HAL_RCC_OscConfig+0x52e>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004124:	4b6c      	ldr	r3, [pc, #432]	@ (80042d8 <HAL_RCC_OscConfig+0x4b0>)
 8004126:	681b      	ldr	r3, [r3, #0]
 8004128:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800412c:	2b00      	cmp	r3, #0
 800412e:	d0f0      	beq.n	8004112 <HAL_RCC_OscConfig+0x2ea>
=======
 80041da:	4b83      	ldr	r3, [pc, #524]	@ (80043e8 <HAL_RCC_OscConfig+0x4ac>)
 80041dc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80041de:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80041e2:	2b00      	cmp	r3, #0
 80041e4:	d10f      	bne.n	8004206 <HAL_RCC_OscConfig+0x2ca>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80041e6:	2300      	movs	r3, #0
 80041e8:	60bb      	str	r3, [r7, #8]
 80041ea:	4b7f      	ldr	r3, [pc, #508]	@ (80043e8 <HAL_RCC_OscConfig+0x4ac>)
 80041ec:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80041ee:	4a7e      	ldr	r2, [pc, #504]	@ (80043e8 <HAL_RCC_OscConfig+0x4ac>)
 80041f0:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80041f4:	6413      	str	r3, [r2, #64]	@ 0x40
 80041f6:	4b7c      	ldr	r3, [pc, #496]	@ (80043e8 <HAL_RCC_OscConfig+0x4ac>)
 80041f8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80041fa:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80041fe:	60bb      	str	r3, [r7, #8]
 8004200:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8004202:	2301      	movs	r3, #1
 8004204:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004206:	4b79      	ldr	r3, [pc, #484]	@ (80043ec <HAL_RCC_OscConfig+0x4b0>)
 8004208:	681b      	ldr	r3, [r3, #0]
 800420a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800420e:	2b00      	cmp	r3, #0
 8004210:	d118      	bne.n	8004244 <HAL_RCC_OscConfig+0x308>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8004212:	4b76      	ldr	r3, [pc, #472]	@ (80043ec <HAL_RCC_OscConfig+0x4b0>)
 8004214:	681b      	ldr	r3, [r3, #0]
 8004216:	4a75      	ldr	r2, [pc, #468]	@ (80043ec <HAL_RCC_OscConfig+0x4b0>)
 8004218:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800421c:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800421e:	f7fe f845 	bl	80022ac <HAL_GetTick>
 8004222:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004224:	e008      	b.n	8004238 <HAL_RCC_OscConfig+0x2fc>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004226:	f7fe f841 	bl	80022ac <HAL_GetTick>
 800422a:	4602      	mov	r2, r0
 800422c:	693b      	ldr	r3, [r7, #16]
 800422e:	1ad3      	subs	r3, r2, r3
 8004230:	2b02      	cmp	r3, #2
 8004232:	d901      	bls.n	8004238 <HAL_RCC_OscConfig+0x2fc>
        {
          return HAL_TIMEOUT;
 8004234:	2303      	movs	r3, #3
 8004236:	e118      	b.n	800446a <HAL_RCC_OscConfig+0x52e>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004238:	4b6c      	ldr	r3, [pc, #432]	@ (80043ec <HAL_RCC_OscConfig+0x4b0>)
 800423a:	681b      	ldr	r3, [r3, #0]
 800423c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004240:	2b00      	cmp	r3, #0
 8004242:	d0f0      	beq.n	8004226 <HAL_RCC_OscConfig+0x2ea>
>>>>>>> 39e4d10438a821cc799a472af87a77c6796a1676
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
<<<<<<< HEAD
 8004130:	687b      	ldr	r3, [r7, #4]
 8004132:	689b      	ldr	r3, [r3, #8]
 8004134:	2b01      	cmp	r3, #1
 8004136:	d106      	bne.n	8004146 <HAL_RCC_OscConfig+0x31e>
 8004138:	4b66      	ldr	r3, [pc, #408]	@ (80042d4 <HAL_RCC_OscConfig+0x4ac>)
 800413a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800413c:	4a65      	ldr	r2, [pc, #404]	@ (80042d4 <HAL_RCC_OscConfig+0x4ac>)
 800413e:	f043 0301 	orr.w	r3, r3, #1
 8004142:	6713      	str	r3, [r2, #112]	@ 0x70
 8004144:	e01c      	b.n	8004180 <HAL_RCC_OscConfig+0x358>
 8004146:	687b      	ldr	r3, [r7, #4]
 8004148:	689b      	ldr	r3, [r3, #8]
 800414a:	2b05      	cmp	r3, #5
 800414c:	d10c      	bne.n	8004168 <HAL_RCC_OscConfig+0x340>
 800414e:	4b61      	ldr	r3, [pc, #388]	@ (80042d4 <HAL_RCC_OscConfig+0x4ac>)
 8004150:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004152:	4a60      	ldr	r2, [pc, #384]	@ (80042d4 <HAL_RCC_OscConfig+0x4ac>)
 8004154:	f043 0304 	orr.w	r3, r3, #4
 8004158:	6713      	str	r3, [r2, #112]	@ 0x70
 800415a:	4b5e      	ldr	r3, [pc, #376]	@ (80042d4 <HAL_RCC_OscConfig+0x4ac>)
 800415c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800415e:	4a5d      	ldr	r2, [pc, #372]	@ (80042d4 <HAL_RCC_OscConfig+0x4ac>)
 8004160:	f043 0301 	orr.w	r3, r3, #1
 8004164:	6713      	str	r3, [r2, #112]	@ 0x70
 8004166:	e00b      	b.n	8004180 <HAL_RCC_OscConfig+0x358>
 8004168:	4b5a      	ldr	r3, [pc, #360]	@ (80042d4 <HAL_RCC_OscConfig+0x4ac>)
 800416a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800416c:	4a59      	ldr	r2, [pc, #356]	@ (80042d4 <HAL_RCC_OscConfig+0x4ac>)
 800416e:	f023 0301 	bic.w	r3, r3, #1
 8004172:	6713      	str	r3, [r2, #112]	@ 0x70
 8004174:	4b57      	ldr	r3, [pc, #348]	@ (80042d4 <HAL_RCC_OscConfig+0x4ac>)
 8004176:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004178:	4a56      	ldr	r2, [pc, #344]	@ (80042d4 <HAL_RCC_OscConfig+0x4ac>)
 800417a:	f023 0304 	bic.w	r3, r3, #4
 800417e:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8004180:	687b      	ldr	r3, [r7, #4]
 8004182:	689b      	ldr	r3, [r3, #8]
 8004184:	2b00      	cmp	r3, #0
 8004186:	d015      	beq.n	80041b4 <HAL_RCC_OscConfig+0x38c>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004188:	f7fe f806 	bl	8002198 <HAL_GetTick>
 800418c:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800418e:	e00a      	b.n	80041a6 <HAL_RCC_OscConfig+0x37e>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8004190:	f7fe f802 	bl	8002198 <HAL_GetTick>
 8004194:	4602      	mov	r2, r0
 8004196:	693b      	ldr	r3, [r7, #16]
 8004198:	1ad3      	subs	r3, r2, r3
 800419a:	f241 3288 	movw	r2, #5000	@ 0x1388
 800419e:	4293      	cmp	r3, r2
 80041a0:	d901      	bls.n	80041a6 <HAL_RCC_OscConfig+0x37e>
        {
          return HAL_TIMEOUT;
 80041a2:	2303      	movs	r3, #3
 80041a4:	e0d7      	b.n	8004356 <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80041a6:	4b4b      	ldr	r3, [pc, #300]	@ (80042d4 <HAL_RCC_OscConfig+0x4ac>)
 80041a8:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80041aa:	f003 0302 	and.w	r3, r3, #2
 80041ae:	2b00      	cmp	r3, #0
 80041b0:	d0ee      	beq.n	8004190 <HAL_RCC_OscConfig+0x368>
 80041b2:	e014      	b.n	80041de <HAL_RCC_OscConfig+0x3b6>
=======
 8004244:	687b      	ldr	r3, [r7, #4]
 8004246:	689b      	ldr	r3, [r3, #8]
 8004248:	2b01      	cmp	r3, #1
 800424a:	d106      	bne.n	800425a <HAL_RCC_OscConfig+0x31e>
 800424c:	4b66      	ldr	r3, [pc, #408]	@ (80043e8 <HAL_RCC_OscConfig+0x4ac>)
 800424e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004250:	4a65      	ldr	r2, [pc, #404]	@ (80043e8 <HAL_RCC_OscConfig+0x4ac>)
 8004252:	f043 0301 	orr.w	r3, r3, #1
 8004256:	6713      	str	r3, [r2, #112]	@ 0x70
 8004258:	e01c      	b.n	8004294 <HAL_RCC_OscConfig+0x358>
 800425a:	687b      	ldr	r3, [r7, #4]
 800425c:	689b      	ldr	r3, [r3, #8]
 800425e:	2b05      	cmp	r3, #5
 8004260:	d10c      	bne.n	800427c <HAL_RCC_OscConfig+0x340>
 8004262:	4b61      	ldr	r3, [pc, #388]	@ (80043e8 <HAL_RCC_OscConfig+0x4ac>)
 8004264:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004266:	4a60      	ldr	r2, [pc, #384]	@ (80043e8 <HAL_RCC_OscConfig+0x4ac>)
 8004268:	f043 0304 	orr.w	r3, r3, #4
 800426c:	6713      	str	r3, [r2, #112]	@ 0x70
 800426e:	4b5e      	ldr	r3, [pc, #376]	@ (80043e8 <HAL_RCC_OscConfig+0x4ac>)
 8004270:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004272:	4a5d      	ldr	r2, [pc, #372]	@ (80043e8 <HAL_RCC_OscConfig+0x4ac>)
 8004274:	f043 0301 	orr.w	r3, r3, #1
 8004278:	6713      	str	r3, [r2, #112]	@ 0x70
 800427a:	e00b      	b.n	8004294 <HAL_RCC_OscConfig+0x358>
 800427c:	4b5a      	ldr	r3, [pc, #360]	@ (80043e8 <HAL_RCC_OscConfig+0x4ac>)
 800427e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004280:	4a59      	ldr	r2, [pc, #356]	@ (80043e8 <HAL_RCC_OscConfig+0x4ac>)
 8004282:	f023 0301 	bic.w	r3, r3, #1
 8004286:	6713      	str	r3, [r2, #112]	@ 0x70
 8004288:	4b57      	ldr	r3, [pc, #348]	@ (80043e8 <HAL_RCC_OscConfig+0x4ac>)
 800428a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800428c:	4a56      	ldr	r2, [pc, #344]	@ (80043e8 <HAL_RCC_OscConfig+0x4ac>)
 800428e:	f023 0304 	bic.w	r3, r3, #4
 8004292:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8004294:	687b      	ldr	r3, [r7, #4]
 8004296:	689b      	ldr	r3, [r3, #8]
 8004298:	2b00      	cmp	r3, #0
 800429a:	d015      	beq.n	80042c8 <HAL_RCC_OscConfig+0x38c>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800429c:	f7fe f806 	bl	80022ac <HAL_GetTick>
 80042a0:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80042a2:	e00a      	b.n	80042ba <HAL_RCC_OscConfig+0x37e>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80042a4:	f7fe f802 	bl	80022ac <HAL_GetTick>
 80042a8:	4602      	mov	r2, r0
 80042aa:	693b      	ldr	r3, [r7, #16]
 80042ac:	1ad3      	subs	r3, r2, r3
 80042ae:	f241 3288 	movw	r2, #5000	@ 0x1388
 80042b2:	4293      	cmp	r3, r2
 80042b4:	d901      	bls.n	80042ba <HAL_RCC_OscConfig+0x37e>
        {
          return HAL_TIMEOUT;
 80042b6:	2303      	movs	r3, #3
 80042b8:	e0d7      	b.n	800446a <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80042ba:	4b4b      	ldr	r3, [pc, #300]	@ (80043e8 <HAL_RCC_OscConfig+0x4ac>)
 80042bc:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80042be:	f003 0302 	and.w	r3, r3, #2
 80042c2:	2b00      	cmp	r3, #0
 80042c4:	d0ee      	beq.n	80042a4 <HAL_RCC_OscConfig+0x368>
 80042c6:	e014      	b.n	80042f2 <HAL_RCC_OscConfig+0x3b6>
>>>>>>> 39e4d10438a821cc799a472af87a77c6796a1676
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
<<<<<<< HEAD
 80041b4:	f7fd fff0 	bl	8002198 <HAL_GetTick>
 80041b8:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80041ba:	e00a      	b.n	80041d2 <HAL_RCC_OscConfig+0x3aa>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80041bc:	f7fd ffec 	bl	8002198 <HAL_GetTick>
 80041c0:	4602      	mov	r2, r0
 80041c2:	693b      	ldr	r3, [r7, #16]
 80041c4:	1ad3      	subs	r3, r2, r3
 80041c6:	f241 3288 	movw	r2, #5000	@ 0x1388
 80041ca:	4293      	cmp	r3, r2
 80041cc:	d901      	bls.n	80041d2 <HAL_RCC_OscConfig+0x3aa>
        {
          return HAL_TIMEOUT;
 80041ce:	2303      	movs	r3, #3
 80041d0:	e0c1      	b.n	8004356 <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80041d2:	4b40      	ldr	r3, [pc, #256]	@ (80042d4 <HAL_RCC_OscConfig+0x4ac>)
 80041d4:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80041d6:	f003 0302 	and.w	r3, r3, #2
 80041da:	2b00      	cmp	r3, #0
 80041dc:	d1ee      	bne.n	80041bc <HAL_RCC_OscConfig+0x394>
=======
 80042c8:	f7fd fff0 	bl	80022ac <HAL_GetTick>
 80042cc:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80042ce:	e00a      	b.n	80042e6 <HAL_RCC_OscConfig+0x3aa>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80042d0:	f7fd ffec 	bl	80022ac <HAL_GetTick>
 80042d4:	4602      	mov	r2, r0
 80042d6:	693b      	ldr	r3, [r7, #16]
 80042d8:	1ad3      	subs	r3, r2, r3
 80042da:	f241 3288 	movw	r2, #5000	@ 0x1388
 80042de:	4293      	cmp	r3, r2
 80042e0:	d901      	bls.n	80042e6 <HAL_RCC_OscConfig+0x3aa>
        {
          return HAL_TIMEOUT;
 80042e2:	2303      	movs	r3, #3
 80042e4:	e0c1      	b.n	800446a <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80042e6:	4b40      	ldr	r3, [pc, #256]	@ (80043e8 <HAL_RCC_OscConfig+0x4ac>)
 80042e8:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80042ea:	f003 0302 	and.w	r3, r3, #2
 80042ee:	2b00      	cmp	r3, #0
 80042f0:	d1ee      	bne.n	80042d0 <HAL_RCC_OscConfig+0x394>
>>>>>>> 39e4d10438a821cc799a472af87a77c6796a1676
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
<<<<<<< HEAD
 80041de:	7dfb      	ldrb	r3, [r7, #23]
 80041e0:	2b01      	cmp	r3, #1
 80041e2:	d105      	bne.n	80041f0 <HAL_RCC_OscConfig+0x3c8>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80041e4:	4b3b      	ldr	r3, [pc, #236]	@ (80042d4 <HAL_RCC_OscConfig+0x4ac>)
 80041e6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80041e8:	4a3a      	ldr	r2, [pc, #232]	@ (80042d4 <HAL_RCC_OscConfig+0x4ac>)
 80041ea:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80041ee:	6413      	str	r3, [r2, #64]	@ 0x40
=======
 80042f2:	7dfb      	ldrb	r3, [r7, #23]
 80042f4:	2b01      	cmp	r3, #1
 80042f6:	d105      	bne.n	8004304 <HAL_RCC_OscConfig+0x3c8>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80042f8:	4b3b      	ldr	r3, [pc, #236]	@ (80043e8 <HAL_RCC_OscConfig+0x4ac>)
 80042fa:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80042fc:	4a3a      	ldr	r2, [pc, #232]	@ (80043e8 <HAL_RCC_OscConfig+0x4ac>)
 80042fe:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8004302:	6413      	str	r3, [r2, #64]	@ 0x40
>>>>>>> 39e4d10438a821cc799a472af87a77c6796a1676
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
<<<<<<< HEAD
 80041f0:	687b      	ldr	r3, [r7, #4]
 80041f2:	699b      	ldr	r3, [r3, #24]
 80041f4:	2b00      	cmp	r3, #0
 80041f6:	f000 80ad 	beq.w	8004354 <HAL_RCC_OscConfig+0x52c>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 80041fa:	4b36      	ldr	r3, [pc, #216]	@ (80042d4 <HAL_RCC_OscConfig+0x4ac>)
 80041fc:	689b      	ldr	r3, [r3, #8]
 80041fe:	f003 030c 	and.w	r3, r3, #12
 8004202:	2b08      	cmp	r3, #8
 8004204:	d060      	beq.n	80042c8 <HAL_RCC_OscConfig+0x4a0>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8004206:	687b      	ldr	r3, [r7, #4]
 8004208:	699b      	ldr	r3, [r3, #24]
 800420a:	2b02      	cmp	r3, #2
 800420c:	d145      	bne.n	800429a <HAL_RCC_OscConfig+0x472>
=======
 8004304:	687b      	ldr	r3, [r7, #4]
 8004306:	699b      	ldr	r3, [r3, #24]
 8004308:	2b00      	cmp	r3, #0
 800430a:	f000 80ad 	beq.w	8004468 <HAL_RCC_OscConfig+0x52c>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 800430e:	4b36      	ldr	r3, [pc, #216]	@ (80043e8 <HAL_RCC_OscConfig+0x4ac>)
 8004310:	689b      	ldr	r3, [r3, #8]
 8004312:	f003 030c 	and.w	r3, r3, #12
 8004316:	2b08      	cmp	r3, #8
 8004318:	d060      	beq.n	80043dc <HAL_RCC_OscConfig+0x4a0>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800431a:	687b      	ldr	r3, [r7, #4]
 800431c:	699b      	ldr	r3, [r3, #24]
 800431e:	2b02      	cmp	r3, #2
 8004320:	d145      	bne.n	80043ae <HAL_RCC_OscConfig+0x472>
>>>>>>> 39e4d10438a821cc799a472af87a77c6796a1676
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
<<<<<<< HEAD
 800420e:	4b33      	ldr	r3, [pc, #204]	@ (80042dc <HAL_RCC_OscConfig+0x4b4>)
 8004210:	2200      	movs	r2, #0
 8004212:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004214:	f7fd ffc0 	bl	8002198 <HAL_GetTick>
 8004218:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800421a:	e008      	b.n	800422e <HAL_RCC_OscConfig+0x406>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800421c:	f7fd ffbc 	bl	8002198 <HAL_GetTick>
 8004220:	4602      	mov	r2, r0
 8004222:	693b      	ldr	r3, [r7, #16]
 8004224:	1ad3      	subs	r3, r2, r3
 8004226:	2b02      	cmp	r3, #2
 8004228:	d901      	bls.n	800422e <HAL_RCC_OscConfig+0x406>
          {
            return HAL_TIMEOUT;
 800422a:	2303      	movs	r3, #3
 800422c:	e093      	b.n	8004356 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800422e:	4b29      	ldr	r3, [pc, #164]	@ (80042d4 <HAL_RCC_OscConfig+0x4ac>)
 8004230:	681b      	ldr	r3, [r3, #0]
 8004232:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004236:	2b00      	cmp	r3, #0
 8004238:	d1f0      	bne.n	800421c <HAL_RCC_OscConfig+0x3f4>
=======
 8004322:	4b33      	ldr	r3, [pc, #204]	@ (80043f0 <HAL_RCC_OscConfig+0x4b4>)
 8004324:	2200      	movs	r2, #0
 8004326:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004328:	f7fd ffc0 	bl	80022ac <HAL_GetTick>
 800432c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800432e:	e008      	b.n	8004342 <HAL_RCC_OscConfig+0x406>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8004330:	f7fd ffbc 	bl	80022ac <HAL_GetTick>
 8004334:	4602      	mov	r2, r0
 8004336:	693b      	ldr	r3, [r7, #16]
 8004338:	1ad3      	subs	r3, r2, r3
 800433a:	2b02      	cmp	r3, #2
 800433c:	d901      	bls.n	8004342 <HAL_RCC_OscConfig+0x406>
          {
            return HAL_TIMEOUT;
 800433e:	2303      	movs	r3, #3
 8004340:	e093      	b.n	800446a <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004342:	4b29      	ldr	r3, [pc, #164]	@ (80043e8 <HAL_RCC_OscConfig+0x4ac>)
 8004344:	681b      	ldr	r3, [r3, #0]
 8004346:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800434a:	2b00      	cmp	r3, #0
 800434c:	d1f0      	bne.n	8004330 <HAL_RCC_OscConfig+0x3f4>
>>>>>>> 39e4d10438a821cc799a472af87a77c6796a1676
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
<<<<<<< HEAD
 800423a:	687b      	ldr	r3, [r7, #4]
 800423c:	69da      	ldr	r2, [r3, #28]
 800423e:	687b      	ldr	r3, [r7, #4]
 8004240:	6a1b      	ldr	r3, [r3, #32]
 8004242:	431a      	orrs	r2, r3
 8004244:	687b      	ldr	r3, [r7, #4]
 8004246:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004248:	019b      	lsls	r3, r3, #6
 800424a:	431a      	orrs	r2, r3
 800424c:	687b      	ldr	r3, [r7, #4]
 800424e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004250:	085b      	lsrs	r3, r3, #1
 8004252:	3b01      	subs	r3, #1
 8004254:	041b      	lsls	r3, r3, #16
 8004256:	431a      	orrs	r2, r3
 8004258:	687b      	ldr	r3, [r7, #4]
 800425a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800425c:	061b      	lsls	r3, r3, #24
 800425e:	431a      	orrs	r2, r3
 8004260:	687b      	ldr	r3, [r7, #4]
 8004262:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004264:	071b      	lsls	r3, r3, #28
 8004266:	491b      	ldr	r1, [pc, #108]	@ (80042d4 <HAL_RCC_OscConfig+0x4ac>)
 8004268:	4313      	orrs	r3, r2
 800426a:	604b      	str	r3, [r1, #4]
=======
 800434e:	687b      	ldr	r3, [r7, #4]
 8004350:	69da      	ldr	r2, [r3, #28]
 8004352:	687b      	ldr	r3, [r7, #4]
 8004354:	6a1b      	ldr	r3, [r3, #32]
 8004356:	431a      	orrs	r2, r3
 8004358:	687b      	ldr	r3, [r7, #4]
 800435a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800435c:	019b      	lsls	r3, r3, #6
 800435e:	431a      	orrs	r2, r3
 8004360:	687b      	ldr	r3, [r7, #4]
 8004362:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004364:	085b      	lsrs	r3, r3, #1
 8004366:	3b01      	subs	r3, #1
 8004368:	041b      	lsls	r3, r3, #16
 800436a:	431a      	orrs	r2, r3
 800436c:	687b      	ldr	r3, [r7, #4]
 800436e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004370:	061b      	lsls	r3, r3, #24
 8004372:	431a      	orrs	r2, r3
 8004374:	687b      	ldr	r3, [r7, #4]
 8004376:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004378:	071b      	lsls	r3, r3, #28
 800437a:	491b      	ldr	r1, [pc, #108]	@ (80043e8 <HAL_RCC_OscConfig+0x4ac>)
 800437c:	4313      	orrs	r3, r2
 800437e:	604b      	str	r3, [r1, #4]
>>>>>>> 39e4d10438a821cc799a472af87a77c6796a1676
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)                       | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)        | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)                       | \
                                 (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
<<<<<<< HEAD
 800426c:	4b1b      	ldr	r3, [pc, #108]	@ (80042dc <HAL_RCC_OscConfig+0x4b4>)
 800426e:	2201      	movs	r2, #1
 8004270:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004272:	f7fd ff91 	bl	8002198 <HAL_GetTick>
 8004276:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004278:	e008      	b.n	800428c <HAL_RCC_OscConfig+0x464>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800427a:	f7fd ff8d 	bl	8002198 <HAL_GetTick>
 800427e:	4602      	mov	r2, r0
 8004280:	693b      	ldr	r3, [r7, #16]
 8004282:	1ad3      	subs	r3, r2, r3
 8004284:	2b02      	cmp	r3, #2
 8004286:	d901      	bls.n	800428c <HAL_RCC_OscConfig+0x464>
          {
            return HAL_TIMEOUT;
 8004288:	2303      	movs	r3, #3
 800428a:	e064      	b.n	8004356 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800428c:	4b11      	ldr	r3, [pc, #68]	@ (80042d4 <HAL_RCC_OscConfig+0x4ac>)
 800428e:	681b      	ldr	r3, [r3, #0]
 8004290:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004294:	2b00      	cmp	r3, #0
 8004296:	d0f0      	beq.n	800427a <HAL_RCC_OscConfig+0x452>
 8004298:	e05c      	b.n	8004354 <HAL_RCC_OscConfig+0x52c>
=======
 8004380:	4b1b      	ldr	r3, [pc, #108]	@ (80043f0 <HAL_RCC_OscConfig+0x4b4>)
 8004382:	2201      	movs	r2, #1
 8004384:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004386:	f7fd ff91 	bl	80022ac <HAL_GetTick>
 800438a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800438c:	e008      	b.n	80043a0 <HAL_RCC_OscConfig+0x464>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800438e:	f7fd ff8d 	bl	80022ac <HAL_GetTick>
 8004392:	4602      	mov	r2, r0
 8004394:	693b      	ldr	r3, [r7, #16]
 8004396:	1ad3      	subs	r3, r2, r3
 8004398:	2b02      	cmp	r3, #2
 800439a:	d901      	bls.n	80043a0 <HAL_RCC_OscConfig+0x464>
          {
            return HAL_TIMEOUT;
 800439c:	2303      	movs	r3, #3
 800439e:	e064      	b.n	800446a <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80043a0:	4b11      	ldr	r3, [pc, #68]	@ (80043e8 <HAL_RCC_OscConfig+0x4ac>)
 80043a2:	681b      	ldr	r3, [r3, #0]
 80043a4:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80043a8:	2b00      	cmp	r3, #0
 80043aa:	d0f0      	beq.n	800438e <HAL_RCC_OscConfig+0x452>
 80043ac:	e05c      	b.n	8004468 <HAL_RCC_OscConfig+0x52c>
>>>>>>> 39e4d10438a821cc799a472af87a77c6796a1676
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
<<<<<<< HEAD
 800429a:	4b10      	ldr	r3, [pc, #64]	@ (80042dc <HAL_RCC_OscConfig+0x4b4>)
 800429c:	2200      	movs	r2, #0
 800429e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80042a0:	f7fd ff7a 	bl	8002198 <HAL_GetTick>
 80042a4:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80042a6:	e008      	b.n	80042ba <HAL_RCC_OscConfig+0x492>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80042a8:	f7fd ff76 	bl	8002198 <HAL_GetTick>
 80042ac:	4602      	mov	r2, r0
 80042ae:	693b      	ldr	r3, [r7, #16]
 80042b0:	1ad3      	subs	r3, r2, r3
 80042b2:	2b02      	cmp	r3, #2
 80042b4:	d901      	bls.n	80042ba <HAL_RCC_OscConfig+0x492>
          {
            return HAL_TIMEOUT;
 80042b6:	2303      	movs	r3, #3
 80042b8:	e04d      	b.n	8004356 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80042ba:	4b06      	ldr	r3, [pc, #24]	@ (80042d4 <HAL_RCC_OscConfig+0x4ac>)
 80042bc:	681b      	ldr	r3, [r3, #0]
 80042be:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80042c2:	2b00      	cmp	r3, #0
 80042c4:	d1f0      	bne.n	80042a8 <HAL_RCC_OscConfig+0x480>
 80042c6:	e045      	b.n	8004354 <HAL_RCC_OscConfig+0x52c>
=======
 80043ae:	4b10      	ldr	r3, [pc, #64]	@ (80043f0 <HAL_RCC_OscConfig+0x4b4>)
 80043b0:	2200      	movs	r2, #0
 80043b2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80043b4:	f7fd ff7a 	bl	80022ac <HAL_GetTick>
 80043b8:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80043ba:	e008      	b.n	80043ce <HAL_RCC_OscConfig+0x492>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80043bc:	f7fd ff76 	bl	80022ac <HAL_GetTick>
 80043c0:	4602      	mov	r2, r0
 80043c2:	693b      	ldr	r3, [r7, #16]
 80043c4:	1ad3      	subs	r3, r2, r3
 80043c6:	2b02      	cmp	r3, #2
 80043c8:	d901      	bls.n	80043ce <HAL_RCC_OscConfig+0x492>
          {
            return HAL_TIMEOUT;
 80043ca:	2303      	movs	r3, #3
 80043cc:	e04d      	b.n	800446a <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80043ce:	4b06      	ldr	r3, [pc, #24]	@ (80043e8 <HAL_RCC_OscConfig+0x4ac>)
 80043d0:	681b      	ldr	r3, [r3, #0]
 80043d2:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80043d6:	2b00      	cmp	r3, #0
 80043d8:	d1f0      	bne.n	80043bc <HAL_RCC_OscConfig+0x480>
 80043da:	e045      	b.n	8004468 <HAL_RCC_OscConfig+0x52c>
>>>>>>> 39e4d10438a821cc799a472af87a77c6796a1676
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
<<<<<<< HEAD
 80042c8:	687b      	ldr	r3, [r7, #4]
 80042ca:	699b      	ldr	r3, [r3, #24]
 80042cc:	2b01      	cmp	r3, #1
 80042ce:	d107      	bne.n	80042e0 <HAL_RCC_OscConfig+0x4b8>
      {
        return HAL_ERROR;
 80042d0:	2301      	movs	r3, #1
 80042d2:	e040      	b.n	8004356 <HAL_RCC_OscConfig+0x52e>
 80042d4:	40023800 	.word	0x40023800
 80042d8:	40007000 	.word	0x40007000
 80042dc:	42470060 	.word	0x42470060
=======
 80043dc:	687b      	ldr	r3, [r7, #4]
 80043de:	699b      	ldr	r3, [r3, #24]
 80043e0:	2b01      	cmp	r3, #1
 80043e2:	d107      	bne.n	80043f4 <HAL_RCC_OscConfig+0x4b8>
      {
        return HAL_ERROR;
 80043e4:	2301      	movs	r3, #1
 80043e6:	e040      	b.n	800446a <HAL_RCC_OscConfig+0x52e>
 80043e8:	40023800 	.word	0x40023800
 80043ec:	40007000 	.word	0x40007000
 80043f0:	42470060 	.word	0x42470060
>>>>>>> 39e4d10438a821cc799a472af87a77c6796a1676
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
<<<<<<< HEAD
 80042e0:	4b1f      	ldr	r3, [pc, #124]	@ (8004360 <HAL_RCC_OscConfig+0x538>)
 80042e2:	685b      	ldr	r3, [r3, #4]
 80042e4:	60fb      	str	r3, [r7, #12]
#if defined (RCC_PLLCFGR_PLLR)
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80042e6:	687b      	ldr	r3, [r7, #4]
 80042e8:	699b      	ldr	r3, [r3, #24]
 80042ea:	2b01      	cmp	r3, #1
 80042ec:	d030      	beq.n	8004350 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80042ee:	68fb      	ldr	r3, [r7, #12]
 80042f0:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 80042f4:	687b      	ldr	r3, [r7, #4]
 80042f6:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80042f8:	429a      	cmp	r2, r3
 80042fa:	d129      	bne.n	8004350 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80042fc:	68fb      	ldr	r3, [r7, #12]
 80042fe:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 8004302:	687b      	ldr	r3, [r7, #4]
 8004304:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004306:	429a      	cmp	r2, r3
 8004308:	d122      	bne.n	8004350 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 800430a:	68fa      	ldr	r2, [r7, #12]
 800430c:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 8004310:	4013      	ands	r3, r2
 8004312:	687a      	ldr	r2, [r7, #4]
 8004314:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 8004316:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8004318:	4293      	cmp	r3, r2
 800431a:	d119      	bne.n	8004350 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 800431c:	68fb      	ldr	r3, [r7, #12]
 800431e:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 8004322:	687b      	ldr	r3, [r7, #4]
 8004324:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004326:	085b      	lsrs	r3, r3, #1
 8004328:	3b01      	subs	r3, #1
 800432a:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 800432c:	429a      	cmp	r2, r3
 800432e:	d10f      	bne.n	8004350 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8004330:	68fb      	ldr	r3, [r7, #12]
 8004332:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 8004336:	687b      	ldr	r3, [r7, #4]
 8004338:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800433a:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 800433c:	429a      	cmp	r2, r3
 800433e:	d107      	bne.n	8004350 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
 8004340:	68fb      	ldr	r3, [r7, #12]
 8004342:	f003 42e0 	and.w	r2, r3, #1879048192	@ 0x70000000
 8004346:	687b      	ldr	r3, [r7, #4]
 8004348:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800434a:	071b      	lsls	r3, r3, #28
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 800434c:	429a      	cmp	r2, r3
 800434e:	d001      	beq.n	8004354 <HAL_RCC_OscConfig+0x52c>
=======
 80043f4:	4b1f      	ldr	r3, [pc, #124]	@ (8004474 <HAL_RCC_OscConfig+0x538>)
 80043f6:	685b      	ldr	r3, [r3, #4]
 80043f8:	60fb      	str	r3, [r7, #12]
#if defined (RCC_PLLCFGR_PLLR)
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80043fa:	687b      	ldr	r3, [r7, #4]
 80043fc:	699b      	ldr	r3, [r3, #24]
 80043fe:	2b01      	cmp	r3, #1
 8004400:	d030      	beq.n	8004464 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004402:	68fb      	ldr	r3, [r7, #12]
 8004404:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 8004408:	687b      	ldr	r3, [r7, #4]
 800440a:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800440c:	429a      	cmp	r2, r3
 800440e:	d129      	bne.n	8004464 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8004410:	68fb      	ldr	r3, [r7, #12]
 8004412:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 8004416:	687b      	ldr	r3, [r7, #4]
 8004418:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800441a:	429a      	cmp	r2, r3
 800441c:	d122      	bne.n	8004464 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 800441e:	68fa      	ldr	r2, [r7, #12]
 8004420:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 8004424:	4013      	ands	r3, r2
 8004426:	687a      	ldr	r2, [r7, #4]
 8004428:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 800442a:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 800442c:	4293      	cmp	r3, r2
 800442e:	d119      	bne.n	8004464 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8004430:	68fb      	ldr	r3, [r7, #12]
 8004432:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 8004436:	687b      	ldr	r3, [r7, #4]
 8004438:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800443a:	085b      	lsrs	r3, r3, #1
 800443c:	3b01      	subs	r3, #1
 800443e:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8004440:	429a      	cmp	r2, r3
 8004442:	d10f      	bne.n	8004464 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8004444:	68fb      	ldr	r3, [r7, #12]
 8004446:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 800444a:	687b      	ldr	r3, [r7, #4]
 800444c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800444e:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8004450:	429a      	cmp	r2, r3
 8004452:	d107      	bne.n	8004464 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
 8004454:	68fb      	ldr	r3, [r7, #12]
 8004456:	f003 42e0 	and.w	r2, r3, #1879048192	@ 0x70000000
 800445a:	687b      	ldr	r3, [r7, #4]
 800445c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800445e:	071b      	lsls	r3, r3, #28
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8004460:	429a      	cmp	r2, r3
 8004462:	d001      	beq.n	8004468 <HAL_RCC_OscConfig+0x52c>
>>>>>>> 39e4d10438a821cc799a472af87a77c6796a1676
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
#endif
        {
          return HAL_ERROR;
<<<<<<< HEAD
 8004350:	2301      	movs	r3, #1
 8004352:	e000      	b.n	8004356 <HAL_RCC_OscConfig+0x52e>
=======
 8004464:	2301      	movs	r3, #1
 8004466:	e000      	b.n	800446a <HAL_RCC_OscConfig+0x52e>
>>>>>>> 39e4d10438a821cc799a472af87a77c6796a1676
        }
      }
    }
  }
  return HAL_OK;
<<<<<<< HEAD
 8004354:	2300      	movs	r3, #0
}
 8004356:	4618      	mov	r0, r3
 8004358:	3718      	adds	r7, #24
 800435a:	46bd      	mov	sp, r7
 800435c:	bd80      	pop	{r7, pc}
 800435e:	bf00      	nop
 8004360:	40023800 	.word	0x40023800

08004364 <HAL_TIM_Base_Init>:
=======
 8004468:	2300      	movs	r3, #0
}
 800446a:	4618      	mov	r0, r3
 800446c:	3718      	adds	r7, #24
 800446e:	46bd      	mov	sp, r7
 8004470:	bd80      	pop	{r7, pc}
 8004472:	bf00      	nop
 8004474:	40023800 	.word	0x40023800

08004478 <HAL_TIM_Base_Init>:
>>>>>>> 39e4d10438a821cc799a472af87a77c6796a1676
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
<<<<<<< HEAD
 8004364:	b580      	push	{r7, lr}
 8004366:	b082      	sub	sp, #8
 8004368:	af00      	add	r7, sp, #0
 800436a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800436c:	687b      	ldr	r3, [r7, #4]
 800436e:	2b00      	cmp	r3, #0
 8004370:	d101      	bne.n	8004376 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8004372:	2301      	movs	r3, #1
 8004374:	e041      	b.n	80043fa <HAL_TIM_Base_Init+0x96>
=======
 8004478:	b580      	push	{r7, lr}
 800447a:	b082      	sub	sp, #8
 800447c:	af00      	add	r7, sp, #0
 800447e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8004480:	687b      	ldr	r3, [r7, #4]
 8004482:	2b00      	cmp	r3, #0
 8004484:	d101      	bne.n	800448a <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8004486:	2301      	movs	r3, #1
 8004488:	e041      	b.n	800450e <HAL_TIM_Base_Init+0x96>
>>>>>>> 39e4d10438a821cc799a472af87a77c6796a1676
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
<<<<<<< HEAD
 8004376:	687b      	ldr	r3, [r7, #4]
 8004378:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800437c:	b2db      	uxtb	r3, r3
 800437e:	2b00      	cmp	r3, #0
 8004380:	d106      	bne.n	8004390 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8004382:	687b      	ldr	r3, [r7, #4]
 8004384:	2200      	movs	r2, #0
 8004386:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
=======
 800448a:	687b      	ldr	r3, [r7, #4]
 800448c:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8004490:	b2db      	uxtb	r3, r3
 8004492:	2b00      	cmp	r3, #0
 8004494:	d106      	bne.n	80044a4 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8004496:	687b      	ldr	r3, [r7, #4]
 8004498:	2200      	movs	r2, #0
 800449a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
>>>>>>> 39e4d10438a821cc799a472af87a77c6796a1676
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
<<<<<<< HEAD
 800438a:	6878      	ldr	r0, [r7, #4]
 800438c:	f7fd fc4c 	bl	8001c28 <HAL_TIM_Base_MspInit>
=======
 800449e:	6878      	ldr	r0, [r7, #4]
 80044a0:	f7fd fc4c 	bl	8001d3c <HAL_TIM_Base_MspInit>
>>>>>>> 39e4d10438a821cc799a472af87a77c6796a1676
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
<<<<<<< HEAD
 8004390:	687b      	ldr	r3, [r7, #4]
 8004392:	2202      	movs	r2, #2
 8004394:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8004398:	687b      	ldr	r3, [r7, #4]
 800439a:	681a      	ldr	r2, [r3, #0]
 800439c:	687b      	ldr	r3, [r7, #4]
 800439e:	3304      	adds	r3, #4
 80043a0:	4619      	mov	r1, r3
 80043a2:	4610      	mov	r0, r2
 80043a4:	f000 fcb2 	bl	8004d0c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80043a8:	687b      	ldr	r3, [r7, #4]
 80043aa:	2201      	movs	r2, #1
 80043ac:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80043b0:	687b      	ldr	r3, [r7, #4]
 80043b2:	2201      	movs	r2, #1
 80043b4:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 80043b8:	687b      	ldr	r3, [r7, #4]
 80043ba:	2201      	movs	r2, #1
 80043bc:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 80043c0:	687b      	ldr	r3, [r7, #4]
 80043c2:	2201      	movs	r2, #1
 80043c4:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 80043c8:	687b      	ldr	r3, [r7, #4]
 80043ca:	2201      	movs	r2, #1
 80043cc:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80043d0:	687b      	ldr	r3, [r7, #4]
 80043d2:	2201      	movs	r2, #1
 80043d4:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 80043d8:	687b      	ldr	r3, [r7, #4]
 80043da:	2201      	movs	r2, #1
 80043dc:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 80043e0:	687b      	ldr	r3, [r7, #4]
 80043e2:	2201      	movs	r2, #1
 80043e4:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 80043e8:	687b      	ldr	r3, [r7, #4]
 80043ea:	2201      	movs	r2, #1
 80043ec:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80043f0:	687b      	ldr	r3, [r7, #4]
 80043f2:	2201      	movs	r2, #1
 80043f4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 80043f8:	2300      	movs	r3, #0
}
 80043fa:	4618      	mov	r0, r3
 80043fc:	3708      	adds	r7, #8
 80043fe:	46bd      	mov	sp, r7
 8004400:	bd80      	pop	{r7, pc}
	...

08004404 <HAL_TIM_Base_Start>:
=======
 80044a4:	687b      	ldr	r3, [r7, #4]
 80044a6:	2202      	movs	r2, #2
 80044a8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80044ac:	687b      	ldr	r3, [r7, #4]
 80044ae:	681a      	ldr	r2, [r3, #0]
 80044b0:	687b      	ldr	r3, [r7, #4]
 80044b2:	3304      	adds	r3, #4
 80044b4:	4619      	mov	r1, r3
 80044b6:	4610      	mov	r0, r2
 80044b8:	f000 fcb2 	bl	8004e20 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80044bc:	687b      	ldr	r3, [r7, #4]
 80044be:	2201      	movs	r2, #1
 80044c0:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80044c4:	687b      	ldr	r3, [r7, #4]
 80044c6:	2201      	movs	r2, #1
 80044c8:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 80044cc:	687b      	ldr	r3, [r7, #4]
 80044ce:	2201      	movs	r2, #1
 80044d0:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 80044d4:	687b      	ldr	r3, [r7, #4]
 80044d6:	2201      	movs	r2, #1
 80044d8:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 80044dc:	687b      	ldr	r3, [r7, #4]
 80044de:	2201      	movs	r2, #1
 80044e0:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80044e4:	687b      	ldr	r3, [r7, #4]
 80044e6:	2201      	movs	r2, #1
 80044e8:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 80044ec:	687b      	ldr	r3, [r7, #4]
 80044ee:	2201      	movs	r2, #1
 80044f0:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 80044f4:	687b      	ldr	r3, [r7, #4]
 80044f6:	2201      	movs	r2, #1
 80044f8:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 80044fc:	687b      	ldr	r3, [r7, #4]
 80044fe:	2201      	movs	r2, #1
 8004500:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8004504:	687b      	ldr	r3, [r7, #4]
 8004506:	2201      	movs	r2, #1
 8004508:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 800450c:	2300      	movs	r3, #0
}
 800450e:	4618      	mov	r0, r3
 8004510:	3708      	adds	r7, #8
 8004512:	46bd      	mov	sp, r7
 8004514:	bd80      	pop	{r7, pc}
	...

08004518 <HAL_TIM_Base_Start>:
>>>>>>> 39e4d10438a821cc799a472af87a77c6796a1676
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
<<<<<<< HEAD
 8004404:	b480      	push	{r7}
 8004406:	b085      	sub	sp, #20
 8004408:	af00      	add	r7, sp, #0
 800440a:	6078      	str	r0, [r7, #4]
=======
 8004518:	b480      	push	{r7}
 800451a:	b085      	sub	sp, #20
 800451c:	af00      	add	r7, sp, #0
 800451e:	6078      	str	r0, [r7, #4]
>>>>>>> 39e4d10438a821cc799a472af87a77c6796a1676
>>>>>>> ef0d341697957f8628c074acbc12bb9a12bbe146

08003978 <HAL_RCC_GetHCLKFreq>:
 8003978:	b480      	push	{r7}
 800397a:	af00      	add	r7, sp, #0
 800397c:	4b03      	ldr	r3, [pc, #12]	@ (800398c <HAL_RCC_GetHCLKFreq+0x14>)
 800397e:	681b      	ldr	r3, [r3, #0]
 8003980:	4618      	mov	r0, r3
 8003982:	46bd      	mov	sp, r7
 8003984:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003988:	4770      	bx	lr
 800398a:	bf00      	nop
 800398c:	20000000 	.word	0x20000000

<<<<<<< HEAD
08003990 <HAL_RCC_GetPCLK1Freq>:
 8003990:	b580      	push	{r7, lr}
 8003992:	af00      	add	r7, sp, #0
 8003994:	f7ff fff0 	bl	8003978 <HAL_RCC_GetHCLKFreq>
 8003998:	4602      	mov	r2, r0
 800399a:	4b05      	ldr	r3, [pc, #20]	@ (80039b0 <HAL_RCC_GetPCLK1Freq+0x20>)
 800399c:	689b      	ldr	r3, [r3, #8]
 800399e:	0a9b      	lsrs	r3, r3, #10
 80039a0:	f003 0307 	and.w	r3, r3, #7
 80039a4:	4903      	ldr	r1, [pc, #12]	@ (80039b4 <HAL_RCC_GetPCLK1Freq+0x24>)
 80039a6:	5ccb      	ldrb	r3, [r1, r3]
 80039a8:	fa22 f303 	lsr.w	r3, r2, r3
 80039ac:	4618      	mov	r0, r3
 80039ae:	bd80      	pop	{r7, pc}
 80039b0:	40023800 	.word	0x40023800
 80039b4:	0800a340 	.word	0x0800a340

080039b8 <HAL_RCC_GetPCLK2Freq>:
 80039b8:	b580      	push	{r7, lr}
 80039ba:	af00      	add	r7, sp, #0
 80039bc:	f7ff ffdc 	bl	8003978 <HAL_RCC_GetHCLKFreq>
 80039c0:	4602      	mov	r2, r0
 80039c2:	4b05      	ldr	r3, [pc, #20]	@ (80039d8 <HAL_RCC_GetPCLK2Freq+0x20>)
 80039c4:	689b      	ldr	r3, [r3, #8]
 80039c6:	0b5b      	lsrs	r3, r3, #13
 80039c8:	f003 0307 	and.w	r3, r3, #7
 80039cc:	4903      	ldr	r1, [pc, #12]	@ (80039dc <HAL_RCC_GetPCLK2Freq+0x24>)
 80039ce:	5ccb      	ldrb	r3, [r1, r3]
 80039d0:	fa22 f303 	lsr.w	r3, r2, r3
 80039d4:	4618      	mov	r0, r3
 80039d6:	bd80      	pop	{r7, pc}
 80039d8:	40023800 	.word	0x40023800
 80039dc:	0800a340 	.word	0x0800a340

080039e0 <HAL_RCC_GetSysClockFreq>:
 80039e0:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80039e4:	b0ae      	sub	sp, #184	@ 0xb8
 80039e6:	af00      	add	r7, sp, #0
 80039e8:	2300      	movs	r3, #0
 80039ea:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 80039ee:	2300      	movs	r3, #0
 80039f0:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 80039f4:	2300      	movs	r3, #0
 80039f6:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 80039fa:	2300      	movs	r3, #0
 80039fc:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
 8003a00:	2300      	movs	r3, #0
 8003a02:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8003a06:	4bcb      	ldr	r3, [pc, #812]	@ (8003d34 <HAL_RCC_GetSysClockFreq+0x354>)
 8003a08:	689b      	ldr	r3, [r3, #8]
 8003a0a:	f003 030c 	and.w	r3, r3, #12
 8003a0e:	2b0c      	cmp	r3, #12
 8003a10:	f200 8206 	bhi.w	8003e20 <HAL_RCC_GetSysClockFreq+0x440>
 8003a14:	a201      	add	r2, pc, #4	@ (adr r2, 8003a1c <HAL_RCC_GetSysClockFreq+0x3c>)
 8003a16:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003a1a:	bf00      	nop
 8003a1c:	08003a51 	.word	0x08003a51
 8003a20:	08003e21 	.word	0x08003e21
 8003a24:	08003e21 	.word	0x08003e21
 8003a28:	08003e21 	.word	0x08003e21
 8003a2c:	08003a59 	.word	0x08003a59
 8003a30:	08003e21 	.word	0x08003e21
 8003a34:	08003e21 	.word	0x08003e21
 8003a38:	08003e21 	.word	0x08003e21
 8003a3c:	08003a61 	.word	0x08003a61
 8003a40:	08003e21 	.word	0x08003e21
 8003a44:	08003e21 	.word	0x08003e21
 8003a48:	08003e21 	.word	0x08003e21
 8003a4c:	08003c51 	.word	0x08003c51
 8003a50:	4bb9      	ldr	r3, [pc, #740]	@ (8003d38 <HAL_RCC_GetSysClockFreq+0x358>)
 8003a52:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8003a56:	e1e7      	b.n	8003e28 <HAL_RCC_GetSysClockFreq+0x448>
 8003a58:	4bb8      	ldr	r3, [pc, #736]	@ (8003d3c <HAL_RCC_GetSysClockFreq+0x35c>)
 8003a5a:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8003a5e:	e1e3      	b.n	8003e28 <HAL_RCC_GetSysClockFreq+0x448>
 8003a60:	4bb4      	ldr	r3, [pc, #720]	@ (8003d34 <HAL_RCC_GetSysClockFreq+0x354>)
 8003a62:	685b      	ldr	r3, [r3, #4]
 8003a64:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8003a68:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 8003a6c:	4bb1      	ldr	r3, [pc, #708]	@ (8003d34 <HAL_RCC_GetSysClockFreq+0x354>)
 8003a6e:	685b      	ldr	r3, [r3, #4]
 8003a70:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8003a74:	2b00      	cmp	r3, #0
 8003a76:	d071      	beq.n	8003b5c <HAL_RCC_GetSysClockFreq+0x17c>
 8003a78:	4bae      	ldr	r3, [pc, #696]	@ (8003d34 <HAL_RCC_GetSysClockFreq+0x354>)
 8003a7a:	685b      	ldr	r3, [r3, #4]
 8003a7c:	099b      	lsrs	r3, r3, #6
 8003a7e:	2200      	movs	r2, #0
 8003a80:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 8003a84:	f8c7 209c 	str.w	r2, [r7, #156]	@ 0x9c
 8003a88:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8003a8c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003a90:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 8003a94:	2300      	movs	r3, #0
 8003a96:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 8003a9a:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	@ 0x90
 8003a9e:	4622      	mov	r2, r4
 8003aa0:	462b      	mov	r3, r5
 8003aa2:	f04f 0000 	mov.w	r0, #0
 8003aa6:	f04f 0100 	mov.w	r1, #0
 8003aaa:	0159      	lsls	r1, r3, #5
 8003aac:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8003ab0:	0150      	lsls	r0, r2, #5
 8003ab2:	4602      	mov	r2, r0
 8003ab4:	460b      	mov	r3, r1
 8003ab6:	4621      	mov	r1, r4
 8003ab8:	1a51      	subs	r1, r2, r1
 8003aba:	6439      	str	r1, [r7, #64]	@ 0x40
 8003abc:	4629      	mov	r1, r5
 8003abe:	eb63 0301 	sbc.w	r3, r3, r1
 8003ac2:	647b      	str	r3, [r7, #68]	@ 0x44
 8003ac4:	f04f 0200 	mov.w	r2, #0
 8003ac8:	f04f 0300 	mov.w	r3, #0
 8003acc:	e9d7 8910 	ldrd	r8, r9, [r7, #64]	@ 0x40
 8003ad0:	4649      	mov	r1, r9
 8003ad2:	018b      	lsls	r3, r1, #6
 8003ad4:	4641      	mov	r1, r8
 8003ad6:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8003ada:	4641      	mov	r1, r8
 8003adc:	018a      	lsls	r2, r1, #6
 8003ade:	4641      	mov	r1, r8
 8003ae0:	1a51      	subs	r1, r2, r1
 8003ae2:	63b9      	str	r1, [r7, #56]	@ 0x38
 8003ae4:	4649      	mov	r1, r9
 8003ae6:	eb63 0301 	sbc.w	r3, r3, r1
 8003aea:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8003aec:	f04f 0200 	mov.w	r2, #0
 8003af0:	f04f 0300 	mov.w	r3, #0
 8003af4:	e9d7 890e 	ldrd	r8, r9, [r7, #56]	@ 0x38
 8003af8:	4649      	mov	r1, r9
 8003afa:	00cb      	lsls	r3, r1, #3
 8003afc:	4641      	mov	r1, r8
 8003afe:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8003b02:	4641      	mov	r1, r8
 8003b04:	00ca      	lsls	r2, r1, #3
 8003b06:	4610      	mov	r0, r2
 8003b08:	4619      	mov	r1, r3
 8003b0a:	4603      	mov	r3, r0
 8003b0c:	4622      	mov	r2, r4
 8003b0e:	189b      	adds	r3, r3, r2
 8003b10:	633b      	str	r3, [r7, #48]	@ 0x30
 8003b12:	462b      	mov	r3, r5
 8003b14:	460a      	mov	r2, r1
 8003b16:	eb42 0303 	adc.w	r3, r2, r3
 8003b1a:	637b      	str	r3, [r7, #52]	@ 0x34
 8003b1c:	f04f 0200 	mov.w	r2, #0
 8003b20:	f04f 0300 	mov.w	r3, #0
 8003b24:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	@ 0x30
 8003b28:	4629      	mov	r1, r5
 8003b2a:	024b      	lsls	r3, r1, #9
 8003b2c:	4621      	mov	r1, r4
 8003b2e:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8003b32:	4621      	mov	r1, r4
 8003b34:	024a      	lsls	r2, r1, #9
 8003b36:	4610      	mov	r0, r2
 8003b38:	4619      	mov	r1, r3
 8003b3a:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8003b3e:	2200      	movs	r2, #0
 8003b40:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 8003b44:	f8c7 208c 	str.w	r2, [r7, #140]	@ 0x8c
 8003b48:	e9d7 2322 	ldrd	r2, r3, [r7, #136]	@ 0x88
 8003b4c:	f7fd f89c 	bl	8000c88 <__aeabi_uldivmod>
 8003b50:	4602      	mov	r2, r0
 8003b52:	460b      	mov	r3, r1
 8003b54:	4613      	mov	r3, r2
 8003b56:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8003b5a:	e067      	b.n	8003c2c <HAL_RCC_GetSysClockFreq+0x24c>
 8003b5c:	4b75      	ldr	r3, [pc, #468]	@ (8003d34 <HAL_RCC_GetSysClockFreq+0x354>)
 8003b5e:	685b      	ldr	r3, [r3, #4]
 8003b60:	099b      	lsrs	r3, r3, #6
 8003b62:	2200      	movs	r2, #0
 8003b64:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8003b68:	f8c7 2084 	str.w	r2, [r7, #132]	@ 0x84
 8003b6c:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 8003b70:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003b74:	67bb      	str	r3, [r7, #120]	@ 0x78
 8003b76:	2300      	movs	r3, #0
 8003b78:	67fb      	str	r3, [r7, #124]	@ 0x7c
 8003b7a:	e9d7 451e 	ldrd	r4, r5, [r7, #120]	@ 0x78
 8003b7e:	4622      	mov	r2, r4
 8003b80:	462b      	mov	r3, r5
 8003b82:	f04f 0000 	mov.w	r0, #0
 8003b86:	f04f 0100 	mov.w	r1, #0
 8003b8a:	0159      	lsls	r1, r3, #5
 8003b8c:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8003b90:	0150      	lsls	r0, r2, #5
 8003b92:	4602      	mov	r2, r0
 8003b94:	460b      	mov	r3, r1
 8003b96:	4621      	mov	r1, r4
 8003b98:	1a51      	subs	r1, r2, r1
 8003b9a:	62b9      	str	r1, [r7, #40]	@ 0x28
 8003b9c:	4629      	mov	r1, r5
 8003b9e:	eb63 0301 	sbc.w	r3, r3, r1
 8003ba2:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8003ba4:	f04f 0200 	mov.w	r2, #0
 8003ba8:	f04f 0300 	mov.w	r3, #0
 8003bac:	e9d7 890a 	ldrd	r8, r9, [r7, #40]	@ 0x28
 8003bb0:	4649      	mov	r1, r9
 8003bb2:	018b      	lsls	r3, r1, #6
 8003bb4:	4641      	mov	r1, r8
 8003bb6:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8003bba:	4641      	mov	r1, r8
 8003bbc:	018a      	lsls	r2, r1, #6
 8003bbe:	4641      	mov	r1, r8
 8003bc0:	ebb2 0a01 	subs.w	sl, r2, r1
 8003bc4:	4649      	mov	r1, r9
 8003bc6:	eb63 0b01 	sbc.w	fp, r3, r1
 8003bca:	f04f 0200 	mov.w	r2, #0
 8003bce:	f04f 0300 	mov.w	r3, #0
 8003bd2:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8003bd6:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8003bda:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8003bde:	4692      	mov	sl, r2
 8003be0:	469b      	mov	fp, r3
 8003be2:	4623      	mov	r3, r4
 8003be4:	eb1a 0303 	adds.w	r3, sl, r3
 8003be8:	623b      	str	r3, [r7, #32]
 8003bea:	462b      	mov	r3, r5
 8003bec:	eb4b 0303 	adc.w	r3, fp, r3
 8003bf0:	627b      	str	r3, [r7, #36]	@ 0x24
 8003bf2:	f04f 0200 	mov.w	r2, #0
 8003bf6:	f04f 0300 	mov.w	r3, #0
 8003bfa:	e9d7 4508 	ldrd	r4, r5, [r7, #32]
 8003bfe:	4629      	mov	r1, r5
 8003c00:	028b      	lsls	r3, r1, #10
 8003c02:	4621      	mov	r1, r4
 8003c04:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8003c08:	4621      	mov	r1, r4
 8003c0a:	028a      	lsls	r2, r1, #10
 8003c0c:	4610      	mov	r0, r2
 8003c0e:	4619      	mov	r1, r3
 8003c10:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8003c14:	2200      	movs	r2, #0
 8003c16:	673b      	str	r3, [r7, #112]	@ 0x70
 8003c18:	677a      	str	r2, [r7, #116]	@ 0x74
 8003c1a:	e9d7 231c 	ldrd	r2, r3, [r7, #112]	@ 0x70
 8003c1e:	f7fd f833 	bl	8000c88 <__aeabi_uldivmod>
 8003c22:	4602      	mov	r2, r0
 8003c24:	460b      	mov	r3, r1
 8003c26:	4613      	mov	r3, r2
 8003c28:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8003c2c:	4b41      	ldr	r3, [pc, #260]	@ (8003d34 <HAL_RCC_GetSysClockFreq+0x354>)
 8003c2e:	685b      	ldr	r3, [r3, #4]
 8003c30:	0c1b      	lsrs	r3, r3, #16
 8003c32:	f003 0303 	and.w	r3, r3, #3
 8003c36:	3301      	adds	r3, #1
 8003c38:	005b      	lsls	r3, r3, #1
 8003c3a:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 8003c3e:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 8003c42:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 8003c46:	fbb2 f3f3 	udiv	r3, r2, r3
 8003c4a:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8003c4e:	e0eb      	b.n	8003e28 <HAL_RCC_GetSysClockFreq+0x448>
 8003c50:	4b38      	ldr	r3, [pc, #224]	@ (8003d34 <HAL_RCC_GetSysClockFreq+0x354>)
 8003c52:	685b      	ldr	r3, [r3, #4]
 8003c54:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8003c58:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 8003c5c:	4b35      	ldr	r3, [pc, #212]	@ (8003d34 <HAL_RCC_GetSysClockFreq+0x354>)
 8003c5e:	685b      	ldr	r3, [r3, #4]
 8003c60:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8003c64:	2b00      	cmp	r3, #0
 8003c66:	d06b      	beq.n	8003d40 <HAL_RCC_GetSysClockFreq+0x360>
 8003c68:	4b32      	ldr	r3, [pc, #200]	@ (8003d34 <HAL_RCC_GetSysClockFreq+0x354>)
 8003c6a:	685b      	ldr	r3, [r3, #4]
 8003c6c:	099b      	lsrs	r3, r3, #6
 8003c6e:	2200      	movs	r2, #0
 8003c70:	66bb      	str	r3, [r7, #104]	@ 0x68
 8003c72:	66fa      	str	r2, [r7, #108]	@ 0x6c
 8003c74:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8003c76:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003c7a:	663b      	str	r3, [r7, #96]	@ 0x60
 8003c7c:	2300      	movs	r3, #0
 8003c7e:	667b      	str	r3, [r7, #100]	@ 0x64
 8003c80:	e9d7 4518 	ldrd	r4, r5, [r7, #96]	@ 0x60
 8003c84:	4622      	mov	r2, r4
 8003c86:	462b      	mov	r3, r5
 8003c88:	f04f 0000 	mov.w	r0, #0
 8003c8c:	f04f 0100 	mov.w	r1, #0
 8003c90:	0159      	lsls	r1, r3, #5
 8003c92:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8003c96:	0150      	lsls	r0, r2, #5
 8003c98:	4602      	mov	r2, r0
 8003c9a:	460b      	mov	r3, r1
 8003c9c:	4621      	mov	r1, r4
 8003c9e:	1a51      	subs	r1, r2, r1
 8003ca0:	61b9      	str	r1, [r7, #24]
 8003ca2:	4629      	mov	r1, r5
 8003ca4:	eb63 0301 	sbc.w	r3, r3, r1
 8003ca8:	61fb      	str	r3, [r7, #28]
 8003caa:	f04f 0200 	mov.w	r2, #0
 8003cae:	f04f 0300 	mov.w	r3, #0
 8003cb2:	e9d7 ab06 	ldrd	sl, fp, [r7, #24]
 8003cb6:	4659      	mov	r1, fp
 8003cb8:	018b      	lsls	r3, r1, #6
 8003cba:	4651      	mov	r1, sl
 8003cbc:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8003cc0:	4651      	mov	r1, sl
 8003cc2:	018a      	lsls	r2, r1, #6
 8003cc4:	4651      	mov	r1, sl
 8003cc6:	ebb2 0801 	subs.w	r8, r2, r1
 8003cca:	4659      	mov	r1, fp
 8003ccc:	eb63 0901 	sbc.w	r9, r3, r1
 8003cd0:	f04f 0200 	mov.w	r2, #0
 8003cd4:	f04f 0300 	mov.w	r3, #0
 8003cd8:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8003cdc:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8003ce0:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8003ce4:	4690      	mov	r8, r2
 8003ce6:	4699      	mov	r9, r3
 8003ce8:	4623      	mov	r3, r4
 8003cea:	eb18 0303 	adds.w	r3, r8, r3
 8003cee:	613b      	str	r3, [r7, #16]
 8003cf0:	462b      	mov	r3, r5
 8003cf2:	eb49 0303 	adc.w	r3, r9, r3
 8003cf6:	617b      	str	r3, [r7, #20]
 8003cf8:	f04f 0200 	mov.w	r2, #0
 8003cfc:	f04f 0300 	mov.w	r3, #0
 8003d00:	e9d7 4504 	ldrd	r4, r5, [r7, #16]
 8003d04:	4629      	mov	r1, r5
 8003d06:	024b      	lsls	r3, r1, #9
 8003d08:	4621      	mov	r1, r4
 8003d0a:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8003d0e:	4621      	mov	r1, r4
 8003d10:	024a      	lsls	r2, r1, #9
 8003d12:	4610      	mov	r0, r2
 8003d14:	4619      	mov	r1, r3
 8003d16:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8003d1a:	2200      	movs	r2, #0
 8003d1c:	65bb      	str	r3, [r7, #88]	@ 0x58
 8003d1e:	65fa      	str	r2, [r7, #92]	@ 0x5c
 8003d20:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	@ 0x58
 8003d24:	f7fc ffb0 	bl	8000c88 <__aeabi_uldivmod>
 8003d28:	4602      	mov	r2, r0
 8003d2a:	460b      	mov	r3, r1
 8003d2c:	4613      	mov	r3, r2
 8003d2e:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8003d32:	e065      	b.n	8003e00 <HAL_RCC_GetSysClockFreq+0x420>
 8003d34:	40023800 	.word	0x40023800
 8003d38:	00f42400 	.word	0x00f42400
 8003d3c:	007a1200 	.word	0x007a1200
 8003d40:	4b3d      	ldr	r3, [pc, #244]	@ (8003e38 <HAL_RCC_GetSysClockFreq+0x458>)
 8003d42:	685b      	ldr	r3, [r3, #4]
 8003d44:	099b      	lsrs	r3, r3, #6
 8003d46:	2200      	movs	r2, #0
 8003d48:	4618      	mov	r0, r3
 8003d4a:	4611      	mov	r1, r2
 8003d4c:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8003d50:	653b      	str	r3, [r7, #80]	@ 0x50
 8003d52:	2300      	movs	r3, #0
 8003d54:	657b      	str	r3, [r7, #84]	@ 0x54
 8003d56:	e9d7 8914 	ldrd	r8, r9, [r7, #80]	@ 0x50
 8003d5a:	4642      	mov	r2, r8
 8003d5c:	464b      	mov	r3, r9
 8003d5e:	f04f 0000 	mov.w	r0, #0
 8003d62:	f04f 0100 	mov.w	r1, #0
 8003d66:	0159      	lsls	r1, r3, #5
 8003d68:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8003d6c:	0150      	lsls	r0, r2, #5
 8003d6e:	4602      	mov	r2, r0
 8003d70:	460b      	mov	r3, r1
 8003d72:	4641      	mov	r1, r8
 8003d74:	1a51      	subs	r1, r2, r1
 8003d76:	60b9      	str	r1, [r7, #8]
 8003d78:	4649      	mov	r1, r9
 8003d7a:	eb63 0301 	sbc.w	r3, r3, r1
 8003d7e:	60fb      	str	r3, [r7, #12]
 8003d80:	f04f 0200 	mov.w	r2, #0
 8003d84:	f04f 0300 	mov.w	r3, #0
 8003d88:	e9d7 ab02 	ldrd	sl, fp, [r7, #8]
 8003d8c:	4659      	mov	r1, fp
 8003d8e:	018b      	lsls	r3, r1, #6
 8003d90:	4651      	mov	r1, sl
 8003d92:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8003d96:	4651      	mov	r1, sl
 8003d98:	018a      	lsls	r2, r1, #6
 8003d9a:	4651      	mov	r1, sl
 8003d9c:	1a54      	subs	r4, r2, r1
 8003d9e:	4659      	mov	r1, fp
 8003da0:	eb63 0501 	sbc.w	r5, r3, r1
 8003da4:	f04f 0200 	mov.w	r2, #0
 8003da8:	f04f 0300 	mov.w	r3, #0
 8003dac:	00eb      	lsls	r3, r5, #3
 8003dae:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8003db2:	00e2      	lsls	r2, r4, #3
 8003db4:	4614      	mov	r4, r2
 8003db6:	461d      	mov	r5, r3
 8003db8:	4643      	mov	r3, r8
 8003dba:	18e3      	adds	r3, r4, r3
 8003dbc:	603b      	str	r3, [r7, #0]
 8003dbe:	464b      	mov	r3, r9
 8003dc0:	eb45 0303 	adc.w	r3, r5, r3
 8003dc4:	607b      	str	r3, [r7, #4]
 8003dc6:	f04f 0200 	mov.w	r2, #0
 8003dca:	f04f 0300 	mov.w	r3, #0
 8003dce:	e9d7 4500 	ldrd	r4, r5, [r7]
 8003dd2:	4629      	mov	r1, r5
 8003dd4:	028b      	lsls	r3, r1, #10
 8003dd6:	4621      	mov	r1, r4
 8003dd8:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8003ddc:	4621      	mov	r1, r4
 8003dde:	028a      	lsls	r2, r1, #10
 8003de0:	4610      	mov	r0, r2
 8003de2:	4619      	mov	r1, r3
 8003de4:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8003de8:	2200      	movs	r2, #0
 8003dea:	64bb      	str	r3, [r7, #72]	@ 0x48
 8003dec:	64fa      	str	r2, [r7, #76]	@ 0x4c
 8003dee:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	@ 0x48
 8003df2:	f7fc ff49 	bl	8000c88 <__aeabi_uldivmod>
 8003df6:	4602      	mov	r2, r0
 8003df8:	460b      	mov	r3, r1
 8003dfa:	4613      	mov	r3, r2
 8003dfc:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8003e00:	4b0d      	ldr	r3, [pc, #52]	@ (8003e38 <HAL_RCC_GetSysClockFreq+0x458>)
 8003e02:	685b      	ldr	r3, [r3, #4]
 8003e04:	0f1b      	lsrs	r3, r3, #28
 8003e06:	f003 0307 	and.w	r3, r3, #7
 8003e0a:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
 8003e0e:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 8003e12:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 8003e16:	fbb2 f3f3 	udiv	r3, r2, r3
 8003e1a:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8003e1e:	e003      	b.n	8003e28 <HAL_RCC_GetSysClockFreq+0x448>
 8003e20:	4b06      	ldr	r3, [pc, #24]	@ (8003e3c <HAL_RCC_GetSysClockFreq+0x45c>)
 8003e22:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8003e26:	bf00      	nop
 8003e28:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
 8003e2c:	4618      	mov	r0, r3
 8003e2e:	37b8      	adds	r7, #184	@ 0xb8
 8003e30:	46bd      	mov	sp, r7
 8003e32:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8003e36:	bf00      	nop
 8003e38:	40023800 	.word	0x40023800
 8003e3c:	00f42400 	.word	0x00f42400

08003e40 <HAL_RCC_OscConfig>:
 8003e40:	b580      	push	{r7, lr}
 8003e42:	b086      	sub	sp, #24
 8003e44:	af00      	add	r7, sp, #0
 8003e46:	6078      	str	r0, [r7, #4]
 8003e48:	687b      	ldr	r3, [r7, #4]
 8003e4a:	2b00      	cmp	r3, #0
 8003e4c:	d101      	bne.n	8003e52 <HAL_RCC_OscConfig+0x12>
 8003e4e:	2301      	movs	r3, #1
 8003e50:	e28d      	b.n	800436e <HAL_RCC_OscConfig+0x52e>
 8003e52:	687b      	ldr	r3, [r7, #4]
 8003e54:	681b      	ldr	r3, [r3, #0]
 8003e56:	f003 0301 	and.w	r3, r3, #1
 8003e5a:	2b00      	cmp	r3, #0
 8003e5c:	f000 8083 	beq.w	8003f66 <HAL_RCC_OscConfig+0x126>
 8003e60:	4b94      	ldr	r3, [pc, #592]	@ (80040b4 <HAL_RCC_OscConfig+0x274>)
 8003e62:	689b      	ldr	r3, [r3, #8]
 8003e64:	f003 030c 	and.w	r3, r3, #12
 8003e68:	2b04      	cmp	r3, #4
 8003e6a:	d019      	beq.n	8003ea0 <HAL_RCC_OscConfig+0x60>
 8003e6c:	4b91      	ldr	r3, [pc, #580]	@ (80040b4 <HAL_RCC_OscConfig+0x274>)
 8003e6e:	689b      	ldr	r3, [r3, #8]
 8003e70:	f003 030c 	and.w	r3, r3, #12
 8003e74:	2b08      	cmp	r3, #8
 8003e76:	d106      	bne.n	8003e86 <HAL_RCC_OscConfig+0x46>
 8003e78:	4b8e      	ldr	r3, [pc, #568]	@ (80040b4 <HAL_RCC_OscConfig+0x274>)
 8003e7a:	685b      	ldr	r3, [r3, #4]
 8003e7c:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8003e80:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8003e84:	d00c      	beq.n	8003ea0 <HAL_RCC_OscConfig+0x60>
 8003e86:	4b8b      	ldr	r3, [pc, #556]	@ (80040b4 <HAL_RCC_OscConfig+0x274>)
 8003e88:	689b      	ldr	r3, [r3, #8]
 8003e8a:	f003 030c 	and.w	r3, r3, #12
 8003e8e:	2b0c      	cmp	r3, #12
 8003e90:	d112      	bne.n	8003eb8 <HAL_RCC_OscConfig+0x78>
 8003e92:	4b88      	ldr	r3, [pc, #544]	@ (80040b4 <HAL_RCC_OscConfig+0x274>)
 8003e94:	685b      	ldr	r3, [r3, #4]
 8003e96:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8003e9a:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8003e9e:	d10b      	bne.n	8003eb8 <HAL_RCC_OscConfig+0x78>
 8003ea0:	4b84      	ldr	r3, [pc, #528]	@ (80040b4 <HAL_RCC_OscConfig+0x274>)
 8003ea2:	681b      	ldr	r3, [r3, #0]
 8003ea4:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003ea8:	2b00      	cmp	r3, #0
 8003eaa:	d05b      	beq.n	8003f64 <HAL_RCC_OscConfig+0x124>
 8003eac:	687b      	ldr	r3, [r7, #4]
 8003eae:	685b      	ldr	r3, [r3, #4]
 8003eb0:	2b00      	cmp	r3, #0
 8003eb2:	d157      	bne.n	8003f64 <HAL_RCC_OscConfig+0x124>
 8003eb4:	2301      	movs	r3, #1
 8003eb6:	e25a      	b.n	800436e <HAL_RCC_OscConfig+0x52e>
 8003eb8:	687b      	ldr	r3, [r7, #4]
 8003eba:	685b      	ldr	r3, [r3, #4]
 8003ebc:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8003ec0:	d106      	bne.n	8003ed0 <HAL_RCC_OscConfig+0x90>
 8003ec2:	4b7c      	ldr	r3, [pc, #496]	@ (80040b4 <HAL_RCC_OscConfig+0x274>)
 8003ec4:	681b      	ldr	r3, [r3, #0]
 8003ec6:	4a7b      	ldr	r2, [pc, #492]	@ (80040b4 <HAL_RCC_OscConfig+0x274>)
 8003ec8:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8003ecc:	6013      	str	r3, [r2, #0]
 8003ece:	e01d      	b.n	8003f0c <HAL_RCC_OscConfig+0xcc>
 8003ed0:	687b      	ldr	r3, [r7, #4]
 8003ed2:	685b      	ldr	r3, [r3, #4]
 8003ed4:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8003ed8:	d10c      	bne.n	8003ef4 <HAL_RCC_OscConfig+0xb4>
 8003eda:	4b76      	ldr	r3, [pc, #472]	@ (80040b4 <HAL_RCC_OscConfig+0x274>)
 8003edc:	681b      	ldr	r3, [r3, #0]
 8003ede:	4a75      	ldr	r2, [pc, #468]	@ (80040b4 <HAL_RCC_OscConfig+0x274>)
 8003ee0:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8003ee4:	6013      	str	r3, [r2, #0]
 8003ee6:	4b73      	ldr	r3, [pc, #460]	@ (80040b4 <HAL_RCC_OscConfig+0x274>)
 8003ee8:	681b      	ldr	r3, [r3, #0]
 8003eea:	4a72      	ldr	r2, [pc, #456]	@ (80040b4 <HAL_RCC_OscConfig+0x274>)
 8003eec:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8003ef0:	6013      	str	r3, [r2, #0]
 8003ef2:	e00b      	b.n	8003f0c <HAL_RCC_OscConfig+0xcc>
 8003ef4:	4b6f      	ldr	r3, [pc, #444]	@ (80040b4 <HAL_RCC_OscConfig+0x274>)
 8003ef6:	681b      	ldr	r3, [r3, #0]
 8003ef8:	4a6e      	ldr	r2, [pc, #440]	@ (80040b4 <HAL_RCC_OscConfig+0x274>)
 8003efa:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8003efe:	6013      	str	r3, [r2, #0]
 8003f00:	4b6c      	ldr	r3, [pc, #432]	@ (80040b4 <HAL_RCC_OscConfig+0x274>)
 8003f02:	681b      	ldr	r3, [r3, #0]
 8003f04:	4a6b      	ldr	r2, [pc, #428]	@ (80040b4 <HAL_RCC_OscConfig+0x274>)
 8003f06:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8003f0a:	6013      	str	r3, [r2, #0]
 8003f0c:	687b      	ldr	r3, [r7, #4]
 8003f0e:	685b      	ldr	r3, [r3, #4]
 8003f10:	2b00      	cmp	r3, #0
 8003f12:	d013      	beq.n	8003f3c <HAL_RCC_OscConfig+0xfc>
 8003f14:	f7fe f94c 	bl	80021b0 <HAL_GetTick>
 8003f18:	6138      	str	r0, [r7, #16]
 8003f1a:	e008      	b.n	8003f2e <HAL_RCC_OscConfig+0xee>
 8003f1c:	f7fe f948 	bl	80021b0 <HAL_GetTick>
 8003f20:	4602      	mov	r2, r0
 8003f22:	693b      	ldr	r3, [r7, #16]
 8003f24:	1ad3      	subs	r3, r2, r3
 8003f26:	2b64      	cmp	r3, #100	@ 0x64
 8003f28:	d901      	bls.n	8003f2e <HAL_RCC_OscConfig+0xee>
 8003f2a:	2303      	movs	r3, #3
 8003f2c:	e21f      	b.n	800436e <HAL_RCC_OscConfig+0x52e>
 8003f2e:	4b61      	ldr	r3, [pc, #388]	@ (80040b4 <HAL_RCC_OscConfig+0x274>)
 8003f30:	681b      	ldr	r3, [r3, #0]
 8003f32:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003f36:	2b00      	cmp	r3, #0
 8003f38:	d0f0      	beq.n	8003f1c <HAL_RCC_OscConfig+0xdc>
 8003f3a:	e014      	b.n	8003f66 <HAL_RCC_OscConfig+0x126>
 8003f3c:	f7fe f938 	bl	80021b0 <HAL_GetTick>
 8003f40:	6138      	str	r0, [r7, #16]
 8003f42:	e008      	b.n	8003f56 <HAL_RCC_OscConfig+0x116>
 8003f44:	f7fe f934 	bl	80021b0 <HAL_GetTick>
 8003f48:	4602      	mov	r2, r0
 8003f4a:	693b      	ldr	r3, [r7, #16]
 8003f4c:	1ad3      	subs	r3, r2, r3
 8003f4e:	2b64      	cmp	r3, #100	@ 0x64
 8003f50:	d901      	bls.n	8003f56 <HAL_RCC_OscConfig+0x116>
 8003f52:	2303      	movs	r3, #3
 8003f54:	e20b      	b.n	800436e <HAL_RCC_OscConfig+0x52e>
 8003f56:	4b57      	ldr	r3, [pc, #348]	@ (80040b4 <HAL_RCC_OscConfig+0x274>)
 8003f58:	681b      	ldr	r3, [r3, #0]
 8003f5a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003f5e:	2b00      	cmp	r3, #0
 8003f60:	d1f0      	bne.n	8003f44 <HAL_RCC_OscConfig+0x104>
 8003f62:	e000      	b.n	8003f66 <HAL_RCC_OscConfig+0x126>
 8003f64:	bf00      	nop
 8003f66:	687b      	ldr	r3, [r7, #4]
 8003f68:	681b      	ldr	r3, [r3, #0]
 8003f6a:	f003 0302 	and.w	r3, r3, #2
 8003f6e:	2b00      	cmp	r3, #0
 8003f70:	d06f      	beq.n	8004052 <HAL_RCC_OscConfig+0x212>
 8003f72:	4b50      	ldr	r3, [pc, #320]	@ (80040b4 <HAL_RCC_OscConfig+0x274>)
 8003f74:	689b      	ldr	r3, [r3, #8]
 8003f76:	f003 030c 	and.w	r3, r3, #12
 8003f7a:	2b00      	cmp	r3, #0
 8003f7c:	d017      	beq.n	8003fae <HAL_RCC_OscConfig+0x16e>
 8003f7e:	4b4d      	ldr	r3, [pc, #308]	@ (80040b4 <HAL_RCC_OscConfig+0x274>)
 8003f80:	689b      	ldr	r3, [r3, #8]
 8003f82:	f003 030c 	and.w	r3, r3, #12
 8003f86:	2b08      	cmp	r3, #8
 8003f88:	d105      	bne.n	8003f96 <HAL_RCC_OscConfig+0x156>
 8003f8a:	4b4a      	ldr	r3, [pc, #296]	@ (80040b4 <HAL_RCC_OscConfig+0x274>)
 8003f8c:	685b      	ldr	r3, [r3, #4]
 8003f8e:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8003f92:	2b00      	cmp	r3, #0
 8003f94:	d00b      	beq.n	8003fae <HAL_RCC_OscConfig+0x16e>
 8003f96:	4b47      	ldr	r3, [pc, #284]	@ (80040b4 <HAL_RCC_OscConfig+0x274>)
 8003f98:	689b      	ldr	r3, [r3, #8]
 8003f9a:	f003 030c 	and.w	r3, r3, #12
 8003f9e:	2b0c      	cmp	r3, #12
 8003fa0:	d11c      	bne.n	8003fdc <HAL_RCC_OscConfig+0x19c>
 8003fa2:	4b44      	ldr	r3, [pc, #272]	@ (80040b4 <HAL_RCC_OscConfig+0x274>)
 8003fa4:	685b      	ldr	r3, [r3, #4]
 8003fa6:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8003faa:	2b00      	cmp	r3, #0
 8003fac:	d116      	bne.n	8003fdc <HAL_RCC_OscConfig+0x19c>
 8003fae:	4b41      	ldr	r3, [pc, #260]	@ (80040b4 <HAL_RCC_OscConfig+0x274>)
 8003fb0:	681b      	ldr	r3, [r3, #0]
 8003fb2:	f003 0302 	and.w	r3, r3, #2
 8003fb6:	2b00      	cmp	r3, #0
 8003fb8:	d005      	beq.n	8003fc6 <HAL_RCC_OscConfig+0x186>
 8003fba:	687b      	ldr	r3, [r7, #4]
 8003fbc:	68db      	ldr	r3, [r3, #12]
 8003fbe:	2b01      	cmp	r3, #1
 8003fc0:	d001      	beq.n	8003fc6 <HAL_RCC_OscConfig+0x186>
 8003fc2:	2301      	movs	r3, #1
 8003fc4:	e1d3      	b.n	800436e <HAL_RCC_OscConfig+0x52e>
 8003fc6:	4b3b      	ldr	r3, [pc, #236]	@ (80040b4 <HAL_RCC_OscConfig+0x274>)
 8003fc8:	681b      	ldr	r3, [r3, #0]
 8003fca:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8003fce:	687b      	ldr	r3, [r7, #4]
 8003fd0:	691b      	ldr	r3, [r3, #16]
 8003fd2:	00db      	lsls	r3, r3, #3
 8003fd4:	4937      	ldr	r1, [pc, #220]	@ (80040b4 <HAL_RCC_OscConfig+0x274>)
 8003fd6:	4313      	orrs	r3, r2
 8003fd8:	600b      	str	r3, [r1, #0]
 8003fda:	e03a      	b.n	8004052 <HAL_RCC_OscConfig+0x212>
 8003fdc:	687b      	ldr	r3, [r7, #4]
 8003fde:	68db      	ldr	r3, [r3, #12]
 8003fe0:	2b00      	cmp	r3, #0
 8003fe2:	d020      	beq.n	8004026 <HAL_RCC_OscConfig+0x1e6>
 8003fe4:	4b34      	ldr	r3, [pc, #208]	@ (80040b8 <HAL_RCC_OscConfig+0x278>)
 8003fe6:	2201      	movs	r2, #1
 8003fe8:	601a      	str	r2, [r3, #0]
 8003fea:	f7fe f8e1 	bl	80021b0 <HAL_GetTick>
 8003fee:	6138      	str	r0, [r7, #16]
 8003ff0:	e008      	b.n	8004004 <HAL_RCC_OscConfig+0x1c4>
 8003ff2:	f7fe f8dd 	bl	80021b0 <HAL_GetTick>
 8003ff6:	4602      	mov	r2, r0
 8003ff8:	693b      	ldr	r3, [r7, #16]
 8003ffa:	1ad3      	subs	r3, r2, r3
 8003ffc:	2b02      	cmp	r3, #2
 8003ffe:	d901      	bls.n	8004004 <HAL_RCC_OscConfig+0x1c4>
 8004000:	2303      	movs	r3, #3
 8004002:	e1b4      	b.n	800436e <HAL_RCC_OscConfig+0x52e>
 8004004:	4b2b      	ldr	r3, [pc, #172]	@ (80040b4 <HAL_RCC_OscConfig+0x274>)
 8004006:	681b      	ldr	r3, [r3, #0]
 8004008:	f003 0302 	and.w	r3, r3, #2
 800400c:	2b00      	cmp	r3, #0
 800400e:	d0f0      	beq.n	8003ff2 <HAL_RCC_OscConfig+0x1b2>
 8004010:	4b28      	ldr	r3, [pc, #160]	@ (80040b4 <HAL_RCC_OscConfig+0x274>)
 8004012:	681b      	ldr	r3, [r3, #0]
 8004014:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8004018:	687b      	ldr	r3, [r7, #4]
 800401a:	691b      	ldr	r3, [r3, #16]
 800401c:	00db      	lsls	r3, r3, #3
 800401e:	4925      	ldr	r1, [pc, #148]	@ (80040b4 <HAL_RCC_OscConfig+0x274>)
 8004020:	4313      	orrs	r3, r2
 8004022:	600b      	str	r3, [r1, #0]
 8004024:	e015      	b.n	8004052 <HAL_RCC_OscConfig+0x212>
 8004026:	4b24      	ldr	r3, [pc, #144]	@ (80040b8 <HAL_RCC_OscConfig+0x278>)
 8004028:	2200      	movs	r2, #0
 800402a:	601a      	str	r2, [r3, #0]
 800402c:	f7fe f8c0 	bl	80021b0 <HAL_GetTick>
 8004030:	6138      	str	r0, [r7, #16]
 8004032:	e008      	b.n	8004046 <HAL_RCC_OscConfig+0x206>
 8004034:	f7fe f8bc 	bl	80021b0 <HAL_GetTick>
 8004038:	4602      	mov	r2, r0
 800403a:	693b      	ldr	r3, [r7, #16]
 800403c:	1ad3      	subs	r3, r2, r3
 800403e:	2b02      	cmp	r3, #2
 8004040:	d901      	bls.n	8004046 <HAL_RCC_OscConfig+0x206>
 8004042:	2303      	movs	r3, #3
 8004044:	e193      	b.n	800436e <HAL_RCC_OscConfig+0x52e>
 8004046:	4b1b      	ldr	r3, [pc, #108]	@ (80040b4 <HAL_RCC_OscConfig+0x274>)
 8004048:	681b      	ldr	r3, [r3, #0]
 800404a:	f003 0302 	and.w	r3, r3, #2
 800404e:	2b00      	cmp	r3, #0
 8004050:	d1f0      	bne.n	8004034 <HAL_RCC_OscConfig+0x1f4>
 8004052:	687b      	ldr	r3, [r7, #4]
 8004054:	681b      	ldr	r3, [r3, #0]
 8004056:	f003 0308 	and.w	r3, r3, #8
 800405a:	2b00      	cmp	r3, #0
 800405c:	d036      	beq.n	80040cc <HAL_RCC_OscConfig+0x28c>
 800405e:	687b      	ldr	r3, [r7, #4]
 8004060:	695b      	ldr	r3, [r3, #20]
 8004062:	2b00      	cmp	r3, #0
 8004064:	d016      	beq.n	8004094 <HAL_RCC_OscConfig+0x254>
 8004066:	4b15      	ldr	r3, [pc, #84]	@ (80040bc <HAL_RCC_OscConfig+0x27c>)
 8004068:	2201      	movs	r2, #1
 800406a:	601a      	str	r2, [r3, #0]
 800406c:	f7fe f8a0 	bl	80021b0 <HAL_GetTick>
 8004070:	6138      	str	r0, [r7, #16]
 8004072:	e008      	b.n	8004086 <HAL_RCC_OscConfig+0x246>
 8004074:	f7fe f89c 	bl	80021b0 <HAL_GetTick>
 8004078:	4602      	mov	r2, r0
 800407a:	693b      	ldr	r3, [r7, #16]
 800407c:	1ad3      	subs	r3, r2, r3
 800407e:	2b02      	cmp	r3, #2
 8004080:	d901      	bls.n	8004086 <HAL_RCC_OscConfig+0x246>
 8004082:	2303      	movs	r3, #3
 8004084:	e173      	b.n	800436e <HAL_RCC_OscConfig+0x52e>
 8004086:	4b0b      	ldr	r3, [pc, #44]	@ (80040b4 <HAL_RCC_OscConfig+0x274>)
 8004088:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800408a:	f003 0302 	and.w	r3, r3, #2
 800408e:	2b00      	cmp	r3, #0
 8004090:	d0f0      	beq.n	8004074 <HAL_RCC_OscConfig+0x234>
 8004092:	e01b      	b.n	80040cc <HAL_RCC_OscConfig+0x28c>
 8004094:	4b09      	ldr	r3, [pc, #36]	@ (80040bc <HAL_RCC_OscConfig+0x27c>)
 8004096:	2200      	movs	r2, #0
 8004098:	601a      	str	r2, [r3, #0]
 800409a:	f7fe f889 	bl	80021b0 <HAL_GetTick>
 800409e:	6138      	str	r0, [r7, #16]
 80040a0:	e00e      	b.n	80040c0 <HAL_RCC_OscConfig+0x280>
 80040a2:	f7fe f885 	bl	80021b0 <HAL_GetTick>
 80040a6:	4602      	mov	r2, r0
 80040a8:	693b      	ldr	r3, [r7, #16]
 80040aa:	1ad3      	subs	r3, r2, r3
 80040ac:	2b02      	cmp	r3, #2
 80040ae:	d907      	bls.n	80040c0 <HAL_RCC_OscConfig+0x280>
 80040b0:	2303      	movs	r3, #3
 80040b2:	e15c      	b.n	800436e <HAL_RCC_OscConfig+0x52e>
 80040b4:	40023800 	.word	0x40023800
 80040b8:	42470000 	.word	0x42470000
 80040bc:	42470e80 	.word	0x42470e80
 80040c0:	4b8a      	ldr	r3, [pc, #552]	@ (80042ec <HAL_RCC_OscConfig+0x4ac>)
 80040c2:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80040c4:	f003 0302 	and.w	r3, r3, #2
 80040c8:	2b00      	cmp	r3, #0
 80040ca:	d1ea      	bne.n	80040a2 <HAL_RCC_OscConfig+0x262>
 80040cc:	687b      	ldr	r3, [r7, #4]
 80040ce:	681b      	ldr	r3, [r3, #0]
 80040d0:	f003 0304 	and.w	r3, r3, #4
 80040d4:	2b00      	cmp	r3, #0
 80040d6:	f000 8097 	beq.w	8004208 <HAL_RCC_OscConfig+0x3c8>
 80040da:	2300      	movs	r3, #0
 80040dc:	75fb      	strb	r3, [r7, #23]
 80040de:	4b83      	ldr	r3, [pc, #524]	@ (80042ec <HAL_RCC_OscConfig+0x4ac>)
 80040e0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80040e2:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80040e6:	2b00      	cmp	r3, #0
 80040e8:	d10f      	bne.n	800410a <HAL_RCC_OscConfig+0x2ca>
 80040ea:	2300      	movs	r3, #0
 80040ec:	60bb      	str	r3, [r7, #8]
 80040ee:	4b7f      	ldr	r3, [pc, #508]	@ (80042ec <HAL_RCC_OscConfig+0x4ac>)
 80040f0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80040f2:	4a7e      	ldr	r2, [pc, #504]	@ (80042ec <HAL_RCC_OscConfig+0x4ac>)
 80040f4:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80040f8:	6413      	str	r3, [r2, #64]	@ 0x40
 80040fa:	4b7c      	ldr	r3, [pc, #496]	@ (80042ec <HAL_RCC_OscConfig+0x4ac>)
 80040fc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80040fe:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8004102:	60bb      	str	r3, [r7, #8]
 8004104:	68bb      	ldr	r3, [r7, #8]
 8004106:	2301      	movs	r3, #1
 8004108:	75fb      	strb	r3, [r7, #23]
 800410a:	4b79      	ldr	r3, [pc, #484]	@ (80042f0 <HAL_RCC_OscConfig+0x4b0>)
 800410c:	681b      	ldr	r3, [r3, #0]
 800410e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004112:	2b00      	cmp	r3, #0
 8004114:	d118      	bne.n	8004148 <HAL_RCC_OscConfig+0x308>
 8004116:	4b76      	ldr	r3, [pc, #472]	@ (80042f0 <HAL_RCC_OscConfig+0x4b0>)
 8004118:	681b      	ldr	r3, [r3, #0]
 800411a:	4a75      	ldr	r2, [pc, #468]	@ (80042f0 <HAL_RCC_OscConfig+0x4b0>)
 800411c:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8004120:	6013      	str	r3, [r2, #0]
 8004122:	f7fe f845 	bl	80021b0 <HAL_GetTick>
 8004126:	6138      	str	r0, [r7, #16]
 8004128:	e008      	b.n	800413c <HAL_RCC_OscConfig+0x2fc>
 800412a:	f7fe f841 	bl	80021b0 <HAL_GetTick>
 800412e:	4602      	mov	r2, r0
 8004130:	693b      	ldr	r3, [r7, #16]
 8004132:	1ad3      	subs	r3, r2, r3
 8004134:	2b02      	cmp	r3, #2
 8004136:	d901      	bls.n	800413c <HAL_RCC_OscConfig+0x2fc>
 8004138:	2303      	movs	r3, #3
 800413a:	e118      	b.n	800436e <HAL_RCC_OscConfig+0x52e>
 800413c:	4b6c      	ldr	r3, [pc, #432]	@ (80042f0 <HAL_RCC_OscConfig+0x4b0>)
 800413e:	681b      	ldr	r3, [r3, #0]
 8004140:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004144:	2b00      	cmp	r3, #0
 8004146:	d0f0      	beq.n	800412a <HAL_RCC_OscConfig+0x2ea>
 8004148:	687b      	ldr	r3, [r7, #4]
 800414a:	689b      	ldr	r3, [r3, #8]
 800414c:	2b01      	cmp	r3, #1
 800414e:	d106      	bne.n	800415e <HAL_RCC_OscConfig+0x31e>
 8004150:	4b66      	ldr	r3, [pc, #408]	@ (80042ec <HAL_RCC_OscConfig+0x4ac>)
 8004152:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004154:	4a65      	ldr	r2, [pc, #404]	@ (80042ec <HAL_RCC_OscConfig+0x4ac>)
 8004156:	f043 0301 	orr.w	r3, r3, #1
 800415a:	6713      	str	r3, [r2, #112]	@ 0x70
 800415c:	e01c      	b.n	8004198 <HAL_RCC_OscConfig+0x358>
 800415e:	687b      	ldr	r3, [r7, #4]
 8004160:	689b      	ldr	r3, [r3, #8]
 8004162:	2b05      	cmp	r3, #5
 8004164:	d10c      	bne.n	8004180 <HAL_RCC_OscConfig+0x340>
 8004166:	4b61      	ldr	r3, [pc, #388]	@ (80042ec <HAL_RCC_OscConfig+0x4ac>)
 8004168:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800416a:	4a60      	ldr	r2, [pc, #384]	@ (80042ec <HAL_RCC_OscConfig+0x4ac>)
 800416c:	f043 0304 	orr.w	r3, r3, #4
 8004170:	6713      	str	r3, [r2, #112]	@ 0x70
 8004172:	4b5e      	ldr	r3, [pc, #376]	@ (80042ec <HAL_RCC_OscConfig+0x4ac>)
 8004174:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004176:	4a5d      	ldr	r2, [pc, #372]	@ (80042ec <HAL_RCC_OscConfig+0x4ac>)
 8004178:	f043 0301 	orr.w	r3, r3, #1
 800417c:	6713      	str	r3, [r2, #112]	@ 0x70
 800417e:	e00b      	b.n	8004198 <HAL_RCC_OscConfig+0x358>
 8004180:	4b5a      	ldr	r3, [pc, #360]	@ (80042ec <HAL_RCC_OscConfig+0x4ac>)
 8004182:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004184:	4a59      	ldr	r2, [pc, #356]	@ (80042ec <HAL_RCC_OscConfig+0x4ac>)
 8004186:	f023 0301 	bic.w	r3, r3, #1
 800418a:	6713      	str	r3, [r2, #112]	@ 0x70
 800418c:	4b57      	ldr	r3, [pc, #348]	@ (80042ec <HAL_RCC_OscConfig+0x4ac>)
 800418e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004190:	4a56      	ldr	r2, [pc, #344]	@ (80042ec <HAL_RCC_OscConfig+0x4ac>)
 8004192:	f023 0304 	bic.w	r3, r3, #4
 8004196:	6713      	str	r3, [r2, #112]	@ 0x70
 8004198:	687b      	ldr	r3, [r7, #4]
 800419a:	689b      	ldr	r3, [r3, #8]
 800419c:	2b00      	cmp	r3, #0
 800419e:	d015      	beq.n	80041cc <HAL_RCC_OscConfig+0x38c>
 80041a0:	f7fe f806 	bl	80021b0 <HAL_GetTick>
 80041a4:	6138      	str	r0, [r7, #16]
 80041a6:	e00a      	b.n	80041be <HAL_RCC_OscConfig+0x37e>
 80041a8:	f7fe f802 	bl	80021b0 <HAL_GetTick>
 80041ac:	4602      	mov	r2, r0
 80041ae:	693b      	ldr	r3, [r7, #16]
 80041b0:	1ad3      	subs	r3, r2, r3
 80041b2:	f241 3288 	movw	r2, #5000	@ 0x1388
 80041b6:	4293      	cmp	r3, r2
 80041b8:	d901      	bls.n	80041be <HAL_RCC_OscConfig+0x37e>
 80041ba:	2303      	movs	r3, #3
 80041bc:	e0d7      	b.n	800436e <HAL_RCC_OscConfig+0x52e>
 80041be:	4b4b      	ldr	r3, [pc, #300]	@ (80042ec <HAL_RCC_OscConfig+0x4ac>)
 80041c0:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80041c2:	f003 0302 	and.w	r3, r3, #2
 80041c6:	2b00      	cmp	r3, #0
 80041c8:	d0ee      	beq.n	80041a8 <HAL_RCC_OscConfig+0x368>
 80041ca:	e014      	b.n	80041f6 <HAL_RCC_OscConfig+0x3b6>
 80041cc:	f7fd fff0 	bl	80021b0 <HAL_GetTick>
 80041d0:	6138      	str	r0, [r7, #16]
 80041d2:	e00a      	b.n	80041ea <HAL_RCC_OscConfig+0x3aa>
 80041d4:	f7fd ffec 	bl	80021b0 <HAL_GetTick>
 80041d8:	4602      	mov	r2, r0
 80041da:	693b      	ldr	r3, [r7, #16]
 80041dc:	1ad3      	subs	r3, r2, r3
 80041de:	f241 3288 	movw	r2, #5000	@ 0x1388
 80041e2:	4293      	cmp	r3, r2
 80041e4:	d901      	bls.n	80041ea <HAL_RCC_OscConfig+0x3aa>
 80041e6:	2303      	movs	r3, #3
 80041e8:	e0c1      	b.n	800436e <HAL_RCC_OscConfig+0x52e>
 80041ea:	4b40      	ldr	r3, [pc, #256]	@ (80042ec <HAL_RCC_OscConfig+0x4ac>)
 80041ec:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80041ee:	f003 0302 	and.w	r3, r3, #2
 80041f2:	2b00      	cmp	r3, #0
 80041f4:	d1ee      	bne.n	80041d4 <HAL_RCC_OscConfig+0x394>
 80041f6:	7dfb      	ldrb	r3, [r7, #23]
 80041f8:	2b01      	cmp	r3, #1
 80041fa:	d105      	bne.n	8004208 <HAL_RCC_OscConfig+0x3c8>
 80041fc:	4b3b      	ldr	r3, [pc, #236]	@ (80042ec <HAL_RCC_OscConfig+0x4ac>)
 80041fe:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004200:	4a3a      	ldr	r2, [pc, #232]	@ (80042ec <HAL_RCC_OscConfig+0x4ac>)
 8004202:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8004206:	6413      	str	r3, [r2, #64]	@ 0x40
 8004208:	687b      	ldr	r3, [r7, #4]
 800420a:	699b      	ldr	r3, [r3, #24]
 800420c:	2b00      	cmp	r3, #0
 800420e:	f000 80ad 	beq.w	800436c <HAL_RCC_OscConfig+0x52c>
 8004212:	4b36      	ldr	r3, [pc, #216]	@ (80042ec <HAL_RCC_OscConfig+0x4ac>)
 8004214:	689b      	ldr	r3, [r3, #8]
 8004216:	f003 030c 	and.w	r3, r3, #12
 800421a:	2b08      	cmp	r3, #8
 800421c:	d060      	beq.n	80042e0 <HAL_RCC_OscConfig+0x4a0>
 800421e:	687b      	ldr	r3, [r7, #4]
 8004220:	699b      	ldr	r3, [r3, #24]
 8004222:	2b02      	cmp	r3, #2
 8004224:	d145      	bne.n	80042b2 <HAL_RCC_OscConfig+0x472>
 8004226:	4b33      	ldr	r3, [pc, #204]	@ (80042f4 <HAL_RCC_OscConfig+0x4b4>)
 8004228:	2200      	movs	r2, #0
 800422a:	601a      	str	r2, [r3, #0]
 800422c:	f7fd ffc0 	bl	80021b0 <HAL_GetTick>
 8004230:	6138      	str	r0, [r7, #16]
 8004232:	e008      	b.n	8004246 <HAL_RCC_OscConfig+0x406>
 8004234:	f7fd ffbc 	bl	80021b0 <HAL_GetTick>
 8004238:	4602      	mov	r2, r0
 800423a:	693b      	ldr	r3, [r7, #16]
 800423c:	1ad3      	subs	r3, r2, r3
 800423e:	2b02      	cmp	r3, #2
 8004240:	d901      	bls.n	8004246 <HAL_RCC_OscConfig+0x406>
 8004242:	2303      	movs	r3, #3
 8004244:	e093      	b.n	800436e <HAL_RCC_OscConfig+0x52e>
 8004246:	4b29      	ldr	r3, [pc, #164]	@ (80042ec <HAL_RCC_OscConfig+0x4ac>)
 8004248:	681b      	ldr	r3, [r3, #0]
 800424a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800424e:	2b00      	cmp	r3, #0
 8004250:	d1f0      	bne.n	8004234 <HAL_RCC_OscConfig+0x3f4>
 8004252:	687b      	ldr	r3, [r7, #4]
 8004254:	69da      	ldr	r2, [r3, #28]
 8004256:	687b      	ldr	r3, [r7, #4]
 8004258:	6a1b      	ldr	r3, [r3, #32]
 800425a:	431a      	orrs	r2, r3
 800425c:	687b      	ldr	r3, [r7, #4]
 800425e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004260:	019b      	lsls	r3, r3, #6
 8004262:	431a      	orrs	r2, r3
 8004264:	687b      	ldr	r3, [r7, #4]
 8004266:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004268:	085b      	lsrs	r3, r3, #1
 800426a:	3b01      	subs	r3, #1
 800426c:	041b      	lsls	r3, r3, #16
 800426e:	431a      	orrs	r2, r3
 8004270:	687b      	ldr	r3, [r7, #4]
 8004272:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004274:	061b      	lsls	r3, r3, #24
 8004276:	431a      	orrs	r2, r3
 8004278:	687b      	ldr	r3, [r7, #4]
 800427a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800427c:	071b      	lsls	r3, r3, #28
 800427e:	491b      	ldr	r1, [pc, #108]	@ (80042ec <HAL_RCC_OscConfig+0x4ac>)
 8004280:	4313      	orrs	r3, r2
 8004282:	604b      	str	r3, [r1, #4]
 8004284:	4b1b      	ldr	r3, [pc, #108]	@ (80042f4 <HAL_RCC_OscConfig+0x4b4>)
 8004286:	2201      	movs	r2, #1
 8004288:	601a      	str	r2, [r3, #0]
 800428a:	f7fd ff91 	bl	80021b0 <HAL_GetTick>
 800428e:	6138      	str	r0, [r7, #16]
 8004290:	e008      	b.n	80042a4 <HAL_RCC_OscConfig+0x464>
 8004292:	f7fd ff8d 	bl	80021b0 <HAL_GetTick>
 8004296:	4602      	mov	r2, r0
 8004298:	693b      	ldr	r3, [r7, #16]
 800429a:	1ad3      	subs	r3, r2, r3
 800429c:	2b02      	cmp	r3, #2
 800429e:	d901      	bls.n	80042a4 <HAL_RCC_OscConfig+0x464>
 80042a0:	2303      	movs	r3, #3
 80042a2:	e064      	b.n	800436e <HAL_RCC_OscConfig+0x52e>
 80042a4:	4b11      	ldr	r3, [pc, #68]	@ (80042ec <HAL_RCC_OscConfig+0x4ac>)
 80042a6:	681b      	ldr	r3, [r3, #0]
 80042a8:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80042ac:	2b00      	cmp	r3, #0
 80042ae:	d0f0      	beq.n	8004292 <HAL_RCC_OscConfig+0x452>
 80042b0:	e05c      	b.n	800436c <HAL_RCC_OscConfig+0x52c>
 80042b2:	4b10      	ldr	r3, [pc, #64]	@ (80042f4 <HAL_RCC_OscConfig+0x4b4>)
 80042b4:	2200      	movs	r2, #0
 80042b6:	601a      	str	r2, [r3, #0]
 80042b8:	f7fd ff7a 	bl	80021b0 <HAL_GetTick>
 80042bc:	6138      	str	r0, [r7, #16]
 80042be:	e008      	b.n	80042d2 <HAL_RCC_OscConfig+0x492>
 80042c0:	f7fd ff76 	bl	80021b0 <HAL_GetTick>
 80042c4:	4602      	mov	r2, r0
 80042c6:	693b      	ldr	r3, [r7, #16]
 80042c8:	1ad3      	subs	r3, r2, r3
 80042ca:	2b02      	cmp	r3, #2
 80042cc:	d901      	bls.n	80042d2 <HAL_RCC_OscConfig+0x492>
 80042ce:	2303      	movs	r3, #3
 80042d0:	e04d      	b.n	800436e <HAL_RCC_OscConfig+0x52e>
 80042d2:	4b06      	ldr	r3, [pc, #24]	@ (80042ec <HAL_RCC_OscConfig+0x4ac>)
 80042d4:	681b      	ldr	r3, [r3, #0]
 80042d6:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80042da:	2b00      	cmp	r3, #0
 80042dc:	d1f0      	bne.n	80042c0 <HAL_RCC_OscConfig+0x480>
 80042de:	e045      	b.n	800436c <HAL_RCC_OscConfig+0x52c>
 80042e0:	687b      	ldr	r3, [r7, #4]
 80042e2:	699b      	ldr	r3, [r3, #24]
 80042e4:	2b01      	cmp	r3, #1
 80042e6:	d107      	bne.n	80042f8 <HAL_RCC_OscConfig+0x4b8>
 80042e8:	2301      	movs	r3, #1
 80042ea:	e040      	b.n	800436e <HAL_RCC_OscConfig+0x52e>
 80042ec:	40023800 	.word	0x40023800
 80042f0:	40007000 	.word	0x40007000
 80042f4:	42470060 	.word	0x42470060
 80042f8:	4b1f      	ldr	r3, [pc, #124]	@ (8004378 <HAL_RCC_OscConfig+0x538>)
 80042fa:	685b      	ldr	r3, [r3, #4]
 80042fc:	60fb      	str	r3, [r7, #12]
 80042fe:	687b      	ldr	r3, [r7, #4]
 8004300:	699b      	ldr	r3, [r3, #24]
 8004302:	2b01      	cmp	r3, #1
 8004304:	d030      	beq.n	8004368 <HAL_RCC_OscConfig+0x528>
 8004306:	68fb      	ldr	r3, [r7, #12]
 8004308:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 800430c:	687b      	ldr	r3, [r7, #4]
 800430e:	69db      	ldr	r3, [r3, #28]
 8004310:	429a      	cmp	r2, r3
 8004312:	d129      	bne.n	8004368 <HAL_RCC_OscConfig+0x528>
 8004314:	68fb      	ldr	r3, [r7, #12]
 8004316:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 800431a:	687b      	ldr	r3, [r7, #4]
 800431c:	6a1b      	ldr	r3, [r3, #32]
 800431e:	429a      	cmp	r2, r3
 8004320:	d122      	bne.n	8004368 <HAL_RCC_OscConfig+0x528>
 8004322:	68fa      	ldr	r2, [r7, #12]
 8004324:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 8004328:	4013      	ands	r3, r2
 800432a:	687a      	ldr	r2, [r7, #4]
 800432c:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 800432e:	0192      	lsls	r2, r2, #6
 8004330:	4293      	cmp	r3, r2
 8004332:	d119      	bne.n	8004368 <HAL_RCC_OscConfig+0x528>
 8004334:	68fb      	ldr	r3, [r7, #12]
 8004336:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 800433a:	687b      	ldr	r3, [r7, #4]
 800433c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800433e:	085b      	lsrs	r3, r3, #1
 8004340:	3b01      	subs	r3, #1
 8004342:	041b      	lsls	r3, r3, #16
 8004344:	429a      	cmp	r2, r3
 8004346:	d10f      	bne.n	8004368 <HAL_RCC_OscConfig+0x528>
 8004348:	68fb      	ldr	r3, [r7, #12]
 800434a:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 800434e:	687b      	ldr	r3, [r7, #4]
 8004350:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004352:	061b      	lsls	r3, r3, #24
 8004354:	429a      	cmp	r2, r3
 8004356:	d107      	bne.n	8004368 <HAL_RCC_OscConfig+0x528>
 8004358:	68fb      	ldr	r3, [r7, #12]
 800435a:	f003 42e0 	and.w	r2, r3, #1879048192	@ 0x70000000
 800435e:	687b      	ldr	r3, [r7, #4]
 8004360:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004362:	071b      	lsls	r3, r3, #28
 8004364:	429a      	cmp	r2, r3
 8004366:	d001      	beq.n	800436c <HAL_RCC_OscConfig+0x52c>
 8004368:	2301      	movs	r3, #1
 800436a:	e000      	b.n	800436e <HAL_RCC_OscConfig+0x52e>
 800436c:	2300      	movs	r3, #0
 800436e:	4618      	mov	r0, r3
 8004370:	3718      	adds	r7, #24
 8004372:	46bd      	mov	sp, r7
 8004374:	bd80      	pop	{r7, pc}
 8004376:	bf00      	nop
 8004378:	40023800 	.word	0x40023800

0800437c <HAL_TIM_Base_Init>:
 800437c:	b580      	push	{r7, lr}
 800437e:	b082      	sub	sp, #8
 8004380:	af00      	add	r7, sp, #0
 8004382:	6078      	str	r0, [r7, #4]
 8004384:	687b      	ldr	r3, [r7, #4]
 8004386:	2b00      	cmp	r3, #0
 8004388:	d101      	bne.n	800438e <HAL_TIM_Base_Init+0x12>
 800438a:	2301      	movs	r3, #1
 800438c:	e041      	b.n	8004412 <HAL_TIM_Base_Init+0x96>
 800438e:	687b      	ldr	r3, [r7, #4]
 8004390:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8004394:	b2db      	uxtb	r3, r3
 8004396:	2b00      	cmp	r3, #0
 8004398:	d106      	bne.n	80043a8 <HAL_TIM_Base_Init+0x2c>
 800439a:	687b      	ldr	r3, [r7, #4]
 800439c:	2200      	movs	r2, #0
 800439e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
 80043a2:	6878      	ldr	r0, [r7, #4]
 80043a4:	f7fd fc4c 	bl	8001c40 <HAL_TIM_Base_MspInit>
 80043a8:	687b      	ldr	r3, [r7, #4]
 80043aa:	2202      	movs	r2, #2
 80043ac:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
 80043b0:	687b      	ldr	r3, [r7, #4]
 80043b2:	681a      	ldr	r2, [r3, #0]
 80043b4:	687b      	ldr	r3, [r7, #4]
 80043b6:	3304      	adds	r3, #4
 80043b8:	4619      	mov	r1, r3
 80043ba:	4610      	mov	r0, r2
 80043bc:	f000 fcb2 	bl	8004d24 <TIM_Base_SetConfig>
 80043c0:	687b      	ldr	r3, [r7, #4]
 80043c2:	2201      	movs	r2, #1
 80043c4:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 80043c8:	687b      	ldr	r3, [r7, #4]
 80043ca:	2201      	movs	r2, #1
 80043cc:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 80043d0:	687b      	ldr	r3, [r7, #4]
 80043d2:	2201      	movs	r2, #1
 80043d4:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 80043d8:	687b      	ldr	r3, [r7, #4]
 80043da:	2201      	movs	r2, #1
 80043dc:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 80043e0:	687b      	ldr	r3, [r7, #4]
 80043e2:	2201      	movs	r2, #1
 80043e4:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 80043e8:	687b      	ldr	r3, [r7, #4]
 80043ea:	2201      	movs	r2, #1
 80043ec:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 80043f0:	687b      	ldr	r3, [r7, #4]
 80043f2:	2201      	movs	r2, #1
 80043f4:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 80043f8:	687b      	ldr	r3, [r7, #4]
 80043fa:	2201      	movs	r2, #1
 80043fc:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8004400:	687b      	ldr	r3, [r7, #4]
 8004402:	2201      	movs	r2, #1
 8004404:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8004408:	687b      	ldr	r3, [r7, #4]
 800440a:	2201      	movs	r2, #1
 800440c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
 8004410:	2300      	movs	r3, #0
 8004412:	4618      	mov	r0, r3
 8004414:	3708      	adds	r7, #8
 8004416:	46bd      	mov	sp, r7
 8004418:	bd80      	pop	{r7, pc}
	...

0800441c <HAL_TIM_Base_Start>:
 800441c:	b480      	push	{r7}
 800441e:	b085      	sub	sp, #20
 8004420:	af00      	add	r7, sp, #0
 8004422:	6078      	str	r0, [r7, #4]
 8004424:	687b      	ldr	r3, [r7, #4]
 8004426:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800442a:	b2db      	uxtb	r3, r3
 800442c:	2b01      	cmp	r3, #1
 800442e:	d001      	beq.n	8004434 <HAL_TIM_Base_Start+0x18>
 8004430:	2301      	movs	r3, #1
 8004432:	e046      	b.n	80044c2 <HAL_TIM_Base_Start+0xa6>
 8004434:	687b      	ldr	r3, [r7, #4]
 8004436:	2202      	movs	r2, #2
 8004438:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
 800443c:	687b      	ldr	r3, [r7, #4]
 800443e:	681b      	ldr	r3, [r3, #0]
 8004440:	4a23      	ldr	r2, [pc, #140]	@ (80044d0 <HAL_TIM_Base_Start+0xb4>)
 8004442:	4293      	cmp	r3, r2
 8004444:	d022      	beq.n	800448c <HAL_TIM_Base_Start+0x70>
 8004446:	687b      	ldr	r3, [r7, #4]
 8004448:	681b      	ldr	r3, [r3, #0]
 800444a:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800444e:	d01d      	beq.n	800448c <HAL_TIM_Base_Start+0x70>
 8004450:	687b      	ldr	r3, [r7, #4]
 8004452:	681b      	ldr	r3, [r3, #0]
 8004454:	4a1f      	ldr	r2, [pc, #124]	@ (80044d4 <HAL_TIM_Base_Start+0xb8>)
 8004456:	4293      	cmp	r3, r2
 8004458:	d018      	beq.n	800448c <HAL_TIM_Base_Start+0x70>
 800445a:	687b      	ldr	r3, [r7, #4]
 800445c:	681b      	ldr	r3, [r3, #0]
 800445e:	4a1e      	ldr	r2, [pc, #120]	@ (80044d8 <HAL_TIM_Base_Start+0xbc>)
 8004460:	4293      	cmp	r3, r2
 8004462:	d013      	beq.n	800448c <HAL_TIM_Base_Start+0x70>
 8004464:	687b      	ldr	r3, [r7, #4]
 8004466:	681b      	ldr	r3, [r3, #0]
 8004468:	4a1c      	ldr	r2, [pc, #112]	@ (80044dc <HAL_TIM_Base_Start+0xc0>)
 800446a:	4293      	cmp	r3, r2
 800446c:	d00e      	beq.n	800448c <HAL_TIM_Base_Start+0x70>
 800446e:	687b      	ldr	r3, [r7, #4]
 8004470:	681b      	ldr	r3, [r3, #0]
 8004472:	4a1b      	ldr	r2, [pc, #108]	@ (80044e0 <HAL_TIM_Base_Start+0xc4>)
 8004474:	4293      	cmp	r3, r2
 8004476:	d009      	beq.n	800448c <HAL_TIM_Base_Start+0x70>
 8004478:	687b      	ldr	r3, [r7, #4]
 800447a:	681b      	ldr	r3, [r3, #0]
 800447c:	4a19      	ldr	r2, [pc, #100]	@ (80044e4 <HAL_TIM_Base_Start+0xc8>)
 800447e:	4293      	cmp	r3, r2
 8004480:	d004      	beq.n	800448c <HAL_TIM_Base_Start+0x70>
 8004482:	687b      	ldr	r3, [r7, #4]
 8004484:	681b      	ldr	r3, [r3, #0]
 8004486:	4a18      	ldr	r2, [pc, #96]	@ (80044e8 <HAL_TIM_Base_Start+0xcc>)
 8004488:	4293      	cmp	r3, r2
 800448a:	d111      	bne.n	80044b0 <HAL_TIM_Base_Start+0x94>
 800448c:	687b      	ldr	r3, [r7, #4]
 800448e:	681b      	ldr	r3, [r3, #0]
 8004490:	689b      	ldr	r3, [r3, #8]
 8004492:	f003 0307 	and.w	r3, r3, #7
 8004496:	60fb      	str	r3, [r7, #12]
 8004498:	68fb      	ldr	r3, [r7, #12]
 800449a:	2b06      	cmp	r3, #6
 800449c:	d010      	beq.n	80044c0 <HAL_TIM_Base_Start+0xa4>
 800449e:	687b      	ldr	r3, [r7, #4]
 80044a0:	681b      	ldr	r3, [r3, #0]
 80044a2:	681a      	ldr	r2, [r3, #0]
 80044a4:	687b      	ldr	r3, [r7, #4]
 80044a6:	681b      	ldr	r3, [r3, #0]
 80044a8:	f042 0201 	orr.w	r2, r2, #1
 80044ac:	601a      	str	r2, [r3, #0]
 80044ae:	e007      	b.n	80044c0 <HAL_TIM_Base_Start+0xa4>
 80044b0:	687b      	ldr	r3, [r7, #4]
 80044b2:	681b      	ldr	r3, [r3, #0]
 80044b4:	681a      	ldr	r2, [r3, #0]
 80044b6:	687b      	ldr	r3, [r7, #4]
 80044b8:	681b      	ldr	r3, [r3, #0]
 80044ba:	f042 0201 	orr.w	r2, r2, #1
 80044be:	601a      	str	r2, [r3, #0]
 80044c0:	2300      	movs	r3, #0
 80044c2:	4618      	mov	r0, r3
 80044c4:	3714      	adds	r7, #20
 80044c6:	46bd      	mov	sp, r7
 80044c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044cc:	4770      	bx	lr
 80044ce:	bf00      	nop
 80044d0:	40010000 	.word	0x40010000
 80044d4:	40000400 	.word	0x40000400
 80044d8:	40000800 	.word	0x40000800
 80044dc:	40000c00 	.word	0x40000c00
 80044e0:	40010400 	.word	0x40010400
 80044e4:	40014000 	.word	0x40014000
 80044e8:	40001800 	.word	0x40001800

080044ec <HAL_TIM_Base_Start_IT>:
 80044ec:	b480      	push	{r7}
 80044ee:	b085      	sub	sp, #20
 80044f0:	af00      	add	r7, sp, #0
 80044f2:	6078      	str	r0, [r7, #4]
 80044f4:	687b      	ldr	r3, [r7, #4]
 80044f6:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80044fa:	b2db      	uxtb	r3, r3
 80044fc:	2b01      	cmp	r3, #1
 80044fe:	d001      	beq.n	8004504 <HAL_TIM_Base_Start_IT+0x18>
 8004500:	2301      	movs	r3, #1
 8004502:	e04e      	b.n	80045a2 <HAL_TIM_Base_Start_IT+0xb6>
 8004504:	687b      	ldr	r3, [r7, #4]
 8004506:	2202      	movs	r2, #2
 8004508:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
 800450c:	687b      	ldr	r3, [r7, #4]
 800450e:	681b      	ldr	r3, [r3, #0]
 8004510:	68da      	ldr	r2, [r3, #12]
 8004512:	687b      	ldr	r3, [r7, #4]
 8004514:	681b      	ldr	r3, [r3, #0]
 8004516:	f042 0201 	orr.w	r2, r2, #1
 800451a:	60da      	str	r2, [r3, #12]
 800451c:	687b      	ldr	r3, [r7, #4]
 800451e:	681b      	ldr	r3, [r3, #0]
 8004520:	4a23      	ldr	r2, [pc, #140]	@ (80045b0 <HAL_TIM_Base_Start_IT+0xc4>)
 8004522:	4293      	cmp	r3, r2
 8004524:	d022      	beq.n	800456c <HAL_TIM_Base_Start_IT+0x80>
 8004526:	687b      	ldr	r3, [r7, #4]
 8004528:	681b      	ldr	r3, [r3, #0]
 800452a:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800452e:	d01d      	beq.n	800456c <HAL_TIM_Base_Start_IT+0x80>
 8004530:	687b      	ldr	r3, [r7, #4]
 8004532:	681b      	ldr	r3, [r3, #0]
 8004534:	4a1f      	ldr	r2, [pc, #124]	@ (80045b4 <HAL_TIM_Base_Start_IT+0xc8>)
 8004536:	4293      	cmp	r3, r2
 8004538:	d018      	beq.n	800456c <HAL_TIM_Base_Start_IT+0x80>
 800453a:	687b      	ldr	r3, [r7, #4]
 800453c:	681b      	ldr	r3, [r3, #0]
 800453e:	4a1e      	ldr	r2, [pc, #120]	@ (80045b8 <HAL_TIM_Base_Start_IT+0xcc>)
 8004540:	4293      	cmp	r3, r2
 8004542:	d013      	beq.n	800456c <HAL_TIM_Base_Start_IT+0x80>
 8004544:	687b      	ldr	r3, [r7, #4]
 8004546:	681b      	ldr	r3, [r3, #0]
 8004548:	4a1c      	ldr	r2, [pc, #112]	@ (80045bc <HAL_TIM_Base_Start_IT+0xd0>)
 800454a:	4293      	cmp	r3, r2
 800454c:	d00e      	beq.n	800456c <HAL_TIM_Base_Start_IT+0x80>
 800454e:	687b      	ldr	r3, [r7, #4]
 8004550:	681b      	ldr	r3, [r3, #0]
 8004552:	4a1b      	ldr	r2, [pc, #108]	@ (80045c0 <HAL_TIM_Base_Start_IT+0xd4>)
 8004554:	4293      	cmp	r3, r2
 8004556:	d009      	beq.n	800456c <HAL_TIM_Base_Start_IT+0x80>
 8004558:	687b      	ldr	r3, [r7, #4]
 800455a:	681b      	ldr	r3, [r3, #0]
 800455c:	4a19      	ldr	r2, [pc, #100]	@ (80045c4 <HAL_TIM_Base_Start_IT+0xd8>)
 800455e:	4293      	cmp	r3, r2
 8004560:	d004      	beq.n	800456c <HAL_TIM_Base_Start_IT+0x80>
 8004562:	687b      	ldr	r3, [r7, #4]
 8004564:	681b      	ldr	r3, [r3, #0]
 8004566:	4a18      	ldr	r2, [pc, #96]	@ (80045c8 <HAL_TIM_Base_Start_IT+0xdc>)
 8004568:	4293      	cmp	r3, r2
 800456a:	d111      	bne.n	8004590 <HAL_TIM_Base_Start_IT+0xa4>
 800456c:	687b      	ldr	r3, [r7, #4]
 800456e:	681b      	ldr	r3, [r3, #0]
 8004570:	689b      	ldr	r3, [r3, #8]
 8004572:	f003 0307 	and.w	r3, r3, #7
 8004576:	60fb      	str	r3, [r7, #12]
 8004578:	68fb      	ldr	r3, [r7, #12]
 800457a:	2b06      	cmp	r3, #6
 800457c:	d010      	beq.n	80045a0 <HAL_TIM_Base_Start_IT+0xb4>
 800457e:	687b      	ldr	r3, [r7, #4]
 8004580:	681b      	ldr	r3, [r3, #0]
 8004582:	681a      	ldr	r2, [r3, #0]
 8004584:	687b      	ldr	r3, [r7, #4]
 8004586:	681b      	ldr	r3, [r3, #0]
 8004588:	f042 0201 	orr.w	r2, r2, #1
 800458c:	601a      	str	r2, [r3, #0]
 800458e:	e007      	b.n	80045a0 <HAL_TIM_Base_Start_IT+0xb4>
 8004590:	687b      	ldr	r3, [r7, #4]
 8004592:	681b      	ldr	r3, [r3, #0]
 8004594:	681a      	ldr	r2, [r3, #0]
 8004596:	687b      	ldr	r3, [r7, #4]
 8004598:	681b      	ldr	r3, [r3, #0]
 800459a:	f042 0201 	orr.w	r2, r2, #1
 800459e:	601a      	str	r2, [r3, #0]
 80045a0:	2300      	movs	r3, #0
 80045a2:	4618      	mov	r0, r3
 80045a4:	3714      	adds	r7, #20
 80045a6:	46bd      	mov	sp, r7
 80045a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045ac:	4770      	bx	lr
 80045ae:	bf00      	nop
 80045b0:	40010000 	.word	0x40010000
 80045b4:	40000400 	.word	0x40000400
 80045b8:	40000800 	.word	0x40000800
 80045bc:	40000c00 	.word	0x40000c00
 80045c0:	40010400 	.word	0x40010400
 80045c4:	40014000 	.word	0x40014000
 80045c8:	40001800 	.word	0x40001800

080045cc <HAL_TIM_OC_Init>:
 80045cc:	b580      	push	{r7, lr}
 80045ce:	b082      	sub	sp, #8
 80045d0:	af00      	add	r7, sp, #0
 80045d2:	6078      	str	r0, [r7, #4]
 80045d4:	687b      	ldr	r3, [r7, #4]
 80045d6:	2b00      	cmp	r3, #0
 80045d8:	d101      	bne.n	80045de <HAL_TIM_OC_Init+0x12>
 80045da:	2301      	movs	r3, #1
 80045dc:	e041      	b.n	8004662 <HAL_TIM_OC_Init+0x96>
 80045de:	687b      	ldr	r3, [r7, #4]
 80045e0:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80045e4:	b2db      	uxtb	r3, r3
 80045e6:	2b00      	cmp	r3, #0
 80045e8:	d106      	bne.n	80045f8 <HAL_TIM_OC_Init+0x2c>
 80045ea:	687b      	ldr	r3, [r7, #4]
 80045ec:	2200      	movs	r2, #0
 80045ee:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
 80045f2:	6878      	ldr	r0, [r7, #4]
 80045f4:	f000 f839 	bl	800466a <HAL_TIM_OC_MspInit>
 80045f8:	687b      	ldr	r3, [r7, #4]
 80045fa:	2202      	movs	r2, #2
 80045fc:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
 8004600:	687b      	ldr	r3, [r7, #4]
 8004602:	681a      	ldr	r2, [r3, #0]
 8004604:	687b      	ldr	r3, [r7, #4]
 8004606:	3304      	adds	r3, #4
 8004608:	4619      	mov	r1, r3
 800460a:	4610      	mov	r0, r2
 800460c:	f000 fb8a 	bl	8004d24 <TIM_Base_SetConfig>
 8004610:	687b      	ldr	r3, [r7, #4]
 8004612:	2201      	movs	r2, #1
 8004614:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 8004618:	687b      	ldr	r3, [r7, #4]
 800461a:	2201      	movs	r2, #1
 800461c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8004620:	687b      	ldr	r3, [r7, #4]
 8004622:	2201      	movs	r2, #1
 8004624:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8004628:	687b      	ldr	r3, [r7, #4]
 800462a:	2201      	movs	r2, #1
 800462c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8004630:	687b      	ldr	r3, [r7, #4]
 8004632:	2201      	movs	r2, #1
 8004634:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 8004638:	687b      	ldr	r3, [r7, #4]
 800463a:	2201      	movs	r2, #1
 800463c:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8004640:	687b      	ldr	r3, [r7, #4]
 8004642:	2201      	movs	r2, #1
 8004644:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8004648:	687b      	ldr	r3, [r7, #4]
 800464a:	2201      	movs	r2, #1
 800464c:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8004650:	687b      	ldr	r3, [r7, #4]
 8004652:	2201      	movs	r2, #1
 8004654:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8004658:	687b      	ldr	r3, [r7, #4]
 800465a:	2201      	movs	r2, #1
 800465c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
 8004660:	2300      	movs	r3, #0
 8004662:	4618      	mov	r0, r3
 8004664:	3708      	adds	r7, #8
 8004666:	46bd      	mov	sp, r7
 8004668:	bd80      	pop	{r7, pc}

0800466a <HAL_TIM_OC_MspInit>:
 800466a:	b480      	push	{r7}
 800466c:	b083      	sub	sp, #12
 800466e:	af00      	add	r7, sp, #0
 8004670:	6078      	str	r0, [r7, #4]
 8004672:	bf00      	nop
 8004674:	370c      	adds	r7, #12
 8004676:	46bd      	mov	sp, r7
 8004678:	f85d 7b04 	ldr.w	r7, [sp], #4
 800467c:	4770      	bx	lr
	...

08004680 <HAL_TIM_OC_Start_IT>:
 8004680:	b580      	push	{r7, lr}
 8004682:	b084      	sub	sp, #16
 8004684:	af00      	add	r7, sp, #0
 8004686:	6078      	str	r0, [r7, #4]
 8004688:	6039      	str	r1, [r7, #0]
 800468a:	2300      	movs	r3, #0
 800468c:	73fb      	strb	r3, [r7, #15]
 800468e:	683b      	ldr	r3, [r7, #0]
 8004690:	2b00      	cmp	r3, #0
 8004692:	d109      	bne.n	80046a8 <HAL_TIM_OC_Start_IT+0x28>
 8004694:	687b      	ldr	r3, [r7, #4]
 8004696:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 800469a:	b2db      	uxtb	r3, r3
 800469c:	2b01      	cmp	r3, #1
 800469e:	bf14      	ite	ne
 80046a0:	2301      	movne	r3, #1
 80046a2:	2300      	moveq	r3, #0
 80046a4:	b2db      	uxtb	r3, r3
 80046a6:	e022      	b.n	80046ee <HAL_TIM_OC_Start_IT+0x6e>
 80046a8:	683b      	ldr	r3, [r7, #0]
 80046aa:	2b04      	cmp	r3, #4
 80046ac:	d109      	bne.n	80046c2 <HAL_TIM_OC_Start_IT+0x42>
 80046ae:	687b      	ldr	r3, [r7, #4]
 80046b0:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 80046b4:	b2db      	uxtb	r3, r3
 80046b6:	2b01      	cmp	r3, #1
 80046b8:	bf14      	ite	ne
 80046ba:	2301      	movne	r3, #1
 80046bc:	2300      	moveq	r3, #0
 80046be:	b2db      	uxtb	r3, r3
 80046c0:	e015      	b.n	80046ee <HAL_TIM_OC_Start_IT+0x6e>
 80046c2:	683b      	ldr	r3, [r7, #0]
 80046c4:	2b08      	cmp	r3, #8
 80046c6:	d109      	bne.n	80046dc <HAL_TIM_OC_Start_IT+0x5c>
 80046c8:	687b      	ldr	r3, [r7, #4]
 80046ca:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 80046ce:	b2db      	uxtb	r3, r3
 80046d0:	2b01      	cmp	r3, #1
 80046d2:	bf14      	ite	ne
 80046d4:	2301      	movne	r3, #1
 80046d6:	2300      	moveq	r3, #0
 80046d8:	b2db      	uxtb	r3, r3
 80046da:	e008      	b.n	80046ee <HAL_TIM_OC_Start_IT+0x6e>
 80046dc:	687b      	ldr	r3, [r7, #4]
 80046de:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80046e2:	b2db      	uxtb	r3, r3
 80046e4:	2b01      	cmp	r3, #1
 80046e6:	bf14      	ite	ne
 80046e8:	2301      	movne	r3, #1
 80046ea:	2300      	moveq	r3, #0
 80046ec:	b2db      	uxtb	r3, r3
 80046ee:	2b00      	cmp	r3, #0
 80046f0:	d001      	beq.n	80046f6 <HAL_TIM_OC_Start_IT+0x76>
 80046f2:	2301      	movs	r3, #1
 80046f4:	e0c7      	b.n	8004886 <HAL_TIM_OC_Start_IT+0x206>
 80046f6:	683b      	ldr	r3, [r7, #0]
 80046f8:	2b00      	cmp	r3, #0
 80046fa:	d104      	bne.n	8004706 <HAL_TIM_OC_Start_IT+0x86>
 80046fc:	687b      	ldr	r3, [r7, #4]
 80046fe:	2202      	movs	r2, #2
 8004700:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8004704:	e013      	b.n	800472e <HAL_TIM_OC_Start_IT+0xae>
 8004706:	683b      	ldr	r3, [r7, #0]
 8004708:	2b04      	cmp	r3, #4
 800470a:	d104      	bne.n	8004716 <HAL_TIM_OC_Start_IT+0x96>
 800470c:	687b      	ldr	r3, [r7, #4]
 800470e:	2202      	movs	r2, #2
 8004710:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8004714:	e00b      	b.n	800472e <HAL_TIM_OC_Start_IT+0xae>
 8004716:	683b      	ldr	r3, [r7, #0]
 8004718:	2b08      	cmp	r3, #8
 800471a:	d104      	bne.n	8004726 <HAL_TIM_OC_Start_IT+0xa6>
 800471c:	687b      	ldr	r3, [r7, #4]
 800471e:	2202      	movs	r2, #2
 8004720:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8004724:	e003      	b.n	800472e <HAL_TIM_OC_Start_IT+0xae>
 8004726:	687b      	ldr	r3, [r7, #4]
 8004728:	2202      	movs	r2, #2
 800472a:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 800472e:	683b      	ldr	r3, [r7, #0]
 8004730:	2b0c      	cmp	r3, #12
 8004732:	d841      	bhi.n	80047b8 <HAL_TIM_OC_Start_IT+0x138>
 8004734:	a201      	add	r2, pc, #4	@ (adr r2, 800473c <HAL_TIM_OC_Start_IT+0xbc>)
 8004736:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800473a:	bf00      	nop
 800473c:	08004771 	.word	0x08004771
 8004740:	080047b9 	.word	0x080047b9
 8004744:	080047b9 	.word	0x080047b9
 8004748:	080047b9 	.word	0x080047b9
 800474c:	08004783 	.word	0x08004783
 8004750:	080047b9 	.word	0x080047b9
 8004754:	080047b9 	.word	0x080047b9
 8004758:	080047b9 	.word	0x080047b9
 800475c:	08004795 	.word	0x08004795
 8004760:	080047b9 	.word	0x080047b9
 8004764:	080047b9 	.word	0x080047b9
 8004768:	080047b9 	.word	0x080047b9
 800476c:	080047a7 	.word	0x080047a7
 8004770:	687b      	ldr	r3, [r7, #4]
 8004772:	681b      	ldr	r3, [r3, #0]
 8004774:	68da      	ldr	r2, [r3, #12]
 8004776:	687b      	ldr	r3, [r7, #4]
 8004778:	681b      	ldr	r3, [r3, #0]
 800477a:	f042 0202 	orr.w	r2, r2, #2
 800477e:	60da      	str	r2, [r3, #12]
 8004780:	e01d      	b.n	80047be <HAL_TIM_OC_Start_IT+0x13e>
 8004782:	687b      	ldr	r3, [r7, #4]
 8004784:	681b      	ldr	r3, [r3, #0]
 8004786:	68da      	ldr	r2, [r3, #12]
 8004788:	687b      	ldr	r3, [r7, #4]
 800478a:	681b      	ldr	r3, [r3, #0]
 800478c:	f042 0204 	orr.w	r2, r2, #4
 8004790:	60da      	str	r2, [r3, #12]
 8004792:	e014      	b.n	80047be <HAL_TIM_OC_Start_IT+0x13e>
 8004794:	687b      	ldr	r3, [r7, #4]
 8004796:	681b      	ldr	r3, [r3, #0]
 8004798:	68da      	ldr	r2, [r3, #12]
 800479a:	687b      	ldr	r3, [r7, #4]
 800479c:	681b      	ldr	r3, [r3, #0]
 800479e:	f042 0208 	orr.w	r2, r2, #8
 80047a2:	60da      	str	r2, [r3, #12]
 80047a4:	e00b      	b.n	80047be <HAL_TIM_OC_Start_IT+0x13e>
 80047a6:	687b      	ldr	r3, [r7, #4]
 80047a8:	681b      	ldr	r3, [r3, #0]
 80047aa:	68da      	ldr	r2, [r3, #12]
 80047ac:	687b      	ldr	r3, [r7, #4]
 80047ae:	681b      	ldr	r3, [r3, #0]
 80047b0:	f042 0210 	orr.w	r2, r2, #16
 80047b4:	60da      	str	r2, [r3, #12]
 80047b6:	e002      	b.n	80047be <HAL_TIM_OC_Start_IT+0x13e>
 80047b8:	2301      	movs	r3, #1
 80047ba:	73fb      	strb	r3, [r7, #15]
 80047bc:	bf00      	nop
 80047be:	7bfb      	ldrb	r3, [r7, #15]
 80047c0:	2b00      	cmp	r3, #0
 80047c2:	d15f      	bne.n	8004884 <HAL_TIM_OC_Start_IT+0x204>
 80047c4:	687b      	ldr	r3, [r7, #4]
 80047c6:	681b      	ldr	r3, [r3, #0]
 80047c8:	2201      	movs	r2, #1
 80047ca:	6839      	ldr	r1, [r7, #0]
 80047cc:	4618      	mov	r0, r3
 80047ce:	f000 fd9f 	bl	8005310 <TIM_CCxChannelCmd>
 80047d2:	687b      	ldr	r3, [r7, #4]
 80047d4:	681b      	ldr	r3, [r3, #0]
 80047d6:	4a2e      	ldr	r2, [pc, #184]	@ (8004890 <HAL_TIM_OC_Start_IT+0x210>)
 80047d8:	4293      	cmp	r3, r2
 80047da:	d004      	beq.n	80047e6 <HAL_TIM_OC_Start_IT+0x166>
 80047dc:	687b      	ldr	r3, [r7, #4]
 80047de:	681b      	ldr	r3, [r3, #0]
 80047e0:	4a2c      	ldr	r2, [pc, #176]	@ (8004894 <HAL_TIM_OC_Start_IT+0x214>)
 80047e2:	4293      	cmp	r3, r2
 80047e4:	d101      	bne.n	80047ea <HAL_TIM_OC_Start_IT+0x16a>
 80047e6:	2301      	movs	r3, #1
 80047e8:	e000      	b.n	80047ec <HAL_TIM_OC_Start_IT+0x16c>
 80047ea:	2300      	movs	r3, #0
 80047ec:	2b00      	cmp	r3, #0
 80047ee:	d007      	beq.n	8004800 <HAL_TIM_OC_Start_IT+0x180>
 80047f0:	687b      	ldr	r3, [r7, #4]
 80047f2:	681b      	ldr	r3, [r3, #0]
 80047f4:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 80047f6:	687b      	ldr	r3, [r7, #4]
 80047f8:	681b      	ldr	r3, [r3, #0]
 80047fa:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 80047fe:	645a      	str	r2, [r3, #68]	@ 0x44
 8004800:	687b      	ldr	r3, [r7, #4]
 8004802:	681b      	ldr	r3, [r3, #0]
 8004804:	4a22      	ldr	r2, [pc, #136]	@ (8004890 <HAL_TIM_OC_Start_IT+0x210>)
 8004806:	4293      	cmp	r3, r2
 8004808:	d022      	beq.n	8004850 <HAL_TIM_OC_Start_IT+0x1d0>
 800480a:	687b      	ldr	r3, [r7, #4]
 800480c:	681b      	ldr	r3, [r3, #0]
 800480e:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8004812:	d01d      	beq.n	8004850 <HAL_TIM_OC_Start_IT+0x1d0>
 8004814:	687b      	ldr	r3, [r7, #4]
 8004816:	681b      	ldr	r3, [r3, #0]
 8004818:	4a1f      	ldr	r2, [pc, #124]	@ (8004898 <HAL_TIM_OC_Start_IT+0x218>)
 800481a:	4293      	cmp	r3, r2
 800481c:	d018      	beq.n	8004850 <HAL_TIM_OC_Start_IT+0x1d0>
 800481e:	687b      	ldr	r3, [r7, #4]
 8004820:	681b      	ldr	r3, [r3, #0]
 8004822:	4a1e      	ldr	r2, [pc, #120]	@ (800489c <HAL_TIM_OC_Start_IT+0x21c>)
 8004824:	4293      	cmp	r3, r2
 8004826:	d013      	beq.n	8004850 <HAL_TIM_OC_Start_IT+0x1d0>
 8004828:	687b      	ldr	r3, [r7, #4]
 800482a:	681b      	ldr	r3, [r3, #0]
 800482c:	4a1c      	ldr	r2, [pc, #112]	@ (80048a0 <HAL_TIM_OC_Start_IT+0x220>)
 800482e:	4293      	cmp	r3, r2
 8004830:	d00e      	beq.n	8004850 <HAL_TIM_OC_Start_IT+0x1d0>
 8004832:	687b      	ldr	r3, [r7, #4]
 8004834:	681b      	ldr	r3, [r3, #0]
 8004836:	4a17      	ldr	r2, [pc, #92]	@ (8004894 <HAL_TIM_OC_Start_IT+0x214>)
 8004838:	4293      	cmp	r3, r2
 800483a:	d009      	beq.n	8004850 <HAL_TIM_OC_Start_IT+0x1d0>
 800483c:	687b      	ldr	r3, [r7, #4]
 800483e:	681b      	ldr	r3, [r3, #0]
 8004840:	4a18      	ldr	r2, [pc, #96]	@ (80048a4 <HAL_TIM_OC_Start_IT+0x224>)
 8004842:	4293      	cmp	r3, r2
 8004844:	d004      	beq.n	8004850 <HAL_TIM_OC_Start_IT+0x1d0>
 8004846:	687b      	ldr	r3, [r7, #4]
 8004848:	681b      	ldr	r3, [r3, #0]
 800484a:	4a17      	ldr	r2, [pc, #92]	@ (80048a8 <HAL_TIM_OC_Start_IT+0x228>)
 800484c:	4293      	cmp	r3, r2
 800484e:	d111      	bne.n	8004874 <HAL_TIM_OC_Start_IT+0x1f4>
 8004850:	687b      	ldr	r3, [r7, #4]
 8004852:	681b      	ldr	r3, [r3, #0]
 8004854:	689b      	ldr	r3, [r3, #8]
 8004856:	f003 0307 	and.w	r3, r3, #7
 800485a:	60bb      	str	r3, [r7, #8]
 800485c:	68bb      	ldr	r3, [r7, #8]
 800485e:	2b06      	cmp	r3, #6
 8004860:	d010      	beq.n	8004884 <HAL_TIM_OC_Start_IT+0x204>
 8004862:	687b      	ldr	r3, [r7, #4]
 8004864:	681b      	ldr	r3, [r3, #0]
 8004866:	681a      	ldr	r2, [r3, #0]
 8004868:	687b      	ldr	r3, [r7, #4]
 800486a:	681b      	ldr	r3, [r3, #0]
 800486c:	f042 0201 	orr.w	r2, r2, #1
 8004870:	601a      	str	r2, [r3, #0]
 8004872:	e007      	b.n	8004884 <HAL_TIM_OC_Start_IT+0x204>
 8004874:	687b      	ldr	r3, [r7, #4]
 8004876:	681b      	ldr	r3, [r3, #0]
 8004878:	681a      	ldr	r2, [r3, #0]
 800487a:	687b      	ldr	r3, [r7, #4]
 800487c:	681b      	ldr	r3, [r3, #0]
 800487e:	f042 0201 	orr.w	r2, r2, #1
 8004882:	601a      	str	r2, [r3, #0]
 8004884:	7bfb      	ldrb	r3, [r7, #15]
 8004886:	4618      	mov	r0, r3
 8004888:	3710      	adds	r7, #16
 800488a:	46bd      	mov	sp, r7
 800488c:	bd80      	pop	{r7, pc}
 800488e:	bf00      	nop
 8004890:	40010000 	.word	0x40010000
 8004894:	40010400 	.word	0x40010400
 8004898:	40000400 	.word	0x40000400
 800489c:	40000800 	.word	0x40000800
 80048a0:	40000c00 	.word	0x40000c00
 80048a4:	40014000 	.word	0x40014000
 80048a8:	40001800 	.word	0x40001800

080048ac <HAL_TIM_IRQHandler>:
 80048ac:	b580      	push	{r7, lr}
 80048ae:	b084      	sub	sp, #16
 80048b0:	af00      	add	r7, sp, #0
 80048b2:	6078      	str	r0, [r7, #4]
 80048b4:	687b      	ldr	r3, [r7, #4]
 80048b6:	681b      	ldr	r3, [r3, #0]
 80048b8:	68db      	ldr	r3, [r3, #12]
 80048ba:	60fb      	str	r3, [r7, #12]
 80048bc:	687b      	ldr	r3, [r7, #4]
 80048be:	681b      	ldr	r3, [r3, #0]
 80048c0:	691b      	ldr	r3, [r3, #16]
 80048c2:	60bb      	str	r3, [r7, #8]
 80048c4:	68bb      	ldr	r3, [r7, #8]
 80048c6:	f003 0302 	and.w	r3, r3, #2
 80048ca:	2b00      	cmp	r3, #0
 80048cc:	d020      	beq.n	8004910 <HAL_TIM_IRQHandler+0x64>
 80048ce:	68fb      	ldr	r3, [r7, #12]
 80048d0:	f003 0302 	and.w	r3, r3, #2
 80048d4:	2b00      	cmp	r3, #0
 80048d6:	d01b      	beq.n	8004910 <HAL_TIM_IRQHandler+0x64>
 80048d8:	687b      	ldr	r3, [r7, #4]
 80048da:	681b      	ldr	r3, [r3, #0]
 80048dc:	f06f 0202 	mvn.w	r2, #2
 80048e0:	611a      	str	r2, [r3, #16]
 80048e2:	687b      	ldr	r3, [r7, #4]
 80048e4:	2201      	movs	r2, #1
 80048e6:	771a      	strb	r2, [r3, #28]
 80048e8:	687b      	ldr	r3, [r7, #4]
 80048ea:	681b      	ldr	r3, [r3, #0]
 80048ec:	699b      	ldr	r3, [r3, #24]
 80048ee:	f003 0303 	and.w	r3, r3, #3
 80048f2:	2b00      	cmp	r3, #0
 80048f4:	d003      	beq.n	80048fe <HAL_TIM_IRQHandler+0x52>
 80048f6:	6878      	ldr	r0, [r7, #4]
 80048f8:	f000 f9f5 	bl	8004ce6 <HAL_TIM_IC_CaptureCallback>
 80048fc:	e005      	b.n	800490a <HAL_TIM_IRQHandler+0x5e>
 80048fe:	6878      	ldr	r0, [r7, #4]
 8004900:	f000 f9e7 	bl	8004cd2 <HAL_TIM_OC_DelayElapsedCallback>
 8004904:	6878      	ldr	r0, [r7, #4]
 8004906:	f000 f9f8 	bl	8004cfa <HAL_TIM_PWM_PulseFinishedCallback>
 800490a:	687b      	ldr	r3, [r7, #4]
 800490c:	2200      	movs	r2, #0
 800490e:	771a      	strb	r2, [r3, #28]
 8004910:	68bb      	ldr	r3, [r7, #8]
 8004912:	f003 0304 	and.w	r3, r3, #4
 8004916:	2b00      	cmp	r3, #0
 8004918:	d020      	beq.n	800495c <HAL_TIM_IRQHandler+0xb0>
 800491a:	68fb      	ldr	r3, [r7, #12]
 800491c:	f003 0304 	and.w	r3, r3, #4
 8004920:	2b00      	cmp	r3, #0
 8004922:	d01b      	beq.n	800495c <HAL_TIM_IRQHandler+0xb0>
 8004924:	687b      	ldr	r3, [r7, #4]
 8004926:	681b      	ldr	r3, [r3, #0]
 8004928:	f06f 0204 	mvn.w	r2, #4
 800492c:	611a      	str	r2, [r3, #16]
 800492e:	687b      	ldr	r3, [r7, #4]
 8004930:	2202      	movs	r2, #2
 8004932:	771a      	strb	r2, [r3, #28]
 8004934:	687b      	ldr	r3, [r7, #4]
 8004936:	681b      	ldr	r3, [r3, #0]
 8004938:	699b      	ldr	r3, [r3, #24]
 800493a:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800493e:	2b00      	cmp	r3, #0
 8004940:	d003      	beq.n	800494a <HAL_TIM_IRQHandler+0x9e>
 8004942:	6878      	ldr	r0, [r7, #4]
 8004944:	f000 f9cf 	bl	8004ce6 <HAL_TIM_IC_CaptureCallback>
 8004948:	e005      	b.n	8004956 <HAL_TIM_IRQHandler+0xaa>
 800494a:	6878      	ldr	r0, [r7, #4]
 800494c:	f000 f9c1 	bl	8004cd2 <HAL_TIM_OC_DelayElapsedCallback>
 8004950:	6878      	ldr	r0, [r7, #4]
 8004952:	f000 f9d2 	bl	8004cfa <HAL_TIM_PWM_PulseFinishedCallback>
 8004956:	687b      	ldr	r3, [r7, #4]
 8004958:	2200      	movs	r2, #0
 800495a:	771a      	strb	r2, [r3, #28]
 800495c:	68bb      	ldr	r3, [r7, #8]
 800495e:	f003 0308 	and.w	r3, r3, #8
 8004962:	2b00      	cmp	r3, #0
 8004964:	d020      	beq.n	80049a8 <HAL_TIM_IRQHandler+0xfc>
 8004966:	68fb      	ldr	r3, [r7, #12]
 8004968:	f003 0308 	and.w	r3, r3, #8
 800496c:	2b00      	cmp	r3, #0
 800496e:	d01b      	beq.n	80049a8 <HAL_TIM_IRQHandler+0xfc>
 8004970:	687b      	ldr	r3, [r7, #4]
 8004972:	681b      	ldr	r3, [r3, #0]
 8004974:	f06f 0208 	mvn.w	r2, #8
 8004978:	611a      	str	r2, [r3, #16]
 800497a:	687b      	ldr	r3, [r7, #4]
 800497c:	2204      	movs	r2, #4
 800497e:	771a      	strb	r2, [r3, #28]
 8004980:	687b      	ldr	r3, [r7, #4]
 8004982:	681b      	ldr	r3, [r3, #0]
 8004984:	69db      	ldr	r3, [r3, #28]
 8004986:	f003 0303 	and.w	r3, r3, #3
 800498a:	2b00      	cmp	r3, #0
 800498c:	d003      	beq.n	8004996 <HAL_TIM_IRQHandler+0xea>
 800498e:	6878      	ldr	r0, [r7, #4]
 8004990:	f000 f9a9 	bl	8004ce6 <HAL_TIM_IC_CaptureCallback>
 8004994:	e005      	b.n	80049a2 <HAL_TIM_IRQHandler+0xf6>
 8004996:	6878      	ldr	r0, [r7, #4]
 8004998:	f000 f99b 	bl	8004cd2 <HAL_TIM_OC_DelayElapsedCallback>
 800499c:	6878      	ldr	r0, [r7, #4]
 800499e:	f000 f9ac 	bl	8004cfa <HAL_TIM_PWM_PulseFinishedCallback>
 80049a2:	687b      	ldr	r3, [r7, #4]
 80049a4:	2200      	movs	r2, #0
 80049a6:	771a      	strb	r2, [r3, #28]
 80049a8:	68bb      	ldr	r3, [r7, #8]
 80049aa:	f003 0310 	and.w	r3, r3, #16
 80049ae:	2b00      	cmp	r3, #0
 80049b0:	d020      	beq.n	80049f4 <HAL_TIM_IRQHandler+0x148>
 80049b2:	68fb      	ldr	r3, [r7, #12]
 80049b4:	f003 0310 	and.w	r3, r3, #16
 80049b8:	2b00      	cmp	r3, #0
 80049ba:	d01b      	beq.n	80049f4 <HAL_TIM_IRQHandler+0x148>
 80049bc:	687b      	ldr	r3, [r7, #4]
 80049be:	681b      	ldr	r3, [r3, #0]
 80049c0:	f06f 0210 	mvn.w	r2, #16
 80049c4:	611a      	str	r2, [r3, #16]
 80049c6:	687b      	ldr	r3, [r7, #4]
 80049c8:	2208      	movs	r2, #8
 80049ca:	771a      	strb	r2, [r3, #28]
 80049cc:	687b      	ldr	r3, [r7, #4]
 80049ce:	681b      	ldr	r3, [r3, #0]
 80049d0:	69db      	ldr	r3, [r3, #28]
 80049d2:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80049d6:	2b00      	cmp	r3, #0
 80049d8:	d003      	beq.n	80049e2 <HAL_TIM_IRQHandler+0x136>
 80049da:	6878      	ldr	r0, [r7, #4]
 80049dc:	f000 f983 	bl	8004ce6 <HAL_TIM_IC_CaptureCallback>
 80049e0:	e005      	b.n	80049ee <HAL_TIM_IRQHandler+0x142>
 80049e2:	6878      	ldr	r0, [r7, #4]
 80049e4:	f000 f975 	bl	8004cd2 <HAL_TIM_OC_DelayElapsedCallback>
 80049e8:	6878      	ldr	r0, [r7, #4]
 80049ea:	f000 f986 	bl	8004cfa <HAL_TIM_PWM_PulseFinishedCallback>
 80049ee:	687b      	ldr	r3, [r7, #4]
 80049f0:	2200      	movs	r2, #0
 80049f2:	771a      	strb	r2, [r3, #28]
 80049f4:	68bb      	ldr	r3, [r7, #8]
 80049f6:	f003 0301 	and.w	r3, r3, #1
 80049fa:	2b00      	cmp	r3, #0
 80049fc:	d00c      	beq.n	8004a18 <HAL_TIM_IRQHandler+0x16c>
 80049fe:	68fb      	ldr	r3, [r7, #12]
 8004a00:	f003 0301 	and.w	r3, r3, #1
 8004a04:	2b00      	cmp	r3, #0
 8004a06:	d007      	beq.n	8004a18 <HAL_TIM_IRQHandler+0x16c>
 8004a08:	687b      	ldr	r3, [r7, #4]
 8004a0a:	681b      	ldr	r3, [r3, #0]
 8004a0c:	f06f 0201 	mvn.w	r2, #1
 8004a10:	611a      	str	r2, [r3, #16]
 8004a12:	6878      	ldr	r0, [r7, #4]
 8004a14:	f7fc ff82 	bl	800191c <HAL_TIM_PeriodElapsedCallback>
 8004a18:	68bb      	ldr	r3, [r7, #8]
 8004a1a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004a1e:	2b00      	cmp	r3, #0
 8004a20:	d00c      	beq.n	8004a3c <HAL_TIM_IRQHandler+0x190>
 8004a22:	68fb      	ldr	r3, [r7, #12]
 8004a24:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004a28:	2b00      	cmp	r3, #0
 8004a2a:	d007      	beq.n	8004a3c <HAL_TIM_IRQHandler+0x190>
 8004a2c:	687b      	ldr	r3, [r7, #4]
 8004a2e:	681b      	ldr	r3, [r3, #0]
 8004a30:	f06f 0280 	mvn.w	r2, #128	@ 0x80
 8004a34:	611a      	str	r2, [r3, #16]
 8004a36:	6878      	ldr	r0, [r7, #4]
 8004a38:	f000 fd68 	bl	800550c <HAL_TIMEx_BreakCallback>
 8004a3c:	68bb      	ldr	r3, [r7, #8]
 8004a3e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004a42:	2b00      	cmp	r3, #0
 8004a44:	d00c      	beq.n	8004a60 <HAL_TIM_IRQHandler+0x1b4>
 8004a46:	68fb      	ldr	r3, [r7, #12]
 8004a48:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004a4c:	2b00      	cmp	r3, #0
 8004a4e:	d007      	beq.n	8004a60 <HAL_TIM_IRQHandler+0x1b4>
 8004a50:	687b      	ldr	r3, [r7, #4]
 8004a52:	681b      	ldr	r3, [r3, #0]
 8004a54:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 8004a58:	611a      	str	r2, [r3, #16]
 8004a5a:	6878      	ldr	r0, [r7, #4]
 8004a5c:	f000 f957 	bl	8004d0e <HAL_TIM_TriggerCallback>
 8004a60:	68bb      	ldr	r3, [r7, #8]
 8004a62:	f003 0320 	and.w	r3, r3, #32
 8004a66:	2b00      	cmp	r3, #0
 8004a68:	d00c      	beq.n	8004a84 <HAL_TIM_IRQHandler+0x1d8>
 8004a6a:	68fb      	ldr	r3, [r7, #12]
 8004a6c:	f003 0320 	and.w	r3, r3, #32
 8004a70:	2b00      	cmp	r3, #0
 8004a72:	d007      	beq.n	8004a84 <HAL_TIM_IRQHandler+0x1d8>
 8004a74:	687b      	ldr	r3, [r7, #4]
 8004a76:	681b      	ldr	r3, [r3, #0]
 8004a78:	f06f 0220 	mvn.w	r2, #32
 8004a7c:	611a      	str	r2, [r3, #16]
 8004a7e:	6878      	ldr	r0, [r7, #4]
 8004a80:	f000 fd3a 	bl	80054f8 <HAL_TIMEx_CommutCallback>
 8004a84:	bf00      	nop
 8004a86:	3710      	adds	r7, #16
 8004a88:	46bd      	mov	sp, r7
 8004a8a:	bd80      	pop	{r7, pc}

08004a8c <HAL_TIM_OC_ConfigChannel>:
 8004a8c:	b580      	push	{r7, lr}
 8004a8e:	b086      	sub	sp, #24
 8004a90:	af00      	add	r7, sp, #0
 8004a92:	60f8      	str	r0, [r7, #12]
 8004a94:	60b9      	str	r1, [r7, #8]
 8004a96:	607a      	str	r2, [r7, #4]
 8004a98:	2300      	movs	r3, #0
 8004a9a:	75fb      	strb	r3, [r7, #23]
 8004a9c:	68fb      	ldr	r3, [r7, #12]
 8004a9e:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8004aa2:	2b01      	cmp	r3, #1
 8004aa4:	d101      	bne.n	8004aaa <HAL_TIM_OC_ConfigChannel+0x1e>
 8004aa6:	2302      	movs	r3, #2
 8004aa8:	e048      	b.n	8004b3c <HAL_TIM_OC_ConfigChannel+0xb0>
 8004aaa:	68fb      	ldr	r3, [r7, #12]
 8004aac:	2201      	movs	r2, #1
 8004aae:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
 8004ab2:	687b      	ldr	r3, [r7, #4]
 8004ab4:	2b0c      	cmp	r3, #12
 8004ab6:	d839      	bhi.n	8004b2c <HAL_TIM_OC_ConfigChannel+0xa0>
 8004ab8:	a201      	add	r2, pc, #4	@ (adr r2, 8004ac0 <HAL_TIM_OC_ConfigChannel+0x34>)
 8004aba:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004abe:	bf00      	nop
 8004ac0:	08004af5 	.word	0x08004af5
 8004ac4:	08004b2d 	.word	0x08004b2d
 8004ac8:	08004b2d 	.word	0x08004b2d
 8004acc:	08004b2d 	.word	0x08004b2d
 8004ad0:	08004b03 	.word	0x08004b03
 8004ad4:	08004b2d 	.word	0x08004b2d
 8004ad8:	08004b2d 	.word	0x08004b2d
 8004adc:	08004b2d 	.word	0x08004b2d
 8004ae0:	08004b11 	.word	0x08004b11
 8004ae4:	08004b2d 	.word	0x08004b2d
 8004ae8:	08004b2d 	.word	0x08004b2d
 8004aec:	08004b2d 	.word	0x08004b2d
 8004af0:	08004b1f 	.word	0x08004b1f
 8004af4:	68fb      	ldr	r3, [r7, #12]
 8004af6:	681b      	ldr	r3, [r3, #0]
 8004af8:	68b9      	ldr	r1, [r7, #8]
 8004afa:	4618      	mov	r0, r3
 8004afc:	f000 f9be 	bl	8004e7c <TIM_OC1_SetConfig>
 8004b00:	e017      	b.n	8004b32 <HAL_TIM_OC_ConfigChannel+0xa6>
 8004b02:	68fb      	ldr	r3, [r7, #12]
 8004b04:	681b      	ldr	r3, [r3, #0]
 8004b06:	68b9      	ldr	r1, [r7, #8]
 8004b08:	4618      	mov	r0, r3
 8004b0a:	f000 fa27 	bl	8004f5c <TIM_OC2_SetConfig>
 8004b0e:	e010      	b.n	8004b32 <HAL_TIM_OC_ConfigChannel+0xa6>
 8004b10:	68fb      	ldr	r3, [r7, #12]
 8004b12:	681b      	ldr	r3, [r3, #0]
 8004b14:	68b9      	ldr	r1, [r7, #8]
 8004b16:	4618      	mov	r0, r3
 8004b18:	f000 fa96 	bl	8005048 <TIM_OC3_SetConfig>
 8004b1c:	e009      	b.n	8004b32 <HAL_TIM_OC_ConfigChannel+0xa6>
 8004b1e:	68fb      	ldr	r3, [r7, #12]
 8004b20:	681b      	ldr	r3, [r3, #0]
 8004b22:	68b9      	ldr	r1, [r7, #8]
 8004b24:	4618      	mov	r0, r3
 8004b26:	f000 fb03 	bl	8005130 <TIM_OC4_SetConfig>
 8004b2a:	e002      	b.n	8004b32 <HAL_TIM_OC_ConfigChannel+0xa6>
 8004b2c:	2301      	movs	r3, #1
 8004b2e:	75fb      	strb	r3, [r7, #23]
 8004b30:	bf00      	nop
 8004b32:	68fb      	ldr	r3, [r7, #12]
 8004b34:	2200      	movs	r2, #0
 8004b36:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
 8004b3a:	7dfb      	ldrb	r3, [r7, #23]
 8004b3c:	4618      	mov	r0, r3
 8004b3e:	3718      	adds	r7, #24
 8004b40:	46bd      	mov	sp, r7
 8004b42:	bd80      	pop	{r7, pc}

08004b44 <HAL_TIM_ConfigClockSource>:
 8004b44:	b580      	push	{r7, lr}
 8004b46:	b084      	sub	sp, #16
 8004b48:	af00      	add	r7, sp, #0
 8004b4a:	6078      	str	r0, [r7, #4]
 8004b4c:	6039      	str	r1, [r7, #0]
 8004b4e:	2300      	movs	r3, #0
 8004b50:	73fb      	strb	r3, [r7, #15]
 8004b52:	687b      	ldr	r3, [r7, #4]
 8004b54:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8004b58:	2b01      	cmp	r3, #1
 8004b5a:	d101      	bne.n	8004b60 <HAL_TIM_ConfigClockSource+0x1c>
 8004b5c:	2302      	movs	r3, #2
 8004b5e:	e0b4      	b.n	8004cca <HAL_TIM_ConfigClockSource+0x186>
 8004b60:	687b      	ldr	r3, [r7, #4]
 8004b62:	2201      	movs	r2, #1
 8004b64:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
 8004b68:	687b      	ldr	r3, [r7, #4]
 8004b6a:	2202      	movs	r2, #2
 8004b6c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
 8004b70:	687b      	ldr	r3, [r7, #4]
 8004b72:	681b      	ldr	r3, [r3, #0]
 8004b74:	689b      	ldr	r3, [r3, #8]
 8004b76:	60bb      	str	r3, [r7, #8]
 8004b78:	68bb      	ldr	r3, [r7, #8]
 8004b7a:	f023 0377 	bic.w	r3, r3, #119	@ 0x77
 8004b7e:	60bb      	str	r3, [r7, #8]
 8004b80:	68bb      	ldr	r3, [r7, #8]
 8004b82:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8004b86:	60bb      	str	r3, [r7, #8]
 8004b88:	687b      	ldr	r3, [r7, #4]
 8004b8a:	681b      	ldr	r3, [r3, #0]
 8004b8c:	68ba      	ldr	r2, [r7, #8]
 8004b8e:	609a      	str	r2, [r3, #8]
 8004b90:	683b      	ldr	r3, [r7, #0]
 8004b92:	681b      	ldr	r3, [r3, #0]
 8004b94:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8004b98:	d03e      	beq.n	8004c18 <HAL_TIM_ConfigClockSource+0xd4>
 8004b9a:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8004b9e:	f200 8087 	bhi.w	8004cb0 <HAL_TIM_ConfigClockSource+0x16c>
 8004ba2:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8004ba6:	f000 8086 	beq.w	8004cb6 <HAL_TIM_ConfigClockSource+0x172>
 8004baa:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8004bae:	d87f      	bhi.n	8004cb0 <HAL_TIM_ConfigClockSource+0x16c>
 8004bb0:	2b70      	cmp	r3, #112	@ 0x70
 8004bb2:	d01a      	beq.n	8004bea <HAL_TIM_ConfigClockSource+0xa6>
 8004bb4:	2b70      	cmp	r3, #112	@ 0x70
 8004bb6:	d87b      	bhi.n	8004cb0 <HAL_TIM_ConfigClockSource+0x16c>
 8004bb8:	2b60      	cmp	r3, #96	@ 0x60
 8004bba:	d050      	beq.n	8004c5e <HAL_TIM_ConfigClockSource+0x11a>
 8004bbc:	2b60      	cmp	r3, #96	@ 0x60
 8004bbe:	d877      	bhi.n	8004cb0 <HAL_TIM_ConfigClockSource+0x16c>
 8004bc0:	2b50      	cmp	r3, #80	@ 0x50
 8004bc2:	d03c      	beq.n	8004c3e <HAL_TIM_ConfigClockSource+0xfa>
 8004bc4:	2b50      	cmp	r3, #80	@ 0x50
 8004bc6:	d873      	bhi.n	8004cb0 <HAL_TIM_ConfigClockSource+0x16c>
 8004bc8:	2b40      	cmp	r3, #64	@ 0x40
 8004bca:	d058      	beq.n	8004c7e <HAL_TIM_ConfigClockSource+0x13a>
 8004bcc:	2b40      	cmp	r3, #64	@ 0x40
 8004bce:	d86f      	bhi.n	8004cb0 <HAL_TIM_ConfigClockSource+0x16c>
 8004bd0:	2b30      	cmp	r3, #48	@ 0x30
 8004bd2:	d064      	beq.n	8004c9e <HAL_TIM_ConfigClockSource+0x15a>
 8004bd4:	2b30      	cmp	r3, #48	@ 0x30
 8004bd6:	d86b      	bhi.n	8004cb0 <HAL_TIM_ConfigClockSource+0x16c>
 8004bd8:	2b20      	cmp	r3, #32
 8004bda:	d060      	beq.n	8004c9e <HAL_TIM_ConfigClockSource+0x15a>
 8004bdc:	2b20      	cmp	r3, #32
 8004bde:	d867      	bhi.n	8004cb0 <HAL_TIM_ConfigClockSource+0x16c>
 8004be0:	2b00      	cmp	r3, #0
 8004be2:	d05c      	beq.n	8004c9e <HAL_TIM_ConfigClockSource+0x15a>
 8004be4:	2b10      	cmp	r3, #16
 8004be6:	d05a      	beq.n	8004c9e <HAL_TIM_ConfigClockSource+0x15a>
 8004be8:	e062      	b.n	8004cb0 <HAL_TIM_ConfigClockSource+0x16c>
 8004bea:	687b      	ldr	r3, [r7, #4]
 8004bec:	6818      	ldr	r0, [r3, #0]
 8004bee:	683b      	ldr	r3, [r7, #0]
 8004bf0:	6899      	ldr	r1, [r3, #8]
 8004bf2:	683b      	ldr	r3, [r7, #0]
 8004bf4:	685a      	ldr	r2, [r3, #4]
 8004bf6:	683b      	ldr	r3, [r7, #0]
 8004bf8:	68db      	ldr	r3, [r3, #12]
 8004bfa:	f000 fb69 	bl	80052d0 <TIM_ETR_SetConfig>
 8004bfe:	687b      	ldr	r3, [r7, #4]
 8004c00:	681b      	ldr	r3, [r3, #0]
 8004c02:	689b      	ldr	r3, [r3, #8]
 8004c04:	60bb      	str	r3, [r7, #8]
 8004c06:	68bb      	ldr	r3, [r7, #8]
 8004c08:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 8004c0c:	60bb      	str	r3, [r7, #8]
 8004c0e:	687b      	ldr	r3, [r7, #4]
 8004c10:	681b      	ldr	r3, [r3, #0]
 8004c12:	68ba      	ldr	r2, [r7, #8]
 8004c14:	609a      	str	r2, [r3, #8]
 8004c16:	e04f      	b.n	8004cb8 <HAL_TIM_ConfigClockSource+0x174>
 8004c18:	687b      	ldr	r3, [r7, #4]
 8004c1a:	6818      	ldr	r0, [r3, #0]
 8004c1c:	683b      	ldr	r3, [r7, #0]
 8004c1e:	6899      	ldr	r1, [r3, #8]
 8004c20:	683b      	ldr	r3, [r7, #0]
 8004c22:	685a      	ldr	r2, [r3, #4]
 8004c24:	683b      	ldr	r3, [r7, #0]
 8004c26:	68db      	ldr	r3, [r3, #12]
 8004c28:	f000 fb52 	bl	80052d0 <TIM_ETR_SetConfig>
 8004c2c:	687b      	ldr	r3, [r7, #4]
 8004c2e:	681b      	ldr	r3, [r3, #0]
 8004c30:	689a      	ldr	r2, [r3, #8]
 8004c32:	687b      	ldr	r3, [r7, #4]
 8004c34:	681b      	ldr	r3, [r3, #0]
 8004c36:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8004c3a:	609a      	str	r2, [r3, #8]
 8004c3c:	e03c      	b.n	8004cb8 <HAL_TIM_ConfigClockSource+0x174>
 8004c3e:	687b      	ldr	r3, [r7, #4]
 8004c40:	6818      	ldr	r0, [r3, #0]
 8004c42:	683b      	ldr	r3, [r7, #0]
 8004c44:	6859      	ldr	r1, [r3, #4]
 8004c46:	683b      	ldr	r3, [r7, #0]
 8004c48:	68db      	ldr	r3, [r3, #12]
 8004c4a:	461a      	mov	r2, r3
 8004c4c:	f000 fac6 	bl	80051dc <TIM_TI1_ConfigInputStage>
 8004c50:	687b      	ldr	r3, [r7, #4]
 8004c52:	681b      	ldr	r3, [r3, #0]
 8004c54:	2150      	movs	r1, #80	@ 0x50
 8004c56:	4618      	mov	r0, r3
 8004c58:	f000 fb1f 	bl	800529a <TIM_ITRx_SetConfig>
 8004c5c:	e02c      	b.n	8004cb8 <HAL_TIM_ConfigClockSource+0x174>
 8004c5e:	687b      	ldr	r3, [r7, #4]
 8004c60:	6818      	ldr	r0, [r3, #0]
 8004c62:	683b      	ldr	r3, [r7, #0]
 8004c64:	6859      	ldr	r1, [r3, #4]
 8004c66:	683b      	ldr	r3, [r7, #0]
 8004c68:	68db      	ldr	r3, [r3, #12]
 8004c6a:	461a      	mov	r2, r3
 8004c6c:	f000 fae5 	bl	800523a <TIM_TI2_ConfigInputStage>
 8004c70:	687b      	ldr	r3, [r7, #4]
 8004c72:	681b      	ldr	r3, [r3, #0]
 8004c74:	2160      	movs	r1, #96	@ 0x60
 8004c76:	4618      	mov	r0, r3
 8004c78:	f000 fb0f 	bl	800529a <TIM_ITRx_SetConfig>
 8004c7c:	e01c      	b.n	8004cb8 <HAL_TIM_ConfigClockSource+0x174>
 8004c7e:	687b      	ldr	r3, [r7, #4]
 8004c80:	6818      	ldr	r0, [r3, #0]
 8004c82:	683b      	ldr	r3, [r7, #0]
 8004c84:	6859      	ldr	r1, [r3, #4]
 8004c86:	683b      	ldr	r3, [r7, #0]
 8004c88:	68db      	ldr	r3, [r3, #12]
 8004c8a:	461a      	mov	r2, r3
 8004c8c:	f000 faa6 	bl	80051dc <TIM_TI1_ConfigInputStage>
 8004c90:	687b      	ldr	r3, [r7, #4]
 8004c92:	681b      	ldr	r3, [r3, #0]
 8004c94:	2140      	movs	r1, #64	@ 0x40
 8004c96:	4618      	mov	r0, r3
 8004c98:	f000 faff 	bl	800529a <TIM_ITRx_SetConfig>
 8004c9c:	e00c      	b.n	8004cb8 <HAL_TIM_ConfigClockSource+0x174>
 8004c9e:	687b      	ldr	r3, [r7, #4]
 8004ca0:	681a      	ldr	r2, [r3, #0]
 8004ca2:	683b      	ldr	r3, [r7, #0]
 8004ca4:	681b      	ldr	r3, [r3, #0]
 8004ca6:	4619      	mov	r1, r3
 8004ca8:	4610      	mov	r0, r2
 8004caa:	f000 faf6 	bl	800529a <TIM_ITRx_SetConfig>
 8004cae:	e003      	b.n	8004cb8 <HAL_TIM_ConfigClockSource+0x174>
 8004cb0:	2301      	movs	r3, #1
 8004cb2:	73fb      	strb	r3, [r7, #15]
 8004cb4:	e000      	b.n	8004cb8 <HAL_TIM_ConfigClockSource+0x174>
 8004cb6:	bf00      	nop
 8004cb8:	687b      	ldr	r3, [r7, #4]
 8004cba:	2201      	movs	r2, #1
 8004cbc:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
 8004cc0:	687b      	ldr	r3, [r7, #4]
 8004cc2:	2200      	movs	r2, #0
 8004cc4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
 8004cc8:	7bfb      	ldrb	r3, [r7, #15]
 8004cca:	4618      	mov	r0, r3
 8004ccc:	3710      	adds	r7, #16
 8004cce:	46bd      	mov	sp, r7
 8004cd0:	bd80      	pop	{r7, pc}

08004cd2 <HAL_TIM_OC_DelayElapsedCallback>:
 8004cd2:	b480      	push	{r7}
 8004cd4:	b083      	sub	sp, #12
 8004cd6:	af00      	add	r7, sp, #0
 8004cd8:	6078      	str	r0, [r7, #4]
 8004cda:	bf00      	nop
 8004cdc:	370c      	adds	r7, #12
 8004cde:	46bd      	mov	sp, r7
 8004ce0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ce4:	4770      	bx	lr

08004ce6 <HAL_TIM_IC_CaptureCallback>:
 8004ce6:	b480      	push	{r7}
 8004ce8:	b083      	sub	sp, #12
 8004cea:	af00      	add	r7, sp, #0
 8004cec:	6078      	str	r0, [r7, #4]
 8004cee:	bf00      	nop
 8004cf0:	370c      	adds	r7, #12
 8004cf2:	46bd      	mov	sp, r7
 8004cf4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004cf8:	4770      	bx	lr

08004cfa <HAL_TIM_PWM_PulseFinishedCallback>:
 8004cfa:	b480      	push	{r7}
 8004cfc:	b083      	sub	sp, #12
 8004cfe:	af00      	add	r7, sp, #0
 8004d00:	6078      	str	r0, [r7, #4]
 8004d02:	bf00      	nop
 8004d04:	370c      	adds	r7, #12
 8004d06:	46bd      	mov	sp, r7
 8004d08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d0c:	4770      	bx	lr

08004d0e <HAL_TIM_TriggerCallback>:
 8004d0e:	b480      	push	{r7}
 8004d10:	b083      	sub	sp, #12
 8004d12:	af00      	add	r7, sp, #0
 8004d14:	6078      	str	r0, [r7, #4]
 8004d16:	bf00      	nop
 8004d18:	370c      	adds	r7, #12
 8004d1a:	46bd      	mov	sp, r7
 8004d1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d20:	4770      	bx	lr
	...

08004d24 <TIM_Base_SetConfig>:
 8004d24:	b480      	push	{r7}
 8004d26:	b085      	sub	sp, #20
 8004d28:	af00      	add	r7, sp, #0
 8004d2a:	6078      	str	r0, [r7, #4]
 8004d2c:	6039      	str	r1, [r7, #0]
 8004d2e:	687b      	ldr	r3, [r7, #4]
 8004d30:	681b      	ldr	r3, [r3, #0]
 8004d32:	60fb      	str	r3, [r7, #12]
 8004d34:	687b      	ldr	r3, [r7, #4]
 8004d36:	4a46      	ldr	r2, [pc, #280]	@ (8004e50 <TIM_Base_SetConfig+0x12c>)
 8004d38:	4293      	cmp	r3, r2
 8004d3a:	d013      	beq.n	8004d64 <TIM_Base_SetConfig+0x40>
 8004d3c:	687b      	ldr	r3, [r7, #4]
 8004d3e:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8004d42:	d00f      	beq.n	8004d64 <TIM_Base_SetConfig+0x40>
 8004d44:	687b      	ldr	r3, [r7, #4]
 8004d46:	4a43      	ldr	r2, [pc, #268]	@ (8004e54 <TIM_Base_SetConfig+0x130>)
 8004d48:	4293      	cmp	r3, r2
 8004d4a:	d00b      	beq.n	8004d64 <TIM_Base_SetConfig+0x40>
 8004d4c:	687b      	ldr	r3, [r7, #4]
 8004d4e:	4a42      	ldr	r2, [pc, #264]	@ (8004e58 <TIM_Base_SetConfig+0x134>)
 8004d50:	4293      	cmp	r3, r2
 8004d52:	d007      	beq.n	8004d64 <TIM_Base_SetConfig+0x40>
 8004d54:	687b      	ldr	r3, [r7, #4]
 8004d56:	4a41      	ldr	r2, [pc, #260]	@ (8004e5c <TIM_Base_SetConfig+0x138>)
 8004d58:	4293      	cmp	r3, r2
 8004d5a:	d003      	beq.n	8004d64 <TIM_Base_SetConfig+0x40>
 8004d5c:	687b      	ldr	r3, [r7, #4]
 8004d5e:	4a40      	ldr	r2, [pc, #256]	@ (8004e60 <TIM_Base_SetConfig+0x13c>)
 8004d60:	4293      	cmp	r3, r2
 8004d62:	d108      	bne.n	8004d76 <TIM_Base_SetConfig+0x52>
 8004d64:	68fb      	ldr	r3, [r7, #12]
 8004d66:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8004d6a:	60fb      	str	r3, [r7, #12]
 8004d6c:	683b      	ldr	r3, [r7, #0]
 8004d6e:	685b      	ldr	r3, [r3, #4]
 8004d70:	68fa      	ldr	r2, [r7, #12]
 8004d72:	4313      	orrs	r3, r2
 8004d74:	60fb      	str	r3, [r7, #12]
 8004d76:	687b      	ldr	r3, [r7, #4]
 8004d78:	4a35      	ldr	r2, [pc, #212]	@ (8004e50 <TIM_Base_SetConfig+0x12c>)
 8004d7a:	4293      	cmp	r3, r2
 8004d7c:	d02b      	beq.n	8004dd6 <TIM_Base_SetConfig+0xb2>
 8004d7e:	687b      	ldr	r3, [r7, #4]
 8004d80:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8004d84:	d027      	beq.n	8004dd6 <TIM_Base_SetConfig+0xb2>
 8004d86:	687b      	ldr	r3, [r7, #4]
 8004d88:	4a32      	ldr	r2, [pc, #200]	@ (8004e54 <TIM_Base_SetConfig+0x130>)
 8004d8a:	4293      	cmp	r3, r2
 8004d8c:	d023      	beq.n	8004dd6 <TIM_Base_SetConfig+0xb2>
 8004d8e:	687b      	ldr	r3, [r7, #4]
 8004d90:	4a31      	ldr	r2, [pc, #196]	@ (8004e58 <TIM_Base_SetConfig+0x134>)
 8004d92:	4293      	cmp	r3, r2
 8004d94:	d01f      	beq.n	8004dd6 <TIM_Base_SetConfig+0xb2>
 8004d96:	687b      	ldr	r3, [r7, #4]
 8004d98:	4a30      	ldr	r2, [pc, #192]	@ (8004e5c <TIM_Base_SetConfig+0x138>)
 8004d9a:	4293      	cmp	r3, r2
 8004d9c:	d01b      	beq.n	8004dd6 <TIM_Base_SetConfig+0xb2>
 8004d9e:	687b      	ldr	r3, [r7, #4]
 8004da0:	4a2f      	ldr	r2, [pc, #188]	@ (8004e60 <TIM_Base_SetConfig+0x13c>)
 8004da2:	4293      	cmp	r3, r2
 8004da4:	d017      	beq.n	8004dd6 <TIM_Base_SetConfig+0xb2>
 8004da6:	687b      	ldr	r3, [r7, #4]
 8004da8:	4a2e      	ldr	r2, [pc, #184]	@ (8004e64 <TIM_Base_SetConfig+0x140>)
 8004daa:	4293      	cmp	r3, r2
 8004dac:	d013      	beq.n	8004dd6 <TIM_Base_SetConfig+0xb2>
 8004dae:	687b      	ldr	r3, [r7, #4]
 8004db0:	4a2d      	ldr	r2, [pc, #180]	@ (8004e68 <TIM_Base_SetConfig+0x144>)
 8004db2:	4293      	cmp	r3, r2
 8004db4:	d00f      	beq.n	8004dd6 <TIM_Base_SetConfig+0xb2>
 8004db6:	687b      	ldr	r3, [r7, #4]
 8004db8:	4a2c      	ldr	r2, [pc, #176]	@ (8004e6c <TIM_Base_SetConfig+0x148>)
 8004dba:	4293      	cmp	r3, r2
 8004dbc:	d00b      	beq.n	8004dd6 <TIM_Base_SetConfig+0xb2>
 8004dbe:	687b      	ldr	r3, [r7, #4]
 8004dc0:	4a2b      	ldr	r2, [pc, #172]	@ (8004e70 <TIM_Base_SetConfig+0x14c>)
 8004dc2:	4293      	cmp	r3, r2
 8004dc4:	d007      	beq.n	8004dd6 <TIM_Base_SetConfig+0xb2>
 8004dc6:	687b      	ldr	r3, [r7, #4]
 8004dc8:	4a2a      	ldr	r2, [pc, #168]	@ (8004e74 <TIM_Base_SetConfig+0x150>)
 8004dca:	4293      	cmp	r3, r2
 8004dcc:	d003      	beq.n	8004dd6 <TIM_Base_SetConfig+0xb2>
 8004dce:	687b      	ldr	r3, [r7, #4]
 8004dd0:	4a29      	ldr	r2, [pc, #164]	@ (8004e78 <TIM_Base_SetConfig+0x154>)
 8004dd2:	4293      	cmp	r3, r2
 8004dd4:	d108      	bne.n	8004de8 <TIM_Base_SetConfig+0xc4>
 8004dd6:	68fb      	ldr	r3, [r7, #12]
 8004dd8:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8004ddc:	60fb      	str	r3, [r7, #12]
 8004dde:	683b      	ldr	r3, [r7, #0]
 8004de0:	68db      	ldr	r3, [r3, #12]
 8004de2:	68fa      	ldr	r2, [r7, #12]
 8004de4:	4313      	orrs	r3, r2
 8004de6:	60fb      	str	r3, [r7, #12]
 8004de8:	68fb      	ldr	r3, [r7, #12]
 8004dea:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 8004dee:	683b      	ldr	r3, [r7, #0]
 8004df0:	695b      	ldr	r3, [r3, #20]
 8004df2:	4313      	orrs	r3, r2
 8004df4:	60fb      	str	r3, [r7, #12]
 8004df6:	687b      	ldr	r3, [r7, #4]
 8004df8:	68fa      	ldr	r2, [r7, #12]
 8004dfa:	601a      	str	r2, [r3, #0]
 8004dfc:	683b      	ldr	r3, [r7, #0]
 8004dfe:	689a      	ldr	r2, [r3, #8]
 8004e00:	687b      	ldr	r3, [r7, #4]
 8004e02:	62da      	str	r2, [r3, #44]	@ 0x2c
 8004e04:	683b      	ldr	r3, [r7, #0]
 8004e06:	681a      	ldr	r2, [r3, #0]
 8004e08:	687b      	ldr	r3, [r7, #4]
 8004e0a:	629a      	str	r2, [r3, #40]	@ 0x28
 8004e0c:	687b      	ldr	r3, [r7, #4]
 8004e0e:	4a10      	ldr	r2, [pc, #64]	@ (8004e50 <TIM_Base_SetConfig+0x12c>)
 8004e10:	4293      	cmp	r3, r2
 8004e12:	d003      	beq.n	8004e1c <TIM_Base_SetConfig+0xf8>
 8004e14:	687b      	ldr	r3, [r7, #4]
 8004e16:	4a12      	ldr	r2, [pc, #72]	@ (8004e60 <TIM_Base_SetConfig+0x13c>)
 8004e18:	4293      	cmp	r3, r2
 8004e1a:	d103      	bne.n	8004e24 <TIM_Base_SetConfig+0x100>
 8004e1c:	683b      	ldr	r3, [r7, #0]
 8004e1e:	691a      	ldr	r2, [r3, #16]
 8004e20:	687b      	ldr	r3, [r7, #4]
 8004e22:	631a      	str	r2, [r3, #48]	@ 0x30
 8004e24:	687b      	ldr	r3, [r7, #4]
 8004e26:	2201      	movs	r2, #1
 8004e28:	615a      	str	r2, [r3, #20]
 8004e2a:	687b      	ldr	r3, [r7, #4]
 8004e2c:	691b      	ldr	r3, [r3, #16]
 8004e2e:	f003 0301 	and.w	r3, r3, #1
 8004e32:	2b01      	cmp	r3, #1
 8004e34:	d105      	bne.n	8004e42 <TIM_Base_SetConfig+0x11e>
 8004e36:	687b      	ldr	r3, [r7, #4]
 8004e38:	691b      	ldr	r3, [r3, #16]
 8004e3a:	f023 0201 	bic.w	r2, r3, #1
 8004e3e:	687b      	ldr	r3, [r7, #4]
 8004e40:	611a      	str	r2, [r3, #16]
 8004e42:	bf00      	nop
 8004e44:	3714      	adds	r7, #20
 8004e46:	46bd      	mov	sp, r7
 8004e48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e4c:	4770      	bx	lr
 8004e4e:	bf00      	nop
 8004e50:	40010000 	.word	0x40010000
 8004e54:	40000400 	.word	0x40000400
 8004e58:	40000800 	.word	0x40000800
 8004e5c:	40000c00 	.word	0x40000c00
 8004e60:	40010400 	.word	0x40010400
 8004e64:	40014000 	.word	0x40014000
 8004e68:	40014400 	.word	0x40014400
 8004e6c:	40014800 	.word	0x40014800
 8004e70:	40001800 	.word	0x40001800
 8004e74:	40001c00 	.word	0x40001c00
 8004e78:	40002000 	.word	0x40002000

08004e7c <TIM_OC1_SetConfig>:
 8004e7c:	b480      	push	{r7}
 8004e7e:	b087      	sub	sp, #28
 8004e80:	af00      	add	r7, sp, #0
 8004e82:	6078      	str	r0, [r7, #4]
 8004e84:	6039      	str	r1, [r7, #0]
 8004e86:	687b      	ldr	r3, [r7, #4]
 8004e88:	6a1b      	ldr	r3, [r3, #32]
 8004e8a:	617b      	str	r3, [r7, #20]
 8004e8c:	687b      	ldr	r3, [r7, #4]
 8004e8e:	6a1b      	ldr	r3, [r3, #32]
 8004e90:	f023 0201 	bic.w	r2, r3, #1
 8004e94:	687b      	ldr	r3, [r7, #4]
 8004e96:	621a      	str	r2, [r3, #32]
 8004e98:	687b      	ldr	r3, [r7, #4]
 8004e9a:	685b      	ldr	r3, [r3, #4]
 8004e9c:	613b      	str	r3, [r7, #16]
 8004e9e:	687b      	ldr	r3, [r7, #4]
 8004ea0:	699b      	ldr	r3, [r3, #24]
 8004ea2:	60fb      	str	r3, [r7, #12]
 8004ea4:	68fb      	ldr	r3, [r7, #12]
 8004ea6:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8004eaa:	60fb      	str	r3, [r7, #12]
 8004eac:	68fb      	ldr	r3, [r7, #12]
 8004eae:	f023 0303 	bic.w	r3, r3, #3
 8004eb2:	60fb      	str	r3, [r7, #12]
 8004eb4:	683b      	ldr	r3, [r7, #0]
 8004eb6:	681b      	ldr	r3, [r3, #0]
 8004eb8:	68fa      	ldr	r2, [r7, #12]
 8004eba:	4313      	orrs	r3, r2
 8004ebc:	60fb      	str	r3, [r7, #12]
 8004ebe:	697b      	ldr	r3, [r7, #20]
 8004ec0:	f023 0302 	bic.w	r3, r3, #2
 8004ec4:	617b      	str	r3, [r7, #20]
 8004ec6:	683b      	ldr	r3, [r7, #0]
 8004ec8:	689b      	ldr	r3, [r3, #8]
 8004eca:	697a      	ldr	r2, [r7, #20]
 8004ecc:	4313      	orrs	r3, r2
 8004ece:	617b      	str	r3, [r7, #20]
 8004ed0:	687b      	ldr	r3, [r7, #4]
 8004ed2:	4a20      	ldr	r2, [pc, #128]	@ (8004f54 <TIM_OC1_SetConfig+0xd8>)
 8004ed4:	4293      	cmp	r3, r2
 8004ed6:	d003      	beq.n	8004ee0 <TIM_OC1_SetConfig+0x64>
 8004ed8:	687b      	ldr	r3, [r7, #4]
 8004eda:	4a1f      	ldr	r2, [pc, #124]	@ (8004f58 <TIM_OC1_SetConfig+0xdc>)
 8004edc:	4293      	cmp	r3, r2
 8004ede:	d10c      	bne.n	8004efa <TIM_OC1_SetConfig+0x7e>
 8004ee0:	697b      	ldr	r3, [r7, #20]
 8004ee2:	f023 0308 	bic.w	r3, r3, #8
 8004ee6:	617b      	str	r3, [r7, #20]
 8004ee8:	683b      	ldr	r3, [r7, #0]
 8004eea:	68db      	ldr	r3, [r3, #12]
 8004eec:	697a      	ldr	r2, [r7, #20]
 8004eee:	4313      	orrs	r3, r2
 8004ef0:	617b      	str	r3, [r7, #20]
 8004ef2:	697b      	ldr	r3, [r7, #20]
 8004ef4:	f023 0304 	bic.w	r3, r3, #4
 8004ef8:	617b      	str	r3, [r7, #20]
 8004efa:	687b      	ldr	r3, [r7, #4]
 8004efc:	4a15      	ldr	r2, [pc, #84]	@ (8004f54 <TIM_OC1_SetConfig+0xd8>)
 8004efe:	4293      	cmp	r3, r2
 8004f00:	d003      	beq.n	8004f0a <TIM_OC1_SetConfig+0x8e>
 8004f02:	687b      	ldr	r3, [r7, #4]
 8004f04:	4a14      	ldr	r2, [pc, #80]	@ (8004f58 <TIM_OC1_SetConfig+0xdc>)
 8004f06:	4293      	cmp	r3, r2
 8004f08:	d111      	bne.n	8004f2e <TIM_OC1_SetConfig+0xb2>
 8004f0a:	693b      	ldr	r3, [r7, #16]
 8004f0c:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8004f10:	613b      	str	r3, [r7, #16]
 8004f12:	693b      	ldr	r3, [r7, #16]
 8004f14:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8004f18:	613b      	str	r3, [r7, #16]
 8004f1a:	683b      	ldr	r3, [r7, #0]
 8004f1c:	695b      	ldr	r3, [r3, #20]
 8004f1e:	693a      	ldr	r2, [r7, #16]
 8004f20:	4313      	orrs	r3, r2
 8004f22:	613b      	str	r3, [r7, #16]
 8004f24:	683b      	ldr	r3, [r7, #0]
 8004f26:	699b      	ldr	r3, [r3, #24]
 8004f28:	693a      	ldr	r2, [r7, #16]
 8004f2a:	4313      	orrs	r3, r2
 8004f2c:	613b      	str	r3, [r7, #16]
 8004f2e:	687b      	ldr	r3, [r7, #4]
 8004f30:	693a      	ldr	r2, [r7, #16]
 8004f32:	605a      	str	r2, [r3, #4]
 8004f34:	687b      	ldr	r3, [r7, #4]
 8004f36:	68fa      	ldr	r2, [r7, #12]
 8004f38:	619a      	str	r2, [r3, #24]
 8004f3a:	683b      	ldr	r3, [r7, #0]
 8004f3c:	685a      	ldr	r2, [r3, #4]
 8004f3e:	687b      	ldr	r3, [r7, #4]
 8004f40:	635a      	str	r2, [r3, #52]	@ 0x34
 8004f42:	687b      	ldr	r3, [r7, #4]
 8004f44:	697a      	ldr	r2, [r7, #20]
 8004f46:	621a      	str	r2, [r3, #32]
 8004f48:	bf00      	nop
 8004f4a:	371c      	adds	r7, #28
 8004f4c:	46bd      	mov	sp, r7
 8004f4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f52:	4770      	bx	lr
 8004f54:	40010000 	.word	0x40010000
 8004f58:	40010400 	.word	0x40010400

08004f5c <TIM_OC2_SetConfig>:
 8004f5c:	b480      	push	{r7}
 8004f5e:	b087      	sub	sp, #28
 8004f60:	af00      	add	r7, sp, #0
 8004f62:	6078      	str	r0, [r7, #4]
 8004f64:	6039      	str	r1, [r7, #0]
 8004f66:	687b      	ldr	r3, [r7, #4]
 8004f68:	6a1b      	ldr	r3, [r3, #32]
 8004f6a:	617b      	str	r3, [r7, #20]
 8004f6c:	687b      	ldr	r3, [r7, #4]
 8004f6e:	6a1b      	ldr	r3, [r3, #32]
 8004f70:	f023 0210 	bic.w	r2, r3, #16
 8004f74:	687b      	ldr	r3, [r7, #4]
 8004f76:	621a      	str	r2, [r3, #32]
 8004f78:	687b      	ldr	r3, [r7, #4]
 8004f7a:	685b      	ldr	r3, [r3, #4]
 8004f7c:	613b      	str	r3, [r7, #16]
 8004f7e:	687b      	ldr	r3, [r7, #4]
 8004f80:	699b      	ldr	r3, [r3, #24]
 8004f82:	60fb      	str	r3, [r7, #12]
 8004f84:	68fb      	ldr	r3, [r7, #12]
 8004f86:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8004f8a:	60fb      	str	r3, [r7, #12]
 8004f8c:	68fb      	ldr	r3, [r7, #12]
 8004f8e:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8004f92:	60fb      	str	r3, [r7, #12]
 8004f94:	683b      	ldr	r3, [r7, #0]
 8004f96:	681b      	ldr	r3, [r3, #0]
 8004f98:	021b      	lsls	r3, r3, #8
 8004f9a:	68fa      	ldr	r2, [r7, #12]
 8004f9c:	4313      	orrs	r3, r2
 8004f9e:	60fb      	str	r3, [r7, #12]
 8004fa0:	697b      	ldr	r3, [r7, #20]
 8004fa2:	f023 0320 	bic.w	r3, r3, #32
 8004fa6:	617b      	str	r3, [r7, #20]
 8004fa8:	683b      	ldr	r3, [r7, #0]
 8004faa:	689b      	ldr	r3, [r3, #8]
 8004fac:	011b      	lsls	r3, r3, #4
 8004fae:	697a      	ldr	r2, [r7, #20]
 8004fb0:	4313      	orrs	r3, r2
 8004fb2:	617b      	str	r3, [r7, #20]
 8004fb4:	687b      	ldr	r3, [r7, #4]
 8004fb6:	4a22      	ldr	r2, [pc, #136]	@ (8005040 <TIM_OC2_SetConfig+0xe4>)
 8004fb8:	4293      	cmp	r3, r2
 8004fba:	d003      	beq.n	8004fc4 <TIM_OC2_SetConfig+0x68>
 8004fbc:	687b      	ldr	r3, [r7, #4]
 8004fbe:	4a21      	ldr	r2, [pc, #132]	@ (8005044 <TIM_OC2_SetConfig+0xe8>)
 8004fc0:	4293      	cmp	r3, r2
 8004fc2:	d10d      	bne.n	8004fe0 <TIM_OC2_SetConfig+0x84>
 8004fc4:	697b      	ldr	r3, [r7, #20]
 8004fc6:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8004fca:	617b      	str	r3, [r7, #20]
 8004fcc:	683b      	ldr	r3, [r7, #0]
 8004fce:	68db      	ldr	r3, [r3, #12]
 8004fd0:	011b      	lsls	r3, r3, #4
 8004fd2:	697a      	ldr	r2, [r7, #20]
 8004fd4:	4313      	orrs	r3, r2
 8004fd6:	617b      	str	r3, [r7, #20]
 8004fd8:	697b      	ldr	r3, [r7, #20]
 8004fda:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8004fde:	617b      	str	r3, [r7, #20]
 8004fe0:	687b      	ldr	r3, [r7, #4]
 8004fe2:	4a17      	ldr	r2, [pc, #92]	@ (8005040 <TIM_OC2_SetConfig+0xe4>)
 8004fe4:	4293      	cmp	r3, r2
 8004fe6:	d003      	beq.n	8004ff0 <TIM_OC2_SetConfig+0x94>
 8004fe8:	687b      	ldr	r3, [r7, #4]
 8004fea:	4a16      	ldr	r2, [pc, #88]	@ (8005044 <TIM_OC2_SetConfig+0xe8>)
 8004fec:	4293      	cmp	r3, r2
 8004fee:	d113      	bne.n	8005018 <TIM_OC2_SetConfig+0xbc>
 8004ff0:	693b      	ldr	r3, [r7, #16]
 8004ff2:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8004ff6:	613b      	str	r3, [r7, #16]
 8004ff8:	693b      	ldr	r3, [r7, #16]
 8004ffa:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8004ffe:	613b      	str	r3, [r7, #16]
 8005000:	683b      	ldr	r3, [r7, #0]
 8005002:	695b      	ldr	r3, [r3, #20]
 8005004:	009b      	lsls	r3, r3, #2
 8005006:	693a      	ldr	r2, [r7, #16]
 8005008:	4313      	orrs	r3, r2
 800500a:	613b      	str	r3, [r7, #16]
 800500c:	683b      	ldr	r3, [r7, #0]
 800500e:	699b      	ldr	r3, [r3, #24]
 8005010:	009b      	lsls	r3, r3, #2
 8005012:	693a      	ldr	r2, [r7, #16]
 8005014:	4313      	orrs	r3, r2
 8005016:	613b      	str	r3, [r7, #16]
 8005018:	687b      	ldr	r3, [r7, #4]
 800501a:	693a      	ldr	r2, [r7, #16]
 800501c:	605a      	str	r2, [r3, #4]
 800501e:	687b      	ldr	r3, [r7, #4]
 8005020:	68fa      	ldr	r2, [r7, #12]
 8005022:	619a      	str	r2, [r3, #24]
 8005024:	683b      	ldr	r3, [r7, #0]
 8005026:	685a      	ldr	r2, [r3, #4]
 8005028:	687b      	ldr	r3, [r7, #4]
 800502a:	639a      	str	r2, [r3, #56]	@ 0x38
 800502c:	687b      	ldr	r3, [r7, #4]
 800502e:	697a      	ldr	r2, [r7, #20]
 8005030:	621a      	str	r2, [r3, #32]
 8005032:	bf00      	nop
 8005034:	371c      	adds	r7, #28
 8005036:	46bd      	mov	sp, r7
 8005038:	f85d 7b04 	ldr.w	r7, [sp], #4
 800503c:	4770      	bx	lr
 800503e:	bf00      	nop
 8005040:	40010000 	.word	0x40010000
 8005044:	40010400 	.word	0x40010400

08005048 <TIM_OC3_SetConfig>:
 8005048:	b480      	push	{r7}
 800504a:	b087      	sub	sp, #28
 800504c:	af00      	add	r7, sp, #0
 800504e:	6078      	str	r0, [r7, #4]
 8005050:	6039      	str	r1, [r7, #0]
 8005052:	687b      	ldr	r3, [r7, #4]
 8005054:	6a1b      	ldr	r3, [r3, #32]
 8005056:	617b      	str	r3, [r7, #20]
 8005058:	687b      	ldr	r3, [r7, #4]
 800505a:	6a1b      	ldr	r3, [r3, #32]
 800505c:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8005060:	687b      	ldr	r3, [r7, #4]
 8005062:	621a      	str	r2, [r3, #32]
 8005064:	687b      	ldr	r3, [r7, #4]
 8005066:	685b      	ldr	r3, [r3, #4]
 8005068:	613b      	str	r3, [r7, #16]
 800506a:	687b      	ldr	r3, [r7, #4]
 800506c:	69db      	ldr	r3, [r3, #28]
 800506e:	60fb      	str	r3, [r7, #12]
 8005070:	68fb      	ldr	r3, [r7, #12]
 8005072:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8005076:	60fb      	str	r3, [r7, #12]
 8005078:	68fb      	ldr	r3, [r7, #12]
 800507a:	f023 0303 	bic.w	r3, r3, #3
 800507e:	60fb      	str	r3, [r7, #12]
 8005080:	683b      	ldr	r3, [r7, #0]
 8005082:	681b      	ldr	r3, [r3, #0]
 8005084:	68fa      	ldr	r2, [r7, #12]
 8005086:	4313      	orrs	r3, r2
 8005088:	60fb      	str	r3, [r7, #12]
 800508a:	697b      	ldr	r3, [r7, #20]
 800508c:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8005090:	617b      	str	r3, [r7, #20]
 8005092:	683b      	ldr	r3, [r7, #0]
 8005094:	689b      	ldr	r3, [r3, #8]
 8005096:	021b      	lsls	r3, r3, #8
 8005098:	697a      	ldr	r2, [r7, #20]
 800509a:	4313      	orrs	r3, r2
 800509c:	617b      	str	r3, [r7, #20]
 800509e:	687b      	ldr	r3, [r7, #4]
 80050a0:	4a21      	ldr	r2, [pc, #132]	@ (8005128 <TIM_OC3_SetConfig+0xe0>)
 80050a2:	4293      	cmp	r3, r2
 80050a4:	d003      	beq.n	80050ae <TIM_OC3_SetConfig+0x66>
 80050a6:	687b      	ldr	r3, [r7, #4]
 80050a8:	4a20      	ldr	r2, [pc, #128]	@ (800512c <TIM_OC3_SetConfig+0xe4>)
 80050aa:	4293      	cmp	r3, r2
 80050ac:	d10d      	bne.n	80050ca <TIM_OC3_SetConfig+0x82>
 80050ae:	697b      	ldr	r3, [r7, #20]
 80050b0:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 80050b4:	617b      	str	r3, [r7, #20]
 80050b6:	683b      	ldr	r3, [r7, #0]
 80050b8:	68db      	ldr	r3, [r3, #12]
 80050ba:	021b      	lsls	r3, r3, #8
 80050bc:	697a      	ldr	r2, [r7, #20]
 80050be:	4313      	orrs	r3, r2
 80050c0:	617b      	str	r3, [r7, #20]
 80050c2:	697b      	ldr	r3, [r7, #20]
 80050c4:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 80050c8:	617b      	str	r3, [r7, #20]
 80050ca:	687b      	ldr	r3, [r7, #4]
 80050cc:	4a16      	ldr	r2, [pc, #88]	@ (8005128 <TIM_OC3_SetConfig+0xe0>)
 80050ce:	4293      	cmp	r3, r2
 80050d0:	d003      	beq.n	80050da <TIM_OC3_SetConfig+0x92>
 80050d2:	687b      	ldr	r3, [r7, #4]
 80050d4:	4a15      	ldr	r2, [pc, #84]	@ (800512c <TIM_OC3_SetConfig+0xe4>)
 80050d6:	4293      	cmp	r3, r2
 80050d8:	d113      	bne.n	8005102 <TIM_OC3_SetConfig+0xba>
 80050da:	693b      	ldr	r3, [r7, #16]
 80050dc:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 80050e0:	613b      	str	r3, [r7, #16]
 80050e2:	693b      	ldr	r3, [r7, #16]
 80050e4:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 80050e8:	613b      	str	r3, [r7, #16]
 80050ea:	683b      	ldr	r3, [r7, #0]
 80050ec:	695b      	ldr	r3, [r3, #20]
 80050ee:	011b      	lsls	r3, r3, #4
 80050f0:	693a      	ldr	r2, [r7, #16]
 80050f2:	4313      	orrs	r3, r2
 80050f4:	613b      	str	r3, [r7, #16]
 80050f6:	683b      	ldr	r3, [r7, #0]
 80050f8:	699b      	ldr	r3, [r3, #24]
 80050fa:	011b      	lsls	r3, r3, #4
 80050fc:	693a      	ldr	r2, [r7, #16]
 80050fe:	4313      	orrs	r3, r2
 8005100:	613b      	str	r3, [r7, #16]
 8005102:	687b      	ldr	r3, [r7, #4]
 8005104:	693a      	ldr	r2, [r7, #16]
 8005106:	605a      	str	r2, [r3, #4]
 8005108:	687b      	ldr	r3, [r7, #4]
 800510a:	68fa      	ldr	r2, [r7, #12]
 800510c:	61da      	str	r2, [r3, #28]
 800510e:	683b      	ldr	r3, [r7, #0]
 8005110:	685a      	ldr	r2, [r3, #4]
 8005112:	687b      	ldr	r3, [r7, #4]
 8005114:	63da      	str	r2, [r3, #60]	@ 0x3c
 8005116:	687b      	ldr	r3, [r7, #4]
 8005118:	697a      	ldr	r2, [r7, #20]
 800511a:	621a      	str	r2, [r3, #32]
 800511c:	bf00      	nop
 800511e:	371c      	adds	r7, #28
 8005120:	46bd      	mov	sp, r7
 8005122:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005126:	4770      	bx	lr
 8005128:	40010000 	.word	0x40010000
 800512c:	40010400 	.word	0x40010400

08005130 <TIM_OC4_SetConfig>:
 8005130:	b480      	push	{r7}
 8005132:	b087      	sub	sp, #28
 8005134:	af00      	add	r7, sp, #0
 8005136:	6078      	str	r0, [r7, #4]
 8005138:	6039      	str	r1, [r7, #0]
 800513a:	687b      	ldr	r3, [r7, #4]
 800513c:	6a1b      	ldr	r3, [r3, #32]
 800513e:	613b      	str	r3, [r7, #16]
 8005140:	687b      	ldr	r3, [r7, #4]
 8005142:	6a1b      	ldr	r3, [r3, #32]
 8005144:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 8005148:	687b      	ldr	r3, [r7, #4]
 800514a:	621a      	str	r2, [r3, #32]
 800514c:	687b      	ldr	r3, [r7, #4]
 800514e:	685b      	ldr	r3, [r3, #4]
 8005150:	617b      	str	r3, [r7, #20]
 8005152:	687b      	ldr	r3, [r7, #4]
 8005154:	69db      	ldr	r3, [r3, #28]
 8005156:	60fb      	str	r3, [r7, #12]
 8005158:	68fb      	ldr	r3, [r7, #12]
 800515a:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800515e:	60fb      	str	r3, [r7, #12]
 8005160:	68fb      	ldr	r3, [r7, #12]
 8005162:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8005166:	60fb      	str	r3, [r7, #12]
 8005168:	683b      	ldr	r3, [r7, #0]
 800516a:	681b      	ldr	r3, [r3, #0]
 800516c:	021b      	lsls	r3, r3, #8
 800516e:	68fa      	ldr	r2, [r7, #12]
 8005170:	4313      	orrs	r3, r2
 8005172:	60fb      	str	r3, [r7, #12]
 8005174:	693b      	ldr	r3, [r7, #16]
 8005176:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 800517a:	613b      	str	r3, [r7, #16]
 800517c:	683b      	ldr	r3, [r7, #0]
 800517e:	689b      	ldr	r3, [r3, #8]
 8005180:	031b      	lsls	r3, r3, #12
 8005182:	693a      	ldr	r2, [r7, #16]
 8005184:	4313      	orrs	r3, r2
 8005186:	613b      	str	r3, [r7, #16]
 8005188:	687b      	ldr	r3, [r7, #4]
 800518a:	4a12      	ldr	r2, [pc, #72]	@ (80051d4 <TIM_OC4_SetConfig+0xa4>)
 800518c:	4293      	cmp	r3, r2
 800518e:	d003      	beq.n	8005198 <TIM_OC4_SetConfig+0x68>
 8005190:	687b      	ldr	r3, [r7, #4]
 8005192:	4a11      	ldr	r2, [pc, #68]	@ (80051d8 <TIM_OC4_SetConfig+0xa8>)
 8005194:	4293      	cmp	r3, r2
 8005196:	d109      	bne.n	80051ac <TIM_OC4_SetConfig+0x7c>
 8005198:	697b      	ldr	r3, [r7, #20]
 800519a:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 800519e:	617b      	str	r3, [r7, #20]
 80051a0:	683b      	ldr	r3, [r7, #0]
 80051a2:	695b      	ldr	r3, [r3, #20]
 80051a4:	019b      	lsls	r3, r3, #6
 80051a6:	697a      	ldr	r2, [r7, #20]
 80051a8:	4313      	orrs	r3, r2
 80051aa:	617b      	str	r3, [r7, #20]
 80051ac:	687b      	ldr	r3, [r7, #4]
 80051ae:	697a      	ldr	r2, [r7, #20]
 80051b0:	605a      	str	r2, [r3, #4]
 80051b2:	687b      	ldr	r3, [r7, #4]
 80051b4:	68fa      	ldr	r2, [r7, #12]
 80051b6:	61da      	str	r2, [r3, #28]
 80051b8:	683b      	ldr	r3, [r7, #0]
 80051ba:	685a      	ldr	r2, [r3, #4]
 80051bc:	687b      	ldr	r3, [r7, #4]
 80051be:	641a      	str	r2, [r3, #64]	@ 0x40
 80051c0:	687b      	ldr	r3, [r7, #4]
 80051c2:	693a      	ldr	r2, [r7, #16]
 80051c4:	621a      	str	r2, [r3, #32]
 80051c6:	bf00      	nop
 80051c8:	371c      	adds	r7, #28
 80051ca:	46bd      	mov	sp, r7
 80051cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80051d0:	4770      	bx	lr
 80051d2:	bf00      	nop
 80051d4:	40010000 	.word	0x40010000
 80051d8:	40010400 	.word	0x40010400

080051dc <TIM_TI1_ConfigInputStage>:
 80051dc:	b480      	push	{r7}
 80051de:	b087      	sub	sp, #28
 80051e0:	af00      	add	r7, sp, #0
 80051e2:	60f8      	str	r0, [r7, #12]
 80051e4:	60b9      	str	r1, [r7, #8]
 80051e6:	607a      	str	r2, [r7, #4]
 80051e8:	68fb      	ldr	r3, [r7, #12]
 80051ea:	6a1b      	ldr	r3, [r3, #32]
 80051ec:	617b      	str	r3, [r7, #20]
 80051ee:	68fb      	ldr	r3, [r7, #12]
 80051f0:	6a1b      	ldr	r3, [r3, #32]
 80051f2:	f023 0201 	bic.w	r2, r3, #1
 80051f6:	68fb      	ldr	r3, [r7, #12]
 80051f8:	621a      	str	r2, [r3, #32]
 80051fa:	68fb      	ldr	r3, [r7, #12]
 80051fc:	699b      	ldr	r3, [r3, #24]
 80051fe:	613b      	str	r3, [r7, #16]
 8005200:	693b      	ldr	r3, [r7, #16]
 8005202:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8005206:	613b      	str	r3, [r7, #16]
 8005208:	687b      	ldr	r3, [r7, #4]
 800520a:	011b      	lsls	r3, r3, #4
 800520c:	693a      	ldr	r2, [r7, #16]
 800520e:	4313      	orrs	r3, r2
 8005210:	613b      	str	r3, [r7, #16]
 8005212:	697b      	ldr	r3, [r7, #20]
 8005214:	f023 030a 	bic.w	r3, r3, #10
 8005218:	617b      	str	r3, [r7, #20]
 800521a:	697a      	ldr	r2, [r7, #20]
 800521c:	68bb      	ldr	r3, [r7, #8]
 800521e:	4313      	orrs	r3, r2
 8005220:	617b      	str	r3, [r7, #20]
 8005222:	68fb      	ldr	r3, [r7, #12]
 8005224:	693a      	ldr	r2, [r7, #16]
 8005226:	619a      	str	r2, [r3, #24]
 8005228:	68fb      	ldr	r3, [r7, #12]
 800522a:	697a      	ldr	r2, [r7, #20]
 800522c:	621a      	str	r2, [r3, #32]
 800522e:	bf00      	nop
 8005230:	371c      	adds	r7, #28
 8005232:	46bd      	mov	sp, r7
 8005234:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005238:	4770      	bx	lr

0800523a <TIM_TI2_ConfigInputStage>:
 800523a:	b480      	push	{r7}
 800523c:	b087      	sub	sp, #28
 800523e:	af00      	add	r7, sp, #0
 8005240:	60f8      	str	r0, [r7, #12]
 8005242:	60b9      	str	r1, [r7, #8]
 8005244:	607a      	str	r2, [r7, #4]
 8005246:	68fb      	ldr	r3, [r7, #12]
 8005248:	6a1b      	ldr	r3, [r3, #32]
 800524a:	617b      	str	r3, [r7, #20]
 800524c:	68fb      	ldr	r3, [r7, #12]
 800524e:	6a1b      	ldr	r3, [r3, #32]
 8005250:	f023 0210 	bic.w	r2, r3, #16
 8005254:	68fb      	ldr	r3, [r7, #12]
 8005256:	621a      	str	r2, [r3, #32]
 8005258:	68fb      	ldr	r3, [r7, #12]
 800525a:	699b      	ldr	r3, [r3, #24]
 800525c:	613b      	str	r3, [r7, #16]
 800525e:	693b      	ldr	r3, [r7, #16]
 8005260:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 8005264:	613b      	str	r3, [r7, #16]
 8005266:	687b      	ldr	r3, [r7, #4]
 8005268:	031b      	lsls	r3, r3, #12
 800526a:	693a      	ldr	r2, [r7, #16]
 800526c:	4313      	orrs	r3, r2
 800526e:	613b      	str	r3, [r7, #16]
 8005270:	697b      	ldr	r3, [r7, #20]
 8005272:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 8005276:	617b      	str	r3, [r7, #20]
 8005278:	68bb      	ldr	r3, [r7, #8]
 800527a:	011b      	lsls	r3, r3, #4
 800527c:	697a      	ldr	r2, [r7, #20]
 800527e:	4313      	orrs	r3, r2
 8005280:	617b      	str	r3, [r7, #20]
 8005282:	68fb      	ldr	r3, [r7, #12]
 8005284:	693a      	ldr	r2, [r7, #16]
 8005286:	619a      	str	r2, [r3, #24]
 8005288:	68fb      	ldr	r3, [r7, #12]
 800528a:	697a      	ldr	r2, [r7, #20]
 800528c:	621a      	str	r2, [r3, #32]
 800528e:	bf00      	nop
 8005290:	371c      	adds	r7, #28
 8005292:	46bd      	mov	sp, r7
 8005294:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005298:	4770      	bx	lr

0800529a <TIM_ITRx_SetConfig>:
 800529a:	b480      	push	{r7}
 800529c:	b085      	sub	sp, #20
 800529e:	af00      	add	r7, sp, #0
 80052a0:	6078      	str	r0, [r7, #4]
 80052a2:	6039      	str	r1, [r7, #0]
 80052a4:	687b      	ldr	r3, [r7, #4]
 80052a6:	689b      	ldr	r3, [r3, #8]
 80052a8:	60fb      	str	r3, [r7, #12]
 80052aa:	68fb      	ldr	r3, [r7, #12]
 80052ac:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80052b0:	60fb      	str	r3, [r7, #12]
 80052b2:	683a      	ldr	r2, [r7, #0]
 80052b4:	68fb      	ldr	r3, [r7, #12]
 80052b6:	4313      	orrs	r3, r2
 80052b8:	f043 0307 	orr.w	r3, r3, #7
 80052bc:	60fb      	str	r3, [r7, #12]
 80052be:	687b      	ldr	r3, [r7, #4]
 80052c0:	68fa      	ldr	r2, [r7, #12]
 80052c2:	609a      	str	r2, [r3, #8]
 80052c4:	bf00      	nop
 80052c6:	3714      	adds	r7, #20
 80052c8:	46bd      	mov	sp, r7
 80052ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80052ce:	4770      	bx	lr

080052d0 <TIM_ETR_SetConfig>:
 80052d0:	b480      	push	{r7}
 80052d2:	b087      	sub	sp, #28
 80052d4:	af00      	add	r7, sp, #0
 80052d6:	60f8      	str	r0, [r7, #12]
 80052d8:	60b9      	str	r1, [r7, #8]
 80052da:	607a      	str	r2, [r7, #4]
 80052dc:	603b      	str	r3, [r7, #0]
 80052de:	68fb      	ldr	r3, [r7, #12]
 80052e0:	689b      	ldr	r3, [r3, #8]
 80052e2:	617b      	str	r3, [r7, #20]
 80052e4:	697b      	ldr	r3, [r7, #20]
 80052e6:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 80052ea:	617b      	str	r3, [r7, #20]
 80052ec:	683b      	ldr	r3, [r7, #0]
 80052ee:	021a      	lsls	r2, r3, #8
 80052f0:	687b      	ldr	r3, [r7, #4]
 80052f2:	431a      	orrs	r2, r3
 80052f4:	68bb      	ldr	r3, [r7, #8]
 80052f6:	4313      	orrs	r3, r2
 80052f8:	697a      	ldr	r2, [r7, #20]
 80052fa:	4313      	orrs	r3, r2
 80052fc:	617b      	str	r3, [r7, #20]
 80052fe:	68fb      	ldr	r3, [r7, #12]
 8005300:	697a      	ldr	r2, [r7, #20]
 8005302:	609a      	str	r2, [r3, #8]
 8005304:	bf00      	nop
 8005306:	371c      	adds	r7, #28
 8005308:	46bd      	mov	sp, r7
 800530a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800530e:	4770      	bx	lr

08005310 <TIM_CCxChannelCmd>:
 8005310:	b480      	push	{r7}
 8005312:	b087      	sub	sp, #28
 8005314:	af00      	add	r7, sp, #0
 8005316:	60f8      	str	r0, [r7, #12]
 8005318:	60b9      	str	r1, [r7, #8]
 800531a:	607a      	str	r2, [r7, #4]
 800531c:	68bb      	ldr	r3, [r7, #8]
 800531e:	f003 031f 	and.w	r3, r3, #31
 8005322:	2201      	movs	r2, #1
 8005324:	fa02 f303 	lsl.w	r3, r2, r3
 8005328:	617b      	str	r3, [r7, #20]
 800532a:	68fb      	ldr	r3, [r7, #12]
 800532c:	6a1a      	ldr	r2, [r3, #32]
 800532e:	697b      	ldr	r3, [r7, #20]
 8005330:	43db      	mvns	r3, r3
 8005332:	401a      	ands	r2, r3
 8005334:	68fb      	ldr	r3, [r7, #12]
 8005336:	621a      	str	r2, [r3, #32]
 8005338:	68fb      	ldr	r3, [r7, #12]
 800533a:	6a1a      	ldr	r2, [r3, #32]
 800533c:	68bb      	ldr	r3, [r7, #8]
 800533e:	f003 031f 	and.w	r3, r3, #31
 8005342:	6879      	ldr	r1, [r7, #4]
 8005344:	fa01 f303 	lsl.w	r3, r1, r3
 8005348:	431a      	orrs	r2, r3
 800534a:	68fb      	ldr	r3, [r7, #12]
 800534c:	621a      	str	r2, [r3, #32]
 800534e:	bf00      	nop
 8005350:	371c      	adds	r7, #28
 8005352:	46bd      	mov	sp, r7
 8005354:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005358:	4770      	bx	lr
	...

0800535c <HAL_TIMEx_MasterConfigSynchronization>:
 800535c:	b480      	push	{r7}
 800535e:	b085      	sub	sp, #20
 8005360:	af00      	add	r7, sp, #0
 8005362:	6078      	str	r0, [r7, #4]
 8005364:	6039      	str	r1, [r7, #0]
 8005366:	687b      	ldr	r3, [r7, #4]
 8005368:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800536c:	2b01      	cmp	r3, #1
 800536e:	d101      	bne.n	8005374 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8005370:	2302      	movs	r3, #2
 8005372:	e05a      	b.n	800542a <HAL_TIMEx_MasterConfigSynchronization+0xce>
 8005374:	687b      	ldr	r3, [r7, #4]
 8005376:	2201      	movs	r2, #1
 8005378:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
 800537c:	687b      	ldr	r3, [r7, #4]
 800537e:	2202      	movs	r2, #2
 8005380:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
 8005384:	687b      	ldr	r3, [r7, #4]
 8005386:	681b      	ldr	r3, [r3, #0]
 8005388:	685b      	ldr	r3, [r3, #4]
 800538a:	60fb      	str	r3, [r7, #12]
 800538c:	687b      	ldr	r3, [r7, #4]
 800538e:	681b      	ldr	r3, [r3, #0]
 8005390:	689b      	ldr	r3, [r3, #8]
 8005392:	60bb      	str	r3, [r7, #8]
 8005394:	68fb      	ldr	r3, [r7, #12]
 8005396:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800539a:	60fb      	str	r3, [r7, #12]
 800539c:	683b      	ldr	r3, [r7, #0]
 800539e:	681b      	ldr	r3, [r3, #0]
 80053a0:	68fa      	ldr	r2, [r7, #12]
 80053a2:	4313      	orrs	r3, r2
 80053a4:	60fb      	str	r3, [r7, #12]
 80053a6:	687b      	ldr	r3, [r7, #4]
 80053a8:	681b      	ldr	r3, [r3, #0]
 80053aa:	68fa      	ldr	r2, [r7, #12]
 80053ac:	605a      	str	r2, [r3, #4]
 80053ae:	687b      	ldr	r3, [r7, #4]
 80053b0:	681b      	ldr	r3, [r3, #0]
 80053b2:	4a21      	ldr	r2, [pc, #132]	@ (8005438 <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 80053b4:	4293      	cmp	r3, r2
 80053b6:	d022      	beq.n	80053fe <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80053b8:	687b      	ldr	r3, [r7, #4]
 80053ba:	681b      	ldr	r3, [r3, #0]
 80053bc:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80053c0:	d01d      	beq.n	80053fe <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80053c2:	687b      	ldr	r3, [r7, #4]
 80053c4:	681b      	ldr	r3, [r3, #0]
 80053c6:	4a1d      	ldr	r2, [pc, #116]	@ (800543c <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 80053c8:	4293      	cmp	r3, r2
 80053ca:	d018      	beq.n	80053fe <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80053cc:	687b      	ldr	r3, [r7, #4]
 80053ce:	681b      	ldr	r3, [r3, #0]
 80053d0:	4a1b      	ldr	r2, [pc, #108]	@ (8005440 <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 80053d2:	4293      	cmp	r3, r2
 80053d4:	d013      	beq.n	80053fe <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80053d6:	687b      	ldr	r3, [r7, #4]
 80053d8:	681b      	ldr	r3, [r3, #0]
 80053da:	4a1a      	ldr	r2, [pc, #104]	@ (8005444 <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 80053dc:	4293      	cmp	r3, r2
 80053de:	d00e      	beq.n	80053fe <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80053e0:	687b      	ldr	r3, [r7, #4]
 80053e2:	681b      	ldr	r3, [r3, #0]
 80053e4:	4a18      	ldr	r2, [pc, #96]	@ (8005448 <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 80053e6:	4293      	cmp	r3, r2
 80053e8:	d009      	beq.n	80053fe <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80053ea:	687b      	ldr	r3, [r7, #4]
 80053ec:	681b      	ldr	r3, [r3, #0]
 80053ee:	4a17      	ldr	r2, [pc, #92]	@ (800544c <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 80053f0:	4293      	cmp	r3, r2
 80053f2:	d004      	beq.n	80053fe <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80053f4:	687b      	ldr	r3, [r7, #4]
 80053f6:	681b      	ldr	r3, [r3, #0]
 80053f8:	4a15      	ldr	r2, [pc, #84]	@ (8005450 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 80053fa:	4293      	cmp	r3, r2
 80053fc:	d10c      	bne.n	8005418 <HAL_TIMEx_MasterConfigSynchronization+0xbc>
 80053fe:	68bb      	ldr	r3, [r7, #8]
 8005400:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8005404:	60bb      	str	r3, [r7, #8]
 8005406:	683b      	ldr	r3, [r7, #0]
 8005408:	685b      	ldr	r3, [r3, #4]
 800540a:	68ba      	ldr	r2, [r7, #8]
 800540c:	4313      	orrs	r3, r2
 800540e:	60bb      	str	r3, [r7, #8]
 8005410:	687b      	ldr	r3, [r7, #4]
 8005412:	681b      	ldr	r3, [r3, #0]
 8005414:	68ba      	ldr	r2, [r7, #8]
 8005416:	609a      	str	r2, [r3, #8]
 8005418:	687b      	ldr	r3, [r7, #4]
 800541a:	2201      	movs	r2, #1
 800541c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
 8005420:	687b      	ldr	r3, [r7, #4]
 8005422:	2200      	movs	r2, #0
 8005424:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
 8005428:	2300      	movs	r3, #0
 800542a:	4618      	mov	r0, r3
 800542c:	3714      	adds	r7, #20
 800542e:	46bd      	mov	sp, r7
 8005430:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005434:	4770      	bx	lr
 8005436:	bf00      	nop
 8005438:	40010000 	.word	0x40010000
 800543c:	40000400 	.word	0x40000400
 8005440:	40000800 	.word	0x40000800
 8005444:	40000c00 	.word	0x40000c00
 8005448:	40010400 	.word	0x40010400
 800544c:	40014000 	.word	0x40014000
 8005450:	40001800 	.word	0x40001800

08005454 <HAL_TIMEx_ConfigBreakDeadTime>:
 8005454:	b480      	push	{r7}
 8005456:	b085      	sub	sp, #20
 8005458:	af00      	add	r7, sp, #0
 800545a:	6078      	str	r0, [r7, #4]
 800545c:	6039      	str	r1, [r7, #0]
 800545e:	2300      	movs	r3, #0
 8005460:	60fb      	str	r3, [r7, #12]
 8005462:	687b      	ldr	r3, [r7, #4]
 8005464:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8005468:	2b01      	cmp	r3, #1
 800546a:	d101      	bne.n	8005470 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 800546c:	2302      	movs	r3, #2
 800546e:	e03d      	b.n	80054ec <HAL_TIMEx_ConfigBreakDeadTime+0x98>
 8005470:	687b      	ldr	r3, [r7, #4]
 8005472:	2201      	movs	r2, #1
 8005474:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
 8005478:	68fb      	ldr	r3, [r7, #12]
 800547a:	f023 02ff 	bic.w	r2, r3, #255	@ 0xff
 800547e:	683b      	ldr	r3, [r7, #0]
 8005480:	68db      	ldr	r3, [r3, #12]
 8005482:	4313      	orrs	r3, r2
 8005484:	60fb      	str	r3, [r7, #12]
 8005486:	68fb      	ldr	r3, [r7, #12]
 8005488:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 800548c:	683b      	ldr	r3, [r7, #0]
 800548e:	689b      	ldr	r3, [r3, #8]
 8005490:	4313      	orrs	r3, r2
 8005492:	60fb      	str	r3, [r7, #12]
 8005494:	68fb      	ldr	r3, [r7, #12]
 8005496:	f423 6280 	bic.w	r2, r3, #1024	@ 0x400
 800549a:	683b      	ldr	r3, [r7, #0]
 800549c:	685b      	ldr	r3, [r3, #4]
 800549e:	4313      	orrs	r3, r2
 80054a0:	60fb      	str	r3, [r7, #12]
 80054a2:	68fb      	ldr	r3, [r7, #12]
 80054a4:	f423 6200 	bic.w	r2, r3, #2048	@ 0x800
 80054a8:	683b      	ldr	r3, [r7, #0]
 80054aa:	681b      	ldr	r3, [r3, #0]
 80054ac:	4313      	orrs	r3, r2
 80054ae:	60fb      	str	r3, [r7, #12]
 80054b0:	68fb      	ldr	r3, [r7, #12]
 80054b2:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 80054b6:	683b      	ldr	r3, [r7, #0]
 80054b8:	691b      	ldr	r3, [r3, #16]
 80054ba:	4313      	orrs	r3, r2
 80054bc:	60fb      	str	r3, [r7, #12]
 80054be:	68fb      	ldr	r3, [r7, #12]
 80054c0:	f423 5200 	bic.w	r2, r3, #8192	@ 0x2000
 80054c4:	683b      	ldr	r3, [r7, #0]
 80054c6:	695b      	ldr	r3, [r3, #20]
 80054c8:	4313      	orrs	r3, r2
 80054ca:	60fb      	str	r3, [r7, #12]
 80054cc:	68fb      	ldr	r3, [r7, #12]
 80054ce:	f423 4280 	bic.w	r2, r3, #16384	@ 0x4000
 80054d2:	683b      	ldr	r3, [r7, #0]
 80054d4:	69db      	ldr	r3, [r3, #28]
 80054d6:	4313      	orrs	r3, r2
 80054d8:	60fb      	str	r3, [r7, #12]
 80054da:	687b      	ldr	r3, [r7, #4]
 80054dc:	681b      	ldr	r3, [r3, #0]
 80054de:	68fa      	ldr	r2, [r7, #12]
 80054e0:	645a      	str	r2, [r3, #68]	@ 0x44
 80054e2:	687b      	ldr	r3, [r7, #4]
 80054e4:	2200      	movs	r2, #0
 80054e6:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
 80054ea:	2300      	movs	r3, #0
 80054ec:	4618      	mov	r0, r3
 80054ee:	3714      	adds	r7, #20
 80054f0:	46bd      	mov	sp, r7
 80054f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80054f6:	4770      	bx	lr

080054f8 <HAL_TIMEx_CommutCallback>:
 80054f8:	b480      	push	{r7}
 80054fa:	b083      	sub	sp, #12
 80054fc:	af00      	add	r7, sp, #0
 80054fe:	6078      	str	r0, [r7, #4]
 8005500:	bf00      	nop
 8005502:	370c      	adds	r7, #12
 8005504:	46bd      	mov	sp, r7
 8005506:	f85d 7b04 	ldr.w	r7, [sp], #4
 800550a:	4770      	bx	lr

0800550c <HAL_TIMEx_BreakCallback>:
 800550c:	b480      	push	{r7}
 800550e:	b083      	sub	sp, #12
 8005510:	af00      	add	r7, sp, #0
 8005512:	6078      	str	r0, [r7, #4]
 8005514:	bf00      	nop
 8005516:	370c      	adds	r7, #12
 8005518:	46bd      	mov	sp, r7
 800551a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800551e:	4770      	bx	lr

08005520 <HAL_UART_Init>:
 8005520:	b580      	push	{r7, lr}
 8005522:	b082      	sub	sp, #8
 8005524:	af00      	add	r7, sp, #0
 8005526:	6078      	str	r0, [r7, #4]
 8005528:	687b      	ldr	r3, [r7, #4]
 800552a:	2b00      	cmp	r3, #0
 800552c:	d101      	bne.n	8005532 <HAL_UART_Init+0x12>
 800552e:	2301      	movs	r3, #1
 8005530:	e042      	b.n	80055b8 <HAL_UART_Init+0x98>
 8005532:	687b      	ldr	r3, [r7, #4]
 8005534:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8005538:	b2db      	uxtb	r3, r3
 800553a:	2b00      	cmp	r3, #0
 800553c:	d106      	bne.n	800554c <HAL_UART_Init+0x2c>
 800553e:	687b      	ldr	r3, [r7, #4]
 8005540:	2200      	movs	r2, #0
 8005542:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8005546:	6878      	ldr	r0, [r7, #4]
 8005548:	f7fc fc18 	bl	8001d7c <HAL_UART_MspInit>
 800554c:	687b      	ldr	r3, [r7, #4]
 800554e:	2224      	movs	r2, #36	@ 0x24
 8005550:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 8005554:	687b      	ldr	r3, [r7, #4]
 8005556:	681b      	ldr	r3, [r3, #0]
 8005558:	68da      	ldr	r2, [r3, #12]
 800555a:	687b      	ldr	r3, [r7, #4]
 800555c:	681b      	ldr	r3, [r3, #0]
 800555e:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8005562:	60da      	str	r2, [r3, #12]
 8005564:	6878      	ldr	r0, [r7, #4]
 8005566:	f000 fd11 	bl	8005f8c <UART_SetConfig>
 800556a:	687b      	ldr	r3, [r7, #4]
 800556c:	681b      	ldr	r3, [r3, #0]
 800556e:	691a      	ldr	r2, [r3, #16]
 8005570:	687b      	ldr	r3, [r7, #4]
 8005572:	681b      	ldr	r3, [r3, #0]
 8005574:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8005578:	611a      	str	r2, [r3, #16]
 800557a:	687b      	ldr	r3, [r7, #4]
 800557c:	681b      	ldr	r3, [r3, #0]
 800557e:	695a      	ldr	r2, [r3, #20]
 8005580:	687b      	ldr	r3, [r7, #4]
 8005582:	681b      	ldr	r3, [r3, #0]
 8005584:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8005588:	615a      	str	r2, [r3, #20]
 800558a:	687b      	ldr	r3, [r7, #4]
 800558c:	681b      	ldr	r3, [r3, #0]
 800558e:	68da      	ldr	r2, [r3, #12]
 8005590:	687b      	ldr	r3, [r7, #4]
 8005592:	681b      	ldr	r3, [r3, #0]
 8005594:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8005598:	60da      	str	r2, [r3, #12]
 800559a:	687b      	ldr	r3, [r7, #4]
 800559c:	2200      	movs	r2, #0
 800559e:	645a      	str	r2, [r3, #68]	@ 0x44
 80055a0:	687b      	ldr	r3, [r7, #4]
 80055a2:	2220      	movs	r2, #32
 80055a4:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 80055a8:	687b      	ldr	r3, [r7, #4]
 80055aa:	2220      	movs	r2, #32
 80055ac:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 80055b0:	687b      	ldr	r3, [r7, #4]
 80055b2:	2200      	movs	r2, #0
 80055b4:	635a      	str	r2, [r3, #52]	@ 0x34
 80055b6:	2300      	movs	r3, #0
 80055b8:	4618      	mov	r0, r3
 80055ba:	3708      	adds	r7, #8
 80055bc:	46bd      	mov	sp, r7
 80055be:	bd80      	pop	{r7, pc}

080055c0 <HAL_UART_Transmit_IT>:
 80055c0:	b480      	push	{r7}
 80055c2:	b085      	sub	sp, #20
 80055c4:	af00      	add	r7, sp, #0
 80055c6:	60f8      	str	r0, [r7, #12]
 80055c8:	60b9      	str	r1, [r7, #8]
 80055ca:	4613      	mov	r3, r2
 80055cc:	80fb      	strh	r3, [r7, #6]
 80055ce:	68fb      	ldr	r3, [r7, #12]
 80055d0:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80055d4:	b2db      	uxtb	r3, r3
 80055d6:	2b20      	cmp	r3, #32
 80055d8:	d121      	bne.n	800561e <HAL_UART_Transmit_IT+0x5e>
 80055da:	68bb      	ldr	r3, [r7, #8]
 80055dc:	2b00      	cmp	r3, #0
 80055de:	d002      	beq.n	80055e6 <HAL_UART_Transmit_IT+0x26>
 80055e0:	88fb      	ldrh	r3, [r7, #6]
 80055e2:	2b00      	cmp	r3, #0
 80055e4:	d101      	bne.n	80055ea <HAL_UART_Transmit_IT+0x2a>
 80055e6:	2301      	movs	r3, #1
 80055e8:	e01a      	b.n	8005620 <HAL_UART_Transmit_IT+0x60>
 80055ea:	68fb      	ldr	r3, [r7, #12]
 80055ec:	68ba      	ldr	r2, [r7, #8]
 80055ee:	621a      	str	r2, [r3, #32]
 80055f0:	68fb      	ldr	r3, [r7, #12]
 80055f2:	88fa      	ldrh	r2, [r7, #6]
 80055f4:	849a      	strh	r2, [r3, #36]	@ 0x24
 80055f6:	68fb      	ldr	r3, [r7, #12]
 80055f8:	88fa      	ldrh	r2, [r7, #6]
 80055fa:	84da      	strh	r2, [r3, #38]	@ 0x26
 80055fc:	68fb      	ldr	r3, [r7, #12]
 80055fe:	2200      	movs	r2, #0
 8005600:	645a      	str	r2, [r3, #68]	@ 0x44
 8005602:	68fb      	ldr	r3, [r7, #12]
 8005604:	2221      	movs	r2, #33	@ 0x21
 8005606:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 800560a:	68fb      	ldr	r3, [r7, #12]
 800560c:	681b      	ldr	r3, [r3, #0]
 800560e:	68da      	ldr	r2, [r3, #12]
 8005610:	68fb      	ldr	r3, [r7, #12]
 8005612:	681b      	ldr	r3, [r3, #0]
 8005614:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
 8005618:	60da      	str	r2, [r3, #12]
 800561a:	2300      	movs	r3, #0
 800561c:	e000      	b.n	8005620 <HAL_UART_Transmit_IT+0x60>
 800561e:	2302      	movs	r3, #2
 8005620:	4618      	mov	r0, r3
 8005622:	3714      	adds	r7, #20
 8005624:	46bd      	mov	sp, r7
 8005626:	f85d 7b04 	ldr.w	r7, [sp], #4
 800562a:	4770      	bx	lr

0800562c <HAL_UART_Receive_IT>:
 800562c:	b580      	push	{r7, lr}
 800562e:	b084      	sub	sp, #16
 8005630:	af00      	add	r7, sp, #0
 8005632:	60f8      	str	r0, [r7, #12]
 8005634:	60b9      	str	r1, [r7, #8]
 8005636:	4613      	mov	r3, r2
 8005638:	80fb      	strh	r3, [r7, #6]
 800563a:	68fb      	ldr	r3, [r7, #12]
 800563c:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8005640:	b2db      	uxtb	r3, r3
 8005642:	2b20      	cmp	r3, #32
 8005644:	d112      	bne.n	800566c <HAL_UART_Receive_IT+0x40>
 8005646:	68bb      	ldr	r3, [r7, #8]
 8005648:	2b00      	cmp	r3, #0
 800564a:	d002      	beq.n	8005652 <HAL_UART_Receive_IT+0x26>
 800564c:	88fb      	ldrh	r3, [r7, #6]
 800564e:	2b00      	cmp	r3, #0
 8005650:	d101      	bne.n	8005656 <HAL_UART_Receive_IT+0x2a>
 8005652:	2301      	movs	r3, #1
 8005654:	e00b      	b.n	800566e <HAL_UART_Receive_IT+0x42>
 8005656:	68fb      	ldr	r3, [r7, #12]
 8005658:	2200      	movs	r2, #0
 800565a:	631a      	str	r2, [r3, #48]	@ 0x30
 800565c:	88fb      	ldrh	r3, [r7, #6]
 800565e:	461a      	mov	r2, r3
 8005660:	68b9      	ldr	r1, [r7, #8]
 8005662:	68f8      	ldr	r0, [r7, #12]
 8005664:	f000 faba 	bl	8005bdc <UART_Start_Receive_IT>
 8005668:	4603      	mov	r3, r0
 800566a:	e000      	b.n	800566e <HAL_UART_Receive_IT+0x42>
 800566c:	2302      	movs	r3, #2
 800566e:	4618      	mov	r0, r3
 8005670:	3710      	adds	r7, #16
 8005672:	46bd      	mov	sp, r7
 8005674:	bd80      	pop	{r7, pc}
	...

08005678 <HAL_UART_IRQHandler>:
 8005678:	b580      	push	{r7, lr}
 800567a:	b0ba      	sub	sp, #232	@ 0xe8
 800567c:	af00      	add	r7, sp, #0
 800567e:	6078      	str	r0, [r7, #4]
 8005680:	687b      	ldr	r3, [r7, #4]
 8005682:	681b      	ldr	r3, [r3, #0]
 8005684:	681b      	ldr	r3, [r3, #0]
 8005686:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 800568a:	687b      	ldr	r3, [r7, #4]
 800568c:	681b      	ldr	r3, [r3, #0]
 800568e:	68db      	ldr	r3, [r3, #12]
 8005690:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 8005694:	687b      	ldr	r3, [r7, #4]
 8005696:	681b      	ldr	r3, [r3, #0]
 8005698:	695b      	ldr	r3, [r3, #20]
 800569a:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
 800569e:	2300      	movs	r3, #0
 80056a0:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 80056a4:	2300      	movs	r3, #0
 80056a6:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
 80056aa:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80056ae:	f003 030f 	and.w	r3, r3, #15
 80056b2:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 80056b6:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 80056ba:	2b00      	cmp	r3, #0
 80056bc:	d10f      	bne.n	80056de <HAL_UART_IRQHandler+0x66>
 80056be:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80056c2:	f003 0320 	and.w	r3, r3, #32
 80056c6:	2b00      	cmp	r3, #0
 80056c8:	d009      	beq.n	80056de <HAL_UART_IRQHandler+0x66>
 80056ca:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80056ce:	f003 0320 	and.w	r3, r3, #32
 80056d2:	2b00      	cmp	r3, #0
 80056d4:	d003      	beq.n	80056de <HAL_UART_IRQHandler+0x66>
 80056d6:	6878      	ldr	r0, [r7, #4]
 80056d8:	f000 fb99 	bl	8005e0e <UART_Receive_IT>
 80056dc:	e25b      	b.n	8005b96 <HAL_UART_IRQHandler+0x51e>
 80056de:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 80056e2:	2b00      	cmp	r3, #0
 80056e4:	f000 80de 	beq.w	80058a4 <HAL_UART_IRQHandler+0x22c>
 80056e8:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 80056ec:	f003 0301 	and.w	r3, r3, #1
 80056f0:	2b00      	cmp	r3, #0
 80056f2:	d106      	bne.n	8005702 <HAL_UART_IRQHandler+0x8a>
 80056f4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80056f8:	f403 7390 	and.w	r3, r3, #288	@ 0x120
 80056fc:	2b00      	cmp	r3, #0
 80056fe:	f000 80d1 	beq.w	80058a4 <HAL_UART_IRQHandler+0x22c>
 8005702:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8005706:	f003 0301 	and.w	r3, r3, #1
 800570a:	2b00      	cmp	r3, #0
 800570c:	d00b      	beq.n	8005726 <HAL_UART_IRQHandler+0xae>
 800570e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8005712:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8005716:	2b00      	cmp	r3, #0
 8005718:	d005      	beq.n	8005726 <HAL_UART_IRQHandler+0xae>
 800571a:	687b      	ldr	r3, [r7, #4]
 800571c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800571e:	f043 0201 	orr.w	r2, r3, #1
 8005722:	687b      	ldr	r3, [r7, #4]
 8005724:	645a      	str	r2, [r3, #68]	@ 0x44
 8005726:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800572a:	f003 0304 	and.w	r3, r3, #4
 800572e:	2b00      	cmp	r3, #0
 8005730:	d00b      	beq.n	800574a <HAL_UART_IRQHandler+0xd2>
 8005732:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8005736:	f003 0301 	and.w	r3, r3, #1
 800573a:	2b00      	cmp	r3, #0
 800573c:	d005      	beq.n	800574a <HAL_UART_IRQHandler+0xd2>
 800573e:	687b      	ldr	r3, [r7, #4]
 8005740:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005742:	f043 0202 	orr.w	r2, r3, #2
 8005746:	687b      	ldr	r3, [r7, #4]
 8005748:	645a      	str	r2, [r3, #68]	@ 0x44
 800574a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800574e:	f003 0302 	and.w	r3, r3, #2
 8005752:	2b00      	cmp	r3, #0
 8005754:	d00b      	beq.n	800576e <HAL_UART_IRQHandler+0xf6>
 8005756:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800575a:	f003 0301 	and.w	r3, r3, #1
 800575e:	2b00      	cmp	r3, #0
 8005760:	d005      	beq.n	800576e <HAL_UART_IRQHandler+0xf6>
 8005762:	687b      	ldr	r3, [r7, #4]
 8005764:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005766:	f043 0204 	orr.w	r2, r3, #4
 800576a:	687b      	ldr	r3, [r7, #4]
 800576c:	645a      	str	r2, [r3, #68]	@ 0x44
 800576e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8005772:	f003 0308 	and.w	r3, r3, #8
 8005776:	2b00      	cmp	r3, #0
 8005778:	d011      	beq.n	800579e <HAL_UART_IRQHandler+0x126>
 800577a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800577e:	f003 0320 	and.w	r3, r3, #32
 8005782:	2b00      	cmp	r3, #0
 8005784:	d105      	bne.n	8005792 <HAL_UART_IRQHandler+0x11a>
 8005786:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800578a:	f003 0301 	and.w	r3, r3, #1
 800578e:	2b00      	cmp	r3, #0
 8005790:	d005      	beq.n	800579e <HAL_UART_IRQHandler+0x126>
 8005792:	687b      	ldr	r3, [r7, #4]
 8005794:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005796:	f043 0208 	orr.w	r2, r3, #8
 800579a:	687b      	ldr	r3, [r7, #4]
 800579c:	645a      	str	r2, [r3, #68]	@ 0x44
 800579e:	687b      	ldr	r3, [r7, #4]
 80057a0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80057a2:	2b00      	cmp	r3, #0
 80057a4:	f000 81f2 	beq.w	8005b8c <HAL_UART_IRQHandler+0x514>
 80057a8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80057ac:	f003 0320 	and.w	r3, r3, #32
 80057b0:	2b00      	cmp	r3, #0
 80057b2:	d008      	beq.n	80057c6 <HAL_UART_IRQHandler+0x14e>
 80057b4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80057b8:	f003 0320 	and.w	r3, r3, #32
 80057bc:	2b00      	cmp	r3, #0
 80057be:	d002      	beq.n	80057c6 <HAL_UART_IRQHandler+0x14e>
 80057c0:	6878      	ldr	r0, [r7, #4]
 80057c2:	f000 fb24 	bl	8005e0e <UART_Receive_IT>
 80057c6:	687b      	ldr	r3, [r7, #4]
 80057c8:	681b      	ldr	r3, [r3, #0]
 80057ca:	695b      	ldr	r3, [r3, #20]
 80057cc:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80057d0:	2b40      	cmp	r3, #64	@ 0x40
 80057d2:	bf0c      	ite	eq
 80057d4:	2301      	moveq	r3, #1
 80057d6:	2300      	movne	r3, #0
 80057d8:	b2db      	uxtb	r3, r3
 80057da:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
 80057de:	687b      	ldr	r3, [r7, #4]
 80057e0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80057e2:	f003 0308 	and.w	r3, r3, #8
 80057e6:	2b00      	cmp	r3, #0
 80057e8:	d103      	bne.n	80057f2 <HAL_UART_IRQHandler+0x17a>
 80057ea:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 80057ee:	2b00      	cmp	r3, #0
 80057f0:	d04f      	beq.n	8005892 <HAL_UART_IRQHandler+0x21a>
 80057f2:	6878      	ldr	r0, [r7, #4]
 80057f4:	f000 fa2c 	bl	8005c50 <UART_EndRxTransfer>
 80057f8:	687b      	ldr	r3, [r7, #4]
 80057fa:	681b      	ldr	r3, [r3, #0]
 80057fc:	695b      	ldr	r3, [r3, #20]
 80057fe:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005802:	2b40      	cmp	r3, #64	@ 0x40
 8005804:	d141      	bne.n	800588a <HAL_UART_IRQHandler+0x212>
 8005806:	687b      	ldr	r3, [r7, #4]
 8005808:	681b      	ldr	r3, [r3, #0]
 800580a:	3314      	adds	r3, #20
 800580c:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 8005810:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8005814:	e853 3f00 	ldrex	r3, [r3]
 8005818:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 800581c:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8005820:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8005824:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8005828:	687b      	ldr	r3, [r7, #4]
 800582a:	681b      	ldr	r3, [r3, #0]
 800582c:	3314      	adds	r3, #20
 800582e:	f8d7 20d0 	ldr.w	r2, [r7, #208]	@ 0xd0
 8005832:	f8c7 20a8 	str.w	r2, [r7, #168]	@ 0xa8
 8005836:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
 800583a:	f8d7 10a4 	ldr.w	r1, [r7, #164]	@ 0xa4
 800583e:	f8d7 20a8 	ldr.w	r2, [r7, #168]	@ 0xa8
 8005842:	e841 2300 	strex	r3, r2, [r1]
 8005846:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 800584a:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 800584e:	2b00      	cmp	r3, #0
 8005850:	d1d9      	bne.n	8005806 <HAL_UART_IRQHandler+0x18e>
 8005852:	687b      	ldr	r3, [r7, #4]
 8005854:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005856:	2b00      	cmp	r3, #0
 8005858:	d013      	beq.n	8005882 <HAL_UART_IRQHandler+0x20a>
 800585a:	687b      	ldr	r3, [r7, #4]
 800585c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800585e:	4a7e      	ldr	r2, [pc, #504]	@ (8005a58 <HAL_UART_IRQHandler+0x3e0>)
 8005860:	651a      	str	r2, [r3, #80]	@ 0x50
 8005862:	687b      	ldr	r3, [r7, #4]
 8005864:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005866:	4618      	mov	r0, r3
 8005868:	f7fd fb4e 	bl	8002f08 <HAL_DMA_Abort_IT>
 800586c:	4603      	mov	r3, r0
 800586e:	2b00      	cmp	r3, #0
 8005870:	d016      	beq.n	80058a0 <HAL_UART_IRQHandler+0x228>
 8005872:	687b      	ldr	r3, [r7, #4]
 8005874:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005876:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8005878:	687a      	ldr	r2, [r7, #4]
 800587a:	6bd2      	ldr	r2, [r2, #60]	@ 0x3c
 800587c:	4610      	mov	r0, r2
 800587e:	4798      	blx	r3
 8005880:	e00e      	b.n	80058a0 <HAL_UART_IRQHandler+0x228>
 8005882:	6878      	ldr	r0, [r7, #4]
 8005884:	f000 f994 	bl	8005bb0 <HAL_UART_ErrorCallback>
 8005888:	e00a      	b.n	80058a0 <HAL_UART_IRQHandler+0x228>
 800588a:	6878      	ldr	r0, [r7, #4]
 800588c:	f000 f990 	bl	8005bb0 <HAL_UART_ErrorCallback>
 8005890:	e006      	b.n	80058a0 <HAL_UART_IRQHandler+0x228>
 8005892:	6878      	ldr	r0, [r7, #4]
 8005894:	f000 f98c 	bl	8005bb0 <HAL_UART_ErrorCallback>
 8005898:	687b      	ldr	r3, [r7, #4]
 800589a:	2200      	movs	r2, #0
 800589c:	645a      	str	r2, [r3, #68]	@ 0x44
 800589e:	e175      	b.n	8005b8c <HAL_UART_IRQHandler+0x514>
 80058a0:	bf00      	nop
 80058a2:	e173      	b.n	8005b8c <HAL_UART_IRQHandler+0x514>
 80058a4:	687b      	ldr	r3, [r7, #4]
 80058a6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80058a8:	2b01      	cmp	r3, #1
 80058aa:	f040 814f 	bne.w	8005b4c <HAL_UART_IRQHandler+0x4d4>
 80058ae:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80058b2:	f003 0310 	and.w	r3, r3, #16
 80058b6:	2b00      	cmp	r3, #0
 80058b8:	f000 8148 	beq.w	8005b4c <HAL_UART_IRQHandler+0x4d4>
 80058bc:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80058c0:	f003 0310 	and.w	r3, r3, #16
 80058c4:	2b00      	cmp	r3, #0
 80058c6:	f000 8141 	beq.w	8005b4c <HAL_UART_IRQHandler+0x4d4>
 80058ca:	2300      	movs	r3, #0
 80058cc:	60bb      	str	r3, [r7, #8]
 80058ce:	687b      	ldr	r3, [r7, #4]
 80058d0:	681b      	ldr	r3, [r3, #0]
 80058d2:	681b      	ldr	r3, [r3, #0]
 80058d4:	60bb      	str	r3, [r7, #8]
 80058d6:	687b      	ldr	r3, [r7, #4]
 80058d8:	681b      	ldr	r3, [r3, #0]
 80058da:	685b      	ldr	r3, [r3, #4]
 80058dc:	60bb      	str	r3, [r7, #8]
 80058de:	68bb      	ldr	r3, [r7, #8]
 80058e0:	687b      	ldr	r3, [r7, #4]
 80058e2:	681b      	ldr	r3, [r3, #0]
 80058e4:	695b      	ldr	r3, [r3, #20]
 80058e6:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80058ea:	2b40      	cmp	r3, #64	@ 0x40
 80058ec:	f040 80b6 	bne.w	8005a5c <HAL_UART_IRQHandler+0x3e4>
 80058f0:	687b      	ldr	r3, [r7, #4]
 80058f2:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80058f4:	681b      	ldr	r3, [r3, #0]
 80058f6:	685b      	ldr	r3, [r3, #4]
 80058f8:	f8a7 30be 	strh.w	r3, [r7, #190]	@ 0xbe
 80058fc:	f8b7 30be 	ldrh.w	r3, [r7, #190]	@ 0xbe
 8005900:	2b00      	cmp	r3, #0
 8005902:	f000 8145 	beq.w	8005b90 <HAL_UART_IRQHandler+0x518>
 8005906:	687b      	ldr	r3, [r7, #4]
 8005908:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 800590a:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 800590e:	429a      	cmp	r2, r3
 8005910:	f080 813e 	bcs.w	8005b90 <HAL_UART_IRQHandler+0x518>
 8005914:	687b      	ldr	r3, [r7, #4]
 8005916:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 800591a:	85da      	strh	r2, [r3, #46]	@ 0x2e
 800591c:	687b      	ldr	r3, [r7, #4]
 800591e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005920:	69db      	ldr	r3, [r3, #28]
 8005922:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8005926:	f000 8088 	beq.w	8005a3a <HAL_UART_IRQHandler+0x3c2>
 800592a:	687b      	ldr	r3, [r7, #4]
 800592c:	681b      	ldr	r3, [r3, #0]
 800592e:	330c      	adds	r3, #12
 8005930:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 8005934:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8005938:	e853 3f00 	ldrex	r3, [r3]
 800593c:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 8005940:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8005944:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8005948:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 800594c:	687b      	ldr	r3, [r7, #4]
 800594e:	681b      	ldr	r3, [r3, #0]
 8005950:	330c      	adds	r3, #12
 8005952:	f8d7 20b8 	ldr.w	r2, [r7, #184]	@ 0xb8
 8005956:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 800595a:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 800595e:	f8d7 1090 	ldr.w	r1, [r7, #144]	@ 0x90
 8005962:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 8005966:	e841 2300 	strex	r3, r2, [r1]
 800596a:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
 800596e:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8005972:	2b00      	cmp	r3, #0
 8005974:	d1d9      	bne.n	800592a <HAL_UART_IRQHandler+0x2b2>
 8005976:	687b      	ldr	r3, [r7, #4]
 8005978:	681b      	ldr	r3, [r3, #0]
 800597a:	3314      	adds	r3, #20
 800597c:	677b      	str	r3, [r7, #116]	@ 0x74
 800597e:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8005980:	e853 3f00 	ldrex	r3, [r3]
 8005984:	673b      	str	r3, [r7, #112]	@ 0x70
 8005986:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8005988:	f023 0301 	bic.w	r3, r3, #1
 800598c:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8005990:	687b      	ldr	r3, [r7, #4]
 8005992:	681b      	ldr	r3, [r3, #0]
 8005994:	3314      	adds	r3, #20
 8005996:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 800599a:	f8c7 2080 	str.w	r2, [r7, #128]	@ 0x80
 800599e:	67fb      	str	r3, [r7, #124]	@ 0x7c
 80059a0:	6ff9      	ldr	r1, [r7, #124]	@ 0x7c
 80059a2:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 80059a6:	e841 2300 	strex	r3, r2, [r1]
 80059aa:	67bb      	str	r3, [r7, #120]	@ 0x78
 80059ac:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 80059ae:	2b00      	cmp	r3, #0
 80059b0:	d1e1      	bne.n	8005976 <HAL_UART_IRQHandler+0x2fe>
 80059b2:	687b      	ldr	r3, [r7, #4]
 80059b4:	681b      	ldr	r3, [r3, #0]
 80059b6:	3314      	adds	r3, #20
 80059b8:	663b      	str	r3, [r7, #96]	@ 0x60
 80059ba:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 80059bc:	e853 3f00 	ldrex	r3, [r3]
 80059c0:	65fb      	str	r3, [r7, #92]	@ 0x5c
 80059c2:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 80059c4:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80059c8:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 80059cc:	687b      	ldr	r3, [r7, #4]
 80059ce:	681b      	ldr	r3, [r3, #0]
 80059d0:	3314      	adds	r3, #20
 80059d2:	f8d7 20b0 	ldr.w	r2, [r7, #176]	@ 0xb0
 80059d6:	66fa      	str	r2, [r7, #108]	@ 0x6c
 80059d8:	66bb      	str	r3, [r7, #104]	@ 0x68
 80059da:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 80059dc:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 80059de:	e841 2300 	strex	r3, r2, [r1]
 80059e2:	667b      	str	r3, [r7, #100]	@ 0x64
 80059e4:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 80059e6:	2b00      	cmp	r3, #0
 80059e8:	d1e3      	bne.n	80059b2 <HAL_UART_IRQHandler+0x33a>
 80059ea:	687b      	ldr	r3, [r7, #4]
 80059ec:	2220      	movs	r2, #32
 80059ee:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 80059f2:	687b      	ldr	r3, [r7, #4]
 80059f4:	2200      	movs	r2, #0
 80059f6:	631a      	str	r2, [r3, #48]	@ 0x30
 80059f8:	687b      	ldr	r3, [r7, #4]
 80059fa:	681b      	ldr	r3, [r3, #0]
 80059fc:	330c      	adds	r3, #12
 80059fe:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8005a00:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8005a02:	e853 3f00 	ldrex	r3, [r3]
 8005a06:	64bb      	str	r3, [r7, #72]	@ 0x48
 8005a08:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8005a0a:	f023 0310 	bic.w	r3, r3, #16
 8005a0e:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 8005a12:	687b      	ldr	r3, [r7, #4]
 8005a14:	681b      	ldr	r3, [r3, #0]
 8005a16:	330c      	adds	r3, #12
 8005a18:	f8d7 20ac 	ldr.w	r2, [r7, #172]	@ 0xac
 8005a1c:	65ba      	str	r2, [r7, #88]	@ 0x58
 8005a1e:	657b      	str	r3, [r7, #84]	@ 0x54
 8005a20:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 8005a22:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8005a24:	e841 2300 	strex	r3, r2, [r1]
 8005a28:	653b      	str	r3, [r7, #80]	@ 0x50
 8005a2a:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8005a2c:	2b00      	cmp	r3, #0
 8005a2e:	d1e3      	bne.n	80059f8 <HAL_UART_IRQHandler+0x380>
 8005a30:	687b      	ldr	r3, [r7, #4]
 8005a32:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005a34:	4618      	mov	r0, r3
 8005a36:	f7fd f9f7 	bl	8002e28 <HAL_DMA_Abort>
 8005a3a:	687b      	ldr	r3, [r7, #4]
 8005a3c:	2202      	movs	r2, #2
 8005a3e:	635a      	str	r2, [r3, #52]	@ 0x34
 8005a40:	687b      	ldr	r3, [r7, #4]
 8005a42:	8d9a      	ldrh	r2, [r3, #44]	@ 0x2c
 8005a44:	687b      	ldr	r3, [r7, #4]
 8005a46:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8005a48:	b29b      	uxth	r3, r3
 8005a4a:	1ad3      	subs	r3, r2, r3
 8005a4c:	b29b      	uxth	r3, r3
 8005a4e:	4619      	mov	r1, r3
 8005a50:	6878      	ldr	r0, [r7, #4]
 8005a52:	f000 f8b7 	bl	8005bc4 <HAL_UARTEx_RxEventCallback>
 8005a56:	e09b      	b.n	8005b90 <HAL_UART_IRQHandler+0x518>
 8005a58:	08005d17 	.word	0x08005d17
 8005a5c:	687b      	ldr	r3, [r7, #4]
 8005a5e:	8d9a      	ldrh	r2, [r3, #44]	@ 0x2c
 8005a60:	687b      	ldr	r3, [r7, #4]
 8005a62:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8005a64:	b29b      	uxth	r3, r3
 8005a66:	1ad3      	subs	r3, r2, r3
 8005a68:	f8a7 30ce 	strh.w	r3, [r7, #206]	@ 0xce
 8005a6c:	687b      	ldr	r3, [r7, #4]
 8005a6e:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8005a70:	b29b      	uxth	r3, r3
 8005a72:	2b00      	cmp	r3, #0
 8005a74:	f000 808e 	beq.w	8005b94 <HAL_UART_IRQHandler+0x51c>
 8005a78:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 8005a7c:	2b00      	cmp	r3, #0
 8005a7e:	f000 8089 	beq.w	8005b94 <HAL_UART_IRQHandler+0x51c>
 8005a82:	687b      	ldr	r3, [r7, #4]
 8005a84:	681b      	ldr	r3, [r3, #0]
 8005a86:	330c      	adds	r3, #12
 8005a88:	63bb      	str	r3, [r7, #56]	@ 0x38
 8005a8a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005a8c:	e853 3f00 	ldrex	r3, [r3]
 8005a90:	637b      	str	r3, [r7, #52]	@ 0x34
 8005a92:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005a94:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8005a98:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8005a9c:	687b      	ldr	r3, [r7, #4]
 8005a9e:	681b      	ldr	r3, [r3, #0]
 8005aa0:	330c      	adds	r3, #12
 8005aa2:	f8d7 20c8 	ldr.w	r2, [r7, #200]	@ 0xc8
 8005aa6:	647a      	str	r2, [r7, #68]	@ 0x44
 8005aa8:	643b      	str	r3, [r7, #64]	@ 0x40
 8005aaa:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8005aac:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8005aae:	e841 2300 	strex	r3, r2, [r1]
 8005ab2:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8005ab4:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8005ab6:	2b00      	cmp	r3, #0
 8005ab8:	d1e3      	bne.n	8005a82 <HAL_UART_IRQHandler+0x40a>
 8005aba:	687b      	ldr	r3, [r7, #4]
 8005abc:	681b      	ldr	r3, [r3, #0]
 8005abe:	3314      	adds	r3, #20
 8005ac0:	627b      	str	r3, [r7, #36]	@ 0x24
 8005ac2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005ac4:	e853 3f00 	ldrex	r3, [r3]
 8005ac8:	623b      	str	r3, [r7, #32]
 8005aca:	6a3b      	ldr	r3, [r7, #32]
 8005acc:	f023 0301 	bic.w	r3, r3, #1
 8005ad0:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 8005ad4:	687b      	ldr	r3, [r7, #4]
 8005ad6:	681b      	ldr	r3, [r3, #0]
 8005ad8:	3314      	adds	r3, #20
 8005ada:	f8d7 20c4 	ldr.w	r2, [r7, #196]	@ 0xc4
 8005ade:	633a      	str	r2, [r7, #48]	@ 0x30
 8005ae0:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8005ae2:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8005ae4:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8005ae6:	e841 2300 	strex	r3, r2, [r1]
 8005aea:	62bb      	str	r3, [r7, #40]	@ 0x28
 8005aec:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005aee:	2b00      	cmp	r3, #0
 8005af0:	d1e3      	bne.n	8005aba <HAL_UART_IRQHandler+0x442>
 8005af2:	687b      	ldr	r3, [r7, #4]
 8005af4:	2220      	movs	r2, #32
 8005af6:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8005afa:	687b      	ldr	r3, [r7, #4]
 8005afc:	2200      	movs	r2, #0
 8005afe:	631a      	str	r2, [r3, #48]	@ 0x30
 8005b00:	687b      	ldr	r3, [r7, #4]
 8005b02:	681b      	ldr	r3, [r3, #0]
 8005b04:	330c      	adds	r3, #12
 8005b06:	613b      	str	r3, [r7, #16]
 8005b08:	693b      	ldr	r3, [r7, #16]
 8005b0a:	e853 3f00 	ldrex	r3, [r3]
 8005b0e:	60fb      	str	r3, [r7, #12]
 8005b10:	68fb      	ldr	r3, [r7, #12]
 8005b12:	f023 0310 	bic.w	r3, r3, #16
 8005b16:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8005b1a:	687b      	ldr	r3, [r7, #4]
 8005b1c:	681b      	ldr	r3, [r3, #0]
 8005b1e:	330c      	adds	r3, #12
 8005b20:	f8d7 20c0 	ldr.w	r2, [r7, #192]	@ 0xc0
 8005b24:	61fa      	str	r2, [r7, #28]
 8005b26:	61bb      	str	r3, [r7, #24]
 8005b28:	69b9      	ldr	r1, [r7, #24]
 8005b2a:	69fa      	ldr	r2, [r7, #28]
 8005b2c:	e841 2300 	strex	r3, r2, [r1]
 8005b30:	617b      	str	r3, [r7, #20]
 8005b32:	697b      	ldr	r3, [r7, #20]
 8005b34:	2b00      	cmp	r3, #0
 8005b36:	d1e3      	bne.n	8005b00 <HAL_UART_IRQHandler+0x488>
 8005b38:	687b      	ldr	r3, [r7, #4]
 8005b3a:	2202      	movs	r2, #2
 8005b3c:	635a      	str	r2, [r3, #52]	@ 0x34
 8005b3e:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 8005b42:	4619      	mov	r1, r3
 8005b44:	6878      	ldr	r0, [r7, #4]
 8005b46:	f000 f83d 	bl	8005bc4 <HAL_UARTEx_RxEventCallback>
 8005b4a:	e023      	b.n	8005b94 <HAL_UART_IRQHandler+0x51c>
 8005b4c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8005b50:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8005b54:	2b00      	cmp	r3, #0
 8005b56:	d009      	beq.n	8005b6c <HAL_UART_IRQHandler+0x4f4>
 8005b58:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8005b5c:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8005b60:	2b00      	cmp	r3, #0
 8005b62:	d003      	beq.n	8005b6c <HAL_UART_IRQHandler+0x4f4>
 8005b64:	6878      	ldr	r0, [r7, #4]
 8005b66:	f000 f8ea 	bl	8005d3e <UART_Transmit_IT>
 8005b6a:	e014      	b.n	8005b96 <HAL_UART_IRQHandler+0x51e>
 8005b6c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8005b70:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005b74:	2b00      	cmp	r3, #0
 8005b76:	d00e      	beq.n	8005b96 <HAL_UART_IRQHandler+0x51e>
 8005b78:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8005b7c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005b80:	2b00      	cmp	r3, #0
 8005b82:	d008      	beq.n	8005b96 <HAL_UART_IRQHandler+0x51e>
 8005b84:	6878      	ldr	r0, [r7, #4]
 8005b86:	f000 f92a 	bl	8005dde <UART_EndTransmit_IT>
 8005b8a:	e004      	b.n	8005b96 <HAL_UART_IRQHandler+0x51e>
 8005b8c:	bf00      	nop
 8005b8e:	e002      	b.n	8005b96 <HAL_UART_IRQHandler+0x51e>
 8005b90:	bf00      	nop
 8005b92:	e000      	b.n	8005b96 <HAL_UART_IRQHandler+0x51e>
 8005b94:	bf00      	nop
 8005b96:	37e8      	adds	r7, #232	@ 0xe8
 8005b98:	46bd      	mov	sp, r7
 8005b9a:	bd80      	pop	{r7, pc}

08005b9c <HAL_UART_TxCpltCallback>:
 8005b9c:	b480      	push	{r7}
 8005b9e:	b083      	sub	sp, #12
 8005ba0:	af00      	add	r7, sp, #0
 8005ba2:	6078      	str	r0, [r7, #4]
 8005ba4:	bf00      	nop
 8005ba6:	370c      	adds	r7, #12
 8005ba8:	46bd      	mov	sp, r7
 8005baa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005bae:	4770      	bx	lr

08005bb0 <HAL_UART_ErrorCallback>:
 8005bb0:	b480      	push	{r7}
 8005bb2:	b083      	sub	sp, #12
 8005bb4:	af00      	add	r7, sp, #0
 8005bb6:	6078      	str	r0, [r7, #4]
 8005bb8:	bf00      	nop
 8005bba:	370c      	adds	r7, #12
 8005bbc:	46bd      	mov	sp, r7
 8005bbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005bc2:	4770      	bx	lr

08005bc4 <HAL_UARTEx_RxEventCallback>:
 8005bc4:	b480      	push	{r7}
 8005bc6:	b083      	sub	sp, #12
 8005bc8:	af00      	add	r7, sp, #0
 8005bca:	6078      	str	r0, [r7, #4]
 8005bcc:	460b      	mov	r3, r1
 8005bce:	807b      	strh	r3, [r7, #2]
 8005bd0:	bf00      	nop
 8005bd2:	370c      	adds	r7, #12
 8005bd4:	46bd      	mov	sp, r7
 8005bd6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005bda:	4770      	bx	lr

08005bdc <UART_Start_Receive_IT>:
 8005bdc:	b480      	push	{r7}
 8005bde:	b085      	sub	sp, #20
 8005be0:	af00      	add	r7, sp, #0
 8005be2:	60f8      	str	r0, [r7, #12]
 8005be4:	60b9      	str	r1, [r7, #8]
 8005be6:	4613      	mov	r3, r2
 8005be8:	80fb      	strh	r3, [r7, #6]
 8005bea:	68fb      	ldr	r3, [r7, #12]
 8005bec:	68ba      	ldr	r2, [r7, #8]
 8005bee:	629a      	str	r2, [r3, #40]	@ 0x28
 8005bf0:	68fb      	ldr	r3, [r7, #12]
 8005bf2:	88fa      	ldrh	r2, [r7, #6]
 8005bf4:	859a      	strh	r2, [r3, #44]	@ 0x2c
 8005bf6:	68fb      	ldr	r3, [r7, #12]
 8005bf8:	88fa      	ldrh	r2, [r7, #6]
 8005bfa:	85da      	strh	r2, [r3, #46]	@ 0x2e
 8005bfc:	68fb      	ldr	r3, [r7, #12]
 8005bfe:	2200      	movs	r2, #0
 8005c00:	645a      	str	r2, [r3, #68]	@ 0x44
 8005c02:	68fb      	ldr	r3, [r7, #12]
 8005c04:	2222      	movs	r2, #34	@ 0x22
 8005c06:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8005c0a:	68fb      	ldr	r3, [r7, #12]
 8005c0c:	691b      	ldr	r3, [r3, #16]
 8005c0e:	2b00      	cmp	r3, #0
 8005c10:	d007      	beq.n	8005c22 <UART_Start_Receive_IT+0x46>
 8005c12:	68fb      	ldr	r3, [r7, #12]
 8005c14:	681b      	ldr	r3, [r3, #0]
 8005c16:	68da      	ldr	r2, [r3, #12]
 8005c18:	68fb      	ldr	r3, [r7, #12]
 8005c1a:	681b      	ldr	r3, [r3, #0]
 8005c1c:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8005c20:	60da      	str	r2, [r3, #12]
 8005c22:	68fb      	ldr	r3, [r7, #12]
 8005c24:	681b      	ldr	r3, [r3, #0]
 8005c26:	695a      	ldr	r2, [r3, #20]
 8005c28:	68fb      	ldr	r3, [r7, #12]
 8005c2a:	681b      	ldr	r3, [r3, #0]
 8005c2c:	f042 0201 	orr.w	r2, r2, #1
 8005c30:	615a      	str	r2, [r3, #20]
 8005c32:	68fb      	ldr	r3, [r7, #12]
 8005c34:	681b      	ldr	r3, [r3, #0]
 8005c36:	68da      	ldr	r2, [r3, #12]
 8005c38:	68fb      	ldr	r3, [r7, #12]
 8005c3a:	681b      	ldr	r3, [r3, #0]
 8005c3c:	f042 0220 	orr.w	r2, r2, #32
 8005c40:	60da      	str	r2, [r3, #12]
 8005c42:	2300      	movs	r3, #0
 8005c44:	4618      	mov	r0, r3
 8005c46:	3714      	adds	r7, #20
 8005c48:	46bd      	mov	sp, r7
 8005c4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c4e:	4770      	bx	lr

08005c50 <UART_EndRxTransfer>:
 8005c50:	b480      	push	{r7}
 8005c52:	b095      	sub	sp, #84	@ 0x54
 8005c54:	af00      	add	r7, sp, #0
 8005c56:	6078      	str	r0, [r7, #4]
 8005c58:	687b      	ldr	r3, [r7, #4]
 8005c5a:	681b      	ldr	r3, [r3, #0]
 8005c5c:	330c      	adds	r3, #12
 8005c5e:	637b      	str	r3, [r7, #52]	@ 0x34
 8005c60:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005c62:	e853 3f00 	ldrex	r3, [r3]
 8005c66:	633b      	str	r3, [r7, #48]	@ 0x30
 8005c68:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005c6a:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8005c6e:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8005c70:	687b      	ldr	r3, [r7, #4]
 8005c72:	681b      	ldr	r3, [r3, #0]
 8005c74:	330c      	adds	r3, #12
 8005c76:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8005c78:	643a      	str	r2, [r7, #64]	@ 0x40
 8005c7a:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8005c7c:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8005c7e:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8005c80:	e841 2300 	strex	r3, r2, [r1]
 8005c84:	63bb      	str	r3, [r7, #56]	@ 0x38
 8005c86:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005c88:	2b00      	cmp	r3, #0
 8005c8a:	d1e5      	bne.n	8005c58 <UART_EndRxTransfer+0x8>
 8005c8c:	687b      	ldr	r3, [r7, #4]
 8005c8e:	681b      	ldr	r3, [r3, #0]
 8005c90:	3314      	adds	r3, #20
 8005c92:	623b      	str	r3, [r7, #32]
 8005c94:	6a3b      	ldr	r3, [r7, #32]
 8005c96:	e853 3f00 	ldrex	r3, [r3]
 8005c9a:	61fb      	str	r3, [r7, #28]
 8005c9c:	69fb      	ldr	r3, [r7, #28]
 8005c9e:	f023 0301 	bic.w	r3, r3, #1
 8005ca2:	64bb      	str	r3, [r7, #72]	@ 0x48
 8005ca4:	687b      	ldr	r3, [r7, #4]
 8005ca6:	681b      	ldr	r3, [r3, #0]
 8005ca8:	3314      	adds	r3, #20
 8005caa:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8005cac:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8005cae:	62bb      	str	r3, [r7, #40]	@ 0x28
 8005cb0:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8005cb2:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8005cb4:	e841 2300 	strex	r3, r2, [r1]
 8005cb8:	627b      	str	r3, [r7, #36]	@ 0x24
 8005cba:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005cbc:	2b00      	cmp	r3, #0
 8005cbe:	d1e5      	bne.n	8005c8c <UART_EndRxTransfer+0x3c>
 8005cc0:	687b      	ldr	r3, [r7, #4]
 8005cc2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005cc4:	2b01      	cmp	r3, #1
 8005cc6:	d119      	bne.n	8005cfc <UART_EndRxTransfer+0xac>
 8005cc8:	687b      	ldr	r3, [r7, #4]
 8005cca:	681b      	ldr	r3, [r3, #0]
 8005ccc:	330c      	adds	r3, #12
 8005cce:	60fb      	str	r3, [r7, #12]
 8005cd0:	68fb      	ldr	r3, [r7, #12]
 8005cd2:	e853 3f00 	ldrex	r3, [r3]
 8005cd6:	60bb      	str	r3, [r7, #8]
 8005cd8:	68bb      	ldr	r3, [r7, #8]
 8005cda:	f023 0310 	bic.w	r3, r3, #16
 8005cde:	647b      	str	r3, [r7, #68]	@ 0x44
 8005ce0:	687b      	ldr	r3, [r7, #4]
 8005ce2:	681b      	ldr	r3, [r3, #0]
 8005ce4:	330c      	adds	r3, #12
 8005ce6:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8005ce8:	61ba      	str	r2, [r7, #24]
 8005cea:	617b      	str	r3, [r7, #20]
 8005cec:	6979      	ldr	r1, [r7, #20]
 8005cee:	69ba      	ldr	r2, [r7, #24]
 8005cf0:	e841 2300 	strex	r3, r2, [r1]
 8005cf4:	613b      	str	r3, [r7, #16]
 8005cf6:	693b      	ldr	r3, [r7, #16]
 8005cf8:	2b00      	cmp	r3, #0
 8005cfa:	d1e5      	bne.n	8005cc8 <UART_EndRxTransfer+0x78>
 8005cfc:	687b      	ldr	r3, [r7, #4]
 8005cfe:	2220      	movs	r2, #32
 8005d00:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8005d04:	687b      	ldr	r3, [r7, #4]
 8005d06:	2200      	movs	r2, #0
 8005d08:	631a      	str	r2, [r3, #48]	@ 0x30
 8005d0a:	bf00      	nop
 8005d0c:	3754      	adds	r7, #84	@ 0x54
 8005d0e:	46bd      	mov	sp, r7
 8005d10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d14:	4770      	bx	lr

08005d16 <UART_DMAAbortOnError>:
 8005d16:	b580      	push	{r7, lr}
 8005d18:	b084      	sub	sp, #16
 8005d1a:	af00      	add	r7, sp, #0
 8005d1c:	6078      	str	r0, [r7, #4]
 8005d1e:	687b      	ldr	r3, [r7, #4]
 8005d20:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005d22:	60fb      	str	r3, [r7, #12]
 8005d24:	68fb      	ldr	r3, [r7, #12]
 8005d26:	2200      	movs	r2, #0
 8005d28:	85da      	strh	r2, [r3, #46]	@ 0x2e
 8005d2a:	68fb      	ldr	r3, [r7, #12]
 8005d2c:	2200      	movs	r2, #0
 8005d2e:	84da      	strh	r2, [r3, #38]	@ 0x26
 8005d30:	68f8      	ldr	r0, [r7, #12]
 8005d32:	f7ff ff3d 	bl	8005bb0 <HAL_UART_ErrorCallback>
 8005d36:	bf00      	nop
 8005d38:	3710      	adds	r7, #16
 8005d3a:	46bd      	mov	sp, r7
 8005d3c:	bd80      	pop	{r7, pc}

08005d3e <UART_Transmit_IT>:
 8005d3e:	b480      	push	{r7}
 8005d40:	b085      	sub	sp, #20
 8005d42:	af00      	add	r7, sp, #0
 8005d44:	6078      	str	r0, [r7, #4]
 8005d46:	687b      	ldr	r3, [r7, #4]
 8005d48:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8005d4c:	b2db      	uxtb	r3, r3
 8005d4e:	2b21      	cmp	r3, #33	@ 0x21
 8005d50:	d13e      	bne.n	8005dd0 <UART_Transmit_IT+0x92>
 8005d52:	687b      	ldr	r3, [r7, #4]
 8005d54:	689b      	ldr	r3, [r3, #8]
 8005d56:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8005d5a:	d114      	bne.n	8005d86 <UART_Transmit_IT+0x48>
 8005d5c:	687b      	ldr	r3, [r7, #4]
 8005d5e:	691b      	ldr	r3, [r3, #16]
 8005d60:	2b00      	cmp	r3, #0
 8005d62:	d110      	bne.n	8005d86 <UART_Transmit_IT+0x48>
 8005d64:	687b      	ldr	r3, [r7, #4]
 8005d66:	6a1b      	ldr	r3, [r3, #32]
 8005d68:	60fb      	str	r3, [r7, #12]
 8005d6a:	68fb      	ldr	r3, [r7, #12]
 8005d6c:	881b      	ldrh	r3, [r3, #0]
 8005d6e:	461a      	mov	r2, r3
 8005d70:	687b      	ldr	r3, [r7, #4]
 8005d72:	681b      	ldr	r3, [r3, #0]
 8005d74:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8005d78:	605a      	str	r2, [r3, #4]
 8005d7a:	687b      	ldr	r3, [r7, #4]
 8005d7c:	6a1b      	ldr	r3, [r3, #32]
 8005d7e:	1c9a      	adds	r2, r3, #2
 8005d80:	687b      	ldr	r3, [r7, #4]
 8005d82:	621a      	str	r2, [r3, #32]
 8005d84:	e008      	b.n	8005d98 <UART_Transmit_IT+0x5a>
 8005d86:	687b      	ldr	r3, [r7, #4]
 8005d88:	6a1b      	ldr	r3, [r3, #32]
 8005d8a:	1c59      	adds	r1, r3, #1
 8005d8c:	687a      	ldr	r2, [r7, #4]
 8005d8e:	6211      	str	r1, [r2, #32]
 8005d90:	781a      	ldrb	r2, [r3, #0]
 8005d92:	687b      	ldr	r3, [r7, #4]
 8005d94:	681b      	ldr	r3, [r3, #0]
 8005d96:	605a      	str	r2, [r3, #4]
 8005d98:	687b      	ldr	r3, [r7, #4]
 8005d9a:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 8005d9c:	b29b      	uxth	r3, r3
 8005d9e:	3b01      	subs	r3, #1
 8005da0:	b29b      	uxth	r3, r3
 8005da2:	687a      	ldr	r2, [r7, #4]
 8005da4:	4619      	mov	r1, r3
 8005da6:	84d1      	strh	r1, [r2, #38]	@ 0x26
 8005da8:	2b00      	cmp	r3, #0
 8005daa:	d10f      	bne.n	8005dcc <UART_Transmit_IT+0x8e>
 8005dac:	687b      	ldr	r3, [r7, #4]
 8005dae:	681b      	ldr	r3, [r3, #0]
 8005db0:	68da      	ldr	r2, [r3, #12]
 8005db2:	687b      	ldr	r3, [r7, #4]
 8005db4:	681b      	ldr	r3, [r3, #0]
 8005db6:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8005dba:	60da      	str	r2, [r3, #12]
 8005dbc:	687b      	ldr	r3, [r7, #4]
 8005dbe:	681b      	ldr	r3, [r3, #0]
 8005dc0:	68da      	ldr	r2, [r3, #12]
 8005dc2:	687b      	ldr	r3, [r7, #4]
 8005dc4:	681b      	ldr	r3, [r3, #0]
 8005dc6:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8005dca:	60da      	str	r2, [r3, #12]
 8005dcc:	2300      	movs	r3, #0
 8005dce:	e000      	b.n	8005dd2 <UART_Transmit_IT+0x94>
 8005dd0:	2302      	movs	r3, #2
 8005dd2:	4618      	mov	r0, r3
 8005dd4:	3714      	adds	r7, #20
 8005dd6:	46bd      	mov	sp, r7
 8005dd8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ddc:	4770      	bx	lr

08005dde <UART_EndTransmit_IT>:
 8005dde:	b580      	push	{r7, lr}
 8005de0:	b082      	sub	sp, #8
 8005de2:	af00      	add	r7, sp, #0
 8005de4:	6078      	str	r0, [r7, #4]
 8005de6:	687b      	ldr	r3, [r7, #4]
 8005de8:	681b      	ldr	r3, [r3, #0]
 8005dea:	68da      	ldr	r2, [r3, #12]
 8005dec:	687b      	ldr	r3, [r7, #4]
 8005dee:	681b      	ldr	r3, [r3, #0]
 8005df0:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8005df4:	60da      	str	r2, [r3, #12]
 8005df6:	687b      	ldr	r3, [r7, #4]
 8005df8:	2220      	movs	r2, #32
 8005dfa:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 8005dfe:	6878      	ldr	r0, [r7, #4]
 8005e00:	f7ff fecc 	bl	8005b9c <HAL_UART_TxCpltCallback>
 8005e04:	2300      	movs	r3, #0
 8005e06:	4618      	mov	r0, r3
 8005e08:	3708      	adds	r7, #8
 8005e0a:	46bd      	mov	sp, r7
 8005e0c:	bd80      	pop	{r7, pc}

08005e0e <UART_Receive_IT>:
 8005e0e:	b580      	push	{r7, lr}
 8005e10:	b08c      	sub	sp, #48	@ 0x30
 8005e12:	af00      	add	r7, sp, #0
 8005e14:	6078      	str	r0, [r7, #4]
 8005e16:	687b      	ldr	r3, [r7, #4]
 8005e18:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8005e1c:	b2db      	uxtb	r3, r3
 8005e1e:	2b22      	cmp	r3, #34	@ 0x22
 8005e20:	f040 80ae 	bne.w	8005f80 <UART_Receive_IT+0x172>
 8005e24:	687b      	ldr	r3, [r7, #4]
 8005e26:	689b      	ldr	r3, [r3, #8]
 8005e28:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8005e2c:	d117      	bne.n	8005e5e <UART_Receive_IT+0x50>
 8005e2e:	687b      	ldr	r3, [r7, #4]
 8005e30:	691b      	ldr	r3, [r3, #16]
 8005e32:	2b00      	cmp	r3, #0
 8005e34:	d113      	bne.n	8005e5e <UART_Receive_IT+0x50>
 8005e36:	2300      	movs	r3, #0
 8005e38:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8005e3a:	687b      	ldr	r3, [r7, #4]
 8005e3c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005e3e:	62bb      	str	r3, [r7, #40]	@ 0x28
 8005e40:	687b      	ldr	r3, [r7, #4]
 8005e42:	681b      	ldr	r3, [r3, #0]
 8005e44:	685b      	ldr	r3, [r3, #4]
 8005e46:	b29b      	uxth	r3, r3
 8005e48:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005e4c:	b29a      	uxth	r2, r3
 8005e4e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005e50:	801a      	strh	r2, [r3, #0]
 8005e52:	687b      	ldr	r3, [r7, #4]
 8005e54:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005e56:	1c9a      	adds	r2, r3, #2
 8005e58:	687b      	ldr	r3, [r7, #4]
 8005e5a:	629a      	str	r2, [r3, #40]	@ 0x28
 8005e5c:	e026      	b.n	8005eac <UART_Receive_IT+0x9e>
 8005e5e:	687b      	ldr	r3, [r7, #4]
 8005e60:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005e62:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8005e64:	2300      	movs	r3, #0
 8005e66:	62bb      	str	r3, [r7, #40]	@ 0x28
 8005e68:	687b      	ldr	r3, [r7, #4]
 8005e6a:	689b      	ldr	r3, [r3, #8]
 8005e6c:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8005e70:	d007      	beq.n	8005e82 <UART_Receive_IT+0x74>
 8005e72:	687b      	ldr	r3, [r7, #4]
 8005e74:	689b      	ldr	r3, [r3, #8]
 8005e76:	2b00      	cmp	r3, #0
 8005e78:	d10a      	bne.n	8005e90 <UART_Receive_IT+0x82>
 8005e7a:	687b      	ldr	r3, [r7, #4]
 8005e7c:	691b      	ldr	r3, [r3, #16]
 8005e7e:	2b00      	cmp	r3, #0
 8005e80:	d106      	bne.n	8005e90 <UART_Receive_IT+0x82>
 8005e82:	687b      	ldr	r3, [r7, #4]
 8005e84:	681b      	ldr	r3, [r3, #0]
 8005e86:	685b      	ldr	r3, [r3, #4]
 8005e88:	b2da      	uxtb	r2, r3
 8005e8a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005e8c:	701a      	strb	r2, [r3, #0]
 8005e8e:	e008      	b.n	8005ea2 <UART_Receive_IT+0x94>
 8005e90:	687b      	ldr	r3, [r7, #4]
 8005e92:	681b      	ldr	r3, [r3, #0]
 8005e94:	685b      	ldr	r3, [r3, #4]
 8005e96:	b2db      	uxtb	r3, r3
 8005e98:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8005e9c:	b2da      	uxtb	r2, r3
 8005e9e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005ea0:	701a      	strb	r2, [r3, #0]
 8005ea2:	687b      	ldr	r3, [r7, #4]
 8005ea4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005ea6:	1c5a      	adds	r2, r3, #1
 8005ea8:	687b      	ldr	r3, [r7, #4]
 8005eaa:	629a      	str	r2, [r3, #40]	@ 0x28
 8005eac:	687b      	ldr	r3, [r7, #4]
 8005eae:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8005eb0:	b29b      	uxth	r3, r3
 8005eb2:	3b01      	subs	r3, #1
 8005eb4:	b29b      	uxth	r3, r3
 8005eb6:	687a      	ldr	r2, [r7, #4]
 8005eb8:	4619      	mov	r1, r3
 8005eba:	85d1      	strh	r1, [r2, #46]	@ 0x2e
 8005ebc:	2b00      	cmp	r3, #0
 8005ebe:	d15d      	bne.n	8005f7c <UART_Receive_IT+0x16e>
 8005ec0:	687b      	ldr	r3, [r7, #4]
 8005ec2:	681b      	ldr	r3, [r3, #0]
 8005ec4:	68da      	ldr	r2, [r3, #12]
 8005ec6:	687b      	ldr	r3, [r7, #4]
 8005ec8:	681b      	ldr	r3, [r3, #0]
 8005eca:	f022 0220 	bic.w	r2, r2, #32
 8005ece:	60da      	str	r2, [r3, #12]
 8005ed0:	687b      	ldr	r3, [r7, #4]
 8005ed2:	681b      	ldr	r3, [r3, #0]
 8005ed4:	68da      	ldr	r2, [r3, #12]
 8005ed6:	687b      	ldr	r3, [r7, #4]
 8005ed8:	681b      	ldr	r3, [r3, #0]
 8005eda:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8005ede:	60da      	str	r2, [r3, #12]
 8005ee0:	687b      	ldr	r3, [r7, #4]
 8005ee2:	681b      	ldr	r3, [r3, #0]
 8005ee4:	695a      	ldr	r2, [r3, #20]
 8005ee6:	687b      	ldr	r3, [r7, #4]
 8005ee8:	681b      	ldr	r3, [r3, #0]
 8005eea:	f022 0201 	bic.w	r2, r2, #1
 8005eee:	615a      	str	r2, [r3, #20]
 8005ef0:	687b      	ldr	r3, [r7, #4]
 8005ef2:	2220      	movs	r2, #32
 8005ef4:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8005ef8:	687b      	ldr	r3, [r7, #4]
 8005efa:	2200      	movs	r2, #0
 8005efc:	635a      	str	r2, [r3, #52]	@ 0x34
 8005efe:	687b      	ldr	r3, [r7, #4]
 8005f00:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005f02:	2b01      	cmp	r3, #1
 8005f04:	d135      	bne.n	8005f72 <UART_Receive_IT+0x164>
 8005f06:	687b      	ldr	r3, [r7, #4]
 8005f08:	2200      	movs	r2, #0
 8005f0a:	631a      	str	r2, [r3, #48]	@ 0x30
 8005f0c:	687b      	ldr	r3, [r7, #4]
 8005f0e:	681b      	ldr	r3, [r3, #0]
 8005f10:	330c      	adds	r3, #12
 8005f12:	617b      	str	r3, [r7, #20]
 8005f14:	697b      	ldr	r3, [r7, #20]
 8005f16:	e853 3f00 	ldrex	r3, [r3]
 8005f1a:	613b      	str	r3, [r7, #16]
 8005f1c:	693b      	ldr	r3, [r7, #16]
 8005f1e:	f023 0310 	bic.w	r3, r3, #16
 8005f22:	627b      	str	r3, [r7, #36]	@ 0x24
 8005f24:	687b      	ldr	r3, [r7, #4]
 8005f26:	681b      	ldr	r3, [r3, #0]
 8005f28:	330c      	adds	r3, #12
 8005f2a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8005f2c:	623a      	str	r2, [r7, #32]
 8005f2e:	61fb      	str	r3, [r7, #28]
 8005f30:	69f9      	ldr	r1, [r7, #28]
 8005f32:	6a3a      	ldr	r2, [r7, #32]
 8005f34:	e841 2300 	strex	r3, r2, [r1]
 8005f38:	61bb      	str	r3, [r7, #24]
 8005f3a:	69bb      	ldr	r3, [r7, #24]
 8005f3c:	2b00      	cmp	r3, #0
 8005f3e:	d1e5      	bne.n	8005f0c <UART_Receive_IT+0xfe>
 8005f40:	687b      	ldr	r3, [r7, #4]
 8005f42:	681b      	ldr	r3, [r3, #0]
 8005f44:	681b      	ldr	r3, [r3, #0]
 8005f46:	f003 0310 	and.w	r3, r3, #16
 8005f4a:	2b10      	cmp	r3, #16
 8005f4c:	d10a      	bne.n	8005f64 <UART_Receive_IT+0x156>
 8005f4e:	2300      	movs	r3, #0
 8005f50:	60fb      	str	r3, [r7, #12]
 8005f52:	687b      	ldr	r3, [r7, #4]
 8005f54:	681b      	ldr	r3, [r3, #0]
 8005f56:	681b      	ldr	r3, [r3, #0]
 8005f58:	60fb      	str	r3, [r7, #12]
 8005f5a:	687b      	ldr	r3, [r7, #4]
 8005f5c:	681b      	ldr	r3, [r3, #0]
 8005f5e:	685b      	ldr	r3, [r3, #4]
 8005f60:	60fb      	str	r3, [r7, #12]
 8005f62:	68fb      	ldr	r3, [r7, #12]
 8005f64:	687b      	ldr	r3, [r7, #4]
 8005f66:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 8005f68:	4619      	mov	r1, r3
 8005f6a:	6878      	ldr	r0, [r7, #4]
 8005f6c:	f7ff fe2a 	bl	8005bc4 <HAL_UARTEx_RxEventCallback>
 8005f70:	e002      	b.n	8005f78 <UART_Receive_IT+0x16a>
 8005f72:	6878      	ldr	r0, [r7, #4]
 8005f74:	f7fb fd54 	bl	8001a20 <HAL_UART_RxCpltCallback>
 8005f78:	2300      	movs	r3, #0
 8005f7a:	e002      	b.n	8005f82 <UART_Receive_IT+0x174>
 8005f7c:	2300      	movs	r3, #0
 8005f7e:	e000      	b.n	8005f82 <UART_Receive_IT+0x174>
 8005f80:	2302      	movs	r3, #2
 8005f82:	4618      	mov	r0, r3
 8005f84:	3730      	adds	r7, #48	@ 0x30
 8005f86:	46bd      	mov	sp, r7
 8005f88:	bd80      	pop	{r7, pc}
	...

08005f8c <UART_SetConfig>:
 8005f8c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8005f90:	b0c0      	sub	sp, #256	@ 0x100
 8005f92:	af00      	add	r7, sp, #0
 8005f94:	f8c7 00f4 	str.w	r0, [r7, #244]	@ 0xf4
 8005f98:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005f9c:	681b      	ldr	r3, [r3, #0]
 8005f9e:	691b      	ldr	r3, [r3, #16]
 8005fa0:	f423 5040 	bic.w	r0, r3, #12288	@ 0x3000
 8005fa4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005fa8:	68d9      	ldr	r1, [r3, #12]
 8005faa:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005fae:	681a      	ldr	r2, [r3, #0]
 8005fb0:	ea40 0301 	orr.w	r3, r0, r1
 8005fb4:	6113      	str	r3, [r2, #16]
 8005fb6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005fba:	689a      	ldr	r2, [r3, #8]
 8005fbc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005fc0:	691b      	ldr	r3, [r3, #16]
 8005fc2:	431a      	orrs	r2, r3
 8005fc4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005fc8:	695b      	ldr	r3, [r3, #20]
 8005fca:	431a      	orrs	r2, r3
 8005fcc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005fd0:	69db      	ldr	r3, [r3, #28]
 8005fd2:	4313      	orrs	r3, r2
 8005fd4:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
 8005fd8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005fdc:	681b      	ldr	r3, [r3, #0]
 8005fde:	68db      	ldr	r3, [r3, #12]
 8005fe0:	f423 4116 	bic.w	r1, r3, #38400	@ 0x9600
 8005fe4:	f021 010c 	bic.w	r1, r1, #12
 8005fe8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005fec:	681a      	ldr	r2, [r3, #0]
 8005fee:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 8005ff2:	430b      	orrs	r3, r1
 8005ff4:	60d3      	str	r3, [r2, #12]
 8005ff6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005ffa:	681b      	ldr	r3, [r3, #0]
 8005ffc:	695b      	ldr	r3, [r3, #20]
 8005ffe:	f423 7040 	bic.w	r0, r3, #768	@ 0x300
 8006002:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006006:	6999      	ldr	r1, [r3, #24]
 8006008:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800600c:	681a      	ldr	r2, [r3, #0]
 800600e:	ea40 0301 	orr.w	r3, r0, r1
 8006012:	6153      	str	r3, [r2, #20]
 8006014:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006018:	681a      	ldr	r2, [r3, #0]
 800601a:	4b8f      	ldr	r3, [pc, #572]	@ (8006258 <UART_SetConfig+0x2cc>)
 800601c:	429a      	cmp	r2, r3
 800601e:	d005      	beq.n	800602c <UART_SetConfig+0xa0>
 8006020:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006024:	681a      	ldr	r2, [r3, #0]
 8006026:	4b8d      	ldr	r3, [pc, #564]	@ (800625c <UART_SetConfig+0x2d0>)
 8006028:	429a      	cmp	r2, r3
 800602a:	d104      	bne.n	8006036 <UART_SetConfig+0xaa>
 800602c:	f7fd fcc4 	bl	80039b8 <HAL_RCC_GetPCLK2Freq>
 8006030:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
 8006034:	e003      	b.n	800603e <UART_SetConfig+0xb2>
 8006036:	f7fd fcab 	bl	8003990 <HAL_RCC_GetPCLK1Freq>
 800603a:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
 800603e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006042:	69db      	ldr	r3, [r3, #28]
 8006044:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8006048:	f040 810c 	bne.w	8006264 <UART_SetConfig+0x2d8>
 800604c:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8006050:	2200      	movs	r2, #0
 8006052:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 8006056:	f8c7 20ec 	str.w	r2, [r7, #236]	@ 0xec
 800605a:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	@ 0xe8
 800605e:	4622      	mov	r2, r4
 8006060:	462b      	mov	r3, r5
 8006062:	1891      	adds	r1, r2, r2
 8006064:	65b9      	str	r1, [r7, #88]	@ 0x58
 8006066:	415b      	adcs	r3, r3
 8006068:	65fb      	str	r3, [r7, #92]	@ 0x5c
 800606a:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	@ 0x58
 800606e:	4621      	mov	r1, r4
 8006070:	eb12 0801 	adds.w	r8, r2, r1
 8006074:	4629      	mov	r1, r5
 8006076:	eb43 0901 	adc.w	r9, r3, r1
 800607a:	f04f 0200 	mov.w	r2, #0
 800607e:	f04f 0300 	mov.w	r3, #0
 8006082:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8006086:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 800608a:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 800608e:	4690      	mov	r8, r2
 8006090:	4699      	mov	r9, r3
 8006092:	4623      	mov	r3, r4
 8006094:	eb18 0303 	adds.w	r3, r8, r3
 8006098:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 800609c:	462b      	mov	r3, r5
 800609e:	eb49 0303 	adc.w	r3, r9, r3
 80060a2:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 80060a6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80060aa:	685b      	ldr	r3, [r3, #4]
 80060ac:	2200      	movs	r2, #0
 80060ae:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 80060b2:	f8c7 20dc 	str.w	r2, [r7, #220]	@ 0xdc
 80060b6:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	@ 0xd8
 80060ba:	460b      	mov	r3, r1
 80060bc:	18db      	adds	r3, r3, r3
 80060be:	653b      	str	r3, [r7, #80]	@ 0x50
 80060c0:	4613      	mov	r3, r2
 80060c2:	eb42 0303 	adc.w	r3, r2, r3
 80060c6:	657b      	str	r3, [r7, #84]	@ 0x54
 80060c8:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	@ 0x50
 80060cc:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	@ 0xe0
 80060d0:	f7fa fdda 	bl	8000c88 <__aeabi_uldivmod>
 80060d4:	4602      	mov	r2, r0
 80060d6:	460b      	mov	r3, r1
 80060d8:	4b61      	ldr	r3, [pc, #388]	@ (8006260 <UART_SetConfig+0x2d4>)
 80060da:	fba3 2302 	umull	r2, r3, r3, r2
 80060de:	095b      	lsrs	r3, r3, #5
 80060e0:	011c      	lsls	r4, r3, #4
 80060e2:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80060e6:	2200      	movs	r2, #0
 80060e8:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 80060ec:	f8c7 20d4 	str.w	r2, [r7, #212]	@ 0xd4
 80060f0:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	@ 0xd0
 80060f4:	4642      	mov	r2, r8
 80060f6:	464b      	mov	r3, r9
 80060f8:	1891      	adds	r1, r2, r2
 80060fa:	64b9      	str	r1, [r7, #72]	@ 0x48
 80060fc:	415b      	adcs	r3, r3
 80060fe:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8006100:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	@ 0x48
 8006104:	4641      	mov	r1, r8
 8006106:	eb12 0a01 	adds.w	sl, r2, r1
 800610a:	4649      	mov	r1, r9
 800610c:	eb43 0b01 	adc.w	fp, r3, r1
 8006110:	f04f 0200 	mov.w	r2, #0
 8006114:	f04f 0300 	mov.w	r3, #0
 8006118:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 800611c:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8006120:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8006124:	4692      	mov	sl, r2
 8006126:	469b      	mov	fp, r3
 8006128:	4643      	mov	r3, r8
 800612a:	eb1a 0303 	adds.w	r3, sl, r3
 800612e:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8006132:	464b      	mov	r3, r9
 8006134:	eb4b 0303 	adc.w	r3, fp, r3
 8006138:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 800613c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006140:	685b      	ldr	r3, [r3, #4]
 8006142:	2200      	movs	r2, #0
 8006144:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8006148:	f8c7 20c4 	str.w	r2, [r7, #196]	@ 0xc4
 800614c:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	@ 0xc0
 8006150:	460b      	mov	r3, r1
 8006152:	18db      	adds	r3, r3, r3
 8006154:	643b      	str	r3, [r7, #64]	@ 0x40
 8006156:	4613      	mov	r3, r2
 8006158:	eb42 0303 	adc.w	r3, r2, r3
 800615c:	647b      	str	r3, [r7, #68]	@ 0x44
 800615e:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	@ 0x40
 8006162:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	@ 0xc8
 8006166:	f7fa fd8f 	bl	8000c88 <__aeabi_uldivmod>
 800616a:	4602      	mov	r2, r0
 800616c:	460b      	mov	r3, r1
 800616e:	4611      	mov	r1, r2
 8006170:	4b3b      	ldr	r3, [pc, #236]	@ (8006260 <UART_SetConfig+0x2d4>)
 8006172:	fba3 2301 	umull	r2, r3, r3, r1
 8006176:	095b      	lsrs	r3, r3, #5
 8006178:	2264      	movs	r2, #100	@ 0x64
 800617a:	fb02 f303 	mul.w	r3, r2, r3
 800617e:	1acb      	subs	r3, r1, r3
 8006180:	00db      	lsls	r3, r3, #3
 8006182:	f103 0232 	add.w	r2, r3, #50	@ 0x32
 8006186:	4b36      	ldr	r3, [pc, #216]	@ (8006260 <UART_SetConfig+0x2d4>)
 8006188:	fba3 2302 	umull	r2, r3, r3, r2
 800618c:	095b      	lsrs	r3, r3, #5
 800618e:	005b      	lsls	r3, r3, #1
 8006190:	f403 73f8 	and.w	r3, r3, #496	@ 0x1f0
 8006194:	441c      	add	r4, r3
 8006196:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800619a:	2200      	movs	r2, #0
 800619c:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 80061a0:	f8c7 20bc 	str.w	r2, [r7, #188]	@ 0xbc
 80061a4:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	@ 0xb8
 80061a8:	4642      	mov	r2, r8
 80061aa:	464b      	mov	r3, r9
 80061ac:	1891      	adds	r1, r2, r2
 80061ae:	63b9      	str	r1, [r7, #56]	@ 0x38
 80061b0:	415b      	adcs	r3, r3
 80061b2:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80061b4:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	@ 0x38
 80061b8:	4641      	mov	r1, r8
 80061ba:	1851      	adds	r1, r2, r1
 80061bc:	6339      	str	r1, [r7, #48]	@ 0x30
 80061be:	4649      	mov	r1, r9
 80061c0:	414b      	adcs	r3, r1
 80061c2:	637b      	str	r3, [r7, #52]	@ 0x34
 80061c4:	f04f 0200 	mov.w	r2, #0
 80061c8:	f04f 0300 	mov.w	r3, #0
 80061cc:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	@ 0x30
 80061d0:	4659      	mov	r1, fp
 80061d2:	00cb      	lsls	r3, r1, #3
 80061d4:	4651      	mov	r1, sl
 80061d6:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80061da:	4651      	mov	r1, sl
 80061dc:	00ca      	lsls	r2, r1, #3
 80061de:	4610      	mov	r0, r2
 80061e0:	4619      	mov	r1, r3
 80061e2:	4603      	mov	r3, r0
 80061e4:	4642      	mov	r2, r8
 80061e6:	189b      	adds	r3, r3, r2
 80061e8:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 80061ec:	464b      	mov	r3, r9
 80061ee:	460a      	mov	r2, r1
 80061f0:	eb42 0303 	adc.w	r3, r2, r3
 80061f4:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 80061f8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80061fc:	685b      	ldr	r3, [r3, #4]
 80061fe:	2200      	movs	r2, #0
 8006200:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 8006204:	f8c7 20ac 	str.w	r2, [r7, #172]	@ 0xac
 8006208:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	@ 0xa8
 800620c:	460b      	mov	r3, r1
 800620e:	18db      	adds	r3, r3, r3
 8006210:	62bb      	str	r3, [r7, #40]	@ 0x28
 8006212:	4613      	mov	r3, r2
 8006214:	eb42 0303 	adc.w	r3, r2, r3
 8006218:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800621a:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 800621e:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	@ 0xb0
 8006222:	f7fa fd31 	bl	8000c88 <__aeabi_uldivmod>
 8006226:	4602      	mov	r2, r0
 8006228:	460b      	mov	r3, r1
 800622a:	4b0d      	ldr	r3, [pc, #52]	@ (8006260 <UART_SetConfig+0x2d4>)
 800622c:	fba3 1302 	umull	r1, r3, r3, r2
 8006230:	095b      	lsrs	r3, r3, #5
 8006232:	2164      	movs	r1, #100	@ 0x64
 8006234:	fb01 f303 	mul.w	r3, r1, r3
 8006238:	1ad3      	subs	r3, r2, r3
 800623a:	00db      	lsls	r3, r3, #3
 800623c:	3332      	adds	r3, #50	@ 0x32
 800623e:	4a08      	ldr	r2, [pc, #32]	@ (8006260 <UART_SetConfig+0x2d4>)
 8006240:	fba2 2303 	umull	r2, r3, r2, r3
 8006244:	095b      	lsrs	r3, r3, #5
 8006246:	f003 0207 	and.w	r2, r3, #7
 800624a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800624e:	681b      	ldr	r3, [r3, #0]
 8006250:	4422      	add	r2, r4
 8006252:	609a      	str	r2, [r3, #8]
 8006254:	e106      	b.n	8006464 <UART_SetConfig+0x4d8>
 8006256:	bf00      	nop
 8006258:	40011000 	.word	0x40011000
 800625c:	40011400 	.word	0x40011400
 8006260:	51eb851f 	.word	0x51eb851f
 8006264:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8006268:	2200      	movs	r2, #0
 800626a:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 800626e:	f8c7 20a4 	str.w	r2, [r7, #164]	@ 0xa4
 8006272:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	@ 0xa0
 8006276:	4642      	mov	r2, r8
 8006278:	464b      	mov	r3, r9
 800627a:	1891      	adds	r1, r2, r2
 800627c:	6239      	str	r1, [r7, #32]
 800627e:	415b      	adcs	r3, r3
 8006280:	627b      	str	r3, [r7, #36]	@ 0x24
 8006282:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8006286:	4641      	mov	r1, r8
 8006288:	1854      	adds	r4, r2, r1
 800628a:	4649      	mov	r1, r9
 800628c:	eb43 0501 	adc.w	r5, r3, r1
 8006290:	f04f 0200 	mov.w	r2, #0
 8006294:	f04f 0300 	mov.w	r3, #0
 8006298:	00eb      	lsls	r3, r5, #3
 800629a:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 800629e:	00e2      	lsls	r2, r4, #3
 80062a0:	4614      	mov	r4, r2
 80062a2:	461d      	mov	r5, r3
 80062a4:	4643      	mov	r3, r8
 80062a6:	18e3      	adds	r3, r4, r3
 80062a8:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 80062ac:	464b      	mov	r3, r9
 80062ae:	eb45 0303 	adc.w	r3, r5, r3
 80062b2:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 80062b6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80062ba:	685b      	ldr	r3, [r3, #4]
 80062bc:	2200      	movs	r2, #0
 80062be:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 80062c2:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 80062c6:	f04f 0200 	mov.w	r2, #0
 80062ca:	f04f 0300 	mov.w	r3, #0
 80062ce:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	@ 0x90
 80062d2:	4629      	mov	r1, r5
 80062d4:	008b      	lsls	r3, r1, #2
 80062d6:	4621      	mov	r1, r4
 80062d8:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80062dc:	4621      	mov	r1, r4
 80062de:	008a      	lsls	r2, r1, #2
 80062e0:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	@ 0x98
 80062e4:	f7fa fcd0 	bl	8000c88 <__aeabi_uldivmod>
 80062e8:	4602      	mov	r2, r0
 80062ea:	460b      	mov	r3, r1
 80062ec:	4b60      	ldr	r3, [pc, #384]	@ (8006470 <UART_SetConfig+0x4e4>)
 80062ee:	fba3 2302 	umull	r2, r3, r3, r2
 80062f2:	095b      	lsrs	r3, r3, #5
 80062f4:	011c      	lsls	r4, r3, #4
 80062f6:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80062fa:	2200      	movs	r2, #0
 80062fc:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 8006300:	f8c7 208c 	str.w	r2, [r7, #140]	@ 0x8c
 8006304:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	@ 0x88
 8006308:	4642      	mov	r2, r8
 800630a:	464b      	mov	r3, r9
 800630c:	1891      	adds	r1, r2, r2
 800630e:	61b9      	str	r1, [r7, #24]
 8006310:	415b      	adcs	r3, r3
 8006312:	61fb      	str	r3, [r7, #28]
 8006314:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8006318:	4641      	mov	r1, r8
 800631a:	1851      	adds	r1, r2, r1
 800631c:	6139      	str	r1, [r7, #16]
 800631e:	4649      	mov	r1, r9
 8006320:	414b      	adcs	r3, r1
 8006322:	617b      	str	r3, [r7, #20]
 8006324:	f04f 0200 	mov.w	r2, #0
 8006328:	f04f 0300 	mov.w	r3, #0
 800632c:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8006330:	4659      	mov	r1, fp
 8006332:	00cb      	lsls	r3, r1, #3
 8006334:	4651      	mov	r1, sl
 8006336:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800633a:	4651      	mov	r1, sl
 800633c:	00ca      	lsls	r2, r1, #3
 800633e:	4610      	mov	r0, r2
 8006340:	4619      	mov	r1, r3
 8006342:	4603      	mov	r3, r0
 8006344:	4642      	mov	r2, r8
 8006346:	189b      	adds	r3, r3, r2
 8006348:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 800634c:	464b      	mov	r3, r9
 800634e:	460a      	mov	r2, r1
 8006350:	eb42 0303 	adc.w	r3, r2, r3
 8006354:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 8006358:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800635c:	685b      	ldr	r3, [r3, #4]
 800635e:	2200      	movs	r2, #0
 8006360:	67bb      	str	r3, [r7, #120]	@ 0x78
 8006362:	67fa      	str	r2, [r7, #124]	@ 0x7c
 8006364:	f04f 0200 	mov.w	r2, #0
 8006368:	f04f 0300 	mov.w	r3, #0
 800636c:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	@ 0x78
 8006370:	4649      	mov	r1, r9
 8006372:	008b      	lsls	r3, r1, #2
 8006374:	4641      	mov	r1, r8
 8006376:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800637a:	4641      	mov	r1, r8
 800637c:	008a      	lsls	r2, r1, #2
 800637e:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	@ 0x80
 8006382:	f7fa fc81 	bl	8000c88 <__aeabi_uldivmod>
 8006386:	4602      	mov	r2, r0
 8006388:	460b      	mov	r3, r1
 800638a:	4611      	mov	r1, r2
 800638c:	4b38      	ldr	r3, [pc, #224]	@ (8006470 <UART_SetConfig+0x4e4>)
 800638e:	fba3 2301 	umull	r2, r3, r3, r1
 8006392:	095b      	lsrs	r3, r3, #5
 8006394:	2264      	movs	r2, #100	@ 0x64
 8006396:	fb02 f303 	mul.w	r3, r2, r3
 800639a:	1acb      	subs	r3, r1, r3
 800639c:	011b      	lsls	r3, r3, #4
 800639e:	3332      	adds	r3, #50	@ 0x32
 80063a0:	4a33      	ldr	r2, [pc, #204]	@ (8006470 <UART_SetConfig+0x4e4>)
 80063a2:	fba2 2303 	umull	r2, r3, r2, r3
 80063a6:	095b      	lsrs	r3, r3, #5
 80063a8:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 80063ac:	441c      	add	r4, r3
 80063ae:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80063b2:	2200      	movs	r2, #0
 80063b4:	673b      	str	r3, [r7, #112]	@ 0x70
 80063b6:	677a      	str	r2, [r7, #116]	@ 0x74
 80063b8:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	@ 0x70
 80063bc:	4642      	mov	r2, r8
 80063be:	464b      	mov	r3, r9
 80063c0:	1891      	adds	r1, r2, r2
 80063c2:	60b9      	str	r1, [r7, #8]
 80063c4:	415b      	adcs	r3, r3
 80063c6:	60fb      	str	r3, [r7, #12]
 80063c8:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 80063cc:	4641      	mov	r1, r8
 80063ce:	1851      	adds	r1, r2, r1
 80063d0:	6039      	str	r1, [r7, #0]
 80063d2:	4649      	mov	r1, r9
 80063d4:	414b      	adcs	r3, r1
 80063d6:	607b      	str	r3, [r7, #4]
 80063d8:	f04f 0200 	mov.w	r2, #0
 80063dc:	f04f 0300 	mov.w	r3, #0
 80063e0:	e9d7 ab00 	ldrd	sl, fp, [r7]
 80063e4:	4659      	mov	r1, fp
 80063e6:	00cb      	lsls	r3, r1, #3
 80063e8:	4651      	mov	r1, sl
 80063ea:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80063ee:	4651      	mov	r1, sl
 80063f0:	00ca      	lsls	r2, r1, #3
 80063f2:	4610      	mov	r0, r2
 80063f4:	4619      	mov	r1, r3
 80063f6:	4603      	mov	r3, r0
 80063f8:	4642      	mov	r2, r8
 80063fa:	189b      	adds	r3, r3, r2
 80063fc:	66bb      	str	r3, [r7, #104]	@ 0x68
 80063fe:	464b      	mov	r3, r9
 8006400:	460a      	mov	r2, r1
 8006402:	eb42 0303 	adc.w	r3, r2, r3
 8006406:	66fb      	str	r3, [r7, #108]	@ 0x6c
 8006408:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800640c:	685b      	ldr	r3, [r3, #4]
 800640e:	2200      	movs	r2, #0
 8006410:	663b      	str	r3, [r7, #96]	@ 0x60
 8006412:	667a      	str	r2, [r7, #100]	@ 0x64
 8006414:	f04f 0200 	mov.w	r2, #0
 8006418:	f04f 0300 	mov.w	r3, #0
 800641c:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	@ 0x60
 8006420:	4649      	mov	r1, r9
 8006422:	008b      	lsls	r3, r1, #2
 8006424:	4641      	mov	r1, r8
 8006426:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800642a:	4641      	mov	r1, r8
 800642c:	008a      	lsls	r2, r1, #2
 800642e:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	@ 0x68
 8006432:	f7fa fc29 	bl	8000c88 <__aeabi_uldivmod>
 8006436:	4602      	mov	r2, r0
 8006438:	460b      	mov	r3, r1
 800643a:	4b0d      	ldr	r3, [pc, #52]	@ (8006470 <UART_SetConfig+0x4e4>)
 800643c:	fba3 1302 	umull	r1, r3, r3, r2
 8006440:	095b      	lsrs	r3, r3, #5
 8006442:	2164      	movs	r1, #100	@ 0x64
 8006444:	fb01 f303 	mul.w	r3, r1, r3
 8006448:	1ad3      	subs	r3, r2, r3
 800644a:	011b      	lsls	r3, r3, #4
 800644c:	3332      	adds	r3, #50	@ 0x32
 800644e:	4a08      	ldr	r2, [pc, #32]	@ (8006470 <UART_SetConfig+0x4e4>)
 8006450:	fba2 2303 	umull	r2, r3, r2, r3
 8006454:	095b      	lsrs	r3, r3, #5
 8006456:	f003 020f 	and.w	r2, r3, #15
 800645a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800645e:	681b      	ldr	r3, [r3, #0]
 8006460:	4422      	add	r2, r4
 8006462:	609a      	str	r2, [r3, #8]
 8006464:	bf00      	nop
 8006466:	f507 7780 	add.w	r7, r7, #256	@ 0x100
 800646a:	46bd      	mov	sp, r7
 800646c:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8006470:	51eb851f 	.word	0x51eb851f

08006474 <__cvt>:
 8006474:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8006478:	ec57 6b10 	vmov	r6, r7, d0
 800647c:	2f00      	cmp	r7, #0
 800647e:	460c      	mov	r4, r1
 8006480:	4619      	mov	r1, r3
 8006482:	463b      	mov	r3, r7
 8006484:	bfbb      	ittet	lt
 8006486:	f107 4300 	addlt.w	r3, r7, #2147483648	@ 0x80000000
 800648a:	461f      	movlt	r7, r3
 800648c:	2300      	movge	r3, #0
 800648e:	232d      	movlt	r3, #45	@ 0x2d
 8006490:	700b      	strb	r3, [r1, #0]
 8006492:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8006494:	f8dd a030 	ldr.w	sl, [sp, #48]	@ 0x30
 8006498:	4691      	mov	r9, r2
 800649a:	f023 0820 	bic.w	r8, r3, #32
 800649e:	bfbc      	itt	lt
 80064a0:	4632      	movlt	r2, r6
 80064a2:	4616      	movlt	r6, r2
 80064a4:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 80064a8:	d005      	beq.n	80064b6 <__cvt+0x42>
 80064aa:	f1b8 0f45 	cmp.w	r8, #69	@ 0x45
 80064ae:	d100      	bne.n	80064b2 <__cvt+0x3e>
 80064b0:	3401      	adds	r4, #1
 80064b2:	2102      	movs	r1, #2
 80064b4:	e000      	b.n	80064b8 <__cvt+0x44>
 80064b6:	2103      	movs	r1, #3
 80064b8:	ab03      	add	r3, sp, #12
 80064ba:	9301      	str	r3, [sp, #4]
 80064bc:	ab02      	add	r3, sp, #8
 80064be:	9300      	str	r3, [sp, #0]
 80064c0:	ec47 6b10 	vmov	d0, r6, r7
 80064c4:	4653      	mov	r3, sl
 80064c6:	4622      	mov	r2, r4
 80064c8:	f000 fe82 	bl	80071d0 <_dtoa_r>
 80064cc:	f1b8 0f47 	cmp.w	r8, #71	@ 0x47
 80064d0:	4605      	mov	r5, r0
 80064d2:	d119      	bne.n	8006508 <__cvt+0x94>
 80064d4:	f019 0f01 	tst.w	r9, #1
 80064d8:	d00e      	beq.n	80064f8 <__cvt+0x84>
 80064da:	eb00 0904 	add.w	r9, r0, r4
 80064de:	2200      	movs	r2, #0
 80064e0:	2300      	movs	r3, #0
 80064e2:	4630      	mov	r0, r6
 80064e4:	4639      	mov	r1, r7
 80064e6:	f7fa fb0f 	bl	8000b08 <__aeabi_dcmpeq>
 80064ea:	b108      	cbz	r0, 80064f0 <__cvt+0x7c>
 80064ec:	f8cd 900c 	str.w	r9, [sp, #12]
 80064f0:	2230      	movs	r2, #48	@ 0x30
 80064f2:	9b03      	ldr	r3, [sp, #12]
 80064f4:	454b      	cmp	r3, r9
 80064f6:	d31e      	bcc.n	8006536 <__cvt+0xc2>
 80064f8:	9b03      	ldr	r3, [sp, #12]
 80064fa:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 80064fc:	1b5b      	subs	r3, r3, r5
 80064fe:	4628      	mov	r0, r5
 8006500:	6013      	str	r3, [r2, #0]
 8006502:	b004      	add	sp, #16
 8006504:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006508:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 800650c:	eb00 0904 	add.w	r9, r0, r4
 8006510:	d1e5      	bne.n	80064de <__cvt+0x6a>
 8006512:	7803      	ldrb	r3, [r0, #0]
 8006514:	2b30      	cmp	r3, #48	@ 0x30
 8006516:	d10a      	bne.n	800652e <__cvt+0xba>
 8006518:	2200      	movs	r2, #0
 800651a:	2300      	movs	r3, #0
 800651c:	4630      	mov	r0, r6
 800651e:	4639      	mov	r1, r7
 8006520:	f7fa faf2 	bl	8000b08 <__aeabi_dcmpeq>
 8006524:	b918      	cbnz	r0, 800652e <__cvt+0xba>
 8006526:	f1c4 0401 	rsb	r4, r4, #1
 800652a:	f8ca 4000 	str.w	r4, [sl]
 800652e:	f8da 3000 	ldr.w	r3, [sl]
 8006532:	4499      	add	r9, r3
 8006534:	e7d3      	b.n	80064de <__cvt+0x6a>
 8006536:	1c59      	adds	r1, r3, #1
 8006538:	9103      	str	r1, [sp, #12]
 800653a:	701a      	strb	r2, [r3, #0]
 800653c:	e7d9      	b.n	80064f2 <__cvt+0x7e>

0800653e <__exponent>:
 800653e:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8006540:	2900      	cmp	r1, #0
 8006542:	bfba      	itte	lt
 8006544:	4249      	neglt	r1, r1
 8006546:	232d      	movlt	r3, #45	@ 0x2d
 8006548:	232b      	movge	r3, #43	@ 0x2b
 800654a:	2909      	cmp	r1, #9
 800654c:	7002      	strb	r2, [r0, #0]
 800654e:	7043      	strb	r3, [r0, #1]
 8006550:	dd29      	ble.n	80065a6 <__exponent+0x68>
 8006552:	f10d 0307 	add.w	r3, sp, #7
 8006556:	461d      	mov	r5, r3
 8006558:	270a      	movs	r7, #10
 800655a:	461a      	mov	r2, r3
 800655c:	fbb1 f6f7 	udiv	r6, r1, r7
 8006560:	fb07 1416 	mls	r4, r7, r6, r1
 8006564:	3430      	adds	r4, #48	@ 0x30
 8006566:	f802 4c01 	strb.w	r4, [r2, #-1]
 800656a:	460c      	mov	r4, r1
 800656c:	2c63      	cmp	r4, #99	@ 0x63
 800656e:	f103 33ff 	add.w	r3, r3, #4294967295
 8006572:	4631      	mov	r1, r6
 8006574:	dcf1      	bgt.n	800655a <__exponent+0x1c>
 8006576:	3130      	adds	r1, #48	@ 0x30
 8006578:	1e94      	subs	r4, r2, #2
 800657a:	f803 1c01 	strb.w	r1, [r3, #-1]
 800657e:	1c41      	adds	r1, r0, #1
 8006580:	4623      	mov	r3, r4
 8006582:	42ab      	cmp	r3, r5
 8006584:	d30a      	bcc.n	800659c <__exponent+0x5e>
 8006586:	f10d 0309 	add.w	r3, sp, #9
 800658a:	1a9b      	subs	r3, r3, r2
 800658c:	42ac      	cmp	r4, r5
 800658e:	bf88      	it	hi
 8006590:	2300      	movhi	r3, #0
 8006592:	3302      	adds	r3, #2
 8006594:	4403      	add	r3, r0
 8006596:	1a18      	subs	r0, r3, r0
 8006598:	b003      	add	sp, #12
 800659a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800659c:	f813 6b01 	ldrb.w	r6, [r3], #1
 80065a0:	f801 6f01 	strb.w	r6, [r1, #1]!
 80065a4:	e7ed      	b.n	8006582 <__exponent+0x44>
 80065a6:	2330      	movs	r3, #48	@ 0x30
 80065a8:	3130      	adds	r1, #48	@ 0x30
 80065aa:	7083      	strb	r3, [r0, #2]
 80065ac:	70c1      	strb	r1, [r0, #3]
 80065ae:	1d03      	adds	r3, r0, #4
 80065b0:	e7f1      	b.n	8006596 <__exponent+0x58>
	...

080065b4 <_printf_float>:
 80065b4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80065b8:	b08d      	sub	sp, #52	@ 0x34
 80065ba:	460c      	mov	r4, r1
 80065bc:	f8dd 8058 	ldr.w	r8, [sp, #88]	@ 0x58
 80065c0:	4616      	mov	r6, r2
 80065c2:	461f      	mov	r7, r3
 80065c4:	4605      	mov	r5, r0
 80065c6:	f000 fd01 	bl	8006fcc <_localeconv_r>
 80065ca:	6803      	ldr	r3, [r0, #0]
 80065cc:	9304      	str	r3, [sp, #16]
 80065ce:	4618      	mov	r0, r3
 80065d0:	f7f9 fe6e 	bl	80002b0 <strlen>
 80065d4:	2300      	movs	r3, #0
 80065d6:	930a      	str	r3, [sp, #40]	@ 0x28
 80065d8:	f8d8 3000 	ldr.w	r3, [r8]
 80065dc:	9005      	str	r0, [sp, #20]
 80065de:	3307      	adds	r3, #7
 80065e0:	f023 0307 	bic.w	r3, r3, #7
 80065e4:	f103 0208 	add.w	r2, r3, #8
 80065e8:	f894 a018 	ldrb.w	sl, [r4, #24]
 80065ec:	f8d4 b000 	ldr.w	fp, [r4]
 80065f0:	f8c8 2000 	str.w	r2, [r8]
 80065f4:	e9d3 8900 	ldrd	r8, r9, [r3]
 80065f8:	f029 4300 	bic.w	r3, r9, #2147483648	@ 0x80000000
 80065fc:	9307      	str	r3, [sp, #28]
 80065fe:	f8cd 8018 	str.w	r8, [sp, #24]
 8006602:	e9c4 8912 	strd	r8, r9, [r4, #72]	@ 0x48
 8006606:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800660a:	4b9c      	ldr	r3, [pc, #624]	@ (800687c <_printf_float+0x2c8>)
 800660c:	f04f 32ff 	mov.w	r2, #4294967295
 8006610:	f7fa faac 	bl	8000b6c <__aeabi_dcmpun>
 8006614:	bb70      	cbnz	r0, 8006674 <_printf_float+0xc0>
 8006616:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800661a:	4b98      	ldr	r3, [pc, #608]	@ (800687c <_printf_float+0x2c8>)
 800661c:	f04f 32ff 	mov.w	r2, #4294967295
 8006620:	f7fa fa86 	bl	8000b30 <__aeabi_dcmple>
 8006624:	bb30      	cbnz	r0, 8006674 <_printf_float+0xc0>
 8006626:	2200      	movs	r2, #0
 8006628:	2300      	movs	r3, #0
 800662a:	4640      	mov	r0, r8
 800662c:	4649      	mov	r1, r9
 800662e:	f7fa fa75 	bl	8000b1c <__aeabi_dcmplt>
 8006632:	b110      	cbz	r0, 800663a <_printf_float+0x86>
 8006634:	232d      	movs	r3, #45	@ 0x2d
 8006636:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800663a:	4a91      	ldr	r2, [pc, #580]	@ (8006880 <_printf_float+0x2cc>)
 800663c:	4b91      	ldr	r3, [pc, #580]	@ (8006884 <_printf_float+0x2d0>)
 800663e:	f1ba 0f47 	cmp.w	sl, #71	@ 0x47
 8006642:	bf94      	ite	ls
 8006644:	4690      	movls	r8, r2
 8006646:	4698      	movhi	r8, r3
 8006648:	2303      	movs	r3, #3
 800664a:	6123      	str	r3, [r4, #16]
 800664c:	f02b 0304 	bic.w	r3, fp, #4
 8006650:	6023      	str	r3, [r4, #0]
 8006652:	f04f 0900 	mov.w	r9, #0
 8006656:	9700      	str	r7, [sp, #0]
 8006658:	4633      	mov	r3, r6
 800665a:	aa0b      	add	r2, sp, #44	@ 0x2c
 800665c:	4621      	mov	r1, r4
 800665e:	4628      	mov	r0, r5
 8006660:	f000 f9d2 	bl	8006a08 <_printf_common>
 8006664:	3001      	adds	r0, #1
 8006666:	f040 808d 	bne.w	8006784 <_printf_float+0x1d0>
 800666a:	f04f 30ff 	mov.w	r0, #4294967295
 800666e:	b00d      	add	sp, #52	@ 0x34
 8006670:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006674:	4642      	mov	r2, r8
 8006676:	464b      	mov	r3, r9
 8006678:	4640      	mov	r0, r8
 800667a:	4649      	mov	r1, r9
 800667c:	f7fa fa76 	bl	8000b6c <__aeabi_dcmpun>
 8006680:	b140      	cbz	r0, 8006694 <_printf_float+0xe0>
 8006682:	464b      	mov	r3, r9
 8006684:	2b00      	cmp	r3, #0
 8006686:	bfbc      	itt	lt
 8006688:	232d      	movlt	r3, #45	@ 0x2d
 800668a:	f884 3043 	strblt.w	r3, [r4, #67]	@ 0x43
 800668e:	4a7e      	ldr	r2, [pc, #504]	@ (8006888 <_printf_float+0x2d4>)
 8006690:	4b7e      	ldr	r3, [pc, #504]	@ (800688c <_printf_float+0x2d8>)
 8006692:	e7d4      	b.n	800663e <_printf_float+0x8a>
 8006694:	6863      	ldr	r3, [r4, #4]
 8006696:	f00a 02df 	and.w	r2, sl, #223	@ 0xdf
 800669a:	9206      	str	r2, [sp, #24]
 800669c:	1c5a      	adds	r2, r3, #1
 800669e:	d13b      	bne.n	8006718 <_printf_float+0x164>
 80066a0:	2306      	movs	r3, #6
 80066a2:	6063      	str	r3, [r4, #4]
 80066a4:	f44b 6280 	orr.w	r2, fp, #1024	@ 0x400
 80066a8:	2300      	movs	r3, #0
 80066aa:	6022      	str	r2, [r4, #0]
 80066ac:	9303      	str	r3, [sp, #12]
 80066ae:	ab0a      	add	r3, sp, #40	@ 0x28
 80066b0:	e9cd a301 	strd	sl, r3, [sp, #4]
 80066b4:	ab09      	add	r3, sp, #36	@ 0x24
 80066b6:	9300      	str	r3, [sp, #0]
 80066b8:	6861      	ldr	r1, [r4, #4]
 80066ba:	ec49 8b10 	vmov	d0, r8, r9
 80066be:	f10d 0323 	add.w	r3, sp, #35	@ 0x23
 80066c2:	4628      	mov	r0, r5
 80066c4:	f7ff fed6 	bl	8006474 <__cvt>
 80066c8:	9b06      	ldr	r3, [sp, #24]
 80066ca:	9909      	ldr	r1, [sp, #36]	@ 0x24
 80066cc:	2b47      	cmp	r3, #71	@ 0x47
 80066ce:	4680      	mov	r8, r0
 80066d0:	d129      	bne.n	8006726 <_printf_float+0x172>
 80066d2:	1cc8      	adds	r0, r1, #3
 80066d4:	db02      	blt.n	80066dc <_printf_float+0x128>
 80066d6:	6863      	ldr	r3, [r4, #4]
 80066d8:	4299      	cmp	r1, r3
 80066da:	dd41      	ble.n	8006760 <_printf_float+0x1ac>
 80066dc:	f1aa 0a02 	sub.w	sl, sl, #2
 80066e0:	fa5f fa8a 	uxtb.w	sl, sl
 80066e4:	3901      	subs	r1, #1
 80066e6:	4652      	mov	r2, sl
 80066e8:	f104 0050 	add.w	r0, r4, #80	@ 0x50
 80066ec:	9109      	str	r1, [sp, #36]	@ 0x24
 80066ee:	f7ff ff26 	bl	800653e <__exponent>
 80066f2:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 80066f4:	1813      	adds	r3, r2, r0
 80066f6:	2a01      	cmp	r2, #1
 80066f8:	4681      	mov	r9, r0
 80066fa:	6123      	str	r3, [r4, #16]
 80066fc:	dc02      	bgt.n	8006704 <_printf_float+0x150>
 80066fe:	6822      	ldr	r2, [r4, #0]
 8006700:	07d2      	lsls	r2, r2, #31
 8006702:	d501      	bpl.n	8006708 <_printf_float+0x154>
 8006704:	3301      	adds	r3, #1
 8006706:	6123      	str	r3, [r4, #16]
 8006708:	f89d 3023 	ldrb.w	r3, [sp, #35]	@ 0x23
 800670c:	2b00      	cmp	r3, #0
 800670e:	d0a2      	beq.n	8006656 <_printf_float+0xa2>
 8006710:	232d      	movs	r3, #45	@ 0x2d
 8006712:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8006716:	e79e      	b.n	8006656 <_printf_float+0xa2>
 8006718:	9a06      	ldr	r2, [sp, #24]
 800671a:	2a47      	cmp	r2, #71	@ 0x47
 800671c:	d1c2      	bne.n	80066a4 <_printf_float+0xf0>
 800671e:	2b00      	cmp	r3, #0
 8006720:	d1c0      	bne.n	80066a4 <_printf_float+0xf0>
 8006722:	2301      	movs	r3, #1
 8006724:	e7bd      	b.n	80066a2 <_printf_float+0xee>
 8006726:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 800672a:	d9db      	bls.n	80066e4 <_printf_float+0x130>
 800672c:	f1ba 0f66 	cmp.w	sl, #102	@ 0x66
 8006730:	d118      	bne.n	8006764 <_printf_float+0x1b0>
 8006732:	2900      	cmp	r1, #0
 8006734:	6863      	ldr	r3, [r4, #4]
 8006736:	dd0b      	ble.n	8006750 <_printf_float+0x19c>
 8006738:	6121      	str	r1, [r4, #16]
 800673a:	b913      	cbnz	r3, 8006742 <_printf_float+0x18e>
 800673c:	6822      	ldr	r2, [r4, #0]
 800673e:	07d0      	lsls	r0, r2, #31
 8006740:	d502      	bpl.n	8006748 <_printf_float+0x194>
 8006742:	3301      	adds	r3, #1
 8006744:	440b      	add	r3, r1
 8006746:	6123      	str	r3, [r4, #16]
 8006748:	65a1      	str	r1, [r4, #88]	@ 0x58
 800674a:	f04f 0900 	mov.w	r9, #0
 800674e:	e7db      	b.n	8006708 <_printf_float+0x154>
 8006750:	b913      	cbnz	r3, 8006758 <_printf_float+0x1a4>
 8006752:	6822      	ldr	r2, [r4, #0]
 8006754:	07d2      	lsls	r2, r2, #31
 8006756:	d501      	bpl.n	800675c <_printf_float+0x1a8>
 8006758:	3302      	adds	r3, #2
 800675a:	e7f4      	b.n	8006746 <_printf_float+0x192>
 800675c:	2301      	movs	r3, #1
 800675e:	e7f2      	b.n	8006746 <_printf_float+0x192>
 8006760:	f04f 0a67 	mov.w	sl, #103	@ 0x67
 8006764:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8006766:	4299      	cmp	r1, r3
 8006768:	db05      	blt.n	8006776 <_printf_float+0x1c2>
 800676a:	6823      	ldr	r3, [r4, #0]
 800676c:	6121      	str	r1, [r4, #16]
 800676e:	07d8      	lsls	r0, r3, #31
 8006770:	d5ea      	bpl.n	8006748 <_printf_float+0x194>
 8006772:	1c4b      	adds	r3, r1, #1
 8006774:	e7e7      	b.n	8006746 <_printf_float+0x192>
 8006776:	2900      	cmp	r1, #0
 8006778:	bfd4      	ite	le
 800677a:	f1c1 0202 	rsble	r2, r1, #2
 800677e:	2201      	movgt	r2, #1
 8006780:	4413      	add	r3, r2
 8006782:	e7e0      	b.n	8006746 <_printf_float+0x192>
 8006784:	6823      	ldr	r3, [r4, #0]
 8006786:	055a      	lsls	r2, r3, #21
 8006788:	d407      	bmi.n	800679a <_printf_float+0x1e6>
 800678a:	6923      	ldr	r3, [r4, #16]
 800678c:	4642      	mov	r2, r8
 800678e:	4631      	mov	r1, r6
 8006790:	4628      	mov	r0, r5
 8006792:	47b8      	blx	r7
 8006794:	3001      	adds	r0, #1
 8006796:	d12b      	bne.n	80067f0 <_printf_float+0x23c>
 8006798:	e767      	b.n	800666a <_printf_float+0xb6>
 800679a:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 800679e:	f240 80dd 	bls.w	800695c <_printf_float+0x3a8>
 80067a2:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 80067a6:	2200      	movs	r2, #0
 80067a8:	2300      	movs	r3, #0
 80067aa:	f7fa f9ad 	bl	8000b08 <__aeabi_dcmpeq>
 80067ae:	2800      	cmp	r0, #0
 80067b0:	d033      	beq.n	800681a <_printf_float+0x266>
 80067b2:	4a37      	ldr	r2, [pc, #220]	@ (8006890 <_printf_float+0x2dc>)
 80067b4:	2301      	movs	r3, #1
 80067b6:	4631      	mov	r1, r6
 80067b8:	4628      	mov	r0, r5
 80067ba:	47b8      	blx	r7
 80067bc:	3001      	adds	r0, #1
 80067be:	f43f af54 	beq.w	800666a <_printf_float+0xb6>
 80067c2:	e9dd 3809 	ldrd	r3, r8, [sp, #36]	@ 0x24
 80067c6:	4543      	cmp	r3, r8
 80067c8:	db02      	blt.n	80067d0 <_printf_float+0x21c>
 80067ca:	6823      	ldr	r3, [r4, #0]
 80067cc:	07d8      	lsls	r0, r3, #31
 80067ce:	d50f      	bpl.n	80067f0 <_printf_float+0x23c>
 80067d0:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 80067d4:	4631      	mov	r1, r6
 80067d6:	4628      	mov	r0, r5
 80067d8:	47b8      	blx	r7
 80067da:	3001      	adds	r0, #1
 80067dc:	f43f af45 	beq.w	800666a <_printf_float+0xb6>
 80067e0:	f04f 0900 	mov.w	r9, #0
 80067e4:	f108 38ff 	add.w	r8, r8, #4294967295
 80067e8:	f104 0a1a 	add.w	sl, r4, #26
 80067ec:	45c8      	cmp	r8, r9
 80067ee:	dc09      	bgt.n	8006804 <_printf_float+0x250>
 80067f0:	6823      	ldr	r3, [r4, #0]
 80067f2:	079b      	lsls	r3, r3, #30
 80067f4:	f100 8103 	bmi.w	80069fe <_printf_float+0x44a>
 80067f8:	68e0      	ldr	r0, [r4, #12]
 80067fa:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 80067fc:	4298      	cmp	r0, r3
 80067fe:	bfb8      	it	lt
 8006800:	4618      	movlt	r0, r3
 8006802:	e734      	b.n	800666e <_printf_float+0xba>
 8006804:	2301      	movs	r3, #1
 8006806:	4652      	mov	r2, sl
 8006808:	4631      	mov	r1, r6
 800680a:	4628      	mov	r0, r5
 800680c:	47b8      	blx	r7
 800680e:	3001      	adds	r0, #1
 8006810:	f43f af2b 	beq.w	800666a <_printf_float+0xb6>
 8006814:	f109 0901 	add.w	r9, r9, #1
 8006818:	e7e8      	b.n	80067ec <_printf_float+0x238>
 800681a:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800681c:	2b00      	cmp	r3, #0
 800681e:	dc39      	bgt.n	8006894 <_printf_float+0x2e0>
 8006820:	4a1b      	ldr	r2, [pc, #108]	@ (8006890 <_printf_float+0x2dc>)
 8006822:	2301      	movs	r3, #1
 8006824:	4631      	mov	r1, r6
 8006826:	4628      	mov	r0, r5
 8006828:	47b8      	blx	r7
 800682a:	3001      	adds	r0, #1
 800682c:	f43f af1d 	beq.w	800666a <_printf_float+0xb6>
 8006830:	e9dd 3909 	ldrd	r3, r9, [sp, #36]	@ 0x24
 8006834:	ea59 0303 	orrs.w	r3, r9, r3
 8006838:	d102      	bne.n	8006840 <_printf_float+0x28c>
 800683a:	6823      	ldr	r3, [r4, #0]
 800683c:	07d9      	lsls	r1, r3, #31
 800683e:	d5d7      	bpl.n	80067f0 <_printf_float+0x23c>
 8006840:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8006844:	4631      	mov	r1, r6
 8006846:	4628      	mov	r0, r5
 8006848:	47b8      	blx	r7
 800684a:	3001      	adds	r0, #1
 800684c:	f43f af0d 	beq.w	800666a <_printf_float+0xb6>
 8006850:	f04f 0a00 	mov.w	sl, #0
 8006854:	f104 0b1a 	add.w	fp, r4, #26
 8006858:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800685a:	425b      	negs	r3, r3
 800685c:	4553      	cmp	r3, sl
 800685e:	dc01      	bgt.n	8006864 <_printf_float+0x2b0>
 8006860:	464b      	mov	r3, r9
 8006862:	e793      	b.n	800678c <_printf_float+0x1d8>
 8006864:	2301      	movs	r3, #1
 8006866:	465a      	mov	r2, fp
 8006868:	4631      	mov	r1, r6
 800686a:	4628      	mov	r0, r5
 800686c:	47b8      	blx	r7
 800686e:	3001      	adds	r0, #1
 8006870:	f43f aefb 	beq.w	800666a <_printf_float+0xb6>
 8006874:	f10a 0a01 	add.w	sl, sl, #1
 8006878:	e7ee      	b.n	8006858 <_printf_float+0x2a4>
 800687a:	bf00      	nop
 800687c:	7fefffff 	.word	0x7fefffff
 8006880:	0800a350 	.word	0x0800a350
 8006884:	0800a354 	.word	0x0800a354
 8006888:	0800a358 	.word	0x0800a358
 800688c:	0800a35c 	.word	0x0800a35c
 8006890:	0800a360 	.word	0x0800a360
 8006894:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 8006896:	f8dd a028 	ldr.w	sl, [sp, #40]	@ 0x28
 800689a:	4553      	cmp	r3, sl
 800689c:	bfa8      	it	ge
 800689e:	4653      	movge	r3, sl
 80068a0:	2b00      	cmp	r3, #0
 80068a2:	4699      	mov	r9, r3
 80068a4:	dc36      	bgt.n	8006914 <_printf_float+0x360>
 80068a6:	f04f 0b00 	mov.w	fp, #0
 80068aa:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 80068ae:	f104 021a 	add.w	r2, r4, #26
 80068b2:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 80068b4:	9306      	str	r3, [sp, #24]
 80068b6:	eba3 0309 	sub.w	r3, r3, r9
 80068ba:	455b      	cmp	r3, fp
 80068bc:	dc31      	bgt.n	8006922 <_printf_float+0x36e>
 80068be:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80068c0:	459a      	cmp	sl, r3
 80068c2:	dc3a      	bgt.n	800693a <_printf_float+0x386>
 80068c4:	6823      	ldr	r3, [r4, #0]
 80068c6:	07da      	lsls	r2, r3, #31
 80068c8:	d437      	bmi.n	800693a <_printf_float+0x386>
 80068ca:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80068cc:	ebaa 0903 	sub.w	r9, sl, r3
 80068d0:	9b06      	ldr	r3, [sp, #24]
 80068d2:	ebaa 0303 	sub.w	r3, sl, r3
 80068d6:	4599      	cmp	r9, r3
 80068d8:	bfa8      	it	ge
 80068da:	4699      	movge	r9, r3
 80068dc:	f1b9 0f00 	cmp.w	r9, #0
 80068e0:	dc33      	bgt.n	800694a <_printf_float+0x396>
 80068e2:	f04f 0800 	mov.w	r8, #0
 80068e6:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 80068ea:	f104 0b1a 	add.w	fp, r4, #26
 80068ee:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80068f0:	ebaa 0303 	sub.w	r3, sl, r3
 80068f4:	eba3 0309 	sub.w	r3, r3, r9
 80068f8:	4543      	cmp	r3, r8
 80068fa:	f77f af79 	ble.w	80067f0 <_printf_float+0x23c>
 80068fe:	2301      	movs	r3, #1
 8006900:	465a      	mov	r2, fp
 8006902:	4631      	mov	r1, r6
 8006904:	4628      	mov	r0, r5
 8006906:	47b8      	blx	r7
 8006908:	3001      	adds	r0, #1
 800690a:	f43f aeae 	beq.w	800666a <_printf_float+0xb6>
 800690e:	f108 0801 	add.w	r8, r8, #1
 8006912:	e7ec      	b.n	80068ee <_printf_float+0x33a>
 8006914:	4642      	mov	r2, r8
 8006916:	4631      	mov	r1, r6
 8006918:	4628      	mov	r0, r5
 800691a:	47b8      	blx	r7
 800691c:	3001      	adds	r0, #1
 800691e:	d1c2      	bne.n	80068a6 <_printf_float+0x2f2>
 8006920:	e6a3      	b.n	800666a <_printf_float+0xb6>
 8006922:	2301      	movs	r3, #1
 8006924:	4631      	mov	r1, r6
 8006926:	4628      	mov	r0, r5
 8006928:	9206      	str	r2, [sp, #24]
 800692a:	47b8      	blx	r7
 800692c:	3001      	adds	r0, #1
 800692e:	f43f ae9c 	beq.w	800666a <_printf_float+0xb6>
 8006932:	9a06      	ldr	r2, [sp, #24]
 8006934:	f10b 0b01 	add.w	fp, fp, #1
 8006938:	e7bb      	b.n	80068b2 <_printf_float+0x2fe>
 800693a:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800693e:	4631      	mov	r1, r6
 8006940:	4628      	mov	r0, r5
 8006942:	47b8      	blx	r7
 8006944:	3001      	adds	r0, #1
 8006946:	d1c0      	bne.n	80068ca <_printf_float+0x316>
 8006948:	e68f      	b.n	800666a <_printf_float+0xb6>
 800694a:	9a06      	ldr	r2, [sp, #24]
 800694c:	464b      	mov	r3, r9
 800694e:	4442      	add	r2, r8
 8006950:	4631      	mov	r1, r6
 8006952:	4628      	mov	r0, r5
 8006954:	47b8      	blx	r7
 8006956:	3001      	adds	r0, #1
 8006958:	d1c3      	bne.n	80068e2 <_printf_float+0x32e>
 800695a:	e686      	b.n	800666a <_printf_float+0xb6>
 800695c:	f8dd a028 	ldr.w	sl, [sp, #40]	@ 0x28
 8006960:	f1ba 0f01 	cmp.w	sl, #1
 8006964:	dc01      	bgt.n	800696a <_printf_float+0x3b6>
 8006966:	07db      	lsls	r3, r3, #31
 8006968:	d536      	bpl.n	80069d8 <_printf_float+0x424>
 800696a:	2301      	movs	r3, #1
 800696c:	4642      	mov	r2, r8
 800696e:	4631      	mov	r1, r6
 8006970:	4628      	mov	r0, r5
 8006972:	47b8      	blx	r7
 8006974:	3001      	adds	r0, #1
 8006976:	f43f ae78 	beq.w	800666a <_printf_float+0xb6>
 800697a:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800697e:	4631      	mov	r1, r6
 8006980:	4628      	mov	r0, r5
 8006982:	47b8      	blx	r7
 8006984:	3001      	adds	r0, #1
 8006986:	f43f ae70 	beq.w	800666a <_printf_float+0xb6>
 800698a:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 800698e:	2200      	movs	r2, #0
 8006990:	2300      	movs	r3, #0
 8006992:	f10a 3aff 	add.w	sl, sl, #4294967295
 8006996:	f7fa f8b7 	bl	8000b08 <__aeabi_dcmpeq>
 800699a:	b9c0      	cbnz	r0, 80069ce <_printf_float+0x41a>
 800699c:	4653      	mov	r3, sl
 800699e:	f108 0201 	add.w	r2, r8, #1
 80069a2:	4631      	mov	r1, r6
 80069a4:	4628      	mov	r0, r5
 80069a6:	47b8      	blx	r7
 80069a8:	3001      	adds	r0, #1
 80069aa:	d10c      	bne.n	80069c6 <_printf_float+0x412>
 80069ac:	e65d      	b.n	800666a <_printf_float+0xb6>
 80069ae:	2301      	movs	r3, #1
 80069b0:	465a      	mov	r2, fp
 80069b2:	4631      	mov	r1, r6
 80069b4:	4628      	mov	r0, r5
 80069b6:	47b8      	blx	r7
 80069b8:	3001      	adds	r0, #1
 80069ba:	f43f ae56 	beq.w	800666a <_printf_float+0xb6>
 80069be:	f108 0801 	add.w	r8, r8, #1
 80069c2:	45d0      	cmp	r8, sl
 80069c4:	dbf3      	blt.n	80069ae <_printf_float+0x3fa>
 80069c6:	464b      	mov	r3, r9
 80069c8:	f104 0250 	add.w	r2, r4, #80	@ 0x50
 80069cc:	e6df      	b.n	800678e <_printf_float+0x1da>
 80069ce:	f04f 0800 	mov.w	r8, #0
 80069d2:	f104 0b1a 	add.w	fp, r4, #26
 80069d6:	e7f4      	b.n	80069c2 <_printf_float+0x40e>
 80069d8:	2301      	movs	r3, #1
 80069da:	4642      	mov	r2, r8
 80069dc:	e7e1      	b.n	80069a2 <_printf_float+0x3ee>
 80069de:	2301      	movs	r3, #1
 80069e0:	464a      	mov	r2, r9
 80069e2:	4631      	mov	r1, r6
 80069e4:	4628      	mov	r0, r5
 80069e6:	47b8      	blx	r7
 80069e8:	3001      	adds	r0, #1
 80069ea:	f43f ae3e 	beq.w	800666a <_printf_float+0xb6>
 80069ee:	f108 0801 	add.w	r8, r8, #1
 80069f2:	68e3      	ldr	r3, [r4, #12]
 80069f4:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 80069f6:	1a5b      	subs	r3, r3, r1
 80069f8:	4543      	cmp	r3, r8
 80069fa:	dcf0      	bgt.n	80069de <_printf_float+0x42a>
 80069fc:	e6fc      	b.n	80067f8 <_printf_float+0x244>
 80069fe:	f04f 0800 	mov.w	r8, #0
 8006a02:	f104 0919 	add.w	r9, r4, #25
 8006a06:	e7f4      	b.n	80069f2 <_printf_float+0x43e>

08006a08 <_printf_common>:
 8006a08:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8006a0c:	4616      	mov	r6, r2
 8006a0e:	4698      	mov	r8, r3
 8006a10:	688a      	ldr	r2, [r1, #8]
 8006a12:	690b      	ldr	r3, [r1, #16]
 8006a14:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8006a18:	4293      	cmp	r3, r2
 8006a1a:	bfb8      	it	lt
 8006a1c:	4613      	movlt	r3, r2
 8006a1e:	6033      	str	r3, [r6, #0]
 8006a20:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 8006a24:	4607      	mov	r7, r0
 8006a26:	460c      	mov	r4, r1
 8006a28:	b10a      	cbz	r2, 8006a2e <_printf_common+0x26>
 8006a2a:	3301      	adds	r3, #1
 8006a2c:	6033      	str	r3, [r6, #0]
 8006a2e:	6823      	ldr	r3, [r4, #0]
 8006a30:	0699      	lsls	r1, r3, #26
 8006a32:	bf42      	ittt	mi
 8006a34:	6833      	ldrmi	r3, [r6, #0]
 8006a36:	3302      	addmi	r3, #2
 8006a38:	6033      	strmi	r3, [r6, #0]
 8006a3a:	6825      	ldr	r5, [r4, #0]
 8006a3c:	f015 0506 	ands.w	r5, r5, #6
 8006a40:	d106      	bne.n	8006a50 <_printf_common+0x48>
 8006a42:	f104 0a19 	add.w	sl, r4, #25
 8006a46:	68e3      	ldr	r3, [r4, #12]
 8006a48:	6832      	ldr	r2, [r6, #0]
 8006a4a:	1a9b      	subs	r3, r3, r2
 8006a4c:	42ab      	cmp	r3, r5
 8006a4e:	dc26      	bgt.n	8006a9e <_printf_common+0x96>
 8006a50:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 8006a54:	6822      	ldr	r2, [r4, #0]
 8006a56:	3b00      	subs	r3, #0
 8006a58:	bf18      	it	ne
 8006a5a:	2301      	movne	r3, #1
 8006a5c:	0692      	lsls	r2, r2, #26
 8006a5e:	d42b      	bmi.n	8006ab8 <_printf_common+0xb0>
 8006a60:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 8006a64:	4641      	mov	r1, r8
 8006a66:	4638      	mov	r0, r7
 8006a68:	47c8      	blx	r9
 8006a6a:	3001      	adds	r0, #1
 8006a6c:	d01e      	beq.n	8006aac <_printf_common+0xa4>
 8006a6e:	6823      	ldr	r3, [r4, #0]
 8006a70:	6922      	ldr	r2, [r4, #16]
 8006a72:	f003 0306 	and.w	r3, r3, #6
 8006a76:	2b04      	cmp	r3, #4
 8006a78:	bf02      	ittt	eq
 8006a7a:	68e5      	ldreq	r5, [r4, #12]
 8006a7c:	6833      	ldreq	r3, [r6, #0]
 8006a7e:	1aed      	subeq	r5, r5, r3
 8006a80:	68a3      	ldr	r3, [r4, #8]
 8006a82:	bf0c      	ite	eq
 8006a84:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8006a88:	2500      	movne	r5, #0
 8006a8a:	4293      	cmp	r3, r2
 8006a8c:	bfc4      	itt	gt
 8006a8e:	1a9b      	subgt	r3, r3, r2
 8006a90:	18ed      	addgt	r5, r5, r3
 8006a92:	2600      	movs	r6, #0
 8006a94:	341a      	adds	r4, #26
 8006a96:	42b5      	cmp	r5, r6
 8006a98:	d11a      	bne.n	8006ad0 <_printf_common+0xc8>
 8006a9a:	2000      	movs	r0, #0
 8006a9c:	e008      	b.n	8006ab0 <_printf_common+0xa8>
 8006a9e:	2301      	movs	r3, #1
 8006aa0:	4652      	mov	r2, sl
 8006aa2:	4641      	mov	r1, r8
 8006aa4:	4638      	mov	r0, r7
 8006aa6:	47c8      	blx	r9
 8006aa8:	3001      	adds	r0, #1
 8006aaa:	d103      	bne.n	8006ab4 <_printf_common+0xac>
 8006aac:	f04f 30ff 	mov.w	r0, #4294967295
 8006ab0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006ab4:	3501      	adds	r5, #1
 8006ab6:	e7c6      	b.n	8006a46 <_printf_common+0x3e>
 8006ab8:	18e1      	adds	r1, r4, r3
 8006aba:	1c5a      	adds	r2, r3, #1
 8006abc:	2030      	movs	r0, #48	@ 0x30
 8006abe:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 8006ac2:	4422      	add	r2, r4
 8006ac4:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 8006ac8:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 8006acc:	3302      	adds	r3, #2
 8006ace:	e7c7      	b.n	8006a60 <_printf_common+0x58>
 8006ad0:	2301      	movs	r3, #1
 8006ad2:	4622      	mov	r2, r4
 8006ad4:	4641      	mov	r1, r8
 8006ad6:	4638      	mov	r0, r7
 8006ad8:	47c8      	blx	r9
 8006ada:	3001      	adds	r0, #1
 8006adc:	d0e6      	beq.n	8006aac <_printf_common+0xa4>
 8006ade:	3601      	adds	r6, #1
 8006ae0:	e7d9      	b.n	8006a96 <_printf_common+0x8e>
	...

08006ae4 <_printf_i>:
 8006ae4:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8006ae8:	7e0f      	ldrb	r7, [r1, #24]
 8006aea:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 8006aec:	2f78      	cmp	r7, #120	@ 0x78
 8006aee:	4691      	mov	r9, r2
 8006af0:	4680      	mov	r8, r0
 8006af2:	460c      	mov	r4, r1
 8006af4:	469a      	mov	sl, r3
 8006af6:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 8006afa:	d807      	bhi.n	8006b0c <_printf_i+0x28>
 8006afc:	2f62      	cmp	r7, #98	@ 0x62
 8006afe:	d80a      	bhi.n	8006b16 <_printf_i+0x32>
 8006b00:	2f00      	cmp	r7, #0
 8006b02:	f000 80d2 	beq.w	8006caa <_printf_i+0x1c6>
 8006b06:	2f58      	cmp	r7, #88	@ 0x58
 8006b08:	f000 80b9 	beq.w	8006c7e <_printf_i+0x19a>
 8006b0c:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8006b10:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 8006b14:	e03a      	b.n	8006b8c <_printf_i+0xa8>
 8006b16:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 8006b1a:	2b15      	cmp	r3, #21
 8006b1c:	d8f6      	bhi.n	8006b0c <_printf_i+0x28>
 8006b1e:	a101      	add	r1, pc, #4	@ (adr r1, 8006b24 <_printf_i+0x40>)
 8006b20:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8006b24:	08006b7d 	.word	0x08006b7d
 8006b28:	08006b91 	.word	0x08006b91
 8006b2c:	08006b0d 	.word	0x08006b0d
 8006b30:	08006b0d 	.word	0x08006b0d
 8006b34:	08006b0d 	.word	0x08006b0d
 8006b38:	08006b0d 	.word	0x08006b0d
 8006b3c:	08006b91 	.word	0x08006b91
 8006b40:	08006b0d 	.word	0x08006b0d
 8006b44:	08006b0d 	.word	0x08006b0d
 8006b48:	08006b0d 	.word	0x08006b0d
 8006b4c:	08006b0d 	.word	0x08006b0d
 8006b50:	08006c91 	.word	0x08006c91
 8006b54:	08006bbb 	.word	0x08006bbb
 8006b58:	08006c4b 	.word	0x08006c4b
 8006b5c:	08006b0d 	.word	0x08006b0d
 8006b60:	08006b0d 	.word	0x08006b0d
 8006b64:	08006cb3 	.word	0x08006cb3
 8006b68:	08006b0d 	.word	0x08006b0d
 8006b6c:	08006bbb 	.word	0x08006bbb
 8006b70:	08006b0d 	.word	0x08006b0d
 8006b74:	08006b0d 	.word	0x08006b0d
 8006b78:	08006c53 	.word	0x08006c53
 8006b7c:	6833      	ldr	r3, [r6, #0]
 8006b7e:	1d1a      	adds	r2, r3, #4
 8006b80:	681b      	ldr	r3, [r3, #0]
 8006b82:	6032      	str	r2, [r6, #0]
 8006b84:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8006b88:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 8006b8c:	2301      	movs	r3, #1
 8006b8e:	e09d      	b.n	8006ccc <_printf_i+0x1e8>
 8006b90:	6833      	ldr	r3, [r6, #0]
 8006b92:	6820      	ldr	r0, [r4, #0]
 8006b94:	1d19      	adds	r1, r3, #4
 8006b96:	6031      	str	r1, [r6, #0]
 8006b98:	0606      	lsls	r6, r0, #24
 8006b9a:	d501      	bpl.n	8006ba0 <_printf_i+0xbc>
 8006b9c:	681d      	ldr	r5, [r3, #0]
 8006b9e:	e003      	b.n	8006ba8 <_printf_i+0xc4>
 8006ba0:	0645      	lsls	r5, r0, #25
 8006ba2:	d5fb      	bpl.n	8006b9c <_printf_i+0xb8>
 8006ba4:	f9b3 5000 	ldrsh.w	r5, [r3]
 8006ba8:	2d00      	cmp	r5, #0
 8006baa:	da03      	bge.n	8006bb4 <_printf_i+0xd0>
 8006bac:	232d      	movs	r3, #45	@ 0x2d
 8006bae:	426d      	negs	r5, r5
 8006bb0:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8006bb4:	4859      	ldr	r0, [pc, #356]	@ (8006d1c <_printf_i+0x238>)
 8006bb6:	230a      	movs	r3, #10
 8006bb8:	e011      	b.n	8006bde <_printf_i+0xfa>
 8006bba:	6821      	ldr	r1, [r4, #0]
 8006bbc:	6833      	ldr	r3, [r6, #0]
 8006bbe:	0608      	lsls	r0, r1, #24
 8006bc0:	f853 5b04 	ldr.w	r5, [r3], #4
 8006bc4:	d402      	bmi.n	8006bcc <_printf_i+0xe8>
 8006bc6:	0649      	lsls	r1, r1, #25
 8006bc8:	bf48      	it	mi
 8006bca:	b2ad      	uxthmi	r5, r5
 8006bcc:	2f6f      	cmp	r7, #111	@ 0x6f
 8006bce:	4853      	ldr	r0, [pc, #332]	@ (8006d1c <_printf_i+0x238>)
 8006bd0:	6033      	str	r3, [r6, #0]
 8006bd2:	bf14      	ite	ne
 8006bd4:	230a      	movne	r3, #10
 8006bd6:	2308      	moveq	r3, #8
 8006bd8:	2100      	movs	r1, #0
 8006bda:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 8006bde:	6866      	ldr	r6, [r4, #4]
 8006be0:	60a6      	str	r6, [r4, #8]
 8006be2:	2e00      	cmp	r6, #0
 8006be4:	bfa2      	ittt	ge
 8006be6:	6821      	ldrge	r1, [r4, #0]
 8006be8:	f021 0104 	bicge.w	r1, r1, #4
 8006bec:	6021      	strge	r1, [r4, #0]
 8006bee:	b90d      	cbnz	r5, 8006bf4 <_printf_i+0x110>
 8006bf0:	2e00      	cmp	r6, #0
 8006bf2:	d04b      	beq.n	8006c8c <_printf_i+0x1a8>
 8006bf4:	4616      	mov	r6, r2
 8006bf6:	fbb5 f1f3 	udiv	r1, r5, r3
 8006bfa:	fb03 5711 	mls	r7, r3, r1, r5
 8006bfe:	5dc7      	ldrb	r7, [r0, r7]
 8006c00:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8006c04:	462f      	mov	r7, r5
 8006c06:	42bb      	cmp	r3, r7
 8006c08:	460d      	mov	r5, r1
 8006c0a:	d9f4      	bls.n	8006bf6 <_printf_i+0x112>
 8006c0c:	2b08      	cmp	r3, #8
 8006c0e:	d10b      	bne.n	8006c28 <_printf_i+0x144>
 8006c10:	6823      	ldr	r3, [r4, #0]
 8006c12:	07df      	lsls	r7, r3, #31
 8006c14:	d508      	bpl.n	8006c28 <_printf_i+0x144>
 8006c16:	6923      	ldr	r3, [r4, #16]
 8006c18:	6861      	ldr	r1, [r4, #4]
 8006c1a:	4299      	cmp	r1, r3
 8006c1c:	bfde      	ittt	le
 8006c1e:	2330      	movle	r3, #48	@ 0x30
 8006c20:	f806 3c01 	strble.w	r3, [r6, #-1]
 8006c24:	f106 36ff 	addle.w	r6, r6, #4294967295
 8006c28:	1b92      	subs	r2, r2, r6
 8006c2a:	6122      	str	r2, [r4, #16]
 8006c2c:	f8cd a000 	str.w	sl, [sp]
 8006c30:	464b      	mov	r3, r9
 8006c32:	aa03      	add	r2, sp, #12
 8006c34:	4621      	mov	r1, r4
 8006c36:	4640      	mov	r0, r8
 8006c38:	f7ff fee6 	bl	8006a08 <_printf_common>
 8006c3c:	3001      	adds	r0, #1
 8006c3e:	d14a      	bne.n	8006cd6 <_printf_i+0x1f2>
 8006c40:	f04f 30ff 	mov.w	r0, #4294967295
 8006c44:	b004      	add	sp, #16
 8006c46:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006c4a:	6823      	ldr	r3, [r4, #0]
 8006c4c:	f043 0320 	orr.w	r3, r3, #32
 8006c50:	6023      	str	r3, [r4, #0]
 8006c52:	4833      	ldr	r0, [pc, #204]	@ (8006d20 <_printf_i+0x23c>)
 8006c54:	2778      	movs	r7, #120	@ 0x78
 8006c56:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 8006c5a:	6823      	ldr	r3, [r4, #0]
 8006c5c:	6831      	ldr	r1, [r6, #0]
 8006c5e:	061f      	lsls	r7, r3, #24
 8006c60:	f851 5b04 	ldr.w	r5, [r1], #4
 8006c64:	d402      	bmi.n	8006c6c <_printf_i+0x188>
 8006c66:	065f      	lsls	r7, r3, #25
 8006c68:	bf48      	it	mi
 8006c6a:	b2ad      	uxthmi	r5, r5
 8006c6c:	6031      	str	r1, [r6, #0]
 8006c6e:	07d9      	lsls	r1, r3, #31
 8006c70:	bf44      	itt	mi
 8006c72:	f043 0320 	orrmi.w	r3, r3, #32
 8006c76:	6023      	strmi	r3, [r4, #0]
 8006c78:	b11d      	cbz	r5, 8006c82 <_printf_i+0x19e>
 8006c7a:	2310      	movs	r3, #16
 8006c7c:	e7ac      	b.n	8006bd8 <_printf_i+0xf4>
 8006c7e:	4827      	ldr	r0, [pc, #156]	@ (8006d1c <_printf_i+0x238>)
 8006c80:	e7e9      	b.n	8006c56 <_printf_i+0x172>
 8006c82:	6823      	ldr	r3, [r4, #0]
 8006c84:	f023 0320 	bic.w	r3, r3, #32
 8006c88:	6023      	str	r3, [r4, #0]
 8006c8a:	e7f6      	b.n	8006c7a <_printf_i+0x196>
 8006c8c:	4616      	mov	r6, r2
 8006c8e:	e7bd      	b.n	8006c0c <_printf_i+0x128>
 8006c90:	6833      	ldr	r3, [r6, #0]
 8006c92:	6825      	ldr	r5, [r4, #0]
 8006c94:	6961      	ldr	r1, [r4, #20]
 8006c96:	1d18      	adds	r0, r3, #4
 8006c98:	6030      	str	r0, [r6, #0]
 8006c9a:	062e      	lsls	r6, r5, #24
 8006c9c:	681b      	ldr	r3, [r3, #0]
 8006c9e:	d501      	bpl.n	8006ca4 <_printf_i+0x1c0>
 8006ca0:	6019      	str	r1, [r3, #0]
 8006ca2:	e002      	b.n	8006caa <_printf_i+0x1c6>
 8006ca4:	0668      	lsls	r0, r5, #25
 8006ca6:	d5fb      	bpl.n	8006ca0 <_printf_i+0x1bc>
 8006ca8:	8019      	strh	r1, [r3, #0]
 8006caa:	2300      	movs	r3, #0
 8006cac:	6123      	str	r3, [r4, #16]
 8006cae:	4616      	mov	r6, r2
 8006cb0:	e7bc      	b.n	8006c2c <_printf_i+0x148>
 8006cb2:	6833      	ldr	r3, [r6, #0]
 8006cb4:	1d1a      	adds	r2, r3, #4
 8006cb6:	6032      	str	r2, [r6, #0]
 8006cb8:	681e      	ldr	r6, [r3, #0]
 8006cba:	6862      	ldr	r2, [r4, #4]
 8006cbc:	2100      	movs	r1, #0
 8006cbe:	4630      	mov	r0, r6
 8006cc0:	f7f9 faa6 	bl	8000210 <memchr>
 8006cc4:	b108      	cbz	r0, 8006cca <_printf_i+0x1e6>
 8006cc6:	1b80      	subs	r0, r0, r6
 8006cc8:	6060      	str	r0, [r4, #4]
 8006cca:	6863      	ldr	r3, [r4, #4]
 8006ccc:	6123      	str	r3, [r4, #16]
 8006cce:	2300      	movs	r3, #0
 8006cd0:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8006cd4:	e7aa      	b.n	8006c2c <_printf_i+0x148>
 8006cd6:	6923      	ldr	r3, [r4, #16]
 8006cd8:	4632      	mov	r2, r6
 8006cda:	4649      	mov	r1, r9
 8006cdc:	4640      	mov	r0, r8
 8006cde:	47d0      	blx	sl
 8006ce0:	3001      	adds	r0, #1
 8006ce2:	d0ad      	beq.n	8006c40 <_printf_i+0x15c>
 8006ce4:	6823      	ldr	r3, [r4, #0]
 8006ce6:	079b      	lsls	r3, r3, #30
 8006ce8:	d413      	bmi.n	8006d12 <_printf_i+0x22e>
 8006cea:	68e0      	ldr	r0, [r4, #12]
 8006cec:	9b03      	ldr	r3, [sp, #12]
 8006cee:	4298      	cmp	r0, r3
 8006cf0:	bfb8      	it	lt
 8006cf2:	4618      	movlt	r0, r3
 8006cf4:	e7a6      	b.n	8006c44 <_printf_i+0x160>
 8006cf6:	2301      	movs	r3, #1
 8006cf8:	4632      	mov	r2, r6
 8006cfa:	4649      	mov	r1, r9
 8006cfc:	4640      	mov	r0, r8
 8006cfe:	47d0      	blx	sl
 8006d00:	3001      	adds	r0, #1
 8006d02:	d09d      	beq.n	8006c40 <_printf_i+0x15c>
 8006d04:	3501      	adds	r5, #1
 8006d06:	68e3      	ldr	r3, [r4, #12]
 8006d08:	9903      	ldr	r1, [sp, #12]
 8006d0a:	1a5b      	subs	r3, r3, r1
 8006d0c:	42ab      	cmp	r3, r5
 8006d0e:	dcf2      	bgt.n	8006cf6 <_printf_i+0x212>
 8006d10:	e7eb      	b.n	8006cea <_printf_i+0x206>
 8006d12:	2500      	movs	r5, #0
 8006d14:	f104 0619 	add.w	r6, r4, #25
 8006d18:	e7f5      	b.n	8006d06 <_printf_i+0x222>
 8006d1a:	bf00      	nop
 8006d1c:	0800a362 	.word	0x0800a362
 8006d20:	0800a373 	.word	0x0800a373

08006d24 <std>:
 8006d24:	2300      	movs	r3, #0
 8006d26:	b510      	push	{r4, lr}
 8006d28:	4604      	mov	r4, r0
 8006d2a:	e9c0 3300 	strd	r3, r3, [r0]
 8006d2e:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8006d32:	6083      	str	r3, [r0, #8]
 8006d34:	8181      	strh	r1, [r0, #12]
 8006d36:	6643      	str	r3, [r0, #100]	@ 0x64
 8006d38:	81c2      	strh	r2, [r0, #14]
 8006d3a:	6183      	str	r3, [r0, #24]
 8006d3c:	4619      	mov	r1, r3
 8006d3e:	2208      	movs	r2, #8
 8006d40:	305c      	adds	r0, #92	@ 0x5c
 8006d42:	f000 f928 	bl	8006f96 <memset>
 8006d46:	4b0d      	ldr	r3, [pc, #52]	@ (8006d7c <std+0x58>)
 8006d48:	6263      	str	r3, [r4, #36]	@ 0x24
 8006d4a:	4b0d      	ldr	r3, [pc, #52]	@ (8006d80 <std+0x5c>)
 8006d4c:	62a3      	str	r3, [r4, #40]	@ 0x28
 8006d4e:	4b0d      	ldr	r3, [pc, #52]	@ (8006d84 <std+0x60>)
 8006d50:	62e3      	str	r3, [r4, #44]	@ 0x2c
 8006d52:	4b0d      	ldr	r3, [pc, #52]	@ (8006d88 <std+0x64>)
 8006d54:	6323      	str	r3, [r4, #48]	@ 0x30
 8006d56:	4b0d      	ldr	r3, [pc, #52]	@ (8006d8c <std+0x68>)
 8006d58:	6224      	str	r4, [r4, #32]
 8006d5a:	429c      	cmp	r4, r3
 8006d5c:	d006      	beq.n	8006d6c <std+0x48>
 8006d5e:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 8006d62:	4294      	cmp	r4, r2
 8006d64:	d002      	beq.n	8006d6c <std+0x48>
 8006d66:	33d0      	adds	r3, #208	@ 0xd0
 8006d68:	429c      	cmp	r4, r3
 8006d6a:	d105      	bne.n	8006d78 <std+0x54>
 8006d6c:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 8006d70:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8006d74:	f000 b99e 	b.w	80070b4 <__retarget_lock_init_recursive>
 8006d78:	bd10      	pop	{r4, pc}
 8006d7a:	bf00      	nop
 8006d7c:	08006f11 	.word	0x08006f11
 8006d80:	08006f33 	.word	0x08006f33
 8006d84:	08006f6b 	.word	0x08006f6b
 8006d88:	08006f8f 	.word	0x08006f8f
 8006d8c:	20000604 	.word	0x20000604

08006d90 <stdio_exit_handler>:
 8006d90:	4a02      	ldr	r2, [pc, #8]	@ (8006d9c <stdio_exit_handler+0xc>)
 8006d92:	4903      	ldr	r1, [pc, #12]	@ (8006da0 <stdio_exit_handler+0x10>)
 8006d94:	4803      	ldr	r0, [pc, #12]	@ (8006da4 <stdio_exit_handler+0x14>)
 8006d96:	f000 b869 	b.w	8006e6c <_fwalk_sglue>
 8006d9a:	bf00      	nop
 8006d9c:	2000000c 	.word	0x2000000c
 8006da0:	08008a15 	.word	0x08008a15
 8006da4:	2000001c 	.word	0x2000001c

08006da8 <cleanup_stdio>:
 8006da8:	6841      	ldr	r1, [r0, #4]
 8006daa:	4b0c      	ldr	r3, [pc, #48]	@ (8006ddc <cleanup_stdio+0x34>)
 8006dac:	4299      	cmp	r1, r3
 8006dae:	b510      	push	{r4, lr}
 8006db0:	4604      	mov	r4, r0
 8006db2:	d001      	beq.n	8006db8 <cleanup_stdio+0x10>
 8006db4:	f001 fe2e 	bl	8008a14 <_fflush_r>
 8006db8:	68a1      	ldr	r1, [r4, #8]
 8006dba:	4b09      	ldr	r3, [pc, #36]	@ (8006de0 <cleanup_stdio+0x38>)
 8006dbc:	4299      	cmp	r1, r3
 8006dbe:	d002      	beq.n	8006dc6 <cleanup_stdio+0x1e>
 8006dc0:	4620      	mov	r0, r4
 8006dc2:	f001 fe27 	bl	8008a14 <_fflush_r>
 8006dc6:	68e1      	ldr	r1, [r4, #12]
 8006dc8:	4b06      	ldr	r3, [pc, #24]	@ (8006de4 <cleanup_stdio+0x3c>)
 8006dca:	4299      	cmp	r1, r3
 8006dcc:	d004      	beq.n	8006dd8 <cleanup_stdio+0x30>
 8006dce:	4620      	mov	r0, r4
 8006dd0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8006dd4:	f001 be1e 	b.w	8008a14 <_fflush_r>
 8006dd8:	bd10      	pop	{r4, pc}
 8006dda:	bf00      	nop
 8006ddc:	20000604 	.word	0x20000604
 8006de0:	2000066c 	.word	0x2000066c
 8006de4:	200006d4 	.word	0x200006d4

08006de8 <global_stdio_init.part.0>:
 8006de8:	b510      	push	{r4, lr}
 8006dea:	4b0b      	ldr	r3, [pc, #44]	@ (8006e18 <global_stdio_init.part.0+0x30>)
 8006dec:	4c0b      	ldr	r4, [pc, #44]	@ (8006e1c <global_stdio_init.part.0+0x34>)
 8006dee:	4a0c      	ldr	r2, [pc, #48]	@ (8006e20 <global_stdio_init.part.0+0x38>)
 8006df0:	601a      	str	r2, [r3, #0]
 8006df2:	4620      	mov	r0, r4
 8006df4:	2200      	movs	r2, #0
 8006df6:	2104      	movs	r1, #4
 8006df8:	f7ff ff94 	bl	8006d24 <std>
 8006dfc:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 8006e00:	2201      	movs	r2, #1
 8006e02:	2109      	movs	r1, #9
 8006e04:	f7ff ff8e 	bl	8006d24 <std>
 8006e08:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 8006e0c:	2202      	movs	r2, #2
 8006e0e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8006e12:	2112      	movs	r1, #18
 8006e14:	f7ff bf86 	b.w	8006d24 <std>
 8006e18:	2000073c 	.word	0x2000073c
 8006e1c:	20000604 	.word	0x20000604
 8006e20:	08006d91 	.word	0x08006d91

08006e24 <__sfp_lock_acquire>:
 8006e24:	4801      	ldr	r0, [pc, #4]	@ (8006e2c <__sfp_lock_acquire+0x8>)
 8006e26:	f000 b946 	b.w	80070b6 <__retarget_lock_acquire_recursive>
 8006e2a:	bf00      	nop
 8006e2c:	20000745 	.word	0x20000745

08006e30 <__sfp_lock_release>:
 8006e30:	4801      	ldr	r0, [pc, #4]	@ (8006e38 <__sfp_lock_release+0x8>)
 8006e32:	f000 b941 	b.w	80070b8 <__retarget_lock_release_recursive>
 8006e36:	bf00      	nop
 8006e38:	20000745 	.word	0x20000745

08006e3c <__sinit>:
 8006e3c:	b510      	push	{r4, lr}
 8006e3e:	4604      	mov	r4, r0
 8006e40:	f7ff fff0 	bl	8006e24 <__sfp_lock_acquire>
 8006e44:	6a23      	ldr	r3, [r4, #32]
 8006e46:	b11b      	cbz	r3, 8006e50 <__sinit+0x14>
 8006e48:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8006e4c:	f7ff bff0 	b.w	8006e30 <__sfp_lock_release>
 8006e50:	4b04      	ldr	r3, [pc, #16]	@ (8006e64 <__sinit+0x28>)
 8006e52:	6223      	str	r3, [r4, #32]
 8006e54:	4b04      	ldr	r3, [pc, #16]	@ (8006e68 <__sinit+0x2c>)
 8006e56:	681b      	ldr	r3, [r3, #0]
 8006e58:	2b00      	cmp	r3, #0
 8006e5a:	d1f5      	bne.n	8006e48 <__sinit+0xc>
 8006e5c:	f7ff ffc4 	bl	8006de8 <global_stdio_init.part.0>
 8006e60:	e7f2      	b.n	8006e48 <__sinit+0xc>
 8006e62:	bf00      	nop
 8006e64:	08006da9 	.word	0x08006da9
 8006e68:	2000073c 	.word	0x2000073c

08006e6c <_fwalk_sglue>:
 8006e6c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8006e70:	4607      	mov	r7, r0
 8006e72:	4688      	mov	r8, r1
 8006e74:	4614      	mov	r4, r2
 8006e76:	2600      	movs	r6, #0
 8006e78:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8006e7c:	f1b9 0901 	subs.w	r9, r9, #1
 8006e80:	d505      	bpl.n	8006e8e <_fwalk_sglue+0x22>
 8006e82:	6824      	ldr	r4, [r4, #0]
 8006e84:	2c00      	cmp	r4, #0
 8006e86:	d1f7      	bne.n	8006e78 <_fwalk_sglue+0xc>
 8006e88:	4630      	mov	r0, r6
 8006e8a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8006e8e:	89ab      	ldrh	r3, [r5, #12]
 8006e90:	2b01      	cmp	r3, #1
 8006e92:	d907      	bls.n	8006ea4 <_fwalk_sglue+0x38>
 8006e94:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8006e98:	3301      	adds	r3, #1
 8006e9a:	d003      	beq.n	8006ea4 <_fwalk_sglue+0x38>
 8006e9c:	4629      	mov	r1, r5
 8006e9e:	4638      	mov	r0, r7
 8006ea0:	47c0      	blx	r8
 8006ea2:	4306      	orrs	r6, r0
 8006ea4:	3568      	adds	r5, #104	@ 0x68
 8006ea6:	e7e9      	b.n	8006e7c <_fwalk_sglue+0x10>

08006ea8 <sniprintf>:
 8006ea8:	b40c      	push	{r2, r3}
 8006eaa:	b530      	push	{r4, r5, lr}
 8006eac:	4b17      	ldr	r3, [pc, #92]	@ (8006f0c <sniprintf+0x64>)
 8006eae:	1e0c      	subs	r4, r1, #0
 8006eb0:	681d      	ldr	r5, [r3, #0]
 8006eb2:	b09d      	sub	sp, #116	@ 0x74
 8006eb4:	da08      	bge.n	8006ec8 <sniprintf+0x20>
 8006eb6:	238b      	movs	r3, #139	@ 0x8b
 8006eb8:	602b      	str	r3, [r5, #0]
 8006eba:	f04f 30ff 	mov.w	r0, #4294967295
 8006ebe:	b01d      	add	sp, #116	@ 0x74
 8006ec0:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8006ec4:	b002      	add	sp, #8
 8006ec6:	4770      	bx	lr
 8006ec8:	f44f 7302 	mov.w	r3, #520	@ 0x208
 8006ecc:	f8ad 3014 	strh.w	r3, [sp, #20]
 8006ed0:	bf14      	ite	ne
 8006ed2:	f104 33ff 	addne.w	r3, r4, #4294967295
 8006ed6:	4623      	moveq	r3, r4
 8006ed8:	9304      	str	r3, [sp, #16]
 8006eda:	9307      	str	r3, [sp, #28]
 8006edc:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8006ee0:	9002      	str	r0, [sp, #8]
 8006ee2:	9006      	str	r0, [sp, #24]
 8006ee4:	f8ad 3016 	strh.w	r3, [sp, #22]
 8006ee8:	9a20      	ldr	r2, [sp, #128]	@ 0x80
 8006eea:	ab21      	add	r3, sp, #132	@ 0x84
 8006eec:	a902      	add	r1, sp, #8
 8006eee:	4628      	mov	r0, r5
 8006ef0:	9301      	str	r3, [sp, #4]
 8006ef2:	f001 fc0f 	bl	8008714 <_svfiprintf_r>
 8006ef6:	1c43      	adds	r3, r0, #1
 8006ef8:	bfbc      	itt	lt
 8006efa:	238b      	movlt	r3, #139	@ 0x8b
 8006efc:	602b      	strlt	r3, [r5, #0]
 8006efe:	2c00      	cmp	r4, #0
 8006f00:	d0dd      	beq.n	8006ebe <sniprintf+0x16>
 8006f02:	9b02      	ldr	r3, [sp, #8]
 8006f04:	2200      	movs	r2, #0
 8006f06:	701a      	strb	r2, [r3, #0]
 8006f08:	e7d9      	b.n	8006ebe <sniprintf+0x16>
 8006f0a:	bf00      	nop
 8006f0c:	20000018 	.word	0x20000018

08006f10 <__sread>:
 8006f10:	b510      	push	{r4, lr}
 8006f12:	460c      	mov	r4, r1
 8006f14:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8006f18:	f000 f87e 	bl	8007018 <_read_r>
 8006f1c:	2800      	cmp	r0, #0
 8006f1e:	bfab      	itete	ge
 8006f20:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 8006f22:	89a3      	ldrhlt	r3, [r4, #12]
 8006f24:	181b      	addge	r3, r3, r0
 8006f26:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 8006f2a:	bfac      	ite	ge
 8006f2c:	6563      	strge	r3, [r4, #84]	@ 0x54
 8006f2e:	81a3      	strhlt	r3, [r4, #12]
 8006f30:	bd10      	pop	{r4, pc}

08006f32 <__swrite>:
 8006f32:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8006f36:	461f      	mov	r7, r3
 8006f38:	898b      	ldrh	r3, [r1, #12]
 8006f3a:	05db      	lsls	r3, r3, #23
 8006f3c:	4605      	mov	r5, r0
 8006f3e:	460c      	mov	r4, r1
 8006f40:	4616      	mov	r6, r2
 8006f42:	d505      	bpl.n	8006f50 <__swrite+0x1e>
 8006f44:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8006f48:	2302      	movs	r3, #2
 8006f4a:	2200      	movs	r2, #0
 8006f4c:	f000 f852 	bl	8006ff4 <_lseek_r>
 8006f50:	89a3      	ldrh	r3, [r4, #12]
 8006f52:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8006f56:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8006f5a:	81a3      	strh	r3, [r4, #12]
 8006f5c:	4632      	mov	r2, r6
 8006f5e:	463b      	mov	r3, r7
 8006f60:	4628      	mov	r0, r5
 8006f62:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8006f66:	f000 b869 	b.w	800703c <_write_r>

08006f6a <__sseek>:
 8006f6a:	b510      	push	{r4, lr}
 8006f6c:	460c      	mov	r4, r1
 8006f6e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8006f72:	f000 f83f 	bl	8006ff4 <_lseek_r>
 8006f76:	1c43      	adds	r3, r0, #1
 8006f78:	89a3      	ldrh	r3, [r4, #12]
 8006f7a:	bf15      	itete	ne
 8006f7c:	6560      	strne	r0, [r4, #84]	@ 0x54
 8006f7e:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 8006f82:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 8006f86:	81a3      	strheq	r3, [r4, #12]
 8006f88:	bf18      	it	ne
 8006f8a:	81a3      	strhne	r3, [r4, #12]
 8006f8c:	bd10      	pop	{r4, pc}

08006f8e <__sclose>:
 8006f8e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8006f92:	f000 b81f 	b.w	8006fd4 <_close_r>

08006f96 <memset>:
 8006f96:	4402      	add	r2, r0
 8006f98:	4603      	mov	r3, r0
 8006f9a:	4293      	cmp	r3, r2
 8006f9c:	d100      	bne.n	8006fa0 <memset+0xa>
 8006f9e:	4770      	bx	lr
 8006fa0:	f803 1b01 	strb.w	r1, [r3], #1
 8006fa4:	e7f9      	b.n	8006f9a <memset+0x4>

08006fa6 <strncpy>:
 8006fa6:	b510      	push	{r4, lr}
 8006fa8:	3901      	subs	r1, #1
 8006faa:	4603      	mov	r3, r0
 8006fac:	b132      	cbz	r2, 8006fbc <strncpy+0x16>
 8006fae:	f811 4f01 	ldrb.w	r4, [r1, #1]!
 8006fb2:	f803 4b01 	strb.w	r4, [r3], #1
 8006fb6:	3a01      	subs	r2, #1
 8006fb8:	2c00      	cmp	r4, #0
 8006fba:	d1f7      	bne.n	8006fac <strncpy+0x6>
 8006fbc:	441a      	add	r2, r3
 8006fbe:	2100      	movs	r1, #0
 8006fc0:	4293      	cmp	r3, r2
 8006fc2:	d100      	bne.n	8006fc6 <strncpy+0x20>
 8006fc4:	bd10      	pop	{r4, pc}
 8006fc6:	f803 1b01 	strb.w	r1, [r3], #1
 8006fca:	e7f9      	b.n	8006fc0 <strncpy+0x1a>

08006fcc <_localeconv_r>:
 8006fcc:	4800      	ldr	r0, [pc, #0]	@ (8006fd0 <_localeconv_r+0x4>)
 8006fce:	4770      	bx	lr
 8006fd0:	20000158 	.word	0x20000158

08006fd4 <_close_r>:
 8006fd4:	b538      	push	{r3, r4, r5, lr}
 8006fd6:	4d06      	ldr	r5, [pc, #24]	@ (8006ff0 <_close_r+0x1c>)
 8006fd8:	2300      	movs	r3, #0
 8006fda:	4604      	mov	r4, r0
 8006fdc:	4608      	mov	r0, r1
 8006fde:	602b      	str	r3, [r5, #0]
 8006fe0:	f7fa ffda 	bl	8001f98 <_close>
 8006fe4:	1c43      	adds	r3, r0, #1
 8006fe6:	d102      	bne.n	8006fee <_close_r+0x1a>
 8006fe8:	682b      	ldr	r3, [r5, #0]
 8006fea:	b103      	cbz	r3, 8006fee <_close_r+0x1a>
 8006fec:	6023      	str	r3, [r4, #0]
 8006fee:	bd38      	pop	{r3, r4, r5, pc}
 8006ff0:	20000740 	.word	0x20000740

08006ff4 <_lseek_r>:
 8006ff4:	b538      	push	{r3, r4, r5, lr}
 8006ff6:	4d07      	ldr	r5, [pc, #28]	@ (8007014 <_lseek_r+0x20>)
 8006ff8:	4604      	mov	r4, r0
 8006ffa:	4608      	mov	r0, r1
 8006ffc:	4611      	mov	r1, r2
 8006ffe:	2200      	movs	r2, #0
 8007000:	602a      	str	r2, [r5, #0]
 8007002:	461a      	mov	r2, r3
 8007004:	f7fa ffef 	bl	8001fe6 <_lseek>
 8007008:	1c43      	adds	r3, r0, #1
 800700a:	d102      	bne.n	8007012 <_lseek_r+0x1e>
 800700c:	682b      	ldr	r3, [r5, #0]
 800700e:	b103      	cbz	r3, 8007012 <_lseek_r+0x1e>
 8007010:	6023      	str	r3, [r4, #0]
 8007012:	bd38      	pop	{r3, r4, r5, pc}
 8007014:	20000740 	.word	0x20000740

08007018 <_read_r>:
 8007018:	b538      	push	{r3, r4, r5, lr}
 800701a:	4d07      	ldr	r5, [pc, #28]	@ (8007038 <_read_r+0x20>)
 800701c:	4604      	mov	r4, r0
 800701e:	4608      	mov	r0, r1
 8007020:	4611      	mov	r1, r2
 8007022:	2200      	movs	r2, #0
 8007024:	602a      	str	r2, [r5, #0]
 8007026:	461a      	mov	r2, r3
 8007028:	f7fa ff7d 	bl	8001f26 <_read>
 800702c:	1c43      	adds	r3, r0, #1
 800702e:	d102      	bne.n	8007036 <_read_r+0x1e>
 8007030:	682b      	ldr	r3, [r5, #0]
 8007032:	b103      	cbz	r3, 8007036 <_read_r+0x1e>
 8007034:	6023      	str	r3, [r4, #0]
 8007036:	bd38      	pop	{r3, r4, r5, pc}
 8007038:	20000740 	.word	0x20000740

0800703c <_write_r>:
 800703c:	b538      	push	{r3, r4, r5, lr}
 800703e:	4d07      	ldr	r5, [pc, #28]	@ (800705c <_write_r+0x20>)
 8007040:	4604      	mov	r4, r0
 8007042:	4608      	mov	r0, r1
 8007044:	4611      	mov	r1, r2
 8007046:	2200      	movs	r2, #0
 8007048:	602a      	str	r2, [r5, #0]
 800704a:	461a      	mov	r2, r3
 800704c:	f7fa ff88 	bl	8001f60 <_write>
 8007050:	1c43      	adds	r3, r0, #1
 8007052:	d102      	bne.n	800705a <_write_r+0x1e>
 8007054:	682b      	ldr	r3, [r5, #0]
 8007056:	b103      	cbz	r3, 800705a <_write_r+0x1e>
 8007058:	6023      	str	r3, [r4, #0]
 800705a:	bd38      	pop	{r3, r4, r5, pc}
 800705c:	20000740 	.word	0x20000740

08007060 <__errno>:
 8007060:	4b01      	ldr	r3, [pc, #4]	@ (8007068 <__errno+0x8>)
 8007062:	6818      	ldr	r0, [r3, #0]
 8007064:	4770      	bx	lr
 8007066:	bf00      	nop
 8007068:	20000018 	.word	0x20000018

0800706c <__libc_init_array>:
 800706c:	b570      	push	{r4, r5, r6, lr}
 800706e:	4d0d      	ldr	r5, [pc, #52]	@ (80070a4 <__libc_init_array+0x38>)
 8007070:	4c0d      	ldr	r4, [pc, #52]	@ (80070a8 <__libc_init_array+0x3c>)
 8007072:	1b64      	subs	r4, r4, r5
 8007074:	10a4      	asrs	r4, r4, #2
 8007076:	2600      	movs	r6, #0
 8007078:	42a6      	cmp	r6, r4
 800707a:	d109      	bne.n	8007090 <__libc_init_array+0x24>
 800707c:	4d0b      	ldr	r5, [pc, #44]	@ (80070ac <__libc_init_array+0x40>)
 800707e:	4c0c      	ldr	r4, [pc, #48]	@ (80070b0 <__libc_init_array+0x44>)
 8007080:	f003 f8ea 	bl	800a258 <_init>
 8007084:	1b64      	subs	r4, r4, r5
 8007086:	10a4      	asrs	r4, r4, #2
 8007088:	2600      	movs	r6, #0
 800708a:	42a6      	cmp	r6, r4
 800708c:	d105      	bne.n	800709a <__libc_init_array+0x2e>
 800708e:	bd70      	pop	{r4, r5, r6, pc}
 8007090:	f855 3b04 	ldr.w	r3, [r5], #4
 8007094:	4798      	blx	r3
 8007096:	3601      	adds	r6, #1
 8007098:	e7ee      	b.n	8007078 <__libc_init_array+0xc>
 800709a:	f855 3b04 	ldr.w	r3, [r5], #4
 800709e:	4798      	blx	r3
 80070a0:	3601      	adds	r6, #1
 80070a2:	e7f2      	b.n	800708a <__libc_init_array+0x1e>
 80070a4:	0800a8a0 	.word	0x0800a8a0
 80070a8:	0800a8a0 	.word	0x0800a8a0
 80070ac:	0800a8a0 	.word	0x0800a8a0
 80070b0:	0800a8a4 	.word	0x0800a8a4

080070b4 <__retarget_lock_init_recursive>:
 80070b4:	4770      	bx	lr

080070b6 <__retarget_lock_acquire_recursive>:
 80070b6:	4770      	bx	lr

080070b8 <__retarget_lock_release_recursive>:
 80070b8:	4770      	bx	lr

080070ba <quorem>:
 80070ba:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80070be:	6903      	ldr	r3, [r0, #16]
 80070c0:	690c      	ldr	r4, [r1, #16]
 80070c2:	42a3      	cmp	r3, r4
 80070c4:	4607      	mov	r7, r0
 80070c6:	db7e      	blt.n	80071c6 <quorem+0x10c>
 80070c8:	3c01      	subs	r4, #1
 80070ca:	f101 0814 	add.w	r8, r1, #20
 80070ce:	00a3      	lsls	r3, r4, #2
 80070d0:	f100 0514 	add.w	r5, r0, #20
 80070d4:	9300      	str	r3, [sp, #0]
 80070d6:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 80070da:	9301      	str	r3, [sp, #4]
 80070dc:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 80070e0:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 80070e4:	3301      	adds	r3, #1
 80070e6:	429a      	cmp	r2, r3
 80070e8:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 80070ec:	fbb2 f6f3 	udiv	r6, r2, r3
 80070f0:	d32e      	bcc.n	8007150 <quorem+0x96>
 80070f2:	f04f 0a00 	mov.w	sl, #0
 80070f6:	46c4      	mov	ip, r8
 80070f8:	46ae      	mov	lr, r5
 80070fa:	46d3      	mov	fp, sl
 80070fc:	f85c 3b04 	ldr.w	r3, [ip], #4
 8007100:	b298      	uxth	r0, r3
 8007102:	fb06 a000 	mla	r0, r6, r0, sl
 8007106:	0c02      	lsrs	r2, r0, #16
 8007108:	0c1b      	lsrs	r3, r3, #16
 800710a:	fb06 2303 	mla	r3, r6, r3, r2
 800710e:	f8de 2000 	ldr.w	r2, [lr]
 8007112:	b280      	uxth	r0, r0
 8007114:	b292      	uxth	r2, r2
 8007116:	1a12      	subs	r2, r2, r0
 8007118:	445a      	add	r2, fp
 800711a:	f8de 0000 	ldr.w	r0, [lr]
 800711e:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 8007122:	b29b      	uxth	r3, r3
 8007124:	ebc3 4322 	rsb	r3, r3, r2, asr #16
 8007128:	eb03 4310 	add.w	r3, r3, r0, lsr #16
 800712c:	b292      	uxth	r2, r2
 800712e:	ea42 4203 	orr.w	r2, r2, r3, lsl #16
 8007132:	45e1      	cmp	r9, ip
 8007134:	f84e 2b04 	str.w	r2, [lr], #4
 8007138:	ea4f 4b23 	mov.w	fp, r3, asr #16
 800713c:	d2de      	bcs.n	80070fc <quorem+0x42>
 800713e:	9b00      	ldr	r3, [sp, #0]
 8007140:	58eb      	ldr	r3, [r5, r3]
 8007142:	b92b      	cbnz	r3, 8007150 <quorem+0x96>
 8007144:	9b01      	ldr	r3, [sp, #4]
 8007146:	3b04      	subs	r3, #4
 8007148:	429d      	cmp	r5, r3
 800714a:	461a      	mov	r2, r3
 800714c:	d32f      	bcc.n	80071ae <quorem+0xf4>
 800714e:	613c      	str	r4, [r7, #16]
 8007150:	4638      	mov	r0, r7
 8007152:	f001 f97b 	bl	800844c <__mcmp>
 8007156:	2800      	cmp	r0, #0
 8007158:	db25      	blt.n	80071a6 <quorem+0xec>
 800715a:	4629      	mov	r1, r5
 800715c:	2000      	movs	r0, #0
 800715e:	f858 2b04 	ldr.w	r2, [r8], #4
 8007162:	f8d1 c000 	ldr.w	ip, [r1]
 8007166:	fa1f fe82 	uxth.w	lr, r2
 800716a:	fa1f f38c 	uxth.w	r3, ip
 800716e:	eba3 030e 	sub.w	r3, r3, lr
 8007172:	4403      	add	r3, r0
 8007174:	0c12      	lsrs	r2, r2, #16
 8007176:	ebc2 4223 	rsb	r2, r2, r3, asr #16
 800717a:	eb02 421c 	add.w	r2, r2, ip, lsr #16
 800717e:	b29b      	uxth	r3, r3
 8007180:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8007184:	45c1      	cmp	r9, r8
 8007186:	f841 3b04 	str.w	r3, [r1], #4
 800718a:	ea4f 4022 	mov.w	r0, r2, asr #16
 800718e:	d2e6      	bcs.n	800715e <quorem+0xa4>
 8007190:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8007194:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8007198:	b922      	cbnz	r2, 80071a4 <quorem+0xea>
 800719a:	3b04      	subs	r3, #4
 800719c:	429d      	cmp	r5, r3
 800719e:	461a      	mov	r2, r3
 80071a0:	d30b      	bcc.n	80071ba <quorem+0x100>
 80071a2:	613c      	str	r4, [r7, #16]
 80071a4:	3601      	adds	r6, #1
 80071a6:	4630      	mov	r0, r6
 80071a8:	b003      	add	sp, #12
 80071aa:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80071ae:	6812      	ldr	r2, [r2, #0]
 80071b0:	3b04      	subs	r3, #4
 80071b2:	2a00      	cmp	r2, #0
 80071b4:	d1cb      	bne.n	800714e <quorem+0x94>
 80071b6:	3c01      	subs	r4, #1
 80071b8:	e7c6      	b.n	8007148 <quorem+0x8e>
 80071ba:	6812      	ldr	r2, [r2, #0]
 80071bc:	3b04      	subs	r3, #4
 80071be:	2a00      	cmp	r2, #0
 80071c0:	d1ef      	bne.n	80071a2 <quorem+0xe8>
 80071c2:	3c01      	subs	r4, #1
 80071c4:	e7ea      	b.n	800719c <quorem+0xe2>
 80071c6:	2000      	movs	r0, #0
 80071c8:	e7ee      	b.n	80071a8 <quorem+0xee>
 80071ca:	0000      	movs	r0, r0
 80071cc:	0000      	movs	r0, r0
	...

080071d0 <_dtoa_r>:
 80071d0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80071d4:	69c7      	ldr	r7, [r0, #28]
 80071d6:	b099      	sub	sp, #100	@ 0x64
 80071d8:	ed8d 0b02 	vstr	d0, [sp, #8]
 80071dc:	ec55 4b10 	vmov	r4, r5, d0
 80071e0:	9e22      	ldr	r6, [sp, #136]	@ 0x88
 80071e2:	9109      	str	r1, [sp, #36]	@ 0x24
 80071e4:	4683      	mov	fp, r0
 80071e6:	920e      	str	r2, [sp, #56]	@ 0x38
 80071e8:	9313      	str	r3, [sp, #76]	@ 0x4c
 80071ea:	b97f      	cbnz	r7, 800720c <_dtoa_r+0x3c>
 80071ec:	2010      	movs	r0, #16
 80071ee:	f000 fdfd 	bl	8007dec <malloc>
 80071f2:	4602      	mov	r2, r0
 80071f4:	f8cb 001c 	str.w	r0, [fp, #28]
 80071f8:	b920      	cbnz	r0, 8007204 <_dtoa_r+0x34>
 80071fa:	4ba7      	ldr	r3, [pc, #668]	@ (8007498 <_dtoa_r+0x2c8>)
 80071fc:	21ef      	movs	r1, #239	@ 0xef
 80071fe:	48a7      	ldr	r0, [pc, #668]	@ (800749c <_dtoa_r+0x2cc>)
 8007200:	f001 fc68 	bl	8008ad4 <__assert_func>
 8007204:	e9c0 7701 	strd	r7, r7, [r0, #4]
 8007208:	6007      	str	r7, [r0, #0]
 800720a:	60c7      	str	r7, [r0, #12]
 800720c:	f8db 301c 	ldr.w	r3, [fp, #28]
 8007210:	6819      	ldr	r1, [r3, #0]
 8007212:	b159      	cbz	r1, 800722c <_dtoa_r+0x5c>
 8007214:	685a      	ldr	r2, [r3, #4]
 8007216:	604a      	str	r2, [r1, #4]
 8007218:	2301      	movs	r3, #1
 800721a:	4093      	lsls	r3, r2
 800721c:	608b      	str	r3, [r1, #8]
 800721e:	4658      	mov	r0, fp
 8007220:	f000 feda 	bl	8007fd8 <_Bfree>
 8007224:	f8db 301c 	ldr.w	r3, [fp, #28]
 8007228:	2200      	movs	r2, #0
 800722a:	601a      	str	r2, [r3, #0]
 800722c:	1e2b      	subs	r3, r5, #0
 800722e:	bfb9      	ittee	lt
 8007230:	f023 4300 	biclt.w	r3, r3, #2147483648	@ 0x80000000
 8007234:	9303      	strlt	r3, [sp, #12]
 8007236:	2300      	movge	r3, #0
 8007238:	6033      	strge	r3, [r6, #0]
 800723a:	9f03      	ldr	r7, [sp, #12]
 800723c:	4b98      	ldr	r3, [pc, #608]	@ (80074a0 <_dtoa_r+0x2d0>)
 800723e:	bfbc      	itt	lt
 8007240:	2201      	movlt	r2, #1
 8007242:	6032      	strlt	r2, [r6, #0]
 8007244:	43bb      	bics	r3, r7
 8007246:	d112      	bne.n	800726e <_dtoa_r+0x9e>
 8007248:	9a13      	ldr	r2, [sp, #76]	@ 0x4c
 800724a:	f242 730f 	movw	r3, #9999	@ 0x270f
 800724e:	6013      	str	r3, [r2, #0]
 8007250:	f3c7 0313 	ubfx	r3, r7, #0, #20
 8007254:	4323      	orrs	r3, r4
 8007256:	f000 854d 	beq.w	8007cf4 <_dtoa_r+0xb24>
 800725a:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 800725c:	f8df a254 	ldr.w	sl, [pc, #596]	@ 80074b4 <_dtoa_r+0x2e4>
 8007260:	2b00      	cmp	r3, #0
 8007262:	f000 854f 	beq.w	8007d04 <_dtoa_r+0xb34>
 8007266:	f10a 0303 	add.w	r3, sl, #3
 800726a:	f000 bd49 	b.w	8007d00 <_dtoa_r+0xb30>
 800726e:	ed9d 7b02 	vldr	d7, [sp, #8]
 8007272:	2200      	movs	r2, #0
 8007274:	ec51 0b17 	vmov	r0, r1, d7
 8007278:	2300      	movs	r3, #0
 800727a:	ed8d 7b0c 	vstr	d7, [sp, #48]	@ 0x30
 800727e:	f7f9 fc43 	bl	8000b08 <__aeabi_dcmpeq>
 8007282:	4680      	mov	r8, r0
 8007284:	b158      	cbz	r0, 800729e <_dtoa_r+0xce>
 8007286:	9a13      	ldr	r2, [sp, #76]	@ 0x4c
 8007288:	2301      	movs	r3, #1
 800728a:	6013      	str	r3, [r2, #0]
 800728c:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 800728e:	b113      	cbz	r3, 8007296 <_dtoa_r+0xc6>
 8007290:	9a23      	ldr	r2, [sp, #140]	@ 0x8c
 8007292:	4b84      	ldr	r3, [pc, #528]	@ (80074a4 <_dtoa_r+0x2d4>)
 8007294:	6013      	str	r3, [r2, #0]
 8007296:	f8df a220 	ldr.w	sl, [pc, #544]	@ 80074b8 <_dtoa_r+0x2e8>
 800729a:	f000 bd33 	b.w	8007d04 <_dtoa_r+0xb34>
 800729e:	ed9d 0b0c 	vldr	d0, [sp, #48]	@ 0x30
 80072a2:	aa16      	add	r2, sp, #88	@ 0x58
 80072a4:	a917      	add	r1, sp, #92	@ 0x5c
 80072a6:	4658      	mov	r0, fp
 80072a8:	f001 f980 	bl	80085ac <__d2b>
 80072ac:	f3c7 560a 	ubfx	r6, r7, #20, #11
 80072b0:	4681      	mov	r9, r0
 80072b2:	2e00      	cmp	r6, #0
 80072b4:	d077      	beq.n	80073a6 <_dtoa_r+0x1d6>
 80072b6:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 80072b8:	f8cd 8050 	str.w	r8, [sp, #80]	@ 0x50
 80072bc:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80072c0:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 80072c4:	f043 537f 	orr.w	r3, r3, #1069547520	@ 0x3fc00000
 80072c8:	f443 1340 	orr.w	r3, r3, #3145728	@ 0x300000
 80072cc:	f2a6 36ff 	subw	r6, r6, #1023	@ 0x3ff
 80072d0:	4619      	mov	r1, r3
 80072d2:	2200      	movs	r2, #0
 80072d4:	4b74      	ldr	r3, [pc, #464]	@ (80074a8 <_dtoa_r+0x2d8>)
 80072d6:	f7f8 fff7 	bl	80002c8 <__aeabi_dsub>
 80072da:	a369      	add	r3, pc, #420	@ (adr r3, 8007480 <_dtoa_r+0x2b0>)
 80072dc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80072e0:	f7f9 f9aa 	bl	8000638 <__aeabi_dmul>
 80072e4:	a368      	add	r3, pc, #416	@ (adr r3, 8007488 <_dtoa_r+0x2b8>)
 80072e6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80072ea:	f7f8 ffef 	bl	80002cc <__adddf3>
 80072ee:	4604      	mov	r4, r0
 80072f0:	4630      	mov	r0, r6
 80072f2:	460d      	mov	r5, r1
 80072f4:	f7f9 f936 	bl	8000564 <__aeabi_i2d>
 80072f8:	a365      	add	r3, pc, #404	@ (adr r3, 8007490 <_dtoa_r+0x2c0>)
 80072fa:	e9d3 2300 	ldrd	r2, r3, [r3]
 80072fe:	f7f9 f99b 	bl	8000638 <__aeabi_dmul>
 8007302:	4602      	mov	r2, r0
 8007304:	460b      	mov	r3, r1
 8007306:	4620      	mov	r0, r4
 8007308:	4629      	mov	r1, r5
 800730a:	f7f8 ffdf 	bl	80002cc <__adddf3>
 800730e:	4604      	mov	r4, r0
 8007310:	460d      	mov	r5, r1
 8007312:	f7f9 fc41 	bl	8000b98 <__aeabi_d2iz>
 8007316:	2200      	movs	r2, #0
 8007318:	4607      	mov	r7, r0
 800731a:	2300      	movs	r3, #0
 800731c:	4620      	mov	r0, r4
 800731e:	4629      	mov	r1, r5
 8007320:	f7f9 fbfc 	bl	8000b1c <__aeabi_dcmplt>
 8007324:	b140      	cbz	r0, 8007338 <_dtoa_r+0x168>
 8007326:	4638      	mov	r0, r7
 8007328:	f7f9 f91c 	bl	8000564 <__aeabi_i2d>
 800732c:	4622      	mov	r2, r4
 800732e:	462b      	mov	r3, r5
 8007330:	f7f9 fbea 	bl	8000b08 <__aeabi_dcmpeq>
 8007334:	b900      	cbnz	r0, 8007338 <_dtoa_r+0x168>
 8007336:	3f01      	subs	r7, #1
 8007338:	2f16      	cmp	r7, #22
 800733a:	d851      	bhi.n	80073e0 <_dtoa_r+0x210>
 800733c:	4b5b      	ldr	r3, [pc, #364]	@ (80074ac <_dtoa_r+0x2dc>)
 800733e:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 8007342:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007346:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800734a:	f7f9 fbe7 	bl	8000b1c <__aeabi_dcmplt>
 800734e:	2800      	cmp	r0, #0
 8007350:	d048      	beq.n	80073e4 <_dtoa_r+0x214>
 8007352:	3f01      	subs	r7, #1
 8007354:	2300      	movs	r3, #0
 8007356:	9312      	str	r3, [sp, #72]	@ 0x48
 8007358:	9b16      	ldr	r3, [sp, #88]	@ 0x58
 800735a:	1b9b      	subs	r3, r3, r6
 800735c:	1e5a      	subs	r2, r3, #1
 800735e:	bf44      	itt	mi
 8007360:	f1c3 0801 	rsbmi	r8, r3, #1
 8007364:	2300      	movmi	r3, #0
 8007366:	9208      	str	r2, [sp, #32]
 8007368:	bf54      	ite	pl
 800736a:	f04f 0800 	movpl.w	r8, #0
 800736e:	9308      	strmi	r3, [sp, #32]
 8007370:	2f00      	cmp	r7, #0
 8007372:	db39      	blt.n	80073e8 <_dtoa_r+0x218>
 8007374:	9b08      	ldr	r3, [sp, #32]
 8007376:	970f      	str	r7, [sp, #60]	@ 0x3c
 8007378:	443b      	add	r3, r7
 800737a:	9308      	str	r3, [sp, #32]
 800737c:	2300      	movs	r3, #0
 800737e:	930a      	str	r3, [sp, #40]	@ 0x28
 8007380:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8007382:	2b09      	cmp	r3, #9
 8007384:	d864      	bhi.n	8007450 <_dtoa_r+0x280>
 8007386:	2b05      	cmp	r3, #5
 8007388:	bfc4      	itt	gt
 800738a:	3b04      	subgt	r3, #4
 800738c:	9309      	strgt	r3, [sp, #36]	@ 0x24
 800738e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8007390:	f1a3 0302 	sub.w	r3, r3, #2
 8007394:	bfcc      	ite	gt
 8007396:	2400      	movgt	r4, #0
 8007398:	2401      	movle	r4, #1
 800739a:	2b03      	cmp	r3, #3
 800739c:	d863      	bhi.n	8007466 <_dtoa_r+0x296>
 800739e:	e8df f003 	tbb	[pc, r3]
 80073a2:	372a      	.short	0x372a
 80073a4:	5535      	.short	0x5535
 80073a6:	e9dd 6316 	ldrd	r6, r3, [sp, #88]	@ 0x58
 80073aa:	441e      	add	r6, r3
 80073ac:	f206 4332 	addw	r3, r6, #1074	@ 0x432
 80073b0:	2b20      	cmp	r3, #32
 80073b2:	bfc1      	itttt	gt
 80073b4:	f1c3 0340 	rsbgt	r3, r3, #64	@ 0x40
 80073b8:	409f      	lslgt	r7, r3
 80073ba:	f206 4312 	addwgt	r3, r6, #1042	@ 0x412
 80073be:	fa24 f303 	lsrgt.w	r3, r4, r3
 80073c2:	bfd6      	itet	le
 80073c4:	f1c3 0320 	rsble	r3, r3, #32
 80073c8:	ea47 0003 	orrgt.w	r0, r7, r3
 80073cc:	fa04 f003 	lslle.w	r0, r4, r3
 80073d0:	f7f9 f8b8 	bl	8000544 <__aeabi_ui2d>
 80073d4:	2201      	movs	r2, #1
 80073d6:	f1a1 73f8 	sub.w	r3, r1, #32505856	@ 0x1f00000
 80073da:	3e01      	subs	r6, #1
 80073dc:	9214      	str	r2, [sp, #80]	@ 0x50
 80073de:	e777      	b.n	80072d0 <_dtoa_r+0x100>
 80073e0:	2301      	movs	r3, #1
 80073e2:	e7b8      	b.n	8007356 <_dtoa_r+0x186>
 80073e4:	9012      	str	r0, [sp, #72]	@ 0x48
 80073e6:	e7b7      	b.n	8007358 <_dtoa_r+0x188>
 80073e8:	427b      	negs	r3, r7
 80073ea:	930a      	str	r3, [sp, #40]	@ 0x28
 80073ec:	2300      	movs	r3, #0
 80073ee:	eba8 0807 	sub.w	r8, r8, r7
 80073f2:	930f      	str	r3, [sp, #60]	@ 0x3c
 80073f4:	e7c4      	b.n	8007380 <_dtoa_r+0x1b0>
 80073f6:	2300      	movs	r3, #0
 80073f8:	930b      	str	r3, [sp, #44]	@ 0x2c
 80073fa:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 80073fc:	2b00      	cmp	r3, #0
 80073fe:	dc35      	bgt.n	800746c <_dtoa_r+0x29c>
 8007400:	2301      	movs	r3, #1
 8007402:	9300      	str	r3, [sp, #0]
 8007404:	9307      	str	r3, [sp, #28]
 8007406:	461a      	mov	r2, r3
 8007408:	920e      	str	r2, [sp, #56]	@ 0x38
 800740a:	e00b      	b.n	8007424 <_dtoa_r+0x254>
 800740c:	2301      	movs	r3, #1
 800740e:	e7f3      	b.n	80073f8 <_dtoa_r+0x228>
 8007410:	2300      	movs	r3, #0
 8007412:	930b      	str	r3, [sp, #44]	@ 0x2c
 8007414:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8007416:	18fb      	adds	r3, r7, r3
 8007418:	9300      	str	r3, [sp, #0]
 800741a:	3301      	adds	r3, #1
 800741c:	2b01      	cmp	r3, #1
 800741e:	9307      	str	r3, [sp, #28]
 8007420:	bfb8      	it	lt
 8007422:	2301      	movlt	r3, #1
 8007424:	f8db 001c 	ldr.w	r0, [fp, #28]
 8007428:	2100      	movs	r1, #0
 800742a:	2204      	movs	r2, #4
 800742c:	f102 0514 	add.w	r5, r2, #20
 8007430:	429d      	cmp	r5, r3
 8007432:	d91f      	bls.n	8007474 <_dtoa_r+0x2a4>
 8007434:	6041      	str	r1, [r0, #4]
 8007436:	4658      	mov	r0, fp
 8007438:	f000 fd8e 	bl	8007f58 <_Balloc>
 800743c:	4682      	mov	sl, r0
 800743e:	2800      	cmp	r0, #0
 8007440:	d13c      	bne.n	80074bc <_dtoa_r+0x2ec>
 8007442:	4b1b      	ldr	r3, [pc, #108]	@ (80074b0 <_dtoa_r+0x2e0>)
 8007444:	4602      	mov	r2, r0
 8007446:	f240 11af 	movw	r1, #431	@ 0x1af
 800744a:	e6d8      	b.n	80071fe <_dtoa_r+0x2e>
 800744c:	2301      	movs	r3, #1
 800744e:	e7e0      	b.n	8007412 <_dtoa_r+0x242>
 8007450:	2401      	movs	r4, #1
 8007452:	2300      	movs	r3, #0
 8007454:	9309      	str	r3, [sp, #36]	@ 0x24
 8007456:	940b      	str	r4, [sp, #44]	@ 0x2c
 8007458:	f04f 33ff 	mov.w	r3, #4294967295
 800745c:	9300      	str	r3, [sp, #0]
 800745e:	9307      	str	r3, [sp, #28]
 8007460:	2200      	movs	r2, #0
 8007462:	2312      	movs	r3, #18
 8007464:	e7d0      	b.n	8007408 <_dtoa_r+0x238>
 8007466:	2301      	movs	r3, #1
 8007468:	930b      	str	r3, [sp, #44]	@ 0x2c
 800746a:	e7f5      	b.n	8007458 <_dtoa_r+0x288>
 800746c:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800746e:	9300      	str	r3, [sp, #0]
 8007470:	9307      	str	r3, [sp, #28]
 8007472:	e7d7      	b.n	8007424 <_dtoa_r+0x254>
 8007474:	3101      	adds	r1, #1
 8007476:	0052      	lsls	r2, r2, #1
 8007478:	e7d8      	b.n	800742c <_dtoa_r+0x25c>
 800747a:	bf00      	nop
 800747c:	f3af 8000 	nop.w
 8007480:	636f4361 	.word	0x636f4361
 8007484:	3fd287a7 	.word	0x3fd287a7
 8007488:	8b60c8b3 	.word	0x8b60c8b3
 800748c:	3fc68a28 	.word	0x3fc68a28
 8007490:	509f79fb 	.word	0x509f79fb
 8007494:	3fd34413 	.word	0x3fd34413
 8007498:	0800a391 	.word	0x0800a391
 800749c:	0800a3a8 	.word	0x0800a3a8
 80074a0:	7ff00000 	.word	0x7ff00000
 80074a4:	0800a361 	.word	0x0800a361
 80074a8:	3ff80000 	.word	0x3ff80000
 80074ac:	0800a4a0 	.word	0x0800a4a0
 80074b0:	0800a400 	.word	0x0800a400
 80074b4:	0800a38d 	.word	0x0800a38d
 80074b8:	0800a360 	.word	0x0800a360
 80074bc:	f8db 301c 	ldr.w	r3, [fp, #28]
 80074c0:	6018      	str	r0, [r3, #0]
 80074c2:	9b07      	ldr	r3, [sp, #28]
 80074c4:	2b0e      	cmp	r3, #14
 80074c6:	f200 80a4 	bhi.w	8007612 <_dtoa_r+0x442>
 80074ca:	2c00      	cmp	r4, #0
 80074cc:	f000 80a1 	beq.w	8007612 <_dtoa_r+0x442>
 80074d0:	2f00      	cmp	r7, #0
 80074d2:	dd33      	ble.n	800753c <_dtoa_r+0x36c>
 80074d4:	4bad      	ldr	r3, [pc, #692]	@ (800778c <_dtoa_r+0x5bc>)
 80074d6:	f007 020f 	and.w	r2, r7, #15
 80074da:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 80074de:	ed93 7b00 	vldr	d7, [r3]
 80074e2:	05f8      	lsls	r0, r7, #23
 80074e4:	ed8d 7b04 	vstr	d7, [sp, #16]
 80074e8:	ea4f 1427 	mov.w	r4, r7, asr #4
 80074ec:	d516      	bpl.n	800751c <_dtoa_r+0x34c>
 80074ee:	4ba8      	ldr	r3, [pc, #672]	@ (8007790 <_dtoa_r+0x5c0>)
 80074f0:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 80074f4:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 80074f8:	f7f9 f9c8 	bl	800088c <__aeabi_ddiv>
 80074fc:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8007500:	f004 040f 	and.w	r4, r4, #15
 8007504:	2603      	movs	r6, #3
 8007506:	4da2      	ldr	r5, [pc, #648]	@ (8007790 <_dtoa_r+0x5c0>)
 8007508:	b954      	cbnz	r4, 8007520 <_dtoa_r+0x350>
 800750a:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800750e:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8007512:	f7f9 f9bb 	bl	800088c <__aeabi_ddiv>
 8007516:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800751a:	e028      	b.n	800756e <_dtoa_r+0x39e>
 800751c:	2602      	movs	r6, #2
 800751e:	e7f2      	b.n	8007506 <_dtoa_r+0x336>
 8007520:	07e1      	lsls	r1, r4, #31
 8007522:	d508      	bpl.n	8007536 <_dtoa_r+0x366>
 8007524:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8007528:	e9d5 2300 	ldrd	r2, r3, [r5]
 800752c:	f7f9 f884 	bl	8000638 <__aeabi_dmul>
 8007530:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8007534:	3601      	adds	r6, #1
 8007536:	1064      	asrs	r4, r4, #1
 8007538:	3508      	adds	r5, #8
 800753a:	e7e5      	b.n	8007508 <_dtoa_r+0x338>
 800753c:	f000 80d2 	beq.w	80076e4 <_dtoa_r+0x514>
 8007540:	427c      	negs	r4, r7
 8007542:	4b92      	ldr	r3, [pc, #584]	@ (800778c <_dtoa_r+0x5bc>)
 8007544:	4d92      	ldr	r5, [pc, #584]	@ (8007790 <_dtoa_r+0x5c0>)
 8007546:	f004 020f 	and.w	r2, r4, #15
 800754a:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800754e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007552:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8007556:	f7f9 f86f 	bl	8000638 <__aeabi_dmul>
 800755a:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800755e:	1124      	asrs	r4, r4, #4
 8007560:	2300      	movs	r3, #0
 8007562:	2602      	movs	r6, #2
 8007564:	2c00      	cmp	r4, #0
 8007566:	f040 80b2 	bne.w	80076ce <_dtoa_r+0x4fe>
 800756a:	2b00      	cmp	r3, #0
 800756c:	d1d3      	bne.n	8007516 <_dtoa_r+0x346>
 800756e:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 8007570:	e9dd 4502 	ldrd	r4, r5, [sp, #8]
 8007574:	2b00      	cmp	r3, #0
 8007576:	f000 80b7 	beq.w	80076e8 <_dtoa_r+0x518>
 800757a:	4b86      	ldr	r3, [pc, #536]	@ (8007794 <_dtoa_r+0x5c4>)
 800757c:	2200      	movs	r2, #0
 800757e:	4620      	mov	r0, r4
 8007580:	4629      	mov	r1, r5
 8007582:	f7f9 facb 	bl	8000b1c <__aeabi_dcmplt>
 8007586:	2800      	cmp	r0, #0
 8007588:	f000 80ae 	beq.w	80076e8 <_dtoa_r+0x518>
 800758c:	9b07      	ldr	r3, [sp, #28]
 800758e:	2b00      	cmp	r3, #0
 8007590:	f000 80aa 	beq.w	80076e8 <_dtoa_r+0x518>
 8007594:	9b00      	ldr	r3, [sp, #0]
 8007596:	2b00      	cmp	r3, #0
 8007598:	dd37      	ble.n	800760a <_dtoa_r+0x43a>
 800759a:	1e7b      	subs	r3, r7, #1
 800759c:	9304      	str	r3, [sp, #16]
 800759e:	4620      	mov	r0, r4
 80075a0:	4b7d      	ldr	r3, [pc, #500]	@ (8007798 <_dtoa_r+0x5c8>)
 80075a2:	2200      	movs	r2, #0
 80075a4:	4629      	mov	r1, r5
 80075a6:	f7f9 f847 	bl	8000638 <__aeabi_dmul>
 80075aa:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80075ae:	9c00      	ldr	r4, [sp, #0]
 80075b0:	3601      	adds	r6, #1
 80075b2:	4630      	mov	r0, r6
 80075b4:	f7f8 ffd6 	bl	8000564 <__aeabi_i2d>
 80075b8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80075bc:	f7f9 f83c 	bl	8000638 <__aeabi_dmul>
 80075c0:	4b76      	ldr	r3, [pc, #472]	@ (800779c <_dtoa_r+0x5cc>)
 80075c2:	2200      	movs	r2, #0
 80075c4:	f7f8 fe82 	bl	80002cc <__adddf3>
 80075c8:	4605      	mov	r5, r0
 80075ca:	f1a1 7650 	sub.w	r6, r1, #54525952	@ 0x3400000
 80075ce:	2c00      	cmp	r4, #0
 80075d0:	f040 808d 	bne.w	80076ee <_dtoa_r+0x51e>
 80075d4:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80075d8:	4b71      	ldr	r3, [pc, #452]	@ (80077a0 <_dtoa_r+0x5d0>)
 80075da:	2200      	movs	r2, #0
 80075dc:	f7f8 fe74 	bl	80002c8 <__aeabi_dsub>
 80075e0:	4602      	mov	r2, r0
 80075e2:	460b      	mov	r3, r1
 80075e4:	e9cd 2302 	strd	r2, r3, [sp, #8]
 80075e8:	462a      	mov	r2, r5
 80075ea:	4633      	mov	r3, r6
 80075ec:	f7f9 fab4 	bl	8000b58 <__aeabi_dcmpgt>
 80075f0:	2800      	cmp	r0, #0
 80075f2:	f040 828b 	bne.w	8007b0c <_dtoa_r+0x93c>
 80075f6:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80075fa:	462a      	mov	r2, r5
 80075fc:	f106 4300 	add.w	r3, r6, #2147483648	@ 0x80000000
 8007600:	f7f9 fa8c 	bl	8000b1c <__aeabi_dcmplt>
 8007604:	2800      	cmp	r0, #0
 8007606:	f040 8128 	bne.w	800785a <_dtoa_r+0x68a>
 800760a:	e9dd 340c 	ldrd	r3, r4, [sp, #48]	@ 0x30
 800760e:	e9cd 3402 	strd	r3, r4, [sp, #8]
 8007612:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 8007614:	2b00      	cmp	r3, #0
 8007616:	f2c0 815a 	blt.w	80078ce <_dtoa_r+0x6fe>
 800761a:	2f0e      	cmp	r7, #14
 800761c:	f300 8157 	bgt.w	80078ce <_dtoa_r+0x6fe>
 8007620:	4b5a      	ldr	r3, [pc, #360]	@ (800778c <_dtoa_r+0x5bc>)
 8007622:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 8007626:	ed93 7b00 	vldr	d7, [r3]
 800762a:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800762c:	2b00      	cmp	r3, #0
 800762e:	ed8d 7b00 	vstr	d7, [sp]
 8007632:	da03      	bge.n	800763c <_dtoa_r+0x46c>
 8007634:	9b07      	ldr	r3, [sp, #28]
 8007636:	2b00      	cmp	r3, #0
 8007638:	f340 8101 	ble.w	800783e <_dtoa_r+0x66e>
 800763c:	e9dd 4502 	ldrd	r4, r5, [sp, #8]
 8007640:	4656      	mov	r6, sl
 8007642:	e9dd 2300 	ldrd	r2, r3, [sp]
 8007646:	4620      	mov	r0, r4
 8007648:	4629      	mov	r1, r5
 800764a:	f7f9 f91f 	bl	800088c <__aeabi_ddiv>
 800764e:	f7f9 faa3 	bl	8000b98 <__aeabi_d2iz>
 8007652:	4680      	mov	r8, r0
 8007654:	f7f8 ff86 	bl	8000564 <__aeabi_i2d>
 8007658:	e9dd 2300 	ldrd	r2, r3, [sp]
 800765c:	f7f8 ffec 	bl	8000638 <__aeabi_dmul>
 8007660:	4602      	mov	r2, r0
 8007662:	460b      	mov	r3, r1
 8007664:	4620      	mov	r0, r4
 8007666:	4629      	mov	r1, r5
 8007668:	f108 0430 	add.w	r4, r8, #48	@ 0x30
 800766c:	f7f8 fe2c 	bl	80002c8 <__aeabi_dsub>
 8007670:	f806 4b01 	strb.w	r4, [r6], #1
 8007674:	9d07      	ldr	r5, [sp, #28]
 8007676:	eba6 040a 	sub.w	r4, r6, sl
 800767a:	42a5      	cmp	r5, r4
 800767c:	4602      	mov	r2, r0
 800767e:	460b      	mov	r3, r1
 8007680:	f040 8117 	bne.w	80078b2 <_dtoa_r+0x6e2>
 8007684:	f7f8 fe22 	bl	80002cc <__adddf3>
 8007688:	e9dd 2300 	ldrd	r2, r3, [sp]
 800768c:	4604      	mov	r4, r0
 800768e:	460d      	mov	r5, r1
 8007690:	f7f9 fa62 	bl	8000b58 <__aeabi_dcmpgt>
 8007694:	2800      	cmp	r0, #0
 8007696:	f040 80f9 	bne.w	800788c <_dtoa_r+0x6bc>
 800769a:	e9dd 2300 	ldrd	r2, r3, [sp]
 800769e:	4620      	mov	r0, r4
 80076a0:	4629      	mov	r1, r5
 80076a2:	f7f9 fa31 	bl	8000b08 <__aeabi_dcmpeq>
 80076a6:	b118      	cbz	r0, 80076b0 <_dtoa_r+0x4e0>
 80076a8:	f018 0f01 	tst.w	r8, #1
 80076ac:	f040 80ee 	bne.w	800788c <_dtoa_r+0x6bc>
 80076b0:	4649      	mov	r1, r9
 80076b2:	4658      	mov	r0, fp
 80076b4:	f000 fc90 	bl	8007fd8 <_Bfree>
 80076b8:	2300      	movs	r3, #0
 80076ba:	7033      	strb	r3, [r6, #0]
 80076bc:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 80076be:	3701      	adds	r7, #1
 80076c0:	601f      	str	r7, [r3, #0]
 80076c2:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 80076c4:	2b00      	cmp	r3, #0
 80076c6:	f000 831d 	beq.w	8007d04 <_dtoa_r+0xb34>
 80076ca:	601e      	str	r6, [r3, #0]
 80076cc:	e31a      	b.n	8007d04 <_dtoa_r+0xb34>
 80076ce:	07e2      	lsls	r2, r4, #31
 80076d0:	d505      	bpl.n	80076de <_dtoa_r+0x50e>
 80076d2:	e9d5 2300 	ldrd	r2, r3, [r5]
 80076d6:	f7f8 ffaf 	bl	8000638 <__aeabi_dmul>
 80076da:	3601      	adds	r6, #1
 80076dc:	2301      	movs	r3, #1
 80076de:	1064      	asrs	r4, r4, #1
 80076e0:	3508      	adds	r5, #8
 80076e2:	e73f      	b.n	8007564 <_dtoa_r+0x394>
 80076e4:	2602      	movs	r6, #2
 80076e6:	e742      	b.n	800756e <_dtoa_r+0x39e>
 80076e8:	9c07      	ldr	r4, [sp, #28]
 80076ea:	9704      	str	r7, [sp, #16]
 80076ec:	e761      	b.n	80075b2 <_dtoa_r+0x3e2>
 80076ee:	4b27      	ldr	r3, [pc, #156]	@ (800778c <_dtoa_r+0x5bc>)
 80076f0:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 80076f2:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 80076f6:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 80076fa:	4454      	add	r4, sl
 80076fc:	2900      	cmp	r1, #0
 80076fe:	d053      	beq.n	80077a8 <_dtoa_r+0x5d8>
 8007700:	4928      	ldr	r1, [pc, #160]	@ (80077a4 <_dtoa_r+0x5d4>)
 8007702:	2000      	movs	r0, #0
 8007704:	f7f9 f8c2 	bl	800088c <__aeabi_ddiv>
 8007708:	4633      	mov	r3, r6
 800770a:	462a      	mov	r2, r5
 800770c:	f7f8 fddc 	bl	80002c8 <__aeabi_dsub>
 8007710:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 8007714:	4656      	mov	r6, sl
 8007716:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800771a:	f7f9 fa3d 	bl	8000b98 <__aeabi_d2iz>
 800771e:	4605      	mov	r5, r0
 8007720:	f7f8 ff20 	bl	8000564 <__aeabi_i2d>
 8007724:	4602      	mov	r2, r0
 8007726:	460b      	mov	r3, r1
 8007728:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800772c:	f7f8 fdcc 	bl	80002c8 <__aeabi_dsub>
 8007730:	3530      	adds	r5, #48	@ 0x30
 8007732:	4602      	mov	r2, r0
 8007734:	460b      	mov	r3, r1
 8007736:	e9cd 2302 	strd	r2, r3, [sp, #8]
 800773a:	f806 5b01 	strb.w	r5, [r6], #1
 800773e:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 8007742:	f7f9 f9eb 	bl	8000b1c <__aeabi_dcmplt>
 8007746:	2800      	cmp	r0, #0
 8007748:	d171      	bne.n	800782e <_dtoa_r+0x65e>
 800774a:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800774e:	4911      	ldr	r1, [pc, #68]	@ (8007794 <_dtoa_r+0x5c4>)
 8007750:	2000      	movs	r0, #0
 8007752:	f7f8 fdb9 	bl	80002c8 <__aeabi_dsub>
 8007756:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 800775a:	f7f9 f9df 	bl	8000b1c <__aeabi_dcmplt>
 800775e:	2800      	cmp	r0, #0
 8007760:	f040 8095 	bne.w	800788e <_dtoa_r+0x6be>
 8007764:	42a6      	cmp	r6, r4
 8007766:	f43f af50 	beq.w	800760a <_dtoa_r+0x43a>
 800776a:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	@ 0x40
 800776e:	4b0a      	ldr	r3, [pc, #40]	@ (8007798 <_dtoa_r+0x5c8>)
 8007770:	2200      	movs	r2, #0
 8007772:	f7f8 ff61 	bl	8000638 <__aeabi_dmul>
 8007776:	4b08      	ldr	r3, [pc, #32]	@ (8007798 <_dtoa_r+0x5c8>)
 8007778:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 800777c:	2200      	movs	r2, #0
 800777e:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8007782:	f7f8 ff59 	bl	8000638 <__aeabi_dmul>
 8007786:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800778a:	e7c4      	b.n	8007716 <_dtoa_r+0x546>
 800778c:	0800a4a0 	.word	0x0800a4a0
 8007790:	0800a478 	.word	0x0800a478
 8007794:	3ff00000 	.word	0x3ff00000
 8007798:	40240000 	.word	0x40240000
 800779c:	401c0000 	.word	0x401c0000
 80077a0:	40140000 	.word	0x40140000
 80077a4:	3fe00000 	.word	0x3fe00000
 80077a8:	4631      	mov	r1, r6
 80077aa:	4628      	mov	r0, r5
 80077ac:	f7f8 ff44 	bl	8000638 <__aeabi_dmul>
 80077b0:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 80077b4:	9415      	str	r4, [sp, #84]	@ 0x54
 80077b6:	4656      	mov	r6, sl
 80077b8:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80077bc:	f7f9 f9ec 	bl	8000b98 <__aeabi_d2iz>
 80077c0:	4605      	mov	r5, r0
 80077c2:	f7f8 fecf 	bl	8000564 <__aeabi_i2d>
 80077c6:	4602      	mov	r2, r0
 80077c8:	460b      	mov	r3, r1
 80077ca:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80077ce:	f7f8 fd7b 	bl	80002c8 <__aeabi_dsub>
 80077d2:	3530      	adds	r5, #48	@ 0x30
 80077d4:	f806 5b01 	strb.w	r5, [r6], #1
 80077d8:	4602      	mov	r2, r0
 80077da:	460b      	mov	r3, r1
 80077dc:	42a6      	cmp	r6, r4
 80077de:	e9cd 2302 	strd	r2, r3, [sp, #8]
 80077e2:	f04f 0200 	mov.w	r2, #0
 80077e6:	d124      	bne.n	8007832 <_dtoa_r+0x662>
 80077e8:	4bac      	ldr	r3, [pc, #688]	@ (8007a9c <_dtoa_r+0x8cc>)
 80077ea:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	@ 0x40
 80077ee:	f7f8 fd6d 	bl	80002cc <__adddf3>
 80077f2:	4602      	mov	r2, r0
 80077f4:	460b      	mov	r3, r1
 80077f6:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80077fa:	f7f9 f9ad 	bl	8000b58 <__aeabi_dcmpgt>
 80077fe:	2800      	cmp	r0, #0
 8007800:	d145      	bne.n	800788e <_dtoa_r+0x6be>
 8007802:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 8007806:	49a5      	ldr	r1, [pc, #660]	@ (8007a9c <_dtoa_r+0x8cc>)
 8007808:	2000      	movs	r0, #0
 800780a:	f7f8 fd5d 	bl	80002c8 <__aeabi_dsub>
 800780e:	4602      	mov	r2, r0
 8007810:	460b      	mov	r3, r1
 8007812:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8007816:	f7f9 f981 	bl	8000b1c <__aeabi_dcmplt>
 800781a:	2800      	cmp	r0, #0
 800781c:	f43f aef5 	beq.w	800760a <_dtoa_r+0x43a>
 8007820:	9e15      	ldr	r6, [sp, #84]	@ 0x54
 8007822:	1e73      	subs	r3, r6, #1
 8007824:	9315      	str	r3, [sp, #84]	@ 0x54
 8007826:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 800782a:	2b30      	cmp	r3, #48	@ 0x30
 800782c:	d0f8      	beq.n	8007820 <_dtoa_r+0x650>
 800782e:	9f04      	ldr	r7, [sp, #16]
 8007830:	e73e      	b.n	80076b0 <_dtoa_r+0x4e0>
 8007832:	4b9b      	ldr	r3, [pc, #620]	@ (8007aa0 <_dtoa_r+0x8d0>)
 8007834:	f7f8 ff00 	bl	8000638 <__aeabi_dmul>
 8007838:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800783c:	e7bc      	b.n	80077b8 <_dtoa_r+0x5e8>
 800783e:	d10c      	bne.n	800785a <_dtoa_r+0x68a>
 8007840:	4b98      	ldr	r3, [pc, #608]	@ (8007aa4 <_dtoa_r+0x8d4>)
 8007842:	2200      	movs	r2, #0
 8007844:	e9dd 0100 	ldrd	r0, r1, [sp]
 8007848:	f7f8 fef6 	bl	8000638 <__aeabi_dmul>
 800784c:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8007850:	f7f9 f978 	bl	8000b44 <__aeabi_dcmpge>
 8007854:	2800      	cmp	r0, #0
 8007856:	f000 8157 	beq.w	8007b08 <_dtoa_r+0x938>
 800785a:	2400      	movs	r4, #0
 800785c:	4625      	mov	r5, r4
 800785e:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8007860:	43db      	mvns	r3, r3
 8007862:	9304      	str	r3, [sp, #16]
 8007864:	4656      	mov	r6, sl
 8007866:	2700      	movs	r7, #0
 8007868:	4621      	mov	r1, r4
 800786a:	4658      	mov	r0, fp
 800786c:	f000 fbb4 	bl	8007fd8 <_Bfree>
 8007870:	2d00      	cmp	r5, #0
 8007872:	d0dc      	beq.n	800782e <_dtoa_r+0x65e>
 8007874:	b12f      	cbz	r7, 8007882 <_dtoa_r+0x6b2>
 8007876:	42af      	cmp	r7, r5
 8007878:	d003      	beq.n	8007882 <_dtoa_r+0x6b2>
 800787a:	4639      	mov	r1, r7
 800787c:	4658      	mov	r0, fp
 800787e:	f000 fbab 	bl	8007fd8 <_Bfree>
 8007882:	4629      	mov	r1, r5
 8007884:	4658      	mov	r0, fp
 8007886:	f000 fba7 	bl	8007fd8 <_Bfree>
 800788a:	e7d0      	b.n	800782e <_dtoa_r+0x65e>
 800788c:	9704      	str	r7, [sp, #16]
 800788e:	4633      	mov	r3, r6
 8007890:	461e      	mov	r6, r3
 8007892:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8007896:	2a39      	cmp	r2, #57	@ 0x39
 8007898:	d107      	bne.n	80078aa <_dtoa_r+0x6da>
 800789a:	459a      	cmp	sl, r3
 800789c:	d1f8      	bne.n	8007890 <_dtoa_r+0x6c0>
 800789e:	9a04      	ldr	r2, [sp, #16]
 80078a0:	3201      	adds	r2, #1
 80078a2:	9204      	str	r2, [sp, #16]
 80078a4:	2230      	movs	r2, #48	@ 0x30
 80078a6:	f88a 2000 	strb.w	r2, [sl]
 80078aa:	781a      	ldrb	r2, [r3, #0]
 80078ac:	3201      	adds	r2, #1
 80078ae:	701a      	strb	r2, [r3, #0]
 80078b0:	e7bd      	b.n	800782e <_dtoa_r+0x65e>
 80078b2:	4b7b      	ldr	r3, [pc, #492]	@ (8007aa0 <_dtoa_r+0x8d0>)
 80078b4:	2200      	movs	r2, #0
 80078b6:	f7f8 febf 	bl	8000638 <__aeabi_dmul>
 80078ba:	2200      	movs	r2, #0
 80078bc:	2300      	movs	r3, #0
 80078be:	4604      	mov	r4, r0
 80078c0:	460d      	mov	r5, r1
 80078c2:	f7f9 f921 	bl	8000b08 <__aeabi_dcmpeq>
 80078c6:	2800      	cmp	r0, #0
 80078c8:	f43f aebb 	beq.w	8007642 <_dtoa_r+0x472>
 80078cc:	e6f0      	b.n	80076b0 <_dtoa_r+0x4e0>
 80078ce:	9a0b      	ldr	r2, [sp, #44]	@ 0x2c
 80078d0:	2a00      	cmp	r2, #0
 80078d2:	f000 80db 	beq.w	8007a8c <_dtoa_r+0x8bc>
 80078d6:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 80078d8:	2a01      	cmp	r2, #1
 80078da:	f300 80bf 	bgt.w	8007a5c <_dtoa_r+0x88c>
 80078de:	9a14      	ldr	r2, [sp, #80]	@ 0x50
 80078e0:	2a00      	cmp	r2, #0
 80078e2:	f000 80b7 	beq.w	8007a54 <_dtoa_r+0x884>
 80078e6:	f203 4333 	addw	r3, r3, #1075	@ 0x433
 80078ea:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
 80078ec:	4646      	mov	r6, r8
 80078ee:	9a08      	ldr	r2, [sp, #32]
 80078f0:	2101      	movs	r1, #1
 80078f2:	441a      	add	r2, r3
 80078f4:	4658      	mov	r0, fp
 80078f6:	4498      	add	r8, r3
 80078f8:	9208      	str	r2, [sp, #32]
 80078fa:	f000 fc21 	bl	8008140 <__i2b>
 80078fe:	4605      	mov	r5, r0
 8007900:	b15e      	cbz	r6, 800791a <_dtoa_r+0x74a>
 8007902:	9b08      	ldr	r3, [sp, #32]
 8007904:	2b00      	cmp	r3, #0
 8007906:	dd08      	ble.n	800791a <_dtoa_r+0x74a>
 8007908:	42b3      	cmp	r3, r6
 800790a:	9a08      	ldr	r2, [sp, #32]
 800790c:	bfa8      	it	ge
 800790e:	4633      	movge	r3, r6
 8007910:	eba8 0803 	sub.w	r8, r8, r3
 8007914:	1af6      	subs	r6, r6, r3
 8007916:	1ad3      	subs	r3, r2, r3
 8007918:	9308      	str	r3, [sp, #32]
 800791a:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800791c:	b1f3      	cbz	r3, 800795c <_dtoa_r+0x78c>
 800791e:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8007920:	2b00      	cmp	r3, #0
 8007922:	f000 80b7 	beq.w	8007a94 <_dtoa_r+0x8c4>
 8007926:	b18c      	cbz	r4, 800794c <_dtoa_r+0x77c>
 8007928:	4629      	mov	r1, r5
 800792a:	4622      	mov	r2, r4
 800792c:	4658      	mov	r0, fp
 800792e:	f000 fcc7 	bl	80082c0 <__pow5mult>
 8007932:	464a      	mov	r2, r9
 8007934:	4601      	mov	r1, r0
 8007936:	4605      	mov	r5, r0
 8007938:	4658      	mov	r0, fp
 800793a:	f000 fc17 	bl	800816c <__multiply>
 800793e:	4649      	mov	r1, r9
 8007940:	9004      	str	r0, [sp, #16]
 8007942:	4658      	mov	r0, fp
 8007944:	f000 fb48 	bl	8007fd8 <_Bfree>
 8007948:	9b04      	ldr	r3, [sp, #16]
 800794a:	4699      	mov	r9, r3
 800794c:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800794e:	1b1a      	subs	r2, r3, r4
 8007950:	d004      	beq.n	800795c <_dtoa_r+0x78c>
 8007952:	4649      	mov	r1, r9
 8007954:	4658      	mov	r0, fp
 8007956:	f000 fcb3 	bl	80082c0 <__pow5mult>
 800795a:	4681      	mov	r9, r0
 800795c:	2101      	movs	r1, #1
 800795e:	4658      	mov	r0, fp
 8007960:	f000 fbee 	bl	8008140 <__i2b>
 8007964:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8007966:	4604      	mov	r4, r0
 8007968:	2b00      	cmp	r3, #0
 800796a:	f000 81cf 	beq.w	8007d0c <_dtoa_r+0xb3c>
 800796e:	461a      	mov	r2, r3
 8007970:	4601      	mov	r1, r0
 8007972:	4658      	mov	r0, fp
 8007974:	f000 fca4 	bl	80082c0 <__pow5mult>
 8007978:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800797a:	2b01      	cmp	r3, #1
 800797c:	4604      	mov	r4, r0
 800797e:	f300 8095 	bgt.w	8007aac <_dtoa_r+0x8dc>
 8007982:	9b02      	ldr	r3, [sp, #8]
 8007984:	2b00      	cmp	r3, #0
 8007986:	f040 8087 	bne.w	8007a98 <_dtoa_r+0x8c8>
 800798a:	9b03      	ldr	r3, [sp, #12]
 800798c:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8007990:	2b00      	cmp	r3, #0
 8007992:	f040 8089 	bne.w	8007aa8 <_dtoa_r+0x8d8>
 8007996:	9b03      	ldr	r3, [sp, #12]
 8007998:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 800799c:	0d1b      	lsrs	r3, r3, #20
 800799e:	051b      	lsls	r3, r3, #20
 80079a0:	b12b      	cbz	r3, 80079ae <_dtoa_r+0x7de>
 80079a2:	9b08      	ldr	r3, [sp, #32]
 80079a4:	3301      	adds	r3, #1
 80079a6:	9308      	str	r3, [sp, #32]
 80079a8:	f108 0801 	add.w	r8, r8, #1
 80079ac:	2301      	movs	r3, #1
 80079ae:	930a      	str	r3, [sp, #40]	@ 0x28
 80079b0:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 80079b2:	2b00      	cmp	r3, #0
 80079b4:	f000 81b0 	beq.w	8007d18 <_dtoa_r+0xb48>
 80079b8:	6923      	ldr	r3, [r4, #16]
 80079ba:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 80079be:	6918      	ldr	r0, [r3, #16]
 80079c0:	f000 fb72 	bl	80080a8 <__hi0bits>
 80079c4:	f1c0 0020 	rsb	r0, r0, #32
 80079c8:	9b08      	ldr	r3, [sp, #32]
 80079ca:	4418      	add	r0, r3
 80079cc:	f010 001f 	ands.w	r0, r0, #31
 80079d0:	d077      	beq.n	8007ac2 <_dtoa_r+0x8f2>
 80079d2:	f1c0 0320 	rsb	r3, r0, #32
 80079d6:	2b04      	cmp	r3, #4
 80079d8:	dd6b      	ble.n	8007ab2 <_dtoa_r+0x8e2>
 80079da:	9b08      	ldr	r3, [sp, #32]
 80079dc:	f1c0 001c 	rsb	r0, r0, #28
 80079e0:	4403      	add	r3, r0
 80079e2:	4480      	add	r8, r0
 80079e4:	4406      	add	r6, r0
 80079e6:	9308      	str	r3, [sp, #32]
 80079e8:	f1b8 0f00 	cmp.w	r8, #0
 80079ec:	dd05      	ble.n	80079fa <_dtoa_r+0x82a>
 80079ee:	4649      	mov	r1, r9
 80079f0:	4642      	mov	r2, r8
 80079f2:	4658      	mov	r0, fp
 80079f4:	f000 fcbe 	bl	8008374 <__lshift>
 80079f8:	4681      	mov	r9, r0
 80079fa:	9b08      	ldr	r3, [sp, #32]
 80079fc:	2b00      	cmp	r3, #0
 80079fe:	dd05      	ble.n	8007a0c <_dtoa_r+0x83c>
 8007a00:	4621      	mov	r1, r4
 8007a02:	461a      	mov	r2, r3
 8007a04:	4658      	mov	r0, fp
 8007a06:	f000 fcb5 	bl	8008374 <__lshift>
 8007a0a:	4604      	mov	r4, r0
 8007a0c:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 8007a0e:	2b00      	cmp	r3, #0
 8007a10:	d059      	beq.n	8007ac6 <_dtoa_r+0x8f6>
 8007a12:	4621      	mov	r1, r4
 8007a14:	4648      	mov	r0, r9
 8007a16:	f000 fd19 	bl	800844c <__mcmp>
 8007a1a:	2800      	cmp	r0, #0
 8007a1c:	da53      	bge.n	8007ac6 <_dtoa_r+0x8f6>
 8007a1e:	1e7b      	subs	r3, r7, #1
 8007a20:	9304      	str	r3, [sp, #16]
 8007a22:	4649      	mov	r1, r9
 8007a24:	2300      	movs	r3, #0
 8007a26:	220a      	movs	r2, #10
 8007a28:	4658      	mov	r0, fp
 8007a2a:	f000 faf7 	bl	800801c <__multadd>
 8007a2e:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8007a30:	4681      	mov	r9, r0
 8007a32:	2b00      	cmp	r3, #0
 8007a34:	f000 8172 	beq.w	8007d1c <_dtoa_r+0xb4c>
 8007a38:	2300      	movs	r3, #0
 8007a3a:	4629      	mov	r1, r5
 8007a3c:	220a      	movs	r2, #10
 8007a3e:	4658      	mov	r0, fp
 8007a40:	f000 faec 	bl	800801c <__multadd>
 8007a44:	9b00      	ldr	r3, [sp, #0]
 8007a46:	2b00      	cmp	r3, #0
 8007a48:	4605      	mov	r5, r0
 8007a4a:	dc67      	bgt.n	8007b1c <_dtoa_r+0x94c>
 8007a4c:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8007a4e:	2b02      	cmp	r3, #2
 8007a50:	dc41      	bgt.n	8007ad6 <_dtoa_r+0x906>
 8007a52:	e063      	b.n	8007b1c <_dtoa_r+0x94c>
 8007a54:	9b16      	ldr	r3, [sp, #88]	@ 0x58
 8007a56:	f1c3 0336 	rsb	r3, r3, #54	@ 0x36
 8007a5a:	e746      	b.n	80078ea <_dtoa_r+0x71a>
 8007a5c:	9b07      	ldr	r3, [sp, #28]
 8007a5e:	1e5c      	subs	r4, r3, #1
 8007a60:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8007a62:	42a3      	cmp	r3, r4
 8007a64:	bfbf      	itttt	lt
 8007a66:	9b0a      	ldrlt	r3, [sp, #40]	@ 0x28
 8007a68:	9a0f      	ldrlt	r2, [sp, #60]	@ 0x3c
 8007a6a:	940a      	strlt	r4, [sp, #40]	@ 0x28
 8007a6c:	1ae3      	sublt	r3, r4, r3
 8007a6e:	bfb4      	ite	lt
 8007a70:	18d2      	addlt	r2, r2, r3
 8007a72:	1b1c      	subge	r4, r3, r4
 8007a74:	9b07      	ldr	r3, [sp, #28]
 8007a76:	bfbc      	itt	lt
 8007a78:	920f      	strlt	r2, [sp, #60]	@ 0x3c
 8007a7a:	2400      	movlt	r4, #0
 8007a7c:	2b00      	cmp	r3, #0
 8007a7e:	bfb5      	itete	lt
 8007a80:	eba8 0603 	sublt.w	r6, r8, r3
 8007a84:	9b07      	ldrge	r3, [sp, #28]
 8007a86:	2300      	movlt	r3, #0
 8007a88:	4646      	movge	r6, r8
 8007a8a:	e730      	b.n	80078ee <_dtoa_r+0x71e>
 8007a8c:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
 8007a8e:	9d0b      	ldr	r5, [sp, #44]	@ 0x2c
 8007a90:	4646      	mov	r6, r8
 8007a92:	e735      	b.n	8007900 <_dtoa_r+0x730>
 8007a94:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 8007a96:	e75c      	b.n	8007952 <_dtoa_r+0x782>
 8007a98:	2300      	movs	r3, #0
 8007a9a:	e788      	b.n	80079ae <_dtoa_r+0x7de>
 8007a9c:	3fe00000 	.word	0x3fe00000
 8007aa0:	40240000 	.word	0x40240000
 8007aa4:	40140000 	.word	0x40140000
 8007aa8:	9b02      	ldr	r3, [sp, #8]
 8007aaa:	e780      	b.n	80079ae <_dtoa_r+0x7de>
 8007aac:	2300      	movs	r3, #0
 8007aae:	930a      	str	r3, [sp, #40]	@ 0x28
 8007ab0:	e782      	b.n	80079b8 <_dtoa_r+0x7e8>
 8007ab2:	d099      	beq.n	80079e8 <_dtoa_r+0x818>
 8007ab4:	9a08      	ldr	r2, [sp, #32]
 8007ab6:	331c      	adds	r3, #28
 8007ab8:	441a      	add	r2, r3
 8007aba:	4498      	add	r8, r3
 8007abc:	441e      	add	r6, r3
 8007abe:	9208      	str	r2, [sp, #32]
 8007ac0:	e792      	b.n	80079e8 <_dtoa_r+0x818>
 8007ac2:	4603      	mov	r3, r0
 8007ac4:	e7f6      	b.n	8007ab4 <_dtoa_r+0x8e4>
 8007ac6:	9b07      	ldr	r3, [sp, #28]
 8007ac8:	9704      	str	r7, [sp, #16]
 8007aca:	2b00      	cmp	r3, #0
 8007acc:	dc20      	bgt.n	8007b10 <_dtoa_r+0x940>
 8007ace:	9300      	str	r3, [sp, #0]
 8007ad0:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8007ad2:	2b02      	cmp	r3, #2
 8007ad4:	dd1e      	ble.n	8007b14 <_dtoa_r+0x944>
 8007ad6:	9b00      	ldr	r3, [sp, #0]
 8007ad8:	2b00      	cmp	r3, #0
 8007ada:	f47f aec0 	bne.w	800785e <_dtoa_r+0x68e>
 8007ade:	4621      	mov	r1, r4
 8007ae0:	2205      	movs	r2, #5
 8007ae2:	4658      	mov	r0, fp
 8007ae4:	f000 fa9a 	bl	800801c <__multadd>
 8007ae8:	4601      	mov	r1, r0
 8007aea:	4604      	mov	r4, r0
 8007aec:	4648      	mov	r0, r9
 8007aee:	f000 fcad 	bl	800844c <__mcmp>
 8007af2:	2800      	cmp	r0, #0
 8007af4:	f77f aeb3 	ble.w	800785e <_dtoa_r+0x68e>
 8007af8:	4656      	mov	r6, sl
 8007afa:	2331      	movs	r3, #49	@ 0x31
 8007afc:	f806 3b01 	strb.w	r3, [r6], #1
 8007b00:	9b04      	ldr	r3, [sp, #16]
 8007b02:	3301      	adds	r3, #1
 8007b04:	9304      	str	r3, [sp, #16]
 8007b06:	e6ae      	b.n	8007866 <_dtoa_r+0x696>
 8007b08:	9c07      	ldr	r4, [sp, #28]
 8007b0a:	9704      	str	r7, [sp, #16]
 8007b0c:	4625      	mov	r5, r4
 8007b0e:	e7f3      	b.n	8007af8 <_dtoa_r+0x928>
 8007b10:	9b07      	ldr	r3, [sp, #28]
 8007b12:	9300      	str	r3, [sp, #0]
 8007b14:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8007b16:	2b00      	cmp	r3, #0
 8007b18:	f000 8104 	beq.w	8007d24 <_dtoa_r+0xb54>
 8007b1c:	2e00      	cmp	r6, #0
 8007b1e:	dd05      	ble.n	8007b2c <_dtoa_r+0x95c>
 8007b20:	4629      	mov	r1, r5
 8007b22:	4632      	mov	r2, r6
 8007b24:	4658      	mov	r0, fp
 8007b26:	f000 fc25 	bl	8008374 <__lshift>
 8007b2a:	4605      	mov	r5, r0
 8007b2c:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8007b2e:	2b00      	cmp	r3, #0
 8007b30:	d05a      	beq.n	8007be8 <_dtoa_r+0xa18>
 8007b32:	6869      	ldr	r1, [r5, #4]
 8007b34:	4658      	mov	r0, fp
 8007b36:	f000 fa0f 	bl	8007f58 <_Balloc>
 8007b3a:	4606      	mov	r6, r0
 8007b3c:	b928      	cbnz	r0, 8007b4a <_dtoa_r+0x97a>
 8007b3e:	4b84      	ldr	r3, [pc, #528]	@ (8007d50 <_dtoa_r+0xb80>)
 8007b40:	4602      	mov	r2, r0
 8007b42:	f240 21ef 	movw	r1, #751	@ 0x2ef
 8007b46:	f7ff bb5a 	b.w	80071fe <_dtoa_r+0x2e>
 8007b4a:	692a      	ldr	r2, [r5, #16]
 8007b4c:	3202      	adds	r2, #2
 8007b4e:	0092      	lsls	r2, r2, #2
 8007b50:	f105 010c 	add.w	r1, r5, #12
 8007b54:	300c      	adds	r0, #12
 8007b56:	f000 ffaf 	bl	8008ab8 <memcpy>
 8007b5a:	2201      	movs	r2, #1
 8007b5c:	4631      	mov	r1, r6
 8007b5e:	4658      	mov	r0, fp
 8007b60:	f000 fc08 	bl	8008374 <__lshift>
 8007b64:	f10a 0301 	add.w	r3, sl, #1
 8007b68:	9307      	str	r3, [sp, #28]
 8007b6a:	9b00      	ldr	r3, [sp, #0]
 8007b6c:	4453      	add	r3, sl
 8007b6e:	930b      	str	r3, [sp, #44]	@ 0x2c
 8007b70:	9b02      	ldr	r3, [sp, #8]
 8007b72:	f003 0301 	and.w	r3, r3, #1
 8007b76:	462f      	mov	r7, r5
 8007b78:	930a      	str	r3, [sp, #40]	@ 0x28
 8007b7a:	4605      	mov	r5, r0
 8007b7c:	9b07      	ldr	r3, [sp, #28]
 8007b7e:	4621      	mov	r1, r4
 8007b80:	3b01      	subs	r3, #1
 8007b82:	4648      	mov	r0, r9
 8007b84:	9300      	str	r3, [sp, #0]
 8007b86:	f7ff fa98 	bl	80070ba <quorem>
 8007b8a:	4639      	mov	r1, r7
 8007b8c:	9002      	str	r0, [sp, #8]
 8007b8e:	f100 0830 	add.w	r8, r0, #48	@ 0x30
 8007b92:	4648      	mov	r0, r9
 8007b94:	f000 fc5a 	bl	800844c <__mcmp>
 8007b98:	462a      	mov	r2, r5
 8007b9a:	9008      	str	r0, [sp, #32]
 8007b9c:	4621      	mov	r1, r4
 8007b9e:	4658      	mov	r0, fp
 8007ba0:	f000 fc70 	bl	8008484 <__mdiff>
 8007ba4:	68c2      	ldr	r2, [r0, #12]
 8007ba6:	4606      	mov	r6, r0
 8007ba8:	bb02      	cbnz	r2, 8007bec <_dtoa_r+0xa1c>
 8007baa:	4601      	mov	r1, r0
 8007bac:	4648      	mov	r0, r9
 8007bae:	f000 fc4d 	bl	800844c <__mcmp>
 8007bb2:	4602      	mov	r2, r0
 8007bb4:	4631      	mov	r1, r6
 8007bb6:	4658      	mov	r0, fp
 8007bb8:	920e      	str	r2, [sp, #56]	@ 0x38
 8007bba:	f000 fa0d 	bl	8007fd8 <_Bfree>
 8007bbe:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8007bc0:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8007bc2:	9e07      	ldr	r6, [sp, #28]
 8007bc4:	ea43 0102 	orr.w	r1, r3, r2
 8007bc8:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8007bca:	4319      	orrs	r1, r3
 8007bcc:	d110      	bne.n	8007bf0 <_dtoa_r+0xa20>
 8007bce:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 8007bd2:	d029      	beq.n	8007c28 <_dtoa_r+0xa58>
 8007bd4:	9b08      	ldr	r3, [sp, #32]
 8007bd6:	2b00      	cmp	r3, #0
 8007bd8:	dd02      	ble.n	8007be0 <_dtoa_r+0xa10>
 8007bda:	9b02      	ldr	r3, [sp, #8]
 8007bdc:	f103 0831 	add.w	r8, r3, #49	@ 0x31
 8007be0:	9b00      	ldr	r3, [sp, #0]
 8007be2:	f883 8000 	strb.w	r8, [r3]
 8007be6:	e63f      	b.n	8007868 <_dtoa_r+0x698>
 8007be8:	4628      	mov	r0, r5
 8007bea:	e7bb      	b.n	8007b64 <_dtoa_r+0x994>
 8007bec:	2201      	movs	r2, #1
 8007bee:	e7e1      	b.n	8007bb4 <_dtoa_r+0x9e4>
 8007bf0:	9b08      	ldr	r3, [sp, #32]
 8007bf2:	2b00      	cmp	r3, #0
 8007bf4:	db04      	blt.n	8007c00 <_dtoa_r+0xa30>
 8007bf6:	9909      	ldr	r1, [sp, #36]	@ 0x24
 8007bf8:	430b      	orrs	r3, r1
 8007bfa:	990a      	ldr	r1, [sp, #40]	@ 0x28
 8007bfc:	430b      	orrs	r3, r1
 8007bfe:	d120      	bne.n	8007c42 <_dtoa_r+0xa72>
 8007c00:	2a00      	cmp	r2, #0
 8007c02:	dded      	ble.n	8007be0 <_dtoa_r+0xa10>
 8007c04:	4649      	mov	r1, r9
 8007c06:	2201      	movs	r2, #1
 8007c08:	4658      	mov	r0, fp
 8007c0a:	f000 fbb3 	bl	8008374 <__lshift>
 8007c0e:	4621      	mov	r1, r4
 8007c10:	4681      	mov	r9, r0
 8007c12:	f000 fc1b 	bl	800844c <__mcmp>
 8007c16:	2800      	cmp	r0, #0
 8007c18:	dc03      	bgt.n	8007c22 <_dtoa_r+0xa52>
 8007c1a:	d1e1      	bne.n	8007be0 <_dtoa_r+0xa10>
 8007c1c:	f018 0f01 	tst.w	r8, #1
 8007c20:	d0de      	beq.n	8007be0 <_dtoa_r+0xa10>
 8007c22:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 8007c26:	d1d8      	bne.n	8007bda <_dtoa_r+0xa0a>
 8007c28:	9a00      	ldr	r2, [sp, #0]
 8007c2a:	2339      	movs	r3, #57	@ 0x39
 8007c2c:	7013      	strb	r3, [r2, #0]
 8007c2e:	4633      	mov	r3, r6
 8007c30:	461e      	mov	r6, r3
 8007c32:	3b01      	subs	r3, #1
 8007c34:	f816 2c01 	ldrb.w	r2, [r6, #-1]
 8007c38:	2a39      	cmp	r2, #57	@ 0x39
 8007c3a:	d052      	beq.n	8007ce2 <_dtoa_r+0xb12>
 8007c3c:	3201      	adds	r2, #1
 8007c3e:	701a      	strb	r2, [r3, #0]
 8007c40:	e612      	b.n	8007868 <_dtoa_r+0x698>
 8007c42:	2a00      	cmp	r2, #0
 8007c44:	dd07      	ble.n	8007c56 <_dtoa_r+0xa86>
 8007c46:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 8007c4a:	d0ed      	beq.n	8007c28 <_dtoa_r+0xa58>
 8007c4c:	9a00      	ldr	r2, [sp, #0]
 8007c4e:	f108 0301 	add.w	r3, r8, #1
 8007c52:	7013      	strb	r3, [r2, #0]
 8007c54:	e608      	b.n	8007868 <_dtoa_r+0x698>
 8007c56:	9b07      	ldr	r3, [sp, #28]
 8007c58:	9a07      	ldr	r2, [sp, #28]
 8007c5a:	f803 8c01 	strb.w	r8, [r3, #-1]
 8007c5e:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8007c60:	4293      	cmp	r3, r2
 8007c62:	d028      	beq.n	8007cb6 <_dtoa_r+0xae6>
 8007c64:	4649      	mov	r1, r9
 8007c66:	2300      	movs	r3, #0
 8007c68:	220a      	movs	r2, #10
 8007c6a:	4658      	mov	r0, fp
 8007c6c:	f000 f9d6 	bl	800801c <__multadd>
 8007c70:	42af      	cmp	r7, r5
 8007c72:	4681      	mov	r9, r0
 8007c74:	f04f 0300 	mov.w	r3, #0
 8007c78:	f04f 020a 	mov.w	r2, #10
 8007c7c:	4639      	mov	r1, r7
 8007c7e:	4658      	mov	r0, fp
 8007c80:	d107      	bne.n	8007c92 <_dtoa_r+0xac2>
 8007c82:	f000 f9cb 	bl	800801c <__multadd>
 8007c86:	4607      	mov	r7, r0
 8007c88:	4605      	mov	r5, r0
 8007c8a:	9b07      	ldr	r3, [sp, #28]
 8007c8c:	3301      	adds	r3, #1
 8007c8e:	9307      	str	r3, [sp, #28]
 8007c90:	e774      	b.n	8007b7c <_dtoa_r+0x9ac>
 8007c92:	f000 f9c3 	bl	800801c <__multadd>
 8007c96:	4629      	mov	r1, r5
 8007c98:	4607      	mov	r7, r0
 8007c9a:	2300      	movs	r3, #0
 8007c9c:	220a      	movs	r2, #10
 8007c9e:	4658      	mov	r0, fp
 8007ca0:	f000 f9bc 	bl	800801c <__multadd>
 8007ca4:	4605      	mov	r5, r0
 8007ca6:	e7f0      	b.n	8007c8a <_dtoa_r+0xaba>
 8007ca8:	9b00      	ldr	r3, [sp, #0]
 8007caa:	2b00      	cmp	r3, #0
 8007cac:	bfcc      	ite	gt
 8007cae:	461e      	movgt	r6, r3
 8007cb0:	2601      	movle	r6, #1
 8007cb2:	4456      	add	r6, sl
 8007cb4:	2700      	movs	r7, #0
 8007cb6:	4649      	mov	r1, r9
 8007cb8:	2201      	movs	r2, #1
 8007cba:	4658      	mov	r0, fp
 8007cbc:	f000 fb5a 	bl	8008374 <__lshift>
 8007cc0:	4621      	mov	r1, r4
 8007cc2:	4681      	mov	r9, r0
 8007cc4:	f000 fbc2 	bl	800844c <__mcmp>
 8007cc8:	2800      	cmp	r0, #0
 8007cca:	dcb0      	bgt.n	8007c2e <_dtoa_r+0xa5e>
 8007ccc:	d102      	bne.n	8007cd4 <_dtoa_r+0xb04>
 8007cce:	f018 0f01 	tst.w	r8, #1
 8007cd2:	d1ac      	bne.n	8007c2e <_dtoa_r+0xa5e>
 8007cd4:	4633      	mov	r3, r6
 8007cd6:	461e      	mov	r6, r3
 8007cd8:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8007cdc:	2a30      	cmp	r2, #48	@ 0x30
 8007cde:	d0fa      	beq.n	8007cd6 <_dtoa_r+0xb06>
 8007ce0:	e5c2      	b.n	8007868 <_dtoa_r+0x698>
 8007ce2:	459a      	cmp	sl, r3
 8007ce4:	d1a4      	bne.n	8007c30 <_dtoa_r+0xa60>
 8007ce6:	9b04      	ldr	r3, [sp, #16]
 8007ce8:	3301      	adds	r3, #1
 8007cea:	9304      	str	r3, [sp, #16]
 8007cec:	2331      	movs	r3, #49	@ 0x31
 8007cee:	f88a 3000 	strb.w	r3, [sl]
 8007cf2:	e5b9      	b.n	8007868 <_dtoa_r+0x698>
 8007cf4:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 8007cf6:	f8df a05c 	ldr.w	sl, [pc, #92]	@ 8007d54 <_dtoa_r+0xb84>
 8007cfa:	b11b      	cbz	r3, 8007d04 <_dtoa_r+0xb34>
 8007cfc:	f10a 0308 	add.w	r3, sl, #8
 8007d00:	9a23      	ldr	r2, [sp, #140]	@ 0x8c
 8007d02:	6013      	str	r3, [r2, #0]
 8007d04:	4650      	mov	r0, sl
 8007d06:	b019      	add	sp, #100	@ 0x64
 8007d08:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007d0c:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8007d0e:	2b01      	cmp	r3, #1
 8007d10:	f77f ae37 	ble.w	8007982 <_dtoa_r+0x7b2>
 8007d14:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8007d16:	930a      	str	r3, [sp, #40]	@ 0x28
 8007d18:	2001      	movs	r0, #1
 8007d1a:	e655      	b.n	80079c8 <_dtoa_r+0x7f8>
 8007d1c:	9b00      	ldr	r3, [sp, #0]
 8007d1e:	2b00      	cmp	r3, #0
 8007d20:	f77f aed6 	ble.w	8007ad0 <_dtoa_r+0x900>
 8007d24:	4656      	mov	r6, sl
 8007d26:	4621      	mov	r1, r4
 8007d28:	4648      	mov	r0, r9
 8007d2a:	f7ff f9c6 	bl	80070ba <quorem>
 8007d2e:	f100 0830 	add.w	r8, r0, #48	@ 0x30
 8007d32:	f806 8b01 	strb.w	r8, [r6], #1
 8007d36:	9b00      	ldr	r3, [sp, #0]
 8007d38:	eba6 020a 	sub.w	r2, r6, sl
 8007d3c:	4293      	cmp	r3, r2
 8007d3e:	ddb3      	ble.n	8007ca8 <_dtoa_r+0xad8>
 8007d40:	4649      	mov	r1, r9
 8007d42:	2300      	movs	r3, #0
 8007d44:	220a      	movs	r2, #10
 8007d46:	4658      	mov	r0, fp
 8007d48:	f000 f968 	bl	800801c <__multadd>
 8007d4c:	4681      	mov	r9, r0
 8007d4e:	e7ea      	b.n	8007d26 <_dtoa_r+0xb56>
 8007d50:	0800a400 	.word	0x0800a400
 8007d54:	0800a384 	.word	0x0800a384

08007d58 <_free_r>:
 8007d58:	b538      	push	{r3, r4, r5, lr}
 8007d5a:	4605      	mov	r5, r0
 8007d5c:	2900      	cmp	r1, #0
 8007d5e:	d041      	beq.n	8007de4 <_free_r+0x8c>
 8007d60:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8007d64:	1f0c      	subs	r4, r1, #4
 8007d66:	2b00      	cmp	r3, #0
 8007d68:	bfb8      	it	lt
 8007d6a:	18e4      	addlt	r4, r4, r3
 8007d6c:	f000 f8e8 	bl	8007f40 <__malloc_lock>
 8007d70:	4a1d      	ldr	r2, [pc, #116]	@ (8007de8 <_free_r+0x90>)
 8007d72:	6813      	ldr	r3, [r2, #0]
 8007d74:	b933      	cbnz	r3, 8007d84 <_free_r+0x2c>
 8007d76:	6063      	str	r3, [r4, #4]
 8007d78:	6014      	str	r4, [r2, #0]
 8007d7a:	4628      	mov	r0, r5
 8007d7c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8007d80:	f000 b8e4 	b.w	8007f4c <__malloc_unlock>
 8007d84:	42a3      	cmp	r3, r4
 8007d86:	d908      	bls.n	8007d9a <_free_r+0x42>
 8007d88:	6820      	ldr	r0, [r4, #0]
 8007d8a:	1821      	adds	r1, r4, r0
 8007d8c:	428b      	cmp	r3, r1
 8007d8e:	bf01      	itttt	eq
 8007d90:	6819      	ldreq	r1, [r3, #0]
 8007d92:	685b      	ldreq	r3, [r3, #4]
 8007d94:	1809      	addeq	r1, r1, r0
 8007d96:	6021      	streq	r1, [r4, #0]
 8007d98:	e7ed      	b.n	8007d76 <_free_r+0x1e>
 8007d9a:	461a      	mov	r2, r3
 8007d9c:	685b      	ldr	r3, [r3, #4]
 8007d9e:	b10b      	cbz	r3, 8007da4 <_free_r+0x4c>
 8007da0:	42a3      	cmp	r3, r4
 8007da2:	d9fa      	bls.n	8007d9a <_free_r+0x42>
 8007da4:	6811      	ldr	r1, [r2, #0]
 8007da6:	1850      	adds	r0, r2, r1
 8007da8:	42a0      	cmp	r0, r4
 8007daa:	d10b      	bne.n	8007dc4 <_free_r+0x6c>
 8007dac:	6820      	ldr	r0, [r4, #0]
 8007dae:	4401      	add	r1, r0
 8007db0:	1850      	adds	r0, r2, r1
 8007db2:	4283      	cmp	r3, r0
 8007db4:	6011      	str	r1, [r2, #0]
 8007db6:	d1e0      	bne.n	8007d7a <_free_r+0x22>
 8007db8:	6818      	ldr	r0, [r3, #0]
 8007dba:	685b      	ldr	r3, [r3, #4]
 8007dbc:	6053      	str	r3, [r2, #4]
 8007dbe:	4408      	add	r0, r1
 8007dc0:	6010      	str	r0, [r2, #0]
 8007dc2:	e7da      	b.n	8007d7a <_free_r+0x22>
 8007dc4:	d902      	bls.n	8007dcc <_free_r+0x74>
 8007dc6:	230c      	movs	r3, #12
 8007dc8:	602b      	str	r3, [r5, #0]
 8007dca:	e7d6      	b.n	8007d7a <_free_r+0x22>
 8007dcc:	6820      	ldr	r0, [r4, #0]
 8007dce:	1821      	adds	r1, r4, r0
 8007dd0:	428b      	cmp	r3, r1
 8007dd2:	bf04      	itt	eq
 8007dd4:	6819      	ldreq	r1, [r3, #0]
 8007dd6:	685b      	ldreq	r3, [r3, #4]
 8007dd8:	6063      	str	r3, [r4, #4]
 8007dda:	bf04      	itt	eq
 8007ddc:	1809      	addeq	r1, r1, r0
 8007dde:	6021      	streq	r1, [r4, #0]
 8007de0:	6054      	str	r4, [r2, #4]
 8007de2:	e7ca      	b.n	8007d7a <_free_r+0x22>
 8007de4:	bd38      	pop	{r3, r4, r5, pc}
 8007de6:	bf00      	nop
 8007de8:	2000074c 	.word	0x2000074c

08007dec <malloc>:
 8007dec:	4b02      	ldr	r3, [pc, #8]	@ (8007df8 <malloc+0xc>)
 8007dee:	4601      	mov	r1, r0
 8007df0:	6818      	ldr	r0, [r3, #0]
 8007df2:	f000 b825 	b.w	8007e40 <_malloc_r>
 8007df6:	bf00      	nop
 8007df8:	20000018 	.word	0x20000018

08007dfc <sbrk_aligned>:
 8007dfc:	b570      	push	{r4, r5, r6, lr}
 8007dfe:	4e0f      	ldr	r6, [pc, #60]	@ (8007e3c <sbrk_aligned+0x40>)
 8007e00:	460c      	mov	r4, r1
 8007e02:	6831      	ldr	r1, [r6, #0]
 8007e04:	4605      	mov	r5, r0
 8007e06:	b911      	cbnz	r1, 8007e0e <sbrk_aligned+0x12>
 8007e08:	f000 fe46 	bl	8008a98 <_sbrk_r>
 8007e0c:	6030      	str	r0, [r6, #0]
 8007e0e:	4621      	mov	r1, r4
 8007e10:	4628      	mov	r0, r5
 8007e12:	f000 fe41 	bl	8008a98 <_sbrk_r>
 8007e16:	1c43      	adds	r3, r0, #1
 8007e18:	d103      	bne.n	8007e22 <sbrk_aligned+0x26>
 8007e1a:	f04f 34ff 	mov.w	r4, #4294967295
 8007e1e:	4620      	mov	r0, r4
 8007e20:	bd70      	pop	{r4, r5, r6, pc}
 8007e22:	1cc4      	adds	r4, r0, #3
 8007e24:	f024 0403 	bic.w	r4, r4, #3
 8007e28:	42a0      	cmp	r0, r4
 8007e2a:	d0f8      	beq.n	8007e1e <sbrk_aligned+0x22>
 8007e2c:	1a21      	subs	r1, r4, r0
 8007e2e:	4628      	mov	r0, r5
 8007e30:	f000 fe32 	bl	8008a98 <_sbrk_r>
 8007e34:	3001      	adds	r0, #1
 8007e36:	d1f2      	bne.n	8007e1e <sbrk_aligned+0x22>
 8007e38:	e7ef      	b.n	8007e1a <sbrk_aligned+0x1e>
 8007e3a:	bf00      	nop
 8007e3c:	20000748 	.word	0x20000748

08007e40 <_malloc_r>:
 8007e40:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8007e44:	1ccd      	adds	r5, r1, #3
 8007e46:	f025 0503 	bic.w	r5, r5, #3
 8007e4a:	3508      	adds	r5, #8
 8007e4c:	2d0c      	cmp	r5, #12
 8007e4e:	bf38      	it	cc
 8007e50:	250c      	movcc	r5, #12
 8007e52:	2d00      	cmp	r5, #0
 8007e54:	4606      	mov	r6, r0
 8007e56:	db01      	blt.n	8007e5c <_malloc_r+0x1c>
 8007e58:	42a9      	cmp	r1, r5
 8007e5a:	d904      	bls.n	8007e66 <_malloc_r+0x26>
 8007e5c:	230c      	movs	r3, #12
 8007e5e:	6033      	str	r3, [r6, #0]
 8007e60:	2000      	movs	r0, #0
 8007e62:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8007e66:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 8007f3c <_malloc_r+0xfc>
 8007e6a:	f000 f869 	bl	8007f40 <__malloc_lock>
 8007e6e:	f8d8 3000 	ldr.w	r3, [r8]
 8007e72:	461c      	mov	r4, r3
 8007e74:	bb44      	cbnz	r4, 8007ec8 <_malloc_r+0x88>
 8007e76:	4629      	mov	r1, r5
 8007e78:	4630      	mov	r0, r6
 8007e7a:	f7ff ffbf 	bl	8007dfc <sbrk_aligned>
 8007e7e:	1c43      	adds	r3, r0, #1
 8007e80:	4604      	mov	r4, r0
 8007e82:	d158      	bne.n	8007f36 <_malloc_r+0xf6>
 8007e84:	f8d8 4000 	ldr.w	r4, [r8]
 8007e88:	4627      	mov	r7, r4
 8007e8a:	2f00      	cmp	r7, #0
 8007e8c:	d143      	bne.n	8007f16 <_malloc_r+0xd6>
 8007e8e:	2c00      	cmp	r4, #0
 8007e90:	d04b      	beq.n	8007f2a <_malloc_r+0xea>
 8007e92:	6823      	ldr	r3, [r4, #0]
 8007e94:	4639      	mov	r1, r7
 8007e96:	4630      	mov	r0, r6
 8007e98:	eb04 0903 	add.w	r9, r4, r3
 8007e9c:	f000 fdfc 	bl	8008a98 <_sbrk_r>
 8007ea0:	4581      	cmp	r9, r0
 8007ea2:	d142      	bne.n	8007f2a <_malloc_r+0xea>
 8007ea4:	6821      	ldr	r1, [r4, #0]
 8007ea6:	1a6d      	subs	r5, r5, r1
 8007ea8:	4629      	mov	r1, r5
 8007eaa:	4630      	mov	r0, r6
 8007eac:	f7ff ffa6 	bl	8007dfc <sbrk_aligned>
 8007eb0:	3001      	adds	r0, #1
 8007eb2:	d03a      	beq.n	8007f2a <_malloc_r+0xea>
 8007eb4:	6823      	ldr	r3, [r4, #0]
 8007eb6:	442b      	add	r3, r5
 8007eb8:	6023      	str	r3, [r4, #0]
 8007eba:	f8d8 3000 	ldr.w	r3, [r8]
 8007ebe:	685a      	ldr	r2, [r3, #4]
 8007ec0:	bb62      	cbnz	r2, 8007f1c <_malloc_r+0xdc>
 8007ec2:	f8c8 7000 	str.w	r7, [r8]
 8007ec6:	e00f      	b.n	8007ee8 <_malloc_r+0xa8>
 8007ec8:	6822      	ldr	r2, [r4, #0]
 8007eca:	1b52      	subs	r2, r2, r5
 8007ecc:	d420      	bmi.n	8007f10 <_malloc_r+0xd0>
 8007ece:	2a0b      	cmp	r2, #11
 8007ed0:	d917      	bls.n	8007f02 <_malloc_r+0xc2>
 8007ed2:	1961      	adds	r1, r4, r5
 8007ed4:	42a3      	cmp	r3, r4
 8007ed6:	6025      	str	r5, [r4, #0]
 8007ed8:	bf18      	it	ne
 8007eda:	6059      	strne	r1, [r3, #4]
 8007edc:	6863      	ldr	r3, [r4, #4]
 8007ede:	bf08      	it	eq
 8007ee0:	f8c8 1000 	streq.w	r1, [r8]
 8007ee4:	5162      	str	r2, [r4, r5]
 8007ee6:	604b      	str	r3, [r1, #4]
 8007ee8:	4630      	mov	r0, r6
 8007eea:	f000 f82f 	bl	8007f4c <__malloc_unlock>
 8007eee:	f104 000b 	add.w	r0, r4, #11
 8007ef2:	1d23      	adds	r3, r4, #4
 8007ef4:	f020 0007 	bic.w	r0, r0, #7
 8007ef8:	1ac2      	subs	r2, r0, r3
 8007efa:	bf1c      	itt	ne
 8007efc:	1a1b      	subne	r3, r3, r0
 8007efe:	50a3      	strne	r3, [r4, r2]
 8007f00:	e7af      	b.n	8007e62 <_malloc_r+0x22>
 8007f02:	6862      	ldr	r2, [r4, #4]
 8007f04:	42a3      	cmp	r3, r4
 8007f06:	bf0c      	ite	eq
 8007f08:	f8c8 2000 	streq.w	r2, [r8]
 8007f0c:	605a      	strne	r2, [r3, #4]
 8007f0e:	e7eb      	b.n	8007ee8 <_malloc_r+0xa8>
 8007f10:	4623      	mov	r3, r4
 8007f12:	6864      	ldr	r4, [r4, #4]
 8007f14:	e7ae      	b.n	8007e74 <_malloc_r+0x34>
 8007f16:	463c      	mov	r4, r7
 8007f18:	687f      	ldr	r7, [r7, #4]
 8007f1a:	e7b6      	b.n	8007e8a <_malloc_r+0x4a>
 8007f1c:	461a      	mov	r2, r3
 8007f1e:	685b      	ldr	r3, [r3, #4]
 8007f20:	42a3      	cmp	r3, r4
 8007f22:	d1fb      	bne.n	8007f1c <_malloc_r+0xdc>
 8007f24:	2300      	movs	r3, #0
 8007f26:	6053      	str	r3, [r2, #4]
 8007f28:	e7de      	b.n	8007ee8 <_malloc_r+0xa8>
 8007f2a:	230c      	movs	r3, #12
 8007f2c:	6033      	str	r3, [r6, #0]
 8007f2e:	4630      	mov	r0, r6
 8007f30:	f000 f80c 	bl	8007f4c <__malloc_unlock>
 8007f34:	e794      	b.n	8007e60 <_malloc_r+0x20>
 8007f36:	6005      	str	r5, [r0, #0]
 8007f38:	e7d6      	b.n	8007ee8 <_malloc_r+0xa8>
 8007f3a:	bf00      	nop
 8007f3c:	2000074c 	.word	0x2000074c

08007f40 <__malloc_lock>:
 8007f40:	4801      	ldr	r0, [pc, #4]	@ (8007f48 <__malloc_lock+0x8>)
 8007f42:	f7ff b8b8 	b.w	80070b6 <__retarget_lock_acquire_recursive>
 8007f46:	bf00      	nop
 8007f48:	20000744 	.word	0x20000744

08007f4c <__malloc_unlock>:
 8007f4c:	4801      	ldr	r0, [pc, #4]	@ (8007f54 <__malloc_unlock+0x8>)
 8007f4e:	f7ff b8b3 	b.w	80070b8 <__retarget_lock_release_recursive>
 8007f52:	bf00      	nop
 8007f54:	20000744 	.word	0x20000744

08007f58 <_Balloc>:
 8007f58:	b570      	push	{r4, r5, r6, lr}
 8007f5a:	69c6      	ldr	r6, [r0, #28]
 8007f5c:	4604      	mov	r4, r0
 8007f5e:	460d      	mov	r5, r1
 8007f60:	b976      	cbnz	r6, 8007f80 <_Balloc+0x28>
 8007f62:	2010      	movs	r0, #16
 8007f64:	f7ff ff42 	bl	8007dec <malloc>
 8007f68:	4602      	mov	r2, r0
 8007f6a:	61e0      	str	r0, [r4, #28]
 8007f6c:	b920      	cbnz	r0, 8007f78 <_Balloc+0x20>
 8007f6e:	4b18      	ldr	r3, [pc, #96]	@ (8007fd0 <_Balloc+0x78>)
 8007f70:	4818      	ldr	r0, [pc, #96]	@ (8007fd4 <_Balloc+0x7c>)
 8007f72:	216b      	movs	r1, #107	@ 0x6b
 8007f74:	f000 fdae 	bl	8008ad4 <__assert_func>
 8007f78:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8007f7c:	6006      	str	r6, [r0, #0]
 8007f7e:	60c6      	str	r6, [r0, #12]
 8007f80:	69e6      	ldr	r6, [r4, #28]
 8007f82:	68f3      	ldr	r3, [r6, #12]
 8007f84:	b183      	cbz	r3, 8007fa8 <_Balloc+0x50>
 8007f86:	69e3      	ldr	r3, [r4, #28]
 8007f88:	68db      	ldr	r3, [r3, #12]
 8007f8a:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 8007f8e:	b9b8      	cbnz	r0, 8007fc0 <_Balloc+0x68>
 8007f90:	2101      	movs	r1, #1
 8007f92:	fa01 f605 	lsl.w	r6, r1, r5
 8007f96:	1d72      	adds	r2, r6, #5
 8007f98:	0092      	lsls	r2, r2, #2
 8007f9a:	4620      	mov	r0, r4
 8007f9c:	f000 fdb8 	bl	8008b10 <_calloc_r>
 8007fa0:	b160      	cbz	r0, 8007fbc <_Balloc+0x64>
 8007fa2:	e9c0 5601 	strd	r5, r6, [r0, #4]
 8007fa6:	e00e      	b.n	8007fc6 <_Balloc+0x6e>
 8007fa8:	2221      	movs	r2, #33	@ 0x21
 8007faa:	2104      	movs	r1, #4
 8007fac:	4620      	mov	r0, r4
 8007fae:	f000 fdaf 	bl	8008b10 <_calloc_r>
 8007fb2:	69e3      	ldr	r3, [r4, #28]
 8007fb4:	60f0      	str	r0, [r6, #12]
 8007fb6:	68db      	ldr	r3, [r3, #12]
 8007fb8:	2b00      	cmp	r3, #0
 8007fba:	d1e4      	bne.n	8007f86 <_Balloc+0x2e>
 8007fbc:	2000      	movs	r0, #0
 8007fbe:	bd70      	pop	{r4, r5, r6, pc}
 8007fc0:	6802      	ldr	r2, [r0, #0]
 8007fc2:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 8007fc6:	2300      	movs	r3, #0
 8007fc8:	e9c0 3303 	strd	r3, r3, [r0, #12]
 8007fcc:	e7f7      	b.n	8007fbe <_Balloc+0x66>
 8007fce:	bf00      	nop
 8007fd0:	0800a391 	.word	0x0800a391
 8007fd4:	0800a411 	.word	0x0800a411

08007fd8 <_Bfree>:
 8007fd8:	b570      	push	{r4, r5, r6, lr}
 8007fda:	69c6      	ldr	r6, [r0, #28]
 8007fdc:	4605      	mov	r5, r0
 8007fde:	460c      	mov	r4, r1
 8007fe0:	b976      	cbnz	r6, 8008000 <_Bfree+0x28>
 8007fe2:	2010      	movs	r0, #16
 8007fe4:	f7ff ff02 	bl	8007dec <malloc>
 8007fe8:	4602      	mov	r2, r0
 8007fea:	61e8      	str	r0, [r5, #28]
 8007fec:	b920      	cbnz	r0, 8007ff8 <_Bfree+0x20>
 8007fee:	4b09      	ldr	r3, [pc, #36]	@ (8008014 <_Bfree+0x3c>)
 8007ff0:	4809      	ldr	r0, [pc, #36]	@ (8008018 <_Bfree+0x40>)
 8007ff2:	218f      	movs	r1, #143	@ 0x8f
 8007ff4:	f000 fd6e 	bl	8008ad4 <__assert_func>
 8007ff8:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8007ffc:	6006      	str	r6, [r0, #0]
 8007ffe:	60c6      	str	r6, [r0, #12]
 8008000:	b13c      	cbz	r4, 8008012 <_Bfree+0x3a>
 8008002:	69eb      	ldr	r3, [r5, #28]
 8008004:	6862      	ldr	r2, [r4, #4]
 8008006:	68db      	ldr	r3, [r3, #12]
 8008008:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 800800c:	6021      	str	r1, [r4, #0]
 800800e:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 8008012:	bd70      	pop	{r4, r5, r6, pc}
 8008014:	0800a391 	.word	0x0800a391
 8008018:	0800a411 	.word	0x0800a411

0800801c <__multadd>:
 800801c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8008020:	690d      	ldr	r5, [r1, #16]
 8008022:	4607      	mov	r7, r0
 8008024:	460c      	mov	r4, r1
 8008026:	461e      	mov	r6, r3
 8008028:	f101 0c14 	add.w	ip, r1, #20
 800802c:	2000      	movs	r0, #0
 800802e:	f8dc 3000 	ldr.w	r3, [ip]
 8008032:	b299      	uxth	r1, r3
 8008034:	fb02 6101 	mla	r1, r2, r1, r6
 8008038:	0c1e      	lsrs	r6, r3, #16
 800803a:	0c0b      	lsrs	r3, r1, #16
 800803c:	fb02 3306 	mla	r3, r2, r6, r3
 8008040:	b289      	uxth	r1, r1
 8008042:	3001      	adds	r0, #1
 8008044:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 8008048:	4285      	cmp	r5, r0
 800804a:	f84c 1b04 	str.w	r1, [ip], #4
 800804e:	ea4f 4613 	mov.w	r6, r3, lsr #16
 8008052:	dcec      	bgt.n	800802e <__multadd+0x12>
 8008054:	b30e      	cbz	r6, 800809a <__multadd+0x7e>
 8008056:	68a3      	ldr	r3, [r4, #8]
 8008058:	42ab      	cmp	r3, r5
 800805a:	dc19      	bgt.n	8008090 <__multadd+0x74>
 800805c:	6861      	ldr	r1, [r4, #4]
 800805e:	4638      	mov	r0, r7
 8008060:	3101      	adds	r1, #1
 8008062:	f7ff ff79 	bl	8007f58 <_Balloc>
 8008066:	4680      	mov	r8, r0
 8008068:	b928      	cbnz	r0, 8008076 <__multadd+0x5a>
 800806a:	4602      	mov	r2, r0
 800806c:	4b0c      	ldr	r3, [pc, #48]	@ (80080a0 <__multadd+0x84>)
 800806e:	480d      	ldr	r0, [pc, #52]	@ (80080a4 <__multadd+0x88>)
 8008070:	21ba      	movs	r1, #186	@ 0xba
 8008072:	f000 fd2f 	bl	8008ad4 <__assert_func>
 8008076:	6922      	ldr	r2, [r4, #16]
 8008078:	3202      	adds	r2, #2
 800807a:	f104 010c 	add.w	r1, r4, #12
 800807e:	0092      	lsls	r2, r2, #2
 8008080:	300c      	adds	r0, #12
 8008082:	f000 fd19 	bl	8008ab8 <memcpy>
 8008086:	4621      	mov	r1, r4
 8008088:	4638      	mov	r0, r7
 800808a:	f7ff ffa5 	bl	8007fd8 <_Bfree>
 800808e:	4644      	mov	r4, r8
 8008090:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 8008094:	3501      	adds	r5, #1
 8008096:	615e      	str	r6, [r3, #20]
 8008098:	6125      	str	r5, [r4, #16]
 800809a:	4620      	mov	r0, r4
 800809c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80080a0:	0800a400 	.word	0x0800a400
 80080a4:	0800a411 	.word	0x0800a411

080080a8 <__hi0bits>:
 80080a8:	f5b0 3f80 	cmp.w	r0, #65536	@ 0x10000
 80080ac:	4603      	mov	r3, r0
 80080ae:	bf36      	itet	cc
 80080b0:	0403      	lslcc	r3, r0, #16
 80080b2:	2000      	movcs	r0, #0
 80080b4:	2010      	movcc	r0, #16
 80080b6:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 80080ba:	bf3c      	itt	cc
 80080bc:	021b      	lslcc	r3, r3, #8
 80080be:	3008      	addcc	r0, #8
 80080c0:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 80080c4:	bf3c      	itt	cc
 80080c6:	011b      	lslcc	r3, r3, #4
 80080c8:	3004      	addcc	r0, #4
 80080ca:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80080ce:	bf3c      	itt	cc
 80080d0:	009b      	lslcc	r3, r3, #2
 80080d2:	3002      	addcc	r0, #2
 80080d4:	2b00      	cmp	r3, #0
 80080d6:	db05      	blt.n	80080e4 <__hi0bits+0x3c>
 80080d8:	f013 4f80 	tst.w	r3, #1073741824	@ 0x40000000
 80080dc:	f100 0001 	add.w	r0, r0, #1
 80080e0:	bf08      	it	eq
 80080e2:	2020      	moveq	r0, #32
 80080e4:	4770      	bx	lr

080080e6 <__lo0bits>:
 80080e6:	6803      	ldr	r3, [r0, #0]
 80080e8:	4602      	mov	r2, r0
 80080ea:	f013 0007 	ands.w	r0, r3, #7
 80080ee:	d00b      	beq.n	8008108 <__lo0bits+0x22>
 80080f0:	07d9      	lsls	r1, r3, #31
 80080f2:	d421      	bmi.n	8008138 <__lo0bits+0x52>
 80080f4:	0798      	lsls	r0, r3, #30
 80080f6:	bf49      	itett	mi
 80080f8:	085b      	lsrmi	r3, r3, #1
 80080fa:	089b      	lsrpl	r3, r3, #2
 80080fc:	2001      	movmi	r0, #1
 80080fe:	6013      	strmi	r3, [r2, #0]
 8008100:	bf5c      	itt	pl
 8008102:	6013      	strpl	r3, [r2, #0]
 8008104:	2002      	movpl	r0, #2
 8008106:	4770      	bx	lr
 8008108:	b299      	uxth	r1, r3
 800810a:	b909      	cbnz	r1, 8008110 <__lo0bits+0x2a>
 800810c:	0c1b      	lsrs	r3, r3, #16
 800810e:	2010      	movs	r0, #16
 8008110:	b2d9      	uxtb	r1, r3
 8008112:	b909      	cbnz	r1, 8008118 <__lo0bits+0x32>
 8008114:	3008      	adds	r0, #8
 8008116:	0a1b      	lsrs	r3, r3, #8
 8008118:	0719      	lsls	r1, r3, #28
 800811a:	bf04      	itt	eq
 800811c:	091b      	lsreq	r3, r3, #4
 800811e:	3004      	addeq	r0, #4
 8008120:	0799      	lsls	r1, r3, #30
 8008122:	bf04      	itt	eq
 8008124:	089b      	lsreq	r3, r3, #2
 8008126:	3002      	addeq	r0, #2
 8008128:	07d9      	lsls	r1, r3, #31
 800812a:	d403      	bmi.n	8008134 <__lo0bits+0x4e>
 800812c:	085b      	lsrs	r3, r3, #1
 800812e:	f100 0001 	add.w	r0, r0, #1
 8008132:	d003      	beq.n	800813c <__lo0bits+0x56>
 8008134:	6013      	str	r3, [r2, #0]
 8008136:	4770      	bx	lr
 8008138:	2000      	movs	r0, #0
 800813a:	4770      	bx	lr
 800813c:	2020      	movs	r0, #32
 800813e:	4770      	bx	lr

08008140 <__i2b>:
 8008140:	b510      	push	{r4, lr}
 8008142:	460c      	mov	r4, r1
 8008144:	2101      	movs	r1, #1
 8008146:	f7ff ff07 	bl	8007f58 <_Balloc>
 800814a:	4602      	mov	r2, r0
 800814c:	b928      	cbnz	r0, 800815a <__i2b+0x1a>
 800814e:	4b05      	ldr	r3, [pc, #20]	@ (8008164 <__i2b+0x24>)
 8008150:	4805      	ldr	r0, [pc, #20]	@ (8008168 <__i2b+0x28>)
 8008152:	f240 1145 	movw	r1, #325	@ 0x145
 8008156:	f000 fcbd 	bl	8008ad4 <__assert_func>
 800815a:	2301      	movs	r3, #1
 800815c:	6144      	str	r4, [r0, #20]
 800815e:	6103      	str	r3, [r0, #16]
 8008160:	bd10      	pop	{r4, pc}
 8008162:	bf00      	nop
 8008164:	0800a400 	.word	0x0800a400
 8008168:	0800a411 	.word	0x0800a411

0800816c <__multiply>:
 800816c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008170:	4614      	mov	r4, r2
 8008172:	690a      	ldr	r2, [r1, #16]
 8008174:	6923      	ldr	r3, [r4, #16]
 8008176:	429a      	cmp	r2, r3
 8008178:	bfa8      	it	ge
 800817a:	4623      	movge	r3, r4
 800817c:	460f      	mov	r7, r1
 800817e:	bfa4      	itt	ge
 8008180:	460c      	movge	r4, r1
 8008182:	461f      	movge	r7, r3
 8008184:	f8d4 a010 	ldr.w	sl, [r4, #16]
 8008188:	f8d7 9010 	ldr.w	r9, [r7, #16]
 800818c:	68a3      	ldr	r3, [r4, #8]
 800818e:	6861      	ldr	r1, [r4, #4]
 8008190:	eb0a 0609 	add.w	r6, sl, r9
 8008194:	42b3      	cmp	r3, r6
 8008196:	b085      	sub	sp, #20
 8008198:	bfb8      	it	lt
 800819a:	3101      	addlt	r1, #1
 800819c:	f7ff fedc 	bl	8007f58 <_Balloc>
 80081a0:	b930      	cbnz	r0, 80081b0 <__multiply+0x44>
 80081a2:	4602      	mov	r2, r0
 80081a4:	4b44      	ldr	r3, [pc, #272]	@ (80082b8 <__multiply+0x14c>)
 80081a6:	4845      	ldr	r0, [pc, #276]	@ (80082bc <__multiply+0x150>)
 80081a8:	f44f 71b1 	mov.w	r1, #354	@ 0x162
 80081ac:	f000 fc92 	bl	8008ad4 <__assert_func>
 80081b0:	f100 0514 	add.w	r5, r0, #20
 80081b4:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 80081b8:	462b      	mov	r3, r5
 80081ba:	2200      	movs	r2, #0
 80081bc:	4543      	cmp	r3, r8
 80081be:	d321      	bcc.n	8008204 <__multiply+0x98>
 80081c0:	f107 0114 	add.w	r1, r7, #20
 80081c4:	f104 0214 	add.w	r2, r4, #20
 80081c8:	eb02 028a 	add.w	r2, r2, sl, lsl #2
 80081cc:	eb01 0389 	add.w	r3, r1, r9, lsl #2
 80081d0:	9302      	str	r3, [sp, #8]
 80081d2:	1b13      	subs	r3, r2, r4
 80081d4:	3b15      	subs	r3, #21
 80081d6:	f023 0303 	bic.w	r3, r3, #3
 80081da:	3304      	adds	r3, #4
 80081dc:	f104 0715 	add.w	r7, r4, #21
 80081e0:	42ba      	cmp	r2, r7
 80081e2:	bf38      	it	cc
 80081e4:	2304      	movcc	r3, #4
 80081e6:	9301      	str	r3, [sp, #4]
 80081e8:	9b02      	ldr	r3, [sp, #8]
 80081ea:	9103      	str	r1, [sp, #12]
 80081ec:	428b      	cmp	r3, r1
 80081ee:	d80c      	bhi.n	800820a <__multiply+0x9e>
 80081f0:	2e00      	cmp	r6, #0
 80081f2:	dd03      	ble.n	80081fc <__multiply+0x90>
 80081f4:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 80081f8:	2b00      	cmp	r3, #0
 80081fa:	d05b      	beq.n	80082b4 <__multiply+0x148>
 80081fc:	6106      	str	r6, [r0, #16]
 80081fe:	b005      	add	sp, #20
 8008200:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008204:	f843 2b04 	str.w	r2, [r3], #4
 8008208:	e7d8      	b.n	80081bc <__multiply+0x50>
 800820a:	f8b1 a000 	ldrh.w	sl, [r1]
 800820e:	f1ba 0f00 	cmp.w	sl, #0
 8008212:	d024      	beq.n	800825e <__multiply+0xf2>
 8008214:	f104 0e14 	add.w	lr, r4, #20
 8008218:	46a9      	mov	r9, r5
 800821a:	f04f 0c00 	mov.w	ip, #0
 800821e:	f85e 7b04 	ldr.w	r7, [lr], #4
 8008222:	f8d9 3000 	ldr.w	r3, [r9]
 8008226:	fa1f fb87 	uxth.w	fp, r7
 800822a:	b29b      	uxth	r3, r3
 800822c:	fb0a 330b 	mla	r3, sl, fp, r3
 8008230:	ea4f 4b17 	mov.w	fp, r7, lsr #16
 8008234:	f8d9 7000 	ldr.w	r7, [r9]
 8008238:	4463      	add	r3, ip
 800823a:	ea4f 4c17 	mov.w	ip, r7, lsr #16
 800823e:	fb0a c70b 	mla	r7, sl, fp, ip
 8008242:	eb07 4713 	add.w	r7, r7, r3, lsr #16
 8008246:	b29b      	uxth	r3, r3
 8008248:	ea43 4307 	orr.w	r3, r3, r7, lsl #16
 800824c:	4572      	cmp	r2, lr
 800824e:	f849 3b04 	str.w	r3, [r9], #4
 8008252:	ea4f 4c17 	mov.w	ip, r7, lsr #16
 8008256:	d8e2      	bhi.n	800821e <__multiply+0xb2>
 8008258:	9b01      	ldr	r3, [sp, #4]
 800825a:	f845 c003 	str.w	ip, [r5, r3]
 800825e:	9b03      	ldr	r3, [sp, #12]
 8008260:	f8b3 9002 	ldrh.w	r9, [r3, #2]
 8008264:	3104      	adds	r1, #4
 8008266:	f1b9 0f00 	cmp.w	r9, #0
 800826a:	d021      	beq.n	80082b0 <__multiply+0x144>
 800826c:	682b      	ldr	r3, [r5, #0]
 800826e:	f104 0c14 	add.w	ip, r4, #20
 8008272:	46ae      	mov	lr, r5
 8008274:	f04f 0a00 	mov.w	sl, #0
 8008278:	f8bc b000 	ldrh.w	fp, [ip]
 800827c:	f8be 7002 	ldrh.w	r7, [lr, #2]
 8008280:	fb09 770b 	mla	r7, r9, fp, r7
 8008284:	4457      	add	r7, sl
 8008286:	b29b      	uxth	r3, r3
 8008288:	ea43 4307 	orr.w	r3, r3, r7, lsl #16
 800828c:	f84e 3b04 	str.w	r3, [lr], #4
 8008290:	f85c 3b04 	ldr.w	r3, [ip], #4
 8008294:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 8008298:	f8be 3000 	ldrh.w	r3, [lr]
 800829c:	fb09 330a 	mla	r3, r9, sl, r3
 80082a0:	eb03 4317 	add.w	r3, r3, r7, lsr #16
 80082a4:	4562      	cmp	r2, ip
 80082a6:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 80082aa:	d8e5      	bhi.n	8008278 <__multiply+0x10c>
 80082ac:	9f01      	ldr	r7, [sp, #4]
 80082ae:	51eb      	str	r3, [r5, r7]
 80082b0:	3504      	adds	r5, #4
 80082b2:	e799      	b.n	80081e8 <__multiply+0x7c>
 80082b4:	3e01      	subs	r6, #1
 80082b6:	e79b      	b.n	80081f0 <__multiply+0x84>
 80082b8:	0800a400 	.word	0x0800a400
 80082bc:	0800a411 	.word	0x0800a411

080082c0 <__pow5mult>:
 80082c0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80082c4:	4615      	mov	r5, r2
 80082c6:	f012 0203 	ands.w	r2, r2, #3
 80082ca:	4607      	mov	r7, r0
 80082cc:	460e      	mov	r6, r1
 80082ce:	d007      	beq.n	80082e0 <__pow5mult+0x20>
 80082d0:	4c25      	ldr	r4, [pc, #148]	@ (8008368 <__pow5mult+0xa8>)
 80082d2:	3a01      	subs	r2, #1
 80082d4:	2300      	movs	r3, #0
 80082d6:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 80082da:	f7ff fe9f 	bl	800801c <__multadd>
 80082de:	4606      	mov	r6, r0
 80082e0:	10ad      	asrs	r5, r5, #2
 80082e2:	d03d      	beq.n	8008360 <__pow5mult+0xa0>
 80082e4:	69fc      	ldr	r4, [r7, #28]
 80082e6:	b97c      	cbnz	r4, 8008308 <__pow5mult+0x48>
 80082e8:	2010      	movs	r0, #16
 80082ea:	f7ff fd7f 	bl	8007dec <malloc>
 80082ee:	4602      	mov	r2, r0
 80082f0:	61f8      	str	r0, [r7, #28]
 80082f2:	b928      	cbnz	r0, 8008300 <__pow5mult+0x40>
 80082f4:	4b1d      	ldr	r3, [pc, #116]	@ (800836c <__pow5mult+0xac>)
 80082f6:	481e      	ldr	r0, [pc, #120]	@ (8008370 <__pow5mult+0xb0>)
 80082f8:	f240 11b3 	movw	r1, #435	@ 0x1b3
 80082fc:	f000 fbea 	bl	8008ad4 <__assert_func>
 8008300:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8008304:	6004      	str	r4, [r0, #0]
 8008306:	60c4      	str	r4, [r0, #12]
 8008308:	f8d7 801c 	ldr.w	r8, [r7, #28]
 800830c:	f8d8 4008 	ldr.w	r4, [r8, #8]
 8008310:	b94c      	cbnz	r4, 8008326 <__pow5mult+0x66>
 8008312:	f240 2171 	movw	r1, #625	@ 0x271
 8008316:	4638      	mov	r0, r7
 8008318:	f7ff ff12 	bl	8008140 <__i2b>
 800831c:	2300      	movs	r3, #0
 800831e:	f8c8 0008 	str.w	r0, [r8, #8]
 8008322:	4604      	mov	r4, r0
 8008324:	6003      	str	r3, [r0, #0]
 8008326:	f04f 0900 	mov.w	r9, #0
 800832a:	07eb      	lsls	r3, r5, #31
 800832c:	d50a      	bpl.n	8008344 <__pow5mult+0x84>
 800832e:	4631      	mov	r1, r6
 8008330:	4622      	mov	r2, r4
 8008332:	4638      	mov	r0, r7
 8008334:	f7ff ff1a 	bl	800816c <__multiply>
 8008338:	4631      	mov	r1, r6
 800833a:	4680      	mov	r8, r0
 800833c:	4638      	mov	r0, r7
 800833e:	f7ff fe4b 	bl	8007fd8 <_Bfree>
 8008342:	4646      	mov	r6, r8
 8008344:	106d      	asrs	r5, r5, #1
 8008346:	d00b      	beq.n	8008360 <__pow5mult+0xa0>
 8008348:	6820      	ldr	r0, [r4, #0]
 800834a:	b938      	cbnz	r0, 800835c <__pow5mult+0x9c>
 800834c:	4622      	mov	r2, r4
 800834e:	4621      	mov	r1, r4
 8008350:	4638      	mov	r0, r7
 8008352:	f7ff ff0b 	bl	800816c <__multiply>
 8008356:	6020      	str	r0, [r4, #0]
 8008358:	f8c0 9000 	str.w	r9, [r0]
 800835c:	4604      	mov	r4, r0
 800835e:	e7e4      	b.n	800832a <__pow5mult+0x6a>
 8008360:	4630      	mov	r0, r6
 8008362:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8008366:	bf00      	nop
 8008368:	0800a46c 	.word	0x0800a46c
 800836c:	0800a391 	.word	0x0800a391
 8008370:	0800a411 	.word	0x0800a411

08008374 <__lshift>:
 8008374:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8008378:	460c      	mov	r4, r1
 800837a:	6849      	ldr	r1, [r1, #4]
 800837c:	6923      	ldr	r3, [r4, #16]
 800837e:	eb03 1862 	add.w	r8, r3, r2, asr #5
 8008382:	68a3      	ldr	r3, [r4, #8]
 8008384:	4607      	mov	r7, r0
 8008386:	4691      	mov	r9, r2
 8008388:	ea4f 1a62 	mov.w	sl, r2, asr #5
 800838c:	f108 0601 	add.w	r6, r8, #1
 8008390:	42b3      	cmp	r3, r6
 8008392:	db0b      	blt.n	80083ac <__lshift+0x38>
 8008394:	4638      	mov	r0, r7
 8008396:	f7ff fddf 	bl	8007f58 <_Balloc>
 800839a:	4605      	mov	r5, r0
 800839c:	b948      	cbnz	r0, 80083b2 <__lshift+0x3e>
 800839e:	4602      	mov	r2, r0
 80083a0:	4b28      	ldr	r3, [pc, #160]	@ (8008444 <__lshift+0xd0>)
 80083a2:	4829      	ldr	r0, [pc, #164]	@ (8008448 <__lshift+0xd4>)
 80083a4:	f44f 71ef 	mov.w	r1, #478	@ 0x1de
 80083a8:	f000 fb94 	bl	8008ad4 <__assert_func>
 80083ac:	3101      	adds	r1, #1
 80083ae:	005b      	lsls	r3, r3, #1
 80083b0:	e7ee      	b.n	8008390 <__lshift+0x1c>
 80083b2:	2300      	movs	r3, #0
 80083b4:	f100 0114 	add.w	r1, r0, #20
 80083b8:	f100 0210 	add.w	r2, r0, #16
 80083bc:	4618      	mov	r0, r3
 80083be:	4553      	cmp	r3, sl
 80083c0:	db33      	blt.n	800842a <__lshift+0xb6>
 80083c2:	6920      	ldr	r0, [r4, #16]
 80083c4:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 80083c8:	f104 0314 	add.w	r3, r4, #20
 80083cc:	f019 091f 	ands.w	r9, r9, #31
 80083d0:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 80083d4:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 80083d8:	d02b      	beq.n	8008432 <__lshift+0xbe>
 80083da:	f1c9 0e20 	rsb	lr, r9, #32
 80083de:	468a      	mov	sl, r1
 80083e0:	2200      	movs	r2, #0
 80083e2:	6818      	ldr	r0, [r3, #0]
 80083e4:	fa00 f009 	lsl.w	r0, r0, r9
 80083e8:	4310      	orrs	r0, r2
 80083ea:	f84a 0b04 	str.w	r0, [sl], #4
 80083ee:	f853 2b04 	ldr.w	r2, [r3], #4
 80083f2:	459c      	cmp	ip, r3
 80083f4:	fa22 f20e 	lsr.w	r2, r2, lr
 80083f8:	d8f3      	bhi.n	80083e2 <__lshift+0x6e>
 80083fa:	ebac 0304 	sub.w	r3, ip, r4
 80083fe:	3b15      	subs	r3, #21
 8008400:	f023 0303 	bic.w	r3, r3, #3
 8008404:	3304      	adds	r3, #4
 8008406:	f104 0015 	add.w	r0, r4, #21
 800840a:	4584      	cmp	ip, r0
 800840c:	bf38      	it	cc
 800840e:	2304      	movcc	r3, #4
 8008410:	50ca      	str	r2, [r1, r3]
 8008412:	b10a      	cbz	r2, 8008418 <__lshift+0xa4>
 8008414:	f108 0602 	add.w	r6, r8, #2
 8008418:	3e01      	subs	r6, #1
 800841a:	4638      	mov	r0, r7
 800841c:	612e      	str	r6, [r5, #16]
 800841e:	4621      	mov	r1, r4
 8008420:	f7ff fdda 	bl	8007fd8 <_Bfree>
 8008424:	4628      	mov	r0, r5
 8008426:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800842a:	f842 0f04 	str.w	r0, [r2, #4]!
 800842e:	3301      	adds	r3, #1
 8008430:	e7c5      	b.n	80083be <__lshift+0x4a>
 8008432:	3904      	subs	r1, #4
 8008434:	f853 2b04 	ldr.w	r2, [r3], #4
 8008438:	f841 2f04 	str.w	r2, [r1, #4]!
 800843c:	459c      	cmp	ip, r3
 800843e:	d8f9      	bhi.n	8008434 <__lshift+0xc0>
 8008440:	e7ea      	b.n	8008418 <__lshift+0xa4>
 8008442:	bf00      	nop
 8008444:	0800a400 	.word	0x0800a400
 8008448:	0800a411 	.word	0x0800a411

0800844c <__mcmp>:
 800844c:	690a      	ldr	r2, [r1, #16]
 800844e:	4603      	mov	r3, r0
 8008450:	6900      	ldr	r0, [r0, #16]
 8008452:	1a80      	subs	r0, r0, r2
 8008454:	b530      	push	{r4, r5, lr}
 8008456:	d10e      	bne.n	8008476 <__mcmp+0x2a>
 8008458:	3314      	adds	r3, #20
 800845a:	3114      	adds	r1, #20
 800845c:	eb03 0482 	add.w	r4, r3, r2, lsl #2
 8008460:	eb01 0182 	add.w	r1, r1, r2, lsl #2
 8008464:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 8008468:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 800846c:	4295      	cmp	r5, r2
 800846e:	d003      	beq.n	8008478 <__mcmp+0x2c>
 8008470:	d205      	bcs.n	800847e <__mcmp+0x32>
 8008472:	f04f 30ff 	mov.w	r0, #4294967295
 8008476:	bd30      	pop	{r4, r5, pc}
 8008478:	42a3      	cmp	r3, r4
 800847a:	d3f3      	bcc.n	8008464 <__mcmp+0x18>
 800847c:	e7fb      	b.n	8008476 <__mcmp+0x2a>
 800847e:	2001      	movs	r0, #1
 8008480:	e7f9      	b.n	8008476 <__mcmp+0x2a>
	...

08008484 <__mdiff>:
 8008484:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008488:	4689      	mov	r9, r1
 800848a:	4606      	mov	r6, r0
 800848c:	4611      	mov	r1, r2
 800848e:	4648      	mov	r0, r9
 8008490:	4614      	mov	r4, r2
 8008492:	f7ff ffdb 	bl	800844c <__mcmp>
 8008496:	1e05      	subs	r5, r0, #0
 8008498:	d112      	bne.n	80084c0 <__mdiff+0x3c>
 800849a:	4629      	mov	r1, r5
 800849c:	4630      	mov	r0, r6
 800849e:	f7ff fd5b 	bl	8007f58 <_Balloc>
 80084a2:	4602      	mov	r2, r0
 80084a4:	b928      	cbnz	r0, 80084b2 <__mdiff+0x2e>
 80084a6:	4b3f      	ldr	r3, [pc, #252]	@ (80085a4 <__mdiff+0x120>)
 80084a8:	f240 2137 	movw	r1, #567	@ 0x237
 80084ac:	483e      	ldr	r0, [pc, #248]	@ (80085a8 <__mdiff+0x124>)
 80084ae:	f000 fb11 	bl	8008ad4 <__assert_func>
 80084b2:	2301      	movs	r3, #1
 80084b4:	e9c0 3504 	strd	r3, r5, [r0, #16]
 80084b8:	4610      	mov	r0, r2
 80084ba:	b003      	add	sp, #12
 80084bc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80084c0:	bfbc      	itt	lt
 80084c2:	464b      	movlt	r3, r9
 80084c4:	46a1      	movlt	r9, r4
 80084c6:	4630      	mov	r0, r6
 80084c8:	f8d9 1004 	ldr.w	r1, [r9, #4]
 80084cc:	bfba      	itte	lt
 80084ce:	461c      	movlt	r4, r3
 80084d0:	2501      	movlt	r5, #1
 80084d2:	2500      	movge	r5, #0
 80084d4:	f7ff fd40 	bl	8007f58 <_Balloc>
 80084d8:	4602      	mov	r2, r0
 80084da:	b918      	cbnz	r0, 80084e4 <__mdiff+0x60>
 80084dc:	4b31      	ldr	r3, [pc, #196]	@ (80085a4 <__mdiff+0x120>)
 80084de:	f240 2145 	movw	r1, #581	@ 0x245
 80084e2:	e7e3      	b.n	80084ac <__mdiff+0x28>
 80084e4:	f8d9 7010 	ldr.w	r7, [r9, #16]
 80084e8:	6926      	ldr	r6, [r4, #16]
 80084ea:	60c5      	str	r5, [r0, #12]
 80084ec:	f109 0310 	add.w	r3, r9, #16
 80084f0:	f109 0514 	add.w	r5, r9, #20
 80084f4:	f104 0e14 	add.w	lr, r4, #20
 80084f8:	f100 0b14 	add.w	fp, r0, #20
 80084fc:	eb05 0887 	add.w	r8, r5, r7, lsl #2
 8008500:	eb0e 0686 	add.w	r6, lr, r6, lsl #2
 8008504:	9301      	str	r3, [sp, #4]
 8008506:	46d9      	mov	r9, fp
 8008508:	f04f 0c00 	mov.w	ip, #0
 800850c:	9b01      	ldr	r3, [sp, #4]
 800850e:	f85e 0b04 	ldr.w	r0, [lr], #4
 8008512:	f853 af04 	ldr.w	sl, [r3, #4]!
 8008516:	9301      	str	r3, [sp, #4]
 8008518:	fa1f f38a 	uxth.w	r3, sl
 800851c:	4619      	mov	r1, r3
 800851e:	b283      	uxth	r3, r0
 8008520:	1acb      	subs	r3, r1, r3
 8008522:	0c00      	lsrs	r0, r0, #16
 8008524:	4463      	add	r3, ip
 8008526:	ebc0 401a 	rsb	r0, r0, sl, lsr #16
 800852a:	eb00 4023 	add.w	r0, r0, r3, asr #16
 800852e:	b29b      	uxth	r3, r3
 8008530:	ea43 4300 	orr.w	r3, r3, r0, lsl #16
 8008534:	4576      	cmp	r6, lr
 8008536:	f849 3b04 	str.w	r3, [r9], #4
 800853a:	ea4f 4c20 	mov.w	ip, r0, asr #16
 800853e:	d8e5      	bhi.n	800850c <__mdiff+0x88>
 8008540:	1b33      	subs	r3, r6, r4
 8008542:	3b15      	subs	r3, #21
 8008544:	f023 0303 	bic.w	r3, r3, #3
 8008548:	3415      	adds	r4, #21
 800854a:	3304      	adds	r3, #4
 800854c:	42a6      	cmp	r6, r4
 800854e:	bf38      	it	cc
 8008550:	2304      	movcc	r3, #4
 8008552:	441d      	add	r5, r3
 8008554:	445b      	add	r3, fp
 8008556:	461e      	mov	r6, r3
 8008558:	462c      	mov	r4, r5
 800855a:	4544      	cmp	r4, r8
 800855c:	d30e      	bcc.n	800857c <__mdiff+0xf8>
 800855e:	f108 0103 	add.w	r1, r8, #3
 8008562:	1b49      	subs	r1, r1, r5
 8008564:	f021 0103 	bic.w	r1, r1, #3
 8008568:	3d03      	subs	r5, #3
 800856a:	45a8      	cmp	r8, r5
 800856c:	bf38      	it	cc
 800856e:	2100      	movcc	r1, #0
 8008570:	440b      	add	r3, r1
 8008572:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 8008576:	b191      	cbz	r1, 800859e <__mdiff+0x11a>
 8008578:	6117      	str	r7, [r2, #16]
 800857a:	e79d      	b.n	80084b8 <__mdiff+0x34>
 800857c:	f854 1b04 	ldr.w	r1, [r4], #4
 8008580:	46e6      	mov	lr, ip
 8008582:	0c08      	lsrs	r0, r1, #16
 8008584:	fa1c fc81 	uxtah	ip, ip, r1
 8008588:	4471      	add	r1, lr
 800858a:	eb00 402c 	add.w	r0, r0, ip, asr #16
 800858e:	b289      	uxth	r1, r1
 8008590:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8008594:	f846 1b04 	str.w	r1, [r6], #4
 8008598:	ea4f 4c20 	mov.w	ip, r0, asr #16
 800859c:	e7dd      	b.n	800855a <__mdiff+0xd6>
 800859e:	3f01      	subs	r7, #1
 80085a0:	e7e7      	b.n	8008572 <__mdiff+0xee>
 80085a2:	bf00      	nop
 80085a4:	0800a400 	.word	0x0800a400
 80085a8:	0800a411 	.word	0x0800a411

080085ac <__d2b>:
 80085ac:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 80085b0:	460f      	mov	r7, r1
 80085b2:	2101      	movs	r1, #1
 80085b4:	ec59 8b10 	vmov	r8, r9, d0
 80085b8:	4616      	mov	r6, r2
 80085ba:	f7ff fccd 	bl	8007f58 <_Balloc>
 80085be:	4604      	mov	r4, r0
 80085c0:	b930      	cbnz	r0, 80085d0 <__d2b+0x24>
 80085c2:	4602      	mov	r2, r0
 80085c4:	4b23      	ldr	r3, [pc, #140]	@ (8008654 <__d2b+0xa8>)
 80085c6:	4824      	ldr	r0, [pc, #144]	@ (8008658 <__d2b+0xac>)
 80085c8:	f240 310f 	movw	r1, #783	@ 0x30f
 80085cc:	f000 fa82 	bl	8008ad4 <__assert_func>
 80085d0:	f3c9 550a 	ubfx	r5, r9, #20, #11
 80085d4:	f3c9 0313 	ubfx	r3, r9, #0, #20
 80085d8:	b10d      	cbz	r5, 80085de <__d2b+0x32>
 80085da:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 80085de:	9301      	str	r3, [sp, #4]
 80085e0:	f1b8 0300 	subs.w	r3, r8, #0
 80085e4:	d023      	beq.n	800862e <__d2b+0x82>
 80085e6:	4668      	mov	r0, sp
 80085e8:	9300      	str	r3, [sp, #0]
 80085ea:	f7ff fd7c 	bl	80080e6 <__lo0bits>
 80085ee:	e9dd 1200 	ldrd	r1, r2, [sp]
 80085f2:	b1d0      	cbz	r0, 800862a <__d2b+0x7e>
 80085f4:	f1c0 0320 	rsb	r3, r0, #32
 80085f8:	fa02 f303 	lsl.w	r3, r2, r3
 80085fc:	430b      	orrs	r3, r1
 80085fe:	40c2      	lsrs	r2, r0
 8008600:	6163      	str	r3, [r4, #20]
 8008602:	9201      	str	r2, [sp, #4]
 8008604:	9b01      	ldr	r3, [sp, #4]
 8008606:	61a3      	str	r3, [r4, #24]
 8008608:	2b00      	cmp	r3, #0
 800860a:	bf0c      	ite	eq
 800860c:	2201      	moveq	r2, #1
 800860e:	2202      	movne	r2, #2
 8008610:	6122      	str	r2, [r4, #16]
 8008612:	b1a5      	cbz	r5, 800863e <__d2b+0x92>
 8008614:	f2a5 4533 	subw	r5, r5, #1075	@ 0x433
 8008618:	4405      	add	r5, r0
 800861a:	603d      	str	r5, [r7, #0]
 800861c:	f1c0 0035 	rsb	r0, r0, #53	@ 0x35
 8008620:	6030      	str	r0, [r6, #0]
 8008622:	4620      	mov	r0, r4
 8008624:	b003      	add	sp, #12
 8008626:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800862a:	6161      	str	r1, [r4, #20]
 800862c:	e7ea      	b.n	8008604 <__d2b+0x58>
 800862e:	a801      	add	r0, sp, #4
 8008630:	f7ff fd59 	bl	80080e6 <__lo0bits>
 8008634:	9b01      	ldr	r3, [sp, #4]
 8008636:	6163      	str	r3, [r4, #20]
 8008638:	3020      	adds	r0, #32
 800863a:	2201      	movs	r2, #1
 800863c:	e7e8      	b.n	8008610 <__d2b+0x64>
 800863e:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 8008642:	f2a0 4032 	subw	r0, r0, #1074	@ 0x432
 8008646:	6038      	str	r0, [r7, #0]
 8008648:	6918      	ldr	r0, [r3, #16]
 800864a:	f7ff fd2d 	bl	80080a8 <__hi0bits>
 800864e:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 8008652:	e7e5      	b.n	8008620 <__d2b+0x74>
 8008654:	0800a400 	.word	0x0800a400
 8008658:	0800a411 	.word	0x0800a411

0800865c <__ssputs_r>:
 800865c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8008660:	688e      	ldr	r6, [r1, #8]
 8008662:	461f      	mov	r7, r3
 8008664:	42be      	cmp	r6, r7
 8008666:	680b      	ldr	r3, [r1, #0]
 8008668:	4682      	mov	sl, r0
 800866a:	460c      	mov	r4, r1
 800866c:	4690      	mov	r8, r2
 800866e:	d82d      	bhi.n	80086cc <__ssputs_r+0x70>
 8008670:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8008674:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 8008678:	d026      	beq.n	80086c8 <__ssputs_r+0x6c>
 800867a:	6965      	ldr	r5, [r4, #20]
 800867c:	6909      	ldr	r1, [r1, #16]
 800867e:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8008682:	eba3 0901 	sub.w	r9, r3, r1
 8008686:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800868a:	1c7b      	adds	r3, r7, #1
 800868c:	444b      	add	r3, r9
 800868e:	106d      	asrs	r5, r5, #1
 8008690:	429d      	cmp	r5, r3
 8008692:	bf38      	it	cc
 8008694:	461d      	movcc	r5, r3
 8008696:	0553      	lsls	r3, r2, #21
 8008698:	d527      	bpl.n	80086ea <__ssputs_r+0x8e>
 800869a:	4629      	mov	r1, r5
 800869c:	f7ff fbd0 	bl	8007e40 <_malloc_r>
 80086a0:	4606      	mov	r6, r0
 80086a2:	b360      	cbz	r0, 80086fe <__ssputs_r+0xa2>
 80086a4:	6921      	ldr	r1, [r4, #16]
 80086a6:	464a      	mov	r2, r9
 80086a8:	f000 fa06 	bl	8008ab8 <memcpy>
 80086ac:	89a3      	ldrh	r3, [r4, #12]
 80086ae:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 80086b2:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80086b6:	81a3      	strh	r3, [r4, #12]
 80086b8:	6126      	str	r6, [r4, #16]
 80086ba:	6165      	str	r5, [r4, #20]
 80086bc:	444e      	add	r6, r9
 80086be:	eba5 0509 	sub.w	r5, r5, r9
 80086c2:	6026      	str	r6, [r4, #0]
 80086c4:	60a5      	str	r5, [r4, #8]
 80086c6:	463e      	mov	r6, r7
 80086c8:	42be      	cmp	r6, r7
 80086ca:	d900      	bls.n	80086ce <__ssputs_r+0x72>
 80086cc:	463e      	mov	r6, r7
 80086ce:	6820      	ldr	r0, [r4, #0]
 80086d0:	4632      	mov	r2, r6
 80086d2:	4641      	mov	r1, r8
 80086d4:	f000 f9c6 	bl	8008a64 <memmove>
 80086d8:	68a3      	ldr	r3, [r4, #8]
 80086da:	1b9b      	subs	r3, r3, r6
 80086dc:	60a3      	str	r3, [r4, #8]
 80086de:	6823      	ldr	r3, [r4, #0]
 80086e0:	4433      	add	r3, r6
 80086e2:	6023      	str	r3, [r4, #0]
 80086e4:	2000      	movs	r0, #0
 80086e6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80086ea:	462a      	mov	r2, r5
 80086ec:	f000 fa36 	bl	8008b5c <_realloc_r>
 80086f0:	4606      	mov	r6, r0
 80086f2:	2800      	cmp	r0, #0
 80086f4:	d1e0      	bne.n	80086b8 <__ssputs_r+0x5c>
 80086f6:	6921      	ldr	r1, [r4, #16]
 80086f8:	4650      	mov	r0, sl
 80086fa:	f7ff fb2d 	bl	8007d58 <_free_r>
 80086fe:	230c      	movs	r3, #12
 8008700:	f8ca 3000 	str.w	r3, [sl]
 8008704:	89a3      	ldrh	r3, [r4, #12]
 8008706:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800870a:	81a3      	strh	r3, [r4, #12]
 800870c:	f04f 30ff 	mov.w	r0, #4294967295
 8008710:	e7e9      	b.n	80086e6 <__ssputs_r+0x8a>
	...

08008714 <_svfiprintf_r>:
 8008714:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008718:	4698      	mov	r8, r3
 800871a:	898b      	ldrh	r3, [r1, #12]
 800871c:	061b      	lsls	r3, r3, #24
 800871e:	b09d      	sub	sp, #116	@ 0x74
 8008720:	4607      	mov	r7, r0
 8008722:	460d      	mov	r5, r1
 8008724:	4614      	mov	r4, r2
 8008726:	d510      	bpl.n	800874a <_svfiprintf_r+0x36>
 8008728:	690b      	ldr	r3, [r1, #16]
 800872a:	b973      	cbnz	r3, 800874a <_svfiprintf_r+0x36>
 800872c:	2140      	movs	r1, #64	@ 0x40
 800872e:	f7ff fb87 	bl	8007e40 <_malloc_r>
 8008732:	6028      	str	r0, [r5, #0]
 8008734:	6128      	str	r0, [r5, #16]
 8008736:	b930      	cbnz	r0, 8008746 <_svfiprintf_r+0x32>
 8008738:	230c      	movs	r3, #12
 800873a:	603b      	str	r3, [r7, #0]
 800873c:	f04f 30ff 	mov.w	r0, #4294967295
 8008740:	b01d      	add	sp, #116	@ 0x74
 8008742:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008746:	2340      	movs	r3, #64	@ 0x40
 8008748:	616b      	str	r3, [r5, #20]
 800874a:	2300      	movs	r3, #0
 800874c:	9309      	str	r3, [sp, #36]	@ 0x24
 800874e:	2320      	movs	r3, #32
 8008750:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8008754:	f8cd 800c 	str.w	r8, [sp, #12]
 8008758:	2330      	movs	r3, #48	@ 0x30
 800875a:	f8df 819c 	ldr.w	r8, [pc, #412]	@ 80088f8 <_svfiprintf_r+0x1e4>
 800875e:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8008762:	f04f 0901 	mov.w	r9, #1
 8008766:	4623      	mov	r3, r4
 8008768:	469a      	mov	sl, r3
 800876a:	f813 2b01 	ldrb.w	r2, [r3], #1
 800876e:	b10a      	cbz	r2, 8008774 <_svfiprintf_r+0x60>
 8008770:	2a25      	cmp	r2, #37	@ 0x25
 8008772:	d1f9      	bne.n	8008768 <_svfiprintf_r+0x54>
 8008774:	ebba 0b04 	subs.w	fp, sl, r4
 8008778:	d00b      	beq.n	8008792 <_svfiprintf_r+0x7e>
 800877a:	465b      	mov	r3, fp
 800877c:	4622      	mov	r2, r4
 800877e:	4629      	mov	r1, r5
 8008780:	4638      	mov	r0, r7
 8008782:	f7ff ff6b 	bl	800865c <__ssputs_r>
 8008786:	3001      	adds	r0, #1
 8008788:	f000 80a7 	beq.w	80088da <_svfiprintf_r+0x1c6>
 800878c:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800878e:	445a      	add	r2, fp
 8008790:	9209      	str	r2, [sp, #36]	@ 0x24
 8008792:	f89a 3000 	ldrb.w	r3, [sl]
 8008796:	2b00      	cmp	r3, #0
 8008798:	f000 809f 	beq.w	80088da <_svfiprintf_r+0x1c6>
 800879c:	2300      	movs	r3, #0
 800879e:	f04f 32ff 	mov.w	r2, #4294967295
 80087a2:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80087a6:	f10a 0a01 	add.w	sl, sl, #1
 80087aa:	9304      	str	r3, [sp, #16]
 80087ac:	9307      	str	r3, [sp, #28]
 80087ae:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 80087b2:	931a      	str	r3, [sp, #104]	@ 0x68
 80087b4:	4654      	mov	r4, sl
 80087b6:	2205      	movs	r2, #5
 80087b8:	f814 1b01 	ldrb.w	r1, [r4], #1
 80087bc:	484e      	ldr	r0, [pc, #312]	@ (80088f8 <_svfiprintf_r+0x1e4>)
 80087be:	f7f7 fd27 	bl	8000210 <memchr>
 80087c2:	9a04      	ldr	r2, [sp, #16]
 80087c4:	b9d8      	cbnz	r0, 80087fe <_svfiprintf_r+0xea>
 80087c6:	06d0      	lsls	r0, r2, #27
 80087c8:	bf44      	itt	mi
 80087ca:	2320      	movmi	r3, #32
 80087cc:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 80087d0:	0711      	lsls	r1, r2, #28
 80087d2:	bf44      	itt	mi
 80087d4:	232b      	movmi	r3, #43	@ 0x2b
 80087d6:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 80087da:	f89a 3000 	ldrb.w	r3, [sl]
 80087de:	2b2a      	cmp	r3, #42	@ 0x2a
 80087e0:	d015      	beq.n	800880e <_svfiprintf_r+0xfa>
 80087e2:	9a07      	ldr	r2, [sp, #28]
 80087e4:	4654      	mov	r4, sl
 80087e6:	2000      	movs	r0, #0
 80087e8:	f04f 0c0a 	mov.w	ip, #10
 80087ec:	4621      	mov	r1, r4
 80087ee:	f811 3b01 	ldrb.w	r3, [r1], #1
 80087f2:	3b30      	subs	r3, #48	@ 0x30
 80087f4:	2b09      	cmp	r3, #9
 80087f6:	d94b      	bls.n	8008890 <_svfiprintf_r+0x17c>
 80087f8:	b1b0      	cbz	r0, 8008828 <_svfiprintf_r+0x114>
 80087fa:	9207      	str	r2, [sp, #28]
 80087fc:	e014      	b.n	8008828 <_svfiprintf_r+0x114>
 80087fe:	eba0 0308 	sub.w	r3, r0, r8
 8008802:	fa09 f303 	lsl.w	r3, r9, r3
 8008806:	4313      	orrs	r3, r2
 8008808:	9304      	str	r3, [sp, #16]
 800880a:	46a2      	mov	sl, r4
 800880c:	e7d2      	b.n	80087b4 <_svfiprintf_r+0xa0>
 800880e:	9b03      	ldr	r3, [sp, #12]
 8008810:	1d19      	adds	r1, r3, #4
 8008812:	681b      	ldr	r3, [r3, #0]
 8008814:	9103      	str	r1, [sp, #12]
 8008816:	2b00      	cmp	r3, #0
 8008818:	bfbb      	ittet	lt
 800881a:	425b      	neglt	r3, r3
 800881c:	f042 0202 	orrlt.w	r2, r2, #2
 8008820:	9307      	strge	r3, [sp, #28]
 8008822:	9307      	strlt	r3, [sp, #28]
 8008824:	bfb8      	it	lt
 8008826:	9204      	strlt	r2, [sp, #16]
 8008828:	7823      	ldrb	r3, [r4, #0]
 800882a:	2b2e      	cmp	r3, #46	@ 0x2e
 800882c:	d10a      	bne.n	8008844 <_svfiprintf_r+0x130>
 800882e:	7863      	ldrb	r3, [r4, #1]
 8008830:	2b2a      	cmp	r3, #42	@ 0x2a
 8008832:	d132      	bne.n	800889a <_svfiprintf_r+0x186>
 8008834:	9b03      	ldr	r3, [sp, #12]
 8008836:	1d1a      	adds	r2, r3, #4
 8008838:	681b      	ldr	r3, [r3, #0]
 800883a:	9203      	str	r2, [sp, #12]
 800883c:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8008840:	3402      	adds	r4, #2
 8008842:	9305      	str	r3, [sp, #20]
 8008844:	f8df a0c0 	ldr.w	sl, [pc, #192]	@ 8008908 <_svfiprintf_r+0x1f4>
 8008848:	7821      	ldrb	r1, [r4, #0]
 800884a:	2203      	movs	r2, #3
 800884c:	4650      	mov	r0, sl
 800884e:	f7f7 fcdf 	bl	8000210 <memchr>
 8008852:	b138      	cbz	r0, 8008864 <_svfiprintf_r+0x150>
 8008854:	9b04      	ldr	r3, [sp, #16]
 8008856:	eba0 000a 	sub.w	r0, r0, sl
 800885a:	2240      	movs	r2, #64	@ 0x40
 800885c:	4082      	lsls	r2, r0
 800885e:	4313      	orrs	r3, r2
 8008860:	3401      	adds	r4, #1
 8008862:	9304      	str	r3, [sp, #16]
 8008864:	f814 1b01 	ldrb.w	r1, [r4], #1
 8008868:	4824      	ldr	r0, [pc, #144]	@ (80088fc <_svfiprintf_r+0x1e8>)
 800886a:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 800886e:	2206      	movs	r2, #6
 8008870:	f7f7 fcce 	bl	8000210 <memchr>
 8008874:	2800      	cmp	r0, #0
 8008876:	d036      	beq.n	80088e6 <_svfiprintf_r+0x1d2>
 8008878:	4b21      	ldr	r3, [pc, #132]	@ (8008900 <_svfiprintf_r+0x1ec>)
 800887a:	bb1b      	cbnz	r3, 80088c4 <_svfiprintf_r+0x1b0>
 800887c:	9b03      	ldr	r3, [sp, #12]
 800887e:	3307      	adds	r3, #7
 8008880:	f023 0307 	bic.w	r3, r3, #7
 8008884:	3308      	adds	r3, #8
 8008886:	9303      	str	r3, [sp, #12]
 8008888:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800888a:	4433      	add	r3, r6
 800888c:	9309      	str	r3, [sp, #36]	@ 0x24
 800888e:	e76a      	b.n	8008766 <_svfiprintf_r+0x52>
 8008890:	fb0c 3202 	mla	r2, ip, r2, r3
 8008894:	460c      	mov	r4, r1
 8008896:	2001      	movs	r0, #1
 8008898:	e7a8      	b.n	80087ec <_svfiprintf_r+0xd8>
 800889a:	2300      	movs	r3, #0
 800889c:	3401      	adds	r4, #1
 800889e:	9305      	str	r3, [sp, #20]
 80088a0:	4619      	mov	r1, r3
 80088a2:	f04f 0c0a 	mov.w	ip, #10
 80088a6:	4620      	mov	r0, r4
 80088a8:	f810 2b01 	ldrb.w	r2, [r0], #1
 80088ac:	3a30      	subs	r2, #48	@ 0x30
 80088ae:	2a09      	cmp	r2, #9
 80088b0:	d903      	bls.n	80088ba <_svfiprintf_r+0x1a6>
 80088b2:	2b00      	cmp	r3, #0
 80088b4:	d0c6      	beq.n	8008844 <_svfiprintf_r+0x130>
 80088b6:	9105      	str	r1, [sp, #20]
 80088b8:	e7c4      	b.n	8008844 <_svfiprintf_r+0x130>
 80088ba:	fb0c 2101 	mla	r1, ip, r1, r2
 80088be:	4604      	mov	r4, r0
 80088c0:	2301      	movs	r3, #1
 80088c2:	e7f0      	b.n	80088a6 <_svfiprintf_r+0x192>
 80088c4:	ab03      	add	r3, sp, #12
 80088c6:	9300      	str	r3, [sp, #0]
 80088c8:	462a      	mov	r2, r5
 80088ca:	4b0e      	ldr	r3, [pc, #56]	@ (8008904 <_svfiprintf_r+0x1f0>)
 80088cc:	a904      	add	r1, sp, #16
 80088ce:	4638      	mov	r0, r7
 80088d0:	f7fd fe70 	bl	80065b4 <_printf_float>
 80088d4:	1c42      	adds	r2, r0, #1
 80088d6:	4606      	mov	r6, r0
 80088d8:	d1d6      	bne.n	8008888 <_svfiprintf_r+0x174>
 80088da:	89ab      	ldrh	r3, [r5, #12]
 80088dc:	065b      	lsls	r3, r3, #25
 80088de:	f53f af2d 	bmi.w	800873c <_svfiprintf_r+0x28>
 80088e2:	9809      	ldr	r0, [sp, #36]	@ 0x24
 80088e4:	e72c      	b.n	8008740 <_svfiprintf_r+0x2c>
 80088e6:	ab03      	add	r3, sp, #12
 80088e8:	9300      	str	r3, [sp, #0]
 80088ea:	462a      	mov	r2, r5
 80088ec:	4b05      	ldr	r3, [pc, #20]	@ (8008904 <_svfiprintf_r+0x1f0>)
 80088ee:	a904      	add	r1, sp, #16
 80088f0:	4638      	mov	r0, r7
 80088f2:	f7fe f8f7 	bl	8006ae4 <_printf_i>
 80088f6:	e7ed      	b.n	80088d4 <_svfiprintf_r+0x1c0>
 80088f8:	0800a568 	.word	0x0800a568
 80088fc:	0800a572 	.word	0x0800a572
 8008900:	080065b5 	.word	0x080065b5
 8008904:	0800865d 	.word	0x0800865d
 8008908:	0800a56e 	.word	0x0800a56e

0800890c <__sflush_r>:
 800890c:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8008910:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8008914:	0716      	lsls	r6, r2, #28
 8008916:	4605      	mov	r5, r0
 8008918:	460c      	mov	r4, r1
 800891a:	d454      	bmi.n	80089c6 <__sflush_r+0xba>
 800891c:	684b      	ldr	r3, [r1, #4]
 800891e:	2b00      	cmp	r3, #0
 8008920:	dc02      	bgt.n	8008928 <__sflush_r+0x1c>
 8008922:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 8008924:	2b00      	cmp	r3, #0
 8008926:	dd48      	ble.n	80089ba <__sflush_r+0xae>
 8008928:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 800892a:	2e00      	cmp	r6, #0
 800892c:	d045      	beq.n	80089ba <__sflush_r+0xae>
 800892e:	2300      	movs	r3, #0
 8008930:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 8008934:	682f      	ldr	r7, [r5, #0]
 8008936:	6a21      	ldr	r1, [r4, #32]
 8008938:	602b      	str	r3, [r5, #0]
 800893a:	d030      	beq.n	800899e <__sflush_r+0x92>
 800893c:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 800893e:	89a3      	ldrh	r3, [r4, #12]
 8008940:	0759      	lsls	r1, r3, #29
 8008942:	d505      	bpl.n	8008950 <__sflush_r+0x44>
 8008944:	6863      	ldr	r3, [r4, #4]
 8008946:	1ad2      	subs	r2, r2, r3
 8008948:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 800894a:	b10b      	cbz	r3, 8008950 <__sflush_r+0x44>
 800894c:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 800894e:	1ad2      	subs	r2, r2, r3
 8008950:	2300      	movs	r3, #0
 8008952:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8008954:	6a21      	ldr	r1, [r4, #32]
 8008956:	4628      	mov	r0, r5
 8008958:	47b0      	blx	r6
 800895a:	1c43      	adds	r3, r0, #1
 800895c:	89a3      	ldrh	r3, [r4, #12]
 800895e:	d106      	bne.n	800896e <__sflush_r+0x62>
 8008960:	6829      	ldr	r1, [r5, #0]
 8008962:	291d      	cmp	r1, #29
 8008964:	d82b      	bhi.n	80089be <__sflush_r+0xb2>
 8008966:	4a2a      	ldr	r2, [pc, #168]	@ (8008a10 <__sflush_r+0x104>)
 8008968:	410a      	asrs	r2, r1
 800896a:	07d6      	lsls	r6, r2, #31
 800896c:	d427      	bmi.n	80089be <__sflush_r+0xb2>
 800896e:	2200      	movs	r2, #0
 8008970:	6062      	str	r2, [r4, #4]
 8008972:	04d9      	lsls	r1, r3, #19
 8008974:	6922      	ldr	r2, [r4, #16]
 8008976:	6022      	str	r2, [r4, #0]
 8008978:	d504      	bpl.n	8008984 <__sflush_r+0x78>
 800897a:	1c42      	adds	r2, r0, #1
 800897c:	d101      	bne.n	8008982 <__sflush_r+0x76>
 800897e:	682b      	ldr	r3, [r5, #0]
 8008980:	b903      	cbnz	r3, 8008984 <__sflush_r+0x78>
 8008982:	6560      	str	r0, [r4, #84]	@ 0x54
 8008984:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8008986:	602f      	str	r7, [r5, #0]
 8008988:	b1b9      	cbz	r1, 80089ba <__sflush_r+0xae>
 800898a:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800898e:	4299      	cmp	r1, r3
 8008990:	d002      	beq.n	8008998 <__sflush_r+0x8c>
 8008992:	4628      	mov	r0, r5
 8008994:	f7ff f9e0 	bl	8007d58 <_free_r>
 8008998:	2300      	movs	r3, #0
 800899a:	6363      	str	r3, [r4, #52]	@ 0x34
 800899c:	e00d      	b.n	80089ba <__sflush_r+0xae>
 800899e:	2301      	movs	r3, #1
 80089a0:	4628      	mov	r0, r5
 80089a2:	47b0      	blx	r6
 80089a4:	4602      	mov	r2, r0
 80089a6:	1c50      	adds	r0, r2, #1
 80089a8:	d1c9      	bne.n	800893e <__sflush_r+0x32>
 80089aa:	682b      	ldr	r3, [r5, #0]
 80089ac:	2b00      	cmp	r3, #0
 80089ae:	d0c6      	beq.n	800893e <__sflush_r+0x32>
 80089b0:	2b1d      	cmp	r3, #29
 80089b2:	d001      	beq.n	80089b8 <__sflush_r+0xac>
 80089b4:	2b16      	cmp	r3, #22
 80089b6:	d11e      	bne.n	80089f6 <__sflush_r+0xea>
 80089b8:	602f      	str	r7, [r5, #0]
 80089ba:	2000      	movs	r0, #0
 80089bc:	e022      	b.n	8008a04 <__sflush_r+0xf8>
 80089be:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80089c2:	b21b      	sxth	r3, r3
 80089c4:	e01b      	b.n	80089fe <__sflush_r+0xf2>
 80089c6:	690f      	ldr	r7, [r1, #16]
 80089c8:	2f00      	cmp	r7, #0
 80089ca:	d0f6      	beq.n	80089ba <__sflush_r+0xae>
 80089cc:	0793      	lsls	r3, r2, #30
 80089ce:	680e      	ldr	r6, [r1, #0]
 80089d0:	bf08      	it	eq
 80089d2:	694b      	ldreq	r3, [r1, #20]
 80089d4:	600f      	str	r7, [r1, #0]
 80089d6:	bf18      	it	ne
 80089d8:	2300      	movne	r3, #0
 80089da:	eba6 0807 	sub.w	r8, r6, r7
 80089de:	608b      	str	r3, [r1, #8]
 80089e0:	f1b8 0f00 	cmp.w	r8, #0
 80089e4:	dde9      	ble.n	80089ba <__sflush_r+0xae>
 80089e6:	6a21      	ldr	r1, [r4, #32]
 80089e8:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 80089ea:	4643      	mov	r3, r8
 80089ec:	463a      	mov	r2, r7
 80089ee:	4628      	mov	r0, r5
 80089f0:	47b0      	blx	r6
 80089f2:	2800      	cmp	r0, #0
 80089f4:	dc08      	bgt.n	8008a08 <__sflush_r+0xfc>
 80089f6:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80089fa:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80089fe:	81a3      	strh	r3, [r4, #12]
 8008a00:	f04f 30ff 	mov.w	r0, #4294967295
 8008a04:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8008a08:	4407      	add	r7, r0
 8008a0a:	eba8 0800 	sub.w	r8, r8, r0
 8008a0e:	e7e7      	b.n	80089e0 <__sflush_r+0xd4>
 8008a10:	dfbffffe 	.word	0xdfbffffe

08008a14 <_fflush_r>:
 8008a14:	b538      	push	{r3, r4, r5, lr}
 8008a16:	690b      	ldr	r3, [r1, #16]
 8008a18:	4605      	mov	r5, r0
 8008a1a:	460c      	mov	r4, r1
 8008a1c:	b913      	cbnz	r3, 8008a24 <_fflush_r+0x10>
 8008a1e:	2500      	movs	r5, #0
 8008a20:	4628      	mov	r0, r5
 8008a22:	bd38      	pop	{r3, r4, r5, pc}
 8008a24:	b118      	cbz	r0, 8008a2e <_fflush_r+0x1a>
 8008a26:	6a03      	ldr	r3, [r0, #32]
 8008a28:	b90b      	cbnz	r3, 8008a2e <_fflush_r+0x1a>
 8008a2a:	f7fe fa07 	bl	8006e3c <__sinit>
 8008a2e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8008a32:	2b00      	cmp	r3, #0
 8008a34:	d0f3      	beq.n	8008a1e <_fflush_r+0xa>
 8008a36:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 8008a38:	07d0      	lsls	r0, r2, #31
 8008a3a:	d404      	bmi.n	8008a46 <_fflush_r+0x32>
 8008a3c:	0599      	lsls	r1, r3, #22
 8008a3e:	d402      	bmi.n	8008a46 <_fflush_r+0x32>
 8008a40:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8008a42:	f7fe fb38 	bl	80070b6 <__retarget_lock_acquire_recursive>
 8008a46:	4628      	mov	r0, r5
 8008a48:	4621      	mov	r1, r4
 8008a4a:	f7ff ff5f 	bl	800890c <__sflush_r>
 8008a4e:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8008a50:	07da      	lsls	r2, r3, #31
 8008a52:	4605      	mov	r5, r0
 8008a54:	d4e4      	bmi.n	8008a20 <_fflush_r+0xc>
 8008a56:	89a3      	ldrh	r3, [r4, #12]
 8008a58:	059b      	lsls	r3, r3, #22
 8008a5a:	d4e1      	bmi.n	8008a20 <_fflush_r+0xc>
 8008a5c:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8008a5e:	f7fe fb2b 	bl	80070b8 <__retarget_lock_release_recursive>
 8008a62:	e7dd      	b.n	8008a20 <_fflush_r+0xc>

08008a64 <memmove>:
 8008a64:	4288      	cmp	r0, r1
 8008a66:	b510      	push	{r4, lr}
 8008a68:	eb01 0402 	add.w	r4, r1, r2
 8008a6c:	d902      	bls.n	8008a74 <memmove+0x10>
 8008a6e:	4284      	cmp	r4, r0
 8008a70:	4623      	mov	r3, r4
 8008a72:	d807      	bhi.n	8008a84 <memmove+0x20>
 8008a74:	1e43      	subs	r3, r0, #1
 8008a76:	42a1      	cmp	r1, r4
 8008a78:	d008      	beq.n	8008a8c <memmove+0x28>
 8008a7a:	f811 2b01 	ldrb.w	r2, [r1], #1
 8008a7e:	f803 2f01 	strb.w	r2, [r3, #1]!
 8008a82:	e7f8      	b.n	8008a76 <memmove+0x12>
 8008a84:	4402      	add	r2, r0
 8008a86:	4601      	mov	r1, r0
 8008a88:	428a      	cmp	r2, r1
 8008a8a:	d100      	bne.n	8008a8e <memmove+0x2a>
 8008a8c:	bd10      	pop	{r4, pc}
 8008a8e:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8008a92:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8008a96:	e7f7      	b.n	8008a88 <memmove+0x24>

08008a98 <_sbrk_r>:
 8008a98:	b538      	push	{r3, r4, r5, lr}
 8008a9a:	4d06      	ldr	r5, [pc, #24]	@ (8008ab4 <_sbrk_r+0x1c>)
 8008a9c:	2300      	movs	r3, #0
 8008a9e:	4604      	mov	r4, r0
 8008aa0:	4608      	mov	r0, r1
 8008aa2:	602b      	str	r3, [r5, #0]
 8008aa4:	f7f9 faac 	bl	8002000 <_sbrk>
 8008aa8:	1c43      	adds	r3, r0, #1
 8008aaa:	d102      	bne.n	8008ab2 <_sbrk_r+0x1a>
 8008aac:	682b      	ldr	r3, [r5, #0]
 8008aae:	b103      	cbz	r3, 8008ab2 <_sbrk_r+0x1a>
 8008ab0:	6023      	str	r3, [r4, #0]
 8008ab2:	bd38      	pop	{r3, r4, r5, pc}
 8008ab4:	20000740 	.word	0x20000740

08008ab8 <memcpy>:
 8008ab8:	440a      	add	r2, r1
 8008aba:	4291      	cmp	r1, r2
 8008abc:	f100 33ff 	add.w	r3, r0, #4294967295
 8008ac0:	d100      	bne.n	8008ac4 <memcpy+0xc>
 8008ac2:	4770      	bx	lr
 8008ac4:	b510      	push	{r4, lr}
 8008ac6:	f811 4b01 	ldrb.w	r4, [r1], #1
 8008aca:	f803 4f01 	strb.w	r4, [r3, #1]!
 8008ace:	4291      	cmp	r1, r2
 8008ad0:	d1f9      	bne.n	8008ac6 <memcpy+0xe>
 8008ad2:	bd10      	pop	{r4, pc}

08008ad4 <__assert_func>:
 8008ad4:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8008ad6:	4614      	mov	r4, r2
 8008ad8:	461a      	mov	r2, r3
 8008ada:	4b09      	ldr	r3, [pc, #36]	@ (8008b00 <__assert_func+0x2c>)
 8008adc:	681b      	ldr	r3, [r3, #0]
 8008ade:	4605      	mov	r5, r0
 8008ae0:	68d8      	ldr	r0, [r3, #12]
 8008ae2:	b954      	cbnz	r4, 8008afa <__assert_func+0x26>
 8008ae4:	4b07      	ldr	r3, [pc, #28]	@ (8008b04 <__assert_func+0x30>)
 8008ae6:	461c      	mov	r4, r3
 8008ae8:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8008aec:	9100      	str	r1, [sp, #0]
 8008aee:	462b      	mov	r3, r5
 8008af0:	4905      	ldr	r1, [pc, #20]	@ (8008b08 <__assert_func+0x34>)
 8008af2:	f000 f86f 	bl	8008bd4 <fiprintf>
 8008af6:	f000 f87f 	bl	8008bf8 <abort>
 8008afa:	4b04      	ldr	r3, [pc, #16]	@ (8008b0c <__assert_func+0x38>)
 8008afc:	e7f4      	b.n	8008ae8 <__assert_func+0x14>
 8008afe:	bf00      	nop
 8008b00:	20000018 	.word	0x20000018
 8008b04:	0800a5be 	.word	0x0800a5be
 8008b08:	0800a590 	.word	0x0800a590
 8008b0c:	0800a583 	.word	0x0800a583

08008b10 <_calloc_r>:
 8008b10:	b570      	push	{r4, r5, r6, lr}
 8008b12:	fba1 5402 	umull	r5, r4, r1, r2
 8008b16:	b93c      	cbnz	r4, 8008b28 <_calloc_r+0x18>
 8008b18:	4629      	mov	r1, r5
 8008b1a:	f7ff f991 	bl	8007e40 <_malloc_r>
 8008b1e:	4606      	mov	r6, r0
 8008b20:	b928      	cbnz	r0, 8008b2e <_calloc_r+0x1e>
 8008b22:	2600      	movs	r6, #0
 8008b24:	4630      	mov	r0, r6
 8008b26:	bd70      	pop	{r4, r5, r6, pc}
 8008b28:	220c      	movs	r2, #12
 8008b2a:	6002      	str	r2, [r0, #0]
 8008b2c:	e7f9      	b.n	8008b22 <_calloc_r+0x12>
 8008b2e:	462a      	mov	r2, r5
 8008b30:	4621      	mov	r1, r4
 8008b32:	f7fe fa30 	bl	8006f96 <memset>
 8008b36:	e7f5      	b.n	8008b24 <_calloc_r+0x14>

08008b38 <__ascii_mbtowc>:
 8008b38:	b082      	sub	sp, #8
 8008b3a:	b901      	cbnz	r1, 8008b3e <__ascii_mbtowc+0x6>
 8008b3c:	a901      	add	r1, sp, #4
 8008b3e:	b142      	cbz	r2, 8008b52 <__ascii_mbtowc+0x1a>
 8008b40:	b14b      	cbz	r3, 8008b56 <__ascii_mbtowc+0x1e>
 8008b42:	7813      	ldrb	r3, [r2, #0]
 8008b44:	600b      	str	r3, [r1, #0]
 8008b46:	7812      	ldrb	r2, [r2, #0]
 8008b48:	1e10      	subs	r0, r2, #0
 8008b4a:	bf18      	it	ne
 8008b4c:	2001      	movne	r0, #1
 8008b4e:	b002      	add	sp, #8
 8008b50:	4770      	bx	lr
 8008b52:	4610      	mov	r0, r2
 8008b54:	e7fb      	b.n	8008b4e <__ascii_mbtowc+0x16>
 8008b56:	f06f 0001 	mvn.w	r0, #1
 8008b5a:	e7f8      	b.n	8008b4e <__ascii_mbtowc+0x16>

08008b5c <_realloc_r>:
 8008b5c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8008b60:	4680      	mov	r8, r0
 8008b62:	4615      	mov	r5, r2
 8008b64:	460c      	mov	r4, r1
 8008b66:	b921      	cbnz	r1, 8008b72 <_realloc_r+0x16>
 8008b68:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8008b6c:	4611      	mov	r1, r2
 8008b6e:	f7ff b967 	b.w	8007e40 <_malloc_r>
 8008b72:	b92a      	cbnz	r2, 8008b80 <_realloc_r+0x24>
 8008b74:	f7ff f8f0 	bl	8007d58 <_free_r>
 8008b78:	2400      	movs	r4, #0
 8008b7a:	4620      	mov	r0, r4
 8008b7c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8008b80:	f000 f841 	bl	8008c06 <_malloc_usable_size_r>
 8008b84:	4285      	cmp	r5, r0
 8008b86:	4606      	mov	r6, r0
 8008b88:	d802      	bhi.n	8008b90 <_realloc_r+0x34>
 8008b8a:	ebb5 0f50 	cmp.w	r5, r0, lsr #1
 8008b8e:	d8f4      	bhi.n	8008b7a <_realloc_r+0x1e>
 8008b90:	4629      	mov	r1, r5
 8008b92:	4640      	mov	r0, r8
 8008b94:	f7ff f954 	bl	8007e40 <_malloc_r>
 8008b98:	4607      	mov	r7, r0
 8008b9a:	2800      	cmp	r0, #0
 8008b9c:	d0ec      	beq.n	8008b78 <_realloc_r+0x1c>
 8008b9e:	42b5      	cmp	r5, r6
 8008ba0:	462a      	mov	r2, r5
 8008ba2:	4621      	mov	r1, r4
 8008ba4:	bf28      	it	cs
 8008ba6:	4632      	movcs	r2, r6
 8008ba8:	f7ff ff86 	bl	8008ab8 <memcpy>
 8008bac:	4621      	mov	r1, r4
 8008bae:	4640      	mov	r0, r8
 8008bb0:	f7ff f8d2 	bl	8007d58 <_free_r>
 8008bb4:	463c      	mov	r4, r7
 8008bb6:	e7e0      	b.n	8008b7a <_realloc_r+0x1e>

08008bb8 <__ascii_wctomb>:
 8008bb8:	4603      	mov	r3, r0
 8008bba:	4608      	mov	r0, r1
 8008bbc:	b141      	cbz	r1, 8008bd0 <__ascii_wctomb+0x18>
 8008bbe:	2aff      	cmp	r2, #255	@ 0xff
 8008bc0:	d904      	bls.n	8008bcc <__ascii_wctomb+0x14>
 8008bc2:	228a      	movs	r2, #138	@ 0x8a
 8008bc4:	601a      	str	r2, [r3, #0]
 8008bc6:	f04f 30ff 	mov.w	r0, #4294967295
 8008bca:	4770      	bx	lr
 8008bcc:	700a      	strb	r2, [r1, #0]
 8008bce:	2001      	movs	r0, #1
 8008bd0:	4770      	bx	lr
	...

08008bd4 <fiprintf>:
 8008bd4:	b40e      	push	{r1, r2, r3}
 8008bd6:	b503      	push	{r0, r1, lr}
 8008bd8:	4601      	mov	r1, r0
 8008bda:	ab03      	add	r3, sp, #12
 8008bdc:	4805      	ldr	r0, [pc, #20]	@ (8008bf4 <fiprintf+0x20>)
 8008bde:	f853 2b04 	ldr.w	r2, [r3], #4
 8008be2:	6800      	ldr	r0, [r0, #0]
 8008be4:	9301      	str	r3, [sp, #4]
 8008be6:	f000 f83f 	bl	8008c68 <_vfiprintf_r>
 8008bea:	b002      	add	sp, #8
 8008bec:	f85d eb04 	ldr.w	lr, [sp], #4
 8008bf0:	b003      	add	sp, #12
 8008bf2:	4770      	bx	lr
 8008bf4:	20000018 	.word	0x20000018

08008bf8 <abort>:
 8008bf8:	b508      	push	{r3, lr}
 8008bfa:	2006      	movs	r0, #6
 8008bfc:	f000 fa08 	bl	8009010 <raise>
 8008c00:	2001      	movs	r0, #1
 8008c02:	f7f9 f985 	bl	8001f10 <_exit>

08008c06 <_malloc_usable_size_r>:
 8008c06:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8008c0a:	1f18      	subs	r0, r3, #4
 8008c0c:	2b00      	cmp	r3, #0
 8008c0e:	bfbc      	itt	lt
 8008c10:	580b      	ldrlt	r3, [r1, r0]
 8008c12:	18c0      	addlt	r0, r0, r3
 8008c14:	4770      	bx	lr

08008c16 <__sfputc_r>:
 8008c16:	6893      	ldr	r3, [r2, #8]
 8008c18:	3b01      	subs	r3, #1
 8008c1a:	2b00      	cmp	r3, #0
 8008c1c:	b410      	push	{r4}
 8008c1e:	6093      	str	r3, [r2, #8]
 8008c20:	da08      	bge.n	8008c34 <__sfputc_r+0x1e>
 8008c22:	6994      	ldr	r4, [r2, #24]
 8008c24:	42a3      	cmp	r3, r4
 8008c26:	db01      	blt.n	8008c2c <__sfputc_r+0x16>
 8008c28:	290a      	cmp	r1, #10
 8008c2a:	d103      	bne.n	8008c34 <__sfputc_r+0x1e>
 8008c2c:	f85d 4b04 	ldr.w	r4, [sp], #4
 8008c30:	f000 b932 	b.w	8008e98 <__swbuf_r>
 8008c34:	6813      	ldr	r3, [r2, #0]
 8008c36:	1c58      	adds	r0, r3, #1
 8008c38:	6010      	str	r0, [r2, #0]
 8008c3a:	7019      	strb	r1, [r3, #0]
 8008c3c:	4608      	mov	r0, r1
 8008c3e:	f85d 4b04 	ldr.w	r4, [sp], #4
 8008c42:	4770      	bx	lr

08008c44 <__sfputs_r>:
 8008c44:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008c46:	4606      	mov	r6, r0
 8008c48:	460f      	mov	r7, r1
 8008c4a:	4614      	mov	r4, r2
 8008c4c:	18d5      	adds	r5, r2, r3
 8008c4e:	42ac      	cmp	r4, r5
 8008c50:	d101      	bne.n	8008c56 <__sfputs_r+0x12>
 8008c52:	2000      	movs	r0, #0
 8008c54:	e007      	b.n	8008c66 <__sfputs_r+0x22>
 8008c56:	f814 1b01 	ldrb.w	r1, [r4], #1
 8008c5a:	463a      	mov	r2, r7
 8008c5c:	4630      	mov	r0, r6
 8008c5e:	f7ff ffda 	bl	8008c16 <__sfputc_r>
 8008c62:	1c43      	adds	r3, r0, #1
 8008c64:	d1f3      	bne.n	8008c4e <__sfputs_r+0xa>
 8008c66:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

08008c68 <_vfiprintf_r>:
 8008c68:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008c6c:	460d      	mov	r5, r1
 8008c6e:	b09d      	sub	sp, #116	@ 0x74
 8008c70:	4614      	mov	r4, r2
 8008c72:	4698      	mov	r8, r3
 8008c74:	4606      	mov	r6, r0
 8008c76:	b118      	cbz	r0, 8008c80 <_vfiprintf_r+0x18>
 8008c78:	6a03      	ldr	r3, [r0, #32]
 8008c7a:	b90b      	cbnz	r3, 8008c80 <_vfiprintf_r+0x18>
 8008c7c:	f7fe f8de 	bl	8006e3c <__sinit>
 8008c80:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8008c82:	07d9      	lsls	r1, r3, #31
 8008c84:	d405      	bmi.n	8008c92 <_vfiprintf_r+0x2a>
 8008c86:	89ab      	ldrh	r3, [r5, #12]
 8008c88:	059a      	lsls	r2, r3, #22
 8008c8a:	d402      	bmi.n	8008c92 <_vfiprintf_r+0x2a>
 8008c8c:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8008c8e:	f7fe fa12 	bl	80070b6 <__retarget_lock_acquire_recursive>
 8008c92:	89ab      	ldrh	r3, [r5, #12]
 8008c94:	071b      	lsls	r3, r3, #28
 8008c96:	d501      	bpl.n	8008c9c <_vfiprintf_r+0x34>
 8008c98:	692b      	ldr	r3, [r5, #16]
 8008c9a:	b99b      	cbnz	r3, 8008cc4 <_vfiprintf_r+0x5c>
 8008c9c:	4629      	mov	r1, r5
 8008c9e:	4630      	mov	r0, r6
 8008ca0:	f000 f938 	bl	8008f14 <__swsetup_r>
 8008ca4:	b170      	cbz	r0, 8008cc4 <_vfiprintf_r+0x5c>
 8008ca6:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8008ca8:	07dc      	lsls	r4, r3, #31
 8008caa:	d504      	bpl.n	8008cb6 <_vfiprintf_r+0x4e>
 8008cac:	f04f 30ff 	mov.w	r0, #4294967295
 8008cb0:	b01d      	add	sp, #116	@ 0x74
 8008cb2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008cb6:	89ab      	ldrh	r3, [r5, #12]
 8008cb8:	0598      	lsls	r0, r3, #22
 8008cba:	d4f7      	bmi.n	8008cac <_vfiprintf_r+0x44>
 8008cbc:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8008cbe:	f7fe f9fb 	bl	80070b8 <__retarget_lock_release_recursive>
 8008cc2:	e7f3      	b.n	8008cac <_vfiprintf_r+0x44>
 8008cc4:	2300      	movs	r3, #0
 8008cc6:	9309      	str	r3, [sp, #36]	@ 0x24
 8008cc8:	2320      	movs	r3, #32
 8008cca:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8008cce:	f8cd 800c 	str.w	r8, [sp, #12]
 8008cd2:	2330      	movs	r3, #48	@ 0x30
 8008cd4:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 8008e84 <_vfiprintf_r+0x21c>
 8008cd8:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8008cdc:	f04f 0901 	mov.w	r9, #1
 8008ce0:	4623      	mov	r3, r4
 8008ce2:	469a      	mov	sl, r3
 8008ce4:	f813 2b01 	ldrb.w	r2, [r3], #1
 8008ce8:	b10a      	cbz	r2, 8008cee <_vfiprintf_r+0x86>
 8008cea:	2a25      	cmp	r2, #37	@ 0x25
 8008cec:	d1f9      	bne.n	8008ce2 <_vfiprintf_r+0x7a>
 8008cee:	ebba 0b04 	subs.w	fp, sl, r4
 8008cf2:	d00b      	beq.n	8008d0c <_vfiprintf_r+0xa4>
 8008cf4:	465b      	mov	r3, fp
 8008cf6:	4622      	mov	r2, r4
 8008cf8:	4629      	mov	r1, r5
 8008cfa:	4630      	mov	r0, r6
 8008cfc:	f7ff ffa2 	bl	8008c44 <__sfputs_r>
 8008d00:	3001      	adds	r0, #1
 8008d02:	f000 80a7 	beq.w	8008e54 <_vfiprintf_r+0x1ec>
 8008d06:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8008d08:	445a      	add	r2, fp
 8008d0a:	9209      	str	r2, [sp, #36]	@ 0x24
 8008d0c:	f89a 3000 	ldrb.w	r3, [sl]
 8008d10:	2b00      	cmp	r3, #0
 8008d12:	f000 809f 	beq.w	8008e54 <_vfiprintf_r+0x1ec>
 8008d16:	2300      	movs	r3, #0
 8008d18:	f04f 32ff 	mov.w	r2, #4294967295
 8008d1c:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8008d20:	f10a 0a01 	add.w	sl, sl, #1
 8008d24:	9304      	str	r3, [sp, #16]
 8008d26:	9307      	str	r3, [sp, #28]
 8008d28:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8008d2c:	931a      	str	r3, [sp, #104]	@ 0x68
 8008d2e:	4654      	mov	r4, sl
 8008d30:	2205      	movs	r2, #5
 8008d32:	f814 1b01 	ldrb.w	r1, [r4], #1
 8008d36:	4853      	ldr	r0, [pc, #332]	@ (8008e84 <_vfiprintf_r+0x21c>)
 8008d38:	f7f7 fa6a 	bl	8000210 <memchr>
 8008d3c:	9a04      	ldr	r2, [sp, #16]
 8008d3e:	b9d8      	cbnz	r0, 8008d78 <_vfiprintf_r+0x110>
 8008d40:	06d1      	lsls	r1, r2, #27
 8008d42:	bf44      	itt	mi
 8008d44:	2320      	movmi	r3, #32
 8008d46:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8008d4a:	0713      	lsls	r3, r2, #28
 8008d4c:	bf44      	itt	mi
 8008d4e:	232b      	movmi	r3, #43	@ 0x2b
 8008d50:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8008d54:	f89a 3000 	ldrb.w	r3, [sl]
 8008d58:	2b2a      	cmp	r3, #42	@ 0x2a
 8008d5a:	d015      	beq.n	8008d88 <_vfiprintf_r+0x120>
 8008d5c:	9a07      	ldr	r2, [sp, #28]
 8008d5e:	4654      	mov	r4, sl
 8008d60:	2000      	movs	r0, #0
 8008d62:	f04f 0c0a 	mov.w	ip, #10
 8008d66:	4621      	mov	r1, r4
 8008d68:	f811 3b01 	ldrb.w	r3, [r1], #1
 8008d6c:	3b30      	subs	r3, #48	@ 0x30
 8008d6e:	2b09      	cmp	r3, #9
 8008d70:	d94b      	bls.n	8008e0a <_vfiprintf_r+0x1a2>
 8008d72:	b1b0      	cbz	r0, 8008da2 <_vfiprintf_r+0x13a>
 8008d74:	9207      	str	r2, [sp, #28]
 8008d76:	e014      	b.n	8008da2 <_vfiprintf_r+0x13a>
 8008d78:	eba0 0308 	sub.w	r3, r0, r8
 8008d7c:	fa09 f303 	lsl.w	r3, r9, r3
 8008d80:	4313      	orrs	r3, r2
 8008d82:	9304      	str	r3, [sp, #16]
 8008d84:	46a2      	mov	sl, r4
 8008d86:	e7d2      	b.n	8008d2e <_vfiprintf_r+0xc6>
 8008d88:	9b03      	ldr	r3, [sp, #12]
 8008d8a:	1d19      	adds	r1, r3, #4
 8008d8c:	681b      	ldr	r3, [r3, #0]
 8008d8e:	9103      	str	r1, [sp, #12]
 8008d90:	2b00      	cmp	r3, #0
 8008d92:	bfbb      	ittet	lt
 8008d94:	425b      	neglt	r3, r3
 8008d96:	f042 0202 	orrlt.w	r2, r2, #2
 8008d9a:	9307      	strge	r3, [sp, #28]
 8008d9c:	9307      	strlt	r3, [sp, #28]
 8008d9e:	bfb8      	it	lt
 8008da0:	9204      	strlt	r2, [sp, #16]
 8008da2:	7823      	ldrb	r3, [r4, #0]
 8008da4:	2b2e      	cmp	r3, #46	@ 0x2e
 8008da6:	d10a      	bne.n	8008dbe <_vfiprintf_r+0x156>
 8008da8:	7863      	ldrb	r3, [r4, #1]
 8008daa:	2b2a      	cmp	r3, #42	@ 0x2a
 8008dac:	d132      	bne.n	8008e14 <_vfiprintf_r+0x1ac>
 8008dae:	9b03      	ldr	r3, [sp, #12]
 8008db0:	1d1a      	adds	r2, r3, #4
 8008db2:	681b      	ldr	r3, [r3, #0]
 8008db4:	9203      	str	r2, [sp, #12]
 8008db6:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8008dba:	3402      	adds	r4, #2
 8008dbc:	9305      	str	r3, [sp, #20]
 8008dbe:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 8008e94 <_vfiprintf_r+0x22c>
 8008dc2:	7821      	ldrb	r1, [r4, #0]
 8008dc4:	2203      	movs	r2, #3
 8008dc6:	4650      	mov	r0, sl
 8008dc8:	f7f7 fa22 	bl	8000210 <memchr>
 8008dcc:	b138      	cbz	r0, 8008dde <_vfiprintf_r+0x176>
 8008dce:	9b04      	ldr	r3, [sp, #16]
 8008dd0:	eba0 000a 	sub.w	r0, r0, sl
 8008dd4:	2240      	movs	r2, #64	@ 0x40
 8008dd6:	4082      	lsls	r2, r0
 8008dd8:	4313      	orrs	r3, r2
 8008dda:	3401      	adds	r4, #1
 8008ddc:	9304      	str	r3, [sp, #16]
 8008dde:	f814 1b01 	ldrb.w	r1, [r4], #1
 8008de2:	4829      	ldr	r0, [pc, #164]	@ (8008e88 <_vfiprintf_r+0x220>)
 8008de4:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8008de8:	2206      	movs	r2, #6
 8008dea:	f7f7 fa11 	bl	8000210 <memchr>
 8008dee:	2800      	cmp	r0, #0
 8008df0:	d03f      	beq.n	8008e72 <_vfiprintf_r+0x20a>
 8008df2:	4b26      	ldr	r3, [pc, #152]	@ (8008e8c <_vfiprintf_r+0x224>)
 8008df4:	bb1b      	cbnz	r3, 8008e3e <_vfiprintf_r+0x1d6>
 8008df6:	9b03      	ldr	r3, [sp, #12]
 8008df8:	3307      	adds	r3, #7
 8008dfa:	f023 0307 	bic.w	r3, r3, #7
 8008dfe:	3308      	adds	r3, #8
 8008e00:	9303      	str	r3, [sp, #12]
 8008e02:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8008e04:	443b      	add	r3, r7
 8008e06:	9309      	str	r3, [sp, #36]	@ 0x24
 8008e08:	e76a      	b.n	8008ce0 <_vfiprintf_r+0x78>
 8008e0a:	fb0c 3202 	mla	r2, ip, r2, r3
 8008e0e:	460c      	mov	r4, r1
 8008e10:	2001      	movs	r0, #1
 8008e12:	e7a8      	b.n	8008d66 <_vfiprintf_r+0xfe>
 8008e14:	2300      	movs	r3, #0
 8008e16:	3401      	adds	r4, #1
 8008e18:	9305      	str	r3, [sp, #20]
 8008e1a:	4619      	mov	r1, r3
 8008e1c:	f04f 0c0a 	mov.w	ip, #10
 8008e20:	4620      	mov	r0, r4
 8008e22:	f810 2b01 	ldrb.w	r2, [r0], #1
 8008e26:	3a30      	subs	r2, #48	@ 0x30
 8008e28:	2a09      	cmp	r2, #9
 8008e2a:	d903      	bls.n	8008e34 <_vfiprintf_r+0x1cc>
 8008e2c:	2b00      	cmp	r3, #0
 8008e2e:	d0c6      	beq.n	8008dbe <_vfiprintf_r+0x156>
 8008e30:	9105      	str	r1, [sp, #20]
 8008e32:	e7c4      	b.n	8008dbe <_vfiprintf_r+0x156>
 8008e34:	fb0c 2101 	mla	r1, ip, r1, r2
 8008e38:	4604      	mov	r4, r0
 8008e3a:	2301      	movs	r3, #1
 8008e3c:	e7f0      	b.n	8008e20 <_vfiprintf_r+0x1b8>
 8008e3e:	ab03      	add	r3, sp, #12
 8008e40:	9300      	str	r3, [sp, #0]
 8008e42:	462a      	mov	r2, r5
 8008e44:	4b12      	ldr	r3, [pc, #72]	@ (8008e90 <_vfiprintf_r+0x228>)
 8008e46:	a904      	add	r1, sp, #16
 8008e48:	4630      	mov	r0, r6
 8008e4a:	f7fd fbb3 	bl	80065b4 <_printf_float>
 8008e4e:	4607      	mov	r7, r0
 8008e50:	1c78      	adds	r0, r7, #1
 8008e52:	d1d6      	bne.n	8008e02 <_vfiprintf_r+0x19a>
 8008e54:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8008e56:	07d9      	lsls	r1, r3, #31
 8008e58:	d405      	bmi.n	8008e66 <_vfiprintf_r+0x1fe>
 8008e5a:	89ab      	ldrh	r3, [r5, #12]
 8008e5c:	059a      	lsls	r2, r3, #22
 8008e5e:	d402      	bmi.n	8008e66 <_vfiprintf_r+0x1fe>
 8008e60:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8008e62:	f7fe f929 	bl	80070b8 <__retarget_lock_release_recursive>
 8008e66:	89ab      	ldrh	r3, [r5, #12]
 8008e68:	065b      	lsls	r3, r3, #25
 8008e6a:	f53f af1f 	bmi.w	8008cac <_vfiprintf_r+0x44>
 8008e6e:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8008e70:	e71e      	b.n	8008cb0 <_vfiprintf_r+0x48>
 8008e72:	ab03      	add	r3, sp, #12
 8008e74:	9300      	str	r3, [sp, #0]
 8008e76:	462a      	mov	r2, r5
 8008e78:	4b05      	ldr	r3, [pc, #20]	@ (8008e90 <_vfiprintf_r+0x228>)
 8008e7a:	a904      	add	r1, sp, #16
 8008e7c:	4630      	mov	r0, r6
 8008e7e:	f7fd fe31 	bl	8006ae4 <_printf_i>
 8008e82:	e7e4      	b.n	8008e4e <_vfiprintf_r+0x1e6>
 8008e84:	0800a568 	.word	0x0800a568
 8008e88:	0800a572 	.word	0x0800a572
 8008e8c:	080065b5 	.word	0x080065b5
 8008e90:	08008c45 	.word	0x08008c45
 8008e94:	0800a56e 	.word	0x0800a56e

08008e98 <__swbuf_r>:
 8008e98:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008e9a:	460e      	mov	r6, r1
 8008e9c:	4614      	mov	r4, r2
 8008e9e:	4605      	mov	r5, r0
 8008ea0:	b118      	cbz	r0, 8008eaa <__swbuf_r+0x12>
 8008ea2:	6a03      	ldr	r3, [r0, #32]
 8008ea4:	b90b      	cbnz	r3, 8008eaa <__swbuf_r+0x12>
 8008ea6:	f7fd ffc9 	bl	8006e3c <__sinit>
 8008eaa:	69a3      	ldr	r3, [r4, #24]
 8008eac:	60a3      	str	r3, [r4, #8]
 8008eae:	89a3      	ldrh	r3, [r4, #12]
 8008eb0:	071a      	lsls	r2, r3, #28
 8008eb2:	d501      	bpl.n	8008eb8 <__swbuf_r+0x20>
 8008eb4:	6923      	ldr	r3, [r4, #16]
 8008eb6:	b943      	cbnz	r3, 8008eca <__swbuf_r+0x32>
 8008eb8:	4621      	mov	r1, r4
 8008eba:	4628      	mov	r0, r5
 8008ebc:	f000 f82a 	bl	8008f14 <__swsetup_r>
 8008ec0:	b118      	cbz	r0, 8008eca <__swbuf_r+0x32>
 8008ec2:	f04f 37ff 	mov.w	r7, #4294967295
 8008ec6:	4638      	mov	r0, r7
 8008ec8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8008eca:	6823      	ldr	r3, [r4, #0]
 8008ecc:	6922      	ldr	r2, [r4, #16]
 8008ece:	1a98      	subs	r0, r3, r2
 8008ed0:	6963      	ldr	r3, [r4, #20]
 8008ed2:	b2f6      	uxtb	r6, r6
 8008ed4:	4283      	cmp	r3, r0
 8008ed6:	4637      	mov	r7, r6
 8008ed8:	dc05      	bgt.n	8008ee6 <__swbuf_r+0x4e>
 8008eda:	4621      	mov	r1, r4
 8008edc:	4628      	mov	r0, r5
 8008ede:	f7ff fd99 	bl	8008a14 <_fflush_r>
 8008ee2:	2800      	cmp	r0, #0
 8008ee4:	d1ed      	bne.n	8008ec2 <__swbuf_r+0x2a>
 8008ee6:	68a3      	ldr	r3, [r4, #8]
 8008ee8:	3b01      	subs	r3, #1
 8008eea:	60a3      	str	r3, [r4, #8]
 8008eec:	6823      	ldr	r3, [r4, #0]
 8008eee:	1c5a      	adds	r2, r3, #1
 8008ef0:	6022      	str	r2, [r4, #0]
 8008ef2:	701e      	strb	r6, [r3, #0]
 8008ef4:	6962      	ldr	r2, [r4, #20]
 8008ef6:	1c43      	adds	r3, r0, #1
 8008ef8:	429a      	cmp	r2, r3
 8008efa:	d004      	beq.n	8008f06 <__swbuf_r+0x6e>
 8008efc:	89a3      	ldrh	r3, [r4, #12]
 8008efe:	07db      	lsls	r3, r3, #31
 8008f00:	d5e1      	bpl.n	8008ec6 <__swbuf_r+0x2e>
 8008f02:	2e0a      	cmp	r6, #10
 8008f04:	d1df      	bne.n	8008ec6 <__swbuf_r+0x2e>
 8008f06:	4621      	mov	r1, r4
 8008f08:	4628      	mov	r0, r5
 8008f0a:	f7ff fd83 	bl	8008a14 <_fflush_r>
 8008f0e:	2800      	cmp	r0, #0
 8008f10:	d0d9      	beq.n	8008ec6 <__swbuf_r+0x2e>
 8008f12:	e7d6      	b.n	8008ec2 <__swbuf_r+0x2a>

08008f14 <__swsetup_r>:
 8008f14:	b538      	push	{r3, r4, r5, lr}
 8008f16:	4b29      	ldr	r3, [pc, #164]	@ (8008fbc <__swsetup_r+0xa8>)
 8008f18:	4605      	mov	r5, r0
 8008f1a:	6818      	ldr	r0, [r3, #0]
 8008f1c:	460c      	mov	r4, r1
 8008f1e:	b118      	cbz	r0, 8008f28 <__swsetup_r+0x14>
 8008f20:	6a03      	ldr	r3, [r0, #32]
 8008f22:	b90b      	cbnz	r3, 8008f28 <__swsetup_r+0x14>
 8008f24:	f7fd ff8a 	bl	8006e3c <__sinit>
 8008f28:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8008f2c:	0719      	lsls	r1, r3, #28
 8008f2e:	d422      	bmi.n	8008f76 <__swsetup_r+0x62>
 8008f30:	06da      	lsls	r2, r3, #27
 8008f32:	d407      	bmi.n	8008f44 <__swsetup_r+0x30>
 8008f34:	2209      	movs	r2, #9
 8008f36:	602a      	str	r2, [r5, #0]
 8008f38:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8008f3c:	81a3      	strh	r3, [r4, #12]
 8008f3e:	f04f 30ff 	mov.w	r0, #4294967295
 8008f42:	e033      	b.n	8008fac <__swsetup_r+0x98>
 8008f44:	0758      	lsls	r0, r3, #29
 8008f46:	d512      	bpl.n	8008f6e <__swsetup_r+0x5a>
 8008f48:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8008f4a:	b141      	cbz	r1, 8008f5e <__swsetup_r+0x4a>
 8008f4c:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8008f50:	4299      	cmp	r1, r3
 8008f52:	d002      	beq.n	8008f5a <__swsetup_r+0x46>
 8008f54:	4628      	mov	r0, r5
 8008f56:	f7fe feff 	bl	8007d58 <_free_r>
 8008f5a:	2300      	movs	r3, #0
 8008f5c:	6363      	str	r3, [r4, #52]	@ 0x34
 8008f5e:	89a3      	ldrh	r3, [r4, #12]
 8008f60:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 8008f64:	81a3      	strh	r3, [r4, #12]
 8008f66:	2300      	movs	r3, #0
 8008f68:	6063      	str	r3, [r4, #4]
 8008f6a:	6923      	ldr	r3, [r4, #16]
 8008f6c:	6023      	str	r3, [r4, #0]
 8008f6e:	89a3      	ldrh	r3, [r4, #12]
 8008f70:	f043 0308 	orr.w	r3, r3, #8
 8008f74:	81a3      	strh	r3, [r4, #12]
 8008f76:	6923      	ldr	r3, [r4, #16]
 8008f78:	b94b      	cbnz	r3, 8008f8e <__swsetup_r+0x7a>
 8008f7a:	89a3      	ldrh	r3, [r4, #12]
 8008f7c:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 8008f80:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8008f84:	d003      	beq.n	8008f8e <__swsetup_r+0x7a>
 8008f86:	4621      	mov	r1, r4
 8008f88:	4628      	mov	r0, r5
 8008f8a:	f000 f883 	bl	8009094 <__smakebuf_r>
 8008f8e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8008f92:	f013 0201 	ands.w	r2, r3, #1
 8008f96:	d00a      	beq.n	8008fae <__swsetup_r+0x9a>
 8008f98:	2200      	movs	r2, #0
 8008f9a:	60a2      	str	r2, [r4, #8]
 8008f9c:	6962      	ldr	r2, [r4, #20]
 8008f9e:	4252      	negs	r2, r2
 8008fa0:	61a2      	str	r2, [r4, #24]
 8008fa2:	6922      	ldr	r2, [r4, #16]
 8008fa4:	b942      	cbnz	r2, 8008fb8 <__swsetup_r+0xa4>
 8008fa6:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 8008faa:	d1c5      	bne.n	8008f38 <__swsetup_r+0x24>
 8008fac:	bd38      	pop	{r3, r4, r5, pc}
 8008fae:	0799      	lsls	r1, r3, #30
 8008fb0:	bf58      	it	pl
 8008fb2:	6962      	ldrpl	r2, [r4, #20]
 8008fb4:	60a2      	str	r2, [r4, #8]
 8008fb6:	e7f4      	b.n	8008fa2 <__swsetup_r+0x8e>
 8008fb8:	2000      	movs	r0, #0
 8008fba:	e7f7      	b.n	8008fac <__swsetup_r+0x98>
 8008fbc:	20000018 	.word	0x20000018

08008fc0 <_raise_r>:
 8008fc0:	291f      	cmp	r1, #31
 8008fc2:	b538      	push	{r3, r4, r5, lr}
 8008fc4:	4605      	mov	r5, r0
 8008fc6:	460c      	mov	r4, r1
 8008fc8:	d904      	bls.n	8008fd4 <_raise_r+0x14>
 8008fca:	2316      	movs	r3, #22
 8008fcc:	6003      	str	r3, [r0, #0]
 8008fce:	f04f 30ff 	mov.w	r0, #4294967295
 8008fd2:	bd38      	pop	{r3, r4, r5, pc}
 8008fd4:	6bc2      	ldr	r2, [r0, #60]	@ 0x3c
 8008fd6:	b112      	cbz	r2, 8008fde <_raise_r+0x1e>
 8008fd8:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8008fdc:	b94b      	cbnz	r3, 8008ff2 <_raise_r+0x32>
 8008fde:	4628      	mov	r0, r5
 8008fe0:	f000 f830 	bl	8009044 <_getpid_r>
 8008fe4:	4622      	mov	r2, r4
 8008fe6:	4601      	mov	r1, r0
 8008fe8:	4628      	mov	r0, r5
 8008fea:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8008fee:	f000 b817 	b.w	8009020 <_kill_r>
 8008ff2:	2b01      	cmp	r3, #1
 8008ff4:	d00a      	beq.n	800900c <_raise_r+0x4c>
 8008ff6:	1c59      	adds	r1, r3, #1
 8008ff8:	d103      	bne.n	8009002 <_raise_r+0x42>
 8008ffa:	2316      	movs	r3, #22
 8008ffc:	6003      	str	r3, [r0, #0]
 8008ffe:	2001      	movs	r0, #1
 8009000:	e7e7      	b.n	8008fd2 <_raise_r+0x12>
 8009002:	2100      	movs	r1, #0
 8009004:	f842 1024 	str.w	r1, [r2, r4, lsl #2]
 8009008:	4620      	mov	r0, r4
 800900a:	4798      	blx	r3
 800900c:	2000      	movs	r0, #0
 800900e:	e7e0      	b.n	8008fd2 <_raise_r+0x12>

08009010 <raise>:
 8009010:	4b02      	ldr	r3, [pc, #8]	@ (800901c <raise+0xc>)
 8009012:	4601      	mov	r1, r0
 8009014:	6818      	ldr	r0, [r3, #0]
 8009016:	f7ff bfd3 	b.w	8008fc0 <_raise_r>
 800901a:	bf00      	nop
 800901c:	20000018 	.word	0x20000018

08009020 <_kill_r>:
 8009020:	b538      	push	{r3, r4, r5, lr}
 8009022:	4d07      	ldr	r5, [pc, #28]	@ (8009040 <_kill_r+0x20>)
 8009024:	2300      	movs	r3, #0
 8009026:	4604      	mov	r4, r0
 8009028:	4608      	mov	r0, r1
 800902a:	4611      	mov	r1, r2
 800902c:	602b      	str	r3, [r5, #0]
 800902e:	f7f8 ff5f 	bl	8001ef0 <_kill>
 8009032:	1c43      	adds	r3, r0, #1
 8009034:	d102      	bne.n	800903c <_kill_r+0x1c>
 8009036:	682b      	ldr	r3, [r5, #0]
 8009038:	b103      	cbz	r3, 800903c <_kill_r+0x1c>
 800903a:	6023      	str	r3, [r4, #0]
 800903c:	bd38      	pop	{r3, r4, r5, pc}
 800903e:	bf00      	nop
 8009040:	20000740 	.word	0x20000740

08009044 <_getpid_r>:
 8009044:	f7f8 bf4c 	b.w	8001ee0 <_getpid>

08009048 <__swhatbuf_r>:
 8009048:	b570      	push	{r4, r5, r6, lr}
 800904a:	460c      	mov	r4, r1
 800904c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8009050:	2900      	cmp	r1, #0
 8009052:	b096      	sub	sp, #88	@ 0x58
 8009054:	4615      	mov	r5, r2
 8009056:	461e      	mov	r6, r3
 8009058:	da0d      	bge.n	8009076 <__swhatbuf_r+0x2e>
 800905a:	89a3      	ldrh	r3, [r4, #12]
 800905c:	f013 0f80 	tst.w	r3, #128	@ 0x80
 8009060:	f04f 0100 	mov.w	r1, #0
 8009064:	bf14      	ite	ne
 8009066:	2340      	movne	r3, #64	@ 0x40
 8009068:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 800906c:	2000      	movs	r0, #0
 800906e:	6031      	str	r1, [r6, #0]
 8009070:	602b      	str	r3, [r5, #0]
 8009072:	b016      	add	sp, #88	@ 0x58
 8009074:	bd70      	pop	{r4, r5, r6, pc}
 8009076:	466a      	mov	r2, sp
 8009078:	f000 f848 	bl	800910c <_fstat_r>
 800907c:	2800      	cmp	r0, #0
 800907e:	dbec      	blt.n	800905a <__swhatbuf_r+0x12>
 8009080:	9901      	ldr	r1, [sp, #4]
 8009082:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 8009086:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 800908a:	4259      	negs	r1, r3
 800908c:	4159      	adcs	r1, r3
 800908e:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8009092:	e7eb      	b.n	800906c <__swhatbuf_r+0x24>

08009094 <__smakebuf_r>:
 8009094:	898b      	ldrh	r3, [r1, #12]
 8009096:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8009098:	079d      	lsls	r5, r3, #30
 800909a:	4606      	mov	r6, r0
 800909c:	460c      	mov	r4, r1
 800909e:	d507      	bpl.n	80090b0 <__smakebuf_r+0x1c>
 80090a0:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 80090a4:	6023      	str	r3, [r4, #0]
 80090a6:	6123      	str	r3, [r4, #16]
 80090a8:	2301      	movs	r3, #1
 80090aa:	6163      	str	r3, [r4, #20]
 80090ac:	b003      	add	sp, #12
 80090ae:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80090b0:	ab01      	add	r3, sp, #4
 80090b2:	466a      	mov	r2, sp
 80090b4:	f7ff ffc8 	bl	8009048 <__swhatbuf_r>
 80090b8:	9f00      	ldr	r7, [sp, #0]
 80090ba:	4605      	mov	r5, r0
 80090bc:	4639      	mov	r1, r7
 80090be:	4630      	mov	r0, r6
 80090c0:	f7fe febe 	bl	8007e40 <_malloc_r>
 80090c4:	b948      	cbnz	r0, 80090da <__smakebuf_r+0x46>
 80090c6:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80090ca:	059a      	lsls	r2, r3, #22
 80090cc:	d4ee      	bmi.n	80090ac <__smakebuf_r+0x18>
 80090ce:	f023 0303 	bic.w	r3, r3, #3
 80090d2:	f043 0302 	orr.w	r3, r3, #2
 80090d6:	81a3      	strh	r3, [r4, #12]
 80090d8:	e7e2      	b.n	80090a0 <__smakebuf_r+0xc>
 80090da:	89a3      	ldrh	r3, [r4, #12]
 80090dc:	6020      	str	r0, [r4, #0]
 80090de:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80090e2:	81a3      	strh	r3, [r4, #12]
 80090e4:	9b01      	ldr	r3, [sp, #4]
 80090e6:	e9c4 0704 	strd	r0, r7, [r4, #16]
 80090ea:	b15b      	cbz	r3, 8009104 <__smakebuf_r+0x70>
 80090ec:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80090f0:	4630      	mov	r0, r6
 80090f2:	f000 f81d 	bl	8009130 <_isatty_r>
 80090f6:	b128      	cbz	r0, 8009104 <__smakebuf_r+0x70>
 80090f8:	89a3      	ldrh	r3, [r4, #12]
 80090fa:	f023 0303 	bic.w	r3, r3, #3
 80090fe:	f043 0301 	orr.w	r3, r3, #1
 8009102:	81a3      	strh	r3, [r4, #12]
 8009104:	89a3      	ldrh	r3, [r4, #12]
 8009106:	431d      	orrs	r5, r3
 8009108:	81a5      	strh	r5, [r4, #12]
 800910a:	e7cf      	b.n	80090ac <__smakebuf_r+0x18>

0800910c <_fstat_r>:
 800910c:	b538      	push	{r3, r4, r5, lr}
 800910e:	4d07      	ldr	r5, [pc, #28]	@ (800912c <_fstat_r+0x20>)
 8009110:	2300      	movs	r3, #0
 8009112:	4604      	mov	r4, r0
 8009114:	4608      	mov	r0, r1
 8009116:	4611      	mov	r1, r2
 8009118:	602b      	str	r3, [r5, #0]
 800911a:	f7f8 ff49 	bl	8001fb0 <_fstat>
 800911e:	1c43      	adds	r3, r0, #1
 8009120:	d102      	bne.n	8009128 <_fstat_r+0x1c>
 8009122:	682b      	ldr	r3, [r5, #0]
 8009124:	b103      	cbz	r3, 8009128 <_fstat_r+0x1c>
 8009126:	6023      	str	r3, [r4, #0]
 8009128:	bd38      	pop	{r3, r4, r5, pc}
 800912a:	bf00      	nop
 800912c:	20000740 	.word	0x20000740

08009130 <_isatty_r>:
 8009130:	b538      	push	{r3, r4, r5, lr}
 8009132:	4d06      	ldr	r5, [pc, #24]	@ (800914c <_isatty_r+0x1c>)
 8009134:	2300      	movs	r3, #0
 8009136:	4604      	mov	r4, r0
 8009138:	4608      	mov	r0, r1
 800913a:	602b      	str	r3, [r5, #0]
 800913c:	f7f8 ff48 	bl	8001fd0 <_isatty>
 8009140:	1c43      	adds	r3, r0, #1
 8009142:	d102      	bne.n	800914a <_isatty_r+0x1a>
 8009144:	682b      	ldr	r3, [r5, #0]
 8009146:	b103      	cbz	r3, 800914a <_isatty_r+0x1a>
 8009148:	6023      	str	r3, [r4, #0]
 800914a:	bd38      	pop	{r3, r4, r5, pc}
 800914c:	20000740 	.word	0x20000740

08009150 <cos>:
 8009150:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8009152:	ec53 2b10 	vmov	r2, r3, d0
 8009156:	4826      	ldr	r0, [pc, #152]	@ (80091f0 <cos+0xa0>)
 8009158:	f023 4100 	bic.w	r1, r3, #2147483648	@ 0x80000000
 800915c:	4281      	cmp	r1, r0
 800915e:	d806      	bhi.n	800916e <cos+0x1e>
 8009160:	ed9f 1b21 	vldr	d1, [pc, #132]	@ 80091e8 <cos+0x98>
 8009164:	b005      	add	sp, #20
 8009166:	f85d eb04 	ldr.w	lr, [sp], #4
 800916a:	f000 b899 	b.w	80092a0 <__kernel_cos>
 800916e:	4821      	ldr	r0, [pc, #132]	@ (80091f4 <cos+0xa4>)
 8009170:	4281      	cmp	r1, r0
 8009172:	d908      	bls.n	8009186 <cos+0x36>
 8009174:	4610      	mov	r0, r2
 8009176:	4619      	mov	r1, r3
 8009178:	f7f7 f8a6 	bl	80002c8 <__aeabi_dsub>
 800917c:	ec41 0b10 	vmov	d0, r0, r1
 8009180:	b005      	add	sp, #20
 8009182:	f85d fb04 	ldr.w	pc, [sp], #4
 8009186:	4668      	mov	r0, sp
 8009188:	f000 fa0e 	bl	80095a8 <__ieee754_rem_pio2>
 800918c:	f000 0003 	and.w	r0, r0, #3
 8009190:	2801      	cmp	r0, #1
 8009192:	d00b      	beq.n	80091ac <cos+0x5c>
 8009194:	2802      	cmp	r0, #2
 8009196:	d015      	beq.n	80091c4 <cos+0x74>
 8009198:	b9d8      	cbnz	r0, 80091d2 <cos+0x82>
 800919a:	ed9d 1b02 	vldr	d1, [sp, #8]
 800919e:	ed9d 0b00 	vldr	d0, [sp]
 80091a2:	f000 f87d 	bl	80092a0 <__kernel_cos>
 80091a6:	ec51 0b10 	vmov	r0, r1, d0
 80091aa:	e7e7      	b.n	800917c <cos+0x2c>
 80091ac:	ed9d 1b02 	vldr	d1, [sp, #8]
 80091b0:	ed9d 0b00 	vldr	d0, [sp]
 80091b4:	f000 f93c 	bl	8009430 <__kernel_sin>
 80091b8:	ec53 2b10 	vmov	r2, r3, d0
 80091bc:	4610      	mov	r0, r2
 80091be:	f103 4100 	add.w	r1, r3, #2147483648	@ 0x80000000
 80091c2:	e7db      	b.n	800917c <cos+0x2c>
 80091c4:	ed9d 1b02 	vldr	d1, [sp, #8]
 80091c8:	ed9d 0b00 	vldr	d0, [sp]
 80091cc:	f000 f868 	bl	80092a0 <__kernel_cos>
 80091d0:	e7f2      	b.n	80091b8 <cos+0x68>
 80091d2:	ed9d 1b02 	vldr	d1, [sp, #8]
 80091d6:	ed9d 0b00 	vldr	d0, [sp]
 80091da:	2001      	movs	r0, #1
 80091dc:	f000 f928 	bl	8009430 <__kernel_sin>
 80091e0:	e7e1      	b.n	80091a6 <cos+0x56>
 80091e2:	bf00      	nop
 80091e4:	f3af 8000 	nop.w
	...
 80091f0:	3fe921fb 	.word	0x3fe921fb
 80091f4:	7fefffff 	.word	0x7fefffff

080091f8 <sin>:
 80091f8:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 80091fa:	ec53 2b10 	vmov	r2, r3, d0
 80091fe:	4826      	ldr	r0, [pc, #152]	@ (8009298 <sin+0xa0>)
 8009200:	f023 4100 	bic.w	r1, r3, #2147483648	@ 0x80000000
 8009204:	4281      	cmp	r1, r0
 8009206:	d807      	bhi.n	8009218 <sin+0x20>
 8009208:	ed9f 1b21 	vldr	d1, [pc, #132]	@ 8009290 <sin+0x98>
 800920c:	2000      	movs	r0, #0
 800920e:	b005      	add	sp, #20
 8009210:	f85d eb04 	ldr.w	lr, [sp], #4
 8009214:	f000 b90c 	b.w	8009430 <__kernel_sin>
 8009218:	4820      	ldr	r0, [pc, #128]	@ (800929c <sin+0xa4>)
 800921a:	4281      	cmp	r1, r0
 800921c:	d908      	bls.n	8009230 <sin+0x38>
 800921e:	4610      	mov	r0, r2
 8009220:	4619      	mov	r1, r3
 8009222:	f7f7 f851 	bl	80002c8 <__aeabi_dsub>
 8009226:	ec41 0b10 	vmov	d0, r0, r1
 800922a:	b005      	add	sp, #20
 800922c:	f85d fb04 	ldr.w	pc, [sp], #4
 8009230:	4668      	mov	r0, sp
 8009232:	f000 f9b9 	bl	80095a8 <__ieee754_rem_pio2>
 8009236:	f000 0003 	and.w	r0, r0, #3
 800923a:	2801      	cmp	r0, #1
 800923c:	d00c      	beq.n	8009258 <sin+0x60>
 800923e:	2802      	cmp	r0, #2
 8009240:	d011      	beq.n	8009266 <sin+0x6e>
 8009242:	b9e8      	cbnz	r0, 8009280 <sin+0x88>
 8009244:	ed9d 1b02 	vldr	d1, [sp, #8]
 8009248:	ed9d 0b00 	vldr	d0, [sp]
 800924c:	2001      	movs	r0, #1
 800924e:	f000 f8ef 	bl	8009430 <__kernel_sin>
 8009252:	ec51 0b10 	vmov	r0, r1, d0
 8009256:	e7e6      	b.n	8009226 <sin+0x2e>
 8009258:	ed9d 1b02 	vldr	d1, [sp, #8]
 800925c:	ed9d 0b00 	vldr	d0, [sp]
 8009260:	f000 f81e 	bl	80092a0 <__kernel_cos>
 8009264:	e7f5      	b.n	8009252 <sin+0x5a>
 8009266:	ed9d 1b02 	vldr	d1, [sp, #8]
 800926a:	ed9d 0b00 	vldr	d0, [sp]
 800926e:	2001      	movs	r0, #1
 8009270:	f000 f8de 	bl	8009430 <__kernel_sin>
 8009274:	ec53 2b10 	vmov	r2, r3, d0
 8009278:	4610      	mov	r0, r2
 800927a:	f103 4100 	add.w	r1, r3, #2147483648	@ 0x80000000
 800927e:	e7d2      	b.n	8009226 <sin+0x2e>
 8009280:	ed9d 1b02 	vldr	d1, [sp, #8]
 8009284:	ed9d 0b00 	vldr	d0, [sp]
 8009288:	f000 f80a 	bl	80092a0 <__kernel_cos>
 800928c:	e7f2      	b.n	8009274 <sin+0x7c>
 800928e:	bf00      	nop
	...
 8009298:	3fe921fb 	.word	0x3fe921fb
 800929c:	7fefffff 	.word	0x7fefffff

080092a0 <__kernel_cos>:
 80092a0:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80092a4:	ec57 6b10 	vmov	r6, r7, d0
 80092a8:	f027 4800 	bic.w	r8, r7, #2147483648	@ 0x80000000
 80092ac:	f1b8 5f79 	cmp.w	r8, #1044381696	@ 0x3e400000
 80092b0:	ed8d 1b00 	vstr	d1, [sp]
 80092b4:	d206      	bcs.n	80092c4 <__kernel_cos+0x24>
 80092b6:	4630      	mov	r0, r6
 80092b8:	4639      	mov	r1, r7
 80092ba:	f7f7 fc6d 	bl	8000b98 <__aeabi_d2iz>
 80092be:	2800      	cmp	r0, #0
 80092c0:	f000 8088 	beq.w	80093d4 <__kernel_cos+0x134>
 80092c4:	4632      	mov	r2, r6
 80092c6:	463b      	mov	r3, r7
 80092c8:	4630      	mov	r0, r6
 80092ca:	4639      	mov	r1, r7
 80092cc:	f7f7 f9b4 	bl	8000638 <__aeabi_dmul>
 80092d0:	4b51      	ldr	r3, [pc, #324]	@ (8009418 <__kernel_cos+0x178>)
 80092d2:	2200      	movs	r2, #0
 80092d4:	4604      	mov	r4, r0
 80092d6:	460d      	mov	r5, r1
 80092d8:	f7f7 f9ae 	bl	8000638 <__aeabi_dmul>
 80092dc:	a340      	add	r3, pc, #256	@ (adr r3, 80093e0 <__kernel_cos+0x140>)
 80092de:	e9d3 2300 	ldrd	r2, r3, [r3]
 80092e2:	4682      	mov	sl, r0
 80092e4:	468b      	mov	fp, r1
 80092e6:	4620      	mov	r0, r4
 80092e8:	4629      	mov	r1, r5
 80092ea:	f7f7 f9a5 	bl	8000638 <__aeabi_dmul>
 80092ee:	a33e      	add	r3, pc, #248	@ (adr r3, 80093e8 <__kernel_cos+0x148>)
 80092f0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80092f4:	f7f6 ffea 	bl	80002cc <__adddf3>
 80092f8:	4622      	mov	r2, r4
 80092fa:	462b      	mov	r3, r5
 80092fc:	f7f7 f99c 	bl	8000638 <__aeabi_dmul>
 8009300:	a33b      	add	r3, pc, #236	@ (adr r3, 80093f0 <__kernel_cos+0x150>)
 8009302:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009306:	f7f6 ffdf 	bl	80002c8 <__aeabi_dsub>
 800930a:	4622      	mov	r2, r4
 800930c:	462b      	mov	r3, r5
 800930e:	f7f7 f993 	bl	8000638 <__aeabi_dmul>
 8009312:	a339      	add	r3, pc, #228	@ (adr r3, 80093f8 <__kernel_cos+0x158>)
 8009314:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009318:	f7f6 ffd8 	bl	80002cc <__adddf3>
 800931c:	4622      	mov	r2, r4
 800931e:	462b      	mov	r3, r5
 8009320:	f7f7 f98a 	bl	8000638 <__aeabi_dmul>
 8009324:	a336      	add	r3, pc, #216	@ (adr r3, 8009400 <__kernel_cos+0x160>)
 8009326:	e9d3 2300 	ldrd	r2, r3, [r3]
 800932a:	f7f6 ffcd 	bl	80002c8 <__aeabi_dsub>
 800932e:	4622      	mov	r2, r4
 8009330:	462b      	mov	r3, r5
 8009332:	f7f7 f981 	bl	8000638 <__aeabi_dmul>
 8009336:	a334      	add	r3, pc, #208	@ (adr r3, 8009408 <__kernel_cos+0x168>)
 8009338:	e9d3 2300 	ldrd	r2, r3, [r3]
 800933c:	f7f6 ffc6 	bl	80002cc <__adddf3>
 8009340:	4622      	mov	r2, r4
 8009342:	462b      	mov	r3, r5
 8009344:	f7f7 f978 	bl	8000638 <__aeabi_dmul>
 8009348:	4622      	mov	r2, r4
 800934a:	462b      	mov	r3, r5
 800934c:	f7f7 f974 	bl	8000638 <__aeabi_dmul>
 8009350:	e9dd 2300 	ldrd	r2, r3, [sp]
 8009354:	4604      	mov	r4, r0
 8009356:	460d      	mov	r5, r1
 8009358:	4630      	mov	r0, r6
 800935a:	4639      	mov	r1, r7
 800935c:	f7f7 f96c 	bl	8000638 <__aeabi_dmul>
 8009360:	460b      	mov	r3, r1
 8009362:	4602      	mov	r2, r0
 8009364:	4629      	mov	r1, r5
 8009366:	4620      	mov	r0, r4
 8009368:	f7f6 ffae 	bl	80002c8 <__aeabi_dsub>
 800936c:	4b2b      	ldr	r3, [pc, #172]	@ (800941c <__kernel_cos+0x17c>)
 800936e:	4598      	cmp	r8, r3
 8009370:	4606      	mov	r6, r0
 8009372:	460f      	mov	r7, r1
 8009374:	d810      	bhi.n	8009398 <__kernel_cos+0xf8>
 8009376:	4602      	mov	r2, r0
 8009378:	460b      	mov	r3, r1
 800937a:	4650      	mov	r0, sl
 800937c:	4659      	mov	r1, fp
 800937e:	f7f6 ffa3 	bl	80002c8 <__aeabi_dsub>
 8009382:	460b      	mov	r3, r1
 8009384:	4926      	ldr	r1, [pc, #152]	@ (8009420 <__kernel_cos+0x180>)
 8009386:	4602      	mov	r2, r0
 8009388:	2000      	movs	r0, #0
 800938a:	f7f6 ff9d 	bl	80002c8 <__aeabi_dsub>
 800938e:	ec41 0b10 	vmov	d0, r0, r1
 8009392:	b003      	add	sp, #12
 8009394:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009398:	4b22      	ldr	r3, [pc, #136]	@ (8009424 <__kernel_cos+0x184>)
 800939a:	4921      	ldr	r1, [pc, #132]	@ (8009420 <__kernel_cos+0x180>)
 800939c:	4598      	cmp	r8, r3
 800939e:	bf8c      	ite	hi
 80093a0:	4d21      	ldrhi	r5, [pc, #132]	@ (8009428 <__kernel_cos+0x188>)
 80093a2:	f5a8 1500 	subls.w	r5, r8, #2097152	@ 0x200000
 80093a6:	2400      	movs	r4, #0
 80093a8:	4622      	mov	r2, r4
 80093aa:	462b      	mov	r3, r5
 80093ac:	2000      	movs	r0, #0
 80093ae:	f7f6 ff8b 	bl	80002c8 <__aeabi_dsub>
 80093b2:	4622      	mov	r2, r4
 80093b4:	4680      	mov	r8, r0
 80093b6:	4689      	mov	r9, r1
 80093b8:	462b      	mov	r3, r5
 80093ba:	4650      	mov	r0, sl
 80093bc:	4659      	mov	r1, fp
 80093be:	f7f6 ff83 	bl	80002c8 <__aeabi_dsub>
 80093c2:	4632      	mov	r2, r6
 80093c4:	463b      	mov	r3, r7
 80093c6:	f7f6 ff7f 	bl	80002c8 <__aeabi_dsub>
 80093ca:	4602      	mov	r2, r0
 80093cc:	460b      	mov	r3, r1
 80093ce:	4640      	mov	r0, r8
 80093d0:	4649      	mov	r1, r9
 80093d2:	e7da      	b.n	800938a <__kernel_cos+0xea>
 80093d4:	ed9f 0b0e 	vldr	d0, [pc, #56]	@ 8009410 <__kernel_cos+0x170>
 80093d8:	e7db      	b.n	8009392 <__kernel_cos+0xf2>
 80093da:	bf00      	nop
 80093dc:	f3af 8000 	nop.w
 80093e0:	be8838d4 	.word	0xbe8838d4
 80093e4:	bda8fae9 	.word	0xbda8fae9
 80093e8:	bdb4b1c4 	.word	0xbdb4b1c4
 80093ec:	3e21ee9e 	.word	0x3e21ee9e
 80093f0:	809c52ad 	.word	0x809c52ad
 80093f4:	3e927e4f 	.word	0x3e927e4f
 80093f8:	19cb1590 	.word	0x19cb1590
 80093fc:	3efa01a0 	.word	0x3efa01a0
 8009400:	16c15177 	.word	0x16c15177
 8009404:	3f56c16c 	.word	0x3f56c16c
 8009408:	5555554c 	.word	0x5555554c
 800940c:	3fa55555 	.word	0x3fa55555
 8009410:	00000000 	.word	0x00000000
 8009414:	3ff00000 	.word	0x3ff00000
 8009418:	3fe00000 	.word	0x3fe00000
 800941c:	3fd33332 	.word	0x3fd33332
 8009420:	3ff00000 	.word	0x3ff00000
 8009424:	3fe90000 	.word	0x3fe90000
 8009428:	3fd20000 	.word	0x3fd20000
 800942c:	00000000 	.word	0x00000000

08009430 <__kernel_sin>:
 8009430:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009434:	ec55 4b10 	vmov	r4, r5, d0
 8009438:	f025 4300 	bic.w	r3, r5, #2147483648	@ 0x80000000
 800943c:	b085      	sub	sp, #20
 800943e:	f1b3 5f79 	cmp.w	r3, #1044381696	@ 0x3e400000
 8009442:	ed8d 1b02 	vstr	d1, [sp, #8]
 8009446:	4680      	mov	r8, r0
 8009448:	d205      	bcs.n	8009456 <__kernel_sin+0x26>
 800944a:	4620      	mov	r0, r4
 800944c:	4629      	mov	r1, r5
 800944e:	f7f7 fba3 	bl	8000b98 <__aeabi_d2iz>
 8009452:	2800      	cmp	r0, #0
 8009454:	d052      	beq.n	80094fc <__kernel_sin+0xcc>
 8009456:	4622      	mov	r2, r4
 8009458:	462b      	mov	r3, r5
 800945a:	4620      	mov	r0, r4
 800945c:	4629      	mov	r1, r5
 800945e:	f7f7 f8eb 	bl	8000638 <__aeabi_dmul>
 8009462:	4682      	mov	sl, r0
 8009464:	468b      	mov	fp, r1
 8009466:	4602      	mov	r2, r0
 8009468:	460b      	mov	r3, r1
 800946a:	4620      	mov	r0, r4
 800946c:	4629      	mov	r1, r5
 800946e:	f7f7 f8e3 	bl	8000638 <__aeabi_dmul>
 8009472:	a342      	add	r3, pc, #264	@ (adr r3, 800957c <__kernel_sin+0x14c>)
 8009474:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009478:	e9cd 0100 	strd	r0, r1, [sp]
 800947c:	4650      	mov	r0, sl
 800947e:	4659      	mov	r1, fp
 8009480:	f7f7 f8da 	bl	8000638 <__aeabi_dmul>
 8009484:	a33f      	add	r3, pc, #252	@ (adr r3, 8009584 <__kernel_sin+0x154>)
 8009486:	e9d3 2300 	ldrd	r2, r3, [r3]
 800948a:	f7f6 ff1d 	bl	80002c8 <__aeabi_dsub>
 800948e:	4652      	mov	r2, sl
 8009490:	465b      	mov	r3, fp
 8009492:	f7f7 f8d1 	bl	8000638 <__aeabi_dmul>
 8009496:	a33d      	add	r3, pc, #244	@ (adr r3, 800958c <__kernel_sin+0x15c>)
 8009498:	e9d3 2300 	ldrd	r2, r3, [r3]
 800949c:	f7f6 ff16 	bl	80002cc <__adddf3>
 80094a0:	4652      	mov	r2, sl
 80094a2:	465b      	mov	r3, fp
 80094a4:	f7f7 f8c8 	bl	8000638 <__aeabi_dmul>
 80094a8:	a33a      	add	r3, pc, #232	@ (adr r3, 8009594 <__kernel_sin+0x164>)
 80094aa:	e9d3 2300 	ldrd	r2, r3, [r3]
 80094ae:	f7f6 ff0b 	bl	80002c8 <__aeabi_dsub>
 80094b2:	4652      	mov	r2, sl
 80094b4:	465b      	mov	r3, fp
 80094b6:	f7f7 f8bf 	bl	8000638 <__aeabi_dmul>
 80094ba:	a338      	add	r3, pc, #224	@ (adr r3, 800959c <__kernel_sin+0x16c>)
 80094bc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80094c0:	f7f6 ff04 	bl	80002cc <__adddf3>
 80094c4:	4606      	mov	r6, r0
 80094c6:	460f      	mov	r7, r1
 80094c8:	f1b8 0f00 	cmp.w	r8, #0
 80094cc:	d11b      	bne.n	8009506 <__kernel_sin+0xd6>
 80094ce:	4602      	mov	r2, r0
 80094d0:	460b      	mov	r3, r1
 80094d2:	4650      	mov	r0, sl
 80094d4:	4659      	mov	r1, fp
 80094d6:	f7f7 f8af 	bl	8000638 <__aeabi_dmul>
 80094da:	a325      	add	r3, pc, #148	@ (adr r3, 8009570 <__kernel_sin+0x140>)
 80094dc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80094e0:	f7f6 fef2 	bl	80002c8 <__aeabi_dsub>
 80094e4:	e9dd 2300 	ldrd	r2, r3, [sp]
 80094e8:	f7f7 f8a6 	bl	8000638 <__aeabi_dmul>
 80094ec:	4602      	mov	r2, r0
 80094ee:	460b      	mov	r3, r1
 80094f0:	4620      	mov	r0, r4
 80094f2:	4629      	mov	r1, r5
 80094f4:	f7f6 feea 	bl	80002cc <__adddf3>
 80094f8:	4604      	mov	r4, r0
 80094fa:	460d      	mov	r5, r1
 80094fc:	ec45 4b10 	vmov	d0, r4, r5
 8009500:	b005      	add	sp, #20
 8009502:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009506:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800950a:	4b1b      	ldr	r3, [pc, #108]	@ (8009578 <__kernel_sin+0x148>)
 800950c:	2200      	movs	r2, #0
 800950e:	f7f7 f893 	bl	8000638 <__aeabi_dmul>
 8009512:	4632      	mov	r2, r6
 8009514:	4680      	mov	r8, r0
 8009516:	4689      	mov	r9, r1
 8009518:	463b      	mov	r3, r7
 800951a:	e9dd 0100 	ldrd	r0, r1, [sp]
 800951e:	f7f7 f88b 	bl	8000638 <__aeabi_dmul>
 8009522:	4602      	mov	r2, r0
 8009524:	460b      	mov	r3, r1
 8009526:	4640      	mov	r0, r8
 8009528:	4649      	mov	r1, r9
 800952a:	f7f6 fecd 	bl	80002c8 <__aeabi_dsub>
 800952e:	4652      	mov	r2, sl
 8009530:	465b      	mov	r3, fp
 8009532:	f7f7 f881 	bl	8000638 <__aeabi_dmul>
 8009536:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800953a:	f7f6 fec5 	bl	80002c8 <__aeabi_dsub>
 800953e:	a30c      	add	r3, pc, #48	@ (adr r3, 8009570 <__kernel_sin+0x140>)
 8009540:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009544:	4606      	mov	r6, r0
 8009546:	460f      	mov	r7, r1
 8009548:	e9dd 0100 	ldrd	r0, r1, [sp]
 800954c:	f7f7 f874 	bl	8000638 <__aeabi_dmul>
 8009550:	4602      	mov	r2, r0
 8009552:	460b      	mov	r3, r1
 8009554:	4630      	mov	r0, r6
 8009556:	4639      	mov	r1, r7
 8009558:	f7f6 feb8 	bl	80002cc <__adddf3>
 800955c:	4602      	mov	r2, r0
 800955e:	460b      	mov	r3, r1
 8009560:	4620      	mov	r0, r4
 8009562:	4629      	mov	r1, r5
 8009564:	f7f6 feb0 	bl	80002c8 <__aeabi_dsub>
 8009568:	e7c6      	b.n	80094f8 <__kernel_sin+0xc8>
 800956a:	bf00      	nop
 800956c:	f3af 8000 	nop.w
 8009570:	55555549 	.word	0x55555549
 8009574:	3fc55555 	.word	0x3fc55555
 8009578:	3fe00000 	.word	0x3fe00000
 800957c:	5acfd57c 	.word	0x5acfd57c
 8009580:	3de5d93a 	.word	0x3de5d93a
 8009584:	8a2b9ceb 	.word	0x8a2b9ceb
 8009588:	3e5ae5e6 	.word	0x3e5ae5e6
 800958c:	57b1fe7d 	.word	0x57b1fe7d
 8009590:	3ec71de3 	.word	0x3ec71de3
 8009594:	19c161d5 	.word	0x19c161d5
 8009598:	3f2a01a0 	.word	0x3f2a01a0
 800959c:	1110f8a6 	.word	0x1110f8a6
 80095a0:	3f811111 	.word	0x3f811111
 80095a4:	00000000 	.word	0x00000000

080095a8 <__ieee754_rem_pio2>:
 80095a8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80095ac:	ec57 6b10 	vmov	r6, r7, d0
 80095b0:	4bc5      	ldr	r3, [pc, #788]	@ (80098c8 <__ieee754_rem_pio2+0x320>)
 80095b2:	b08d      	sub	sp, #52	@ 0x34
 80095b4:	f027 4800 	bic.w	r8, r7, #2147483648	@ 0x80000000
 80095b8:	4598      	cmp	r8, r3
 80095ba:	4604      	mov	r4, r0
 80095bc:	9704      	str	r7, [sp, #16]
 80095be:	d807      	bhi.n	80095d0 <__ieee754_rem_pio2+0x28>
 80095c0:	2200      	movs	r2, #0
 80095c2:	2300      	movs	r3, #0
 80095c4:	ed80 0b00 	vstr	d0, [r0]
 80095c8:	e9c0 2302 	strd	r2, r3, [r0, #8]
 80095cc:	2500      	movs	r5, #0
 80095ce:	e028      	b.n	8009622 <__ieee754_rem_pio2+0x7a>
 80095d0:	4bbe      	ldr	r3, [pc, #760]	@ (80098cc <__ieee754_rem_pio2+0x324>)
 80095d2:	4598      	cmp	r8, r3
 80095d4:	d878      	bhi.n	80096c8 <__ieee754_rem_pio2+0x120>
 80095d6:	9b04      	ldr	r3, [sp, #16]
 80095d8:	4dbd      	ldr	r5, [pc, #756]	@ (80098d0 <__ieee754_rem_pio2+0x328>)
 80095da:	2b00      	cmp	r3, #0
 80095dc:	4630      	mov	r0, r6
 80095de:	a3ac      	add	r3, pc, #688	@ (adr r3, 8009890 <__ieee754_rem_pio2+0x2e8>)
 80095e0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80095e4:	4639      	mov	r1, r7
 80095e6:	dd38      	ble.n	800965a <__ieee754_rem_pio2+0xb2>
 80095e8:	f7f6 fe6e 	bl	80002c8 <__aeabi_dsub>
 80095ec:	45a8      	cmp	r8, r5
 80095ee:	4606      	mov	r6, r0
 80095f0:	460f      	mov	r7, r1
 80095f2:	d01a      	beq.n	800962a <__ieee754_rem_pio2+0x82>
 80095f4:	a3a8      	add	r3, pc, #672	@ (adr r3, 8009898 <__ieee754_rem_pio2+0x2f0>)
 80095f6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80095fa:	f7f6 fe65 	bl	80002c8 <__aeabi_dsub>
 80095fe:	4602      	mov	r2, r0
 8009600:	460b      	mov	r3, r1
 8009602:	4680      	mov	r8, r0
 8009604:	4689      	mov	r9, r1
 8009606:	4630      	mov	r0, r6
 8009608:	4639      	mov	r1, r7
 800960a:	f7f6 fe5d 	bl	80002c8 <__aeabi_dsub>
 800960e:	a3a2      	add	r3, pc, #648	@ (adr r3, 8009898 <__ieee754_rem_pio2+0x2f0>)
 8009610:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009614:	f7f6 fe58 	bl	80002c8 <__aeabi_dsub>
 8009618:	e9c4 8900 	strd	r8, r9, [r4]
 800961c:	e9c4 0102 	strd	r0, r1, [r4, #8]
 8009620:	2501      	movs	r5, #1
 8009622:	4628      	mov	r0, r5
 8009624:	b00d      	add	sp, #52	@ 0x34
 8009626:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800962a:	a39d      	add	r3, pc, #628	@ (adr r3, 80098a0 <__ieee754_rem_pio2+0x2f8>)
 800962c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009630:	f7f6 fe4a 	bl	80002c8 <__aeabi_dsub>
 8009634:	a39c      	add	r3, pc, #624	@ (adr r3, 80098a8 <__ieee754_rem_pio2+0x300>)
 8009636:	e9d3 2300 	ldrd	r2, r3, [r3]
 800963a:	4606      	mov	r6, r0
 800963c:	460f      	mov	r7, r1
 800963e:	f7f6 fe43 	bl	80002c8 <__aeabi_dsub>
 8009642:	4602      	mov	r2, r0
 8009644:	460b      	mov	r3, r1
 8009646:	4680      	mov	r8, r0
 8009648:	4689      	mov	r9, r1
 800964a:	4630      	mov	r0, r6
 800964c:	4639      	mov	r1, r7
 800964e:	f7f6 fe3b 	bl	80002c8 <__aeabi_dsub>
 8009652:	a395      	add	r3, pc, #596	@ (adr r3, 80098a8 <__ieee754_rem_pio2+0x300>)
 8009654:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009658:	e7dc      	b.n	8009614 <__ieee754_rem_pio2+0x6c>
 800965a:	f7f6 fe37 	bl	80002cc <__adddf3>
 800965e:	45a8      	cmp	r8, r5
 8009660:	4606      	mov	r6, r0
 8009662:	460f      	mov	r7, r1
 8009664:	d018      	beq.n	8009698 <__ieee754_rem_pio2+0xf0>
 8009666:	a38c      	add	r3, pc, #560	@ (adr r3, 8009898 <__ieee754_rem_pio2+0x2f0>)
 8009668:	e9d3 2300 	ldrd	r2, r3, [r3]
 800966c:	f7f6 fe2e 	bl	80002cc <__adddf3>
 8009670:	4602      	mov	r2, r0
 8009672:	460b      	mov	r3, r1
 8009674:	4680      	mov	r8, r0
 8009676:	4689      	mov	r9, r1
 8009678:	4630      	mov	r0, r6
 800967a:	4639      	mov	r1, r7
 800967c:	f7f6 fe24 	bl	80002c8 <__aeabi_dsub>
 8009680:	a385      	add	r3, pc, #532	@ (adr r3, 8009898 <__ieee754_rem_pio2+0x2f0>)
 8009682:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009686:	f7f6 fe21 	bl	80002cc <__adddf3>
 800968a:	f04f 35ff 	mov.w	r5, #4294967295
 800968e:	e9c4 8900 	strd	r8, r9, [r4]
 8009692:	e9c4 0102 	strd	r0, r1, [r4, #8]
 8009696:	e7c4      	b.n	8009622 <__ieee754_rem_pio2+0x7a>
 8009698:	a381      	add	r3, pc, #516	@ (adr r3, 80098a0 <__ieee754_rem_pio2+0x2f8>)
 800969a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800969e:	f7f6 fe15 	bl	80002cc <__adddf3>
 80096a2:	a381      	add	r3, pc, #516	@ (adr r3, 80098a8 <__ieee754_rem_pio2+0x300>)
 80096a4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80096a8:	4606      	mov	r6, r0
 80096aa:	460f      	mov	r7, r1
 80096ac:	f7f6 fe0e 	bl	80002cc <__adddf3>
 80096b0:	4602      	mov	r2, r0
 80096b2:	460b      	mov	r3, r1
 80096b4:	4680      	mov	r8, r0
 80096b6:	4689      	mov	r9, r1
 80096b8:	4630      	mov	r0, r6
 80096ba:	4639      	mov	r1, r7
 80096bc:	f7f6 fe04 	bl	80002c8 <__aeabi_dsub>
 80096c0:	a379      	add	r3, pc, #484	@ (adr r3, 80098a8 <__ieee754_rem_pio2+0x300>)
 80096c2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80096c6:	e7de      	b.n	8009686 <__ieee754_rem_pio2+0xde>
 80096c8:	4b82      	ldr	r3, [pc, #520]	@ (80098d4 <__ieee754_rem_pio2+0x32c>)
 80096ca:	4598      	cmp	r8, r3
 80096cc:	f200 80d1 	bhi.w	8009872 <__ieee754_rem_pio2+0x2ca>
 80096d0:	f000 f966 	bl	80099a0 <fabs>
 80096d4:	ec57 6b10 	vmov	r6, r7, d0
 80096d8:	a375      	add	r3, pc, #468	@ (adr r3, 80098b0 <__ieee754_rem_pio2+0x308>)
 80096da:	e9d3 2300 	ldrd	r2, r3, [r3]
 80096de:	4630      	mov	r0, r6
 80096e0:	4639      	mov	r1, r7
 80096e2:	f7f6 ffa9 	bl	8000638 <__aeabi_dmul>
 80096e6:	4b7c      	ldr	r3, [pc, #496]	@ (80098d8 <__ieee754_rem_pio2+0x330>)
 80096e8:	2200      	movs	r2, #0
 80096ea:	f7f6 fdef 	bl	80002cc <__adddf3>
 80096ee:	f7f7 fa53 	bl	8000b98 <__aeabi_d2iz>
 80096f2:	4605      	mov	r5, r0
 80096f4:	f7f6 ff36 	bl	8000564 <__aeabi_i2d>
 80096f8:	4602      	mov	r2, r0
 80096fa:	460b      	mov	r3, r1
 80096fc:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8009700:	a363      	add	r3, pc, #396	@ (adr r3, 8009890 <__ieee754_rem_pio2+0x2e8>)
 8009702:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009706:	f7f6 ff97 	bl	8000638 <__aeabi_dmul>
 800970a:	4602      	mov	r2, r0
 800970c:	460b      	mov	r3, r1
 800970e:	4630      	mov	r0, r6
 8009710:	4639      	mov	r1, r7
 8009712:	f7f6 fdd9 	bl	80002c8 <__aeabi_dsub>
 8009716:	a360      	add	r3, pc, #384	@ (adr r3, 8009898 <__ieee754_rem_pio2+0x2f0>)
 8009718:	e9d3 2300 	ldrd	r2, r3, [r3]
 800971c:	4682      	mov	sl, r0
 800971e:	468b      	mov	fp, r1
 8009720:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8009724:	f7f6 ff88 	bl	8000638 <__aeabi_dmul>
 8009728:	2d1f      	cmp	r5, #31
 800972a:	4606      	mov	r6, r0
 800972c:	460f      	mov	r7, r1
 800972e:	dc0c      	bgt.n	800974a <__ieee754_rem_pio2+0x1a2>
 8009730:	4b6a      	ldr	r3, [pc, #424]	@ (80098dc <__ieee754_rem_pio2+0x334>)
 8009732:	1e6a      	subs	r2, r5, #1
 8009734:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8009738:	4543      	cmp	r3, r8
 800973a:	d006      	beq.n	800974a <__ieee754_rem_pio2+0x1a2>
 800973c:	4632      	mov	r2, r6
 800973e:	463b      	mov	r3, r7
 8009740:	4650      	mov	r0, sl
 8009742:	4659      	mov	r1, fp
 8009744:	f7f6 fdc0 	bl	80002c8 <__aeabi_dsub>
 8009748:	e00e      	b.n	8009768 <__ieee754_rem_pio2+0x1c0>
 800974a:	463b      	mov	r3, r7
 800974c:	4632      	mov	r2, r6
 800974e:	4650      	mov	r0, sl
 8009750:	4659      	mov	r1, fp
 8009752:	f7f6 fdb9 	bl	80002c8 <__aeabi_dsub>
 8009756:	ea4f 5328 	mov.w	r3, r8, asr #20
 800975a:	9305      	str	r3, [sp, #20]
 800975c:	f3c1 530a 	ubfx	r3, r1, #20, #11
 8009760:	ebc3 5318 	rsb	r3, r3, r8, lsr #20
 8009764:	2b10      	cmp	r3, #16
 8009766:	dc02      	bgt.n	800976e <__ieee754_rem_pio2+0x1c6>
 8009768:	e9c4 0100 	strd	r0, r1, [r4]
 800976c:	e039      	b.n	80097e2 <__ieee754_rem_pio2+0x23a>
 800976e:	a34c      	add	r3, pc, #304	@ (adr r3, 80098a0 <__ieee754_rem_pio2+0x2f8>)
 8009770:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009774:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8009778:	f7f6 ff5e 	bl	8000638 <__aeabi_dmul>
 800977c:	4606      	mov	r6, r0
 800977e:	460f      	mov	r7, r1
 8009780:	4602      	mov	r2, r0
 8009782:	460b      	mov	r3, r1
 8009784:	4650      	mov	r0, sl
 8009786:	4659      	mov	r1, fp
 8009788:	f7f6 fd9e 	bl	80002c8 <__aeabi_dsub>
 800978c:	4602      	mov	r2, r0
 800978e:	460b      	mov	r3, r1
 8009790:	4680      	mov	r8, r0
 8009792:	4689      	mov	r9, r1
 8009794:	4650      	mov	r0, sl
 8009796:	4659      	mov	r1, fp
 8009798:	f7f6 fd96 	bl	80002c8 <__aeabi_dsub>
 800979c:	4632      	mov	r2, r6
 800979e:	463b      	mov	r3, r7
 80097a0:	f7f6 fd92 	bl	80002c8 <__aeabi_dsub>
 80097a4:	a340      	add	r3, pc, #256	@ (adr r3, 80098a8 <__ieee754_rem_pio2+0x300>)
 80097a6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80097aa:	4606      	mov	r6, r0
 80097ac:	460f      	mov	r7, r1
 80097ae:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80097b2:	f7f6 ff41 	bl	8000638 <__aeabi_dmul>
 80097b6:	4632      	mov	r2, r6
 80097b8:	463b      	mov	r3, r7
 80097ba:	f7f6 fd85 	bl	80002c8 <__aeabi_dsub>
 80097be:	4602      	mov	r2, r0
 80097c0:	460b      	mov	r3, r1
 80097c2:	4606      	mov	r6, r0
 80097c4:	460f      	mov	r7, r1
 80097c6:	4640      	mov	r0, r8
 80097c8:	4649      	mov	r1, r9
 80097ca:	f7f6 fd7d 	bl	80002c8 <__aeabi_dsub>
 80097ce:	9a05      	ldr	r2, [sp, #20]
 80097d0:	f3c1 530a 	ubfx	r3, r1, #20, #11
 80097d4:	1ad3      	subs	r3, r2, r3
 80097d6:	2b31      	cmp	r3, #49	@ 0x31
 80097d8:	dc20      	bgt.n	800981c <__ieee754_rem_pio2+0x274>
 80097da:	e9c4 0100 	strd	r0, r1, [r4]
 80097de:	46c2      	mov	sl, r8
 80097e0:	46cb      	mov	fp, r9
 80097e2:	e9d4 8900 	ldrd	r8, r9, [r4]
 80097e6:	4650      	mov	r0, sl
 80097e8:	4642      	mov	r2, r8
 80097ea:	464b      	mov	r3, r9
 80097ec:	4659      	mov	r1, fp
 80097ee:	f7f6 fd6b 	bl	80002c8 <__aeabi_dsub>
 80097f2:	463b      	mov	r3, r7
 80097f4:	4632      	mov	r2, r6
 80097f6:	f7f6 fd67 	bl	80002c8 <__aeabi_dsub>
 80097fa:	9b04      	ldr	r3, [sp, #16]
 80097fc:	2b00      	cmp	r3, #0
 80097fe:	e9c4 0102 	strd	r0, r1, [r4, #8]
 8009802:	f6bf af0e 	bge.w	8009622 <__ieee754_rem_pio2+0x7a>
 8009806:	f109 4300 	add.w	r3, r9, #2147483648	@ 0x80000000
 800980a:	6063      	str	r3, [r4, #4]
 800980c:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 8009810:	f8c4 8000 	str.w	r8, [r4]
 8009814:	60a0      	str	r0, [r4, #8]
 8009816:	60e3      	str	r3, [r4, #12]
 8009818:	426d      	negs	r5, r5
 800981a:	e702      	b.n	8009622 <__ieee754_rem_pio2+0x7a>
 800981c:	a326      	add	r3, pc, #152	@ (adr r3, 80098b8 <__ieee754_rem_pio2+0x310>)
 800981e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009822:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8009826:	f7f6 ff07 	bl	8000638 <__aeabi_dmul>
 800982a:	4606      	mov	r6, r0
 800982c:	460f      	mov	r7, r1
 800982e:	4602      	mov	r2, r0
 8009830:	460b      	mov	r3, r1
 8009832:	4640      	mov	r0, r8
 8009834:	4649      	mov	r1, r9
 8009836:	f7f6 fd47 	bl	80002c8 <__aeabi_dsub>
 800983a:	4602      	mov	r2, r0
 800983c:	460b      	mov	r3, r1
 800983e:	4682      	mov	sl, r0
 8009840:	468b      	mov	fp, r1
 8009842:	4640      	mov	r0, r8
 8009844:	4649      	mov	r1, r9
 8009846:	f7f6 fd3f 	bl	80002c8 <__aeabi_dsub>
 800984a:	4632      	mov	r2, r6
 800984c:	463b      	mov	r3, r7
 800984e:	f7f6 fd3b 	bl	80002c8 <__aeabi_dsub>
 8009852:	a31b      	add	r3, pc, #108	@ (adr r3, 80098c0 <__ieee754_rem_pio2+0x318>)
 8009854:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009858:	4606      	mov	r6, r0
 800985a:	460f      	mov	r7, r1
 800985c:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8009860:	f7f6 feea 	bl	8000638 <__aeabi_dmul>
 8009864:	4632      	mov	r2, r6
 8009866:	463b      	mov	r3, r7
 8009868:	f7f6 fd2e 	bl	80002c8 <__aeabi_dsub>
 800986c:	4606      	mov	r6, r0
 800986e:	460f      	mov	r7, r1
 8009870:	e764      	b.n	800973c <__ieee754_rem_pio2+0x194>
 8009872:	4b1b      	ldr	r3, [pc, #108]	@ (80098e0 <__ieee754_rem_pio2+0x338>)
 8009874:	4598      	cmp	r8, r3
 8009876:	d935      	bls.n	80098e4 <__ieee754_rem_pio2+0x33c>
 8009878:	4632      	mov	r2, r6
 800987a:	463b      	mov	r3, r7
 800987c:	4630      	mov	r0, r6
 800987e:	4639      	mov	r1, r7
 8009880:	f7f6 fd22 	bl	80002c8 <__aeabi_dsub>
 8009884:	e9c4 0102 	strd	r0, r1, [r4, #8]
 8009888:	e9c4 0100 	strd	r0, r1, [r4]
 800988c:	e69e      	b.n	80095cc <__ieee754_rem_pio2+0x24>
 800988e:	bf00      	nop
 8009890:	54400000 	.word	0x54400000
 8009894:	3ff921fb 	.word	0x3ff921fb
 8009898:	1a626331 	.word	0x1a626331
 800989c:	3dd0b461 	.word	0x3dd0b461
 80098a0:	1a600000 	.word	0x1a600000
 80098a4:	3dd0b461 	.word	0x3dd0b461
 80098a8:	2e037073 	.word	0x2e037073
 80098ac:	3ba3198a 	.word	0x3ba3198a
 80098b0:	6dc9c883 	.word	0x6dc9c883
 80098b4:	3fe45f30 	.word	0x3fe45f30
 80098b8:	2e000000 	.word	0x2e000000
 80098bc:	3ba3198a 	.word	0x3ba3198a
 80098c0:	252049c1 	.word	0x252049c1
 80098c4:	397b839a 	.word	0x397b839a
 80098c8:	3fe921fb 	.word	0x3fe921fb
 80098cc:	4002d97b 	.word	0x4002d97b
 80098d0:	3ff921fb 	.word	0x3ff921fb
 80098d4:	413921fb 	.word	0x413921fb
 80098d8:	3fe00000 	.word	0x3fe00000
 80098dc:	0800a6c0 	.word	0x0800a6c0
 80098e0:	7fefffff 	.word	0x7fefffff
 80098e4:	ea4f 5528 	mov.w	r5, r8, asr #20
 80098e8:	f2a5 4516 	subw	r5, r5, #1046	@ 0x416
 80098ec:	eba8 5105 	sub.w	r1, r8, r5, lsl #20
 80098f0:	4630      	mov	r0, r6
 80098f2:	460f      	mov	r7, r1
 80098f4:	f7f7 f950 	bl	8000b98 <__aeabi_d2iz>
 80098f8:	f7f6 fe34 	bl	8000564 <__aeabi_i2d>
 80098fc:	4602      	mov	r2, r0
 80098fe:	460b      	mov	r3, r1
 8009900:	4630      	mov	r0, r6
 8009902:	4639      	mov	r1, r7
 8009904:	e9cd 2306 	strd	r2, r3, [sp, #24]
 8009908:	f7f6 fcde 	bl	80002c8 <__aeabi_dsub>
 800990c:	4b22      	ldr	r3, [pc, #136]	@ (8009998 <__ieee754_rem_pio2+0x3f0>)
 800990e:	2200      	movs	r2, #0
 8009910:	f7f6 fe92 	bl	8000638 <__aeabi_dmul>
 8009914:	460f      	mov	r7, r1
 8009916:	4606      	mov	r6, r0
 8009918:	f7f7 f93e 	bl	8000b98 <__aeabi_d2iz>
 800991c:	f7f6 fe22 	bl	8000564 <__aeabi_i2d>
 8009920:	4602      	mov	r2, r0
 8009922:	460b      	mov	r3, r1
 8009924:	4630      	mov	r0, r6
 8009926:	4639      	mov	r1, r7
 8009928:	e9cd 2308 	strd	r2, r3, [sp, #32]
 800992c:	f7f6 fccc 	bl	80002c8 <__aeabi_dsub>
 8009930:	4b19      	ldr	r3, [pc, #100]	@ (8009998 <__ieee754_rem_pio2+0x3f0>)
 8009932:	2200      	movs	r2, #0
 8009934:	f7f6 fe80 	bl	8000638 <__aeabi_dmul>
 8009938:	e9cd 010a 	strd	r0, r1, [sp, #40]	@ 0x28
 800993c:	f10d 0930 	add.w	r9, sp, #48	@ 0x30
 8009940:	f04f 0803 	mov.w	r8, #3
 8009944:	2600      	movs	r6, #0
 8009946:	2700      	movs	r7, #0
 8009948:	e979 0102 	ldrd	r0, r1, [r9, #-8]!
 800994c:	4632      	mov	r2, r6
 800994e:	463b      	mov	r3, r7
 8009950:	46c2      	mov	sl, r8
 8009952:	f108 38ff 	add.w	r8, r8, #4294967295
 8009956:	f7f7 f8d7 	bl	8000b08 <__aeabi_dcmpeq>
 800995a:	2800      	cmp	r0, #0
 800995c:	d1f4      	bne.n	8009948 <__ieee754_rem_pio2+0x3a0>
 800995e:	4b0f      	ldr	r3, [pc, #60]	@ (800999c <__ieee754_rem_pio2+0x3f4>)
 8009960:	9301      	str	r3, [sp, #4]
 8009962:	2302      	movs	r3, #2
 8009964:	9300      	str	r3, [sp, #0]
 8009966:	462a      	mov	r2, r5
 8009968:	4653      	mov	r3, sl
 800996a:	4621      	mov	r1, r4
 800996c:	a806      	add	r0, sp, #24
 800996e:	f000 f81f 	bl	80099b0 <__kernel_rem_pio2>
 8009972:	9b04      	ldr	r3, [sp, #16]
 8009974:	2b00      	cmp	r3, #0
 8009976:	4605      	mov	r5, r0
 8009978:	f6bf ae53 	bge.w	8009622 <__ieee754_rem_pio2+0x7a>
 800997c:	e9d4 2100 	ldrd	r2, r1, [r4]
 8009980:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 8009984:	e9c4 2300 	strd	r2, r3, [r4]
 8009988:	e9d4 2102 	ldrd	r2, r1, [r4, #8]
 800998c:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 8009990:	e9c4 2302 	strd	r2, r3, [r4, #8]
 8009994:	e740      	b.n	8009818 <__ieee754_rem_pio2+0x270>
 8009996:	bf00      	nop
 8009998:	41700000 	.word	0x41700000
 800999c:	0800a740 	.word	0x0800a740

080099a0 <fabs>:
 80099a0:	ec51 0b10 	vmov	r0, r1, d0
 80099a4:	4602      	mov	r2, r0
 80099a6:	f021 4300 	bic.w	r3, r1, #2147483648	@ 0x80000000
 80099aa:	ec43 2b10 	vmov	d0, r2, r3
 80099ae:	4770      	bx	lr

080099b0 <__kernel_rem_pio2>:
 80099b0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80099b4:	ed2d 8b02 	vpush	{d8}
 80099b8:	f5ad 7d19 	sub.w	sp, sp, #612	@ 0x264
 80099bc:	f112 0f14 	cmn.w	r2, #20
 80099c0:	9306      	str	r3, [sp, #24]
 80099c2:	9104      	str	r1, [sp, #16]
 80099c4:	4bbe      	ldr	r3, [pc, #760]	@ (8009cc0 <__kernel_rem_pio2+0x310>)
 80099c6:	99a4      	ldr	r1, [sp, #656]	@ 0x290
 80099c8:	9008      	str	r0, [sp, #32]
 80099ca:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 80099ce:	9300      	str	r3, [sp, #0]
 80099d0:	9b06      	ldr	r3, [sp, #24]
 80099d2:	f103 33ff 	add.w	r3, r3, #4294967295
 80099d6:	bfa8      	it	ge
 80099d8:	1ed4      	subge	r4, r2, #3
 80099da:	9305      	str	r3, [sp, #20]
 80099dc:	bfb2      	itee	lt
 80099de:	2400      	movlt	r4, #0
 80099e0:	2318      	movge	r3, #24
 80099e2:	fb94 f4f3 	sdivge	r4, r4, r3
 80099e6:	f06f 0317 	mvn.w	r3, #23
 80099ea:	fb04 3303 	mla	r3, r4, r3, r3
 80099ee:	eb03 0b02 	add.w	fp, r3, r2
 80099f2:	9b00      	ldr	r3, [sp, #0]
 80099f4:	9a05      	ldr	r2, [sp, #20]
 80099f6:	ed9f 8bae 	vldr	d8, [pc, #696]	@ 8009cb0 <__kernel_rem_pio2+0x300>
 80099fa:	eb03 0802 	add.w	r8, r3, r2
 80099fe:	9ba5      	ldr	r3, [sp, #660]	@ 0x294
 8009a00:	1aa7      	subs	r7, r4, r2
 8009a02:	ae20      	add	r6, sp, #128	@ 0x80
 8009a04:	eb03 0987 	add.w	r9, r3, r7, lsl #2
 8009a08:	2500      	movs	r5, #0
 8009a0a:	4545      	cmp	r5, r8
 8009a0c:	dd13      	ble.n	8009a36 <__kernel_rem_pio2+0x86>
 8009a0e:	9b06      	ldr	r3, [sp, #24]
 8009a10:	aa20      	add	r2, sp, #128	@ 0x80
 8009a12:	eb02 05c3 	add.w	r5, r2, r3, lsl #3
 8009a16:	f50d 7ae0 	add.w	sl, sp, #448	@ 0x1c0
 8009a1a:	f04f 0800 	mov.w	r8, #0
 8009a1e:	9b00      	ldr	r3, [sp, #0]
 8009a20:	4598      	cmp	r8, r3
 8009a22:	dc31      	bgt.n	8009a88 <__kernel_rem_pio2+0xd8>
 8009a24:	ed9f 7ba2 	vldr	d7, [pc, #648]	@ 8009cb0 <__kernel_rem_pio2+0x300>
 8009a28:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8009a2c:	ed8d 7b02 	vstr	d7, [sp, #8]
 8009a30:	462f      	mov	r7, r5
 8009a32:	2600      	movs	r6, #0
 8009a34:	e01b      	b.n	8009a6e <__kernel_rem_pio2+0xbe>
 8009a36:	42ef      	cmn	r7, r5
 8009a38:	d407      	bmi.n	8009a4a <__kernel_rem_pio2+0x9a>
 8009a3a:	f859 0025 	ldr.w	r0, [r9, r5, lsl #2]
 8009a3e:	f7f6 fd91 	bl	8000564 <__aeabi_i2d>
 8009a42:	e8e6 0102 	strd	r0, r1, [r6], #8
 8009a46:	3501      	adds	r5, #1
 8009a48:	e7df      	b.n	8009a0a <__kernel_rem_pio2+0x5a>
 8009a4a:	ec51 0b18 	vmov	r0, r1, d8
 8009a4e:	e7f8      	b.n	8009a42 <__kernel_rem_pio2+0x92>
 8009a50:	e9d7 2300 	ldrd	r2, r3, [r7]
 8009a54:	e8f9 0102 	ldrd	r0, r1, [r9], #8
 8009a58:	f7f6 fdee 	bl	8000638 <__aeabi_dmul>
 8009a5c:	4602      	mov	r2, r0
 8009a5e:	460b      	mov	r3, r1
 8009a60:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8009a64:	f7f6 fc32 	bl	80002cc <__adddf3>
 8009a68:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8009a6c:	3601      	adds	r6, #1
 8009a6e:	9b05      	ldr	r3, [sp, #20]
 8009a70:	429e      	cmp	r6, r3
 8009a72:	f1a7 0708 	sub.w	r7, r7, #8
 8009a76:	ddeb      	ble.n	8009a50 <__kernel_rem_pio2+0xa0>
 8009a78:	ed9d 7b02 	vldr	d7, [sp, #8]
 8009a7c:	f108 0801 	add.w	r8, r8, #1
 8009a80:	ecaa 7b02 	vstmia	sl!, {d7}
 8009a84:	3508      	adds	r5, #8
 8009a86:	e7ca      	b.n	8009a1e <__kernel_rem_pio2+0x6e>
 8009a88:	9b00      	ldr	r3, [sp, #0]
 8009a8a:	f8dd 8000 	ldr.w	r8, [sp]
 8009a8e:	aa0c      	add	r2, sp, #48	@ 0x30
 8009a90:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 8009a94:	930a      	str	r3, [sp, #40]	@ 0x28
 8009a96:	9ba5      	ldr	r3, [sp, #660]	@ 0x294
 8009a98:	eb03 0384 	add.w	r3, r3, r4, lsl #2
 8009a9c:	9309      	str	r3, [sp, #36]	@ 0x24
 8009a9e:	ea4f 03c8 	mov.w	r3, r8, lsl #3
 8009aa2:	930b      	str	r3, [sp, #44]	@ 0x2c
 8009aa4:	ab98      	add	r3, sp, #608	@ 0x260
 8009aa6:	eb03 03c8 	add.w	r3, r3, r8, lsl #3
 8009aaa:	ed13 7b28 	vldr	d7, [r3, #-160]	@ 0xffffff60
 8009aae:	ed8d 7b02 	vstr	d7, [sp, #8]
 8009ab2:	ac0c      	add	r4, sp, #48	@ 0x30
 8009ab4:	ab70      	add	r3, sp, #448	@ 0x1c0
 8009ab6:	eb03 05c8 	add.w	r5, r3, r8, lsl #3
 8009aba:	46a1      	mov	r9, r4
 8009abc:	46c2      	mov	sl, r8
 8009abe:	f1ba 0f00 	cmp.w	sl, #0
 8009ac2:	f1a5 0508 	sub.w	r5, r5, #8
 8009ac6:	dc77      	bgt.n	8009bb8 <__kernel_rem_pio2+0x208>
 8009ac8:	4658      	mov	r0, fp
 8009aca:	ed9d 0b02 	vldr	d0, [sp, #8]
 8009ace:	f000 fac7 	bl	800a060 <scalbn>
 8009ad2:	ec57 6b10 	vmov	r6, r7, d0
 8009ad6:	2200      	movs	r2, #0
 8009ad8:	f04f 537f 	mov.w	r3, #1069547520	@ 0x3fc00000
 8009adc:	4630      	mov	r0, r6
 8009ade:	4639      	mov	r1, r7
 8009ae0:	f7f6 fdaa 	bl	8000638 <__aeabi_dmul>
 8009ae4:	ec41 0b10 	vmov	d0, r0, r1
 8009ae8:	f000 fb3a 	bl	800a160 <floor>
 8009aec:	4b75      	ldr	r3, [pc, #468]	@ (8009cc4 <__kernel_rem_pio2+0x314>)
 8009aee:	ec51 0b10 	vmov	r0, r1, d0
 8009af2:	2200      	movs	r2, #0
 8009af4:	f7f6 fda0 	bl	8000638 <__aeabi_dmul>
 8009af8:	4602      	mov	r2, r0
 8009afa:	460b      	mov	r3, r1
 8009afc:	4630      	mov	r0, r6
 8009afe:	4639      	mov	r1, r7
 8009b00:	f7f6 fbe2 	bl	80002c8 <__aeabi_dsub>
 8009b04:	460f      	mov	r7, r1
 8009b06:	4606      	mov	r6, r0
 8009b08:	f7f7 f846 	bl	8000b98 <__aeabi_d2iz>
 8009b0c:	9002      	str	r0, [sp, #8]
 8009b0e:	f7f6 fd29 	bl	8000564 <__aeabi_i2d>
 8009b12:	4602      	mov	r2, r0
 8009b14:	460b      	mov	r3, r1
 8009b16:	4630      	mov	r0, r6
 8009b18:	4639      	mov	r1, r7
 8009b1a:	f7f6 fbd5 	bl	80002c8 <__aeabi_dsub>
 8009b1e:	f1bb 0f00 	cmp.w	fp, #0
 8009b22:	4606      	mov	r6, r0
 8009b24:	460f      	mov	r7, r1
 8009b26:	dd6c      	ble.n	8009c02 <__kernel_rem_pio2+0x252>
 8009b28:	f108 31ff 	add.w	r1, r8, #4294967295
 8009b2c:	ab0c      	add	r3, sp, #48	@ 0x30
 8009b2e:	9d02      	ldr	r5, [sp, #8]
 8009b30:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 8009b34:	f1cb 0018 	rsb	r0, fp, #24
 8009b38:	fa43 f200 	asr.w	r2, r3, r0
 8009b3c:	4415      	add	r5, r2
 8009b3e:	4082      	lsls	r2, r0
 8009b40:	1a9b      	subs	r3, r3, r2
 8009b42:	aa0c      	add	r2, sp, #48	@ 0x30
 8009b44:	9502      	str	r5, [sp, #8]
 8009b46:	f842 3021 	str.w	r3, [r2, r1, lsl #2]
 8009b4a:	f1cb 0217 	rsb	r2, fp, #23
 8009b4e:	fa43 f902 	asr.w	r9, r3, r2
 8009b52:	f1b9 0f00 	cmp.w	r9, #0
 8009b56:	dd64      	ble.n	8009c22 <__kernel_rem_pio2+0x272>
 8009b58:	9b02      	ldr	r3, [sp, #8]
 8009b5a:	2200      	movs	r2, #0
 8009b5c:	3301      	adds	r3, #1
 8009b5e:	9302      	str	r3, [sp, #8]
 8009b60:	4615      	mov	r5, r2
 8009b62:	f06f 417f 	mvn.w	r1, #4278190080	@ 0xff000000
 8009b66:	4590      	cmp	r8, r2
 8009b68:	f300 80b8 	bgt.w	8009cdc <__kernel_rem_pio2+0x32c>
 8009b6c:	f1bb 0f00 	cmp.w	fp, #0
 8009b70:	dd07      	ble.n	8009b82 <__kernel_rem_pio2+0x1d2>
 8009b72:	f1bb 0f01 	cmp.w	fp, #1
 8009b76:	f000 80bf 	beq.w	8009cf8 <__kernel_rem_pio2+0x348>
 8009b7a:	f1bb 0f02 	cmp.w	fp, #2
 8009b7e:	f000 80c6 	beq.w	8009d0e <__kernel_rem_pio2+0x35e>
 8009b82:	f1b9 0f02 	cmp.w	r9, #2
 8009b86:	d14c      	bne.n	8009c22 <__kernel_rem_pio2+0x272>
 8009b88:	4632      	mov	r2, r6
 8009b8a:	463b      	mov	r3, r7
 8009b8c:	494e      	ldr	r1, [pc, #312]	@ (8009cc8 <__kernel_rem_pio2+0x318>)
 8009b8e:	2000      	movs	r0, #0
 8009b90:	f7f6 fb9a 	bl	80002c8 <__aeabi_dsub>
 8009b94:	4606      	mov	r6, r0
 8009b96:	460f      	mov	r7, r1
 8009b98:	2d00      	cmp	r5, #0
 8009b9a:	d042      	beq.n	8009c22 <__kernel_rem_pio2+0x272>
 8009b9c:	4658      	mov	r0, fp
 8009b9e:	ed9f 0b46 	vldr	d0, [pc, #280]	@ 8009cb8 <__kernel_rem_pio2+0x308>
 8009ba2:	f000 fa5d 	bl	800a060 <scalbn>
 8009ba6:	4630      	mov	r0, r6
 8009ba8:	4639      	mov	r1, r7
 8009baa:	ec53 2b10 	vmov	r2, r3, d0
 8009bae:	f7f6 fb8b 	bl	80002c8 <__aeabi_dsub>
 8009bb2:	4606      	mov	r6, r0
 8009bb4:	460f      	mov	r7, r1
 8009bb6:	e034      	b.n	8009c22 <__kernel_rem_pio2+0x272>
 8009bb8:	4b44      	ldr	r3, [pc, #272]	@ (8009ccc <__kernel_rem_pio2+0x31c>)
 8009bba:	2200      	movs	r2, #0
 8009bbc:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8009bc0:	f7f6 fd3a 	bl	8000638 <__aeabi_dmul>
 8009bc4:	f7f6 ffe8 	bl	8000b98 <__aeabi_d2iz>
 8009bc8:	f7f6 fccc 	bl	8000564 <__aeabi_i2d>
 8009bcc:	4b40      	ldr	r3, [pc, #256]	@ (8009cd0 <__kernel_rem_pio2+0x320>)
 8009bce:	2200      	movs	r2, #0
 8009bd0:	4606      	mov	r6, r0
 8009bd2:	460f      	mov	r7, r1
 8009bd4:	f7f6 fd30 	bl	8000638 <__aeabi_dmul>
 8009bd8:	4602      	mov	r2, r0
 8009bda:	460b      	mov	r3, r1
 8009bdc:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8009be0:	f7f6 fb72 	bl	80002c8 <__aeabi_dsub>
 8009be4:	f7f6 ffd8 	bl	8000b98 <__aeabi_d2iz>
 8009be8:	e9d5 2300 	ldrd	r2, r3, [r5]
 8009bec:	f849 0b04 	str.w	r0, [r9], #4
 8009bf0:	4639      	mov	r1, r7
 8009bf2:	4630      	mov	r0, r6
 8009bf4:	f7f6 fb6a 	bl	80002cc <__adddf3>
 8009bf8:	f10a 3aff 	add.w	sl, sl, #4294967295
 8009bfc:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8009c00:	e75d      	b.n	8009abe <__kernel_rem_pio2+0x10e>
 8009c02:	d107      	bne.n	8009c14 <__kernel_rem_pio2+0x264>
 8009c04:	f108 33ff 	add.w	r3, r8, #4294967295
 8009c08:	aa0c      	add	r2, sp, #48	@ 0x30
 8009c0a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8009c0e:	ea4f 59e3 	mov.w	r9, r3, asr #23
 8009c12:	e79e      	b.n	8009b52 <__kernel_rem_pio2+0x1a2>
 8009c14:	4b2f      	ldr	r3, [pc, #188]	@ (8009cd4 <__kernel_rem_pio2+0x324>)
 8009c16:	2200      	movs	r2, #0
 8009c18:	f7f6 ff94 	bl	8000b44 <__aeabi_dcmpge>
 8009c1c:	2800      	cmp	r0, #0
 8009c1e:	d143      	bne.n	8009ca8 <__kernel_rem_pio2+0x2f8>
 8009c20:	4681      	mov	r9, r0
 8009c22:	2200      	movs	r2, #0
 8009c24:	2300      	movs	r3, #0
 8009c26:	4630      	mov	r0, r6
 8009c28:	4639      	mov	r1, r7
 8009c2a:	f7f6 ff6d 	bl	8000b08 <__aeabi_dcmpeq>
 8009c2e:	2800      	cmp	r0, #0
 8009c30:	f000 80bf 	beq.w	8009db2 <__kernel_rem_pio2+0x402>
 8009c34:	f108 33ff 	add.w	r3, r8, #4294967295
 8009c38:	2200      	movs	r2, #0
 8009c3a:	9900      	ldr	r1, [sp, #0]
 8009c3c:	428b      	cmp	r3, r1
 8009c3e:	da6e      	bge.n	8009d1e <__kernel_rem_pio2+0x36e>
 8009c40:	2a00      	cmp	r2, #0
 8009c42:	f000 8089 	beq.w	8009d58 <__kernel_rem_pio2+0x3a8>
 8009c46:	f108 38ff 	add.w	r8, r8, #4294967295
 8009c4a:	ab0c      	add	r3, sp, #48	@ 0x30
 8009c4c:	f1ab 0b18 	sub.w	fp, fp, #24
 8009c50:	f853 3028 	ldr.w	r3, [r3, r8, lsl #2]
 8009c54:	2b00      	cmp	r3, #0
 8009c56:	d0f6      	beq.n	8009c46 <__kernel_rem_pio2+0x296>
 8009c58:	4658      	mov	r0, fp
 8009c5a:	ed9f 0b17 	vldr	d0, [pc, #92]	@ 8009cb8 <__kernel_rem_pio2+0x308>
 8009c5e:	f000 f9ff 	bl	800a060 <scalbn>
 8009c62:	f108 0301 	add.w	r3, r8, #1
 8009c66:	00da      	lsls	r2, r3, #3
 8009c68:	9205      	str	r2, [sp, #20]
 8009c6a:	ec55 4b10 	vmov	r4, r5, d0
 8009c6e:	aa70      	add	r2, sp, #448	@ 0x1c0
 8009c70:	f8df b058 	ldr.w	fp, [pc, #88]	@ 8009ccc <__kernel_rem_pio2+0x31c>
 8009c74:	eb02 07c3 	add.w	r7, r2, r3, lsl #3
 8009c78:	4646      	mov	r6, r8
 8009c7a:	f04f 0a00 	mov.w	sl, #0
 8009c7e:	2e00      	cmp	r6, #0
 8009c80:	f280 80cf 	bge.w	8009e22 <__kernel_rem_pio2+0x472>
 8009c84:	4644      	mov	r4, r8
 8009c86:	2c00      	cmp	r4, #0
 8009c88:	f2c0 80fd 	blt.w	8009e86 <__kernel_rem_pio2+0x4d6>
 8009c8c:	4b12      	ldr	r3, [pc, #72]	@ (8009cd8 <__kernel_rem_pio2+0x328>)
 8009c8e:	461f      	mov	r7, r3
 8009c90:	ab70      	add	r3, sp, #448	@ 0x1c0
 8009c92:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 8009c96:	9306      	str	r3, [sp, #24]
 8009c98:	f04f 0a00 	mov.w	sl, #0
 8009c9c:	f04f 0b00 	mov.w	fp, #0
 8009ca0:	2600      	movs	r6, #0
 8009ca2:	eba8 0504 	sub.w	r5, r8, r4
 8009ca6:	e0e2      	b.n	8009e6e <__kernel_rem_pio2+0x4be>
 8009ca8:	f04f 0902 	mov.w	r9, #2
 8009cac:	e754      	b.n	8009b58 <__kernel_rem_pio2+0x1a8>
 8009cae:	bf00      	nop
	...
 8009cbc:	3ff00000 	.word	0x3ff00000
 8009cc0:	0800a888 	.word	0x0800a888
 8009cc4:	40200000 	.word	0x40200000
 8009cc8:	3ff00000 	.word	0x3ff00000
 8009ccc:	3e700000 	.word	0x3e700000
 8009cd0:	41700000 	.word	0x41700000
 8009cd4:	3fe00000 	.word	0x3fe00000
 8009cd8:	0800a848 	.word	0x0800a848
 8009cdc:	f854 3b04 	ldr.w	r3, [r4], #4
 8009ce0:	b945      	cbnz	r5, 8009cf4 <__kernel_rem_pio2+0x344>
 8009ce2:	b123      	cbz	r3, 8009cee <__kernel_rem_pio2+0x33e>
 8009ce4:	f1c3 7380 	rsb	r3, r3, #16777216	@ 0x1000000
 8009ce8:	f844 3c04 	str.w	r3, [r4, #-4]
 8009cec:	2301      	movs	r3, #1
 8009cee:	3201      	adds	r2, #1
 8009cf0:	461d      	mov	r5, r3
 8009cf2:	e738      	b.n	8009b66 <__kernel_rem_pio2+0x1b6>
 8009cf4:	1acb      	subs	r3, r1, r3
 8009cf6:	e7f7      	b.n	8009ce8 <__kernel_rem_pio2+0x338>
 8009cf8:	f108 32ff 	add.w	r2, r8, #4294967295
 8009cfc:	ab0c      	add	r3, sp, #48	@ 0x30
 8009cfe:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8009d02:	f3c3 0316 	ubfx	r3, r3, #0, #23
 8009d06:	a90c      	add	r1, sp, #48	@ 0x30
 8009d08:	f841 3022 	str.w	r3, [r1, r2, lsl #2]
 8009d0c:	e739      	b.n	8009b82 <__kernel_rem_pio2+0x1d2>
 8009d0e:	f108 32ff 	add.w	r2, r8, #4294967295
 8009d12:	ab0c      	add	r3, sp, #48	@ 0x30
 8009d14:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8009d18:	f3c3 0315 	ubfx	r3, r3, #0, #22
 8009d1c:	e7f3      	b.n	8009d06 <__kernel_rem_pio2+0x356>
 8009d1e:	a90c      	add	r1, sp, #48	@ 0x30
 8009d20:	f851 1023 	ldr.w	r1, [r1, r3, lsl #2]
 8009d24:	3b01      	subs	r3, #1
 8009d26:	430a      	orrs	r2, r1
 8009d28:	e787      	b.n	8009c3a <__kernel_rem_pio2+0x28a>
 8009d2a:	3401      	adds	r4, #1
 8009d2c:	f853 2d04 	ldr.w	r2, [r3, #-4]!
 8009d30:	2a00      	cmp	r2, #0
 8009d32:	d0fa      	beq.n	8009d2a <__kernel_rem_pio2+0x37a>
 8009d34:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8009d36:	f503 7318 	add.w	r3, r3, #608	@ 0x260
 8009d3a:	eb0d 0503 	add.w	r5, sp, r3
 8009d3e:	9b06      	ldr	r3, [sp, #24]
 8009d40:	aa20      	add	r2, sp, #128	@ 0x80
 8009d42:	4443      	add	r3, r8
 8009d44:	f108 0701 	add.w	r7, r8, #1
 8009d48:	3d98      	subs	r5, #152	@ 0x98
 8009d4a:	eb02 06c3 	add.w	r6, r2, r3, lsl #3
 8009d4e:	4444      	add	r4, r8
 8009d50:	42bc      	cmp	r4, r7
 8009d52:	da04      	bge.n	8009d5e <__kernel_rem_pio2+0x3ae>
 8009d54:	46a0      	mov	r8, r4
 8009d56:	e6a2      	b.n	8009a9e <__kernel_rem_pio2+0xee>
 8009d58:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8009d5a:	2401      	movs	r4, #1
 8009d5c:	e7e6      	b.n	8009d2c <__kernel_rem_pio2+0x37c>
 8009d5e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8009d60:	f853 0027 	ldr.w	r0, [r3, r7, lsl #2]
 8009d64:	f7f6 fbfe 	bl	8000564 <__aeabi_i2d>
 8009d68:	ed9f 7bb1 	vldr	d7, [pc, #708]	@ 800a030 <__kernel_rem_pio2+0x680>
 8009d6c:	e8e6 0102 	strd	r0, r1, [r6], #8
 8009d70:	ed8d 7b02 	vstr	d7, [sp, #8]
 8009d74:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8009d78:	46b2      	mov	sl, r6
 8009d7a:	f04f 0800 	mov.w	r8, #0
 8009d7e:	9b05      	ldr	r3, [sp, #20]
 8009d80:	4598      	cmp	r8, r3
 8009d82:	dd05      	ble.n	8009d90 <__kernel_rem_pio2+0x3e0>
 8009d84:	ed9d 7b02 	vldr	d7, [sp, #8]
 8009d88:	3701      	adds	r7, #1
 8009d8a:	eca5 7b02 	vstmia	r5!, {d7}
 8009d8e:	e7df      	b.n	8009d50 <__kernel_rem_pio2+0x3a0>
 8009d90:	e97a 2302 	ldrd	r2, r3, [sl, #-8]!
 8009d94:	e8f9 0102 	ldrd	r0, r1, [r9], #8
 8009d98:	f7f6 fc4e 	bl	8000638 <__aeabi_dmul>
 8009d9c:	4602      	mov	r2, r0
 8009d9e:	460b      	mov	r3, r1
 8009da0:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8009da4:	f7f6 fa92 	bl	80002cc <__adddf3>
 8009da8:	f108 0801 	add.w	r8, r8, #1
 8009dac:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8009db0:	e7e5      	b.n	8009d7e <__kernel_rem_pio2+0x3ce>
 8009db2:	f1cb 0000 	rsb	r0, fp, #0
 8009db6:	ec47 6b10 	vmov	d0, r6, r7
 8009dba:	f000 f951 	bl	800a060 <scalbn>
 8009dbe:	ec55 4b10 	vmov	r4, r5, d0
 8009dc2:	4b9d      	ldr	r3, [pc, #628]	@ (800a038 <__kernel_rem_pio2+0x688>)
 8009dc4:	2200      	movs	r2, #0
 8009dc6:	4620      	mov	r0, r4
 8009dc8:	4629      	mov	r1, r5
 8009dca:	f7f6 febb 	bl	8000b44 <__aeabi_dcmpge>
 8009dce:	b300      	cbz	r0, 8009e12 <__kernel_rem_pio2+0x462>
 8009dd0:	4b9a      	ldr	r3, [pc, #616]	@ (800a03c <__kernel_rem_pio2+0x68c>)
 8009dd2:	2200      	movs	r2, #0
 8009dd4:	4620      	mov	r0, r4
 8009dd6:	4629      	mov	r1, r5
 8009dd8:	f7f6 fc2e 	bl	8000638 <__aeabi_dmul>
 8009ddc:	f7f6 fedc 	bl	8000b98 <__aeabi_d2iz>
 8009de0:	4606      	mov	r6, r0
 8009de2:	f7f6 fbbf 	bl	8000564 <__aeabi_i2d>
 8009de6:	4b94      	ldr	r3, [pc, #592]	@ (800a038 <__kernel_rem_pio2+0x688>)
 8009de8:	2200      	movs	r2, #0
 8009dea:	f7f6 fc25 	bl	8000638 <__aeabi_dmul>
 8009dee:	460b      	mov	r3, r1
 8009df0:	4602      	mov	r2, r0
 8009df2:	4629      	mov	r1, r5
 8009df4:	4620      	mov	r0, r4
 8009df6:	f7f6 fa67 	bl	80002c8 <__aeabi_dsub>
 8009dfa:	f7f6 fecd 	bl	8000b98 <__aeabi_d2iz>
 8009dfe:	ab0c      	add	r3, sp, #48	@ 0x30
 8009e00:	f10b 0b18 	add.w	fp, fp, #24
 8009e04:	f843 0028 	str.w	r0, [r3, r8, lsl #2]
 8009e08:	f108 0801 	add.w	r8, r8, #1
 8009e0c:	f843 6028 	str.w	r6, [r3, r8, lsl #2]
 8009e10:	e722      	b.n	8009c58 <__kernel_rem_pio2+0x2a8>
 8009e12:	4620      	mov	r0, r4
 8009e14:	4629      	mov	r1, r5
 8009e16:	f7f6 febf 	bl	8000b98 <__aeabi_d2iz>
 8009e1a:	ab0c      	add	r3, sp, #48	@ 0x30
 8009e1c:	f843 0028 	str.w	r0, [r3, r8, lsl #2]
 8009e20:	e71a      	b.n	8009c58 <__kernel_rem_pio2+0x2a8>
 8009e22:	ab0c      	add	r3, sp, #48	@ 0x30
 8009e24:	f853 0026 	ldr.w	r0, [r3, r6, lsl #2]
 8009e28:	f7f6 fb9c 	bl	8000564 <__aeabi_i2d>
 8009e2c:	4622      	mov	r2, r4
 8009e2e:	462b      	mov	r3, r5
 8009e30:	f7f6 fc02 	bl	8000638 <__aeabi_dmul>
 8009e34:	4652      	mov	r2, sl
 8009e36:	e967 0102 	strd	r0, r1, [r7, #-8]!
 8009e3a:	465b      	mov	r3, fp
 8009e3c:	4620      	mov	r0, r4
 8009e3e:	4629      	mov	r1, r5
 8009e40:	f7f6 fbfa 	bl	8000638 <__aeabi_dmul>
 8009e44:	3e01      	subs	r6, #1
 8009e46:	4604      	mov	r4, r0
 8009e48:	460d      	mov	r5, r1
 8009e4a:	e718      	b.n	8009c7e <__kernel_rem_pio2+0x2ce>
 8009e4c:	9906      	ldr	r1, [sp, #24]
 8009e4e:	e8f1 2302 	ldrd	r2, r3, [r1], #8
 8009e52:	9106      	str	r1, [sp, #24]
 8009e54:	e8f7 0102 	ldrd	r0, r1, [r7], #8
 8009e58:	f7f6 fbee 	bl	8000638 <__aeabi_dmul>
 8009e5c:	4602      	mov	r2, r0
 8009e5e:	460b      	mov	r3, r1
 8009e60:	4650      	mov	r0, sl
 8009e62:	4659      	mov	r1, fp
 8009e64:	f7f6 fa32 	bl	80002cc <__adddf3>
 8009e68:	3601      	adds	r6, #1
 8009e6a:	4682      	mov	sl, r0
 8009e6c:	468b      	mov	fp, r1
 8009e6e:	9b00      	ldr	r3, [sp, #0]
 8009e70:	429e      	cmp	r6, r3
 8009e72:	dc01      	bgt.n	8009e78 <__kernel_rem_pio2+0x4c8>
 8009e74:	42b5      	cmp	r5, r6
 8009e76:	dae9      	bge.n	8009e4c <__kernel_rem_pio2+0x49c>
 8009e78:	ab48      	add	r3, sp, #288	@ 0x120
 8009e7a:	eb03 05c5 	add.w	r5, r3, r5, lsl #3
 8009e7e:	e9c5 ab00 	strd	sl, fp, [r5]
 8009e82:	3c01      	subs	r4, #1
 8009e84:	e6ff      	b.n	8009c86 <__kernel_rem_pio2+0x2d6>
 8009e86:	9ba4      	ldr	r3, [sp, #656]	@ 0x290
 8009e88:	2b02      	cmp	r3, #2
 8009e8a:	dc0b      	bgt.n	8009ea4 <__kernel_rem_pio2+0x4f4>
 8009e8c:	2b00      	cmp	r3, #0
 8009e8e:	dc39      	bgt.n	8009f04 <__kernel_rem_pio2+0x554>
 8009e90:	d05d      	beq.n	8009f4e <__kernel_rem_pio2+0x59e>
 8009e92:	9b02      	ldr	r3, [sp, #8]
 8009e94:	f003 0007 	and.w	r0, r3, #7
 8009e98:	f50d 7d19 	add.w	sp, sp, #612	@ 0x264
 8009e9c:	ecbd 8b02 	vpop	{d8}
 8009ea0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009ea4:	9ba4      	ldr	r3, [sp, #656]	@ 0x290
 8009ea6:	2b03      	cmp	r3, #3
 8009ea8:	d1f3      	bne.n	8009e92 <__kernel_rem_pio2+0x4e2>
 8009eaa:	9b05      	ldr	r3, [sp, #20]
 8009eac:	f503 7318 	add.w	r3, r3, #608	@ 0x260
 8009eb0:	eb0d 0403 	add.w	r4, sp, r3
 8009eb4:	f5a4 74a4 	sub.w	r4, r4, #328	@ 0x148
 8009eb8:	4625      	mov	r5, r4
 8009eba:	46c2      	mov	sl, r8
 8009ebc:	f1ba 0f00 	cmp.w	sl, #0
 8009ec0:	f1a5 0508 	sub.w	r5, r5, #8
 8009ec4:	dc6b      	bgt.n	8009f9e <__kernel_rem_pio2+0x5ee>
 8009ec6:	4645      	mov	r5, r8
 8009ec8:	2d01      	cmp	r5, #1
 8009eca:	f1a4 0408 	sub.w	r4, r4, #8
 8009ece:	f300 8087 	bgt.w	8009fe0 <__kernel_rem_pio2+0x630>
 8009ed2:	9c05      	ldr	r4, [sp, #20]
 8009ed4:	ab48      	add	r3, sp, #288	@ 0x120
 8009ed6:	441c      	add	r4, r3
 8009ed8:	2000      	movs	r0, #0
 8009eda:	2100      	movs	r1, #0
 8009edc:	f1b8 0f01 	cmp.w	r8, #1
 8009ee0:	f300 809c 	bgt.w	800a01c <__kernel_rem_pio2+0x66c>
 8009ee4:	e9dd 7848 	ldrd	r7, r8, [sp, #288]	@ 0x120
 8009ee8:	e9dd 564a 	ldrd	r5, r6, [sp, #296]	@ 0x128
 8009eec:	f1b9 0f00 	cmp.w	r9, #0
 8009ef0:	f040 80a6 	bne.w	800a040 <__kernel_rem_pio2+0x690>
 8009ef4:	9b04      	ldr	r3, [sp, #16]
 8009ef6:	e9c3 7800 	strd	r7, r8, [r3]
 8009efa:	e9c3 5602 	strd	r5, r6, [r3, #8]
 8009efe:	e9c3 0104 	strd	r0, r1, [r3, #16]
 8009f02:	e7c6      	b.n	8009e92 <__kernel_rem_pio2+0x4e2>
 8009f04:	9d05      	ldr	r5, [sp, #20]
 8009f06:	ab48      	add	r3, sp, #288	@ 0x120
 8009f08:	441d      	add	r5, r3
 8009f0a:	4644      	mov	r4, r8
 8009f0c:	2000      	movs	r0, #0
 8009f0e:	2100      	movs	r1, #0
 8009f10:	2c00      	cmp	r4, #0
 8009f12:	da35      	bge.n	8009f80 <__kernel_rem_pio2+0x5d0>
 8009f14:	f1b9 0f00 	cmp.w	r9, #0
 8009f18:	d038      	beq.n	8009f8c <__kernel_rem_pio2+0x5dc>
 8009f1a:	4602      	mov	r2, r0
 8009f1c:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 8009f20:	9c04      	ldr	r4, [sp, #16]
 8009f22:	e9c4 2300 	strd	r2, r3, [r4]
 8009f26:	4602      	mov	r2, r0
 8009f28:	460b      	mov	r3, r1
 8009f2a:	e9dd 0148 	ldrd	r0, r1, [sp, #288]	@ 0x120
 8009f2e:	f7f6 f9cb 	bl	80002c8 <__aeabi_dsub>
 8009f32:	ad4a      	add	r5, sp, #296	@ 0x128
 8009f34:	2401      	movs	r4, #1
 8009f36:	45a0      	cmp	r8, r4
 8009f38:	da2b      	bge.n	8009f92 <__kernel_rem_pio2+0x5e2>
 8009f3a:	f1b9 0f00 	cmp.w	r9, #0
 8009f3e:	d002      	beq.n	8009f46 <__kernel_rem_pio2+0x596>
 8009f40:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 8009f44:	4619      	mov	r1, r3
 8009f46:	9b04      	ldr	r3, [sp, #16]
 8009f48:	e9c3 0102 	strd	r0, r1, [r3, #8]
 8009f4c:	e7a1      	b.n	8009e92 <__kernel_rem_pio2+0x4e2>
 8009f4e:	9c05      	ldr	r4, [sp, #20]
 8009f50:	ab48      	add	r3, sp, #288	@ 0x120
 8009f52:	441c      	add	r4, r3
 8009f54:	2000      	movs	r0, #0
 8009f56:	2100      	movs	r1, #0
 8009f58:	f1b8 0f00 	cmp.w	r8, #0
 8009f5c:	da09      	bge.n	8009f72 <__kernel_rem_pio2+0x5c2>
 8009f5e:	f1b9 0f00 	cmp.w	r9, #0
 8009f62:	d002      	beq.n	8009f6a <__kernel_rem_pio2+0x5ba>
 8009f64:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 8009f68:	4619      	mov	r1, r3
 8009f6a:	9b04      	ldr	r3, [sp, #16]
 8009f6c:	e9c3 0100 	strd	r0, r1, [r3]
 8009f70:	e78f      	b.n	8009e92 <__kernel_rem_pio2+0x4e2>
 8009f72:	e974 2302 	ldrd	r2, r3, [r4, #-8]!
 8009f76:	f7f6 f9a9 	bl	80002cc <__adddf3>
 8009f7a:	f108 38ff 	add.w	r8, r8, #4294967295
 8009f7e:	e7eb      	b.n	8009f58 <__kernel_rem_pio2+0x5a8>
 8009f80:	e975 2302 	ldrd	r2, r3, [r5, #-8]!
 8009f84:	f7f6 f9a2 	bl	80002cc <__adddf3>
 8009f88:	3c01      	subs	r4, #1
 8009f8a:	e7c1      	b.n	8009f10 <__kernel_rem_pio2+0x560>
 8009f8c:	4602      	mov	r2, r0
 8009f8e:	460b      	mov	r3, r1
 8009f90:	e7c6      	b.n	8009f20 <__kernel_rem_pio2+0x570>
 8009f92:	e8f5 2302 	ldrd	r2, r3, [r5], #8
 8009f96:	f7f6 f999 	bl	80002cc <__adddf3>
 8009f9a:	3401      	adds	r4, #1
 8009f9c:	e7cb      	b.n	8009f36 <__kernel_rem_pio2+0x586>
 8009f9e:	ed95 7b00 	vldr	d7, [r5]
 8009fa2:	ed8d 7b00 	vstr	d7, [sp]
 8009fa6:	ed95 7b02 	vldr	d7, [r5, #8]
 8009faa:	e9dd 0100 	ldrd	r0, r1, [sp]
 8009fae:	ec53 2b17 	vmov	r2, r3, d7
 8009fb2:	ed8d 7b06 	vstr	d7, [sp, #24]
 8009fb6:	f7f6 f989 	bl	80002cc <__adddf3>
 8009fba:	4602      	mov	r2, r0
 8009fbc:	460b      	mov	r3, r1
 8009fbe:	4606      	mov	r6, r0
 8009fc0:	460f      	mov	r7, r1
 8009fc2:	e9dd 0100 	ldrd	r0, r1, [sp]
 8009fc6:	f7f6 f97f 	bl	80002c8 <__aeabi_dsub>
 8009fca:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8009fce:	f7f6 f97d 	bl	80002cc <__adddf3>
 8009fd2:	f10a 3aff 	add.w	sl, sl, #4294967295
 8009fd6:	e9c5 0102 	strd	r0, r1, [r5, #8]
 8009fda:	e9c5 6700 	strd	r6, r7, [r5]
 8009fde:	e76d      	b.n	8009ebc <__kernel_rem_pio2+0x50c>
 8009fe0:	ed94 7b00 	vldr	d7, [r4]
 8009fe4:	e9d4 ab02 	ldrd	sl, fp, [r4, #8]
 8009fe8:	ec51 0b17 	vmov	r0, r1, d7
 8009fec:	4652      	mov	r2, sl
 8009fee:	465b      	mov	r3, fp
 8009ff0:	ed8d 7b00 	vstr	d7, [sp]
 8009ff4:	f7f6 f96a 	bl	80002cc <__adddf3>
 8009ff8:	4602      	mov	r2, r0
 8009ffa:	460b      	mov	r3, r1
 8009ffc:	4606      	mov	r6, r0
 8009ffe:	460f      	mov	r7, r1
 800a000:	e9dd 0100 	ldrd	r0, r1, [sp]
 800a004:	f7f6 f960 	bl	80002c8 <__aeabi_dsub>
 800a008:	4652      	mov	r2, sl
 800a00a:	465b      	mov	r3, fp
 800a00c:	f7f6 f95e 	bl	80002cc <__adddf3>
 800a010:	3d01      	subs	r5, #1
 800a012:	e9c4 0102 	strd	r0, r1, [r4, #8]
 800a016:	e9c4 6700 	strd	r6, r7, [r4]
 800a01a:	e755      	b.n	8009ec8 <__kernel_rem_pio2+0x518>
 800a01c:	e974 2302 	ldrd	r2, r3, [r4, #-8]!
 800a020:	f7f6 f954 	bl	80002cc <__adddf3>
 800a024:	f108 38ff 	add.w	r8, r8, #4294967295
 800a028:	e758      	b.n	8009edc <__kernel_rem_pio2+0x52c>
 800a02a:	bf00      	nop
 800a02c:	f3af 8000 	nop.w
	...
 800a038:	41700000 	.word	0x41700000
 800a03c:	3e700000 	.word	0x3e700000
 800a040:	9b04      	ldr	r3, [sp, #16]
 800a042:	9a04      	ldr	r2, [sp, #16]
 800a044:	601f      	str	r7, [r3, #0]
 800a046:	f108 4400 	add.w	r4, r8, #2147483648	@ 0x80000000
 800a04a:	605c      	str	r4, [r3, #4]
 800a04c:	609d      	str	r5, [r3, #8]
 800a04e:	f106 4300 	add.w	r3, r6, #2147483648	@ 0x80000000
 800a052:	60d3      	str	r3, [r2, #12]
 800a054:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 800a058:	6110      	str	r0, [r2, #16]
 800a05a:	6153      	str	r3, [r2, #20]
 800a05c:	e719      	b.n	8009e92 <__kernel_rem_pio2+0x4e2>
 800a05e:	bf00      	nop

0800a060 <scalbn>:
 800a060:	b570      	push	{r4, r5, r6, lr}
 800a062:	ec55 4b10 	vmov	r4, r5, d0
 800a066:	f3c5 510a 	ubfx	r1, r5, #20, #11
 800a06a:	4606      	mov	r6, r0
 800a06c:	462b      	mov	r3, r5
 800a06e:	b991      	cbnz	r1, 800a096 <scalbn+0x36>
 800a070:	f025 4300 	bic.w	r3, r5, #2147483648	@ 0x80000000
 800a074:	4323      	orrs	r3, r4
 800a076:	d03d      	beq.n	800a0f4 <scalbn+0x94>
 800a078:	4b35      	ldr	r3, [pc, #212]	@ (800a150 <scalbn+0xf0>)
 800a07a:	4620      	mov	r0, r4
 800a07c:	4629      	mov	r1, r5
 800a07e:	2200      	movs	r2, #0
 800a080:	f7f6 fada 	bl	8000638 <__aeabi_dmul>
 800a084:	4b33      	ldr	r3, [pc, #204]	@ (800a154 <scalbn+0xf4>)
 800a086:	429e      	cmp	r6, r3
 800a088:	4604      	mov	r4, r0
 800a08a:	460d      	mov	r5, r1
 800a08c:	da0f      	bge.n	800a0ae <scalbn+0x4e>
 800a08e:	a328      	add	r3, pc, #160	@ (adr r3, 800a130 <scalbn+0xd0>)
 800a090:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a094:	e01e      	b.n	800a0d4 <scalbn+0x74>
 800a096:	f240 72ff 	movw	r2, #2047	@ 0x7ff
 800a09a:	4291      	cmp	r1, r2
 800a09c:	d10b      	bne.n	800a0b6 <scalbn+0x56>
 800a09e:	4622      	mov	r2, r4
 800a0a0:	4620      	mov	r0, r4
 800a0a2:	4629      	mov	r1, r5
 800a0a4:	f7f6 f912 	bl	80002cc <__adddf3>
 800a0a8:	4604      	mov	r4, r0
 800a0aa:	460d      	mov	r5, r1
 800a0ac:	e022      	b.n	800a0f4 <scalbn+0x94>
 800a0ae:	460b      	mov	r3, r1
 800a0b0:	f3c1 510a 	ubfx	r1, r1, #20, #11
 800a0b4:	3936      	subs	r1, #54	@ 0x36
 800a0b6:	f24c 3250 	movw	r2, #50000	@ 0xc350
 800a0ba:	4296      	cmp	r6, r2
 800a0bc:	dd0d      	ble.n	800a0da <scalbn+0x7a>
 800a0be:	2d00      	cmp	r5, #0
 800a0c0:	a11d      	add	r1, pc, #116	@ (adr r1, 800a138 <scalbn+0xd8>)
 800a0c2:	e9d1 0100 	ldrd	r0, r1, [r1]
 800a0c6:	da02      	bge.n	800a0ce <scalbn+0x6e>
 800a0c8:	a11d      	add	r1, pc, #116	@ (adr r1, 800a140 <scalbn+0xe0>)
 800a0ca:	e9d1 0100 	ldrd	r0, r1, [r1]
 800a0ce:	a31a      	add	r3, pc, #104	@ (adr r3, 800a138 <scalbn+0xd8>)
 800a0d0:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a0d4:	f7f6 fab0 	bl	8000638 <__aeabi_dmul>
 800a0d8:	e7e6      	b.n	800a0a8 <scalbn+0x48>
 800a0da:	1872      	adds	r2, r6, r1
 800a0dc:	f240 71fe 	movw	r1, #2046	@ 0x7fe
 800a0e0:	428a      	cmp	r2, r1
 800a0e2:	dcec      	bgt.n	800a0be <scalbn+0x5e>
 800a0e4:	2a00      	cmp	r2, #0
 800a0e6:	dd08      	ble.n	800a0fa <scalbn+0x9a>
 800a0e8:	f023 43ff 	bic.w	r3, r3, #2139095040	@ 0x7f800000
 800a0ec:	f423 03e0 	bic.w	r3, r3, #7340032	@ 0x700000
 800a0f0:	ea43 5502 	orr.w	r5, r3, r2, lsl #20
 800a0f4:	ec45 4b10 	vmov	d0, r4, r5
 800a0f8:	bd70      	pop	{r4, r5, r6, pc}
 800a0fa:	f112 0f35 	cmn.w	r2, #53	@ 0x35
 800a0fe:	da08      	bge.n	800a112 <scalbn+0xb2>
 800a100:	2d00      	cmp	r5, #0
 800a102:	a10b      	add	r1, pc, #44	@ (adr r1, 800a130 <scalbn+0xd0>)
 800a104:	e9d1 0100 	ldrd	r0, r1, [r1]
 800a108:	dac1      	bge.n	800a08e <scalbn+0x2e>
 800a10a:	a10f      	add	r1, pc, #60	@ (adr r1, 800a148 <scalbn+0xe8>)
 800a10c:	e9d1 0100 	ldrd	r0, r1, [r1]
 800a110:	e7bd      	b.n	800a08e <scalbn+0x2e>
 800a112:	f023 43ff 	bic.w	r3, r3, #2139095040	@ 0x7f800000
 800a116:	3236      	adds	r2, #54	@ 0x36
 800a118:	f423 03e0 	bic.w	r3, r3, #7340032	@ 0x700000
 800a11c:	ea43 5502 	orr.w	r5, r3, r2, lsl #20
 800a120:	4620      	mov	r0, r4
 800a122:	4b0d      	ldr	r3, [pc, #52]	@ (800a158 <scalbn+0xf8>)
 800a124:	4629      	mov	r1, r5
 800a126:	2200      	movs	r2, #0
 800a128:	e7d4      	b.n	800a0d4 <scalbn+0x74>
 800a12a:	bf00      	nop
 800a12c:	f3af 8000 	nop.w
 800a130:	c2f8f359 	.word	0xc2f8f359
 800a134:	01a56e1f 	.word	0x01a56e1f
 800a138:	8800759c 	.word	0x8800759c
 800a13c:	7e37e43c 	.word	0x7e37e43c
 800a140:	8800759c 	.word	0x8800759c
 800a144:	fe37e43c 	.word	0xfe37e43c
 800a148:	c2f8f359 	.word	0xc2f8f359
 800a14c:	81a56e1f 	.word	0x81a56e1f
 800a150:	43500000 	.word	0x43500000
 800a154:	ffff3cb0 	.word	0xffff3cb0
 800a158:	3c900000 	.word	0x3c900000
 800a15c:	00000000 	.word	0x00000000

0800a160 <floor>:
 800a160:	ec51 0b10 	vmov	r0, r1, d0
 800a164:	f3c1 530a 	ubfx	r3, r1, #20, #11
 800a168:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800a16c:	f2a3 36ff 	subw	r6, r3, #1023	@ 0x3ff
 800a170:	2e13      	cmp	r6, #19
 800a172:	460c      	mov	r4, r1
 800a174:	4605      	mov	r5, r0
 800a176:	4680      	mov	r8, r0
 800a178:	dc34      	bgt.n	800a1e4 <floor+0x84>
 800a17a:	2e00      	cmp	r6, #0
 800a17c:	da17      	bge.n	800a1ae <floor+0x4e>
 800a17e:	a332      	add	r3, pc, #200	@ (adr r3, 800a248 <floor+0xe8>)
 800a180:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a184:	f7f6 f8a2 	bl	80002cc <__adddf3>
 800a188:	2200      	movs	r2, #0
 800a18a:	2300      	movs	r3, #0
 800a18c:	f7f6 fce4 	bl	8000b58 <__aeabi_dcmpgt>
 800a190:	b150      	cbz	r0, 800a1a8 <floor+0x48>
 800a192:	2c00      	cmp	r4, #0
 800a194:	da55      	bge.n	800a242 <floor+0xe2>
 800a196:	f024 4400 	bic.w	r4, r4, #2147483648	@ 0x80000000
 800a19a:	432c      	orrs	r4, r5
 800a19c:	2500      	movs	r5, #0
 800a19e:	42ac      	cmp	r4, r5
 800a1a0:	4c2b      	ldr	r4, [pc, #172]	@ (800a250 <floor+0xf0>)
 800a1a2:	bf08      	it	eq
 800a1a4:	f04f 4400 	moveq.w	r4, #2147483648	@ 0x80000000
 800a1a8:	4621      	mov	r1, r4
 800a1aa:	4628      	mov	r0, r5
 800a1ac:	e023      	b.n	800a1f6 <floor+0x96>
 800a1ae:	4f29      	ldr	r7, [pc, #164]	@ (800a254 <floor+0xf4>)
 800a1b0:	4137      	asrs	r7, r6
 800a1b2:	ea01 0307 	and.w	r3, r1, r7
 800a1b6:	4303      	orrs	r3, r0
 800a1b8:	d01d      	beq.n	800a1f6 <floor+0x96>
 800a1ba:	a323      	add	r3, pc, #140	@ (adr r3, 800a248 <floor+0xe8>)
 800a1bc:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a1c0:	f7f6 f884 	bl	80002cc <__adddf3>
 800a1c4:	2200      	movs	r2, #0
 800a1c6:	2300      	movs	r3, #0
 800a1c8:	f7f6 fcc6 	bl	8000b58 <__aeabi_dcmpgt>
 800a1cc:	2800      	cmp	r0, #0
 800a1ce:	d0eb      	beq.n	800a1a8 <floor+0x48>
 800a1d0:	2c00      	cmp	r4, #0
 800a1d2:	bfbe      	ittt	lt
 800a1d4:	f44f 1380 	movlt.w	r3, #1048576	@ 0x100000
 800a1d8:	4133      	asrlt	r3, r6
 800a1da:	18e4      	addlt	r4, r4, r3
 800a1dc:	ea24 0407 	bic.w	r4, r4, r7
 800a1e0:	2500      	movs	r5, #0
 800a1e2:	e7e1      	b.n	800a1a8 <floor+0x48>
 800a1e4:	2e33      	cmp	r6, #51	@ 0x33
 800a1e6:	dd0a      	ble.n	800a1fe <floor+0x9e>
 800a1e8:	f5b6 6f80 	cmp.w	r6, #1024	@ 0x400
 800a1ec:	d103      	bne.n	800a1f6 <floor+0x96>
 800a1ee:	4602      	mov	r2, r0
 800a1f0:	460b      	mov	r3, r1
 800a1f2:	f7f6 f86b 	bl	80002cc <__adddf3>
 800a1f6:	ec41 0b10 	vmov	d0, r0, r1
 800a1fa:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800a1fe:	f2a3 4313 	subw	r3, r3, #1043	@ 0x413
 800a202:	f04f 37ff 	mov.w	r7, #4294967295
 800a206:	40df      	lsrs	r7, r3
 800a208:	4207      	tst	r7, r0
 800a20a:	d0f4      	beq.n	800a1f6 <floor+0x96>
 800a20c:	a30e      	add	r3, pc, #56	@ (adr r3, 800a248 <floor+0xe8>)
 800a20e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a212:	f7f6 f85b 	bl	80002cc <__adddf3>
 800a216:	2200      	movs	r2, #0
 800a218:	2300      	movs	r3, #0
 800a21a:	f7f6 fc9d 	bl	8000b58 <__aeabi_dcmpgt>
 800a21e:	2800      	cmp	r0, #0
 800a220:	d0c2      	beq.n	800a1a8 <floor+0x48>
 800a222:	2c00      	cmp	r4, #0
 800a224:	da0a      	bge.n	800a23c <floor+0xdc>
 800a226:	2e14      	cmp	r6, #20
 800a228:	d101      	bne.n	800a22e <floor+0xce>
 800a22a:	3401      	adds	r4, #1
 800a22c:	e006      	b.n	800a23c <floor+0xdc>
 800a22e:	f1c6 0634 	rsb	r6, r6, #52	@ 0x34
 800a232:	2301      	movs	r3, #1
 800a234:	40b3      	lsls	r3, r6
 800a236:	441d      	add	r5, r3
 800a238:	4545      	cmp	r5, r8
 800a23a:	d3f6      	bcc.n	800a22a <floor+0xca>
 800a23c:	ea25 0507 	bic.w	r5, r5, r7
 800a240:	e7b2      	b.n	800a1a8 <floor+0x48>
 800a242:	2500      	movs	r5, #0
 800a244:	462c      	mov	r4, r5
 800a246:	e7af      	b.n	800a1a8 <floor+0x48>
 800a248:	8800759c 	.word	0x8800759c
 800a24c:	7e37e43c 	.word	0x7e37e43c
 800a250:	bff00000 	.word	0xbff00000
 800a254:	000fffff 	.word	0x000fffff

0800a258 <_init>:
 800a258:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a25a:	bf00      	nop
 800a25c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800a25e:	bc08      	pop	{r3}
 800a260:	469e      	mov	lr, r3
 800a262:	4770      	bx	lr

0800a264 <_fini>:
 800a264:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a266:	bf00      	nop
 800a268:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800a26a:	bc08      	pop	{r3}
 800a26c:	469e      	mov	lr, r3
 800a26e:	4770      	bx	lr
=======
  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
<<<<<<< HEAD
 800440c:	687b      	ldr	r3, [r7, #4]
 800440e:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8004412:	b2db      	uxtb	r3, r3
 8004414:	2b01      	cmp	r3, #1
 8004416:	d001      	beq.n	800441c <HAL_TIM_Base_Start+0x18>
  {
    return HAL_ERROR;
 8004418:	2301      	movs	r3, #1
 800441a:	e046      	b.n	80044aa <HAL_TIM_Base_Start+0xa6>
=======
 8004520:	687b      	ldr	r3, [r7, #4]
 8004522:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8004526:	b2db      	uxtb	r3, r3
 8004528:	2b01      	cmp	r3, #1
 800452a:	d001      	beq.n	8004530 <HAL_TIM_Base_Start+0x18>
  {
    return HAL_ERROR;
 800452c:	2301      	movs	r3, #1
 800452e:	e046      	b.n	80045be <HAL_TIM_Base_Start+0xa6>
>>>>>>> 39e4d10438a821cc799a472af87a77c6796a1676
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
<<<<<<< HEAD
 800441c:	687b      	ldr	r3, [r7, #4]
 800441e:	2202      	movs	r2, #2
 8004420:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004424:	687b      	ldr	r3, [r7, #4]
 8004426:	681b      	ldr	r3, [r3, #0]
 8004428:	4a23      	ldr	r2, [pc, #140]	@ (80044b8 <HAL_TIM_Base_Start+0xb4>)
 800442a:	4293      	cmp	r3, r2
 800442c:	d022      	beq.n	8004474 <HAL_TIM_Base_Start+0x70>
 800442e:	687b      	ldr	r3, [r7, #4]
 8004430:	681b      	ldr	r3, [r3, #0]
 8004432:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8004436:	d01d      	beq.n	8004474 <HAL_TIM_Base_Start+0x70>
 8004438:	687b      	ldr	r3, [r7, #4]
 800443a:	681b      	ldr	r3, [r3, #0]
 800443c:	4a1f      	ldr	r2, [pc, #124]	@ (80044bc <HAL_TIM_Base_Start+0xb8>)
 800443e:	4293      	cmp	r3, r2
 8004440:	d018      	beq.n	8004474 <HAL_TIM_Base_Start+0x70>
 8004442:	687b      	ldr	r3, [r7, #4]
 8004444:	681b      	ldr	r3, [r3, #0]
 8004446:	4a1e      	ldr	r2, [pc, #120]	@ (80044c0 <HAL_TIM_Base_Start+0xbc>)
 8004448:	4293      	cmp	r3, r2
 800444a:	d013      	beq.n	8004474 <HAL_TIM_Base_Start+0x70>
 800444c:	687b      	ldr	r3, [r7, #4]
 800444e:	681b      	ldr	r3, [r3, #0]
 8004450:	4a1c      	ldr	r2, [pc, #112]	@ (80044c4 <HAL_TIM_Base_Start+0xc0>)
 8004452:	4293      	cmp	r3, r2
 8004454:	d00e      	beq.n	8004474 <HAL_TIM_Base_Start+0x70>
 8004456:	687b      	ldr	r3, [r7, #4]
 8004458:	681b      	ldr	r3, [r3, #0]
 800445a:	4a1b      	ldr	r2, [pc, #108]	@ (80044c8 <HAL_TIM_Base_Start+0xc4>)
 800445c:	4293      	cmp	r3, r2
 800445e:	d009      	beq.n	8004474 <HAL_TIM_Base_Start+0x70>
 8004460:	687b      	ldr	r3, [r7, #4]
 8004462:	681b      	ldr	r3, [r3, #0]
 8004464:	4a19      	ldr	r2, [pc, #100]	@ (80044cc <HAL_TIM_Base_Start+0xc8>)
 8004466:	4293      	cmp	r3, r2
 8004468:	d004      	beq.n	8004474 <HAL_TIM_Base_Start+0x70>
 800446a:	687b      	ldr	r3, [r7, #4]
 800446c:	681b      	ldr	r3, [r3, #0]
 800446e:	4a18      	ldr	r2, [pc, #96]	@ (80044d0 <HAL_TIM_Base_Start+0xcc>)
 8004470:	4293      	cmp	r3, r2
 8004472:	d111      	bne.n	8004498 <HAL_TIM_Base_Start+0x94>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8004474:	687b      	ldr	r3, [r7, #4]
 8004476:	681b      	ldr	r3, [r3, #0]
 8004478:	689b      	ldr	r3, [r3, #8]
 800447a:	f003 0307 	and.w	r3, r3, #7
 800447e:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004480:	68fb      	ldr	r3, [r7, #12]
 8004482:	2b06      	cmp	r3, #6
 8004484:	d010      	beq.n	80044a8 <HAL_TIM_Base_Start+0xa4>
    {
      __HAL_TIM_ENABLE(htim);
 8004486:	687b      	ldr	r3, [r7, #4]
 8004488:	681b      	ldr	r3, [r3, #0]
 800448a:	681a      	ldr	r2, [r3, #0]
 800448c:	687b      	ldr	r3, [r7, #4]
 800448e:	681b      	ldr	r3, [r3, #0]
 8004490:	f042 0201 	orr.w	r2, r2, #1
 8004494:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004496:	e007      	b.n	80044a8 <HAL_TIM_Base_Start+0xa4>
=======
 8004530:	687b      	ldr	r3, [r7, #4]
 8004532:	2202      	movs	r2, #2
 8004534:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004538:	687b      	ldr	r3, [r7, #4]
 800453a:	681b      	ldr	r3, [r3, #0]
 800453c:	4a23      	ldr	r2, [pc, #140]	@ (80045cc <HAL_TIM_Base_Start+0xb4>)
 800453e:	4293      	cmp	r3, r2
 8004540:	d022      	beq.n	8004588 <HAL_TIM_Base_Start+0x70>
 8004542:	687b      	ldr	r3, [r7, #4]
 8004544:	681b      	ldr	r3, [r3, #0]
 8004546:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800454a:	d01d      	beq.n	8004588 <HAL_TIM_Base_Start+0x70>
 800454c:	687b      	ldr	r3, [r7, #4]
 800454e:	681b      	ldr	r3, [r3, #0]
 8004550:	4a1f      	ldr	r2, [pc, #124]	@ (80045d0 <HAL_TIM_Base_Start+0xb8>)
 8004552:	4293      	cmp	r3, r2
 8004554:	d018      	beq.n	8004588 <HAL_TIM_Base_Start+0x70>
 8004556:	687b      	ldr	r3, [r7, #4]
 8004558:	681b      	ldr	r3, [r3, #0]
 800455a:	4a1e      	ldr	r2, [pc, #120]	@ (80045d4 <HAL_TIM_Base_Start+0xbc>)
 800455c:	4293      	cmp	r3, r2
 800455e:	d013      	beq.n	8004588 <HAL_TIM_Base_Start+0x70>
 8004560:	687b      	ldr	r3, [r7, #4]
 8004562:	681b      	ldr	r3, [r3, #0]
 8004564:	4a1c      	ldr	r2, [pc, #112]	@ (80045d8 <HAL_TIM_Base_Start+0xc0>)
 8004566:	4293      	cmp	r3, r2
 8004568:	d00e      	beq.n	8004588 <HAL_TIM_Base_Start+0x70>
 800456a:	687b      	ldr	r3, [r7, #4]
 800456c:	681b      	ldr	r3, [r3, #0]
 800456e:	4a1b      	ldr	r2, [pc, #108]	@ (80045dc <HAL_TIM_Base_Start+0xc4>)
 8004570:	4293      	cmp	r3, r2
 8004572:	d009      	beq.n	8004588 <HAL_TIM_Base_Start+0x70>
 8004574:	687b      	ldr	r3, [r7, #4]
 8004576:	681b      	ldr	r3, [r3, #0]
 8004578:	4a19      	ldr	r2, [pc, #100]	@ (80045e0 <HAL_TIM_Base_Start+0xc8>)
 800457a:	4293      	cmp	r3, r2
 800457c:	d004      	beq.n	8004588 <HAL_TIM_Base_Start+0x70>
 800457e:	687b      	ldr	r3, [r7, #4]
 8004580:	681b      	ldr	r3, [r3, #0]
 8004582:	4a18      	ldr	r2, [pc, #96]	@ (80045e4 <HAL_TIM_Base_Start+0xcc>)
 8004584:	4293      	cmp	r3, r2
 8004586:	d111      	bne.n	80045ac <HAL_TIM_Base_Start+0x94>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8004588:	687b      	ldr	r3, [r7, #4]
 800458a:	681b      	ldr	r3, [r3, #0]
 800458c:	689b      	ldr	r3, [r3, #8]
 800458e:	f003 0307 	and.w	r3, r3, #7
 8004592:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004594:	68fb      	ldr	r3, [r7, #12]
 8004596:	2b06      	cmp	r3, #6
 8004598:	d010      	beq.n	80045bc <HAL_TIM_Base_Start+0xa4>
    {
      __HAL_TIM_ENABLE(htim);
 800459a:	687b      	ldr	r3, [r7, #4]
 800459c:	681b      	ldr	r3, [r3, #0]
 800459e:	681a      	ldr	r2, [r3, #0]
 80045a0:	687b      	ldr	r3, [r7, #4]
 80045a2:	681b      	ldr	r3, [r3, #0]
 80045a4:	f042 0201 	orr.w	r2, r2, #1
 80045a8:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80045aa:	e007      	b.n	80045bc <HAL_TIM_Base_Start+0xa4>
>>>>>>> 39e4d10438a821cc799a472af87a77c6796a1676
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
<<<<<<< HEAD
 8004498:	687b      	ldr	r3, [r7, #4]
 800449a:	681b      	ldr	r3, [r3, #0]
 800449c:	681a      	ldr	r2, [r3, #0]
 800449e:	687b      	ldr	r3, [r7, #4]
 80044a0:	681b      	ldr	r3, [r3, #0]
 80044a2:	f042 0201 	orr.w	r2, r2, #1
 80044a6:	601a      	str	r2, [r3, #0]
=======
 80045ac:	687b      	ldr	r3, [r7, #4]
 80045ae:	681b      	ldr	r3, [r3, #0]
 80045b0:	681a      	ldr	r2, [r3, #0]
 80045b2:	687b      	ldr	r3, [r7, #4]
 80045b4:	681b      	ldr	r3, [r3, #0]
 80045b6:	f042 0201 	orr.w	r2, r2, #1
 80045ba:	601a      	str	r2, [r3, #0]
>>>>>>> 39e4d10438a821cc799a472af87a77c6796a1676
  }

  /* Return function status */
  return HAL_OK;
<<<<<<< HEAD
 80044a8:	2300      	movs	r3, #0
}
 80044aa:	4618      	mov	r0, r3
 80044ac:	3714      	adds	r7, #20
 80044ae:	46bd      	mov	sp, r7
 80044b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044b4:	4770      	bx	lr
 80044b6:	bf00      	nop
 80044b8:	40010000 	.word	0x40010000
 80044bc:	40000400 	.word	0x40000400
 80044c0:	40000800 	.word	0x40000800
 80044c4:	40000c00 	.word	0x40000c00
 80044c8:	40010400 	.word	0x40010400
 80044cc:	40014000 	.word	0x40014000
 80044d0:	40001800 	.word	0x40001800

080044d4 <HAL_TIM_Base_Start_IT>:
=======
 80045bc:	2300      	movs	r3, #0
}
 80045be:	4618      	mov	r0, r3
 80045c0:	3714      	adds	r7, #20
 80045c2:	46bd      	mov	sp, r7
 80045c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045c8:	4770      	bx	lr
 80045ca:	bf00      	nop
 80045cc:	40010000 	.word	0x40010000
 80045d0:	40000400 	.word	0x40000400
 80045d4:	40000800 	.word	0x40000800
 80045d8:	40000c00 	.word	0x40000c00
 80045dc:	40010400 	.word	0x40010400
 80045e0:	40014000 	.word	0x40014000
 80045e4:	40001800 	.word	0x40001800

080045e8 <HAL_TIM_Base_Start_IT>:
>>>>>>> 39e4d10438a821cc799a472af87a77c6796a1676
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
<<<<<<< HEAD
 80044d4:	b480      	push	{r7}
 80044d6:	b085      	sub	sp, #20
 80044d8:	af00      	add	r7, sp, #0
 80044da:	6078      	str	r0, [r7, #4]
=======
 80045e8:	b480      	push	{r7}
 80045ea:	b085      	sub	sp, #20
 80045ec:	af00      	add	r7, sp, #0
 80045ee:	6078      	str	r0, [r7, #4]
>>>>>>> 39e4d10438a821cc799a472af87a77c6796a1676

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
<<<<<<< HEAD
 80044dc:	687b      	ldr	r3, [r7, #4]
 80044de:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80044e2:	b2db      	uxtb	r3, r3
 80044e4:	2b01      	cmp	r3, #1
 80044e6:	d001      	beq.n	80044ec <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 80044e8:	2301      	movs	r3, #1
 80044ea:	e04e      	b.n	800458a <HAL_TIM_Base_Start_IT+0xb6>
=======
 80045f0:	687b      	ldr	r3, [r7, #4]
 80045f2:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80045f6:	b2db      	uxtb	r3, r3
 80045f8:	2b01      	cmp	r3, #1
 80045fa:	d001      	beq.n	8004600 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 80045fc:	2301      	movs	r3, #1
 80045fe:	e04e      	b.n	800469e <HAL_TIM_Base_Start_IT+0xb6>
>>>>>>> 39e4d10438a821cc799a472af87a77c6796a1676
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
<<<<<<< HEAD
 80044ec:	687b      	ldr	r3, [r7, #4]
 80044ee:	2202      	movs	r2, #2
 80044f0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 80044f4:	687b      	ldr	r3, [r7, #4]
 80044f6:	681b      	ldr	r3, [r3, #0]
 80044f8:	68da      	ldr	r2, [r3, #12]
 80044fa:	687b      	ldr	r3, [r7, #4]
 80044fc:	681b      	ldr	r3, [r3, #0]
 80044fe:	f042 0201 	orr.w	r2, r2, #1
 8004502:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004504:	687b      	ldr	r3, [r7, #4]
 8004506:	681b      	ldr	r3, [r3, #0]
 8004508:	4a23      	ldr	r2, [pc, #140]	@ (8004598 <HAL_TIM_Base_Start_IT+0xc4>)
 800450a:	4293      	cmp	r3, r2
 800450c:	d022      	beq.n	8004554 <HAL_TIM_Base_Start_IT+0x80>
 800450e:	687b      	ldr	r3, [r7, #4]
 8004510:	681b      	ldr	r3, [r3, #0]
 8004512:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8004516:	d01d      	beq.n	8004554 <HAL_TIM_Base_Start_IT+0x80>
 8004518:	687b      	ldr	r3, [r7, #4]
 800451a:	681b      	ldr	r3, [r3, #0]
 800451c:	4a1f      	ldr	r2, [pc, #124]	@ (800459c <HAL_TIM_Base_Start_IT+0xc8>)
 800451e:	4293      	cmp	r3, r2
 8004520:	d018      	beq.n	8004554 <HAL_TIM_Base_Start_IT+0x80>
 8004522:	687b      	ldr	r3, [r7, #4]
 8004524:	681b      	ldr	r3, [r3, #0]
 8004526:	4a1e      	ldr	r2, [pc, #120]	@ (80045a0 <HAL_TIM_Base_Start_IT+0xcc>)
 8004528:	4293      	cmp	r3, r2
 800452a:	d013      	beq.n	8004554 <HAL_TIM_Base_Start_IT+0x80>
 800452c:	687b      	ldr	r3, [r7, #4]
 800452e:	681b      	ldr	r3, [r3, #0]
 8004530:	4a1c      	ldr	r2, [pc, #112]	@ (80045a4 <HAL_TIM_Base_Start_IT+0xd0>)
 8004532:	4293      	cmp	r3, r2
 8004534:	d00e      	beq.n	8004554 <HAL_TIM_Base_Start_IT+0x80>
 8004536:	687b      	ldr	r3, [r7, #4]
 8004538:	681b      	ldr	r3, [r3, #0]
 800453a:	4a1b      	ldr	r2, [pc, #108]	@ (80045a8 <HAL_TIM_Base_Start_IT+0xd4>)
 800453c:	4293      	cmp	r3, r2
 800453e:	d009      	beq.n	8004554 <HAL_TIM_Base_Start_IT+0x80>
 8004540:	687b      	ldr	r3, [r7, #4]
 8004542:	681b      	ldr	r3, [r3, #0]
 8004544:	4a19      	ldr	r2, [pc, #100]	@ (80045ac <HAL_TIM_Base_Start_IT+0xd8>)
 8004546:	4293      	cmp	r3, r2
 8004548:	d004      	beq.n	8004554 <HAL_TIM_Base_Start_IT+0x80>
 800454a:	687b      	ldr	r3, [r7, #4]
 800454c:	681b      	ldr	r3, [r3, #0]
 800454e:	4a18      	ldr	r2, [pc, #96]	@ (80045b0 <HAL_TIM_Base_Start_IT+0xdc>)
 8004550:	4293      	cmp	r3, r2
 8004552:	d111      	bne.n	8004578 <HAL_TIM_Base_Start_IT+0xa4>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8004554:	687b      	ldr	r3, [r7, #4]
 8004556:	681b      	ldr	r3, [r3, #0]
 8004558:	689b      	ldr	r3, [r3, #8]
 800455a:	f003 0307 	and.w	r3, r3, #7
 800455e:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004560:	68fb      	ldr	r3, [r7, #12]
 8004562:	2b06      	cmp	r3, #6
 8004564:	d010      	beq.n	8004588 <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 8004566:	687b      	ldr	r3, [r7, #4]
 8004568:	681b      	ldr	r3, [r3, #0]
 800456a:	681a      	ldr	r2, [r3, #0]
 800456c:	687b      	ldr	r3, [r7, #4]
 800456e:	681b      	ldr	r3, [r3, #0]
 8004570:	f042 0201 	orr.w	r2, r2, #1
 8004574:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004576:	e007      	b.n	8004588 <HAL_TIM_Base_Start_IT+0xb4>
=======
 8004600:	687b      	ldr	r3, [r7, #4]
 8004602:	2202      	movs	r2, #2
 8004604:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8004608:	687b      	ldr	r3, [r7, #4]
 800460a:	681b      	ldr	r3, [r3, #0]
 800460c:	68da      	ldr	r2, [r3, #12]
 800460e:	687b      	ldr	r3, [r7, #4]
 8004610:	681b      	ldr	r3, [r3, #0]
 8004612:	f042 0201 	orr.w	r2, r2, #1
 8004616:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004618:	687b      	ldr	r3, [r7, #4]
 800461a:	681b      	ldr	r3, [r3, #0]
 800461c:	4a23      	ldr	r2, [pc, #140]	@ (80046ac <HAL_TIM_Base_Start_IT+0xc4>)
 800461e:	4293      	cmp	r3, r2
 8004620:	d022      	beq.n	8004668 <HAL_TIM_Base_Start_IT+0x80>
 8004622:	687b      	ldr	r3, [r7, #4]
 8004624:	681b      	ldr	r3, [r3, #0]
 8004626:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800462a:	d01d      	beq.n	8004668 <HAL_TIM_Base_Start_IT+0x80>
 800462c:	687b      	ldr	r3, [r7, #4]
 800462e:	681b      	ldr	r3, [r3, #0]
 8004630:	4a1f      	ldr	r2, [pc, #124]	@ (80046b0 <HAL_TIM_Base_Start_IT+0xc8>)
 8004632:	4293      	cmp	r3, r2
 8004634:	d018      	beq.n	8004668 <HAL_TIM_Base_Start_IT+0x80>
 8004636:	687b      	ldr	r3, [r7, #4]
 8004638:	681b      	ldr	r3, [r3, #0]
 800463a:	4a1e      	ldr	r2, [pc, #120]	@ (80046b4 <HAL_TIM_Base_Start_IT+0xcc>)
 800463c:	4293      	cmp	r3, r2
 800463e:	d013      	beq.n	8004668 <HAL_TIM_Base_Start_IT+0x80>
 8004640:	687b      	ldr	r3, [r7, #4]
 8004642:	681b      	ldr	r3, [r3, #0]
 8004644:	4a1c      	ldr	r2, [pc, #112]	@ (80046b8 <HAL_TIM_Base_Start_IT+0xd0>)
 8004646:	4293      	cmp	r3, r2
 8004648:	d00e      	beq.n	8004668 <HAL_TIM_Base_Start_IT+0x80>
 800464a:	687b      	ldr	r3, [r7, #4]
 800464c:	681b      	ldr	r3, [r3, #0]
 800464e:	4a1b      	ldr	r2, [pc, #108]	@ (80046bc <HAL_TIM_Base_Start_IT+0xd4>)
 8004650:	4293      	cmp	r3, r2
 8004652:	d009      	beq.n	8004668 <HAL_TIM_Base_Start_IT+0x80>
 8004654:	687b      	ldr	r3, [r7, #4]
 8004656:	681b      	ldr	r3, [r3, #0]
 8004658:	4a19      	ldr	r2, [pc, #100]	@ (80046c0 <HAL_TIM_Base_Start_IT+0xd8>)
 800465a:	4293      	cmp	r3, r2
 800465c:	d004      	beq.n	8004668 <HAL_TIM_Base_Start_IT+0x80>
 800465e:	687b      	ldr	r3, [r7, #4]
 8004660:	681b      	ldr	r3, [r3, #0]
 8004662:	4a18      	ldr	r2, [pc, #96]	@ (80046c4 <HAL_TIM_Base_Start_IT+0xdc>)
 8004664:	4293      	cmp	r3, r2
 8004666:	d111      	bne.n	800468c <HAL_TIM_Base_Start_IT+0xa4>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8004668:	687b      	ldr	r3, [r7, #4]
 800466a:	681b      	ldr	r3, [r3, #0]
 800466c:	689b      	ldr	r3, [r3, #8]
 800466e:	f003 0307 	and.w	r3, r3, #7
 8004672:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004674:	68fb      	ldr	r3, [r7, #12]
 8004676:	2b06      	cmp	r3, #6
 8004678:	d010      	beq.n	800469c <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 800467a:	687b      	ldr	r3, [r7, #4]
 800467c:	681b      	ldr	r3, [r3, #0]
 800467e:	681a      	ldr	r2, [r3, #0]
 8004680:	687b      	ldr	r3, [r7, #4]
 8004682:	681b      	ldr	r3, [r3, #0]
 8004684:	f042 0201 	orr.w	r2, r2, #1
 8004688:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800468a:	e007      	b.n	800469c <HAL_TIM_Base_Start_IT+0xb4>
>>>>>>> 39e4d10438a821cc799a472af87a77c6796a1676
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
<<<<<<< HEAD
 8004578:	687b      	ldr	r3, [r7, #4]
 800457a:	681b      	ldr	r3, [r3, #0]
 800457c:	681a      	ldr	r2, [r3, #0]
 800457e:	687b      	ldr	r3, [r7, #4]
 8004580:	681b      	ldr	r3, [r3, #0]
 8004582:	f042 0201 	orr.w	r2, r2, #1
 8004586:	601a      	str	r2, [r3, #0]
=======
 800468c:	687b      	ldr	r3, [r7, #4]
 800468e:	681b      	ldr	r3, [r3, #0]
 8004690:	681a      	ldr	r2, [r3, #0]
 8004692:	687b      	ldr	r3, [r7, #4]
 8004694:	681b      	ldr	r3, [r3, #0]
 8004696:	f042 0201 	orr.w	r2, r2, #1
 800469a:	601a      	str	r2, [r3, #0]
>>>>>>> 39e4d10438a821cc799a472af87a77c6796a1676
  }

  /* Return function status */
  return HAL_OK;
<<<<<<< HEAD
 8004588:	2300      	movs	r3, #0
}
 800458a:	4618      	mov	r0, r3
 800458c:	3714      	adds	r7, #20
 800458e:	46bd      	mov	sp, r7
 8004590:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004594:	4770      	bx	lr
 8004596:	bf00      	nop
 8004598:	40010000 	.word	0x40010000
 800459c:	40000400 	.word	0x40000400
 80045a0:	40000800 	.word	0x40000800
 80045a4:	40000c00 	.word	0x40000c00
 80045a8:	40010400 	.word	0x40010400
 80045ac:	40014000 	.word	0x40014000
 80045b0:	40001800 	.word	0x40001800

080045b4 <HAL_TIM_OC_Init>:
=======
 800469c:	2300      	movs	r3, #0
}
 800469e:	4618      	mov	r0, r3
 80046a0:	3714      	adds	r7, #20
 80046a2:	46bd      	mov	sp, r7
 80046a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046a8:	4770      	bx	lr
 80046aa:	bf00      	nop
 80046ac:	40010000 	.word	0x40010000
 80046b0:	40000400 	.word	0x40000400
 80046b4:	40000800 	.word	0x40000800
 80046b8:	40000c00 	.word	0x40000c00
 80046bc:	40010400 	.word	0x40010400
 80046c0:	40014000 	.word	0x40014000
 80046c4:	40001800 	.word	0x40001800

080046c8 <HAL_TIM_OC_Init>:
>>>>>>> 39e4d10438a821cc799a472af87a77c6796a1676
  *         Ex: call @ref HAL_TIM_OC_DeInit() before HAL_TIM_OC_Init()
  * @param  htim TIM Output Compare handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OC_Init(TIM_HandleTypeDef *htim)
{
<<<<<<< HEAD
 80045b4:	b580      	push	{r7, lr}
 80045b6:	b082      	sub	sp, #8
 80045b8:	af00      	add	r7, sp, #0
 80045ba:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80045bc:	687b      	ldr	r3, [r7, #4]
 80045be:	2b00      	cmp	r3, #0
 80045c0:	d101      	bne.n	80045c6 <HAL_TIM_OC_Init+0x12>
  {
    return HAL_ERROR;
 80045c2:	2301      	movs	r3, #1
 80045c4:	e041      	b.n	800464a <HAL_TIM_OC_Init+0x96>
=======
 80046c8:	b580      	push	{r7, lr}
 80046ca:	b082      	sub	sp, #8
 80046cc:	af00      	add	r7, sp, #0
 80046ce:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80046d0:	687b      	ldr	r3, [r7, #4]
 80046d2:	2b00      	cmp	r3, #0
 80046d4:	d101      	bne.n	80046da <HAL_TIM_OC_Init+0x12>
  {
    return HAL_ERROR;
 80046d6:	2301      	movs	r3, #1
 80046d8:	e041      	b.n	800475e <HAL_TIM_OC_Init+0x96>
>>>>>>> 39e4d10438a821cc799a472af87a77c6796a1676
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
<<<<<<< HEAD
 80045c6:	687b      	ldr	r3, [r7, #4]
 80045c8:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80045cc:	b2db      	uxtb	r3, r3
 80045ce:	2b00      	cmp	r3, #0
 80045d0:	d106      	bne.n	80045e0 <HAL_TIM_OC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80045d2:	687b      	ldr	r3, [r7, #4]
 80045d4:	2200      	movs	r2, #0
 80045d6:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
=======
 80046da:	687b      	ldr	r3, [r7, #4]
 80046dc:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80046e0:	b2db      	uxtb	r3, r3
 80046e2:	2b00      	cmp	r3, #0
 80046e4:	d106      	bne.n	80046f4 <HAL_TIM_OC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80046e6:	687b      	ldr	r3, [r7, #4]
 80046e8:	2200      	movs	r2, #0
 80046ea:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
>>>>>>> 39e4d10438a821cc799a472af87a77c6796a1676
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->OC_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_OC_MspInit(htim);
<<<<<<< HEAD
 80045da:	6878      	ldr	r0, [r7, #4]
 80045dc:	f000 f839 	bl	8004652 <HAL_TIM_OC_MspInit>
=======
 80046ee:	6878      	ldr	r0, [r7, #4]
 80046f0:	f000 f839 	bl	8004766 <HAL_TIM_OC_MspInit>
>>>>>>> 39e4d10438a821cc799a472af87a77c6796a1676
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
<<<<<<< HEAD
 80045e0:	687b      	ldr	r3, [r7, #4]
 80045e2:	2202      	movs	r2, #2
 80045e4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Init the base time for the Output Compare */
  TIM_Base_SetConfig(htim->Instance,  &htim->Init);
 80045e8:	687b      	ldr	r3, [r7, #4]
 80045ea:	681a      	ldr	r2, [r3, #0]
 80045ec:	687b      	ldr	r3, [r7, #4]
 80045ee:	3304      	adds	r3, #4
 80045f0:	4619      	mov	r1, r3
 80045f2:	4610      	mov	r0, r2
 80045f4:	f000 fb8a 	bl	8004d0c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80045f8:	687b      	ldr	r3, [r7, #4]
 80045fa:	2201      	movs	r2, #1
 80045fc:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004600:	687b      	ldr	r3, [r7, #4]
 8004602:	2201      	movs	r2, #1
 8004604:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8004608:	687b      	ldr	r3, [r7, #4]
 800460a:	2201      	movs	r2, #1
 800460c:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8004610:	687b      	ldr	r3, [r7, #4]
 8004612:	2201      	movs	r2, #1
 8004614:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8004618:	687b      	ldr	r3, [r7, #4]
 800461a:	2201      	movs	r2, #1
 800461c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004620:	687b      	ldr	r3, [r7, #4]
 8004622:	2201      	movs	r2, #1
 8004624:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8004628:	687b      	ldr	r3, [r7, #4]
 800462a:	2201      	movs	r2, #1
 800462c:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8004630:	687b      	ldr	r3, [r7, #4]
 8004632:	2201      	movs	r2, #1
 8004634:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8004638:	687b      	ldr	r3, [r7, #4]
 800463a:	2201      	movs	r2, #1
 800463c:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8004640:	687b      	ldr	r3, [r7, #4]
 8004642:	2201      	movs	r2, #1
 8004644:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8004648:	2300      	movs	r3, #0
}
 800464a:	4618      	mov	r0, r3
 800464c:	3708      	adds	r7, #8
 800464e:	46bd      	mov	sp, r7
 8004650:	bd80      	pop	{r7, pc}

08004652 <HAL_TIM_OC_MspInit>:
=======
 80046f4:	687b      	ldr	r3, [r7, #4]
 80046f6:	2202      	movs	r2, #2
 80046f8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Init the base time for the Output Compare */
  TIM_Base_SetConfig(htim->Instance,  &htim->Init);
 80046fc:	687b      	ldr	r3, [r7, #4]
 80046fe:	681a      	ldr	r2, [r3, #0]
 8004700:	687b      	ldr	r3, [r7, #4]
 8004702:	3304      	adds	r3, #4
 8004704:	4619      	mov	r1, r3
 8004706:	4610      	mov	r0, r2
 8004708:	f000 fb8a 	bl	8004e20 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800470c:	687b      	ldr	r3, [r7, #4]
 800470e:	2201      	movs	r2, #1
 8004710:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004714:	687b      	ldr	r3, [r7, #4]
 8004716:	2201      	movs	r2, #1
 8004718:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 800471c:	687b      	ldr	r3, [r7, #4]
 800471e:	2201      	movs	r2, #1
 8004720:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8004724:	687b      	ldr	r3, [r7, #4]
 8004726:	2201      	movs	r2, #1
 8004728:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 800472c:	687b      	ldr	r3, [r7, #4]
 800472e:	2201      	movs	r2, #1
 8004730:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004734:	687b      	ldr	r3, [r7, #4]
 8004736:	2201      	movs	r2, #1
 8004738:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 800473c:	687b      	ldr	r3, [r7, #4]
 800473e:	2201      	movs	r2, #1
 8004740:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8004744:	687b      	ldr	r3, [r7, #4]
 8004746:	2201      	movs	r2, #1
 8004748:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800474c:	687b      	ldr	r3, [r7, #4]
 800474e:	2201      	movs	r2, #1
 8004750:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8004754:	687b      	ldr	r3, [r7, #4]
 8004756:	2201      	movs	r2, #1
 8004758:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 800475c:	2300      	movs	r3, #0
}
 800475e:	4618      	mov	r0, r3
 8004760:	3708      	adds	r7, #8
 8004762:	46bd      	mov	sp, r7
 8004764:	bd80      	pop	{r7, pc}

08004766 <HAL_TIM_OC_MspInit>:
>>>>>>> 39e4d10438a821cc799a472af87a77c6796a1676
  * @brief  Initializes the TIM Output Compare MSP.
  * @param  htim TIM Output Compare handle
  * @retval None
  */
__weak void HAL_TIM_OC_MspInit(TIM_HandleTypeDef *htim)
{
<<<<<<< HEAD
 8004652:	b480      	push	{r7}
 8004654:	b083      	sub	sp, #12
 8004656:	af00      	add	r7, sp, #0
 8004658:	6078      	str	r0, [r7, #4]
=======
 8004766:	b480      	push	{r7}
 8004768:	b083      	sub	sp, #12
 800476a:	af00      	add	r7, sp, #0
 800476c:	6078      	str	r0, [r7, #4]
>>>>>>> 39e4d10438a821cc799a472af87a77c6796a1676
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_MspInit could be implemented in the user file
   */
}
<<<<<<< HEAD
 800465a:	bf00      	nop
 800465c:	370c      	adds	r7, #12
 800465e:	46bd      	mov	sp, r7
 8004660:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004664:	4770      	bx	lr
	...

08004668 <HAL_TIM_OC_Start_IT>:
=======
 800476e:	bf00      	nop
 8004770:	370c      	adds	r7, #12
 8004772:	46bd      	mov	sp, r7
 8004774:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004778:	4770      	bx	lr
	...

0800477c <HAL_TIM_OC_Start_IT>:
>>>>>>> 39e4d10438a821cc799a472af87a77c6796a1676
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OC_Start_IT(TIM_HandleTypeDef *htim, uint32_t Channel)
{
<<<<<<< HEAD
 8004668:	b580      	push	{r7, lr}
 800466a:	b084      	sub	sp, #16
 800466c:	af00      	add	r7, sp, #0
 800466e:	6078      	str	r0, [r7, #4]
 8004670:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8004672:	2300      	movs	r3, #0
 8004674:	73fb      	strb	r3, [r7, #15]
=======
 800477c:	b580      	push	{r7, lr}
 800477e:	b084      	sub	sp, #16
 8004780:	af00      	add	r7, sp, #0
 8004782:	6078      	str	r0, [r7, #4]
 8004784:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8004786:	2300      	movs	r3, #0
 8004788:	73fb      	strb	r3, [r7, #15]
>>>>>>> 39e4d10438a821cc799a472af87a77c6796a1676

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
<<<<<<< HEAD
 8004676:	683b      	ldr	r3, [r7, #0]
 8004678:	2b00      	cmp	r3, #0
 800467a:	d109      	bne.n	8004690 <HAL_TIM_OC_Start_IT+0x28>
 800467c:	687b      	ldr	r3, [r7, #4]
 800467e:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8004682:	b2db      	uxtb	r3, r3
 8004684:	2b01      	cmp	r3, #1
 8004686:	bf14      	ite	ne
 8004688:	2301      	movne	r3, #1
 800468a:	2300      	moveq	r3, #0
 800468c:	b2db      	uxtb	r3, r3
 800468e:	e022      	b.n	80046d6 <HAL_TIM_OC_Start_IT+0x6e>
 8004690:	683b      	ldr	r3, [r7, #0]
 8004692:	2b04      	cmp	r3, #4
 8004694:	d109      	bne.n	80046aa <HAL_TIM_OC_Start_IT+0x42>
 8004696:	687b      	ldr	r3, [r7, #4]
 8004698:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 800469c:	b2db      	uxtb	r3, r3
 800469e:	2b01      	cmp	r3, #1
 80046a0:	bf14      	ite	ne
 80046a2:	2301      	movne	r3, #1
 80046a4:	2300      	moveq	r3, #0
 80046a6:	b2db      	uxtb	r3, r3
 80046a8:	e015      	b.n	80046d6 <HAL_TIM_OC_Start_IT+0x6e>
 80046aa:	683b      	ldr	r3, [r7, #0]
 80046ac:	2b08      	cmp	r3, #8
 80046ae:	d109      	bne.n	80046c4 <HAL_TIM_OC_Start_IT+0x5c>
 80046b0:	687b      	ldr	r3, [r7, #4]
 80046b2:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 80046b6:	b2db      	uxtb	r3, r3
 80046b8:	2b01      	cmp	r3, #1
 80046ba:	bf14      	ite	ne
 80046bc:	2301      	movne	r3, #1
 80046be:	2300      	moveq	r3, #0
 80046c0:	b2db      	uxtb	r3, r3
 80046c2:	e008      	b.n	80046d6 <HAL_TIM_OC_Start_IT+0x6e>
 80046c4:	687b      	ldr	r3, [r7, #4]
 80046c6:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80046ca:	b2db      	uxtb	r3, r3
 80046cc:	2b01      	cmp	r3, #1
 80046ce:	bf14      	ite	ne
 80046d0:	2301      	movne	r3, #1
 80046d2:	2300      	moveq	r3, #0
 80046d4:	b2db      	uxtb	r3, r3
 80046d6:	2b00      	cmp	r3, #0
 80046d8:	d001      	beq.n	80046de <HAL_TIM_OC_Start_IT+0x76>
  {
    return HAL_ERROR;
 80046da:	2301      	movs	r3, #1
 80046dc:	e0c7      	b.n	800486e <HAL_TIM_OC_Start_IT+0x206>
=======
 800478a:	683b      	ldr	r3, [r7, #0]
 800478c:	2b00      	cmp	r3, #0
 800478e:	d109      	bne.n	80047a4 <HAL_TIM_OC_Start_IT+0x28>
 8004790:	687b      	ldr	r3, [r7, #4]
 8004792:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8004796:	b2db      	uxtb	r3, r3
 8004798:	2b01      	cmp	r3, #1
 800479a:	bf14      	ite	ne
 800479c:	2301      	movne	r3, #1
 800479e:	2300      	moveq	r3, #0
 80047a0:	b2db      	uxtb	r3, r3
 80047a2:	e022      	b.n	80047ea <HAL_TIM_OC_Start_IT+0x6e>
 80047a4:	683b      	ldr	r3, [r7, #0]
 80047a6:	2b04      	cmp	r3, #4
 80047a8:	d109      	bne.n	80047be <HAL_TIM_OC_Start_IT+0x42>
 80047aa:	687b      	ldr	r3, [r7, #4]
 80047ac:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 80047b0:	b2db      	uxtb	r3, r3
 80047b2:	2b01      	cmp	r3, #1
 80047b4:	bf14      	ite	ne
 80047b6:	2301      	movne	r3, #1
 80047b8:	2300      	moveq	r3, #0
 80047ba:	b2db      	uxtb	r3, r3
 80047bc:	e015      	b.n	80047ea <HAL_TIM_OC_Start_IT+0x6e>
 80047be:	683b      	ldr	r3, [r7, #0]
 80047c0:	2b08      	cmp	r3, #8
 80047c2:	d109      	bne.n	80047d8 <HAL_TIM_OC_Start_IT+0x5c>
 80047c4:	687b      	ldr	r3, [r7, #4]
 80047c6:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 80047ca:	b2db      	uxtb	r3, r3
 80047cc:	2b01      	cmp	r3, #1
 80047ce:	bf14      	ite	ne
 80047d0:	2301      	movne	r3, #1
 80047d2:	2300      	moveq	r3, #0
 80047d4:	b2db      	uxtb	r3, r3
 80047d6:	e008      	b.n	80047ea <HAL_TIM_OC_Start_IT+0x6e>
 80047d8:	687b      	ldr	r3, [r7, #4]
 80047da:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80047de:	b2db      	uxtb	r3, r3
 80047e0:	2b01      	cmp	r3, #1
 80047e2:	bf14      	ite	ne
 80047e4:	2301      	movne	r3, #1
 80047e6:	2300      	moveq	r3, #0
 80047e8:	b2db      	uxtb	r3, r3
 80047ea:	2b00      	cmp	r3, #0
 80047ec:	d001      	beq.n	80047f2 <HAL_TIM_OC_Start_IT+0x76>
  {
    return HAL_ERROR;
 80047ee:	2301      	movs	r3, #1
 80047f0:	e0c7      	b.n	8004982 <HAL_TIM_OC_Start_IT+0x206>
>>>>>>> 39e4d10438a821cc799a472af87a77c6796a1676
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
<<<<<<< HEAD
 80046de:	683b      	ldr	r3, [r7, #0]
 80046e0:	2b00      	cmp	r3, #0
 80046e2:	d104      	bne.n	80046ee <HAL_TIM_OC_Start_IT+0x86>
 80046e4:	687b      	ldr	r3, [r7, #4]
 80046e6:	2202      	movs	r2, #2
 80046e8:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 80046ec:	e013      	b.n	8004716 <HAL_TIM_OC_Start_IT+0xae>
 80046ee:	683b      	ldr	r3, [r7, #0]
 80046f0:	2b04      	cmp	r3, #4
 80046f2:	d104      	bne.n	80046fe <HAL_TIM_OC_Start_IT+0x96>
 80046f4:	687b      	ldr	r3, [r7, #4]
 80046f6:	2202      	movs	r2, #2
 80046f8:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 80046fc:	e00b      	b.n	8004716 <HAL_TIM_OC_Start_IT+0xae>
 80046fe:	683b      	ldr	r3, [r7, #0]
 8004700:	2b08      	cmp	r3, #8
 8004702:	d104      	bne.n	800470e <HAL_TIM_OC_Start_IT+0xa6>
 8004704:	687b      	ldr	r3, [r7, #4]
 8004706:	2202      	movs	r2, #2
 8004708:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 800470c:	e003      	b.n	8004716 <HAL_TIM_OC_Start_IT+0xae>
 800470e:	687b      	ldr	r3, [r7, #4]
 8004710:	2202      	movs	r2, #2
 8004712:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  switch (Channel)
 8004716:	683b      	ldr	r3, [r7, #0]
 8004718:	2b0c      	cmp	r3, #12
 800471a:	d841      	bhi.n	80047a0 <HAL_TIM_OC_Start_IT+0x138>
 800471c:	a201      	add	r2, pc, #4	@ (adr r2, 8004724 <HAL_TIM_OC_Start_IT+0xbc>)
 800471e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004722:	bf00      	nop
 8004724:	08004759 	.word	0x08004759
 8004728:	080047a1 	.word	0x080047a1
 800472c:	080047a1 	.word	0x080047a1
 8004730:	080047a1 	.word	0x080047a1
 8004734:	0800476b 	.word	0x0800476b
 8004738:	080047a1 	.word	0x080047a1
 800473c:	080047a1 	.word	0x080047a1
 8004740:	080047a1 	.word	0x080047a1
 8004744:	0800477d 	.word	0x0800477d
 8004748:	080047a1 	.word	0x080047a1
 800474c:	080047a1 	.word	0x080047a1
 8004750:	080047a1 	.word	0x080047a1
 8004754:	0800478f 	.word	0x0800478f
=======
 80047f2:	683b      	ldr	r3, [r7, #0]
 80047f4:	2b00      	cmp	r3, #0
 80047f6:	d104      	bne.n	8004802 <HAL_TIM_OC_Start_IT+0x86>
 80047f8:	687b      	ldr	r3, [r7, #4]
 80047fa:	2202      	movs	r2, #2
 80047fc:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8004800:	e013      	b.n	800482a <HAL_TIM_OC_Start_IT+0xae>
 8004802:	683b      	ldr	r3, [r7, #0]
 8004804:	2b04      	cmp	r3, #4
 8004806:	d104      	bne.n	8004812 <HAL_TIM_OC_Start_IT+0x96>
 8004808:	687b      	ldr	r3, [r7, #4]
 800480a:	2202      	movs	r2, #2
 800480c:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8004810:	e00b      	b.n	800482a <HAL_TIM_OC_Start_IT+0xae>
 8004812:	683b      	ldr	r3, [r7, #0]
 8004814:	2b08      	cmp	r3, #8
 8004816:	d104      	bne.n	8004822 <HAL_TIM_OC_Start_IT+0xa6>
 8004818:	687b      	ldr	r3, [r7, #4]
 800481a:	2202      	movs	r2, #2
 800481c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8004820:	e003      	b.n	800482a <HAL_TIM_OC_Start_IT+0xae>
 8004822:	687b      	ldr	r3, [r7, #4]
 8004824:	2202      	movs	r2, #2
 8004826:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  switch (Channel)
 800482a:	683b      	ldr	r3, [r7, #0]
 800482c:	2b0c      	cmp	r3, #12
 800482e:	d841      	bhi.n	80048b4 <HAL_TIM_OC_Start_IT+0x138>
 8004830:	a201      	add	r2, pc, #4	@ (adr r2, 8004838 <HAL_TIM_OC_Start_IT+0xbc>)
 8004832:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004836:	bf00      	nop
 8004838:	0800486d 	.word	0x0800486d
 800483c:	080048b5 	.word	0x080048b5
 8004840:	080048b5 	.word	0x080048b5
 8004844:	080048b5 	.word	0x080048b5
 8004848:	0800487f 	.word	0x0800487f
 800484c:	080048b5 	.word	0x080048b5
 8004850:	080048b5 	.word	0x080048b5
 8004854:	080048b5 	.word	0x080048b5
 8004858:	08004891 	.word	0x08004891
 800485c:	080048b5 	.word	0x080048b5
 8004860:	080048b5 	.word	0x080048b5
 8004864:	080048b5 	.word	0x080048b5
 8004868:	080048a3 	.word	0x080048a3
>>>>>>> 39e4d10438a821cc799a472af87a77c6796a1676
  {
    case TIM_CHANNEL_1:
    {
      /* Enable the TIM Capture/Compare 1 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC1);
<<<<<<< HEAD
 8004758:	687b      	ldr	r3, [r7, #4]
 800475a:	681b      	ldr	r3, [r3, #0]
 800475c:	68da      	ldr	r2, [r3, #12]
 800475e:	687b      	ldr	r3, [r7, #4]
 8004760:	681b      	ldr	r3, [r3, #0]
 8004762:	f042 0202 	orr.w	r2, r2, #2
 8004766:	60da      	str	r2, [r3, #12]
      break;
 8004768:	e01d      	b.n	80047a6 <HAL_TIM_OC_Start_IT+0x13e>
=======
 800486c:	687b      	ldr	r3, [r7, #4]
 800486e:	681b      	ldr	r3, [r3, #0]
 8004870:	68da      	ldr	r2, [r3, #12]
 8004872:	687b      	ldr	r3, [r7, #4]
 8004874:	681b      	ldr	r3, [r3, #0]
 8004876:	f042 0202 	orr.w	r2, r2, #2
 800487a:	60da      	str	r2, [r3, #12]
      break;
 800487c:	e01d      	b.n	80048ba <HAL_TIM_OC_Start_IT+0x13e>
>>>>>>> 39e4d10438a821cc799a472af87a77c6796a1676
    }

    case TIM_CHANNEL_2:
    {
      /* Enable the TIM Capture/Compare 2 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC2);
<<<<<<< HEAD
 800476a:	687b      	ldr	r3, [r7, #4]
 800476c:	681b      	ldr	r3, [r3, #0]
 800476e:	68da      	ldr	r2, [r3, #12]
 8004770:	687b      	ldr	r3, [r7, #4]
 8004772:	681b      	ldr	r3, [r3, #0]
 8004774:	f042 0204 	orr.w	r2, r2, #4
 8004778:	60da      	str	r2, [r3, #12]
      break;
 800477a:	e014      	b.n	80047a6 <HAL_TIM_OC_Start_IT+0x13e>
=======
 800487e:	687b      	ldr	r3, [r7, #4]
 8004880:	681b      	ldr	r3, [r3, #0]
 8004882:	68da      	ldr	r2, [r3, #12]
 8004884:	687b      	ldr	r3, [r7, #4]
 8004886:	681b      	ldr	r3, [r3, #0]
 8004888:	f042 0204 	orr.w	r2, r2, #4
 800488c:	60da      	str	r2, [r3, #12]
      break;
 800488e:	e014      	b.n	80048ba <HAL_TIM_OC_Start_IT+0x13e>
>>>>>>> 39e4d10438a821cc799a472af87a77c6796a1676
    }

    case TIM_CHANNEL_3:
    {
      /* Enable the TIM Capture/Compare 3 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC3);
<<<<<<< HEAD
 800477c:	687b      	ldr	r3, [r7, #4]
 800477e:	681b      	ldr	r3, [r3, #0]
 8004780:	68da      	ldr	r2, [r3, #12]
 8004782:	687b      	ldr	r3, [r7, #4]
 8004784:	681b      	ldr	r3, [r3, #0]
 8004786:	f042 0208 	orr.w	r2, r2, #8
 800478a:	60da      	str	r2, [r3, #12]
      break;
 800478c:	e00b      	b.n	80047a6 <HAL_TIM_OC_Start_IT+0x13e>
=======
 8004890:	687b      	ldr	r3, [r7, #4]
 8004892:	681b      	ldr	r3, [r3, #0]
 8004894:	68da      	ldr	r2, [r3, #12]
 8004896:	687b      	ldr	r3, [r7, #4]
 8004898:	681b      	ldr	r3, [r3, #0]
 800489a:	f042 0208 	orr.w	r2, r2, #8
 800489e:	60da      	str	r2, [r3, #12]
      break;
 80048a0:	e00b      	b.n	80048ba <HAL_TIM_OC_Start_IT+0x13e>
>>>>>>> 39e4d10438a821cc799a472af87a77c6796a1676
    }

    case TIM_CHANNEL_4:
    {
      /* Enable the TIM Capture/Compare 4 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC4);
<<<<<<< HEAD
 800478e:	687b      	ldr	r3, [r7, #4]
 8004790:	681b      	ldr	r3, [r3, #0]
 8004792:	68da      	ldr	r2, [r3, #12]
 8004794:	687b      	ldr	r3, [r7, #4]
 8004796:	681b      	ldr	r3, [r3, #0]
 8004798:	f042 0210 	orr.w	r2, r2, #16
 800479c:	60da      	str	r2, [r3, #12]
      break;
 800479e:	e002      	b.n	80047a6 <HAL_TIM_OC_Start_IT+0x13e>
=======
 80048a2:	687b      	ldr	r3, [r7, #4]
 80048a4:	681b      	ldr	r3, [r3, #0]
 80048a6:	68da      	ldr	r2, [r3, #12]
 80048a8:	687b      	ldr	r3, [r7, #4]
 80048aa:	681b      	ldr	r3, [r3, #0]
 80048ac:	f042 0210 	orr.w	r2, r2, #16
 80048b0:	60da      	str	r2, [r3, #12]
      break;
 80048b2:	e002      	b.n	80048ba <HAL_TIM_OC_Start_IT+0x13e>
>>>>>>> 39e4d10438a821cc799a472af87a77c6796a1676
    }

    default:
      status = HAL_ERROR;
<<<<<<< HEAD
 80047a0:	2301      	movs	r3, #1
 80047a2:	73fb      	strb	r3, [r7, #15]
      break;
 80047a4:	bf00      	nop
  }

  if (status == HAL_OK)
 80047a6:	7bfb      	ldrb	r3, [r7, #15]
 80047a8:	2b00      	cmp	r3, #0
 80047aa:	d15f      	bne.n	800486c <HAL_TIM_OC_Start_IT+0x204>
  {
    /* Enable the Output compare channel */
    TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 80047ac:	687b      	ldr	r3, [r7, #4]
 80047ae:	681b      	ldr	r3, [r3, #0]
 80047b0:	2201      	movs	r2, #1
 80047b2:	6839      	ldr	r1, [r7, #0]
 80047b4:	4618      	mov	r0, r3
 80047b6:	f000 fd9f 	bl	80052f8 <TIM_CCxChannelCmd>

    if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 80047ba:	687b      	ldr	r3, [r7, #4]
 80047bc:	681b      	ldr	r3, [r3, #0]
 80047be:	4a2e      	ldr	r2, [pc, #184]	@ (8004878 <HAL_TIM_OC_Start_IT+0x210>)
 80047c0:	4293      	cmp	r3, r2
 80047c2:	d004      	beq.n	80047ce <HAL_TIM_OC_Start_IT+0x166>
 80047c4:	687b      	ldr	r3, [r7, #4]
 80047c6:	681b      	ldr	r3, [r3, #0]
 80047c8:	4a2c      	ldr	r2, [pc, #176]	@ (800487c <HAL_TIM_OC_Start_IT+0x214>)
 80047ca:	4293      	cmp	r3, r2
 80047cc:	d101      	bne.n	80047d2 <HAL_TIM_OC_Start_IT+0x16a>
 80047ce:	2301      	movs	r3, #1
 80047d0:	e000      	b.n	80047d4 <HAL_TIM_OC_Start_IT+0x16c>
 80047d2:	2300      	movs	r3, #0
 80047d4:	2b00      	cmp	r3, #0
 80047d6:	d007      	beq.n	80047e8 <HAL_TIM_OC_Start_IT+0x180>
    {
      /* Enable the main output */
      __HAL_TIM_MOE_ENABLE(htim);
 80047d8:	687b      	ldr	r3, [r7, #4]
 80047da:	681b      	ldr	r3, [r3, #0]
 80047dc:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 80047de:	687b      	ldr	r3, [r7, #4]
 80047e0:	681b      	ldr	r3, [r3, #0]
 80047e2:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 80047e6:	645a      	str	r2, [r3, #68]	@ 0x44
=======
 80048b4:	2301      	movs	r3, #1
 80048b6:	73fb      	strb	r3, [r7, #15]
      break;
 80048b8:	bf00      	nop
  }

  if (status == HAL_OK)
 80048ba:	7bfb      	ldrb	r3, [r7, #15]
 80048bc:	2b00      	cmp	r3, #0
 80048be:	d15f      	bne.n	8004980 <HAL_TIM_OC_Start_IT+0x204>
  {
    /* Enable the Output compare channel */
    TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 80048c0:	687b      	ldr	r3, [r7, #4]
 80048c2:	681b      	ldr	r3, [r3, #0]
 80048c4:	2201      	movs	r2, #1
 80048c6:	6839      	ldr	r1, [r7, #0]
 80048c8:	4618      	mov	r0, r3
 80048ca:	f000 fd9f 	bl	800540c <TIM_CCxChannelCmd>

    if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 80048ce:	687b      	ldr	r3, [r7, #4]
 80048d0:	681b      	ldr	r3, [r3, #0]
 80048d2:	4a2e      	ldr	r2, [pc, #184]	@ (800498c <HAL_TIM_OC_Start_IT+0x210>)
 80048d4:	4293      	cmp	r3, r2
 80048d6:	d004      	beq.n	80048e2 <HAL_TIM_OC_Start_IT+0x166>
 80048d8:	687b      	ldr	r3, [r7, #4]
 80048da:	681b      	ldr	r3, [r3, #0]
 80048dc:	4a2c      	ldr	r2, [pc, #176]	@ (8004990 <HAL_TIM_OC_Start_IT+0x214>)
 80048de:	4293      	cmp	r3, r2
 80048e0:	d101      	bne.n	80048e6 <HAL_TIM_OC_Start_IT+0x16a>
 80048e2:	2301      	movs	r3, #1
 80048e4:	e000      	b.n	80048e8 <HAL_TIM_OC_Start_IT+0x16c>
 80048e6:	2300      	movs	r3, #0
 80048e8:	2b00      	cmp	r3, #0
 80048ea:	d007      	beq.n	80048fc <HAL_TIM_OC_Start_IT+0x180>
    {
      /* Enable the main output */
      __HAL_TIM_MOE_ENABLE(htim);
 80048ec:	687b      	ldr	r3, [r7, #4]
 80048ee:	681b      	ldr	r3, [r3, #0]
 80048f0:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 80048f2:	687b      	ldr	r3, [r7, #4]
 80048f4:	681b      	ldr	r3, [r3, #0]
 80048f6:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 80048fa:	645a      	str	r2, [r3, #68]	@ 0x44
>>>>>>> 39e4d10438a821cc799a472af87a77c6796a1676
    }

    /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
    if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
<<<<<<< HEAD
 80047e8:	687b      	ldr	r3, [r7, #4]
 80047ea:	681b      	ldr	r3, [r3, #0]
 80047ec:	4a22      	ldr	r2, [pc, #136]	@ (8004878 <HAL_TIM_OC_Start_IT+0x210>)
 80047ee:	4293      	cmp	r3, r2
 80047f0:	d022      	beq.n	8004838 <HAL_TIM_OC_Start_IT+0x1d0>
 80047f2:	687b      	ldr	r3, [r7, #4]
 80047f4:	681b      	ldr	r3, [r3, #0]
 80047f6:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80047fa:	d01d      	beq.n	8004838 <HAL_TIM_OC_Start_IT+0x1d0>
 80047fc:	687b      	ldr	r3, [r7, #4]
 80047fe:	681b      	ldr	r3, [r3, #0]
 8004800:	4a1f      	ldr	r2, [pc, #124]	@ (8004880 <HAL_TIM_OC_Start_IT+0x218>)
 8004802:	4293      	cmp	r3, r2
 8004804:	d018      	beq.n	8004838 <HAL_TIM_OC_Start_IT+0x1d0>
 8004806:	687b      	ldr	r3, [r7, #4]
 8004808:	681b      	ldr	r3, [r3, #0]
 800480a:	4a1e      	ldr	r2, [pc, #120]	@ (8004884 <HAL_TIM_OC_Start_IT+0x21c>)
 800480c:	4293      	cmp	r3, r2
 800480e:	d013      	beq.n	8004838 <HAL_TIM_OC_Start_IT+0x1d0>
 8004810:	687b      	ldr	r3, [r7, #4]
 8004812:	681b      	ldr	r3, [r3, #0]
 8004814:	4a1c      	ldr	r2, [pc, #112]	@ (8004888 <HAL_TIM_OC_Start_IT+0x220>)
 8004816:	4293      	cmp	r3, r2
 8004818:	d00e      	beq.n	8004838 <HAL_TIM_OC_Start_IT+0x1d0>
 800481a:	687b      	ldr	r3, [r7, #4]
 800481c:	681b      	ldr	r3, [r3, #0]
 800481e:	4a17      	ldr	r2, [pc, #92]	@ (800487c <HAL_TIM_OC_Start_IT+0x214>)
 8004820:	4293      	cmp	r3, r2
 8004822:	d009      	beq.n	8004838 <HAL_TIM_OC_Start_IT+0x1d0>
 8004824:	687b      	ldr	r3, [r7, #4]
 8004826:	681b      	ldr	r3, [r3, #0]
 8004828:	4a18      	ldr	r2, [pc, #96]	@ (800488c <HAL_TIM_OC_Start_IT+0x224>)
 800482a:	4293      	cmp	r3, r2
 800482c:	d004      	beq.n	8004838 <HAL_TIM_OC_Start_IT+0x1d0>
 800482e:	687b      	ldr	r3, [r7, #4]
 8004830:	681b      	ldr	r3, [r3, #0]
 8004832:	4a17      	ldr	r2, [pc, #92]	@ (8004890 <HAL_TIM_OC_Start_IT+0x228>)
 8004834:	4293      	cmp	r3, r2
 8004836:	d111      	bne.n	800485c <HAL_TIM_OC_Start_IT+0x1f4>
    {
      tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8004838:	687b      	ldr	r3, [r7, #4]
 800483a:	681b      	ldr	r3, [r3, #0]
 800483c:	689b      	ldr	r3, [r3, #8]
 800483e:	f003 0307 	and.w	r3, r3, #7
 8004842:	60bb      	str	r3, [r7, #8]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004844:	68bb      	ldr	r3, [r7, #8]
 8004846:	2b06      	cmp	r3, #6
 8004848:	d010      	beq.n	800486c <HAL_TIM_OC_Start_IT+0x204>
      {
        __HAL_TIM_ENABLE(htim);
 800484a:	687b      	ldr	r3, [r7, #4]
 800484c:	681b      	ldr	r3, [r3, #0]
 800484e:	681a      	ldr	r2, [r3, #0]
 8004850:	687b      	ldr	r3, [r7, #4]
 8004852:	681b      	ldr	r3, [r3, #0]
 8004854:	f042 0201 	orr.w	r2, r2, #1
 8004858:	601a      	str	r2, [r3, #0]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800485a:	e007      	b.n	800486c <HAL_TIM_OC_Start_IT+0x204>
=======
 80048fc:	687b      	ldr	r3, [r7, #4]
 80048fe:	681b      	ldr	r3, [r3, #0]
 8004900:	4a22      	ldr	r2, [pc, #136]	@ (800498c <HAL_TIM_OC_Start_IT+0x210>)
 8004902:	4293      	cmp	r3, r2
 8004904:	d022      	beq.n	800494c <HAL_TIM_OC_Start_IT+0x1d0>
 8004906:	687b      	ldr	r3, [r7, #4]
 8004908:	681b      	ldr	r3, [r3, #0]
 800490a:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800490e:	d01d      	beq.n	800494c <HAL_TIM_OC_Start_IT+0x1d0>
 8004910:	687b      	ldr	r3, [r7, #4]
 8004912:	681b      	ldr	r3, [r3, #0]
 8004914:	4a1f      	ldr	r2, [pc, #124]	@ (8004994 <HAL_TIM_OC_Start_IT+0x218>)
 8004916:	4293      	cmp	r3, r2
 8004918:	d018      	beq.n	800494c <HAL_TIM_OC_Start_IT+0x1d0>
 800491a:	687b      	ldr	r3, [r7, #4]
 800491c:	681b      	ldr	r3, [r3, #0]
 800491e:	4a1e      	ldr	r2, [pc, #120]	@ (8004998 <HAL_TIM_OC_Start_IT+0x21c>)
 8004920:	4293      	cmp	r3, r2
 8004922:	d013      	beq.n	800494c <HAL_TIM_OC_Start_IT+0x1d0>
 8004924:	687b      	ldr	r3, [r7, #4]
 8004926:	681b      	ldr	r3, [r3, #0]
 8004928:	4a1c      	ldr	r2, [pc, #112]	@ (800499c <HAL_TIM_OC_Start_IT+0x220>)
 800492a:	4293      	cmp	r3, r2
 800492c:	d00e      	beq.n	800494c <HAL_TIM_OC_Start_IT+0x1d0>
 800492e:	687b      	ldr	r3, [r7, #4]
 8004930:	681b      	ldr	r3, [r3, #0]
 8004932:	4a17      	ldr	r2, [pc, #92]	@ (8004990 <HAL_TIM_OC_Start_IT+0x214>)
 8004934:	4293      	cmp	r3, r2
 8004936:	d009      	beq.n	800494c <HAL_TIM_OC_Start_IT+0x1d0>
 8004938:	687b      	ldr	r3, [r7, #4]
 800493a:	681b      	ldr	r3, [r3, #0]
 800493c:	4a18      	ldr	r2, [pc, #96]	@ (80049a0 <HAL_TIM_OC_Start_IT+0x224>)
 800493e:	4293      	cmp	r3, r2
 8004940:	d004      	beq.n	800494c <HAL_TIM_OC_Start_IT+0x1d0>
 8004942:	687b      	ldr	r3, [r7, #4]
 8004944:	681b      	ldr	r3, [r3, #0]
 8004946:	4a17      	ldr	r2, [pc, #92]	@ (80049a4 <HAL_TIM_OC_Start_IT+0x228>)
 8004948:	4293      	cmp	r3, r2
 800494a:	d111      	bne.n	8004970 <HAL_TIM_OC_Start_IT+0x1f4>
    {
      tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800494c:	687b      	ldr	r3, [r7, #4]
 800494e:	681b      	ldr	r3, [r3, #0]
 8004950:	689b      	ldr	r3, [r3, #8]
 8004952:	f003 0307 	and.w	r3, r3, #7
 8004956:	60bb      	str	r3, [r7, #8]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004958:	68bb      	ldr	r3, [r7, #8]
 800495a:	2b06      	cmp	r3, #6
 800495c:	d010      	beq.n	8004980 <HAL_TIM_OC_Start_IT+0x204>
      {
        __HAL_TIM_ENABLE(htim);
 800495e:	687b      	ldr	r3, [r7, #4]
 8004960:	681b      	ldr	r3, [r3, #0]
 8004962:	681a      	ldr	r2, [r3, #0]
 8004964:	687b      	ldr	r3, [r7, #4]
 8004966:	681b      	ldr	r3, [r3, #0]
 8004968:	f042 0201 	orr.w	r2, r2, #1
 800496c:	601a      	str	r2, [r3, #0]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800496e:	e007      	b.n	8004980 <HAL_TIM_OC_Start_IT+0x204>
>>>>>>> 39e4d10438a821cc799a472af87a77c6796a1676
      }
    }
    else
    {
      __HAL_TIM_ENABLE(htim);
<<<<<<< HEAD
 800485c:	687b      	ldr	r3, [r7, #4]
 800485e:	681b      	ldr	r3, [r3, #0]
 8004860:	681a      	ldr	r2, [r3, #0]
 8004862:	687b      	ldr	r3, [r7, #4]
 8004864:	681b      	ldr	r3, [r3, #0]
 8004866:	f042 0201 	orr.w	r2, r2, #1
 800486a:	601a      	str	r2, [r3, #0]
=======
 8004970:	687b      	ldr	r3, [r7, #4]
 8004972:	681b      	ldr	r3, [r3, #0]
 8004974:	681a      	ldr	r2, [r3, #0]
 8004976:	687b      	ldr	r3, [r7, #4]
 8004978:	681b      	ldr	r3, [r3, #0]
 800497a:	f042 0201 	orr.w	r2, r2, #1
 800497e:	601a      	str	r2, [r3, #0]
>>>>>>> 39e4d10438a821cc799a472af87a77c6796a1676
    }
  }

  /* Return function status */
  return status;
<<<<<<< HEAD
 800486c:	7bfb      	ldrb	r3, [r7, #15]
}
 800486e:	4618      	mov	r0, r3
 8004870:	3710      	adds	r7, #16
 8004872:	46bd      	mov	sp, r7
 8004874:	bd80      	pop	{r7, pc}
 8004876:	bf00      	nop
 8004878:	40010000 	.word	0x40010000
 800487c:	40010400 	.word	0x40010400
 8004880:	40000400 	.word	0x40000400
 8004884:	40000800 	.word	0x40000800
 8004888:	40000c00 	.word	0x40000c00
 800488c:	40014000 	.word	0x40014000
 8004890:	40001800 	.word	0x40001800

08004894 <HAL_TIM_IRQHandler>:
=======
 8004980:	7bfb      	ldrb	r3, [r7, #15]
}
 8004982:	4618      	mov	r0, r3
 8004984:	3710      	adds	r7, #16
 8004986:	46bd      	mov	sp, r7
 8004988:	bd80      	pop	{r7, pc}
 800498a:	bf00      	nop
 800498c:	40010000 	.word	0x40010000
 8004990:	40010400 	.word	0x40010400
 8004994:	40000400 	.word	0x40000400
 8004998:	40000800 	.word	0x40000800
 800499c:	40000c00 	.word	0x40000c00
 80049a0:	40014000 	.word	0x40014000
 80049a4:	40001800 	.word	0x40001800

080049a8 <HAL_TIM_IRQHandler>:
>>>>>>> 39e4d10438a821cc799a472af87a77c6796a1676
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
<<<<<<< HEAD
 8004894:	b580      	push	{r7, lr}
 8004896:	b084      	sub	sp, #16
 8004898:	af00      	add	r7, sp, #0
 800489a:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 800489c:	687b      	ldr	r3, [r7, #4]
 800489e:	681b      	ldr	r3, [r3, #0]
 80048a0:	68db      	ldr	r3, [r3, #12]
 80048a2:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 80048a4:	687b      	ldr	r3, [r7, #4]
 80048a6:	681b      	ldr	r3, [r3, #0]
 80048a8:	691b      	ldr	r3, [r3, #16]
 80048aa:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 80048ac:	68bb      	ldr	r3, [r7, #8]
 80048ae:	f003 0302 	and.w	r3, r3, #2
 80048b2:	2b00      	cmp	r3, #0
 80048b4:	d020      	beq.n	80048f8 <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 80048b6:	68fb      	ldr	r3, [r7, #12]
 80048b8:	f003 0302 	and.w	r3, r3, #2
 80048bc:	2b00      	cmp	r3, #0
 80048be:	d01b      	beq.n	80048f8 <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 80048c0:	687b      	ldr	r3, [r7, #4]
 80048c2:	681b      	ldr	r3, [r3, #0]
 80048c4:	f06f 0202 	mvn.w	r2, #2
 80048c8:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80048ca:	687b      	ldr	r3, [r7, #4]
 80048cc:	2201      	movs	r2, #1
 80048ce:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80048d0:	687b      	ldr	r3, [r7, #4]
 80048d2:	681b      	ldr	r3, [r3, #0]
 80048d4:	699b      	ldr	r3, [r3, #24]
 80048d6:	f003 0303 	and.w	r3, r3, #3
 80048da:	2b00      	cmp	r3, #0
 80048dc:	d003      	beq.n	80048e6 <HAL_TIM_IRQHandler+0x52>
=======
 80049a8:	b580      	push	{r7, lr}
 80049aa:	b084      	sub	sp, #16
 80049ac:	af00      	add	r7, sp, #0
 80049ae:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 80049b0:	687b      	ldr	r3, [r7, #4]
 80049b2:	681b      	ldr	r3, [r3, #0]
 80049b4:	68db      	ldr	r3, [r3, #12]
 80049b6:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 80049b8:	687b      	ldr	r3, [r7, #4]
 80049ba:	681b      	ldr	r3, [r3, #0]
 80049bc:	691b      	ldr	r3, [r3, #16]
 80049be:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 80049c0:	68bb      	ldr	r3, [r7, #8]
 80049c2:	f003 0302 	and.w	r3, r3, #2
 80049c6:	2b00      	cmp	r3, #0
 80049c8:	d020      	beq.n	8004a0c <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 80049ca:	68fb      	ldr	r3, [r7, #12]
 80049cc:	f003 0302 	and.w	r3, r3, #2
 80049d0:	2b00      	cmp	r3, #0
 80049d2:	d01b      	beq.n	8004a0c <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 80049d4:	687b      	ldr	r3, [r7, #4]
 80049d6:	681b      	ldr	r3, [r3, #0]
 80049d8:	f06f 0202 	mvn.w	r2, #2
 80049dc:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80049de:	687b      	ldr	r3, [r7, #4]
 80049e0:	2201      	movs	r2, #1
 80049e2:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80049e4:	687b      	ldr	r3, [r7, #4]
 80049e6:	681b      	ldr	r3, [r3, #0]
 80049e8:	699b      	ldr	r3, [r3, #24]
 80049ea:	f003 0303 	and.w	r3, r3, #3
 80049ee:	2b00      	cmp	r3, #0
 80049f0:	d003      	beq.n	80049fa <HAL_TIM_IRQHandler+0x52>
>>>>>>> 39e4d10438a821cc799a472af87a77c6796a1676
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
<<<<<<< HEAD
 80048de:	6878      	ldr	r0, [r7, #4]
 80048e0:	f000 f9f5 	bl	8004cce <HAL_TIM_IC_CaptureCallback>
 80048e4:	e005      	b.n	80048f2 <HAL_TIM_IRQHandler+0x5e>
=======
 80049f2:	6878      	ldr	r0, [r7, #4]
 80049f4:	f000 f9f5 	bl	8004de2 <HAL_TIM_IC_CaptureCallback>
 80049f8:	e005      	b.n	8004a06 <HAL_TIM_IRQHandler+0x5e>
>>>>>>> 39e4d10438a821cc799a472af87a77c6796a1676
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
<<<<<<< HEAD
 80048e6:	6878      	ldr	r0, [r7, #4]
 80048e8:	f000 f9e7 	bl	8004cba <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 80048ec:	6878      	ldr	r0, [r7, #4]
 80048ee:	f000 f9f8 	bl	8004ce2 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80048f2:	687b      	ldr	r3, [r7, #4]
 80048f4:	2200      	movs	r2, #0
 80048f6:	771a      	strb	r2, [r3, #28]
=======
 80049fa:	6878      	ldr	r0, [r7, #4]
 80049fc:	f000 f9e7 	bl	8004dce <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004a00:	6878      	ldr	r0, [r7, #4]
 8004a02:	f000 f9f8 	bl	8004df6 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004a06:	687b      	ldr	r3, [r7, #4]
 8004a08:	2200      	movs	r2, #0
 8004a0a:	771a      	strb	r2, [r3, #28]
>>>>>>> 39e4d10438a821cc799a472af87a77c6796a1676
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
<<<<<<< HEAD
 80048f8:	68bb      	ldr	r3, [r7, #8]
 80048fa:	f003 0304 	and.w	r3, r3, #4
 80048fe:	2b00      	cmp	r3, #0
 8004900:	d020      	beq.n	8004944 <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 8004902:	68fb      	ldr	r3, [r7, #12]
 8004904:	f003 0304 	and.w	r3, r3, #4
 8004908:	2b00      	cmp	r3, #0
 800490a:	d01b      	beq.n	8004944 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 800490c:	687b      	ldr	r3, [r7, #4]
 800490e:	681b      	ldr	r3, [r3, #0]
 8004910:	f06f 0204 	mvn.w	r2, #4
 8004914:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8004916:	687b      	ldr	r3, [r7, #4]
 8004918:	2202      	movs	r2, #2
 800491a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 800491c:	687b      	ldr	r3, [r7, #4]
 800491e:	681b      	ldr	r3, [r3, #0]
 8004920:	699b      	ldr	r3, [r3, #24]
 8004922:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8004926:	2b00      	cmp	r3, #0
 8004928:	d003      	beq.n	8004932 <HAL_TIM_IRQHandler+0x9e>
=======
 8004a0c:	68bb      	ldr	r3, [r7, #8]
 8004a0e:	f003 0304 	and.w	r3, r3, #4
 8004a12:	2b00      	cmp	r3, #0
 8004a14:	d020      	beq.n	8004a58 <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 8004a16:	68fb      	ldr	r3, [r7, #12]
 8004a18:	f003 0304 	and.w	r3, r3, #4
 8004a1c:	2b00      	cmp	r3, #0
 8004a1e:	d01b      	beq.n	8004a58 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 8004a20:	687b      	ldr	r3, [r7, #4]
 8004a22:	681b      	ldr	r3, [r3, #0]
 8004a24:	f06f 0204 	mvn.w	r2, #4
 8004a28:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8004a2a:	687b      	ldr	r3, [r7, #4]
 8004a2c:	2202      	movs	r2, #2
 8004a2e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8004a30:	687b      	ldr	r3, [r7, #4]
 8004a32:	681b      	ldr	r3, [r3, #0]
 8004a34:	699b      	ldr	r3, [r3, #24]
 8004a36:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8004a3a:	2b00      	cmp	r3, #0
 8004a3c:	d003      	beq.n	8004a46 <HAL_TIM_IRQHandler+0x9e>
>>>>>>> 39e4d10438a821cc799a472af87a77c6796a1676
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
<<<<<<< HEAD
 800492a:	6878      	ldr	r0, [r7, #4]
 800492c:	f000 f9cf 	bl	8004cce <HAL_TIM_IC_CaptureCallback>
 8004930:	e005      	b.n	800493e <HAL_TIM_IRQHandler+0xaa>
=======
 8004a3e:	6878      	ldr	r0, [r7, #4]
 8004a40:	f000 f9cf 	bl	8004de2 <HAL_TIM_IC_CaptureCallback>
 8004a44:	e005      	b.n	8004a52 <HAL_TIM_IRQHandler+0xaa>
>>>>>>> 39e4d10438a821cc799a472af87a77c6796a1676
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
<<<<<<< HEAD
 8004932:	6878      	ldr	r0, [r7, #4]
 8004934:	f000 f9c1 	bl	8004cba <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004938:	6878      	ldr	r0, [r7, #4]
 800493a:	f000 f9d2 	bl	8004ce2 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800493e:	687b      	ldr	r3, [r7, #4]
 8004940:	2200      	movs	r2, #0
 8004942:	771a      	strb	r2, [r3, #28]
=======
 8004a46:	6878      	ldr	r0, [r7, #4]
 8004a48:	f000 f9c1 	bl	8004dce <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004a4c:	6878      	ldr	r0, [r7, #4]
 8004a4e:	f000 f9d2 	bl	8004df6 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004a52:	687b      	ldr	r3, [r7, #4]
 8004a54:	2200      	movs	r2, #0
 8004a56:	771a      	strb	r2, [r3, #28]
>>>>>>> 39e4d10438a821cc799a472af87a77c6796a1676
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
<<<<<<< HEAD
 8004944:	68bb      	ldr	r3, [r7, #8]
 8004946:	f003 0308 	and.w	r3, r3, #8
 800494a:	2b00      	cmp	r3, #0
 800494c:	d020      	beq.n	8004990 <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 800494e:	68fb      	ldr	r3, [r7, #12]
 8004950:	f003 0308 	and.w	r3, r3, #8
 8004954:	2b00      	cmp	r3, #0
 8004956:	d01b      	beq.n	8004990 <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 8004958:	687b      	ldr	r3, [r7, #4]
 800495a:	681b      	ldr	r3, [r3, #0]
 800495c:	f06f 0208 	mvn.w	r2, #8
 8004960:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8004962:	687b      	ldr	r3, [r7, #4]
 8004964:	2204      	movs	r2, #4
 8004966:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8004968:	687b      	ldr	r3, [r7, #4]
 800496a:	681b      	ldr	r3, [r3, #0]
 800496c:	69db      	ldr	r3, [r3, #28]
 800496e:	f003 0303 	and.w	r3, r3, #3
 8004972:	2b00      	cmp	r3, #0
 8004974:	d003      	beq.n	800497e <HAL_TIM_IRQHandler+0xea>
=======
 8004a58:	68bb      	ldr	r3, [r7, #8]
 8004a5a:	f003 0308 	and.w	r3, r3, #8
 8004a5e:	2b00      	cmp	r3, #0
 8004a60:	d020      	beq.n	8004aa4 <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 8004a62:	68fb      	ldr	r3, [r7, #12]
 8004a64:	f003 0308 	and.w	r3, r3, #8
 8004a68:	2b00      	cmp	r3, #0
 8004a6a:	d01b      	beq.n	8004aa4 <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 8004a6c:	687b      	ldr	r3, [r7, #4]
 8004a6e:	681b      	ldr	r3, [r3, #0]
 8004a70:	f06f 0208 	mvn.w	r2, #8
 8004a74:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8004a76:	687b      	ldr	r3, [r7, #4]
 8004a78:	2204      	movs	r2, #4
 8004a7a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8004a7c:	687b      	ldr	r3, [r7, #4]
 8004a7e:	681b      	ldr	r3, [r3, #0]
 8004a80:	69db      	ldr	r3, [r3, #28]
 8004a82:	f003 0303 	and.w	r3, r3, #3
 8004a86:	2b00      	cmp	r3, #0
 8004a88:	d003      	beq.n	8004a92 <HAL_TIM_IRQHandler+0xea>
>>>>>>> 39e4d10438a821cc799a472af87a77c6796a1676
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
<<<<<<< HEAD
 8004976:	6878      	ldr	r0, [r7, #4]
 8004978:	f000 f9a9 	bl	8004cce <HAL_TIM_IC_CaptureCallback>
 800497c:	e005      	b.n	800498a <HAL_TIM_IRQHandler+0xf6>
=======
 8004a8a:	6878      	ldr	r0, [r7, #4]
 8004a8c:	f000 f9a9 	bl	8004de2 <HAL_TIM_IC_CaptureCallback>
 8004a90:	e005      	b.n	8004a9e <HAL_TIM_IRQHandler+0xf6>
>>>>>>> 39e4d10438a821cc799a472af87a77c6796a1676
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
<<<<<<< HEAD
 800497e:	6878      	ldr	r0, [r7, #4]
 8004980:	f000 f99b 	bl	8004cba <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004984:	6878      	ldr	r0, [r7, #4]
 8004986:	f000 f9ac 	bl	8004ce2 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800498a:	687b      	ldr	r3, [r7, #4]
 800498c:	2200      	movs	r2, #0
 800498e:	771a      	strb	r2, [r3, #28]
=======
 8004a92:	6878      	ldr	r0, [r7, #4]
 8004a94:	f000 f99b 	bl	8004dce <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004a98:	6878      	ldr	r0, [r7, #4]
 8004a9a:	f000 f9ac 	bl	8004df6 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004a9e:	687b      	ldr	r3, [r7, #4]
 8004aa0:	2200      	movs	r2, #0
 8004aa2:	771a      	strb	r2, [r3, #28]
>>>>>>> 39e4d10438a821cc799a472af87a77c6796a1676
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
<<<<<<< HEAD
 8004990:	68bb      	ldr	r3, [r7, #8]
 8004992:	f003 0310 	and.w	r3, r3, #16
 8004996:	2b00      	cmp	r3, #0
 8004998:	d020      	beq.n	80049dc <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 800499a:	68fb      	ldr	r3, [r7, #12]
 800499c:	f003 0310 	and.w	r3, r3, #16
 80049a0:	2b00      	cmp	r3, #0
 80049a2:	d01b      	beq.n	80049dc <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 80049a4:	687b      	ldr	r3, [r7, #4]
 80049a6:	681b      	ldr	r3, [r3, #0]
 80049a8:	f06f 0210 	mvn.w	r2, #16
 80049ac:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80049ae:	687b      	ldr	r3, [r7, #4]
 80049b0:	2208      	movs	r2, #8
 80049b2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80049b4:	687b      	ldr	r3, [r7, #4]
 80049b6:	681b      	ldr	r3, [r3, #0]
 80049b8:	69db      	ldr	r3, [r3, #28]
 80049ba:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80049be:	2b00      	cmp	r3, #0
 80049c0:	d003      	beq.n	80049ca <HAL_TIM_IRQHandler+0x136>
=======
 8004aa4:	68bb      	ldr	r3, [r7, #8]
 8004aa6:	f003 0310 	and.w	r3, r3, #16
 8004aaa:	2b00      	cmp	r3, #0
 8004aac:	d020      	beq.n	8004af0 <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 8004aae:	68fb      	ldr	r3, [r7, #12]
 8004ab0:	f003 0310 	and.w	r3, r3, #16
 8004ab4:	2b00      	cmp	r3, #0
 8004ab6:	d01b      	beq.n	8004af0 <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 8004ab8:	687b      	ldr	r3, [r7, #4]
 8004aba:	681b      	ldr	r3, [r3, #0]
 8004abc:	f06f 0210 	mvn.w	r2, #16
 8004ac0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8004ac2:	687b      	ldr	r3, [r7, #4]
 8004ac4:	2208      	movs	r2, #8
 8004ac6:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8004ac8:	687b      	ldr	r3, [r7, #4]
 8004aca:	681b      	ldr	r3, [r3, #0]
 8004acc:	69db      	ldr	r3, [r3, #28]
 8004ace:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8004ad2:	2b00      	cmp	r3, #0
 8004ad4:	d003      	beq.n	8004ade <HAL_TIM_IRQHandler+0x136>
>>>>>>> 39e4d10438a821cc799a472af87a77c6796a1676
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
<<<<<<< HEAD
 80049c2:	6878      	ldr	r0, [r7, #4]
 80049c4:	f000 f983 	bl	8004cce <HAL_TIM_IC_CaptureCallback>
 80049c8:	e005      	b.n	80049d6 <HAL_TIM_IRQHandler+0x142>
=======
 8004ad6:	6878      	ldr	r0, [r7, #4]
 8004ad8:	f000 f983 	bl	8004de2 <HAL_TIM_IC_CaptureCallback>
 8004adc:	e005      	b.n	8004aea <HAL_TIM_IRQHandler+0x142>
>>>>>>> 39e4d10438a821cc799a472af87a77c6796a1676
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
<<<<<<< HEAD
 80049ca:	6878      	ldr	r0, [r7, #4]
 80049cc:	f000 f975 	bl	8004cba <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80049d0:	6878      	ldr	r0, [r7, #4]
 80049d2:	f000 f986 	bl	8004ce2 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80049d6:	687b      	ldr	r3, [r7, #4]
 80049d8:	2200      	movs	r2, #0
 80049da:	771a      	strb	r2, [r3, #28]
=======
 8004ade:	6878      	ldr	r0, [r7, #4]
 8004ae0:	f000 f975 	bl	8004dce <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004ae4:	6878      	ldr	r0, [r7, #4]
 8004ae6:	f000 f986 	bl	8004df6 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004aea:	687b      	ldr	r3, [r7, #4]
 8004aec:	2200      	movs	r2, #0
 8004aee:	771a      	strb	r2, [r3, #28]
>>>>>>> 39e4d10438a821cc799a472af87a77c6796a1676
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
<<<<<<< HEAD
 80049dc:	68bb      	ldr	r3, [r7, #8]
 80049de:	f003 0301 	and.w	r3, r3, #1
 80049e2:	2b00      	cmp	r3, #0
 80049e4:	d00c      	beq.n	8004a00 <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 80049e6:	68fb      	ldr	r3, [r7, #12]
 80049e8:	f003 0301 	and.w	r3, r3, #1
 80049ec:	2b00      	cmp	r3, #0
 80049ee:	d007      	beq.n	8004a00 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 80049f0:	687b      	ldr	r3, [r7, #4]
 80049f2:	681b      	ldr	r3, [r3, #0]
 80049f4:	f06f 0201 	mvn.w	r2, #1
 80049f8:	611a      	str	r2, [r3, #16]
=======
 8004af0:	68bb      	ldr	r3, [r7, #8]
 8004af2:	f003 0301 	and.w	r3, r3, #1
 8004af6:	2b00      	cmp	r3, #0
 8004af8:	d00c      	beq.n	8004b14 <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 8004afa:	68fb      	ldr	r3, [r7, #12]
 8004afc:	f003 0301 	and.w	r3, r3, #1
 8004b00:	2b00      	cmp	r3, #0
 8004b02:	d007      	beq.n	8004b14 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 8004b04:	687b      	ldr	r3, [r7, #4]
 8004b06:	681b      	ldr	r3, [r3, #0]
 8004b08:	f06f 0201 	mvn.w	r2, #1
 8004b0c:	611a      	str	r2, [r3, #16]
>>>>>>> 39e4d10438a821cc799a472af87a77c6796a1676
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
<<<<<<< HEAD
 80049fa:	6878      	ldr	r0, [r7, #4]
 80049fc:	f7fc ff82 	bl	8001904 <HAL_TIM_PeriodElapsedCallback>
=======
 8004b0e:	6878      	ldr	r0, [r7, #4]
 8004b10:	f7fc ff46 	bl	80019a0 <HAL_TIM_PeriodElapsedCallback>
>>>>>>> 39e4d10438a821cc799a472af87a77c6796a1676
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if ((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK))
<<<<<<< HEAD
 8004a00:	68bb      	ldr	r3, [r7, #8]
 8004a02:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004a06:	2b00      	cmp	r3, #0
 8004a08:	d00c      	beq.n	8004a24 <HAL_TIM_IRQHandler+0x190>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8004a0a:	68fb      	ldr	r3, [r7, #12]
 8004a0c:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004a10:	2b00      	cmp	r3, #0
 8004a12:	d007      	beq.n	8004a24 <HAL_TIM_IRQHandler+0x190>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK);
 8004a14:	687b      	ldr	r3, [r7, #4]
 8004a16:	681b      	ldr	r3, [r3, #0]
 8004a18:	f06f 0280 	mvn.w	r2, #128	@ 0x80
 8004a1c:	611a      	str	r2, [r3, #16]
=======
 8004b14:	68bb      	ldr	r3, [r7, #8]
 8004b16:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004b1a:	2b00      	cmp	r3, #0
 8004b1c:	d00c      	beq.n	8004b38 <HAL_TIM_IRQHandler+0x190>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8004b1e:	68fb      	ldr	r3, [r7, #12]
 8004b20:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004b24:	2b00      	cmp	r3, #0
 8004b26:	d007      	beq.n	8004b38 <HAL_TIM_IRQHandler+0x190>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK);
 8004b28:	687b      	ldr	r3, [r7, #4]
 8004b2a:	681b      	ldr	r3, [r3, #0]
 8004b2c:	f06f 0280 	mvn.w	r2, #128	@ 0x80
 8004b30:	611a      	str	r2, [r3, #16]
>>>>>>> 39e4d10438a821cc799a472af87a77c6796a1676
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
<<<<<<< HEAD
 8004a1e:	6878      	ldr	r0, [r7, #4]
 8004a20:	f000 fd68 	bl	80054f4 <HAL_TIMEx_BreakCallback>
=======
 8004b32:	6878      	ldr	r0, [r7, #4]
 8004b34:	f000 fd68 	bl	8005608 <HAL_TIMEx_BreakCallback>
>>>>>>> 39e4d10438a821cc799a472af87a77c6796a1676
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
<<<<<<< HEAD
 8004a24:	68bb      	ldr	r3, [r7, #8]
 8004a26:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004a2a:	2b00      	cmp	r3, #0
 8004a2c:	d00c      	beq.n	8004a48 <HAL_TIM_IRQHandler+0x1b4>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 8004a2e:	68fb      	ldr	r3, [r7, #12]
 8004a30:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004a34:	2b00      	cmp	r3, #0
 8004a36:	d007      	beq.n	8004a48 <HAL_TIM_IRQHandler+0x1b4>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 8004a38:	687b      	ldr	r3, [r7, #4]
 8004a3a:	681b      	ldr	r3, [r3, #0]
 8004a3c:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 8004a40:	611a      	str	r2, [r3, #16]
=======
 8004b38:	68bb      	ldr	r3, [r7, #8]
 8004b3a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004b3e:	2b00      	cmp	r3, #0
 8004b40:	d00c      	beq.n	8004b5c <HAL_TIM_IRQHandler+0x1b4>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 8004b42:	68fb      	ldr	r3, [r7, #12]
 8004b44:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004b48:	2b00      	cmp	r3, #0
 8004b4a:	d007      	beq.n	8004b5c <HAL_TIM_IRQHandler+0x1b4>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 8004b4c:	687b      	ldr	r3, [r7, #4]
 8004b4e:	681b      	ldr	r3, [r3, #0]
 8004b50:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 8004b54:	611a      	str	r2, [r3, #16]
>>>>>>> 39e4d10438a821cc799a472af87a77c6796a1676
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
<<<<<<< HEAD
 8004a42:	6878      	ldr	r0, [r7, #4]
 8004a44:	f000 f957 	bl	8004cf6 <HAL_TIM_TriggerCallback>
=======
 8004b56:	6878      	ldr	r0, [r7, #4]
 8004b58:	f000 f957 	bl	8004e0a <HAL_TIM_TriggerCallback>
>>>>>>> 39e4d10438a821cc799a472af87a77c6796a1676
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
<<<<<<< HEAD
 8004a48:	68bb      	ldr	r3, [r7, #8]
 8004a4a:	f003 0320 	and.w	r3, r3, #32
 8004a4e:	2b00      	cmp	r3, #0
 8004a50:	d00c      	beq.n	8004a6c <HAL_TIM_IRQHandler+0x1d8>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 8004a52:	68fb      	ldr	r3, [r7, #12]
 8004a54:	f003 0320 	and.w	r3, r3, #32
 8004a58:	2b00      	cmp	r3, #0
 8004a5a:	d007      	beq.n	8004a6c <HAL_TIM_IRQHandler+0x1d8>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 8004a5c:	687b      	ldr	r3, [r7, #4]
 8004a5e:	681b      	ldr	r3, [r3, #0]
 8004a60:	f06f 0220 	mvn.w	r2, #32
 8004a64:	611a      	str	r2, [r3, #16]
=======
 8004b5c:	68bb      	ldr	r3, [r7, #8]
 8004b5e:	f003 0320 	and.w	r3, r3, #32
 8004b62:	2b00      	cmp	r3, #0
 8004b64:	d00c      	beq.n	8004b80 <HAL_TIM_IRQHandler+0x1d8>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 8004b66:	68fb      	ldr	r3, [r7, #12]
 8004b68:	f003 0320 	and.w	r3, r3, #32
 8004b6c:	2b00      	cmp	r3, #0
 8004b6e:	d007      	beq.n	8004b80 <HAL_TIM_IRQHandler+0x1d8>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 8004b70:	687b      	ldr	r3, [r7, #4]
 8004b72:	681b      	ldr	r3, [r3, #0]
 8004b74:	f06f 0220 	mvn.w	r2, #32
 8004b78:	611a      	str	r2, [r3, #16]
>>>>>>> 39e4d10438a821cc799a472af87a77c6796a1676
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
<<<<<<< HEAD
 8004a66:	6878      	ldr	r0, [r7, #4]
 8004a68:	f000 fd3a 	bl	80054e0 <HAL_TIMEx_CommutCallback>
=======
 8004b7a:	6878      	ldr	r0, [r7, #4]
 8004b7c:	f000 fd3a 	bl	80055f4 <HAL_TIMEx_CommutCallback>
>>>>>>> 39e4d10438a821cc799a472af87a77c6796a1676
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
<<<<<<< HEAD
 8004a6c:	bf00      	nop
 8004a6e:	3710      	adds	r7, #16
 8004a70:	46bd      	mov	sp, r7
 8004a72:	bd80      	pop	{r7, pc}

08004a74 <HAL_TIM_OC_ConfigChannel>:
=======
 8004b80:	bf00      	nop
 8004b82:	3710      	adds	r7, #16
 8004b84:	46bd      	mov	sp, r7
 8004b86:	bd80      	pop	{r7, pc}

08004b88 <HAL_TIM_OC_ConfigChannel>:
>>>>>>> 39e4d10438a821cc799a472af87a77c6796a1676
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OC_ConfigChannel(TIM_HandleTypeDef *htim,
                                           const TIM_OC_InitTypeDef *sConfig,
                                           uint32_t Channel)
{
<<<<<<< HEAD
 8004a74:	b580      	push	{r7, lr}
 8004a76:	b086      	sub	sp, #24
 8004a78:	af00      	add	r7, sp, #0
 8004a7a:	60f8      	str	r0, [r7, #12]
 8004a7c:	60b9      	str	r1, [r7, #8]
 8004a7e:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8004a80:	2300      	movs	r3, #0
 8004a82:	75fb      	strb	r3, [r7, #23]
=======
 8004b88:	b580      	push	{r7, lr}
 8004b8a:	b086      	sub	sp, #24
 8004b8c:	af00      	add	r7, sp, #0
 8004b8e:	60f8      	str	r0, [r7, #12]
 8004b90:	60b9      	str	r1, [r7, #8]
 8004b92:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8004b94:	2300      	movs	r3, #0
 8004b96:	75fb      	strb	r3, [r7, #23]
>>>>>>> 39e4d10438a821cc799a472af87a77c6796a1676
  assert_param(IS_TIM_CHANNELS(Channel));
  assert_param(IS_TIM_OC_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));

  /* Process Locked */
  __HAL_LOCK(htim);
<<<<<<< HEAD
 8004a84:	68fb      	ldr	r3, [r7, #12]
 8004a86:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8004a8a:	2b01      	cmp	r3, #1
 8004a8c:	d101      	bne.n	8004a92 <HAL_TIM_OC_ConfigChannel+0x1e>
 8004a8e:	2302      	movs	r3, #2
 8004a90:	e048      	b.n	8004b24 <HAL_TIM_OC_ConfigChannel+0xb0>
 8004a92:	68fb      	ldr	r3, [r7, #12]
 8004a94:	2201      	movs	r2, #1
 8004a96:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  switch (Channel)
 8004a9a:	687b      	ldr	r3, [r7, #4]
 8004a9c:	2b0c      	cmp	r3, #12
 8004a9e:	d839      	bhi.n	8004b14 <HAL_TIM_OC_ConfigChannel+0xa0>
 8004aa0:	a201      	add	r2, pc, #4	@ (adr r2, 8004aa8 <HAL_TIM_OC_ConfigChannel+0x34>)
 8004aa2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004aa6:	bf00      	nop
 8004aa8:	08004add 	.word	0x08004add
 8004aac:	08004b15 	.word	0x08004b15
 8004ab0:	08004b15 	.word	0x08004b15
 8004ab4:	08004b15 	.word	0x08004b15
 8004ab8:	08004aeb 	.word	0x08004aeb
 8004abc:	08004b15 	.word	0x08004b15
 8004ac0:	08004b15 	.word	0x08004b15
 8004ac4:	08004b15 	.word	0x08004b15
 8004ac8:	08004af9 	.word	0x08004af9
 8004acc:	08004b15 	.word	0x08004b15
 8004ad0:	08004b15 	.word	0x08004b15
 8004ad4:	08004b15 	.word	0x08004b15
 8004ad8:	08004b07 	.word	0x08004b07
=======
 8004b98:	68fb      	ldr	r3, [r7, #12]
 8004b9a:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8004b9e:	2b01      	cmp	r3, #1
 8004ba0:	d101      	bne.n	8004ba6 <HAL_TIM_OC_ConfigChannel+0x1e>
 8004ba2:	2302      	movs	r3, #2
 8004ba4:	e048      	b.n	8004c38 <HAL_TIM_OC_ConfigChannel+0xb0>
 8004ba6:	68fb      	ldr	r3, [r7, #12]
 8004ba8:	2201      	movs	r2, #1
 8004baa:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  switch (Channel)
 8004bae:	687b      	ldr	r3, [r7, #4]
 8004bb0:	2b0c      	cmp	r3, #12
 8004bb2:	d839      	bhi.n	8004c28 <HAL_TIM_OC_ConfigChannel+0xa0>
 8004bb4:	a201      	add	r2, pc, #4	@ (adr r2, 8004bbc <HAL_TIM_OC_ConfigChannel+0x34>)
 8004bb6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004bba:	bf00      	nop
 8004bbc:	08004bf1 	.word	0x08004bf1
 8004bc0:	08004c29 	.word	0x08004c29
 8004bc4:	08004c29 	.word	0x08004c29
 8004bc8:	08004c29 	.word	0x08004c29
 8004bcc:	08004bff 	.word	0x08004bff
 8004bd0:	08004c29 	.word	0x08004c29
 8004bd4:	08004c29 	.word	0x08004c29
 8004bd8:	08004c29 	.word	0x08004c29
 8004bdc:	08004c0d 	.word	0x08004c0d
 8004be0:	08004c29 	.word	0x08004c29
 8004be4:	08004c29 	.word	0x08004c29
 8004be8:	08004c29 	.word	0x08004c29
 8004bec:	08004c1b 	.word	0x08004c1b
>>>>>>> 39e4d10438a821cc799a472af87a77c6796a1676
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 1 in Output Compare */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
<<<<<<< HEAD
 8004adc:	68fb      	ldr	r3, [r7, #12]
 8004ade:	681b      	ldr	r3, [r3, #0]
 8004ae0:	68b9      	ldr	r1, [r7, #8]
 8004ae2:	4618      	mov	r0, r3
 8004ae4:	f000 f9be 	bl	8004e64 <TIM_OC1_SetConfig>
      break;
 8004ae8:	e017      	b.n	8004b1a <HAL_TIM_OC_ConfigChannel+0xa6>
=======
 8004bf0:	68fb      	ldr	r3, [r7, #12]
 8004bf2:	681b      	ldr	r3, [r3, #0]
 8004bf4:	68b9      	ldr	r1, [r7, #8]
 8004bf6:	4618      	mov	r0, r3
 8004bf8:	f000 f9be 	bl	8004f78 <TIM_OC1_SetConfig>
      break;
 8004bfc:	e017      	b.n	8004c2e <HAL_TIM_OC_ConfigChannel+0xa6>
>>>>>>> 39e4d10438a821cc799a472af87a77c6796a1676
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 2 in Output Compare */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
<<<<<<< HEAD
 8004aea:	68fb      	ldr	r3, [r7, #12]
 8004aec:	681b      	ldr	r3, [r3, #0]
 8004aee:	68b9      	ldr	r1, [r7, #8]
 8004af0:	4618      	mov	r0, r3
 8004af2:	f000 fa27 	bl	8004f44 <TIM_OC2_SetConfig>
      break;
 8004af6:	e010      	b.n	8004b1a <HAL_TIM_OC_ConfigChannel+0xa6>
=======
 8004bfe:	68fb      	ldr	r3, [r7, #12]
 8004c00:	681b      	ldr	r3, [r3, #0]
 8004c02:	68b9      	ldr	r1, [r7, #8]
 8004c04:	4618      	mov	r0, r3
 8004c06:	f000 fa27 	bl	8005058 <TIM_OC2_SetConfig>
      break;
 8004c0a:	e010      	b.n	8004c2e <HAL_TIM_OC_ConfigChannel+0xa6>
>>>>>>> 39e4d10438a821cc799a472af87a77c6796a1676
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 3 in Output Compare */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
<<<<<<< HEAD
 8004af8:	68fb      	ldr	r3, [r7, #12]
 8004afa:	681b      	ldr	r3, [r3, #0]
 8004afc:	68b9      	ldr	r1, [r7, #8]
 8004afe:	4618      	mov	r0, r3
 8004b00:	f000 fa96 	bl	8005030 <TIM_OC3_SetConfig>
      break;
 8004b04:	e009      	b.n	8004b1a <HAL_TIM_OC_ConfigChannel+0xa6>
=======
 8004c0c:	68fb      	ldr	r3, [r7, #12]
 8004c0e:	681b      	ldr	r3, [r3, #0]
 8004c10:	68b9      	ldr	r1, [r7, #8]
 8004c12:	4618      	mov	r0, r3
 8004c14:	f000 fa96 	bl	8005144 <TIM_OC3_SetConfig>
      break;
 8004c18:	e009      	b.n	8004c2e <HAL_TIM_OC_ConfigChannel+0xa6>
>>>>>>> 39e4d10438a821cc799a472af87a77c6796a1676
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 4 in Output Compare */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
<<<<<<< HEAD
 8004b06:	68fb      	ldr	r3, [r7, #12]
 8004b08:	681b      	ldr	r3, [r3, #0]
 8004b0a:	68b9      	ldr	r1, [r7, #8]
 8004b0c:	4618      	mov	r0, r3
 8004b0e:	f000 fb03 	bl	8005118 <TIM_OC4_SetConfig>
      break;
 8004b12:	e002      	b.n	8004b1a <HAL_TIM_OC_ConfigChannel+0xa6>
=======
 8004c1a:	68fb      	ldr	r3, [r7, #12]
 8004c1c:	681b      	ldr	r3, [r3, #0]
 8004c1e:	68b9      	ldr	r1, [r7, #8]
 8004c20:	4618      	mov	r0, r3
 8004c22:	f000 fb03 	bl	800522c <TIM_OC4_SetConfig>
      break;
 8004c26:	e002      	b.n	8004c2e <HAL_TIM_OC_ConfigChannel+0xa6>
>>>>>>> 39e4d10438a821cc799a472af87a77c6796a1676
    }

    default:
      status = HAL_ERROR;
<<<<<<< HEAD
 8004b14:	2301      	movs	r3, #1
 8004b16:	75fb      	strb	r3, [r7, #23]
      break;
 8004b18:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8004b1a:	68fb      	ldr	r3, [r7, #12]
 8004b1c:	2200      	movs	r2, #0
 8004b1e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8004b22:	7dfb      	ldrb	r3, [r7, #23]
}
 8004b24:	4618      	mov	r0, r3
 8004b26:	3718      	adds	r7, #24
 8004b28:	46bd      	mov	sp, r7
 8004b2a:	bd80      	pop	{r7, pc}

08004b2c <HAL_TIM_ConfigClockSource>:
=======
 8004c28:	2301      	movs	r3, #1
 8004c2a:	75fb      	strb	r3, [r7, #23]
      break;
 8004c2c:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8004c2e:	68fb      	ldr	r3, [r7, #12]
 8004c30:	2200      	movs	r2, #0
 8004c32:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8004c36:	7dfb      	ldrb	r3, [r7, #23]
}
 8004c38:	4618      	mov	r0, r3
 8004c3a:	3718      	adds	r7, #24
 8004c3c:	46bd      	mov	sp, r7
 8004c3e:	bd80      	pop	{r7, pc}

08004c40 <HAL_TIM_ConfigClockSource>:
>>>>>>> 39e4d10438a821cc799a472af87a77c6796a1676
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
<<<<<<< HEAD
 8004b2c:	b580      	push	{r7, lr}
 8004b2e:	b084      	sub	sp, #16
 8004b30:	af00      	add	r7, sp, #0
 8004b32:	6078      	str	r0, [r7, #4]
 8004b34:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8004b36:	2300      	movs	r3, #0
 8004b38:	73fb      	strb	r3, [r7, #15]
=======
 8004c40:	b580      	push	{r7, lr}
 8004c42:	b084      	sub	sp, #16
 8004c44:	af00      	add	r7, sp, #0
 8004c46:	6078      	str	r0, [r7, #4]
 8004c48:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8004c4a:	2300      	movs	r3, #0
 8004c4c:	73fb      	strb	r3, [r7, #15]
>>>>>>> 39e4d10438a821cc799a472af87a77c6796a1676
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
<<<<<<< HEAD
 8004b3a:	687b      	ldr	r3, [r7, #4]
 8004b3c:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8004b40:	2b01      	cmp	r3, #1
 8004b42:	d101      	bne.n	8004b48 <HAL_TIM_ConfigClockSource+0x1c>
 8004b44:	2302      	movs	r3, #2
 8004b46:	e0b4      	b.n	8004cb2 <HAL_TIM_ConfigClockSource+0x186>
 8004b48:	687b      	ldr	r3, [r7, #4]
 8004b4a:	2201      	movs	r2, #1
 8004b4c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8004b50:	687b      	ldr	r3, [r7, #4]
 8004b52:	2202      	movs	r2, #2
 8004b54:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
=======
 8004c4e:	687b      	ldr	r3, [r7, #4]
 8004c50:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8004c54:	2b01      	cmp	r3, #1
 8004c56:	d101      	bne.n	8004c5c <HAL_TIM_ConfigClockSource+0x1c>
 8004c58:	2302      	movs	r3, #2
 8004c5a:	e0b4      	b.n	8004dc6 <HAL_TIM_ConfigClockSource+0x186>
 8004c5c:	687b      	ldr	r3, [r7, #4]
 8004c5e:	2201      	movs	r2, #1
 8004c60:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8004c64:	687b      	ldr	r3, [r7, #4]
 8004c66:	2202      	movs	r2, #2
 8004c68:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
>>>>>>> 39e4d10438a821cc799a472af87a77c6796a1676

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
<<<<<<< HEAD
 8004b58:	687b      	ldr	r3, [r7, #4]
 8004b5a:	681b      	ldr	r3, [r3, #0]
 8004b5c:	689b      	ldr	r3, [r3, #8]
 8004b5e:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8004b60:	68bb      	ldr	r3, [r7, #8]
 8004b62:	f023 0377 	bic.w	r3, r3, #119	@ 0x77
 8004b66:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8004b68:	68bb      	ldr	r3, [r7, #8]
 8004b6a:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8004b6e:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8004b70:	687b      	ldr	r3, [r7, #4]
 8004b72:	681b      	ldr	r3, [r3, #0]
 8004b74:	68ba      	ldr	r2, [r7, #8]
 8004b76:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8004b78:	683b      	ldr	r3, [r7, #0]
 8004b7a:	681b      	ldr	r3, [r3, #0]
 8004b7c:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8004b80:	d03e      	beq.n	8004c00 <HAL_TIM_ConfigClockSource+0xd4>
 8004b82:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8004b86:	f200 8087 	bhi.w	8004c98 <HAL_TIM_ConfigClockSource+0x16c>
 8004b8a:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8004b8e:	f000 8086 	beq.w	8004c9e <HAL_TIM_ConfigClockSource+0x172>
 8004b92:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8004b96:	d87f      	bhi.n	8004c98 <HAL_TIM_ConfigClockSource+0x16c>
 8004b98:	2b70      	cmp	r3, #112	@ 0x70
 8004b9a:	d01a      	beq.n	8004bd2 <HAL_TIM_ConfigClockSource+0xa6>
 8004b9c:	2b70      	cmp	r3, #112	@ 0x70
 8004b9e:	d87b      	bhi.n	8004c98 <HAL_TIM_ConfigClockSource+0x16c>
 8004ba0:	2b60      	cmp	r3, #96	@ 0x60
 8004ba2:	d050      	beq.n	8004c46 <HAL_TIM_ConfigClockSource+0x11a>
 8004ba4:	2b60      	cmp	r3, #96	@ 0x60
 8004ba6:	d877      	bhi.n	8004c98 <HAL_TIM_ConfigClockSource+0x16c>
 8004ba8:	2b50      	cmp	r3, #80	@ 0x50
 8004baa:	d03c      	beq.n	8004c26 <HAL_TIM_ConfigClockSource+0xfa>
 8004bac:	2b50      	cmp	r3, #80	@ 0x50
 8004bae:	d873      	bhi.n	8004c98 <HAL_TIM_ConfigClockSource+0x16c>
 8004bb0:	2b40      	cmp	r3, #64	@ 0x40
 8004bb2:	d058      	beq.n	8004c66 <HAL_TIM_ConfigClockSource+0x13a>
 8004bb4:	2b40      	cmp	r3, #64	@ 0x40
 8004bb6:	d86f      	bhi.n	8004c98 <HAL_TIM_ConfigClockSource+0x16c>
 8004bb8:	2b30      	cmp	r3, #48	@ 0x30
 8004bba:	d064      	beq.n	8004c86 <HAL_TIM_ConfigClockSource+0x15a>
 8004bbc:	2b30      	cmp	r3, #48	@ 0x30
 8004bbe:	d86b      	bhi.n	8004c98 <HAL_TIM_ConfigClockSource+0x16c>
 8004bc0:	2b20      	cmp	r3, #32
 8004bc2:	d060      	beq.n	8004c86 <HAL_TIM_ConfigClockSource+0x15a>
 8004bc4:	2b20      	cmp	r3, #32
 8004bc6:	d867      	bhi.n	8004c98 <HAL_TIM_ConfigClockSource+0x16c>
 8004bc8:	2b00      	cmp	r3, #0
 8004bca:	d05c      	beq.n	8004c86 <HAL_TIM_ConfigClockSource+0x15a>
 8004bcc:	2b10      	cmp	r3, #16
 8004bce:	d05a      	beq.n	8004c86 <HAL_TIM_ConfigClockSource+0x15a>
 8004bd0:	e062      	b.n	8004c98 <HAL_TIM_ConfigClockSource+0x16c>
=======
 8004c6c:	687b      	ldr	r3, [r7, #4]
 8004c6e:	681b      	ldr	r3, [r3, #0]
 8004c70:	689b      	ldr	r3, [r3, #8]
 8004c72:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8004c74:	68bb      	ldr	r3, [r7, #8]
 8004c76:	f023 0377 	bic.w	r3, r3, #119	@ 0x77
 8004c7a:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8004c7c:	68bb      	ldr	r3, [r7, #8]
 8004c7e:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8004c82:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8004c84:	687b      	ldr	r3, [r7, #4]
 8004c86:	681b      	ldr	r3, [r3, #0]
 8004c88:	68ba      	ldr	r2, [r7, #8]
 8004c8a:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8004c8c:	683b      	ldr	r3, [r7, #0]
 8004c8e:	681b      	ldr	r3, [r3, #0]
 8004c90:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8004c94:	d03e      	beq.n	8004d14 <HAL_TIM_ConfigClockSource+0xd4>
 8004c96:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8004c9a:	f200 8087 	bhi.w	8004dac <HAL_TIM_ConfigClockSource+0x16c>
 8004c9e:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8004ca2:	f000 8086 	beq.w	8004db2 <HAL_TIM_ConfigClockSource+0x172>
 8004ca6:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8004caa:	d87f      	bhi.n	8004dac <HAL_TIM_ConfigClockSource+0x16c>
 8004cac:	2b70      	cmp	r3, #112	@ 0x70
 8004cae:	d01a      	beq.n	8004ce6 <HAL_TIM_ConfigClockSource+0xa6>
 8004cb0:	2b70      	cmp	r3, #112	@ 0x70
 8004cb2:	d87b      	bhi.n	8004dac <HAL_TIM_ConfigClockSource+0x16c>
 8004cb4:	2b60      	cmp	r3, #96	@ 0x60
 8004cb6:	d050      	beq.n	8004d5a <HAL_TIM_ConfigClockSource+0x11a>
 8004cb8:	2b60      	cmp	r3, #96	@ 0x60
 8004cba:	d877      	bhi.n	8004dac <HAL_TIM_ConfigClockSource+0x16c>
 8004cbc:	2b50      	cmp	r3, #80	@ 0x50
 8004cbe:	d03c      	beq.n	8004d3a <HAL_TIM_ConfigClockSource+0xfa>
 8004cc0:	2b50      	cmp	r3, #80	@ 0x50
 8004cc2:	d873      	bhi.n	8004dac <HAL_TIM_ConfigClockSource+0x16c>
 8004cc4:	2b40      	cmp	r3, #64	@ 0x40
 8004cc6:	d058      	beq.n	8004d7a <HAL_TIM_ConfigClockSource+0x13a>
 8004cc8:	2b40      	cmp	r3, #64	@ 0x40
 8004cca:	d86f      	bhi.n	8004dac <HAL_TIM_ConfigClockSource+0x16c>
 8004ccc:	2b30      	cmp	r3, #48	@ 0x30
 8004cce:	d064      	beq.n	8004d9a <HAL_TIM_ConfigClockSource+0x15a>
 8004cd0:	2b30      	cmp	r3, #48	@ 0x30
 8004cd2:	d86b      	bhi.n	8004dac <HAL_TIM_ConfigClockSource+0x16c>
 8004cd4:	2b20      	cmp	r3, #32
 8004cd6:	d060      	beq.n	8004d9a <HAL_TIM_ConfigClockSource+0x15a>
 8004cd8:	2b20      	cmp	r3, #32
 8004cda:	d867      	bhi.n	8004dac <HAL_TIM_ConfigClockSource+0x16c>
 8004cdc:	2b00      	cmp	r3, #0
 8004cde:	d05c      	beq.n	8004d9a <HAL_TIM_ConfigClockSource+0x15a>
 8004ce0:	2b10      	cmp	r3, #16
 8004ce2:	d05a      	beq.n	8004d9a <HAL_TIM_ConfigClockSource+0x15a>
 8004ce4:	e062      	b.n	8004dac <HAL_TIM_ConfigClockSource+0x16c>
>>>>>>> 39e4d10438a821cc799a472af87a77c6796a1676
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
<<<<<<< HEAD
 8004bd2:	687b      	ldr	r3, [r7, #4]
 8004bd4:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8004bd6:	683b      	ldr	r3, [r7, #0]
 8004bd8:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8004bda:	683b      	ldr	r3, [r7, #0]
 8004bdc:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8004bde:	683b      	ldr	r3, [r7, #0]
 8004be0:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8004be2:	f000 fb69 	bl	80052b8 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8004be6:	687b      	ldr	r3, [r7, #4]
 8004be8:	681b      	ldr	r3, [r3, #0]
 8004bea:	689b      	ldr	r3, [r3, #8]
 8004bec:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8004bee:	68bb      	ldr	r3, [r7, #8]
 8004bf0:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 8004bf4:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8004bf6:	687b      	ldr	r3, [r7, #4]
 8004bf8:	681b      	ldr	r3, [r3, #0]
 8004bfa:	68ba      	ldr	r2, [r7, #8]
 8004bfc:	609a      	str	r2, [r3, #8]
      break;
 8004bfe:	e04f      	b.n	8004ca0 <HAL_TIM_ConfigClockSource+0x174>
=======
 8004ce6:	687b      	ldr	r3, [r7, #4]
 8004ce8:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8004cea:	683b      	ldr	r3, [r7, #0]
 8004cec:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8004cee:	683b      	ldr	r3, [r7, #0]
 8004cf0:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8004cf2:	683b      	ldr	r3, [r7, #0]
 8004cf4:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8004cf6:	f000 fb69 	bl	80053cc <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8004cfa:	687b      	ldr	r3, [r7, #4]
 8004cfc:	681b      	ldr	r3, [r3, #0]
 8004cfe:	689b      	ldr	r3, [r3, #8]
 8004d00:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8004d02:	68bb      	ldr	r3, [r7, #8]
 8004d04:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 8004d08:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8004d0a:	687b      	ldr	r3, [r7, #4]
 8004d0c:	681b      	ldr	r3, [r3, #0]
 8004d0e:	68ba      	ldr	r2, [r7, #8]
 8004d10:	609a      	str	r2, [r3, #8]
      break;
 8004d12:	e04f      	b.n	8004db4 <HAL_TIM_ConfigClockSource+0x174>
>>>>>>> 39e4d10438a821cc799a472af87a77c6796a1676
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
<<<<<<< HEAD
 8004c00:	687b      	ldr	r3, [r7, #4]
 8004c02:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8004c04:	683b      	ldr	r3, [r7, #0]
 8004c06:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8004c08:	683b      	ldr	r3, [r7, #0]
 8004c0a:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8004c0c:	683b      	ldr	r3, [r7, #0]
 8004c0e:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8004c10:	f000 fb52 	bl	80052b8 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8004c14:	687b      	ldr	r3, [r7, #4]
 8004c16:	681b      	ldr	r3, [r3, #0]
 8004c18:	689a      	ldr	r2, [r3, #8]
 8004c1a:	687b      	ldr	r3, [r7, #4]
 8004c1c:	681b      	ldr	r3, [r3, #0]
 8004c1e:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8004c22:	609a      	str	r2, [r3, #8]
      break;
 8004c24:	e03c      	b.n	8004ca0 <HAL_TIM_ConfigClockSource+0x174>
=======
 8004d14:	687b      	ldr	r3, [r7, #4]
 8004d16:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8004d18:	683b      	ldr	r3, [r7, #0]
 8004d1a:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8004d1c:	683b      	ldr	r3, [r7, #0]
 8004d1e:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8004d20:	683b      	ldr	r3, [r7, #0]
 8004d22:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8004d24:	f000 fb52 	bl	80053cc <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8004d28:	687b      	ldr	r3, [r7, #4]
 8004d2a:	681b      	ldr	r3, [r3, #0]
 8004d2c:	689a      	ldr	r2, [r3, #8]
 8004d2e:	687b      	ldr	r3, [r7, #4]
 8004d30:	681b      	ldr	r3, [r3, #0]
 8004d32:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8004d36:	609a      	str	r2, [r3, #8]
      break;
 8004d38:	e03c      	b.n	8004db4 <HAL_TIM_ConfigClockSource+0x174>
>>>>>>> 39e4d10438a821cc799a472af87a77c6796a1676

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
<<<<<<< HEAD
 8004c26:	687b      	ldr	r3, [r7, #4]
 8004c28:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8004c2a:	683b      	ldr	r3, [r7, #0]
 8004c2c:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8004c2e:	683b      	ldr	r3, [r7, #0]
 8004c30:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8004c32:	461a      	mov	r2, r3
 8004c34:	f000 fac6 	bl	80051c4 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8004c38:	687b      	ldr	r3, [r7, #4]
 8004c3a:	681b      	ldr	r3, [r3, #0]
 8004c3c:	2150      	movs	r1, #80	@ 0x50
 8004c3e:	4618      	mov	r0, r3
 8004c40:	f000 fb1f 	bl	8005282 <TIM_ITRx_SetConfig>
      break;
 8004c44:	e02c      	b.n	8004ca0 <HAL_TIM_ConfigClockSource+0x174>
=======
 8004d3a:	687b      	ldr	r3, [r7, #4]
 8004d3c:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8004d3e:	683b      	ldr	r3, [r7, #0]
 8004d40:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8004d42:	683b      	ldr	r3, [r7, #0]
 8004d44:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8004d46:	461a      	mov	r2, r3
 8004d48:	f000 fac6 	bl	80052d8 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8004d4c:	687b      	ldr	r3, [r7, #4]
 8004d4e:	681b      	ldr	r3, [r3, #0]
 8004d50:	2150      	movs	r1, #80	@ 0x50
 8004d52:	4618      	mov	r0, r3
 8004d54:	f000 fb1f 	bl	8005396 <TIM_ITRx_SetConfig>
      break;
 8004d58:	e02c      	b.n	8004db4 <HAL_TIM_ConfigClockSource+0x174>
>>>>>>> 39e4d10438a821cc799a472af87a77c6796a1676

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
<<<<<<< HEAD
 8004c46:	687b      	ldr	r3, [r7, #4]
 8004c48:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8004c4a:	683b      	ldr	r3, [r7, #0]
 8004c4c:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8004c4e:	683b      	ldr	r3, [r7, #0]
 8004c50:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 8004c52:	461a      	mov	r2, r3
 8004c54:	f000 fae5 	bl	8005222 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8004c58:	687b      	ldr	r3, [r7, #4]
 8004c5a:	681b      	ldr	r3, [r3, #0]
 8004c5c:	2160      	movs	r1, #96	@ 0x60
 8004c5e:	4618      	mov	r0, r3
 8004c60:	f000 fb0f 	bl	8005282 <TIM_ITRx_SetConfig>
      break;
 8004c64:	e01c      	b.n	8004ca0 <HAL_TIM_ConfigClockSource+0x174>
=======
 8004d5a:	687b      	ldr	r3, [r7, #4]
 8004d5c:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8004d5e:	683b      	ldr	r3, [r7, #0]
 8004d60:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8004d62:	683b      	ldr	r3, [r7, #0]
 8004d64:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 8004d66:	461a      	mov	r2, r3
 8004d68:	f000 fae5 	bl	8005336 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8004d6c:	687b      	ldr	r3, [r7, #4]
 8004d6e:	681b      	ldr	r3, [r3, #0]
 8004d70:	2160      	movs	r1, #96	@ 0x60
 8004d72:	4618      	mov	r0, r3
 8004d74:	f000 fb0f 	bl	8005396 <TIM_ITRx_SetConfig>
      break;
 8004d78:	e01c      	b.n	8004db4 <HAL_TIM_ConfigClockSource+0x174>
>>>>>>> 39e4d10438a821cc799a472af87a77c6796a1676

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
<<<<<<< HEAD
 8004c66:	687b      	ldr	r3, [r7, #4]
 8004c68:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8004c6a:	683b      	ldr	r3, [r7, #0]
 8004c6c:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8004c6e:	683b      	ldr	r3, [r7, #0]
 8004c70:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8004c72:	461a      	mov	r2, r3
 8004c74:	f000 faa6 	bl	80051c4 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8004c78:	687b      	ldr	r3, [r7, #4]
 8004c7a:	681b      	ldr	r3, [r3, #0]
 8004c7c:	2140      	movs	r1, #64	@ 0x40
 8004c7e:	4618      	mov	r0, r3
 8004c80:	f000 faff 	bl	8005282 <TIM_ITRx_SetConfig>
      break;
 8004c84:	e00c      	b.n	8004ca0 <HAL_TIM_ConfigClockSource+0x174>
=======
 8004d7a:	687b      	ldr	r3, [r7, #4]
 8004d7c:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8004d7e:	683b      	ldr	r3, [r7, #0]
 8004d80:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8004d82:	683b      	ldr	r3, [r7, #0]
 8004d84:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8004d86:	461a      	mov	r2, r3
 8004d88:	f000 faa6 	bl	80052d8 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8004d8c:	687b      	ldr	r3, [r7, #4]
 8004d8e:	681b      	ldr	r3, [r3, #0]
 8004d90:	2140      	movs	r1, #64	@ 0x40
 8004d92:	4618      	mov	r0, r3
 8004d94:	f000 faff 	bl	8005396 <TIM_ITRx_SetConfig>
      break;
 8004d98:	e00c      	b.n	8004db4 <HAL_TIM_ConfigClockSource+0x174>
>>>>>>> 39e4d10438a821cc799a472af87a77c6796a1676
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
<<<<<<< HEAD
 8004c86:	687b      	ldr	r3, [r7, #4]
 8004c88:	681a      	ldr	r2, [r3, #0]
 8004c8a:	683b      	ldr	r3, [r7, #0]
 8004c8c:	681b      	ldr	r3, [r3, #0]
 8004c8e:	4619      	mov	r1, r3
 8004c90:	4610      	mov	r0, r2
 8004c92:	f000 faf6 	bl	8005282 <TIM_ITRx_SetConfig>
      break;
 8004c96:	e003      	b.n	8004ca0 <HAL_TIM_ConfigClockSource+0x174>
=======
 8004d9a:	687b      	ldr	r3, [r7, #4]
 8004d9c:	681a      	ldr	r2, [r3, #0]
 8004d9e:	683b      	ldr	r3, [r7, #0]
 8004da0:	681b      	ldr	r3, [r3, #0]
 8004da2:	4619      	mov	r1, r3
 8004da4:	4610      	mov	r0, r2
 8004da6:	f000 faf6 	bl	8005396 <TIM_ITRx_SetConfig>
      break;
 8004daa:	e003      	b.n	8004db4 <HAL_TIM_ConfigClockSource+0x174>
>>>>>>> 39e4d10438a821cc799a472af87a77c6796a1676
    }

    default:
      status = HAL_ERROR;
<<<<<<< HEAD
 8004c98:	2301      	movs	r3, #1
 8004c9a:	73fb      	strb	r3, [r7, #15]
      break;
 8004c9c:	e000      	b.n	8004ca0 <HAL_TIM_ConfigClockSource+0x174>
      break;
 8004c9e:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8004ca0:	687b      	ldr	r3, [r7, #4]
 8004ca2:	2201      	movs	r2, #1
 8004ca4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8004ca8:	687b      	ldr	r3, [r7, #4]
 8004caa:	2200      	movs	r2, #0
 8004cac:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8004cb0:	7bfb      	ldrb	r3, [r7, #15]
}
 8004cb2:	4618      	mov	r0, r3
 8004cb4:	3710      	adds	r7, #16
 8004cb6:	46bd      	mov	sp, r7
 8004cb8:	bd80      	pop	{r7, pc}

08004cba <HAL_TIM_OC_DelayElapsedCallback>:
=======
 8004dac:	2301      	movs	r3, #1
 8004dae:	73fb      	strb	r3, [r7, #15]
      break;
 8004db0:	e000      	b.n	8004db4 <HAL_TIM_ConfigClockSource+0x174>
      break;
 8004db2:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8004db4:	687b      	ldr	r3, [r7, #4]
 8004db6:	2201      	movs	r2, #1
 8004db8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8004dbc:	687b      	ldr	r3, [r7, #4]
 8004dbe:	2200      	movs	r2, #0
 8004dc0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8004dc4:	7bfb      	ldrb	r3, [r7, #15]
}
 8004dc6:	4618      	mov	r0, r3
 8004dc8:	3710      	adds	r7, #16
 8004dca:	46bd      	mov	sp, r7
 8004dcc:	bd80      	pop	{r7, pc}

08004dce <HAL_TIM_OC_DelayElapsedCallback>:
>>>>>>> 39e4d10438a821cc799a472af87a77c6796a1676
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
<<<<<<< HEAD
 8004cba:	b480      	push	{r7}
 8004cbc:	b083      	sub	sp, #12
 8004cbe:	af00      	add	r7, sp, #0
 8004cc0:	6078      	str	r0, [r7, #4]
=======
 8004dce:	b480      	push	{r7}
 8004dd0:	b083      	sub	sp, #12
 8004dd2:	af00      	add	r7, sp, #0
 8004dd4:	6078      	str	r0, [r7, #4]
>>>>>>> 39e4d10438a821cc799a472af87a77c6796a1676
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
<<<<<<< HEAD
 8004cc2:	bf00      	nop
 8004cc4:	370c      	adds	r7, #12
 8004cc6:	46bd      	mov	sp, r7
 8004cc8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ccc:	4770      	bx	lr

08004cce <HAL_TIM_IC_CaptureCallback>:
=======
 8004dd6:	bf00      	nop
 8004dd8:	370c      	adds	r7, #12
 8004dda:	46bd      	mov	sp, r7
 8004ddc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004de0:	4770      	bx	lr

08004de2 <HAL_TIM_IC_CaptureCallback>:
>>>>>>> 39e4d10438a821cc799a472af87a77c6796a1676
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
<<<<<<< HEAD
 8004cce:	b480      	push	{r7}
 8004cd0:	b083      	sub	sp, #12
 8004cd2:	af00      	add	r7, sp, #0
 8004cd4:	6078      	str	r0, [r7, #4]
=======
 8004de2:	b480      	push	{r7}
 8004de4:	b083      	sub	sp, #12
 8004de6:	af00      	add	r7, sp, #0
 8004de8:	6078      	str	r0, [r7, #4]
>>>>>>> 39e4d10438a821cc799a472af87a77c6796a1676
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
<<<<<<< HEAD
 8004cd6:	bf00      	nop
 8004cd8:	370c      	adds	r7, #12
 8004cda:	46bd      	mov	sp, r7
 8004cdc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ce0:	4770      	bx	lr

08004ce2 <HAL_TIM_PWM_PulseFinishedCallback>:
=======
 8004dea:	bf00      	nop
 8004dec:	370c      	adds	r7, #12
 8004dee:	46bd      	mov	sp, r7
 8004df0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004df4:	4770      	bx	lr

08004df6 <HAL_TIM_PWM_PulseFinishedCallback>:
>>>>>>> 39e4d10438a821cc799a472af87a77c6796a1676
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
<<<<<<< HEAD
 8004ce2:	b480      	push	{r7}
 8004ce4:	b083      	sub	sp, #12
 8004ce6:	af00      	add	r7, sp, #0
 8004ce8:	6078      	str	r0, [r7, #4]
=======
 8004df6:	b480      	push	{r7}
 8004df8:	b083      	sub	sp, #12
 8004dfa:	af00      	add	r7, sp, #0
 8004dfc:	6078      	str	r0, [r7, #4]
>>>>>>> 39e4d10438a821cc799a472af87a77c6796a1676
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
<<<<<<< HEAD
 8004cea:	bf00      	nop
 8004cec:	370c      	adds	r7, #12
 8004cee:	46bd      	mov	sp, r7
 8004cf0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004cf4:	4770      	bx	lr

08004cf6 <HAL_TIM_TriggerCallback>:
=======
 8004dfe:	bf00      	nop
 8004e00:	370c      	adds	r7, #12
 8004e02:	46bd      	mov	sp, r7
 8004e04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e08:	4770      	bx	lr

08004e0a <HAL_TIM_TriggerCallback>:
>>>>>>> 39e4d10438a821cc799a472af87a77c6796a1676
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
<<<<<<< HEAD
 8004cf6:	b480      	push	{r7}
 8004cf8:	b083      	sub	sp, #12
 8004cfa:	af00      	add	r7, sp, #0
 8004cfc:	6078      	str	r0, [r7, #4]
=======
 8004e0a:	b480      	push	{r7}
 8004e0c:	b083      	sub	sp, #12
 8004e0e:	af00      	add	r7, sp, #0
 8004e10:	6078      	str	r0, [r7, #4]
>>>>>>> 39e4d10438a821cc799a472af87a77c6796a1676
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
<<<<<<< HEAD
 8004cfe:	bf00      	nop
 8004d00:	370c      	adds	r7, #12
 8004d02:	46bd      	mov	sp, r7
 8004d04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d08:	4770      	bx	lr
	...

08004d0c <TIM_Base_SetConfig>:
=======
 8004e12:	bf00      	nop
 8004e14:	370c      	adds	r7, #12
 8004e16:	46bd      	mov	sp, r7
 8004e18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e1c:	4770      	bx	lr
	...

08004e20 <TIM_Base_SetConfig>:
>>>>>>> 39e4d10438a821cc799a472af87a77c6796a1676
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
<<<<<<< HEAD
 8004d0c:	b480      	push	{r7}
 8004d0e:	b085      	sub	sp, #20
 8004d10:	af00      	add	r7, sp, #0
 8004d12:	6078      	str	r0, [r7, #4]
 8004d14:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8004d16:	687b      	ldr	r3, [r7, #4]
 8004d18:	681b      	ldr	r3, [r3, #0]
 8004d1a:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8004d1c:	687b      	ldr	r3, [r7, #4]
 8004d1e:	4a46      	ldr	r2, [pc, #280]	@ (8004e38 <TIM_Base_SetConfig+0x12c>)
 8004d20:	4293      	cmp	r3, r2
 8004d22:	d013      	beq.n	8004d4c <TIM_Base_SetConfig+0x40>
 8004d24:	687b      	ldr	r3, [r7, #4]
 8004d26:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8004d2a:	d00f      	beq.n	8004d4c <TIM_Base_SetConfig+0x40>
 8004d2c:	687b      	ldr	r3, [r7, #4]
 8004d2e:	4a43      	ldr	r2, [pc, #268]	@ (8004e3c <TIM_Base_SetConfig+0x130>)
 8004d30:	4293      	cmp	r3, r2
 8004d32:	d00b      	beq.n	8004d4c <TIM_Base_SetConfig+0x40>
 8004d34:	687b      	ldr	r3, [r7, #4]
 8004d36:	4a42      	ldr	r2, [pc, #264]	@ (8004e40 <TIM_Base_SetConfig+0x134>)
 8004d38:	4293      	cmp	r3, r2
 8004d3a:	d007      	beq.n	8004d4c <TIM_Base_SetConfig+0x40>
 8004d3c:	687b      	ldr	r3, [r7, #4]
 8004d3e:	4a41      	ldr	r2, [pc, #260]	@ (8004e44 <TIM_Base_SetConfig+0x138>)
 8004d40:	4293      	cmp	r3, r2
 8004d42:	d003      	beq.n	8004d4c <TIM_Base_SetConfig+0x40>
 8004d44:	687b      	ldr	r3, [r7, #4]
 8004d46:	4a40      	ldr	r2, [pc, #256]	@ (8004e48 <TIM_Base_SetConfig+0x13c>)
 8004d48:	4293      	cmp	r3, r2
 8004d4a:	d108      	bne.n	8004d5e <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8004d4c:	68fb      	ldr	r3, [r7, #12]
 8004d4e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8004d52:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8004d54:	683b      	ldr	r3, [r7, #0]
 8004d56:	685b      	ldr	r3, [r3, #4]
 8004d58:	68fa      	ldr	r2, [r7, #12]
 8004d5a:	4313      	orrs	r3, r2
 8004d5c:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8004d5e:	687b      	ldr	r3, [r7, #4]
 8004d60:	4a35      	ldr	r2, [pc, #212]	@ (8004e38 <TIM_Base_SetConfig+0x12c>)
 8004d62:	4293      	cmp	r3, r2
 8004d64:	d02b      	beq.n	8004dbe <TIM_Base_SetConfig+0xb2>
 8004d66:	687b      	ldr	r3, [r7, #4]
 8004d68:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8004d6c:	d027      	beq.n	8004dbe <TIM_Base_SetConfig+0xb2>
 8004d6e:	687b      	ldr	r3, [r7, #4]
 8004d70:	4a32      	ldr	r2, [pc, #200]	@ (8004e3c <TIM_Base_SetConfig+0x130>)
 8004d72:	4293      	cmp	r3, r2
 8004d74:	d023      	beq.n	8004dbe <TIM_Base_SetConfig+0xb2>
 8004d76:	687b      	ldr	r3, [r7, #4]
 8004d78:	4a31      	ldr	r2, [pc, #196]	@ (8004e40 <TIM_Base_SetConfig+0x134>)
 8004d7a:	4293      	cmp	r3, r2
 8004d7c:	d01f      	beq.n	8004dbe <TIM_Base_SetConfig+0xb2>
 8004d7e:	687b      	ldr	r3, [r7, #4]
 8004d80:	4a30      	ldr	r2, [pc, #192]	@ (8004e44 <TIM_Base_SetConfig+0x138>)
 8004d82:	4293      	cmp	r3, r2
 8004d84:	d01b      	beq.n	8004dbe <TIM_Base_SetConfig+0xb2>
 8004d86:	687b      	ldr	r3, [r7, #4]
 8004d88:	4a2f      	ldr	r2, [pc, #188]	@ (8004e48 <TIM_Base_SetConfig+0x13c>)
 8004d8a:	4293      	cmp	r3, r2
 8004d8c:	d017      	beq.n	8004dbe <TIM_Base_SetConfig+0xb2>
 8004d8e:	687b      	ldr	r3, [r7, #4]
 8004d90:	4a2e      	ldr	r2, [pc, #184]	@ (8004e4c <TIM_Base_SetConfig+0x140>)
 8004d92:	4293      	cmp	r3, r2
 8004d94:	d013      	beq.n	8004dbe <TIM_Base_SetConfig+0xb2>
 8004d96:	687b      	ldr	r3, [r7, #4]
 8004d98:	4a2d      	ldr	r2, [pc, #180]	@ (8004e50 <TIM_Base_SetConfig+0x144>)
 8004d9a:	4293      	cmp	r3, r2
 8004d9c:	d00f      	beq.n	8004dbe <TIM_Base_SetConfig+0xb2>
 8004d9e:	687b      	ldr	r3, [r7, #4]
 8004da0:	4a2c      	ldr	r2, [pc, #176]	@ (8004e54 <TIM_Base_SetConfig+0x148>)
 8004da2:	4293      	cmp	r3, r2
 8004da4:	d00b      	beq.n	8004dbe <TIM_Base_SetConfig+0xb2>
 8004da6:	687b      	ldr	r3, [r7, #4]
 8004da8:	4a2b      	ldr	r2, [pc, #172]	@ (8004e58 <TIM_Base_SetConfig+0x14c>)
 8004daa:	4293      	cmp	r3, r2
 8004dac:	d007      	beq.n	8004dbe <TIM_Base_SetConfig+0xb2>
 8004dae:	687b      	ldr	r3, [r7, #4]
 8004db0:	4a2a      	ldr	r2, [pc, #168]	@ (8004e5c <TIM_Base_SetConfig+0x150>)
 8004db2:	4293      	cmp	r3, r2
 8004db4:	d003      	beq.n	8004dbe <TIM_Base_SetConfig+0xb2>
 8004db6:	687b      	ldr	r3, [r7, #4]
 8004db8:	4a29      	ldr	r2, [pc, #164]	@ (8004e60 <TIM_Base_SetConfig+0x154>)
 8004dba:	4293      	cmp	r3, r2
 8004dbc:	d108      	bne.n	8004dd0 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8004dbe:	68fb      	ldr	r3, [r7, #12]
 8004dc0:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8004dc4:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8004dc6:	683b      	ldr	r3, [r7, #0]
 8004dc8:	68db      	ldr	r3, [r3, #12]
 8004dca:	68fa      	ldr	r2, [r7, #12]
 8004dcc:	4313      	orrs	r3, r2
 8004dce:	60fb      	str	r3, [r7, #12]
=======
 8004e20:	b480      	push	{r7}
 8004e22:	b085      	sub	sp, #20
 8004e24:	af00      	add	r7, sp, #0
 8004e26:	6078      	str	r0, [r7, #4]
 8004e28:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8004e2a:	687b      	ldr	r3, [r7, #4]
 8004e2c:	681b      	ldr	r3, [r3, #0]
 8004e2e:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8004e30:	687b      	ldr	r3, [r7, #4]
 8004e32:	4a46      	ldr	r2, [pc, #280]	@ (8004f4c <TIM_Base_SetConfig+0x12c>)
 8004e34:	4293      	cmp	r3, r2
 8004e36:	d013      	beq.n	8004e60 <TIM_Base_SetConfig+0x40>
 8004e38:	687b      	ldr	r3, [r7, #4]
 8004e3a:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8004e3e:	d00f      	beq.n	8004e60 <TIM_Base_SetConfig+0x40>
 8004e40:	687b      	ldr	r3, [r7, #4]
 8004e42:	4a43      	ldr	r2, [pc, #268]	@ (8004f50 <TIM_Base_SetConfig+0x130>)
 8004e44:	4293      	cmp	r3, r2
 8004e46:	d00b      	beq.n	8004e60 <TIM_Base_SetConfig+0x40>
 8004e48:	687b      	ldr	r3, [r7, #4]
 8004e4a:	4a42      	ldr	r2, [pc, #264]	@ (8004f54 <TIM_Base_SetConfig+0x134>)
 8004e4c:	4293      	cmp	r3, r2
 8004e4e:	d007      	beq.n	8004e60 <TIM_Base_SetConfig+0x40>
 8004e50:	687b      	ldr	r3, [r7, #4]
 8004e52:	4a41      	ldr	r2, [pc, #260]	@ (8004f58 <TIM_Base_SetConfig+0x138>)
 8004e54:	4293      	cmp	r3, r2
 8004e56:	d003      	beq.n	8004e60 <TIM_Base_SetConfig+0x40>
 8004e58:	687b      	ldr	r3, [r7, #4]
 8004e5a:	4a40      	ldr	r2, [pc, #256]	@ (8004f5c <TIM_Base_SetConfig+0x13c>)
 8004e5c:	4293      	cmp	r3, r2
 8004e5e:	d108      	bne.n	8004e72 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8004e60:	68fb      	ldr	r3, [r7, #12]
 8004e62:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8004e66:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8004e68:	683b      	ldr	r3, [r7, #0]
 8004e6a:	685b      	ldr	r3, [r3, #4]
 8004e6c:	68fa      	ldr	r2, [r7, #12]
 8004e6e:	4313      	orrs	r3, r2
 8004e70:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8004e72:	687b      	ldr	r3, [r7, #4]
 8004e74:	4a35      	ldr	r2, [pc, #212]	@ (8004f4c <TIM_Base_SetConfig+0x12c>)
 8004e76:	4293      	cmp	r3, r2
 8004e78:	d02b      	beq.n	8004ed2 <TIM_Base_SetConfig+0xb2>
 8004e7a:	687b      	ldr	r3, [r7, #4]
 8004e7c:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8004e80:	d027      	beq.n	8004ed2 <TIM_Base_SetConfig+0xb2>
 8004e82:	687b      	ldr	r3, [r7, #4]
 8004e84:	4a32      	ldr	r2, [pc, #200]	@ (8004f50 <TIM_Base_SetConfig+0x130>)
 8004e86:	4293      	cmp	r3, r2
 8004e88:	d023      	beq.n	8004ed2 <TIM_Base_SetConfig+0xb2>
 8004e8a:	687b      	ldr	r3, [r7, #4]
 8004e8c:	4a31      	ldr	r2, [pc, #196]	@ (8004f54 <TIM_Base_SetConfig+0x134>)
 8004e8e:	4293      	cmp	r3, r2
 8004e90:	d01f      	beq.n	8004ed2 <TIM_Base_SetConfig+0xb2>
 8004e92:	687b      	ldr	r3, [r7, #4]
 8004e94:	4a30      	ldr	r2, [pc, #192]	@ (8004f58 <TIM_Base_SetConfig+0x138>)
 8004e96:	4293      	cmp	r3, r2
 8004e98:	d01b      	beq.n	8004ed2 <TIM_Base_SetConfig+0xb2>
 8004e9a:	687b      	ldr	r3, [r7, #4]
 8004e9c:	4a2f      	ldr	r2, [pc, #188]	@ (8004f5c <TIM_Base_SetConfig+0x13c>)
 8004e9e:	4293      	cmp	r3, r2
 8004ea0:	d017      	beq.n	8004ed2 <TIM_Base_SetConfig+0xb2>
 8004ea2:	687b      	ldr	r3, [r7, #4]
 8004ea4:	4a2e      	ldr	r2, [pc, #184]	@ (8004f60 <TIM_Base_SetConfig+0x140>)
 8004ea6:	4293      	cmp	r3, r2
 8004ea8:	d013      	beq.n	8004ed2 <TIM_Base_SetConfig+0xb2>
 8004eaa:	687b      	ldr	r3, [r7, #4]
 8004eac:	4a2d      	ldr	r2, [pc, #180]	@ (8004f64 <TIM_Base_SetConfig+0x144>)
 8004eae:	4293      	cmp	r3, r2
 8004eb0:	d00f      	beq.n	8004ed2 <TIM_Base_SetConfig+0xb2>
 8004eb2:	687b      	ldr	r3, [r7, #4]
 8004eb4:	4a2c      	ldr	r2, [pc, #176]	@ (8004f68 <TIM_Base_SetConfig+0x148>)
 8004eb6:	4293      	cmp	r3, r2
 8004eb8:	d00b      	beq.n	8004ed2 <TIM_Base_SetConfig+0xb2>
 8004eba:	687b      	ldr	r3, [r7, #4]
 8004ebc:	4a2b      	ldr	r2, [pc, #172]	@ (8004f6c <TIM_Base_SetConfig+0x14c>)
 8004ebe:	4293      	cmp	r3, r2
 8004ec0:	d007      	beq.n	8004ed2 <TIM_Base_SetConfig+0xb2>
 8004ec2:	687b      	ldr	r3, [r7, #4]
 8004ec4:	4a2a      	ldr	r2, [pc, #168]	@ (8004f70 <TIM_Base_SetConfig+0x150>)
 8004ec6:	4293      	cmp	r3, r2
 8004ec8:	d003      	beq.n	8004ed2 <TIM_Base_SetConfig+0xb2>
 8004eca:	687b      	ldr	r3, [r7, #4]
 8004ecc:	4a29      	ldr	r2, [pc, #164]	@ (8004f74 <TIM_Base_SetConfig+0x154>)
 8004ece:	4293      	cmp	r3, r2
 8004ed0:	d108      	bne.n	8004ee4 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8004ed2:	68fb      	ldr	r3, [r7, #12]
 8004ed4:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8004ed8:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8004eda:	683b      	ldr	r3, [r7, #0]
 8004edc:	68db      	ldr	r3, [r3, #12]
 8004ede:	68fa      	ldr	r2, [r7, #12]
 8004ee0:	4313      	orrs	r3, r2
 8004ee2:	60fb      	str	r3, [r7, #12]
>>>>>>> 39e4d10438a821cc799a472af87a77c6796a1676
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
<<<<<<< HEAD
 8004dd0:	68fb      	ldr	r3, [r7, #12]
 8004dd2:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 8004dd6:	683b      	ldr	r3, [r7, #0]
 8004dd8:	695b      	ldr	r3, [r3, #20]
 8004dda:	4313      	orrs	r3, r2
 8004ddc:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8004dde:	687b      	ldr	r3, [r7, #4]
 8004de0:	68fa      	ldr	r2, [r7, #12]
 8004de2:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8004de4:	683b      	ldr	r3, [r7, #0]
 8004de6:	689a      	ldr	r2, [r3, #8]
 8004de8:	687b      	ldr	r3, [r7, #4]
 8004dea:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8004dec:	683b      	ldr	r3, [r7, #0]
 8004dee:	681a      	ldr	r2, [r3, #0]
 8004df0:	687b      	ldr	r3, [r7, #4]
 8004df2:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8004df4:	687b      	ldr	r3, [r7, #4]
 8004df6:	4a10      	ldr	r2, [pc, #64]	@ (8004e38 <TIM_Base_SetConfig+0x12c>)
 8004df8:	4293      	cmp	r3, r2
 8004dfa:	d003      	beq.n	8004e04 <TIM_Base_SetConfig+0xf8>
 8004dfc:	687b      	ldr	r3, [r7, #4]
 8004dfe:	4a12      	ldr	r2, [pc, #72]	@ (8004e48 <TIM_Base_SetConfig+0x13c>)
 8004e00:	4293      	cmp	r3, r2
 8004e02:	d103      	bne.n	8004e0c <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8004e04:	683b      	ldr	r3, [r7, #0]
 8004e06:	691a      	ldr	r2, [r3, #16]
 8004e08:	687b      	ldr	r3, [r7, #4]
 8004e0a:	631a      	str	r2, [r3, #48]	@ 0x30
=======
 8004ee4:	68fb      	ldr	r3, [r7, #12]
 8004ee6:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 8004eea:	683b      	ldr	r3, [r7, #0]
 8004eec:	695b      	ldr	r3, [r3, #20]
 8004eee:	4313      	orrs	r3, r2
 8004ef0:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8004ef2:	687b      	ldr	r3, [r7, #4]
 8004ef4:	68fa      	ldr	r2, [r7, #12]
 8004ef6:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8004ef8:	683b      	ldr	r3, [r7, #0]
 8004efa:	689a      	ldr	r2, [r3, #8]
 8004efc:	687b      	ldr	r3, [r7, #4]
 8004efe:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8004f00:	683b      	ldr	r3, [r7, #0]
 8004f02:	681a      	ldr	r2, [r3, #0]
 8004f04:	687b      	ldr	r3, [r7, #4]
 8004f06:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8004f08:	687b      	ldr	r3, [r7, #4]
 8004f0a:	4a10      	ldr	r2, [pc, #64]	@ (8004f4c <TIM_Base_SetConfig+0x12c>)
 8004f0c:	4293      	cmp	r3, r2
 8004f0e:	d003      	beq.n	8004f18 <TIM_Base_SetConfig+0xf8>
 8004f10:	687b      	ldr	r3, [r7, #4]
 8004f12:	4a12      	ldr	r2, [pc, #72]	@ (8004f5c <TIM_Base_SetConfig+0x13c>)
 8004f14:	4293      	cmp	r3, r2
 8004f16:	d103      	bne.n	8004f20 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8004f18:	683b      	ldr	r3, [r7, #0]
 8004f1a:	691a      	ldr	r2, [r3, #16]
 8004f1c:	687b      	ldr	r3, [r7, #4]
 8004f1e:	631a      	str	r2, [r3, #48]	@ 0x30
>>>>>>> 39e4d10438a821cc799a472af87a77c6796a1676
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
<<<<<<< HEAD
 8004e0c:	687b      	ldr	r3, [r7, #4]
 8004e0e:	2201      	movs	r2, #1
 8004e10:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 8004e12:	687b      	ldr	r3, [r7, #4]
 8004e14:	691b      	ldr	r3, [r3, #16]
 8004e16:	f003 0301 	and.w	r3, r3, #1
 8004e1a:	2b01      	cmp	r3, #1
 8004e1c:	d105      	bne.n	8004e2a <TIM_Base_SetConfig+0x11e>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 8004e1e:	687b      	ldr	r3, [r7, #4]
 8004e20:	691b      	ldr	r3, [r3, #16]
 8004e22:	f023 0201 	bic.w	r2, r3, #1
 8004e26:	687b      	ldr	r3, [r7, #4]
 8004e28:	611a      	str	r2, [r3, #16]
  }
}
 8004e2a:	bf00      	nop
 8004e2c:	3714      	adds	r7, #20
 8004e2e:	46bd      	mov	sp, r7
 8004e30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e34:	4770      	bx	lr
 8004e36:	bf00      	nop
 8004e38:	40010000 	.word	0x40010000
 8004e3c:	40000400 	.word	0x40000400
 8004e40:	40000800 	.word	0x40000800
 8004e44:	40000c00 	.word	0x40000c00
 8004e48:	40010400 	.word	0x40010400
 8004e4c:	40014000 	.word	0x40014000
 8004e50:	40014400 	.word	0x40014400
 8004e54:	40014800 	.word	0x40014800
 8004e58:	40001800 	.word	0x40001800
 8004e5c:	40001c00 	.word	0x40001c00
 8004e60:	40002000 	.word	0x40002000

08004e64 <TIM_OC1_SetConfig>:
=======
 8004f20:	687b      	ldr	r3, [r7, #4]
 8004f22:	2201      	movs	r2, #1
 8004f24:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 8004f26:	687b      	ldr	r3, [r7, #4]
 8004f28:	691b      	ldr	r3, [r3, #16]
 8004f2a:	f003 0301 	and.w	r3, r3, #1
 8004f2e:	2b01      	cmp	r3, #1
 8004f30:	d105      	bne.n	8004f3e <TIM_Base_SetConfig+0x11e>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 8004f32:	687b      	ldr	r3, [r7, #4]
 8004f34:	691b      	ldr	r3, [r3, #16]
 8004f36:	f023 0201 	bic.w	r2, r3, #1
 8004f3a:	687b      	ldr	r3, [r7, #4]
 8004f3c:	611a      	str	r2, [r3, #16]
  }
}
 8004f3e:	bf00      	nop
 8004f40:	3714      	adds	r7, #20
 8004f42:	46bd      	mov	sp, r7
 8004f44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f48:	4770      	bx	lr
 8004f4a:	bf00      	nop
 8004f4c:	40010000 	.word	0x40010000
 8004f50:	40000400 	.word	0x40000400
 8004f54:	40000800 	.word	0x40000800
 8004f58:	40000c00 	.word	0x40000c00
 8004f5c:	40010400 	.word	0x40010400
 8004f60:	40014000 	.word	0x40014000
 8004f64:	40014400 	.word	0x40014400
 8004f68:	40014800 	.word	0x40014800
 8004f6c:	40001800 	.word	0x40001800
 8004f70:	40001c00 	.word	0x40001c00
 8004f74:	40002000 	.word	0x40002000

08004f78 <TIM_OC1_SetConfig>:
>>>>>>> 39e4d10438a821cc799a472af87a77c6796a1676
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
<<<<<<< HEAD
 8004e64:	b480      	push	{r7}
 8004e66:	b087      	sub	sp, #28
 8004e68:	af00      	add	r7, sp, #0
 8004e6a:	6078      	str	r0, [r7, #4]
 8004e6c:	6039      	str	r1, [r7, #0]
=======
 8004f78:	b480      	push	{r7}
 8004f7a:	b087      	sub	sp, #28
 8004f7c:	af00      	add	r7, sp, #0
 8004f7e:	6078      	str	r0, [r7, #4]
 8004f80:	6039      	str	r1, [r7, #0]
>>>>>>> 39e4d10438a821cc799a472af87a77c6796a1676
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
<<<<<<< HEAD
 8004e6e:	687b      	ldr	r3, [r7, #4]
 8004e70:	6a1b      	ldr	r3, [r3, #32]
 8004e72:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8004e74:	687b      	ldr	r3, [r7, #4]
 8004e76:	6a1b      	ldr	r3, [r3, #32]
 8004e78:	f023 0201 	bic.w	r2, r3, #1
 8004e7c:	687b      	ldr	r3, [r7, #4]
 8004e7e:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004e80:	687b      	ldr	r3, [r7, #4]
 8004e82:	685b      	ldr	r3, [r3, #4]
 8004e84:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8004e86:	687b      	ldr	r3, [r7, #4]
 8004e88:	699b      	ldr	r3, [r3, #24]
 8004e8a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8004e8c:	68fb      	ldr	r3, [r7, #12]
 8004e8e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8004e92:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8004e94:	68fb      	ldr	r3, [r7, #12]
 8004e96:	f023 0303 	bic.w	r3, r3, #3
 8004e9a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8004e9c:	683b      	ldr	r3, [r7, #0]
 8004e9e:	681b      	ldr	r3, [r3, #0]
 8004ea0:	68fa      	ldr	r2, [r7, #12]
 8004ea2:	4313      	orrs	r3, r2
 8004ea4:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8004ea6:	697b      	ldr	r3, [r7, #20]
 8004ea8:	f023 0302 	bic.w	r3, r3, #2
 8004eac:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8004eae:	683b      	ldr	r3, [r7, #0]
 8004eb0:	689b      	ldr	r3, [r3, #8]
 8004eb2:	697a      	ldr	r2, [r7, #20]
 8004eb4:	4313      	orrs	r3, r2
 8004eb6:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8004eb8:	687b      	ldr	r3, [r7, #4]
 8004eba:	4a20      	ldr	r2, [pc, #128]	@ (8004f3c <TIM_OC1_SetConfig+0xd8>)
 8004ebc:	4293      	cmp	r3, r2
 8004ebe:	d003      	beq.n	8004ec8 <TIM_OC1_SetConfig+0x64>
 8004ec0:	687b      	ldr	r3, [r7, #4]
 8004ec2:	4a1f      	ldr	r2, [pc, #124]	@ (8004f40 <TIM_OC1_SetConfig+0xdc>)
 8004ec4:	4293      	cmp	r3, r2
 8004ec6:	d10c      	bne.n	8004ee2 <TIM_OC1_SetConfig+0x7e>
=======
 8004f82:	687b      	ldr	r3, [r7, #4]
 8004f84:	6a1b      	ldr	r3, [r3, #32]
 8004f86:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8004f88:	687b      	ldr	r3, [r7, #4]
 8004f8a:	6a1b      	ldr	r3, [r3, #32]
 8004f8c:	f023 0201 	bic.w	r2, r3, #1
 8004f90:	687b      	ldr	r3, [r7, #4]
 8004f92:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004f94:	687b      	ldr	r3, [r7, #4]
 8004f96:	685b      	ldr	r3, [r3, #4]
 8004f98:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8004f9a:	687b      	ldr	r3, [r7, #4]
 8004f9c:	699b      	ldr	r3, [r3, #24]
 8004f9e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8004fa0:	68fb      	ldr	r3, [r7, #12]
 8004fa2:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8004fa6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8004fa8:	68fb      	ldr	r3, [r7, #12]
 8004faa:	f023 0303 	bic.w	r3, r3, #3
 8004fae:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8004fb0:	683b      	ldr	r3, [r7, #0]
 8004fb2:	681b      	ldr	r3, [r3, #0]
 8004fb4:	68fa      	ldr	r2, [r7, #12]
 8004fb6:	4313      	orrs	r3, r2
 8004fb8:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8004fba:	697b      	ldr	r3, [r7, #20]
 8004fbc:	f023 0302 	bic.w	r3, r3, #2
 8004fc0:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8004fc2:	683b      	ldr	r3, [r7, #0]
 8004fc4:	689b      	ldr	r3, [r3, #8]
 8004fc6:	697a      	ldr	r2, [r7, #20]
 8004fc8:	4313      	orrs	r3, r2
 8004fca:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8004fcc:	687b      	ldr	r3, [r7, #4]
 8004fce:	4a20      	ldr	r2, [pc, #128]	@ (8005050 <TIM_OC1_SetConfig+0xd8>)
 8004fd0:	4293      	cmp	r3, r2
 8004fd2:	d003      	beq.n	8004fdc <TIM_OC1_SetConfig+0x64>
 8004fd4:	687b      	ldr	r3, [r7, #4]
 8004fd6:	4a1f      	ldr	r2, [pc, #124]	@ (8005054 <TIM_OC1_SetConfig+0xdc>)
 8004fd8:	4293      	cmp	r3, r2
 8004fda:	d10c      	bne.n	8004ff6 <TIM_OC1_SetConfig+0x7e>
>>>>>>> 39e4d10438a821cc799a472af87a77c6796a1676
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
<<<<<<< HEAD
 8004ec8:	697b      	ldr	r3, [r7, #20]
 8004eca:	f023 0308 	bic.w	r3, r3, #8
 8004ece:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8004ed0:	683b      	ldr	r3, [r7, #0]
 8004ed2:	68db      	ldr	r3, [r3, #12]
 8004ed4:	697a      	ldr	r2, [r7, #20]
 8004ed6:	4313      	orrs	r3, r2
 8004ed8:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8004eda:	697b      	ldr	r3, [r7, #20]
 8004edc:	f023 0304 	bic.w	r3, r3, #4
 8004ee0:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004ee2:	687b      	ldr	r3, [r7, #4]
 8004ee4:	4a15      	ldr	r2, [pc, #84]	@ (8004f3c <TIM_OC1_SetConfig+0xd8>)
 8004ee6:	4293      	cmp	r3, r2
 8004ee8:	d003      	beq.n	8004ef2 <TIM_OC1_SetConfig+0x8e>
 8004eea:	687b      	ldr	r3, [r7, #4]
 8004eec:	4a14      	ldr	r2, [pc, #80]	@ (8004f40 <TIM_OC1_SetConfig+0xdc>)
 8004eee:	4293      	cmp	r3, r2
 8004ef0:	d111      	bne.n	8004f16 <TIM_OC1_SetConfig+0xb2>
=======
 8004fdc:	697b      	ldr	r3, [r7, #20]
 8004fde:	f023 0308 	bic.w	r3, r3, #8
 8004fe2:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8004fe4:	683b      	ldr	r3, [r7, #0]
 8004fe6:	68db      	ldr	r3, [r3, #12]
 8004fe8:	697a      	ldr	r2, [r7, #20]
 8004fea:	4313      	orrs	r3, r2
 8004fec:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8004fee:	697b      	ldr	r3, [r7, #20]
 8004ff0:	f023 0304 	bic.w	r3, r3, #4
 8004ff4:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004ff6:	687b      	ldr	r3, [r7, #4]
 8004ff8:	4a15      	ldr	r2, [pc, #84]	@ (8005050 <TIM_OC1_SetConfig+0xd8>)
 8004ffa:	4293      	cmp	r3, r2
 8004ffc:	d003      	beq.n	8005006 <TIM_OC1_SetConfig+0x8e>
 8004ffe:	687b      	ldr	r3, [r7, #4]
 8005000:	4a14      	ldr	r2, [pc, #80]	@ (8005054 <TIM_OC1_SetConfig+0xdc>)
 8005002:	4293      	cmp	r3, r2
 8005004:	d111      	bne.n	800502a <TIM_OC1_SetConfig+0xb2>
>>>>>>> 39e4d10438a821cc799a472af87a77c6796a1676
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
<<<<<<< HEAD
 8004ef2:	693b      	ldr	r3, [r7, #16]
 8004ef4:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8004ef8:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8004efa:	693b      	ldr	r3, [r7, #16]
 8004efc:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8004f00:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8004f02:	683b      	ldr	r3, [r7, #0]
 8004f04:	695b      	ldr	r3, [r3, #20]
 8004f06:	693a      	ldr	r2, [r7, #16]
 8004f08:	4313      	orrs	r3, r2
 8004f0a:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8004f0c:	683b      	ldr	r3, [r7, #0]
 8004f0e:	699b      	ldr	r3, [r3, #24]
 8004f10:	693a      	ldr	r2, [r7, #16]
 8004f12:	4313      	orrs	r3, r2
 8004f14:	613b      	str	r3, [r7, #16]
=======
 8005006:	693b      	ldr	r3, [r7, #16]
 8005008:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800500c:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 800500e:	693b      	ldr	r3, [r7, #16]
 8005010:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8005014:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8005016:	683b      	ldr	r3, [r7, #0]
 8005018:	695b      	ldr	r3, [r3, #20]
 800501a:	693a      	ldr	r2, [r7, #16]
 800501c:	4313      	orrs	r3, r2
 800501e:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8005020:	683b      	ldr	r3, [r7, #0]
 8005022:	699b      	ldr	r3, [r3, #24]
 8005024:	693a      	ldr	r2, [r7, #16]
 8005026:	4313      	orrs	r3, r2
 8005028:	613b      	str	r3, [r7, #16]
>>>>>>> 39e4d10438a821cc799a472af87a77c6796a1676
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
<<<<<<< HEAD
 8004f16:	687b      	ldr	r3, [r7, #4]
 8004f18:	693a      	ldr	r2, [r7, #16]
 8004f1a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8004f1c:	687b      	ldr	r3, [r7, #4]
 8004f1e:	68fa      	ldr	r2, [r7, #12]
 8004f20:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8004f22:	683b      	ldr	r3, [r7, #0]
 8004f24:	685a      	ldr	r2, [r3, #4]
 8004f26:	687b      	ldr	r3, [r7, #4]
 8004f28:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004f2a:	687b      	ldr	r3, [r7, #4]
 8004f2c:	697a      	ldr	r2, [r7, #20]
 8004f2e:	621a      	str	r2, [r3, #32]
}
 8004f30:	bf00      	nop
 8004f32:	371c      	adds	r7, #28
 8004f34:	46bd      	mov	sp, r7
 8004f36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f3a:	4770      	bx	lr
 8004f3c:	40010000 	.word	0x40010000
 8004f40:	40010400 	.word	0x40010400

08004f44 <TIM_OC2_SetConfig>:
=======
 800502a:	687b      	ldr	r3, [r7, #4]
 800502c:	693a      	ldr	r2, [r7, #16]
 800502e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8005030:	687b      	ldr	r3, [r7, #4]
 8005032:	68fa      	ldr	r2, [r7, #12]
 8005034:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8005036:	683b      	ldr	r3, [r7, #0]
 8005038:	685a      	ldr	r2, [r3, #4]
 800503a:	687b      	ldr	r3, [r7, #4]
 800503c:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800503e:	687b      	ldr	r3, [r7, #4]
 8005040:	697a      	ldr	r2, [r7, #20]
 8005042:	621a      	str	r2, [r3, #32]
}
 8005044:	bf00      	nop
 8005046:	371c      	adds	r7, #28
 8005048:	46bd      	mov	sp, r7
 800504a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800504e:	4770      	bx	lr
 8005050:	40010000 	.word	0x40010000
 8005054:	40010400 	.word	0x40010400

08005058 <TIM_OC2_SetConfig>:
>>>>>>> 39e4d10438a821cc799a472af87a77c6796a1676
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
<<<<<<< HEAD
 8004f44:	b480      	push	{r7}
 8004f46:	b087      	sub	sp, #28
 8004f48:	af00      	add	r7, sp, #0
 8004f4a:	6078      	str	r0, [r7, #4]
 8004f4c:	6039      	str	r1, [r7, #0]
=======
 8005058:	b480      	push	{r7}
 800505a:	b087      	sub	sp, #28
 800505c:	af00      	add	r7, sp, #0
 800505e:	6078      	str	r0, [r7, #4]
 8005060:	6039      	str	r1, [r7, #0]
>>>>>>> 39e4d10438a821cc799a472af87a77c6796a1676
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
<<<<<<< HEAD
 8004f4e:	687b      	ldr	r3, [r7, #4]
 8004f50:	6a1b      	ldr	r3, [r3, #32]
 8004f52:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8004f54:	687b      	ldr	r3, [r7, #4]
 8004f56:	6a1b      	ldr	r3, [r3, #32]
 8004f58:	f023 0210 	bic.w	r2, r3, #16
 8004f5c:	687b      	ldr	r3, [r7, #4]
 8004f5e:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004f60:	687b      	ldr	r3, [r7, #4]
 8004f62:	685b      	ldr	r3, [r3, #4]
 8004f64:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8004f66:	687b      	ldr	r3, [r7, #4]
 8004f68:	699b      	ldr	r3, [r3, #24]
 8004f6a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8004f6c:	68fb      	ldr	r3, [r7, #12]
 8004f6e:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8004f72:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8004f74:	68fb      	ldr	r3, [r7, #12]
 8004f76:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8004f7a:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8004f7c:	683b      	ldr	r3, [r7, #0]
 8004f7e:	681b      	ldr	r3, [r3, #0]
 8004f80:	021b      	lsls	r3, r3, #8
 8004f82:	68fa      	ldr	r2, [r7, #12]
 8004f84:	4313      	orrs	r3, r2
 8004f86:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8004f88:	697b      	ldr	r3, [r7, #20]
 8004f8a:	f023 0320 	bic.w	r3, r3, #32
 8004f8e:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8004f90:	683b      	ldr	r3, [r7, #0]
 8004f92:	689b      	ldr	r3, [r3, #8]
 8004f94:	011b      	lsls	r3, r3, #4
 8004f96:	697a      	ldr	r2, [r7, #20]
 8004f98:	4313      	orrs	r3, r2
 8004f9a:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8004f9c:	687b      	ldr	r3, [r7, #4]
 8004f9e:	4a22      	ldr	r2, [pc, #136]	@ (8005028 <TIM_OC2_SetConfig+0xe4>)
 8004fa0:	4293      	cmp	r3, r2
 8004fa2:	d003      	beq.n	8004fac <TIM_OC2_SetConfig+0x68>
 8004fa4:	687b      	ldr	r3, [r7, #4]
 8004fa6:	4a21      	ldr	r2, [pc, #132]	@ (800502c <TIM_OC2_SetConfig+0xe8>)
 8004fa8:	4293      	cmp	r3, r2
 8004faa:	d10d      	bne.n	8004fc8 <TIM_OC2_SetConfig+0x84>
=======
 8005062:	687b      	ldr	r3, [r7, #4]
 8005064:	6a1b      	ldr	r3, [r3, #32]
 8005066:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8005068:	687b      	ldr	r3, [r7, #4]
 800506a:	6a1b      	ldr	r3, [r3, #32]
 800506c:	f023 0210 	bic.w	r2, r3, #16
 8005070:	687b      	ldr	r3, [r7, #4]
 8005072:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005074:	687b      	ldr	r3, [r7, #4]
 8005076:	685b      	ldr	r3, [r3, #4]
 8005078:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800507a:	687b      	ldr	r3, [r7, #4]
 800507c:	699b      	ldr	r3, [r3, #24]
 800507e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8005080:	68fb      	ldr	r3, [r7, #12]
 8005082:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8005086:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8005088:	68fb      	ldr	r3, [r7, #12]
 800508a:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800508e:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8005090:	683b      	ldr	r3, [r7, #0]
 8005092:	681b      	ldr	r3, [r3, #0]
 8005094:	021b      	lsls	r3, r3, #8
 8005096:	68fa      	ldr	r2, [r7, #12]
 8005098:	4313      	orrs	r3, r2
 800509a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 800509c:	697b      	ldr	r3, [r7, #20]
 800509e:	f023 0320 	bic.w	r3, r3, #32
 80050a2:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 80050a4:	683b      	ldr	r3, [r7, #0]
 80050a6:	689b      	ldr	r3, [r3, #8]
 80050a8:	011b      	lsls	r3, r3, #4
 80050aa:	697a      	ldr	r2, [r7, #20]
 80050ac:	4313      	orrs	r3, r2
 80050ae:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 80050b0:	687b      	ldr	r3, [r7, #4]
 80050b2:	4a22      	ldr	r2, [pc, #136]	@ (800513c <TIM_OC2_SetConfig+0xe4>)
 80050b4:	4293      	cmp	r3, r2
 80050b6:	d003      	beq.n	80050c0 <TIM_OC2_SetConfig+0x68>
 80050b8:	687b      	ldr	r3, [r7, #4]
 80050ba:	4a21      	ldr	r2, [pc, #132]	@ (8005140 <TIM_OC2_SetConfig+0xe8>)
 80050bc:	4293      	cmp	r3, r2
 80050be:	d10d      	bne.n	80050dc <TIM_OC2_SetConfig+0x84>
>>>>>>> 39e4d10438a821cc799a472af87a77c6796a1676
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
<<<<<<< HEAD
 8004fac:	697b      	ldr	r3, [r7, #20]
 8004fae:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8004fb2:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8004fb4:	683b      	ldr	r3, [r7, #0]
 8004fb6:	68db      	ldr	r3, [r3, #12]
 8004fb8:	011b      	lsls	r3, r3, #4
 8004fba:	697a      	ldr	r2, [r7, #20]
 8004fbc:	4313      	orrs	r3, r2
 8004fbe:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8004fc0:	697b      	ldr	r3, [r7, #20]
 8004fc2:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8004fc6:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004fc8:	687b      	ldr	r3, [r7, #4]
 8004fca:	4a17      	ldr	r2, [pc, #92]	@ (8005028 <TIM_OC2_SetConfig+0xe4>)
 8004fcc:	4293      	cmp	r3, r2
 8004fce:	d003      	beq.n	8004fd8 <TIM_OC2_SetConfig+0x94>
 8004fd0:	687b      	ldr	r3, [r7, #4]
 8004fd2:	4a16      	ldr	r2, [pc, #88]	@ (800502c <TIM_OC2_SetConfig+0xe8>)
 8004fd4:	4293      	cmp	r3, r2
 8004fd6:	d113      	bne.n	8005000 <TIM_OC2_SetConfig+0xbc>
=======
 80050c0:	697b      	ldr	r3, [r7, #20]
 80050c2:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 80050c6:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 80050c8:	683b      	ldr	r3, [r7, #0]
 80050ca:	68db      	ldr	r3, [r3, #12]
 80050cc:	011b      	lsls	r3, r3, #4
 80050ce:	697a      	ldr	r2, [r7, #20]
 80050d0:	4313      	orrs	r3, r2
 80050d2:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 80050d4:	697b      	ldr	r3, [r7, #20]
 80050d6:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80050da:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80050dc:	687b      	ldr	r3, [r7, #4]
 80050de:	4a17      	ldr	r2, [pc, #92]	@ (800513c <TIM_OC2_SetConfig+0xe4>)
 80050e0:	4293      	cmp	r3, r2
 80050e2:	d003      	beq.n	80050ec <TIM_OC2_SetConfig+0x94>
 80050e4:	687b      	ldr	r3, [r7, #4]
 80050e6:	4a16      	ldr	r2, [pc, #88]	@ (8005140 <TIM_OC2_SetConfig+0xe8>)
 80050e8:	4293      	cmp	r3, r2
 80050ea:	d113      	bne.n	8005114 <TIM_OC2_SetConfig+0xbc>
>>>>>>> 39e4d10438a821cc799a472af87a77c6796a1676
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
<<<<<<< HEAD
 8004fd8:	693b      	ldr	r3, [r7, #16]
 8004fda:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8004fde:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8004fe0:	693b      	ldr	r3, [r7, #16]
 8004fe2:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8004fe6:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8004fe8:	683b      	ldr	r3, [r7, #0]
 8004fea:	695b      	ldr	r3, [r3, #20]
 8004fec:	009b      	lsls	r3, r3, #2
 8004fee:	693a      	ldr	r2, [r7, #16]
 8004ff0:	4313      	orrs	r3, r2
 8004ff2:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8004ff4:	683b      	ldr	r3, [r7, #0]
 8004ff6:	699b      	ldr	r3, [r3, #24]
 8004ff8:	009b      	lsls	r3, r3, #2
 8004ffa:	693a      	ldr	r2, [r7, #16]
 8004ffc:	4313      	orrs	r3, r2
 8004ffe:	613b      	str	r3, [r7, #16]
=======
 80050ec:	693b      	ldr	r3, [r7, #16]
 80050ee:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 80050f2:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 80050f4:	693b      	ldr	r3, [r7, #16]
 80050f6:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 80050fa:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 80050fc:	683b      	ldr	r3, [r7, #0]
 80050fe:	695b      	ldr	r3, [r3, #20]
 8005100:	009b      	lsls	r3, r3, #2
 8005102:	693a      	ldr	r2, [r7, #16]
 8005104:	4313      	orrs	r3, r2
 8005106:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8005108:	683b      	ldr	r3, [r7, #0]
 800510a:	699b      	ldr	r3, [r3, #24]
 800510c:	009b      	lsls	r3, r3, #2
 800510e:	693a      	ldr	r2, [r7, #16]
 8005110:	4313      	orrs	r3, r2
 8005112:	613b      	str	r3, [r7, #16]
>>>>>>> 39e4d10438a821cc799a472af87a77c6796a1676
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
<<<<<<< HEAD
 8005000:	687b      	ldr	r3, [r7, #4]
 8005002:	693a      	ldr	r2, [r7, #16]
 8005004:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8005006:	687b      	ldr	r3, [r7, #4]
 8005008:	68fa      	ldr	r2, [r7, #12]
 800500a:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 800500c:	683b      	ldr	r3, [r7, #0]
 800500e:	685a      	ldr	r2, [r3, #4]
 8005010:	687b      	ldr	r3, [r7, #4]
 8005012:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005014:	687b      	ldr	r3, [r7, #4]
 8005016:	697a      	ldr	r2, [r7, #20]
 8005018:	621a      	str	r2, [r3, #32]
}
 800501a:	bf00      	nop
 800501c:	371c      	adds	r7, #28
 800501e:	46bd      	mov	sp, r7
 8005020:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005024:	4770      	bx	lr
 8005026:	bf00      	nop
 8005028:	40010000 	.word	0x40010000
 800502c:	40010400 	.word	0x40010400

08005030 <TIM_OC3_SetConfig>:
=======
 8005114:	687b      	ldr	r3, [r7, #4]
 8005116:	693a      	ldr	r2, [r7, #16]
 8005118:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800511a:	687b      	ldr	r3, [r7, #4]
 800511c:	68fa      	ldr	r2, [r7, #12]
 800511e:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8005120:	683b      	ldr	r3, [r7, #0]
 8005122:	685a      	ldr	r2, [r3, #4]
 8005124:	687b      	ldr	r3, [r7, #4]
 8005126:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005128:	687b      	ldr	r3, [r7, #4]
 800512a:	697a      	ldr	r2, [r7, #20]
 800512c:	621a      	str	r2, [r3, #32]
}
 800512e:	bf00      	nop
 8005130:	371c      	adds	r7, #28
 8005132:	46bd      	mov	sp, r7
 8005134:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005138:	4770      	bx	lr
 800513a:	bf00      	nop
 800513c:	40010000 	.word	0x40010000
 8005140:	40010400 	.word	0x40010400

08005144 <TIM_OC3_SetConfig>:
>>>>>>> 39e4d10438a821cc799a472af87a77c6796a1676
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
<<<<<<< HEAD
 8005030:	b480      	push	{r7}
 8005032:	b087      	sub	sp, #28
 8005034:	af00      	add	r7, sp, #0
 8005036:	6078      	str	r0, [r7, #4]
 8005038:	6039      	str	r1, [r7, #0]
=======
 8005144:	b480      	push	{r7}
 8005146:	b087      	sub	sp, #28
 8005148:	af00      	add	r7, sp, #0
 800514a:	6078      	str	r0, [r7, #4]
 800514c:	6039      	str	r1, [r7, #0]
>>>>>>> 39e4d10438a821cc799a472af87a77c6796a1676
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
<<<<<<< HEAD
 800503a:	687b      	ldr	r3, [r7, #4]
 800503c:	6a1b      	ldr	r3, [r3, #32]
 800503e:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8005040:	687b      	ldr	r3, [r7, #4]
 8005042:	6a1b      	ldr	r3, [r3, #32]
 8005044:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8005048:	687b      	ldr	r3, [r7, #4]
 800504a:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800504c:	687b      	ldr	r3, [r7, #4]
 800504e:	685b      	ldr	r3, [r3, #4]
 8005050:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8005052:	687b      	ldr	r3, [r7, #4]
 8005054:	69db      	ldr	r3, [r3, #28]
 8005056:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8005058:	68fb      	ldr	r3, [r7, #12]
 800505a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800505e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8005060:	68fb      	ldr	r3, [r7, #12]
 8005062:	f023 0303 	bic.w	r3, r3, #3
 8005066:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8005068:	683b      	ldr	r3, [r7, #0]
 800506a:	681b      	ldr	r3, [r3, #0]
 800506c:	68fa      	ldr	r2, [r7, #12]
 800506e:	4313      	orrs	r3, r2
 8005070:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8005072:	697b      	ldr	r3, [r7, #20]
 8005074:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8005078:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 800507a:	683b      	ldr	r3, [r7, #0]
 800507c:	689b      	ldr	r3, [r3, #8]
 800507e:	021b      	lsls	r3, r3, #8
 8005080:	697a      	ldr	r2, [r7, #20]
 8005082:	4313      	orrs	r3, r2
 8005084:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8005086:	687b      	ldr	r3, [r7, #4]
 8005088:	4a21      	ldr	r2, [pc, #132]	@ (8005110 <TIM_OC3_SetConfig+0xe0>)
 800508a:	4293      	cmp	r3, r2
 800508c:	d003      	beq.n	8005096 <TIM_OC3_SetConfig+0x66>
 800508e:	687b      	ldr	r3, [r7, #4]
 8005090:	4a20      	ldr	r2, [pc, #128]	@ (8005114 <TIM_OC3_SetConfig+0xe4>)
 8005092:	4293      	cmp	r3, r2
 8005094:	d10d      	bne.n	80050b2 <TIM_OC3_SetConfig+0x82>
=======
 800514e:	687b      	ldr	r3, [r7, #4]
 8005150:	6a1b      	ldr	r3, [r3, #32]
 8005152:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8005154:	687b      	ldr	r3, [r7, #4]
 8005156:	6a1b      	ldr	r3, [r3, #32]
 8005158:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 800515c:	687b      	ldr	r3, [r7, #4]
 800515e:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005160:	687b      	ldr	r3, [r7, #4]
 8005162:	685b      	ldr	r3, [r3, #4]
 8005164:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8005166:	687b      	ldr	r3, [r7, #4]
 8005168:	69db      	ldr	r3, [r3, #28]
 800516a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 800516c:	68fb      	ldr	r3, [r7, #12]
 800516e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8005172:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8005174:	68fb      	ldr	r3, [r7, #12]
 8005176:	f023 0303 	bic.w	r3, r3, #3
 800517a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800517c:	683b      	ldr	r3, [r7, #0]
 800517e:	681b      	ldr	r3, [r3, #0]
 8005180:	68fa      	ldr	r2, [r7, #12]
 8005182:	4313      	orrs	r3, r2
 8005184:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8005186:	697b      	ldr	r3, [r7, #20]
 8005188:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 800518c:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 800518e:	683b      	ldr	r3, [r7, #0]
 8005190:	689b      	ldr	r3, [r3, #8]
 8005192:	021b      	lsls	r3, r3, #8
 8005194:	697a      	ldr	r2, [r7, #20]
 8005196:	4313      	orrs	r3, r2
 8005198:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 800519a:	687b      	ldr	r3, [r7, #4]
 800519c:	4a21      	ldr	r2, [pc, #132]	@ (8005224 <TIM_OC3_SetConfig+0xe0>)
 800519e:	4293      	cmp	r3, r2
 80051a0:	d003      	beq.n	80051aa <TIM_OC3_SetConfig+0x66>
 80051a2:	687b      	ldr	r3, [r7, #4]
 80051a4:	4a20      	ldr	r2, [pc, #128]	@ (8005228 <TIM_OC3_SetConfig+0xe4>)
 80051a6:	4293      	cmp	r3, r2
 80051a8:	d10d      	bne.n	80051c6 <TIM_OC3_SetConfig+0x82>
>>>>>>> 39e4d10438a821cc799a472af87a77c6796a1676
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
<<<<<<< HEAD
 8005096:	697b      	ldr	r3, [r7, #20]
 8005098:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 800509c:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 800509e:	683b      	ldr	r3, [r7, #0]
 80050a0:	68db      	ldr	r3, [r3, #12]
 80050a2:	021b      	lsls	r3, r3, #8
 80050a4:	697a      	ldr	r2, [r7, #20]
 80050a6:	4313      	orrs	r3, r2
 80050a8:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 80050aa:	697b      	ldr	r3, [r7, #20]
 80050ac:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 80050b0:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80050b2:	687b      	ldr	r3, [r7, #4]
 80050b4:	4a16      	ldr	r2, [pc, #88]	@ (8005110 <TIM_OC3_SetConfig+0xe0>)
 80050b6:	4293      	cmp	r3, r2
 80050b8:	d003      	beq.n	80050c2 <TIM_OC3_SetConfig+0x92>
 80050ba:	687b      	ldr	r3, [r7, #4]
 80050bc:	4a15      	ldr	r2, [pc, #84]	@ (8005114 <TIM_OC3_SetConfig+0xe4>)
 80050be:	4293      	cmp	r3, r2
 80050c0:	d113      	bne.n	80050ea <TIM_OC3_SetConfig+0xba>
=======
 80051aa:	697b      	ldr	r3, [r7, #20]
 80051ac:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 80051b0:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 80051b2:	683b      	ldr	r3, [r7, #0]
 80051b4:	68db      	ldr	r3, [r3, #12]
 80051b6:	021b      	lsls	r3, r3, #8
 80051b8:	697a      	ldr	r2, [r7, #20]
 80051ba:	4313      	orrs	r3, r2
 80051bc:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 80051be:	697b      	ldr	r3, [r7, #20]
 80051c0:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 80051c4:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80051c6:	687b      	ldr	r3, [r7, #4]
 80051c8:	4a16      	ldr	r2, [pc, #88]	@ (8005224 <TIM_OC3_SetConfig+0xe0>)
 80051ca:	4293      	cmp	r3, r2
 80051cc:	d003      	beq.n	80051d6 <TIM_OC3_SetConfig+0x92>
 80051ce:	687b      	ldr	r3, [r7, #4]
 80051d0:	4a15      	ldr	r2, [pc, #84]	@ (8005228 <TIM_OC3_SetConfig+0xe4>)
 80051d2:	4293      	cmp	r3, r2
 80051d4:	d113      	bne.n	80051fe <TIM_OC3_SetConfig+0xba>
>>>>>>> 39e4d10438a821cc799a472af87a77c6796a1676
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
<<<<<<< HEAD
 80050c2:	693b      	ldr	r3, [r7, #16]
 80050c4:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 80050c8:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 80050ca:	693b      	ldr	r3, [r7, #16]
 80050cc:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 80050d0:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 80050d2:	683b      	ldr	r3, [r7, #0]
 80050d4:	695b      	ldr	r3, [r3, #20]
 80050d6:	011b      	lsls	r3, r3, #4
 80050d8:	693a      	ldr	r2, [r7, #16]
 80050da:	4313      	orrs	r3, r2
 80050dc:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 80050de:	683b      	ldr	r3, [r7, #0]
 80050e0:	699b      	ldr	r3, [r3, #24]
 80050e2:	011b      	lsls	r3, r3, #4
 80050e4:	693a      	ldr	r2, [r7, #16]
 80050e6:	4313      	orrs	r3, r2
 80050e8:	613b      	str	r3, [r7, #16]
=======
 80051d6:	693b      	ldr	r3, [r7, #16]
 80051d8:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 80051dc:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 80051de:	693b      	ldr	r3, [r7, #16]
 80051e0:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 80051e4:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 80051e6:	683b      	ldr	r3, [r7, #0]
 80051e8:	695b      	ldr	r3, [r3, #20]
 80051ea:	011b      	lsls	r3, r3, #4
 80051ec:	693a      	ldr	r2, [r7, #16]
 80051ee:	4313      	orrs	r3, r2
 80051f0:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 80051f2:	683b      	ldr	r3, [r7, #0]
 80051f4:	699b      	ldr	r3, [r3, #24]
 80051f6:	011b      	lsls	r3, r3, #4
 80051f8:	693a      	ldr	r2, [r7, #16]
 80051fa:	4313      	orrs	r3, r2
 80051fc:	613b      	str	r3, [r7, #16]
>>>>>>> 39e4d10438a821cc799a472af87a77c6796a1676
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
<<<<<<< HEAD
 80050ea:	687b      	ldr	r3, [r7, #4]
 80050ec:	693a      	ldr	r2, [r7, #16]
 80050ee:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80050f0:	687b      	ldr	r3, [r7, #4]
 80050f2:	68fa      	ldr	r2, [r7, #12]
 80050f4:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 80050f6:	683b      	ldr	r3, [r7, #0]
 80050f8:	685a      	ldr	r2, [r3, #4]
 80050fa:	687b      	ldr	r3, [r7, #4]
 80050fc:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80050fe:	687b      	ldr	r3, [r7, #4]
 8005100:	697a      	ldr	r2, [r7, #20]
 8005102:	621a      	str	r2, [r3, #32]
}
 8005104:	bf00      	nop
 8005106:	371c      	adds	r7, #28
 8005108:	46bd      	mov	sp, r7
 800510a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800510e:	4770      	bx	lr
 8005110:	40010000 	.word	0x40010000
 8005114:	40010400 	.word	0x40010400

08005118 <TIM_OC4_SetConfig>:
=======
 80051fe:	687b      	ldr	r3, [r7, #4]
 8005200:	693a      	ldr	r2, [r7, #16]
 8005202:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8005204:	687b      	ldr	r3, [r7, #4]
 8005206:	68fa      	ldr	r2, [r7, #12]
 8005208:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 800520a:	683b      	ldr	r3, [r7, #0]
 800520c:	685a      	ldr	r2, [r3, #4]
 800520e:	687b      	ldr	r3, [r7, #4]
 8005210:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005212:	687b      	ldr	r3, [r7, #4]
 8005214:	697a      	ldr	r2, [r7, #20]
 8005216:	621a      	str	r2, [r3, #32]
}
 8005218:	bf00      	nop
 800521a:	371c      	adds	r7, #28
 800521c:	46bd      	mov	sp, r7
 800521e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005222:	4770      	bx	lr
 8005224:	40010000 	.word	0x40010000
 8005228:	40010400 	.word	0x40010400

0800522c <TIM_OC4_SetConfig>:
>>>>>>> 39e4d10438a821cc799a472af87a77c6796a1676
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
<<<<<<< HEAD
 8005118:	b480      	push	{r7}
 800511a:	b087      	sub	sp, #28
 800511c:	af00      	add	r7, sp, #0
 800511e:	6078      	str	r0, [r7, #4]
 8005120:	6039      	str	r1, [r7, #0]
=======
 800522c:	b480      	push	{r7}
 800522e:	b087      	sub	sp, #28
 8005230:	af00      	add	r7, sp, #0
 8005232:	6078      	str	r0, [r7, #4]
 8005234:	6039      	str	r1, [r7, #0]
>>>>>>> 39e4d10438a821cc799a472af87a77c6796a1676
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
<<<<<<< HEAD
 8005122:	687b      	ldr	r3, [r7, #4]
 8005124:	6a1b      	ldr	r3, [r3, #32]
 8005126:	613b      	str	r3, [r7, #16]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8005128:	687b      	ldr	r3, [r7, #4]
 800512a:	6a1b      	ldr	r3, [r3, #32]
 800512c:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 8005130:	687b      	ldr	r3, [r7, #4]
 8005132:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005134:	687b      	ldr	r3, [r7, #4]
 8005136:	685b      	ldr	r3, [r3, #4]
 8005138:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800513a:	687b      	ldr	r3, [r7, #4]
 800513c:	69db      	ldr	r3, [r3, #28]
 800513e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8005140:	68fb      	ldr	r3, [r7, #12]
 8005142:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8005146:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8005148:	68fb      	ldr	r3, [r7, #12]
 800514a:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800514e:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8005150:	683b      	ldr	r3, [r7, #0]
 8005152:	681b      	ldr	r3, [r3, #0]
 8005154:	021b      	lsls	r3, r3, #8
 8005156:	68fa      	ldr	r2, [r7, #12]
 8005158:	4313      	orrs	r3, r2
 800515a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 800515c:	693b      	ldr	r3, [r7, #16]
 800515e:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 8005162:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8005164:	683b      	ldr	r3, [r7, #0]
 8005166:	689b      	ldr	r3, [r3, #8]
 8005168:	031b      	lsls	r3, r3, #12
 800516a:	693a      	ldr	r2, [r7, #16]
 800516c:	4313      	orrs	r3, r2
 800516e:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005170:	687b      	ldr	r3, [r7, #4]
 8005172:	4a12      	ldr	r2, [pc, #72]	@ (80051bc <TIM_OC4_SetConfig+0xa4>)
 8005174:	4293      	cmp	r3, r2
 8005176:	d003      	beq.n	8005180 <TIM_OC4_SetConfig+0x68>
 8005178:	687b      	ldr	r3, [r7, #4]
 800517a:	4a11      	ldr	r2, [pc, #68]	@ (80051c0 <TIM_OC4_SetConfig+0xa8>)
 800517c:	4293      	cmp	r3, r2
 800517e:	d109      	bne.n	8005194 <TIM_OC4_SetConfig+0x7c>
=======
 8005236:	687b      	ldr	r3, [r7, #4]
 8005238:	6a1b      	ldr	r3, [r3, #32]
 800523a:	613b      	str	r3, [r7, #16]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 800523c:	687b      	ldr	r3, [r7, #4]
 800523e:	6a1b      	ldr	r3, [r3, #32]
 8005240:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 8005244:	687b      	ldr	r3, [r7, #4]
 8005246:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005248:	687b      	ldr	r3, [r7, #4]
 800524a:	685b      	ldr	r3, [r3, #4]
 800524c:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800524e:	687b      	ldr	r3, [r7, #4]
 8005250:	69db      	ldr	r3, [r3, #28]
 8005252:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8005254:	68fb      	ldr	r3, [r7, #12]
 8005256:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800525a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 800525c:	68fb      	ldr	r3, [r7, #12]
 800525e:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8005262:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8005264:	683b      	ldr	r3, [r7, #0]
 8005266:	681b      	ldr	r3, [r3, #0]
 8005268:	021b      	lsls	r3, r3, #8
 800526a:	68fa      	ldr	r2, [r7, #12]
 800526c:	4313      	orrs	r3, r2
 800526e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8005270:	693b      	ldr	r3, [r7, #16]
 8005272:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 8005276:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8005278:	683b      	ldr	r3, [r7, #0]
 800527a:	689b      	ldr	r3, [r3, #8]
 800527c:	031b      	lsls	r3, r3, #12
 800527e:	693a      	ldr	r2, [r7, #16]
 8005280:	4313      	orrs	r3, r2
 8005282:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005284:	687b      	ldr	r3, [r7, #4]
 8005286:	4a12      	ldr	r2, [pc, #72]	@ (80052d0 <TIM_OC4_SetConfig+0xa4>)
 8005288:	4293      	cmp	r3, r2
 800528a:	d003      	beq.n	8005294 <TIM_OC4_SetConfig+0x68>
 800528c:	687b      	ldr	r3, [r7, #4]
 800528e:	4a11      	ldr	r2, [pc, #68]	@ (80052d4 <TIM_OC4_SetConfig+0xa8>)
 8005290:	4293      	cmp	r3, r2
 8005292:	d109      	bne.n	80052a8 <TIM_OC4_SetConfig+0x7c>
>>>>>>> 39e4d10438a821cc799a472af87a77c6796a1676
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
<<<<<<< HEAD
 8005180:	697b      	ldr	r3, [r7, #20]
 8005182:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8005186:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8005188:	683b      	ldr	r3, [r7, #0]
 800518a:	695b      	ldr	r3, [r3, #20]
 800518c:	019b      	lsls	r3, r3, #6
 800518e:	697a      	ldr	r2, [r7, #20]
 8005190:	4313      	orrs	r3, r2
 8005192:	617b      	str	r3, [r7, #20]
=======
 8005294:	697b      	ldr	r3, [r7, #20]
 8005296:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 800529a:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 800529c:	683b      	ldr	r3, [r7, #0]
 800529e:	695b      	ldr	r3, [r3, #20]
 80052a0:	019b      	lsls	r3, r3, #6
 80052a2:	697a      	ldr	r2, [r7, #20]
 80052a4:	4313      	orrs	r3, r2
 80052a6:	617b      	str	r3, [r7, #20]
>>>>>>> 39e4d10438a821cc799a472af87a77c6796a1676
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
<<<<<<< HEAD
 8005194:	687b      	ldr	r3, [r7, #4]
 8005196:	697a      	ldr	r2, [r7, #20]
 8005198:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800519a:	687b      	ldr	r3, [r7, #4]
 800519c:	68fa      	ldr	r2, [r7, #12]
 800519e:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 80051a0:	683b      	ldr	r3, [r7, #0]
 80051a2:	685a      	ldr	r2, [r3, #4]
 80051a4:	687b      	ldr	r3, [r7, #4]
 80051a6:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80051a8:	687b      	ldr	r3, [r7, #4]
 80051aa:	693a      	ldr	r2, [r7, #16]
 80051ac:	621a      	str	r2, [r3, #32]
}
 80051ae:	bf00      	nop
 80051b0:	371c      	adds	r7, #28
 80051b2:	46bd      	mov	sp, r7
 80051b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80051b8:	4770      	bx	lr
 80051ba:	bf00      	nop
 80051bc:	40010000 	.word	0x40010000
 80051c0:	40010400 	.word	0x40010400

080051c4 <TIM_TI1_ConfigInputStage>:
=======
 80052a8:	687b      	ldr	r3, [r7, #4]
 80052aa:	697a      	ldr	r2, [r7, #20]
 80052ac:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80052ae:	687b      	ldr	r3, [r7, #4]
 80052b0:	68fa      	ldr	r2, [r7, #12]
 80052b2:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 80052b4:	683b      	ldr	r3, [r7, #0]
 80052b6:	685a      	ldr	r2, [r3, #4]
 80052b8:	687b      	ldr	r3, [r7, #4]
 80052ba:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80052bc:	687b      	ldr	r3, [r7, #4]
 80052be:	693a      	ldr	r2, [r7, #16]
 80052c0:	621a      	str	r2, [r3, #32]
}
 80052c2:	bf00      	nop
 80052c4:	371c      	adds	r7, #28
 80052c6:	46bd      	mov	sp, r7
 80052c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80052cc:	4770      	bx	lr
 80052ce:	bf00      	nop
 80052d0:	40010000 	.word	0x40010000
 80052d4:	40010400 	.word	0x40010400

080052d8 <TIM_TI1_ConfigInputStage>:
>>>>>>> 39e4d10438a821cc799a472af87a77c6796a1676
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
<<<<<<< HEAD
 80051c4:	b480      	push	{r7}
 80051c6:	b087      	sub	sp, #28
 80051c8:	af00      	add	r7, sp, #0
 80051ca:	60f8      	str	r0, [r7, #12]
 80051cc:	60b9      	str	r1, [r7, #8]
 80051ce:	607a      	str	r2, [r7, #4]
=======
 80052d8:	b480      	push	{r7}
 80052da:	b087      	sub	sp, #28
 80052dc:	af00      	add	r7, sp, #0
 80052de:	60f8      	str	r0, [r7, #12]
 80052e0:	60b9      	str	r1, [r7, #8]
 80052e2:	607a      	str	r2, [r7, #4]
>>>>>>> 39e4d10438a821cc799a472af87a77c6796a1676
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
<<<<<<< HEAD
 80051d0:	68fb      	ldr	r3, [r7, #12]
 80051d2:	6a1b      	ldr	r3, [r3, #32]
 80051d4:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80051d6:	68fb      	ldr	r3, [r7, #12]
 80051d8:	6a1b      	ldr	r3, [r3, #32]
 80051da:	f023 0201 	bic.w	r2, r3, #1
 80051de:	68fb      	ldr	r3, [r7, #12]
 80051e0:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80051e2:	68fb      	ldr	r3, [r7, #12]
 80051e4:	699b      	ldr	r3, [r3, #24]
 80051e6:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80051e8:	693b      	ldr	r3, [r7, #16]
 80051ea:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 80051ee:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 80051f0:	687b      	ldr	r3, [r7, #4]
 80051f2:	011b      	lsls	r3, r3, #4
 80051f4:	693a      	ldr	r2, [r7, #16]
 80051f6:	4313      	orrs	r3, r2
 80051f8:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 80051fa:	697b      	ldr	r3, [r7, #20]
 80051fc:	f023 030a 	bic.w	r3, r3, #10
 8005200:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8005202:	697a      	ldr	r2, [r7, #20]
 8005204:	68bb      	ldr	r3, [r7, #8]
 8005206:	4313      	orrs	r3, r2
 8005208:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800520a:	68fb      	ldr	r3, [r7, #12]
 800520c:	693a      	ldr	r2, [r7, #16]
 800520e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8005210:	68fb      	ldr	r3, [r7, #12]
 8005212:	697a      	ldr	r2, [r7, #20]
 8005214:	621a      	str	r2, [r3, #32]
}
 8005216:	bf00      	nop
 8005218:	371c      	adds	r7, #28
 800521a:	46bd      	mov	sp, r7
 800521c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005220:	4770      	bx	lr

08005222 <TIM_TI2_ConfigInputStage>:
=======
 80052e4:	68fb      	ldr	r3, [r7, #12]
 80052e6:	6a1b      	ldr	r3, [r3, #32]
 80052e8:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80052ea:	68fb      	ldr	r3, [r7, #12]
 80052ec:	6a1b      	ldr	r3, [r3, #32]
 80052ee:	f023 0201 	bic.w	r2, r3, #1
 80052f2:	68fb      	ldr	r3, [r7, #12]
 80052f4:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80052f6:	68fb      	ldr	r3, [r7, #12]
 80052f8:	699b      	ldr	r3, [r3, #24]
 80052fa:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80052fc:	693b      	ldr	r3, [r7, #16]
 80052fe:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8005302:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8005304:	687b      	ldr	r3, [r7, #4]
 8005306:	011b      	lsls	r3, r3, #4
 8005308:	693a      	ldr	r2, [r7, #16]
 800530a:	4313      	orrs	r3, r2
 800530c:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800530e:	697b      	ldr	r3, [r7, #20]
 8005310:	f023 030a 	bic.w	r3, r3, #10
 8005314:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8005316:	697a      	ldr	r2, [r7, #20]
 8005318:	68bb      	ldr	r3, [r7, #8]
 800531a:	4313      	orrs	r3, r2
 800531c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800531e:	68fb      	ldr	r3, [r7, #12]
 8005320:	693a      	ldr	r2, [r7, #16]
 8005322:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8005324:	68fb      	ldr	r3, [r7, #12]
 8005326:	697a      	ldr	r2, [r7, #20]
 8005328:	621a      	str	r2, [r3, #32]
}
 800532a:	bf00      	nop
 800532c:	371c      	adds	r7, #28
 800532e:	46bd      	mov	sp, r7
 8005330:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005334:	4770      	bx	lr

08005336 <TIM_TI2_ConfigInputStage>:
>>>>>>> 39e4d10438a821cc799a472af87a77c6796a1676
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
<<<<<<< HEAD
 8005222:	b480      	push	{r7}
 8005224:	b087      	sub	sp, #28
 8005226:	af00      	add	r7, sp, #0
 8005228:	60f8      	str	r0, [r7, #12]
 800522a:	60b9      	str	r1, [r7, #8]
 800522c:	607a      	str	r2, [r7, #4]
=======
 8005336:	b480      	push	{r7}
 8005338:	b087      	sub	sp, #28
 800533a:	af00      	add	r7, sp, #0
 800533c:	60f8      	str	r0, [r7, #12]
 800533e:	60b9      	str	r1, [r7, #8]
 8005340:	607a      	str	r2, [r7, #4]
>>>>>>> 39e4d10438a821cc799a472af87a77c6796a1676
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
<<<<<<< HEAD
 800522e:	68fb      	ldr	r3, [r7, #12]
 8005230:	6a1b      	ldr	r3, [r3, #32]
 8005232:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8005234:	68fb      	ldr	r3, [r7, #12]
 8005236:	6a1b      	ldr	r3, [r3, #32]
 8005238:	f023 0210 	bic.w	r2, r3, #16
 800523c:	68fb      	ldr	r3, [r7, #12]
 800523e:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8005240:	68fb      	ldr	r3, [r7, #12]
 8005242:	699b      	ldr	r3, [r3, #24]
 8005244:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8005246:	693b      	ldr	r3, [r7, #16]
 8005248:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 800524c:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 800524e:	687b      	ldr	r3, [r7, #4]
 8005250:	031b      	lsls	r3, r3, #12
 8005252:	693a      	ldr	r2, [r7, #16]
 8005254:	4313      	orrs	r3, r2
 8005256:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8005258:	697b      	ldr	r3, [r7, #20]
 800525a:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 800525e:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 8005260:	68bb      	ldr	r3, [r7, #8]
 8005262:	011b      	lsls	r3, r3, #4
 8005264:	697a      	ldr	r2, [r7, #20]
 8005266:	4313      	orrs	r3, r2
 8005268:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800526a:	68fb      	ldr	r3, [r7, #12]
 800526c:	693a      	ldr	r2, [r7, #16]
 800526e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8005270:	68fb      	ldr	r3, [r7, #12]
 8005272:	697a      	ldr	r2, [r7, #20]
 8005274:	621a      	str	r2, [r3, #32]
}
 8005276:	bf00      	nop
 8005278:	371c      	adds	r7, #28
 800527a:	46bd      	mov	sp, r7
 800527c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005280:	4770      	bx	lr

08005282 <TIM_ITRx_SetConfig>:
=======
 8005342:	68fb      	ldr	r3, [r7, #12]
 8005344:	6a1b      	ldr	r3, [r3, #32]
 8005346:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8005348:	68fb      	ldr	r3, [r7, #12]
 800534a:	6a1b      	ldr	r3, [r3, #32]
 800534c:	f023 0210 	bic.w	r2, r3, #16
 8005350:	68fb      	ldr	r3, [r7, #12]
 8005352:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8005354:	68fb      	ldr	r3, [r7, #12]
 8005356:	699b      	ldr	r3, [r3, #24]
 8005358:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800535a:	693b      	ldr	r3, [r7, #16]
 800535c:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 8005360:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8005362:	687b      	ldr	r3, [r7, #4]
 8005364:	031b      	lsls	r3, r3, #12
 8005366:	693a      	ldr	r2, [r7, #16]
 8005368:	4313      	orrs	r3, r2
 800536a:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800536c:	697b      	ldr	r3, [r7, #20]
 800536e:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 8005372:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 8005374:	68bb      	ldr	r3, [r7, #8]
 8005376:	011b      	lsls	r3, r3, #4
 8005378:	697a      	ldr	r2, [r7, #20]
 800537a:	4313      	orrs	r3, r2
 800537c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800537e:	68fb      	ldr	r3, [r7, #12]
 8005380:	693a      	ldr	r2, [r7, #16]
 8005382:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8005384:	68fb      	ldr	r3, [r7, #12]
 8005386:	697a      	ldr	r2, [r7, #20]
 8005388:	621a      	str	r2, [r3, #32]
}
 800538a:	bf00      	nop
 800538c:	371c      	adds	r7, #28
 800538e:	46bd      	mov	sp, r7
 8005390:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005394:	4770      	bx	lr

08005396 <TIM_ITRx_SetConfig>:
>>>>>>> 39e4d10438a821cc799a472af87a77c6796a1676
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
<<<<<<< HEAD
 8005282:	b480      	push	{r7}
 8005284:	b085      	sub	sp, #20
 8005286:	af00      	add	r7, sp, #0
 8005288:	6078      	str	r0, [r7, #4]
 800528a:	6039      	str	r1, [r7, #0]
=======
 8005396:	b480      	push	{r7}
 8005398:	b085      	sub	sp, #20
 800539a:	af00      	add	r7, sp, #0
 800539c:	6078      	str	r0, [r7, #4]
 800539e:	6039      	str	r1, [r7, #0]
>>>>>>> 39e4d10438a821cc799a472af87a77c6796a1676
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
<<<<<<< HEAD
 800528c:	687b      	ldr	r3, [r7, #4]
 800528e:	689b      	ldr	r3, [r3, #8]
 8005290:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8005292:	68fb      	ldr	r3, [r7, #12]
 8005294:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8005298:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800529a:	683a      	ldr	r2, [r7, #0]
 800529c:	68fb      	ldr	r3, [r7, #12]
 800529e:	4313      	orrs	r3, r2
 80052a0:	f043 0307 	orr.w	r3, r3, #7
 80052a4:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80052a6:	687b      	ldr	r3, [r7, #4]
 80052a8:	68fa      	ldr	r2, [r7, #12]
 80052aa:	609a      	str	r2, [r3, #8]
}
 80052ac:	bf00      	nop
 80052ae:	3714      	adds	r7, #20
 80052b0:	46bd      	mov	sp, r7
 80052b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80052b6:	4770      	bx	lr

080052b8 <TIM_ETR_SetConfig>:
=======
 80053a0:	687b      	ldr	r3, [r7, #4]
 80053a2:	689b      	ldr	r3, [r3, #8]
 80053a4:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 80053a6:	68fb      	ldr	r3, [r7, #12]
 80053a8:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80053ac:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 80053ae:	683a      	ldr	r2, [r7, #0]
 80053b0:	68fb      	ldr	r3, [r7, #12]
 80053b2:	4313      	orrs	r3, r2
 80053b4:	f043 0307 	orr.w	r3, r3, #7
 80053b8:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80053ba:	687b      	ldr	r3, [r7, #4]
 80053bc:	68fa      	ldr	r2, [r7, #12]
 80053be:	609a      	str	r2, [r3, #8]
}
 80053c0:	bf00      	nop
 80053c2:	3714      	adds	r7, #20
 80053c4:	46bd      	mov	sp, r7
 80053c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80053ca:	4770      	bx	lr

080053cc <TIM_ETR_SetConfig>:
>>>>>>> 39e4d10438a821cc799a472af87a77c6796a1676
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
<<<<<<< HEAD
 80052b8:	b480      	push	{r7}
 80052ba:	b087      	sub	sp, #28
 80052bc:	af00      	add	r7, sp, #0
 80052be:	60f8      	str	r0, [r7, #12]
 80052c0:	60b9      	str	r1, [r7, #8]
 80052c2:	607a      	str	r2, [r7, #4]
 80052c4:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 80052c6:	68fb      	ldr	r3, [r7, #12]
 80052c8:	689b      	ldr	r3, [r3, #8]
 80052ca:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80052cc:	697b      	ldr	r3, [r7, #20]
 80052ce:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 80052d2:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 80052d4:	683b      	ldr	r3, [r7, #0]
 80052d6:	021a      	lsls	r2, r3, #8
 80052d8:	687b      	ldr	r3, [r7, #4]
 80052da:	431a      	orrs	r2, r3
 80052dc:	68bb      	ldr	r3, [r7, #8]
 80052de:	4313      	orrs	r3, r2
 80052e0:	697a      	ldr	r2, [r7, #20]
 80052e2:	4313      	orrs	r3, r2
 80052e4:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80052e6:	68fb      	ldr	r3, [r7, #12]
 80052e8:	697a      	ldr	r2, [r7, #20]
 80052ea:	609a      	str	r2, [r3, #8]
}
 80052ec:	bf00      	nop
 80052ee:	371c      	adds	r7, #28
 80052f0:	46bd      	mov	sp, r7
 80052f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80052f6:	4770      	bx	lr

080052f8 <TIM_CCxChannelCmd>:
=======
 80053cc:	b480      	push	{r7}
 80053ce:	b087      	sub	sp, #28
 80053d0:	af00      	add	r7, sp, #0
 80053d2:	60f8      	str	r0, [r7, #12]
 80053d4:	60b9      	str	r1, [r7, #8]
 80053d6:	607a      	str	r2, [r7, #4]
 80053d8:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 80053da:	68fb      	ldr	r3, [r7, #12]
 80053dc:	689b      	ldr	r3, [r3, #8]
 80053de:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80053e0:	697b      	ldr	r3, [r7, #20]
 80053e2:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 80053e6:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 80053e8:	683b      	ldr	r3, [r7, #0]
 80053ea:	021a      	lsls	r2, r3, #8
 80053ec:	687b      	ldr	r3, [r7, #4]
 80053ee:	431a      	orrs	r2, r3
 80053f0:	68bb      	ldr	r3, [r7, #8]
 80053f2:	4313      	orrs	r3, r2
 80053f4:	697a      	ldr	r2, [r7, #20]
 80053f6:	4313      	orrs	r3, r2
 80053f8:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80053fa:	68fb      	ldr	r3, [r7, #12]
 80053fc:	697a      	ldr	r2, [r7, #20]
 80053fe:	609a      	str	r2, [r3, #8]
}
 8005400:	bf00      	nop
 8005402:	371c      	adds	r7, #28
 8005404:	46bd      	mov	sp, r7
 8005406:	f85d 7b04 	ldr.w	r7, [sp], #4
 800540a:	4770      	bx	lr

0800540c <TIM_CCxChannelCmd>:
>>>>>>> 39e4d10438a821cc799a472af87a77c6796a1676
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
<<<<<<< HEAD
 80052f8:	b480      	push	{r7}
 80052fa:	b087      	sub	sp, #28
 80052fc:	af00      	add	r7, sp, #0
 80052fe:	60f8      	str	r0, [r7, #12]
 8005300:	60b9      	str	r1, [r7, #8]
 8005302:	607a      	str	r2, [r7, #4]
=======
 800540c:	b480      	push	{r7}
 800540e:	b087      	sub	sp, #28
 8005410:	af00      	add	r7, sp, #0
 8005412:	60f8      	str	r0, [r7, #12]
 8005414:	60b9      	str	r1, [r7, #8]
 8005416:	607a      	str	r2, [r7, #4]
>>>>>>> 39e4d10438a821cc799a472af87a77c6796a1676

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
<<<<<<< HEAD
 8005304:	68bb      	ldr	r3, [r7, #8]
 8005306:	f003 031f 	and.w	r3, r3, #31
 800530a:	2201      	movs	r2, #1
 800530c:	fa02 f303 	lsl.w	r3, r2, r3
 8005310:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8005312:	68fb      	ldr	r3, [r7, #12]
 8005314:	6a1a      	ldr	r2, [r3, #32]
 8005316:	697b      	ldr	r3, [r7, #20]
 8005318:	43db      	mvns	r3, r3
 800531a:	401a      	ands	r2, r3
 800531c:	68fb      	ldr	r3, [r7, #12]
 800531e:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8005320:	68fb      	ldr	r3, [r7, #12]
 8005322:	6a1a      	ldr	r2, [r3, #32]
 8005324:	68bb      	ldr	r3, [r7, #8]
 8005326:	f003 031f 	and.w	r3, r3, #31
 800532a:	6879      	ldr	r1, [r7, #4]
 800532c:	fa01 f303 	lsl.w	r3, r1, r3
 8005330:	431a      	orrs	r2, r3
 8005332:	68fb      	ldr	r3, [r7, #12]
 8005334:	621a      	str	r2, [r3, #32]
}
 8005336:	bf00      	nop
 8005338:	371c      	adds	r7, #28
 800533a:	46bd      	mov	sp, r7
 800533c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005340:	4770      	bx	lr
	...

08005344 <HAL_TIMEx_MasterConfigSynchronization>:
=======
 8005418:	68bb      	ldr	r3, [r7, #8]
 800541a:	f003 031f 	and.w	r3, r3, #31
 800541e:	2201      	movs	r2, #1
 8005420:	fa02 f303 	lsl.w	r3, r2, r3
 8005424:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8005426:	68fb      	ldr	r3, [r7, #12]
 8005428:	6a1a      	ldr	r2, [r3, #32]
 800542a:	697b      	ldr	r3, [r7, #20]
 800542c:	43db      	mvns	r3, r3
 800542e:	401a      	ands	r2, r3
 8005430:	68fb      	ldr	r3, [r7, #12]
 8005432:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8005434:	68fb      	ldr	r3, [r7, #12]
 8005436:	6a1a      	ldr	r2, [r3, #32]
 8005438:	68bb      	ldr	r3, [r7, #8]
 800543a:	f003 031f 	and.w	r3, r3, #31
 800543e:	6879      	ldr	r1, [r7, #4]
 8005440:	fa01 f303 	lsl.w	r3, r1, r3
 8005444:	431a      	orrs	r2, r3
 8005446:	68fb      	ldr	r3, [r7, #12]
 8005448:	621a      	str	r2, [r3, #32]
}
 800544a:	bf00      	nop
 800544c:	371c      	adds	r7, #28
 800544e:	46bd      	mov	sp, r7
 8005450:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005454:	4770      	bx	lr
	...

08005458 <HAL_TIMEx_MasterConfigSynchronization>:
>>>>>>> 39e4d10438a821cc799a472af87a77c6796a1676
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
<<<<<<< HEAD
 8005344:	b480      	push	{r7}
 8005346:	b085      	sub	sp, #20
 8005348:	af00      	add	r7, sp, #0
 800534a:	6078      	str	r0, [r7, #4]
 800534c:	6039      	str	r1, [r7, #0]
=======
 8005458:	b480      	push	{r7}
 800545a:	b085      	sub	sp, #20
 800545c:	af00      	add	r7, sp, #0
 800545e:	6078      	str	r0, [r7, #4]
 8005460:	6039      	str	r1, [r7, #0]
>>>>>>> 39e4d10438a821cc799a472af87a77c6796a1676
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
<<<<<<< HEAD
 800534e:	687b      	ldr	r3, [r7, #4]
 8005350:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8005354:	2b01      	cmp	r3, #1
 8005356:	d101      	bne.n	800535c <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8005358:	2302      	movs	r3, #2
 800535a:	e05a      	b.n	8005412 <HAL_TIMEx_MasterConfigSynchronization+0xce>
 800535c:	687b      	ldr	r3, [r7, #4]
 800535e:	2201      	movs	r2, #1
 8005360:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005364:	687b      	ldr	r3, [r7, #4]
 8005366:	2202      	movs	r2, #2
 8005368:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 800536c:	687b      	ldr	r3, [r7, #4]
 800536e:	681b      	ldr	r3, [r3, #0]
 8005370:	685b      	ldr	r3, [r3, #4]
 8005372:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8005374:	687b      	ldr	r3, [r7, #4]
 8005376:	681b      	ldr	r3, [r3, #0]
 8005378:	689b      	ldr	r3, [r3, #8]
 800537a:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800537c:	68fb      	ldr	r3, [r7, #12]
 800537e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8005382:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8005384:	683b      	ldr	r3, [r7, #0]
 8005386:	681b      	ldr	r3, [r3, #0]
 8005388:	68fa      	ldr	r2, [r7, #12]
 800538a:	4313      	orrs	r3, r2
 800538c:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800538e:	687b      	ldr	r3, [r7, #4]
 8005390:	681b      	ldr	r3, [r3, #0]
 8005392:	68fa      	ldr	r2, [r7, #12]
 8005394:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005396:	687b      	ldr	r3, [r7, #4]
 8005398:	681b      	ldr	r3, [r3, #0]
 800539a:	4a21      	ldr	r2, [pc, #132]	@ (8005420 <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 800539c:	4293      	cmp	r3, r2
 800539e:	d022      	beq.n	80053e6 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80053a0:	687b      	ldr	r3, [r7, #4]
 80053a2:	681b      	ldr	r3, [r3, #0]
 80053a4:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80053a8:	d01d      	beq.n	80053e6 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80053aa:	687b      	ldr	r3, [r7, #4]
 80053ac:	681b      	ldr	r3, [r3, #0]
 80053ae:	4a1d      	ldr	r2, [pc, #116]	@ (8005424 <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 80053b0:	4293      	cmp	r3, r2
 80053b2:	d018      	beq.n	80053e6 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80053b4:	687b      	ldr	r3, [r7, #4]
 80053b6:	681b      	ldr	r3, [r3, #0]
 80053b8:	4a1b      	ldr	r2, [pc, #108]	@ (8005428 <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 80053ba:	4293      	cmp	r3, r2
 80053bc:	d013      	beq.n	80053e6 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80053be:	687b      	ldr	r3, [r7, #4]
 80053c0:	681b      	ldr	r3, [r3, #0]
 80053c2:	4a1a      	ldr	r2, [pc, #104]	@ (800542c <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 80053c4:	4293      	cmp	r3, r2
 80053c6:	d00e      	beq.n	80053e6 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80053c8:	687b      	ldr	r3, [r7, #4]
 80053ca:	681b      	ldr	r3, [r3, #0]
 80053cc:	4a18      	ldr	r2, [pc, #96]	@ (8005430 <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 80053ce:	4293      	cmp	r3, r2
 80053d0:	d009      	beq.n	80053e6 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80053d2:	687b      	ldr	r3, [r7, #4]
 80053d4:	681b      	ldr	r3, [r3, #0]
 80053d6:	4a17      	ldr	r2, [pc, #92]	@ (8005434 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 80053d8:	4293      	cmp	r3, r2
 80053da:	d004      	beq.n	80053e6 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80053dc:	687b      	ldr	r3, [r7, #4]
 80053de:	681b      	ldr	r3, [r3, #0]
 80053e0:	4a15      	ldr	r2, [pc, #84]	@ (8005438 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 80053e2:	4293      	cmp	r3, r2
 80053e4:	d10c      	bne.n	8005400 <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 80053e6:	68bb      	ldr	r3, [r7, #8]
 80053e8:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 80053ec:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80053ee:	683b      	ldr	r3, [r7, #0]
 80053f0:	685b      	ldr	r3, [r3, #4]
 80053f2:	68ba      	ldr	r2, [r7, #8]
 80053f4:	4313      	orrs	r3, r2
 80053f6:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 80053f8:	687b      	ldr	r3, [r7, #4]
 80053fa:	681b      	ldr	r3, [r3, #0]
 80053fc:	68ba      	ldr	r2, [r7, #8]
 80053fe:	609a      	str	r2, [r3, #8]
=======
 8005462:	687b      	ldr	r3, [r7, #4]
 8005464:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8005468:	2b01      	cmp	r3, #1
 800546a:	d101      	bne.n	8005470 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 800546c:	2302      	movs	r3, #2
 800546e:	e05a      	b.n	8005526 <HAL_TIMEx_MasterConfigSynchronization+0xce>
 8005470:	687b      	ldr	r3, [r7, #4]
 8005472:	2201      	movs	r2, #1
 8005474:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005478:	687b      	ldr	r3, [r7, #4]
 800547a:	2202      	movs	r2, #2
 800547c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8005480:	687b      	ldr	r3, [r7, #4]
 8005482:	681b      	ldr	r3, [r3, #0]
 8005484:	685b      	ldr	r3, [r3, #4]
 8005486:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8005488:	687b      	ldr	r3, [r7, #4]
 800548a:	681b      	ldr	r3, [r3, #0]
 800548c:	689b      	ldr	r3, [r3, #8]
 800548e:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8005490:	68fb      	ldr	r3, [r7, #12]
 8005492:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8005496:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8005498:	683b      	ldr	r3, [r7, #0]
 800549a:	681b      	ldr	r3, [r3, #0]
 800549c:	68fa      	ldr	r2, [r7, #12]
 800549e:	4313      	orrs	r3, r2
 80054a0:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 80054a2:	687b      	ldr	r3, [r7, #4]
 80054a4:	681b      	ldr	r3, [r3, #0]
 80054a6:	68fa      	ldr	r2, [r7, #12]
 80054a8:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80054aa:	687b      	ldr	r3, [r7, #4]
 80054ac:	681b      	ldr	r3, [r3, #0]
 80054ae:	4a21      	ldr	r2, [pc, #132]	@ (8005534 <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 80054b0:	4293      	cmp	r3, r2
 80054b2:	d022      	beq.n	80054fa <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80054b4:	687b      	ldr	r3, [r7, #4]
 80054b6:	681b      	ldr	r3, [r3, #0]
 80054b8:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80054bc:	d01d      	beq.n	80054fa <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80054be:	687b      	ldr	r3, [r7, #4]
 80054c0:	681b      	ldr	r3, [r3, #0]
 80054c2:	4a1d      	ldr	r2, [pc, #116]	@ (8005538 <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 80054c4:	4293      	cmp	r3, r2
 80054c6:	d018      	beq.n	80054fa <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80054c8:	687b      	ldr	r3, [r7, #4]
 80054ca:	681b      	ldr	r3, [r3, #0]
 80054cc:	4a1b      	ldr	r2, [pc, #108]	@ (800553c <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 80054ce:	4293      	cmp	r3, r2
 80054d0:	d013      	beq.n	80054fa <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80054d2:	687b      	ldr	r3, [r7, #4]
 80054d4:	681b      	ldr	r3, [r3, #0]
 80054d6:	4a1a      	ldr	r2, [pc, #104]	@ (8005540 <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 80054d8:	4293      	cmp	r3, r2
 80054da:	d00e      	beq.n	80054fa <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80054dc:	687b      	ldr	r3, [r7, #4]
 80054de:	681b      	ldr	r3, [r3, #0]
 80054e0:	4a18      	ldr	r2, [pc, #96]	@ (8005544 <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 80054e2:	4293      	cmp	r3, r2
 80054e4:	d009      	beq.n	80054fa <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80054e6:	687b      	ldr	r3, [r7, #4]
 80054e8:	681b      	ldr	r3, [r3, #0]
 80054ea:	4a17      	ldr	r2, [pc, #92]	@ (8005548 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 80054ec:	4293      	cmp	r3, r2
 80054ee:	d004      	beq.n	80054fa <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80054f0:	687b      	ldr	r3, [r7, #4]
 80054f2:	681b      	ldr	r3, [r3, #0]
 80054f4:	4a15      	ldr	r2, [pc, #84]	@ (800554c <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 80054f6:	4293      	cmp	r3, r2
 80054f8:	d10c      	bne.n	8005514 <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 80054fa:	68bb      	ldr	r3, [r7, #8]
 80054fc:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8005500:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8005502:	683b      	ldr	r3, [r7, #0]
 8005504:	685b      	ldr	r3, [r3, #4]
 8005506:	68ba      	ldr	r2, [r7, #8]
 8005508:	4313      	orrs	r3, r2
 800550a:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800550c:	687b      	ldr	r3, [r7, #4]
 800550e:	681b      	ldr	r3, [r3, #0]
 8005510:	68ba      	ldr	r2, [r7, #8]
 8005512:	609a      	str	r2, [r3, #8]
>>>>>>> 39e4d10438a821cc799a472af87a77c6796a1676
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
<<<<<<< HEAD
 8005400:	687b      	ldr	r3, [r7, #4]
 8005402:	2201      	movs	r2, #1
 8005404:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8005408:	687b      	ldr	r3, [r7, #4]
 800540a:	2200      	movs	r2, #0
 800540c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 8005410:	2300      	movs	r3, #0
}
 8005412:	4618      	mov	r0, r3
 8005414:	3714      	adds	r7, #20
 8005416:	46bd      	mov	sp, r7
 8005418:	f85d 7b04 	ldr.w	r7, [sp], #4
 800541c:	4770      	bx	lr
 800541e:	bf00      	nop
 8005420:	40010000 	.word	0x40010000
 8005424:	40000400 	.word	0x40000400
 8005428:	40000800 	.word	0x40000800
 800542c:	40000c00 	.word	0x40000c00
 8005430:	40010400 	.word	0x40010400
 8005434:	40014000 	.word	0x40014000
 8005438:	40001800 	.word	0x40001800

0800543c <HAL_TIMEx_ConfigBreakDeadTime>:
=======
 8005514:	687b      	ldr	r3, [r7, #4]
 8005516:	2201      	movs	r2, #1
 8005518:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 800551c:	687b      	ldr	r3, [r7, #4]
 800551e:	2200      	movs	r2, #0
 8005520:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 8005524:	2300      	movs	r3, #0
}
 8005526:	4618      	mov	r0, r3
 8005528:	3714      	adds	r7, #20
 800552a:	46bd      	mov	sp, r7
 800552c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005530:	4770      	bx	lr
 8005532:	bf00      	nop
 8005534:	40010000 	.word	0x40010000
 8005538:	40000400 	.word	0x40000400
 800553c:	40000800 	.word	0x40000800
 8005540:	40000c00 	.word	0x40000c00
 8005544:	40010400 	.word	0x40010400
 8005548:	40014000 	.word	0x40014000
 800554c:	40001800 	.word	0x40001800

08005550 <HAL_TIMEx_ConfigBreakDeadTime>:
>>>>>>> 39e4d10438a821cc799a472af87a77c6796a1676
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                const TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
<<<<<<< HEAD
 800543c:	b480      	push	{r7}
 800543e:	b085      	sub	sp, #20
 8005440:	af00      	add	r7, sp, #0
 8005442:	6078      	str	r0, [r7, #4]
 8005444:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 8005446:	2300      	movs	r3, #0
 8005448:	60fb      	str	r3, [r7, #12]
=======
 8005550:	b480      	push	{r7}
 8005552:	b085      	sub	sp, #20
 8005554:	af00      	add	r7, sp, #0
 8005556:	6078      	str	r0, [r7, #4]
 8005558:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 800555a:	2300      	movs	r3, #0
 800555c:	60fb      	str	r3, [r7, #12]
>>>>>>> 39e4d10438a821cc799a472af87a77c6796a1676
  assert_param(IS_TIM_BREAK_STATE(sBreakDeadTimeConfig->BreakState));
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
<<<<<<< HEAD
 800544a:	687b      	ldr	r3, [r7, #4]
 800544c:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8005450:	2b01      	cmp	r3, #1
 8005452:	d101      	bne.n	8005458 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 8005454:	2302      	movs	r3, #2
 8005456:	e03d      	b.n	80054d4 <HAL_TIMEx_ConfigBreakDeadTime+0x98>
 8005458:	687b      	ldr	r3, [r7, #4]
 800545a:	2201      	movs	r2, #1
 800545c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
=======
 800555e:	687b      	ldr	r3, [r7, #4]
 8005560:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8005564:	2b01      	cmp	r3, #1
 8005566:	d101      	bne.n	800556c <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 8005568:	2302      	movs	r3, #2
 800556a:	e03d      	b.n	80055e8 <HAL_TIMEx_ConfigBreakDeadTime+0x98>
 800556c:	687b      	ldr	r3, [r7, #4]
 800556e:	2201      	movs	r2, #1
 8005570:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
>>>>>>> 39e4d10438a821cc799a472af87a77c6796a1676

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
<<<<<<< HEAD
 8005460:	68fb      	ldr	r3, [r7, #12]
 8005462:	f023 02ff 	bic.w	r2, r3, #255	@ 0xff
 8005466:	683b      	ldr	r3, [r7, #0]
 8005468:	68db      	ldr	r3, [r3, #12]
 800546a:	4313      	orrs	r3, r2
 800546c:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 800546e:	68fb      	ldr	r3, [r7, #12]
 8005470:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8005474:	683b      	ldr	r3, [r7, #0]
 8005476:	689b      	ldr	r3, [r3, #8]
 8005478:	4313      	orrs	r3, r2
 800547a:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 800547c:	68fb      	ldr	r3, [r7, #12]
 800547e:	f423 6280 	bic.w	r2, r3, #1024	@ 0x400
 8005482:	683b      	ldr	r3, [r7, #0]
 8005484:	685b      	ldr	r3, [r3, #4]
 8005486:	4313      	orrs	r3, r2
 8005488:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 800548a:	68fb      	ldr	r3, [r7, #12]
 800548c:	f423 6200 	bic.w	r2, r3, #2048	@ 0x800
 8005490:	683b      	ldr	r3, [r7, #0]
 8005492:	681b      	ldr	r3, [r3, #0]
 8005494:	4313      	orrs	r3, r2
 8005496:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 8005498:	68fb      	ldr	r3, [r7, #12]
 800549a:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 800549e:	683b      	ldr	r3, [r7, #0]
 80054a0:	691b      	ldr	r3, [r3, #16]
 80054a2:	4313      	orrs	r3, r2
 80054a4:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 80054a6:	68fb      	ldr	r3, [r7, #12]
 80054a8:	f423 5200 	bic.w	r2, r3, #8192	@ 0x2000
 80054ac:	683b      	ldr	r3, [r7, #0]
 80054ae:	695b      	ldr	r3, [r3, #20]
 80054b0:	4313      	orrs	r3, r2
 80054b2:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 80054b4:	68fb      	ldr	r3, [r7, #12]
 80054b6:	f423 4280 	bic.w	r2, r3, #16384	@ 0x4000
 80054ba:	683b      	ldr	r3, [r7, #0]
 80054bc:	69db      	ldr	r3, [r3, #28]
 80054be:	4313      	orrs	r3, r2
 80054c0:	60fb      	str	r3, [r7, #12]
=======
 8005574:	68fb      	ldr	r3, [r7, #12]
 8005576:	f023 02ff 	bic.w	r2, r3, #255	@ 0xff
 800557a:	683b      	ldr	r3, [r7, #0]
 800557c:	68db      	ldr	r3, [r3, #12]
 800557e:	4313      	orrs	r3, r2
 8005580:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 8005582:	68fb      	ldr	r3, [r7, #12]
 8005584:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8005588:	683b      	ldr	r3, [r7, #0]
 800558a:	689b      	ldr	r3, [r3, #8]
 800558c:	4313      	orrs	r3, r2
 800558e:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 8005590:	68fb      	ldr	r3, [r7, #12]
 8005592:	f423 6280 	bic.w	r2, r3, #1024	@ 0x400
 8005596:	683b      	ldr	r3, [r7, #0]
 8005598:	685b      	ldr	r3, [r3, #4]
 800559a:	4313      	orrs	r3, r2
 800559c:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 800559e:	68fb      	ldr	r3, [r7, #12]
 80055a0:	f423 6200 	bic.w	r2, r3, #2048	@ 0x800
 80055a4:	683b      	ldr	r3, [r7, #0]
 80055a6:	681b      	ldr	r3, [r3, #0]
 80055a8:	4313      	orrs	r3, r2
 80055aa:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 80055ac:	68fb      	ldr	r3, [r7, #12]
 80055ae:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 80055b2:	683b      	ldr	r3, [r7, #0]
 80055b4:	691b      	ldr	r3, [r3, #16]
 80055b6:	4313      	orrs	r3, r2
 80055b8:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 80055ba:	68fb      	ldr	r3, [r7, #12]
 80055bc:	f423 5200 	bic.w	r2, r3, #8192	@ 0x2000
 80055c0:	683b      	ldr	r3, [r7, #0]
 80055c2:	695b      	ldr	r3, [r3, #20]
 80055c4:	4313      	orrs	r3, r2
 80055c6:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 80055c8:	68fb      	ldr	r3, [r7, #12]
 80055ca:	f423 4280 	bic.w	r2, r3, #16384	@ 0x4000
 80055ce:	683b      	ldr	r3, [r7, #0]
 80055d0:	69db      	ldr	r3, [r3, #28]
 80055d2:	4313      	orrs	r3, r2
 80055d4:	60fb      	str	r3, [r7, #12]
>>>>>>> 39e4d10438a821cc799a472af87a77c6796a1676


  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
<<<<<<< HEAD
 80054c2:	687b      	ldr	r3, [r7, #4]
 80054c4:	681b      	ldr	r3, [r3, #0]
 80054c6:	68fa      	ldr	r2, [r7, #12]
 80054c8:	645a      	str	r2, [r3, #68]	@ 0x44

  __HAL_UNLOCK(htim);
 80054ca:	687b      	ldr	r3, [r7, #4]
 80054cc:	2200      	movs	r2, #0
 80054ce:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 80054d2:	2300      	movs	r3, #0
}
 80054d4:	4618      	mov	r0, r3
 80054d6:	3714      	adds	r7, #20
 80054d8:	46bd      	mov	sp, r7
 80054da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80054de:	4770      	bx	lr

080054e0 <HAL_TIMEx_CommutCallback>:
=======
 80055d6:	687b      	ldr	r3, [r7, #4]
 80055d8:	681b      	ldr	r3, [r3, #0]
 80055da:	68fa      	ldr	r2, [r7, #12]
 80055dc:	645a      	str	r2, [r3, #68]	@ 0x44

  __HAL_UNLOCK(htim);
 80055de:	687b      	ldr	r3, [r7, #4]
 80055e0:	2200      	movs	r2, #0
 80055e2:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 80055e6:	2300      	movs	r3, #0
}
 80055e8:	4618      	mov	r0, r3
 80055ea:	3714      	adds	r7, #20
 80055ec:	46bd      	mov	sp, r7
 80055ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80055f2:	4770      	bx	lr

080055f4 <HAL_TIMEx_CommutCallback>:
>>>>>>> 39e4d10438a821cc799a472af87a77c6796a1676
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
<<<<<<< HEAD
 80054e0:	b480      	push	{r7}
 80054e2:	b083      	sub	sp, #12
 80054e4:	af00      	add	r7, sp, #0
 80054e6:	6078      	str	r0, [r7, #4]
=======
 80055f4:	b480      	push	{r7}
 80055f6:	b083      	sub	sp, #12
 80055f8:	af00      	add	r7, sp, #0
 80055fa:	6078      	str	r0, [r7, #4]
>>>>>>> 39e4d10438a821cc799a472af87a77c6796a1676
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
<<<<<<< HEAD
 80054e8:	bf00      	nop
 80054ea:	370c      	adds	r7, #12
 80054ec:	46bd      	mov	sp, r7
 80054ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80054f2:	4770      	bx	lr

080054f4 <HAL_TIMEx_BreakCallback>:
=======
 80055fc:	bf00      	nop
 80055fe:	370c      	adds	r7, #12
 8005600:	46bd      	mov	sp, r7
 8005602:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005606:	4770      	bx	lr

08005608 <HAL_TIMEx_BreakCallback>:
>>>>>>> 39e4d10438a821cc799a472af87a77c6796a1676
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
<<<<<<< HEAD
 80054f4:	b480      	push	{r7}
 80054f6:	b083      	sub	sp, #12
 80054f8:	af00      	add	r7, sp, #0
 80054fa:	6078      	str	r0, [r7, #4]
=======
 8005608:	b480      	push	{r7}
 800560a:	b083      	sub	sp, #12
 800560c:	af00      	add	r7, sp, #0
 800560e:	6078      	str	r0, [r7, #4]
>>>>>>> 39e4d10438a821cc799a472af87a77c6796a1676
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
<<<<<<< HEAD
 80054fc:	bf00      	nop
 80054fe:	370c      	adds	r7, #12
 8005500:	46bd      	mov	sp, r7
 8005502:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005506:	4770      	bx	lr

08005508 <HAL_UART_Init>:
=======
 8005610:	bf00      	nop
 8005612:	370c      	adds	r7, #12
 8005614:	46bd      	mov	sp, r7
 8005616:	f85d 7b04 	ldr.w	r7, [sp], #4
 800561a:	4770      	bx	lr

0800561c <HAL_UART_Init>:
>>>>>>> 39e4d10438a821cc799a472af87a77c6796a1676
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
<<<<<<< HEAD
 8005508:	b580      	push	{r7, lr}
 800550a:	b082      	sub	sp, #8
 800550c:	af00      	add	r7, sp, #0
 800550e:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8005510:	687b      	ldr	r3, [r7, #4]
 8005512:	2b00      	cmp	r3, #0
 8005514:	d101      	bne.n	800551a <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8005516:	2301      	movs	r3, #1
 8005518:	e042      	b.n	80055a0 <HAL_UART_Init+0x98>
=======
 800561c:	b580      	push	{r7, lr}
 800561e:	b082      	sub	sp, #8
 8005620:	af00      	add	r7, sp, #0
 8005622:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8005624:	687b      	ldr	r3, [r7, #4]
 8005626:	2b00      	cmp	r3, #0
 8005628:	d101      	bne.n	800562e <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800562a:	2301      	movs	r3, #1
 800562c:	e042      	b.n	80056b4 <HAL_UART_Init+0x98>
>>>>>>> 39e4d10438a821cc799a472af87a77c6796a1676
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
<<<<<<< HEAD
 800551a:	687b      	ldr	r3, [r7, #4]
 800551c:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8005520:	b2db      	uxtb	r3, r3
 8005522:	2b00      	cmp	r3, #0
 8005524:	d106      	bne.n	8005534 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8005526:	687b      	ldr	r3, [r7, #4]
 8005528:	2200      	movs	r2, #0
 800552a:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
=======
 800562e:	687b      	ldr	r3, [r7, #4]
 8005630:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8005634:	b2db      	uxtb	r3, r3
 8005636:	2b00      	cmp	r3, #0
 8005638:	d106      	bne.n	8005648 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800563a:	687b      	ldr	r3, [r7, #4]
 800563c:	2200      	movs	r2, #0
 800563e:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
>>>>>>> 39e4d10438a821cc799a472af87a77c6796a1676

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
<<<<<<< HEAD
 800552e:	6878      	ldr	r0, [r7, #4]
 8005530:	f7fc fc18 	bl	8001d64 <HAL_UART_MspInit>
=======
 8005642:	6878      	ldr	r0, [r7, #4]
 8005644:	f7fc fc18 	bl	8001e78 <HAL_UART_MspInit>
>>>>>>> 39e4d10438a821cc799a472af87a77c6796a1676
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
<<<<<<< HEAD
 8005534:	687b      	ldr	r3, [r7, #4]
 8005536:	2224      	movs	r2, #36	@ 0x24
 8005538:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 800553c:	687b      	ldr	r3, [r7, #4]
 800553e:	681b      	ldr	r3, [r3, #0]
 8005540:	68da      	ldr	r2, [r3, #12]
 8005542:	687b      	ldr	r3, [r7, #4]
 8005544:	681b      	ldr	r3, [r3, #0]
 8005546:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 800554a:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 800554c:	6878      	ldr	r0, [r7, #4]
 800554e:	f000 fd11 	bl	8005f74 <UART_SetConfig>
=======
 8005648:	687b      	ldr	r3, [r7, #4]
 800564a:	2224      	movs	r2, #36	@ 0x24
 800564c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8005650:	687b      	ldr	r3, [r7, #4]
 8005652:	681b      	ldr	r3, [r3, #0]
 8005654:	68da      	ldr	r2, [r3, #12]
 8005656:	687b      	ldr	r3, [r7, #4]
 8005658:	681b      	ldr	r3, [r3, #0]
 800565a:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 800565e:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8005660:	6878      	ldr	r0, [r7, #4]
 8005662:	f000 fd11 	bl	8006088 <UART_SetConfig>
>>>>>>> 39e4d10438a821cc799a472af87a77c6796a1676

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
<<<<<<< HEAD
 8005552:	687b      	ldr	r3, [r7, #4]
 8005554:	681b      	ldr	r3, [r3, #0]
 8005556:	691a      	ldr	r2, [r3, #16]
 8005558:	687b      	ldr	r3, [r7, #4]
 800555a:	681b      	ldr	r3, [r3, #0]
 800555c:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8005560:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8005562:	687b      	ldr	r3, [r7, #4]
 8005564:	681b      	ldr	r3, [r3, #0]
 8005566:	695a      	ldr	r2, [r3, #20]
 8005568:	687b      	ldr	r3, [r7, #4]
 800556a:	681b      	ldr	r3, [r3, #0]
 800556c:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8005570:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8005572:	687b      	ldr	r3, [r7, #4]
 8005574:	681b      	ldr	r3, [r3, #0]
 8005576:	68da      	ldr	r2, [r3, #12]
 8005578:	687b      	ldr	r3, [r7, #4]
 800557a:	681b      	ldr	r3, [r3, #0]
 800557c:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8005580:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005582:	687b      	ldr	r3, [r7, #4]
 8005584:	2200      	movs	r2, #0
 8005586:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->gState = HAL_UART_STATE_READY;
 8005588:	687b      	ldr	r3, [r7, #4]
 800558a:	2220      	movs	r2, #32
 800558c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  huart->RxState = HAL_UART_STATE_READY;
 8005590:	687b      	ldr	r3, [r7, #4]
 8005592:	2220      	movs	r2, #32
 8005594:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8005598:	687b      	ldr	r3, [r7, #4]
 800559a:	2200      	movs	r2, #0
 800559c:	635a      	str	r2, [r3, #52]	@ 0x34

  return HAL_OK;
 800559e:	2300      	movs	r3, #0
}
 80055a0:	4618      	mov	r0, r3
 80055a2:	3708      	adds	r7, #8
 80055a4:	46bd      	mov	sp, r7
 80055a6:	bd80      	pop	{r7, pc}

080055a8 <HAL_UART_Transmit_IT>:
=======
 8005666:	687b      	ldr	r3, [r7, #4]
 8005668:	681b      	ldr	r3, [r3, #0]
 800566a:	691a      	ldr	r2, [r3, #16]
 800566c:	687b      	ldr	r3, [r7, #4]
 800566e:	681b      	ldr	r3, [r3, #0]
 8005670:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8005674:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8005676:	687b      	ldr	r3, [r7, #4]
 8005678:	681b      	ldr	r3, [r3, #0]
 800567a:	695a      	ldr	r2, [r3, #20]
 800567c:	687b      	ldr	r3, [r7, #4]
 800567e:	681b      	ldr	r3, [r3, #0]
 8005680:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8005684:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8005686:	687b      	ldr	r3, [r7, #4]
 8005688:	681b      	ldr	r3, [r3, #0]
 800568a:	68da      	ldr	r2, [r3, #12]
 800568c:	687b      	ldr	r3, [r7, #4]
 800568e:	681b      	ldr	r3, [r3, #0]
 8005690:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8005694:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005696:	687b      	ldr	r3, [r7, #4]
 8005698:	2200      	movs	r2, #0
 800569a:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->gState = HAL_UART_STATE_READY;
 800569c:	687b      	ldr	r3, [r7, #4]
 800569e:	2220      	movs	r2, #32
 80056a0:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  huart->RxState = HAL_UART_STATE_READY;
 80056a4:	687b      	ldr	r3, [r7, #4]
 80056a6:	2220      	movs	r2, #32
 80056a8:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 80056ac:	687b      	ldr	r3, [r7, #4]
 80056ae:	2200      	movs	r2, #0
 80056b0:	635a      	str	r2, [r3, #52]	@ 0x34

  return HAL_OK;
 80056b2:	2300      	movs	r3, #0
}
 80056b4:	4618      	mov	r0, r3
 80056b6:	3708      	adds	r7, #8
 80056b8:	46bd      	mov	sp, r7
 80056ba:	bd80      	pop	{r7, pc}

080056bc <HAL_UART_Transmit_IT>:
>>>>>>> 39e4d10438a821cc799a472af87a77c6796a1676
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit_IT(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size)
{
<<<<<<< HEAD
 80055a8:	b480      	push	{r7}
 80055aa:	b085      	sub	sp, #20
 80055ac:	af00      	add	r7, sp, #0
 80055ae:	60f8      	str	r0, [r7, #12]
 80055b0:	60b9      	str	r1, [r7, #8]
 80055b2:	4613      	mov	r3, r2
 80055b4:	80fb      	strh	r3, [r7, #6]
  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80055b6:	68fb      	ldr	r3, [r7, #12]
 80055b8:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80055bc:	b2db      	uxtb	r3, r3
 80055be:	2b20      	cmp	r3, #32
 80055c0:	d121      	bne.n	8005606 <HAL_UART_Transmit_IT+0x5e>
  {
    if ((pData == NULL) || (Size == 0U))
 80055c2:	68bb      	ldr	r3, [r7, #8]
 80055c4:	2b00      	cmp	r3, #0
 80055c6:	d002      	beq.n	80055ce <HAL_UART_Transmit_IT+0x26>
 80055c8:	88fb      	ldrh	r3, [r7, #6]
 80055ca:	2b00      	cmp	r3, #0
 80055cc:	d101      	bne.n	80055d2 <HAL_UART_Transmit_IT+0x2a>
    {
      return HAL_ERROR;
 80055ce:	2301      	movs	r3, #1
 80055d0:	e01a      	b.n	8005608 <HAL_UART_Transmit_IT+0x60>
    }

    huart->pTxBuffPtr = pData;
 80055d2:	68fb      	ldr	r3, [r7, #12]
 80055d4:	68ba      	ldr	r2, [r7, #8]
 80055d6:	621a      	str	r2, [r3, #32]
    huart->TxXferSize = Size;
 80055d8:	68fb      	ldr	r3, [r7, #12]
 80055da:	88fa      	ldrh	r2, [r7, #6]
 80055dc:	849a      	strh	r2, [r3, #36]	@ 0x24
    huart->TxXferCount = Size;
 80055de:	68fb      	ldr	r3, [r7, #12]
 80055e0:	88fa      	ldrh	r2, [r7, #6]
 80055e2:	84da      	strh	r2, [r3, #38]	@ 0x26

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80055e4:	68fb      	ldr	r3, [r7, #12]
 80055e6:	2200      	movs	r2, #0
 80055e8:	645a      	str	r2, [r3, #68]	@ 0x44
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80055ea:	68fb      	ldr	r3, [r7, #12]
 80055ec:	2221      	movs	r2, #33	@ 0x21
 80055ee:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Enable the UART Transmit data register empty Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_TXE);
 80055f2:	68fb      	ldr	r3, [r7, #12]
 80055f4:	681b      	ldr	r3, [r3, #0]
 80055f6:	68da      	ldr	r2, [r3, #12]
 80055f8:	68fb      	ldr	r3, [r7, #12]
 80055fa:	681b      	ldr	r3, [r3, #0]
 80055fc:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
 8005600:	60da      	str	r2, [r3, #12]

    return HAL_OK;
 8005602:	2300      	movs	r3, #0
 8005604:	e000      	b.n	8005608 <HAL_UART_Transmit_IT+0x60>
=======
 80056bc:	b480      	push	{r7}
 80056be:	b085      	sub	sp, #20
 80056c0:	af00      	add	r7, sp, #0
 80056c2:	60f8      	str	r0, [r7, #12]
 80056c4:	60b9      	str	r1, [r7, #8]
 80056c6:	4613      	mov	r3, r2
 80056c8:	80fb      	strh	r3, [r7, #6]
  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80056ca:	68fb      	ldr	r3, [r7, #12]
 80056cc:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80056d0:	b2db      	uxtb	r3, r3
 80056d2:	2b20      	cmp	r3, #32
 80056d4:	d121      	bne.n	800571a <HAL_UART_Transmit_IT+0x5e>
  {
    if ((pData == NULL) || (Size == 0U))
 80056d6:	68bb      	ldr	r3, [r7, #8]
 80056d8:	2b00      	cmp	r3, #0
 80056da:	d002      	beq.n	80056e2 <HAL_UART_Transmit_IT+0x26>
 80056dc:	88fb      	ldrh	r3, [r7, #6]
 80056de:	2b00      	cmp	r3, #0
 80056e0:	d101      	bne.n	80056e6 <HAL_UART_Transmit_IT+0x2a>
    {
      return HAL_ERROR;
 80056e2:	2301      	movs	r3, #1
 80056e4:	e01a      	b.n	800571c <HAL_UART_Transmit_IT+0x60>
    }

    huart->pTxBuffPtr = pData;
 80056e6:	68fb      	ldr	r3, [r7, #12]
 80056e8:	68ba      	ldr	r2, [r7, #8]
 80056ea:	621a      	str	r2, [r3, #32]
    huart->TxXferSize = Size;
 80056ec:	68fb      	ldr	r3, [r7, #12]
 80056ee:	88fa      	ldrh	r2, [r7, #6]
 80056f0:	849a      	strh	r2, [r3, #36]	@ 0x24
    huart->TxXferCount = Size;
 80056f2:	68fb      	ldr	r3, [r7, #12]
 80056f4:	88fa      	ldrh	r2, [r7, #6]
 80056f6:	84da      	strh	r2, [r3, #38]	@ 0x26

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80056f8:	68fb      	ldr	r3, [r7, #12]
 80056fa:	2200      	movs	r2, #0
 80056fc:	645a      	str	r2, [r3, #68]	@ 0x44
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80056fe:	68fb      	ldr	r3, [r7, #12]
 8005700:	2221      	movs	r2, #33	@ 0x21
 8005702:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Enable the UART Transmit data register empty Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_TXE);
 8005706:	68fb      	ldr	r3, [r7, #12]
 8005708:	681b      	ldr	r3, [r3, #0]
 800570a:	68da      	ldr	r2, [r3, #12]
 800570c:	68fb      	ldr	r3, [r7, #12]
 800570e:	681b      	ldr	r3, [r3, #0]
 8005710:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
 8005714:	60da      	str	r2, [r3, #12]

    return HAL_OK;
 8005716:	2300      	movs	r3, #0
 8005718:	e000      	b.n	800571c <HAL_UART_Transmit_IT+0x60>
>>>>>>> 39e4d10438a821cc799a472af87a77c6796a1676
  }
  else
  {
    return HAL_BUSY;
<<<<<<< HEAD
 8005606:	2302      	movs	r3, #2
  }
}
 8005608:	4618      	mov	r0, r3
 800560a:	3714      	adds	r7, #20
 800560c:	46bd      	mov	sp, r7
 800560e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005612:	4770      	bx	lr

08005614 <HAL_UART_Receive_IT>:
=======
 800571a:	2302      	movs	r3, #2
  }
}
 800571c:	4618      	mov	r0, r3
 800571e:	3714      	adds	r7, #20
 8005720:	46bd      	mov	sp, r7
 8005722:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005726:	4770      	bx	lr

08005728 <HAL_UART_Receive_IT>:
>>>>>>> 39e4d10438a821cc799a472af87a77c6796a1676
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
<<<<<<< HEAD
 8005614:	b580      	push	{r7, lr}
 8005616:	b084      	sub	sp, #16
 8005618:	af00      	add	r7, sp, #0
 800561a:	60f8      	str	r0, [r7, #12]
 800561c:	60b9      	str	r1, [r7, #8]
 800561e:	4613      	mov	r3, r2
 8005620:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8005622:	68fb      	ldr	r3, [r7, #12]
 8005624:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8005628:	b2db      	uxtb	r3, r3
 800562a:	2b20      	cmp	r3, #32
 800562c:	d112      	bne.n	8005654 <HAL_UART_Receive_IT+0x40>
  {
    if ((pData == NULL) || (Size == 0U))
 800562e:	68bb      	ldr	r3, [r7, #8]
 8005630:	2b00      	cmp	r3, #0
 8005632:	d002      	beq.n	800563a <HAL_UART_Receive_IT+0x26>
 8005634:	88fb      	ldrh	r3, [r7, #6]
 8005636:	2b00      	cmp	r3, #0
 8005638:	d101      	bne.n	800563e <HAL_UART_Receive_IT+0x2a>
    {
      return HAL_ERROR;
 800563a:	2301      	movs	r3, #1
 800563c:	e00b      	b.n	8005656 <HAL_UART_Receive_IT+0x42>
=======
 8005728:	b580      	push	{r7, lr}
 800572a:	b084      	sub	sp, #16
 800572c:	af00      	add	r7, sp, #0
 800572e:	60f8      	str	r0, [r7, #12]
 8005730:	60b9      	str	r1, [r7, #8]
 8005732:	4613      	mov	r3, r2
 8005734:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8005736:	68fb      	ldr	r3, [r7, #12]
 8005738:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 800573c:	b2db      	uxtb	r3, r3
 800573e:	2b20      	cmp	r3, #32
 8005740:	d112      	bne.n	8005768 <HAL_UART_Receive_IT+0x40>
  {
    if ((pData == NULL) || (Size == 0U))
 8005742:	68bb      	ldr	r3, [r7, #8]
 8005744:	2b00      	cmp	r3, #0
 8005746:	d002      	beq.n	800574e <HAL_UART_Receive_IT+0x26>
 8005748:	88fb      	ldrh	r3, [r7, #6]
 800574a:	2b00      	cmp	r3, #0
 800574c:	d101      	bne.n	8005752 <HAL_UART_Receive_IT+0x2a>
    {
      return HAL_ERROR;
 800574e:	2301      	movs	r3, #1
 8005750:	e00b      	b.n	800576a <HAL_UART_Receive_IT+0x42>
>>>>>>> 39e4d10438a821cc799a472af87a77c6796a1676
    }

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
<<<<<<< HEAD
 800563e:	68fb      	ldr	r3, [r7, #12]
 8005640:	2200      	movs	r2, #0
 8005642:	631a      	str	r2, [r3, #48]	@ 0x30

    return (UART_Start_Receive_IT(huart, pData, Size));
 8005644:	88fb      	ldrh	r3, [r7, #6]
 8005646:	461a      	mov	r2, r3
 8005648:	68b9      	ldr	r1, [r7, #8]
 800564a:	68f8      	ldr	r0, [r7, #12]
 800564c:	f000 faba 	bl	8005bc4 <UART_Start_Receive_IT>
 8005650:	4603      	mov	r3, r0
 8005652:	e000      	b.n	8005656 <HAL_UART_Receive_IT+0x42>
=======
 8005752:	68fb      	ldr	r3, [r7, #12]
 8005754:	2200      	movs	r2, #0
 8005756:	631a      	str	r2, [r3, #48]	@ 0x30

    return (UART_Start_Receive_IT(huart, pData, Size));
 8005758:	88fb      	ldrh	r3, [r7, #6]
 800575a:	461a      	mov	r2, r3
 800575c:	68b9      	ldr	r1, [r7, #8]
 800575e:	68f8      	ldr	r0, [r7, #12]
 8005760:	f000 faba 	bl	8005cd8 <UART_Start_Receive_IT>
 8005764:	4603      	mov	r3, r0
 8005766:	e000      	b.n	800576a <HAL_UART_Receive_IT+0x42>
>>>>>>> 39e4d10438a821cc799a472af87a77c6796a1676
  }
  else
  {
    return HAL_BUSY;
<<<<<<< HEAD
 8005654:	2302      	movs	r3, #2
  }
}
 8005656:	4618      	mov	r0, r3
 8005658:	3710      	adds	r7, #16
 800565a:	46bd      	mov	sp, r7
 800565c:	bd80      	pop	{r7, pc}
	...

08005660 <HAL_UART_IRQHandler>:
=======
 8005768:	2302      	movs	r3, #2
  }
}
 800576a:	4618      	mov	r0, r3
 800576c:	3710      	adds	r7, #16
 800576e:	46bd      	mov	sp, r7
 8005770:	bd80      	pop	{r7, pc}
	...

08005774 <HAL_UART_IRQHandler>:
>>>>>>> 39e4d10438a821cc799a472af87a77c6796a1676
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
<<<<<<< HEAD
 8005660:	b580      	push	{r7, lr}
 8005662:	b0ba      	sub	sp, #232	@ 0xe8
 8005664:	af00      	add	r7, sp, #0
 8005666:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8005668:	687b      	ldr	r3, [r7, #4]
 800566a:	681b      	ldr	r3, [r3, #0]
 800566c:	681b      	ldr	r3, [r3, #0]
 800566e:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8005672:	687b      	ldr	r3, [r7, #4]
 8005674:	681b      	ldr	r3, [r3, #0]
 8005676:	68db      	ldr	r3, [r3, #12]
 8005678:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 800567c:	687b      	ldr	r3, [r7, #4]
 800567e:	681b      	ldr	r3, [r3, #0]
 8005680:	695b      	ldr	r3, [r3, #20]
 8005682:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
  uint32_t errorflags = 0x00U;
 8005686:	2300      	movs	r3, #0
 8005688:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  uint32_t dmarequest = 0x00U;
 800568c:	2300      	movs	r3, #0
 800568e:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 8005692:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8005696:	f003 030f 	and.w	r3, r3, #15
 800569a:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  if (errorflags == RESET)
 800569e:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 80056a2:	2b00      	cmp	r3, #0
 80056a4:	d10f      	bne.n	80056c6 <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 80056a6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80056aa:	f003 0320 	and.w	r3, r3, #32
 80056ae:	2b00      	cmp	r3, #0
 80056b0:	d009      	beq.n	80056c6 <HAL_UART_IRQHandler+0x66>
 80056b2:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80056b6:	f003 0320 	and.w	r3, r3, #32
 80056ba:	2b00      	cmp	r3, #0
 80056bc:	d003      	beq.n	80056c6 <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 80056be:	6878      	ldr	r0, [r7, #4]
 80056c0:	f000 fb99 	bl	8005df6 <UART_Receive_IT>
      return;
 80056c4:	e25b      	b.n	8005b7e <HAL_UART_IRQHandler+0x51e>
=======
 8005774:	b580      	push	{r7, lr}
 8005776:	b0ba      	sub	sp, #232	@ 0xe8
 8005778:	af00      	add	r7, sp, #0
 800577a:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 800577c:	687b      	ldr	r3, [r7, #4]
 800577e:	681b      	ldr	r3, [r3, #0]
 8005780:	681b      	ldr	r3, [r3, #0]
 8005782:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8005786:	687b      	ldr	r3, [r7, #4]
 8005788:	681b      	ldr	r3, [r3, #0]
 800578a:	68db      	ldr	r3, [r3, #12]
 800578c:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8005790:	687b      	ldr	r3, [r7, #4]
 8005792:	681b      	ldr	r3, [r3, #0]
 8005794:	695b      	ldr	r3, [r3, #20]
 8005796:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
  uint32_t errorflags = 0x00U;
 800579a:	2300      	movs	r3, #0
 800579c:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  uint32_t dmarequest = 0x00U;
 80057a0:	2300      	movs	r3, #0
 80057a2:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 80057a6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80057aa:	f003 030f 	and.w	r3, r3, #15
 80057ae:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  if (errorflags == RESET)
 80057b2:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 80057b6:	2b00      	cmp	r3, #0
 80057b8:	d10f      	bne.n	80057da <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 80057ba:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80057be:	f003 0320 	and.w	r3, r3, #32
 80057c2:	2b00      	cmp	r3, #0
 80057c4:	d009      	beq.n	80057da <HAL_UART_IRQHandler+0x66>
 80057c6:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80057ca:	f003 0320 	and.w	r3, r3, #32
 80057ce:	2b00      	cmp	r3, #0
 80057d0:	d003      	beq.n	80057da <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 80057d2:	6878      	ldr	r0, [r7, #4]
 80057d4:	f000 fb99 	bl	8005f0a <UART_Receive_IT>
      return;
 80057d8:	e25b      	b.n	8005c92 <HAL_UART_IRQHandler+0x51e>
>>>>>>> 39e4d10438a821cc799a472af87a77c6796a1676
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
<<<<<<< HEAD
 80056c6:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 80056ca:	2b00      	cmp	r3, #0
 80056cc:	f000 80de 	beq.w	800588c <HAL_UART_IRQHandler+0x22c>
 80056d0:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 80056d4:	f003 0301 	and.w	r3, r3, #1
 80056d8:	2b00      	cmp	r3, #0
 80056da:	d106      	bne.n	80056ea <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 80056dc:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80056e0:	f403 7390 	and.w	r3, r3, #288	@ 0x120
 80056e4:	2b00      	cmp	r3, #0
 80056e6:	f000 80d1 	beq.w	800588c <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 80056ea:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80056ee:	f003 0301 	and.w	r3, r3, #1
 80056f2:	2b00      	cmp	r3, #0
 80056f4:	d00b      	beq.n	800570e <HAL_UART_IRQHandler+0xae>
 80056f6:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80056fa:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80056fe:	2b00      	cmp	r3, #0
 8005700:	d005      	beq.n	800570e <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8005702:	687b      	ldr	r3, [r7, #4]
 8005704:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005706:	f043 0201 	orr.w	r2, r3, #1
 800570a:	687b      	ldr	r3, [r7, #4]
 800570c:	645a      	str	r2, [r3, #68]	@ 0x44
=======
 80057da:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 80057de:	2b00      	cmp	r3, #0
 80057e0:	f000 80de 	beq.w	80059a0 <HAL_UART_IRQHandler+0x22c>
 80057e4:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 80057e8:	f003 0301 	and.w	r3, r3, #1
 80057ec:	2b00      	cmp	r3, #0
 80057ee:	d106      	bne.n	80057fe <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 80057f0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80057f4:	f403 7390 	and.w	r3, r3, #288	@ 0x120
 80057f8:	2b00      	cmp	r3, #0
 80057fa:	f000 80d1 	beq.w	80059a0 <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 80057fe:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8005802:	f003 0301 	and.w	r3, r3, #1
 8005806:	2b00      	cmp	r3, #0
 8005808:	d00b      	beq.n	8005822 <HAL_UART_IRQHandler+0xae>
 800580a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800580e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8005812:	2b00      	cmp	r3, #0
 8005814:	d005      	beq.n	8005822 <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8005816:	687b      	ldr	r3, [r7, #4]
 8005818:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800581a:	f043 0201 	orr.w	r2, r3, #1
 800581e:	687b      	ldr	r3, [r7, #4]
 8005820:	645a      	str	r2, [r3, #68]	@ 0x44
>>>>>>> 39e4d10438a821cc799a472af87a77c6796a1676
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
<<<<<<< HEAD
 800570e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8005712:	f003 0304 	and.w	r3, r3, #4
 8005716:	2b00      	cmp	r3, #0
 8005718:	d00b      	beq.n	8005732 <HAL_UART_IRQHandler+0xd2>
 800571a:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800571e:	f003 0301 	and.w	r3, r3, #1
 8005722:	2b00      	cmp	r3, #0
 8005724:	d005      	beq.n	8005732 <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8005726:	687b      	ldr	r3, [r7, #4]
 8005728:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800572a:	f043 0202 	orr.w	r2, r3, #2
 800572e:	687b      	ldr	r3, [r7, #4]
 8005730:	645a      	str	r2, [r3, #68]	@ 0x44
=======
 8005822:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8005826:	f003 0304 	and.w	r3, r3, #4
 800582a:	2b00      	cmp	r3, #0
 800582c:	d00b      	beq.n	8005846 <HAL_UART_IRQHandler+0xd2>
 800582e:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8005832:	f003 0301 	and.w	r3, r3, #1
 8005836:	2b00      	cmp	r3, #0
 8005838:	d005      	beq.n	8005846 <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 800583a:	687b      	ldr	r3, [r7, #4]
 800583c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800583e:	f043 0202 	orr.w	r2, r3, #2
 8005842:	687b      	ldr	r3, [r7, #4]
 8005844:	645a      	str	r2, [r3, #68]	@ 0x44
>>>>>>> 39e4d10438a821cc799a472af87a77c6796a1676
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
<<<<<<< HEAD
 8005732:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8005736:	f003 0302 	and.w	r3, r3, #2
 800573a:	2b00      	cmp	r3, #0
 800573c:	d00b      	beq.n	8005756 <HAL_UART_IRQHandler+0xf6>
 800573e:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8005742:	f003 0301 	and.w	r3, r3, #1
 8005746:	2b00      	cmp	r3, #0
 8005748:	d005      	beq.n	8005756 <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 800574a:	687b      	ldr	r3, [r7, #4]
 800574c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800574e:	f043 0204 	orr.w	r2, r3, #4
 8005752:	687b      	ldr	r3, [r7, #4]
 8005754:	645a      	str	r2, [r3, #68]	@ 0x44
=======
 8005846:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800584a:	f003 0302 	and.w	r3, r3, #2
 800584e:	2b00      	cmp	r3, #0
 8005850:	d00b      	beq.n	800586a <HAL_UART_IRQHandler+0xf6>
 8005852:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8005856:	f003 0301 	and.w	r3, r3, #1
 800585a:	2b00      	cmp	r3, #0
 800585c:	d005      	beq.n	800586a <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 800585e:	687b      	ldr	r3, [r7, #4]
 8005860:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005862:	f043 0204 	orr.w	r2, r3, #4
 8005866:	687b      	ldr	r3, [r7, #4]
 8005868:	645a      	str	r2, [r3, #68]	@ 0x44
>>>>>>> 39e4d10438a821cc799a472af87a77c6796a1676
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
<<<<<<< HEAD
 8005756:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800575a:	f003 0308 	and.w	r3, r3, #8
 800575e:	2b00      	cmp	r3, #0
 8005760:	d011      	beq.n	8005786 <HAL_UART_IRQHandler+0x126>
 8005762:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8005766:	f003 0320 	and.w	r3, r3, #32
 800576a:	2b00      	cmp	r3, #0
 800576c:	d105      	bne.n	800577a <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 800576e:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8005772:	f003 0301 	and.w	r3, r3, #1
 8005776:	2b00      	cmp	r3, #0
 8005778:	d005      	beq.n	8005786 <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 800577a:	687b      	ldr	r3, [r7, #4]
 800577c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800577e:	f043 0208 	orr.w	r2, r3, #8
 8005782:	687b      	ldr	r3, [r7, #4]
 8005784:	645a      	str	r2, [r3, #68]	@ 0x44
=======
 800586a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800586e:	f003 0308 	and.w	r3, r3, #8
 8005872:	2b00      	cmp	r3, #0
 8005874:	d011      	beq.n	800589a <HAL_UART_IRQHandler+0x126>
 8005876:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800587a:	f003 0320 	and.w	r3, r3, #32
 800587e:	2b00      	cmp	r3, #0
 8005880:	d105      	bne.n	800588e <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 8005882:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8005886:	f003 0301 	and.w	r3, r3, #1
 800588a:	2b00      	cmp	r3, #0
 800588c:	d005      	beq.n	800589a <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 800588e:	687b      	ldr	r3, [r7, #4]
 8005890:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005892:	f043 0208 	orr.w	r2, r3, #8
 8005896:	687b      	ldr	r3, [r7, #4]
 8005898:	645a      	str	r2, [r3, #68]	@ 0x44
>>>>>>> 39e4d10438a821cc799a472af87a77c6796a1676
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
<<<<<<< HEAD
 8005786:	687b      	ldr	r3, [r7, #4]
 8005788:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800578a:	2b00      	cmp	r3, #0
 800578c:	f000 81f2 	beq.w	8005b74 <HAL_UART_IRQHandler+0x514>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8005790:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8005794:	f003 0320 	and.w	r3, r3, #32
 8005798:	2b00      	cmp	r3, #0
 800579a:	d008      	beq.n	80057ae <HAL_UART_IRQHandler+0x14e>
 800579c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80057a0:	f003 0320 	and.w	r3, r3, #32
 80057a4:	2b00      	cmp	r3, #0
 80057a6:	d002      	beq.n	80057ae <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 80057a8:	6878      	ldr	r0, [r7, #4]
 80057aa:	f000 fb24 	bl	8005df6 <UART_Receive_IT>
=======
 800589a:	687b      	ldr	r3, [r7, #4]
 800589c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800589e:	2b00      	cmp	r3, #0
 80058a0:	f000 81f2 	beq.w	8005c88 <HAL_UART_IRQHandler+0x514>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 80058a4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80058a8:	f003 0320 	and.w	r3, r3, #32
 80058ac:	2b00      	cmp	r3, #0
 80058ae:	d008      	beq.n	80058c2 <HAL_UART_IRQHandler+0x14e>
 80058b0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80058b4:	f003 0320 	and.w	r3, r3, #32
 80058b8:	2b00      	cmp	r3, #0
 80058ba:	d002      	beq.n	80058c2 <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 80058bc:	6878      	ldr	r0, [r7, #4]
 80058be:	f000 fb24 	bl	8005f0a <UART_Receive_IT>
>>>>>>> 39e4d10438a821cc799a472af87a77c6796a1676
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
<<<<<<< HEAD
 80057ae:	687b      	ldr	r3, [r7, #4]
 80057b0:	681b      	ldr	r3, [r3, #0]
 80057b2:	695b      	ldr	r3, [r3, #20]
 80057b4:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80057b8:	2b40      	cmp	r3, #64	@ 0x40
 80057ba:	bf0c      	ite	eq
 80057bc:	2301      	moveq	r3, #1
 80057be:	2300      	movne	r3, #0
 80057c0:	b2db      	uxtb	r3, r3
 80057c2:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 80057c6:	687b      	ldr	r3, [r7, #4]
 80057c8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80057ca:	f003 0308 	and.w	r3, r3, #8
 80057ce:	2b00      	cmp	r3, #0
 80057d0:	d103      	bne.n	80057da <HAL_UART_IRQHandler+0x17a>
 80057d2:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 80057d6:	2b00      	cmp	r3, #0
 80057d8:	d04f      	beq.n	800587a <HAL_UART_IRQHandler+0x21a>
=======
 80058c2:	687b      	ldr	r3, [r7, #4]
 80058c4:	681b      	ldr	r3, [r3, #0]
 80058c6:	695b      	ldr	r3, [r3, #20]
 80058c8:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80058cc:	2b40      	cmp	r3, #64	@ 0x40
 80058ce:	bf0c      	ite	eq
 80058d0:	2301      	moveq	r3, #1
 80058d2:	2300      	movne	r3, #0
 80058d4:	b2db      	uxtb	r3, r3
 80058d6:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 80058da:	687b      	ldr	r3, [r7, #4]
 80058dc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80058de:	f003 0308 	and.w	r3, r3, #8
 80058e2:	2b00      	cmp	r3, #0
 80058e4:	d103      	bne.n	80058ee <HAL_UART_IRQHandler+0x17a>
 80058e6:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 80058ea:	2b00      	cmp	r3, #0
 80058ec:	d04f      	beq.n	800598e <HAL_UART_IRQHandler+0x21a>
>>>>>>> 39e4d10438a821cc799a472af87a77c6796a1676
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
<<<<<<< HEAD
 80057da:	6878      	ldr	r0, [r7, #4]
 80057dc:	f000 fa2c 	bl	8005c38 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80057e0:	687b      	ldr	r3, [r7, #4]
 80057e2:	681b      	ldr	r3, [r3, #0]
 80057e4:	695b      	ldr	r3, [r3, #20]
 80057e6:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80057ea:	2b40      	cmp	r3, #64	@ 0x40
 80057ec:	d141      	bne.n	8005872 <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80057ee:	687b      	ldr	r3, [r7, #4]
 80057f0:	681b      	ldr	r3, [r3, #0]
 80057f2:	3314      	adds	r3, #20
 80057f4:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80057f8:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 80057fc:	e853 3f00 	ldrex	r3, [r3]
 8005800:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
   return(result);
 8005804:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8005808:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800580c:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8005810:	687b      	ldr	r3, [r7, #4]
 8005812:	681b      	ldr	r3, [r3, #0]
 8005814:	3314      	adds	r3, #20
 8005816:	f8d7 20d0 	ldr.w	r2, [r7, #208]	@ 0xd0
 800581a:	f8c7 20a8 	str.w	r2, [r7, #168]	@ 0xa8
 800581e:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005822:	f8d7 10a4 	ldr.w	r1, [r7, #164]	@ 0xa4
 8005826:	f8d7 20a8 	ldr.w	r2, [r7, #168]	@ 0xa8
 800582a:	e841 2300 	strex	r3, r2, [r1]
 800582e:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
   return(result);
 8005832:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 8005836:	2b00      	cmp	r3, #0
 8005838:	d1d9      	bne.n	80057ee <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 800583a:	687b      	ldr	r3, [r7, #4]
 800583c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800583e:	2b00      	cmp	r3, #0
 8005840:	d013      	beq.n	800586a <HAL_UART_IRQHandler+0x20a>
=======
 80058ee:	6878      	ldr	r0, [r7, #4]
 80058f0:	f000 fa2c 	bl	8005d4c <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80058f4:	687b      	ldr	r3, [r7, #4]
 80058f6:	681b      	ldr	r3, [r3, #0]
 80058f8:	695b      	ldr	r3, [r3, #20]
 80058fa:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80058fe:	2b40      	cmp	r3, #64	@ 0x40
 8005900:	d141      	bne.n	8005986 <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8005902:	687b      	ldr	r3, [r7, #4]
 8005904:	681b      	ldr	r3, [r3, #0]
 8005906:	3314      	adds	r3, #20
 8005908:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800590c:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8005910:	e853 3f00 	ldrex	r3, [r3]
 8005914:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
   return(result);
 8005918:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 800591c:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8005920:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8005924:	687b      	ldr	r3, [r7, #4]
 8005926:	681b      	ldr	r3, [r3, #0]
 8005928:	3314      	adds	r3, #20
 800592a:	f8d7 20d0 	ldr.w	r2, [r7, #208]	@ 0xd0
 800592e:	f8c7 20a8 	str.w	r2, [r7, #168]	@ 0xa8
 8005932:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005936:	f8d7 10a4 	ldr.w	r1, [r7, #164]	@ 0xa4
 800593a:	f8d7 20a8 	ldr.w	r2, [r7, #168]	@ 0xa8
 800593e:	e841 2300 	strex	r3, r2, [r1]
 8005942:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
   return(result);
 8005946:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 800594a:	2b00      	cmp	r3, #0
 800594c:	d1d9      	bne.n	8005902 <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 800594e:	687b      	ldr	r3, [r7, #4]
 8005950:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005952:	2b00      	cmp	r3, #0
 8005954:	d013      	beq.n	800597e <HAL_UART_IRQHandler+0x20a>
>>>>>>> 39e4d10438a821cc799a472af87a77c6796a1676
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
<<<<<<< HEAD
 8005842:	687b      	ldr	r3, [r7, #4]
 8005844:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005846:	4a7e      	ldr	r2, [pc, #504]	@ (8005a40 <HAL_UART_IRQHandler+0x3e0>)
 8005848:	651a      	str	r2, [r3, #80]	@ 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 800584a:	687b      	ldr	r3, [r7, #4]
 800584c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800584e:	4618      	mov	r0, r3
 8005850:	f7fd fb4e 	bl	8002ef0 <HAL_DMA_Abort_IT>
 8005854:	4603      	mov	r3, r0
 8005856:	2b00      	cmp	r3, #0
 8005858:	d016      	beq.n	8005888 <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 800585a:	687b      	ldr	r3, [r7, #4]
 800585c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800585e:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8005860:	687a      	ldr	r2, [r7, #4]
 8005862:	6bd2      	ldr	r2, [r2, #60]	@ 0x3c
 8005864:	4610      	mov	r0, r2
 8005866:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005868:	e00e      	b.n	8005888 <HAL_UART_IRQHandler+0x228>
=======
 8005956:	687b      	ldr	r3, [r7, #4]
 8005958:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800595a:	4a7e      	ldr	r2, [pc, #504]	@ (8005b54 <HAL_UART_IRQHandler+0x3e0>)
 800595c:	651a      	str	r2, [r3, #80]	@ 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 800595e:	687b      	ldr	r3, [r7, #4]
 8005960:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005962:	4618      	mov	r0, r3
 8005964:	f7fd fb4e 	bl	8003004 <HAL_DMA_Abort_IT>
 8005968:	4603      	mov	r3, r0
 800596a:	2b00      	cmp	r3, #0
 800596c:	d016      	beq.n	800599c <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 800596e:	687b      	ldr	r3, [r7, #4]
 8005970:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005972:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8005974:	687a      	ldr	r2, [r7, #4]
 8005976:	6bd2      	ldr	r2, [r2, #60]	@ 0x3c
 8005978:	4610      	mov	r0, r2
 800597a:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800597c:	e00e      	b.n	800599c <HAL_UART_IRQHandler+0x228>
>>>>>>> 39e4d10438a821cc799a472af87a77c6796a1676
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
<<<<<<< HEAD
 800586a:	6878      	ldr	r0, [r7, #4]
 800586c:	f000 f994 	bl	8005b98 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005870:	e00a      	b.n	8005888 <HAL_UART_IRQHandler+0x228>
=======
 800597e:	6878      	ldr	r0, [r7, #4]
 8005980:	f000 f994 	bl	8005cac <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005984:	e00a      	b.n	800599c <HAL_UART_IRQHandler+0x228>
>>>>>>> 39e4d10438a821cc799a472af87a77c6796a1676
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
<<<<<<< HEAD
 8005872:	6878      	ldr	r0, [r7, #4]
 8005874:	f000 f990 	bl	8005b98 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005878:	e006      	b.n	8005888 <HAL_UART_IRQHandler+0x228>
=======
 8005986:	6878      	ldr	r0, [r7, #4]
 8005988:	f000 f990 	bl	8005cac <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800598c:	e006      	b.n	800599c <HAL_UART_IRQHandler+0x228>
>>>>>>> 39e4d10438a821cc799a472af87a77c6796a1676
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
<<<<<<< HEAD
 800587a:	6878      	ldr	r0, [r7, #4]
 800587c:	f000 f98c 	bl	8005b98 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005880:	687b      	ldr	r3, [r7, #4]
 8005882:	2200      	movs	r2, #0
 8005884:	645a      	str	r2, [r3, #68]	@ 0x44
      }
    }
    return;
 8005886:	e175      	b.n	8005b74 <HAL_UART_IRQHandler+0x514>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005888:	bf00      	nop
    return;
 800588a:	e173      	b.n	8005b74 <HAL_UART_IRQHandler+0x514>
=======
 800598e:	6878      	ldr	r0, [r7, #4]
 8005990:	f000 f98c 	bl	8005cac <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005994:	687b      	ldr	r3, [r7, #4]
 8005996:	2200      	movs	r2, #0
 8005998:	645a      	str	r2, [r3, #68]	@ 0x44
      }
    }
    return;
 800599a:	e175      	b.n	8005c88 <HAL_UART_IRQHandler+0x514>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800599c:	bf00      	nop
    return;
 800599e:	e173      	b.n	8005c88 <HAL_UART_IRQHandler+0x514>
>>>>>>> 39e4d10438a821cc799a472af87a77c6796a1676
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
<<<<<<< HEAD
 800588c:	687b      	ldr	r3, [r7, #4]
 800588e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005890:	2b01      	cmp	r3, #1
 8005892:	f040 814f 	bne.w	8005b34 <HAL_UART_IRQHandler+0x4d4>
      && ((isrflags & USART_SR_IDLE) != 0U)
 8005896:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800589a:	f003 0310 	and.w	r3, r3, #16
 800589e:	2b00      	cmp	r3, #0
 80058a0:	f000 8148 	beq.w	8005b34 <HAL_UART_IRQHandler+0x4d4>
      && ((cr1its & USART_SR_IDLE) != 0U))
 80058a4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80058a8:	f003 0310 	and.w	r3, r3, #16
 80058ac:	2b00      	cmp	r3, #0
 80058ae:	f000 8141 	beq.w	8005b34 <HAL_UART_IRQHandler+0x4d4>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 80058b2:	2300      	movs	r3, #0
 80058b4:	60bb      	str	r3, [r7, #8]
 80058b6:	687b      	ldr	r3, [r7, #4]
 80058b8:	681b      	ldr	r3, [r3, #0]
 80058ba:	681b      	ldr	r3, [r3, #0]
 80058bc:	60bb      	str	r3, [r7, #8]
 80058be:	687b      	ldr	r3, [r7, #4]
 80058c0:	681b      	ldr	r3, [r3, #0]
 80058c2:	685b      	ldr	r3, [r3, #4]
 80058c4:	60bb      	str	r3, [r7, #8]
 80058c6:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80058c8:	687b      	ldr	r3, [r7, #4]
 80058ca:	681b      	ldr	r3, [r3, #0]
 80058cc:	695b      	ldr	r3, [r3, #20]
 80058ce:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80058d2:	2b40      	cmp	r3, #64	@ 0x40
 80058d4:	f040 80b6 	bne.w	8005a44 <HAL_UART_IRQHandler+0x3e4>
=======
 80059a0:	687b      	ldr	r3, [r7, #4]
 80059a2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80059a4:	2b01      	cmp	r3, #1
 80059a6:	f040 814f 	bne.w	8005c48 <HAL_UART_IRQHandler+0x4d4>
      && ((isrflags & USART_SR_IDLE) != 0U)
 80059aa:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80059ae:	f003 0310 	and.w	r3, r3, #16
 80059b2:	2b00      	cmp	r3, #0
 80059b4:	f000 8148 	beq.w	8005c48 <HAL_UART_IRQHandler+0x4d4>
      && ((cr1its & USART_SR_IDLE) != 0U))
 80059b8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80059bc:	f003 0310 	and.w	r3, r3, #16
 80059c0:	2b00      	cmp	r3, #0
 80059c2:	f000 8141 	beq.w	8005c48 <HAL_UART_IRQHandler+0x4d4>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 80059c6:	2300      	movs	r3, #0
 80059c8:	60bb      	str	r3, [r7, #8]
 80059ca:	687b      	ldr	r3, [r7, #4]
 80059cc:	681b      	ldr	r3, [r3, #0]
 80059ce:	681b      	ldr	r3, [r3, #0]
 80059d0:	60bb      	str	r3, [r7, #8]
 80059d2:	687b      	ldr	r3, [r7, #4]
 80059d4:	681b      	ldr	r3, [r3, #0]
 80059d6:	685b      	ldr	r3, [r3, #4]
 80059d8:	60bb      	str	r3, [r7, #8]
 80059da:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80059dc:	687b      	ldr	r3, [r7, #4]
 80059de:	681b      	ldr	r3, [r3, #0]
 80059e0:	695b      	ldr	r3, [r3, #20]
 80059e2:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80059e6:	2b40      	cmp	r3, #64	@ 0x40
 80059e8:	f040 80b6 	bne.w	8005b58 <HAL_UART_IRQHandler+0x3e4>
>>>>>>> 39e4d10438a821cc799a472af87a77c6796a1676
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
<<<<<<< HEAD
 80058d8:	687b      	ldr	r3, [r7, #4]
 80058da:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80058dc:	681b      	ldr	r3, [r3, #0]
 80058de:	685b      	ldr	r3, [r3, #4]
 80058e0:	f8a7 30be 	strh.w	r3, [r7, #190]	@ 0xbe
      if ((nb_remaining_rx_data > 0U)
 80058e4:	f8b7 30be 	ldrh.w	r3, [r7, #190]	@ 0xbe
 80058e8:	2b00      	cmp	r3, #0
 80058ea:	f000 8145 	beq.w	8005b78 <HAL_UART_IRQHandler+0x518>
          && (nb_remaining_rx_data < huart->RxXferSize))
 80058ee:	687b      	ldr	r3, [r7, #4]
 80058f0:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 80058f2:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 80058f6:	429a      	cmp	r2, r3
 80058f8:	f080 813e 	bcs.w	8005b78 <HAL_UART_IRQHandler+0x518>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 80058fc:	687b      	ldr	r3, [r7, #4]
 80058fe:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 8005902:	85da      	strh	r2, [r3, #46]	@ 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8005904:	687b      	ldr	r3, [r7, #4]
 8005906:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005908:	69db      	ldr	r3, [r3, #28]
 800590a:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800590e:	f000 8088 	beq.w	8005a22 <HAL_UART_IRQHandler+0x3c2>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8005912:	687b      	ldr	r3, [r7, #4]
 8005914:	681b      	ldr	r3, [r3, #0]
 8005916:	330c      	adds	r3, #12
 8005918:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800591c:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8005920:	e853 3f00 	ldrex	r3, [r3]
 8005924:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
   return(result);
 8005928:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 800592c:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8005930:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8005934:	687b      	ldr	r3, [r7, #4]
 8005936:	681b      	ldr	r3, [r3, #0]
 8005938:	330c      	adds	r3, #12
 800593a:	f8d7 20b8 	ldr.w	r2, [r7, #184]	@ 0xb8
 800593e:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 8005942:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005946:	f8d7 1090 	ldr.w	r1, [r7, #144]	@ 0x90
 800594a:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 800594e:	e841 2300 	strex	r3, r2, [r1]
 8005952:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
   return(result);
 8005956:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 800595a:	2b00      	cmp	r3, #0
 800595c:	d1d9      	bne.n	8005912 <HAL_UART_IRQHandler+0x2b2>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800595e:	687b      	ldr	r3, [r7, #4]
 8005960:	681b      	ldr	r3, [r3, #0]
 8005962:	3314      	adds	r3, #20
 8005964:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005966:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8005968:	e853 3f00 	ldrex	r3, [r3]
 800596c:	673b      	str	r3, [r7, #112]	@ 0x70
   return(result);
 800596e:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8005970:	f023 0301 	bic.w	r3, r3, #1
 8005974:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8005978:	687b      	ldr	r3, [r7, #4]
 800597a:	681b      	ldr	r3, [r3, #0]
 800597c:	3314      	adds	r3, #20
 800597e:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 8005982:	f8c7 2080 	str.w	r2, [r7, #128]	@ 0x80
 8005986:	67fb      	str	r3, [r7, #124]	@ 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005988:	6ff9      	ldr	r1, [r7, #124]	@ 0x7c
 800598a:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 800598e:	e841 2300 	strex	r3, r2, [r1]
 8005992:	67bb      	str	r3, [r7, #120]	@ 0x78
   return(result);
 8005994:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8005996:	2b00      	cmp	r3, #0
 8005998:	d1e1      	bne.n	800595e <HAL_UART_IRQHandler+0x2fe>
=======
 80059ec:	687b      	ldr	r3, [r7, #4]
 80059ee:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80059f0:	681b      	ldr	r3, [r3, #0]
 80059f2:	685b      	ldr	r3, [r3, #4]
 80059f4:	f8a7 30be 	strh.w	r3, [r7, #190]	@ 0xbe
      if ((nb_remaining_rx_data > 0U)
 80059f8:	f8b7 30be 	ldrh.w	r3, [r7, #190]	@ 0xbe
 80059fc:	2b00      	cmp	r3, #0
 80059fe:	f000 8145 	beq.w	8005c8c <HAL_UART_IRQHandler+0x518>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8005a02:	687b      	ldr	r3, [r7, #4]
 8005a04:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 8005a06:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 8005a0a:	429a      	cmp	r2, r3
 8005a0c:	f080 813e 	bcs.w	8005c8c <HAL_UART_IRQHandler+0x518>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8005a10:	687b      	ldr	r3, [r7, #4]
 8005a12:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 8005a16:	85da      	strh	r2, [r3, #46]	@ 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8005a18:	687b      	ldr	r3, [r7, #4]
 8005a1a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005a1c:	69db      	ldr	r3, [r3, #28]
 8005a1e:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8005a22:	f000 8088 	beq.w	8005b36 <HAL_UART_IRQHandler+0x3c2>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8005a26:	687b      	ldr	r3, [r7, #4]
 8005a28:	681b      	ldr	r3, [r3, #0]
 8005a2a:	330c      	adds	r3, #12
 8005a2c:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005a30:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8005a34:	e853 3f00 	ldrex	r3, [r3]
 8005a38:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
   return(result);
 8005a3c:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8005a40:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8005a44:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8005a48:	687b      	ldr	r3, [r7, #4]
 8005a4a:	681b      	ldr	r3, [r3, #0]
 8005a4c:	330c      	adds	r3, #12
 8005a4e:	f8d7 20b8 	ldr.w	r2, [r7, #184]	@ 0xb8
 8005a52:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 8005a56:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005a5a:	f8d7 1090 	ldr.w	r1, [r7, #144]	@ 0x90
 8005a5e:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 8005a62:	e841 2300 	strex	r3, r2, [r1]
 8005a66:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
   return(result);
 8005a6a:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8005a6e:	2b00      	cmp	r3, #0
 8005a70:	d1d9      	bne.n	8005a26 <HAL_UART_IRQHandler+0x2b2>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005a72:	687b      	ldr	r3, [r7, #4]
 8005a74:	681b      	ldr	r3, [r3, #0]
 8005a76:	3314      	adds	r3, #20
 8005a78:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005a7a:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8005a7c:	e853 3f00 	ldrex	r3, [r3]
 8005a80:	673b      	str	r3, [r7, #112]	@ 0x70
   return(result);
 8005a82:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8005a84:	f023 0301 	bic.w	r3, r3, #1
 8005a88:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8005a8c:	687b      	ldr	r3, [r7, #4]
 8005a8e:	681b      	ldr	r3, [r3, #0]
 8005a90:	3314      	adds	r3, #20
 8005a92:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 8005a96:	f8c7 2080 	str.w	r2, [r7, #128]	@ 0x80
 8005a9a:	67fb      	str	r3, [r7, #124]	@ 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005a9c:	6ff9      	ldr	r1, [r7, #124]	@ 0x7c
 8005a9e:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 8005aa2:	e841 2300 	strex	r3, r2, [r1]
 8005aa6:	67bb      	str	r3, [r7, #120]	@ 0x78
   return(result);
 8005aa8:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8005aaa:	2b00      	cmp	r3, #0
 8005aac:	d1e1      	bne.n	8005a72 <HAL_UART_IRQHandler+0x2fe>
>>>>>>> 39e4d10438a821cc799a472af87a77c6796a1676

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
<<<<<<< HEAD
 800599a:	687b      	ldr	r3, [r7, #4]
 800599c:	681b      	ldr	r3, [r3, #0]
 800599e:	3314      	adds	r3, #20
 80059a0:	663b      	str	r3, [r7, #96]	@ 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80059a2:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 80059a4:	e853 3f00 	ldrex	r3, [r3]
 80059a8:	65fb      	str	r3, [r7, #92]	@ 0x5c
   return(result);
 80059aa:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 80059ac:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80059b0:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 80059b4:	687b      	ldr	r3, [r7, #4]
 80059b6:	681b      	ldr	r3, [r3, #0]
 80059b8:	3314      	adds	r3, #20
 80059ba:	f8d7 20b0 	ldr.w	r2, [r7, #176]	@ 0xb0
 80059be:	66fa      	str	r2, [r7, #108]	@ 0x6c
 80059c0:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80059c2:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 80059c4:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 80059c6:	e841 2300 	strex	r3, r2, [r1]
 80059ca:	667b      	str	r3, [r7, #100]	@ 0x64
   return(result);
 80059cc:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 80059ce:	2b00      	cmp	r3, #0
 80059d0:	d1e3      	bne.n	800599a <HAL_UART_IRQHandler+0x33a>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 80059d2:	687b      	ldr	r3, [r7, #4]
 80059d4:	2220      	movs	r2, #32
 80059d6:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80059da:	687b      	ldr	r3, [r7, #4]
 80059dc:	2200      	movs	r2, #0
 80059de:	631a      	str	r2, [r3, #48]	@ 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80059e0:	687b      	ldr	r3, [r7, #4]
 80059e2:	681b      	ldr	r3, [r3, #0]
 80059e4:	330c      	adds	r3, #12
 80059e6:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80059e8:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80059ea:	e853 3f00 	ldrex	r3, [r3]
 80059ee:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 80059f0:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80059f2:	f023 0310 	bic.w	r3, r3, #16
 80059f6:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 80059fa:	687b      	ldr	r3, [r7, #4]
 80059fc:	681b      	ldr	r3, [r3, #0]
 80059fe:	330c      	adds	r3, #12
 8005a00:	f8d7 20ac 	ldr.w	r2, [r7, #172]	@ 0xac
 8005a04:	65ba      	str	r2, [r7, #88]	@ 0x58
 8005a06:	657b      	str	r3, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005a08:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 8005a0a:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8005a0c:	e841 2300 	strex	r3, r2, [r1]
 8005a10:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 8005a12:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8005a14:	2b00      	cmp	r3, #0
 8005a16:	d1e3      	bne.n	80059e0 <HAL_UART_IRQHandler+0x380>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8005a18:	687b      	ldr	r3, [r7, #4]
 8005a1a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005a1c:	4618      	mov	r0, r3
 8005a1e:	f7fd f9f7 	bl	8002e10 <HAL_DMA_Abort>
=======
 8005aae:	687b      	ldr	r3, [r7, #4]
 8005ab0:	681b      	ldr	r3, [r3, #0]
 8005ab2:	3314      	adds	r3, #20
 8005ab4:	663b      	str	r3, [r7, #96]	@ 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005ab6:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8005ab8:	e853 3f00 	ldrex	r3, [r3]
 8005abc:	65fb      	str	r3, [r7, #92]	@ 0x5c
   return(result);
 8005abe:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8005ac0:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8005ac4:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8005ac8:	687b      	ldr	r3, [r7, #4]
 8005aca:	681b      	ldr	r3, [r3, #0]
 8005acc:	3314      	adds	r3, #20
 8005ace:	f8d7 20b0 	ldr.w	r2, [r7, #176]	@ 0xb0
 8005ad2:	66fa      	str	r2, [r7, #108]	@ 0x6c
 8005ad4:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005ad6:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 8005ad8:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 8005ada:	e841 2300 	strex	r3, r2, [r1]
 8005ade:	667b      	str	r3, [r7, #100]	@ 0x64
   return(result);
 8005ae0:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8005ae2:	2b00      	cmp	r3, #0
 8005ae4:	d1e3      	bne.n	8005aae <HAL_UART_IRQHandler+0x33a>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8005ae6:	687b      	ldr	r3, [r7, #4]
 8005ae8:	2220      	movs	r2, #32
 8005aea:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005aee:	687b      	ldr	r3, [r7, #4]
 8005af0:	2200      	movs	r2, #0
 8005af2:	631a      	str	r2, [r3, #48]	@ 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005af4:	687b      	ldr	r3, [r7, #4]
 8005af6:	681b      	ldr	r3, [r3, #0]
 8005af8:	330c      	adds	r3, #12
 8005afa:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005afc:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8005afe:	e853 3f00 	ldrex	r3, [r3]
 8005b02:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 8005b04:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8005b06:	f023 0310 	bic.w	r3, r3, #16
 8005b0a:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 8005b0e:	687b      	ldr	r3, [r7, #4]
 8005b10:	681b      	ldr	r3, [r3, #0]
 8005b12:	330c      	adds	r3, #12
 8005b14:	f8d7 20ac 	ldr.w	r2, [r7, #172]	@ 0xac
 8005b18:	65ba      	str	r2, [r7, #88]	@ 0x58
 8005b1a:	657b      	str	r3, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005b1c:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 8005b1e:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8005b20:	e841 2300 	strex	r3, r2, [r1]
 8005b24:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 8005b26:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8005b28:	2b00      	cmp	r3, #0
 8005b2a:	d1e3      	bne.n	8005af4 <HAL_UART_IRQHandler+0x380>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8005b2c:	687b      	ldr	r3, [r7, #4]
 8005b2e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005b30:	4618      	mov	r0, r3
 8005b32:	f7fd f9f7 	bl	8002f24 <HAL_DMA_Abort>
>>>>>>> 39e4d10438a821cc799a472af87a77c6796a1676
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
        In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
<<<<<<< HEAD
 8005a22:	687b      	ldr	r3, [r7, #4]
 8005a24:	2202      	movs	r2, #2
 8005a26:	635a      	str	r2, [r3, #52]	@ 0x34
=======
 8005b36:	687b      	ldr	r3, [r7, #4]
 8005b38:	2202      	movs	r2, #2
 8005b3a:	635a      	str	r2, [r3, #52]	@ 0x34
>>>>>>> 39e4d10438a821cc799a472af87a77c6796a1676
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
<<<<<<< HEAD
 8005a28:	687b      	ldr	r3, [r7, #4]
 8005a2a:	8d9a      	ldrh	r2, [r3, #44]	@ 0x2c
 8005a2c:	687b      	ldr	r3, [r7, #4]
 8005a2e:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8005a30:	b29b      	uxth	r3, r3
 8005a32:	1ad3      	subs	r3, r2, r3
 8005a34:	b29b      	uxth	r3, r3
 8005a36:	4619      	mov	r1, r3
 8005a38:	6878      	ldr	r0, [r7, #4]
 8005a3a:	f000 f8b7 	bl	8005bac <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8005a3e:	e09b      	b.n	8005b78 <HAL_UART_IRQHandler+0x518>
 8005a40:	08005cff 	.word	0x08005cff
=======
 8005b3c:	687b      	ldr	r3, [r7, #4]
 8005b3e:	8d9a      	ldrh	r2, [r3, #44]	@ 0x2c
 8005b40:	687b      	ldr	r3, [r7, #4]
 8005b42:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8005b44:	b29b      	uxth	r3, r3
 8005b46:	1ad3      	subs	r3, r2, r3
 8005b48:	b29b      	uxth	r3, r3
 8005b4a:	4619      	mov	r1, r3
 8005b4c:	6878      	ldr	r0, [r7, #4]
 8005b4e:	f000 f8b7 	bl	8005cc0 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8005b52:	e09b      	b.n	8005c8c <HAL_UART_IRQHandler+0x518>
 8005b54:	08005e13 	.word	0x08005e13
>>>>>>> 39e4d10438a821cc799a472af87a77c6796a1676
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
<<<<<<< HEAD
 8005a44:	687b      	ldr	r3, [r7, #4]
 8005a46:	8d9a      	ldrh	r2, [r3, #44]	@ 0x2c
 8005a48:	687b      	ldr	r3, [r7, #4]
 8005a4a:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8005a4c:	b29b      	uxth	r3, r3
 8005a4e:	1ad3      	subs	r3, r2, r3
 8005a50:	f8a7 30ce 	strh.w	r3, [r7, #206]	@ 0xce
      if ((huart->RxXferCount > 0U)
 8005a54:	687b      	ldr	r3, [r7, #4]
 8005a56:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8005a58:	b29b      	uxth	r3, r3
 8005a5a:	2b00      	cmp	r3, #0
 8005a5c:	f000 808e 	beq.w	8005b7c <HAL_UART_IRQHandler+0x51c>
          && (nb_rx_data > 0U))
 8005a60:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 8005a64:	2b00      	cmp	r3, #0
 8005a66:	f000 8089 	beq.w	8005b7c <HAL_UART_IRQHandler+0x51c>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8005a6a:	687b      	ldr	r3, [r7, #4]
 8005a6c:	681b      	ldr	r3, [r3, #0]
 8005a6e:	330c      	adds	r3, #12
 8005a70:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005a72:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005a74:	e853 3f00 	ldrex	r3, [r3]
 8005a78:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8005a7a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005a7c:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8005a80:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8005a84:	687b      	ldr	r3, [r7, #4]
 8005a86:	681b      	ldr	r3, [r3, #0]
 8005a88:	330c      	adds	r3, #12
 8005a8a:	f8d7 20c8 	ldr.w	r2, [r7, #200]	@ 0xc8
 8005a8e:	647a      	str	r2, [r7, #68]	@ 0x44
 8005a90:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005a92:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8005a94:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8005a96:	e841 2300 	strex	r3, r2, [r1]
 8005a9a:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8005a9c:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8005a9e:	2b00      	cmp	r3, #0
 8005aa0:	d1e3      	bne.n	8005a6a <HAL_UART_IRQHandler+0x40a>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005aa2:	687b      	ldr	r3, [r7, #4]
 8005aa4:	681b      	ldr	r3, [r3, #0]
 8005aa6:	3314      	adds	r3, #20
 8005aa8:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005aaa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005aac:	e853 3f00 	ldrex	r3, [r3]
 8005ab0:	623b      	str	r3, [r7, #32]
   return(result);
 8005ab2:	6a3b      	ldr	r3, [r7, #32]
 8005ab4:	f023 0301 	bic.w	r3, r3, #1
 8005ab8:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 8005abc:	687b      	ldr	r3, [r7, #4]
 8005abe:	681b      	ldr	r3, [r3, #0]
 8005ac0:	3314      	adds	r3, #20
 8005ac2:	f8d7 20c4 	ldr.w	r2, [r7, #196]	@ 0xc4
 8005ac6:	633a      	str	r2, [r7, #48]	@ 0x30
 8005ac8:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005aca:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8005acc:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8005ace:	e841 2300 	strex	r3, r2, [r1]
 8005ad2:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8005ad4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005ad6:	2b00      	cmp	r3, #0
 8005ad8:	d1e3      	bne.n	8005aa2 <HAL_UART_IRQHandler+0x442>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8005ada:	687b      	ldr	r3, [r7, #4]
 8005adc:	2220      	movs	r2, #32
 8005ade:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005ae2:	687b      	ldr	r3, [r7, #4]
 8005ae4:	2200      	movs	r2, #0
 8005ae6:	631a      	str	r2, [r3, #48]	@ 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005ae8:	687b      	ldr	r3, [r7, #4]
 8005aea:	681b      	ldr	r3, [r3, #0]
 8005aec:	330c      	adds	r3, #12
 8005aee:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005af0:	693b      	ldr	r3, [r7, #16]
 8005af2:	e853 3f00 	ldrex	r3, [r3]
 8005af6:	60fb      	str	r3, [r7, #12]
   return(result);
 8005af8:	68fb      	ldr	r3, [r7, #12]
 8005afa:	f023 0310 	bic.w	r3, r3, #16
 8005afe:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8005b02:	687b      	ldr	r3, [r7, #4]
 8005b04:	681b      	ldr	r3, [r3, #0]
 8005b06:	330c      	adds	r3, #12
 8005b08:	f8d7 20c0 	ldr.w	r2, [r7, #192]	@ 0xc0
 8005b0c:	61fa      	str	r2, [r7, #28]
 8005b0e:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005b10:	69b9      	ldr	r1, [r7, #24]
 8005b12:	69fa      	ldr	r2, [r7, #28]
 8005b14:	e841 2300 	strex	r3, r2, [r1]
 8005b18:	617b      	str	r3, [r7, #20]
   return(result);
 8005b1a:	697b      	ldr	r3, [r7, #20]
 8005b1c:	2b00      	cmp	r3, #0
 8005b1e:	d1e3      	bne.n	8005ae8 <HAL_UART_IRQHandler+0x488>
=======
 8005b58:	687b      	ldr	r3, [r7, #4]
 8005b5a:	8d9a      	ldrh	r2, [r3, #44]	@ 0x2c
 8005b5c:	687b      	ldr	r3, [r7, #4]
 8005b5e:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8005b60:	b29b      	uxth	r3, r3
 8005b62:	1ad3      	subs	r3, r2, r3
 8005b64:	f8a7 30ce 	strh.w	r3, [r7, #206]	@ 0xce
      if ((huart->RxXferCount > 0U)
 8005b68:	687b      	ldr	r3, [r7, #4]
 8005b6a:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8005b6c:	b29b      	uxth	r3, r3
 8005b6e:	2b00      	cmp	r3, #0
 8005b70:	f000 808e 	beq.w	8005c90 <HAL_UART_IRQHandler+0x51c>
          && (nb_rx_data > 0U))
 8005b74:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 8005b78:	2b00      	cmp	r3, #0
 8005b7a:	f000 8089 	beq.w	8005c90 <HAL_UART_IRQHandler+0x51c>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8005b7e:	687b      	ldr	r3, [r7, #4]
 8005b80:	681b      	ldr	r3, [r3, #0]
 8005b82:	330c      	adds	r3, #12
 8005b84:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005b86:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005b88:	e853 3f00 	ldrex	r3, [r3]
 8005b8c:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8005b8e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005b90:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8005b94:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8005b98:	687b      	ldr	r3, [r7, #4]
 8005b9a:	681b      	ldr	r3, [r3, #0]
 8005b9c:	330c      	adds	r3, #12
 8005b9e:	f8d7 20c8 	ldr.w	r2, [r7, #200]	@ 0xc8
 8005ba2:	647a      	str	r2, [r7, #68]	@ 0x44
 8005ba4:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005ba6:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8005ba8:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8005baa:	e841 2300 	strex	r3, r2, [r1]
 8005bae:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8005bb0:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8005bb2:	2b00      	cmp	r3, #0
 8005bb4:	d1e3      	bne.n	8005b7e <HAL_UART_IRQHandler+0x40a>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005bb6:	687b      	ldr	r3, [r7, #4]
 8005bb8:	681b      	ldr	r3, [r3, #0]
 8005bba:	3314      	adds	r3, #20
 8005bbc:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005bbe:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005bc0:	e853 3f00 	ldrex	r3, [r3]
 8005bc4:	623b      	str	r3, [r7, #32]
   return(result);
 8005bc6:	6a3b      	ldr	r3, [r7, #32]
 8005bc8:	f023 0301 	bic.w	r3, r3, #1
 8005bcc:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 8005bd0:	687b      	ldr	r3, [r7, #4]
 8005bd2:	681b      	ldr	r3, [r3, #0]
 8005bd4:	3314      	adds	r3, #20
 8005bd6:	f8d7 20c4 	ldr.w	r2, [r7, #196]	@ 0xc4
 8005bda:	633a      	str	r2, [r7, #48]	@ 0x30
 8005bdc:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005bde:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8005be0:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8005be2:	e841 2300 	strex	r3, r2, [r1]
 8005be6:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8005be8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005bea:	2b00      	cmp	r3, #0
 8005bec:	d1e3      	bne.n	8005bb6 <HAL_UART_IRQHandler+0x442>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8005bee:	687b      	ldr	r3, [r7, #4]
 8005bf0:	2220      	movs	r2, #32
 8005bf2:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005bf6:	687b      	ldr	r3, [r7, #4]
 8005bf8:	2200      	movs	r2, #0
 8005bfa:	631a      	str	r2, [r3, #48]	@ 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005bfc:	687b      	ldr	r3, [r7, #4]
 8005bfe:	681b      	ldr	r3, [r3, #0]
 8005c00:	330c      	adds	r3, #12
 8005c02:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005c04:	693b      	ldr	r3, [r7, #16]
 8005c06:	e853 3f00 	ldrex	r3, [r3]
 8005c0a:	60fb      	str	r3, [r7, #12]
   return(result);
 8005c0c:	68fb      	ldr	r3, [r7, #12]
 8005c0e:	f023 0310 	bic.w	r3, r3, #16
 8005c12:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8005c16:	687b      	ldr	r3, [r7, #4]
 8005c18:	681b      	ldr	r3, [r3, #0]
 8005c1a:	330c      	adds	r3, #12
 8005c1c:	f8d7 20c0 	ldr.w	r2, [r7, #192]	@ 0xc0
 8005c20:	61fa      	str	r2, [r7, #28]
 8005c22:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005c24:	69b9      	ldr	r1, [r7, #24]
 8005c26:	69fa      	ldr	r2, [r7, #28]
 8005c28:	e841 2300 	strex	r3, r2, [r1]
 8005c2c:	617b      	str	r3, [r7, #20]
   return(result);
 8005c2e:	697b      	ldr	r3, [r7, #20]
 8005c30:	2b00      	cmp	r3, #0
 8005c32:	d1e3      	bne.n	8005bfc <HAL_UART_IRQHandler+0x488>
>>>>>>> 39e4d10438a821cc799a472af87a77c6796a1676

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
<<<<<<< HEAD
 8005b20:	687b      	ldr	r3, [r7, #4]
 8005b22:	2202      	movs	r2, #2
 8005b24:	635a      	str	r2, [r3, #52]	@ 0x34
=======
 8005c34:	687b      	ldr	r3, [r7, #4]
 8005c36:	2202      	movs	r2, #2
 8005c38:	635a      	str	r2, [r3, #52]	@ 0x34
>>>>>>> 39e4d10438a821cc799a472af87a77c6796a1676
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
<<<<<<< HEAD
 8005b26:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 8005b2a:	4619      	mov	r1, r3
 8005b2c:	6878      	ldr	r0, [r7, #4]
 8005b2e:	f000 f83d 	bl	8005bac <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8005b32:	e023      	b.n	8005b7c <HAL_UART_IRQHandler+0x51c>
=======
 8005c3a:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 8005c3e:	4619      	mov	r1, r3
 8005c40:	6878      	ldr	r0, [r7, #4]
 8005c42:	f000 f83d 	bl	8005cc0 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8005c46:	e023      	b.n	8005c90 <HAL_UART_IRQHandler+0x51c>
>>>>>>> 39e4d10438a821cc799a472af87a77c6796a1676
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
<<<<<<< HEAD
 8005b34:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8005b38:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8005b3c:	2b00      	cmp	r3, #0
 8005b3e:	d009      	beq.n	8005b54 <HAL_UART_IRQHandler+0x4f4>
 8005b40:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8005b44:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8005b48:	2b00      	cmp	r3, #0
 8005b4a:	d003      	beq.n	8005b54 <HAL_UART_IRQHandler+0x4f4>
  {
    UART_Transmit_IT(huart);
 8005b4c:	6878      	ldr	r0, [r7, #4]
 8005b4e:	f000 f8ea 	bl	8005d26 <UART_Transmit_IT>
    return;
 8005b52:	e014      	b.n	8005b7e <HAL_UART_IRQHandler+0x51e>
=======
 8005c48:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8005c4c:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8005c50:	2b00      	cmp	r3, #0
 8005c52:	d009      	beq.n	8005c68 <HAL_UART_IRQHandler+0x4f4>
 8005c54:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8005c58:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8005c5c:	2b00      	cmp	r3, #0
 8005c5e:	d003      	beq.n	8005c68 <HAL_UART_IRQHandler+0x4f4>
  {
    UART_Transmit_IT(huart);
 8005c60:	6878      	ldr	r0, [r7, #4]
 8005c62:	f000 f8ea 	bl	8005e3a <UART_Transmit_IT>
    return;
 8005c66:	e014      	b.n	8005c92 <HAL_UART_IRQHandler+0x51e>
>>>>>>> 39e4d10438a821cc799a472af87a77c6796a1676
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
<<<<<<< HEAD
 8005b54:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8005b58:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005b5c:	2b00      	cmp	r3, #0
 8005b5e:	d00e      	beq.n	8005b7e <HAL_UART_IRQHandler+0x51e>
 8005b60:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8005b64:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005b68:	2b00      	cmp	r3, #0
 8005b6a:	d008      	beq.n	8005b7e <HAL_UART_IRQHandler+0x51e>
  {
    UART_EndTransmit_IT(huart);
 8005b6c:	6878      	ldr	r0, [r7, #4]
 8005b6e:	f000 f92a 	bl	8005dc6 <UART_EndTransmit_IT>
    return;
 8005b72:	e004      	b.n	8005b7e <HAL_UART_IRQHandler+0x51e>
    return;
 8005b74:	bf00      	nop
 8005b76:	e002      	b.n	8005b7e <HAL_UART_IRQHandler+0x51e>
      return;
 8005b78:	bf00      	nop
 8005b7a:	e000      	b.n	8005b7e <HAL_UART_IRQHandler+0x51e>
      return;
 8005b7c:	bf00      	nop
  }
}
 8005b7e:	37e8      	adds	r7, #232	@ 0xe8
 8005b80:	46bd      	mov	sp, r7
 8005b82:	bd80      	pop	{r7, pc}

08005b84 <HAL_UART_TxCpltCallback>:
=======
 8005c68:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8005c6c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005c70:	2b00      	cmp	r3, #0
 8005c72:	d00e      	beq.n	8005c92 <HAL_UART_IRQHandler+0x51e>
 8005c74:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8005c78:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005c7c:	2b00      	cmp	r3, #0
 8005c7e:	d008      	beq.n	8005c92 <HAL_UART_IRQHandler+0x51e>
  {
    UART_EndTransmit_IT(huart);
 8005c80:	6878      	ldr	r0, [r7, #4]
 8005c82:	f000 f92a 	bl	8005eda <UART_EndTransmit_IT>
    return;
 8005c86:	e004      	b.n	8005c92 <HAL_UART_IRQHandler+0x51e>
    return;
 8005c88:	bf00      	nop
 8005c8a:	e002      	b.n	8005c92 <HAL_UART_IRQHandler+0x51e>
      return;
 8005c8c:	bf00      	nop
 8005c8e:	e000      	b.n	8005c92 <HAL_UART_IRQHandler+0x51e>
      return;
 8005c90:	bf00      	nop
  }
}
 8005c92:	37e8      	adds	r7, #232	@ 0xe8
 8005c94:	46bd      	mov	sp, r7
 8005c96:	bd80      	pop	{r7, pc}

08005c98 <HAL_UART_TxCpltCallback>:
>>>>>>> 39e4d10438a821cc799a472af87a77c6796a1676
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
<<<<<<< HEAD
 8005b84:	b480      	push	{r7}
 8005b86:	b083      	sub	sp, #12
 8005b88:	af00      	add	r7, sp, #0
 8005b8a:	6078      	str	r0, [r7, #4]
=======
 8005c98:	b480      	push	{r7}
 8005c9a:	b083      	sub	sp, #12
 8005c9c:	af00      	add	r7, sp, #0
 8005c9e:	6078      	str	r0, [r7, #4]
>>>>>>> 39e4d10438a821cc799a472af87a77c6796a1676
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
<<<<<<< HEAD
 8005b8c:	bf00      	nop
 8005b8e:	370c      	adds	r7, #12
 8005b90:	46bd      	mov	sp, r7
 8005b92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b96:	4770      	bx	lr

08005b98 <HAL_UART_ErrorCallback>:
=======
 8005ca0:	bf00      	nop
 8005ca2:	370c      	adds	r7, #12
 8005ca4:	46bd      	mov	sp, r7
 8005ca6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005caa:	4770      	bx	lr

08005cac <HAL_UART_ErrorCallback>:
>>>>>>> 39e4d10438a821cc799a472af87a77c6796a1676
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
<<<<<<< HEAD
 8005b98:	b480      	push	{r7}
 8005b9a:	b083      	sub	sp, #12
 8005b9c:	af00      	add	r7, sp, #0
 8005b9e:	6078      	str	r0, [r7, #4]
=======
 8005cac:	b480      	push	{r7}
 8005cae:	b083      	sub	sp, #12
 8005cb0:	af00      	add	r7, sp, #0
 8005cb2:	6078      	str	r0, [r7, #4]
>>>>>>> 39e4d10438a821cc799a472af87a77c6796a1676
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
<<<<<<< HEAD
 8005ba0:	bf00      	nop
 8005ba2:	370c      	adds	r7, #12
 8005ba4:	46bd      	mov	sp, r7
 8005ba6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005baa:	4770      	bx	lr

08005bac <HAL_UARTEx_RxEventCallback>:
=======
 8005cb4:	bf00      	nop
 8005cb6:	370c      	adds	r7, #12
 8005cb8:	46bd      	mov	sp, r7
 8005cba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005cbe:	4770      	bx	lr

08005cc0 <HAL_UARTEx_RxEventCallback>:
>>>>>>> 39e4d10438a821cc799a472af87a77c6796a1676
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
<<<<<<< HEAD
 8005bac:	b480      	push	{r7}
 8005bae:	b083      	sub	sp, #12
 8005bb0:	af00      	add	r7, sp, #0
 8005bb2:	6078      	str	r0, [r7, #4]
 8005bb4:	460b      	mov	r3, r1
 8005bb6:	807b      	strh	r3, [r7, #2]
=======
 8005cc0:	b480      	push	{r7}
 8005cc2:	b083      	sub	sp, #12
 8005cc4:	af00      	add	r7, sp, #0
 8005cc6:	6078      	str	r0, [r7, #4]
 8005cc8:	460b      	mov	r3, r1
 8005cca:	807b      	strh	r3, [r7, #2]
>>>>>>> 39e4d10438a821cc799a472af87a77c6796a1676
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
<<<<<<< HEAD
 8005bb8:	bf00      	nop
 8005bba:	370c      	adds	r7, #12
 8005bbc:	46bd      	mov	sp, r7
 8005bbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005bc2:	4770      	bx	lr

08005bc4 <UART_Start_Receive_IT>:
=======
 8005ccc:	bf00      	nop
 8005cce:	370c      	adds	r7, #12
 8005cd0:	46bd      	mov	sp, r7
 8005cd2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005cd6:	4770      	bx	lr

08005cd8 <UART_Start_Receive_IT>:
>>>>>>> 39e4d10438a821cc799a472af87a77c6796a1676
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
<<<<<<< HEAD
 8005bc4:	b480      	push	{r7}
 8005bc6:	b085      	sub	sp, #20
 8005bc8:	af00      	add	r7, sp, #0
 8005bca:	60f8      	str	r0, [r7, #12]
 8005bcc:	60b9      	str	r1, [r7, #8]
 8005bce:	4613      	mov	r3, r2
 8005bd0:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 8005bd2:	68fb      	ldr	r3, [r7, #12]
 8005bd4:	68ba      	ldr	r2, [r7, #8]
 8005bd6:	629a      	str	r2, [r3, #40]	@ 0x28
  huart->RxXferSize = Size;
 8005bd8:	68fb      	ldr	r3, [r7, #12]
 8005bda:	88fa      	ldrh	r2, [r7, #6]
 8005bdc:	859a      	strh	r2, [r3, #44]	@ 0x2c
  huart->RxXferCount = Size;
 8005bde:	68fb      	ldr	r3, [r7, #12]
 8005be0:	88fa      	ldrh	r2, [r7, #6]
 8005be2:	85da      	strh	r2, [r3, #46]	@ 0x2e

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005be4:	68fb      	ldr	r3, [r7, #12]
 8005be6:	2200      	movs	r2, #0
 8005be8:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8005bea:	68fb      	ldr	r3, [r7, #12]
 8005bec:	2222      	movs	r2, #34	@ 0x22
 8005bee:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

  if (huart->Init.Parity != UART_PARITY_NONE)
 8005bf2:	68fb      	ldr	r3, [r7, #12]
 8005bf4:	691b      	ldr	r3, [r3, #16]
 8005bf6:	2b00      	cmp	r3, #0
 8005bf8:	d007      	beq.n	8005c0a <UART_Start_Receive_IT+0x46>
  {
    /* Enable the UART Parity Error Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_PE);
 8005bfa:	68fb      	ldr	r3, [r7, #12]
 8005bfc:	681b      	ldr	r3, [r3, #0]
 8005bfe:	68da      	ldr	r2, [r3, #12]
 8005c00:	68fb      	ldr	r3, [r7, #12]
 8005c02:	681b      	ldr	r3, [r3, #0]
 8005c04:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8005c08:	60da      	str	r2, [r3, #12]
=======
 8005cd8:	b480      	push	{r7}
 8005cda:	b085      	sub	sp, #20
 8005cdc:	af00      	add	r7, sp, #0
 8005cde:	60f8      	str	r0, [r7, #12]
 8005ce0:	60b9      	str	r1, [r7, #8]
 8005ce2:	4613      	mov	r3, r2
 8005ce4:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 8005ce6:	68fb      	ldr	r3, [r7, #12]
 8005ce8:	68ba      	ldr	r2, [r7, #8]
 8005cea:	629a      	str	r2, [r3, #40]	@ 0x28
  huart->RxXferSize = Size;
 8005cec:	68fb      	ldr	r3, [r7, #12]
 8005cee:	88fa      	ldrh	r2, [r7, #6]
 8005cf0:	859a      	strh	r2, [r3, #44]	@ 0x2c
  huart->RxXferCount = Size;
 8005cf2:	68fb      	ldr	r3, [r7, #12]
 8005cf4:	88fa      	ldrh	r2, [r7, #6]
 8005cf6:	85da      	strh	r2, [r3, #46]	@ 0x2e

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005cf8:	68fb      	ldr	r3, [r7, #12]
 8005cfa:	2200      	movs	r2, #0
 8005cfc:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8005cfe:	68fb      	ldr	r3, [r7, #12]
 8005d00:	2222      	movs	r2, #34	@ 0x22
 8005d02:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

  if (huart->Init.Parity != UART_PARITY_NONE)
 8005d06:	68fb      	ldr	r3, [r7, #12]
 8005d08:	691b      	ldr	r3, [r3, #16]
 8005d0a:	2b00      	cmp	r3, #0
 8005d0c:	d007      	beq.n	8005d1e <UART_Start_Receive_IT+0x46>
  {
    /* Enable the UART Parity Error Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_PE);
 8005d0e:	68fb      	ldr	r3, [r7, #12]
 8005d10:	681b      	ldr	r3, [r3, #0]
 8005d12:	68da      	ldr	r2, [r3, #12]
 8005d14:	68fb      	ldr	r3, [r7, #12]
 8005d16:	681b      	ldr	r3, [r3, #0]
 8005d18:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8005d1c:	60da      	str	r2, [r3, #12]
>>>>>>> 39e4d10438a821cc799a472af87a77c6796a1676
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  __HAL_UART_ENABLE_IT(huart, UART_IT_ERR);
<<<<<<< HEAD
 8005c0a:	68fb      	ldr	r3, [r7, #12]
 8005c0c:	681b      	ldr	r3, [r3, #0]
 8005c0e:	695a      	ldr	r2, [r3, #20]
 8005c10:	68fb      	ldr	r3, [r7, #12]
 8005c12:	681b      	ldr	r3, [r3, #0]
 8005c14:	f042 0201 	orr.w	r2, r2, #1
 8005c18:	615a      	str	r2, [r3, #20]

  /* Enable the UART Data Register not empty Interrupt */
  __HAL_UART_ENABLE_IT(huart, UART_IT_RXNE);
 8005c1a:	68fb      	ldr	r3, [r7, #12]
 8005c1c:	681b      	ldr	r3, [r3, #0]
 8005c1e:	68da      	ldr	r2, [r3, #12]
 8005c20:	68fb      	ldr	r3, [r7, #12]
 8005c22:	681b      	ldr	r3, [r3, #0]
 8005c24:	f042 0220 	orr.w	r2, r2, #32
 8005c28:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 8005c2a:	2300      	movs	r3, #0
}
 8005c2c:	4618      	mov	r0, r3
 8005c2e:	3714      	adds	r7, #20
 8005c30:	46bd      	mov	sp, r7
 8005c32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c36:	4770      	bx	lr

08005c38 <UART_EndRxTransfer>:
=======
 8005d1e:	68fb      	ldr	r3, [r7, #12]
 8005d20:	681b      	ldr	r3, [r3, #0]
 8005d22:	695a      	ldr	r2, [r3, #20]
 8005d24:	68fb      	ldr	r3, [r7, #12]
 8005d26:	681b      	ldr	r3, [r3, #0]
 8005d28:	f042 0201 	orr.w	r2, r2, #1
 8005d2c:	615a      	str	r2, [r3, #20]

  /* Enable the UART Data Register not empty Interrupt */
  __HAL_UART_ENABLE_IT(huart, UART_IT_RXNE);
 8005d2e:	68fb      	ldr	r3, [r7, #12]
 8005d30:	681b      	ldr	r3, [r3, #0]
 8005d32:	68da      	ldr	r2, [r3, #12]
 8005d34:	68fb      	ldr	r3, [r7, #12]
 8005d36:	681b      	ldr	r3, [r3, #0]
 8005d38:	f042 0220 	orr.w	r2, r2, #32
 8005d3c:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 8005d3e:	2300      	movs	r3, #0
}
 8005d40:	4618      	mov	r0, r3
 8005d42:	3714      	adds	r7, #20
 8005d44:	46bd      	mov	sp, r7
 8005d46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d4a:	4770      	bx	lr

08005d4c <UART_EndRxTransfer>:
>>>>>>> 39e4d10438a821cc799a472af87a77c6796a1676
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
<<<<<<< HEAD
 8005c38:	b480      	push	{r7}
 8005c3a:	b095      	sub	sp, #84	@ 0x54
 8005c3c:	af00      	add	r7, sp, #0
 8005c3e:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8005c40:	687b      	ldr	r3, [r7, #4]
 8005c42:	681b      	ldr	r3, [r3, #0]
 8005c44:	330c      	adds	r3, #12
 8005c46:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005c48:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005c4a:	e853 3f00 	ldrex	r3, [r3]
 8005c4e:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8005c50:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005c52:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8005c56:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8005c58:	687b      	ldr	r3, [r7, #4]
 8005c5a:	681b      	ldr	r3, [r3, #0]
 8005c5c:	330c      	adds	r3, #12
 8005c5e:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8005c60:	643a      	str	r2, [r7, #64]	@ 0x40
 8005c62:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005c64:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8005c66:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8005c68:	e841 2300 	strex	r3, r2, [r1]
 8005c6c:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8005c6e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005c70:	2b00      	cmp	r3, #0
 8005c72:	d1e5      	bne.n	8005c40 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005c74:	687b      	ldr	r3, [r7, #4]
 8005c76:	681b      	ldr	r3, [r3, #0]
 8005c78:	3314      	adds	r3, #20
 8005c7a:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005c7c:	6a3b      	ldr	r3, [r7, #32]
 8005c7e:	e853 3f00 	ldrex	r3, [r3]
 8005c82:	61fb      	str	r3, [r7, #28]
   return(result);
 8005c84:	69fb      	ldr	r3, [r7, #28]
 8005c86:	f023 0301 	bic.w	r3, r3, #1
 8005c8a:	64bb      	str	r3, [r7, #72]	@ 0x48
 8005c8c:	687b      	ldr	r3, [r7, #4]
 8005c8e:	681b      	ldr	r3, [r3, #0]
 8005c90:	3314      	adds	r3, #20
 8005c92:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8005c94:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8005c96:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005c98:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8005c9a:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8005c9c:	e841 2300 	strex	r3, r2, [r1]
 8005ca0:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8005ca2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005ca4:	2b00      	cmp	r3, #0
 8005ca6:	d1e5      	bne.n	8005c74 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005ca8:	687b      	ldr	r3, [r7, #4]
 8005caa:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005cac:	2b01      	cmp	r3, #1
 8005cae:	d119      	bne.n	8005ce4 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005cb0:	687b      	ldr	r3, [r7, #4]
 8005cb2:	681b      	ldr	r3, [r3, #0]
 8005cb4:	330c      	adds	r3, #12
 8005cb6:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005cb8:	68fb      	ldr	r3, [r7, #12]
 8005cba:	e853 3f00 	ldrex	r3, [r3]
 8005cbe:	60bb      	str	r3, [r7, #8]
   return(result);
 8005cc0:	68bb      	ldr	r3, [r7, #8]
 8005cc2:	f023 0310 	bic.w	r3, r3, #16
 8005cc6:	647b      	str	r3, [r7, #68]	@ 0x44
 8005cc8:	687b      	ldr	r3, [r7, #4]
 8005cca:	681b      	ldr	r3, [r3, #0]
 8005ccc:	330c      	adds	r3, #12
 8005cce:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8005cd0:	61ba      	str	r2, [r7, #24]
 8005cd2:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005cd4:	6979      	ldr	r1, [r7, #20]
 8005cd6:	69ba      	ldr	r2, [r7, #24]
 8005cd8:	e841 2300 	strex	r3, r2, [r1]
 8005cdc:	613b      	str	r3, [r7, #16]
   return(result);
 8005cde:	693b      	ldr	r3, [r7, #16]
 8005ce0:	2b00      	cmp	r3, #0
 8005ce2:	d1e5      	bne.n	8005cb0 <UART_EndRxTransfer+0x78>
=======
 8005d4c:	b480      	push	{r7}
 8005d4e:	b095      	sub	sp, #84	@ 0x54
 8005d50:	af00      	add	r7, sp, #0
 8005d52:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8005d54:	687b      	ldr	r3, [r7, #4]
 8005d56:	681b      	ldr	r3, [r3, #0]
 8005d58:	330c      	adds	r3, #12
 8005d5a:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005d5c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005d5e:	e853 3f00 	ldrex	r3, [r3]
 8005d62:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8005d64:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005d66:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8005d6a:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8005d6c:	687b      	ldr	r3, [r7, #4]
 8005d6e:	681b      	ldr	r3, [r3, #0]
 8005d70:	330c      	adds	r3, #12
 8005d72:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8005d74:	643a      	str	r2, [r7, #64]	@ 0x40
 8005d76:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005d78:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8005d7a:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8005d7c:	e841 2300 	strex	r3, r2, [r1]
 8005d80:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8005d82:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005d84:	2b00      	cmp	r3, #0
 8005d86:	d1e5      	bne.n	8005d54 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005d88:	687b      	ldr	r3, [r7, #4]
 8005d8a:	681b      	ldr	r3, [r3, #0]
 8005d8c:	3314      	adds	r3, #20
 8005d8e:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005d90:	6a3b      	ldr	r3, [r7, #32]
 8005d92:	e853 3f00 	ldrex	r3, [r3]
 8005d96:	61fb      	str	r3, [r7, #28]
   return(result);
 8005d98:	69fb      	ldr	r3, [r7, #28]
 8005d9a:	f023 0301 	bic.w	r3, r3, #1
 8005d9e:	64bb      	str	r3, [r7, #72]	@ 0x48
 8005da0:	687b      	ldr	r3, [r7, #4]
 8005da2:	681b      	ldr	r3, [r3, #0]
 8005da4:	3314      	adds	r3, #20
 8005da6:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8005da8:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8005daa:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005dac:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8005dae:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8005db0:	e841 2300 	strex	r3, r2, [r1]
 8005db4:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8005db6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005db8:	2b00      	cmp	r3, #0
 8005dba:	d1e5      	bne.n	8005d88 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005dbc:	687b      	ldr	r3, [r7, #4]
 8005dbe:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005dc0:	2b01      	cmp	r3, #1
 8005dc2:	d119      	bne.n	8005df8 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005dc4:	687b      	ldr	r3, [r7, #4]
 8005dc6:	681b      	ldr	r3, [r3, #0]
 8005dc8:	330c      	adds	r3, #12
 8005dca:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005dcc:	68fb      	ldr	r3, [r7, #12]
 8005dce:	e853 3f00 	ldrex	r3, [r3]
 8005dd2:	60bb      	str	r3, [r7, #8]
   return(result);
 8005dd4:	68bb      	ldr	r3, [r7, #8]
 8005dd6:	f023 0310 	bic.w	r3, r3, #16
 8005dda:	647b      	str	r3, [r7, #68]	@ 0x44
 8005ddc:	687b      	ldr	r3, [r7, #4]
 8005dde:	681b      	ldr	r3, [r3, #0]
 8005de0:	330c      	adds	r3, #12
 8005de2:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8005de4:	61ba      	str	r2, [r7, #24]
 8005de6:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005de8:	6979      	ldr	r1, [r7, #20]
 8005dea:	69ba      	ldr	r2, [r7, #24]
 8005dec:	e841 2300 	strex	r3, r2, [r1]
 8005df0:	613b      	str	r3, [r7, #16]
   return(result);
 8005df2:	693b      	ldr	r3, [r7, #16]
 8005df4:	2b00      	cmp	r3, #0
 8005df6:	d1e5      	bne.n	8005dc4 <UART_EndRxTransfer+0x78>
>>>>>>> 39e4d10438a821cc799a472af87a77c6796a1676
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
<<<<<<< HEAD
 8005ce4:	687b      	ldr	r3, [r7, #4]
 8005ce6:	2220      	movs	r2, #32
 8005ce8:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005cec:	687b      	ldr	r3, [r7, #4]
 8005cee:	2200      	movs	r2, #0
 8005cf0:	631a      	str	r2, [r3, #48]	@ 0x30
}
 8005cf2:	bf00      	nop
 8005cf4:	3754      	adds	r7, #84	@ 0x54
 8005cf6:	46bd      	mov	sp, r7
 8005cf8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005cfc:	4770      	bx	lr

08005cfe <UART_DMAAbortOnError>:
=======
 8005df8:	687b      	ldr	r3, [r7, #4]
 8005dfa:	2220      	movs	r2, #32
 8005dfc:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005e00:	687b      	ldr	r3, [r7, #4]
 8005e02:	2200      	movs	r2, #0
 8005e04:	631a      	str	r2, [r3, #48]	@ 0x30
}
 8005e06:	bf00      	nop
 8005e08:	3754      	adds	r7, #84	@ 0x54
 8005e0a:	46bd      	mov	sp, r7
 8005e0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e10:	4770      	bx	lr

08005e12 <UART_DMAAbortOnError>:
>>>>>>> 39e4d10438a821cc799a472af87a77c6796a1676
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
<<<<<<< HEAD
 8005cfe:	b580      	push	{r7, lr}
 8005d00:	b084      	sub	sp, #16
 8005d02:	af00      	add	r7, sp, #0
 8005d04:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8005d06:	687b      	ldr	r3, [r7, #4]
 8005d08:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005d0a:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 8005d0c:	68fb      	ldr	r3, [r7, #12]
 8005d0e:	2200      	movs	r2, #0
 8005d10:	85da      	strh	r2, [r3, #46]	@ 0x2e
  huart->TxXferCount = 0x00U;
 8005d12:	68fb      	ldr	r3, [r7, #12]
 8005d14:	2200      	movs	r2, #0
 8005d16:	84da      	strh	r2, [r3, #38]	@ 0x26
=======
 8005e12:	b580      	push	{r7, lr}
 8005e14:	b084      	sub	sp, #16
 8005e16:	af00      	add	r7, sp, #0
 8005e18:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8005e1a:	687b      	ldr	r3, [r7, #4]
 8005e1c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005e1e:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 8005e20:	68fb      	ldr	r3, [r7, #12]
 8005e22:	2200      	movs	r2, #0
 8005e24:	85da      	strh	r2, [r3, #46]	@ 0x2e
  huart->TxXferCount = 0x00U;
 8005e26:	68fb      	ldr	r3, [r7, #12]
 8005e28:	2200      	movs	r2, #0
 8005e2a:	84da      	strh	r2, [r3, #38]	@ 0x26
>>>>>>> 39e4d10438a821cc799a472af87a77c6796a1676
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
<<<<<<< HEAD
 8005d18:	68f8      	ldr	r0, [r7, #12]
 8005d1a:	f7ff ff3d 	bl	8005b98 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8005d1e:	bf00      	nop
 8005d20:	3710      	adds	r7, #16
 8005d22:	46bd      	mov	sp, r7
 8005d24:	bd80      	pop	{r7, pc}

08005d26 <UART_Transmit_IT>:
=======
 8005e2c:	68f8      	ldr	r0, [r7, #12]
 8005e2e:	f7ff ff3d 	bl	8005cac <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8005e32:	bf00      	nop
 8005e34:	3710      	adds	r7, #16
 8005e36:	46bd      	mov	sp, r7
 8005e38:	bd80      	pop	{r7, pc}

08005e3a <UART_Transmit_IT>:
>>>>>>> 39e4d10438a821cc799a472af87a77c6796a1676
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
<<<<<<< HEAD
 8005d26:	b480      	push	{r7}
 8005d28:	b085      	sub	sp, #20
 8005d2a:	af00      	add	r7, sp, #0
 8005d2c:	6078      	str	r0, [r7, #4]
=======
 8005e3a:	b480      	push	{r7}
 8005e3c:	b085      	sub	sp, #20
 8005e3e:	af00      	add	r7, sp, #0
 8005e40:	6078      	str	r0, [r7, #4]
>>>>>>> 39e4d10438a821cc799a472af87a77c6796a1676
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
<<<<<<< HEAD
 8005d2e:	687b      	ldr	r3, [r7, #4]
 8005d30:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8005d34:	b2db      	uxtb	r3, r3
 8005d36:	2b21      	cmp	r3, #33	@ 0x21
 8005d38:	d13e      	bne.n	8005db8 <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8005d3a:	687b      	ldr	r3, [r7, #4]
 8005d3c:	689b      	ldr	r3, [r3, #8]
 8005d3e:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8005d42:	d114      	bne.n	8005d6e <UART_Transmit_IT+0x48>
 8005d44:	687b      	ldr	r3, [r7, #4]
 8005d46:	691b      	ldr	r3, [r3, #16]
 8005d48:	2b00      	cmp	r3, #0
 8005d4a:	d110      	bne.n	8005d6e <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 8005d4c:	687b      	ldr	r3, [r7, #4]
 8005d4e:	6a1b      	ldr	r3, [r3, #32]
 8005d50:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 8005d52:	68fb      	ldr	r3, [r7, #12]
 8005d54:	881b      	ldrh	r3, [r3, #0]
 8005d56:	461a      	mov	r2, r3
 8005d58:	687b      	ldr	r3, [r7, #4]
 8005d5a:	681b      	ldr	r3, [r3, #0]
 8005d5c:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8005d60:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 8005d62:	687b      	ldr	r3, [r7, #4]
 8005d64:	6a1b      	ldr	r3, [r3, #32]
 8005d66:	1c9a      	adds	r2, r3, #2
 8005d68:	687b      	ldr	r3, [r7, #4]
 8005d6a:	621a      	str	r2, [r3, #32]
 8005d6c:	e008      	b.n	8005d80 <UART_Transmit_IT+0x5a>
=======
 8005e42:	687b      	ldr	r3, [r7, #4]
 8005e44:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8005e48:	b2db      	uxtb	r3, r3
 8005e4a:	2b21      	cmp	r3, #33	@ 0x21
 8005e4c:	d13e      	bne.n	8005ecc <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8005e4e:	687b      	ldr	r3, [r7, #4]
 8005e50:	689b      	ldr	r3, [r3, #8]
 8005e52:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8005e56:	d114      	bne.n	8005e82 <UART_Transmit_IT+0x48>
 8005e58:	687b      	ldr	r3, [r7, #4]
 8005e5a:	691b      	ldr	r3, [r3, #16]
 8005e5c:	2b00      	cmp	r3, #0
 8005e5e:	d110      	bne.n	8005e82 <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 8005e60:	687b      	ldr	r3, [r7, #4]
 8005e62:	6a1b      	ldr	r3, [r3, #32]
 8005e64:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 8005e66:	68fb      	ldr	r3, [r7, #12]
 8005e68:	881b      	ldrh	r3, [r3, #0]
 8005e6a:	461a      	mov	r2, r3
 8005e6c:	687b      	ldr	r3, [r7, #4]
 8005e6e:	681b      	ldr	r3, [r3, #0]
 8005e70:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8005e74:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 8005e76:	687b      	ldr	r3, [r7, #4]
 8005e78:	6a1b      	ldr	r3, [r3, #32]
 8005e7a:	1c9a      	adds	r2, r3, #2
 8005e7c:	687b      	ldr	r3, [r7, #4]
 8005e7e:	621a      	str	r2, [r3, #32]
 8005e80:	e008      	b.n	8005e94 <UART_Transmit_IT+0x5a>
>>>>>>> 39e4d10438a821cc799a472af87a77c6796a1676
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
<<<<<<< HEAD
 8005d6e:	687b      	ldr	r3, [r7, #4]
 8005d70:	6a1b      	ldr	r3, [r3, #32]
 8005d72:	1c59      	adds	r1, r3, #1
 8005d74:	687a      	ldr	r2, [r7, #4]
 8005d76:	6211      	str	r1, [r2, #32]
 8005d78:	781a      	ldrb	r2, [r3, #0]
 8005d7a:	687b      	ldr	r3, [r7, #4]
 8005d7c:	681b      	ldr	r3, [r3, #0]
 8005d7e:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 8005d80:	687b      	ldr	r3, [r7, #4]
 8005d82:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 8005d84:	b29b      	uxth	r3, r3
 8005d86:	3b01      	subs	r3, #1
 8005d88:	b29b      	uxth	r3, r3
 8005d8a:	687a      	ldr	r2, [r7, #4]
 8005d8c:	4619      	mov	r1, r3
 8005d8e:	84d1      	strh	r1, [r2, #38]	@ 0x26
 8005d90:	2b00      	cmp	r3, #0
 8005d92:	d10f      	bne.n	8005db4 <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8005d94:	687b      	ldr	r3, [r7, #4]
 8005d96:	681b      	ldr	r3, [r3, #0]
 8005d98:	68da      	ldr	r2, [r3, #12]
 8005d9a:	687b      	ldr	r3, [r7, #4]
 8005d9c:	681b      	ldr	r3, [r3, #0]
 8005d9e:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8005da2:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 8005da4:	687b      	ldr	r3, [r7, #4]
 8005da6:	681b      	ldr	r3, [r3, #0]
 8005da8:	68da      	ldr	r2, [r3, #12]
 8005daa:	687b      	ldr	r3, [r7, #4]
 8005dac:	681b      	ldr	r3, [r3, #0]
 8005dae:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8005db2:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 8005db4:	2300      	movs	r3, #0
 8005db6:	e000      	b.n	8005dba <UART_Transmit_IT+0x94>
=======
 8005e82:	687b      	ldr	r3, [r7, #4]
 8005e84:	6a1b      	ldr	r3, [r3, #32]
 8005e86:	1c59      	adds	r1, r3, #1
 8005e88:	687a      	ldr	r2, [r7, #4]
 8005e8a:	6211      	str	r1, [r2, #32]
 8005e8c:	781a      	ldrb	r2, [r3, #0]
 8005e8e:	687b      	ldr	r3, [r7, #4]
 8005e90:	681b      	ldr	r3, [r3, #0]
 8005e92:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 8005e94:	687b      	ldr	r3, [r7, #4]
 8005e96:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 8005e98:	b29b      	uxth	r3, r3
 8005e9a:	3b01      	subs	r3, #1
 8005e9c:	b29b      	uxth	r3, r3
 8005e9e:	687a      	ldr	r2, [r7, #4]
 8005ea0:	4619      	mov	r1, r3
 8005ea2:	84d1      	strh	r1, [r2, #38]	@ 0x26
 8005ea4:	2b00      	cmp	r3, #0
 8005ea6:	d10f      	bne.n	8005ec8 <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8005ea8:	687b      	ldr	r3, [r7, #4]
 8005eaa:	681b      	ldr	r3, [r3, #0]
 8005eac:	68da      	ldr	r2, [r3, #12]
 8005eae:	687b      	ldr	r3, [r7, #4]
 8005eb0:	681b      	ldr	r3, [r3, #0]
 8005eb2:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8005eb6:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 8005eb8:	687b      	ldr	r3, [r7, #4]
 8005eba:	681b      	ldr	r3, [r3, #0]
 8005ebc:	68da      	ldr	r2, [r3, #12]
 8005ebe:	687b      	ldr	r3, [r7, #4]
 8005ec0:	681b      	ldr	r3, [r3, #0]
 8005ec2:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8005ec6:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 8005ec8:	2300      	movs	r3, #0
 8005eca:	e000      	b.n	8005ece <UART_Transmit_IT+0x94>
>>>>>>> 39e4d10438a821cc799a472af87a77c6796a1676
  }
  else
  {
    return HAL_BUSY;
<<<<<<< HEAD
 8005db8:	2302      	movs	r3, #2
  }
}
 8005dba:	4618      	mov	r0, r3
 8005dbc:	3714      	adds	r7, #20
 8005dbe:	46bd      	mov	sp, r7
 8005dc0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005dc4:	4770      	bx	lr

08005dc6 <UART_EndTransmit_IT>:
=======
 8005ecc:	2302      	movs	r3, #2
  }
}
 8005ece:	4618      	mov	r0, r3
 8005ed0:	3714      	adds	r7, #20
 8005ed2:	46bd      	mov	sp, r7
 8005ed4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ed8:	4770      	bx	lr

08005eda <UART_EndTransmit_IT>:
>>>>>>> 39e4d10438a821cc799a472af87a77c6796a1676
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
<<<<<<< HEAD
 8005dc6:	b580      	push	{r7, lr}
 8005dc8:	b082      	sub	sp, #8
 8005dca:	af00      	add	r7, sp, #0
 8005dcc:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 8005dce:	687b      	ldr	r3, [r7, #4]
 8005dd0:	681b      	ldr	r3, [r3, #0]
 8005dd2:	68da      	ldr	r2, [r3, #12]
 8005dd4:	687b      	ldr	r3, [r7, #4]
 8005dd6:	681b      	ldr	r3, [r3, #0]
 8005dd8:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8005ddc:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8005dde:	687b      	ldr	r3, [r7, #4]
 8005de0:	2220      	movs	r2, #32
 8005de2:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
=======
 8005eda:	b580      	push	{r7, lr}
 8005edc:	b082      	sub	sp, #8
 8005ede:	af00      	add	r7, sp, #0
 8005ee0:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 8005ee2:	687b      	ldr	r3, [r7, #4]
 8005ee4:	681b      	ldr	r3, [r3, #0]
 8005ee6:	68da      	ldr	r2, [r3, #12]
 8005ee8:	687b      	ldr	r3, [r7, #4]
 8005eea:	681b      	ldr	r3, [r3, #0]
 8005eec:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8005ef0:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8005ef2:	687b      	ldr	r3, [r7, #4]
 8005ef4:	2220      	movs	r2, #32
 8005ef6:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
>>>>>>> 39e4d10438a821cc799a472af87a77c6796a1676
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
<<<<<<< HEAD
 8005de6:	6878      	ldr	r0, [r7, #4]
 8005de8:	f7ff fecc 	bl	8005b84 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 8005dec:	2300      	movs	r3, #0
}
 8005dee:	4618      	mov	r0, r3
 8005df0:	3708      	adds	r7, #8
 8005df2:	46bd      	mov	sp, r7
 8005df4:	bd80      	pop	{r7, pc}

08005df6 <UART_Receive_IT>:
=======
 8005efa:	6878      	ldr	r0, [r7, #4]
 8005efc:	f7ff fecc 	bl	8005c98 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 8005f00:	2300      	movs	r3, #0
}
 8005f02:	4618      	mov	r0, r3
 8005f04:	3708      	adds	r7, #8
 8005f06:	46bd      	mov	sp, r7
 8005f08:	bd80      	pop	{r7, pc}

08005f0a <UART_Receive_IT>:
>>>>>>> 39e4d10438a821cc799a472af87a77c6796a1676
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
<<<<<<< HEAD
 8005df6:	b580      	push	{r7, lr}
 8005df8:	b08c      	sub	sp, #48	@ 0x30
 8005dfa:	af00      	add	r7, sp, #0
 8005dfc:	6078      	str	r0, [r7, #4]
=======
 8005f0a:	b580      	push	{r7, lr}
 8005f0c:	b08c      	sub	sp, #48	@ 0x30
 8005f0e:	af00      	add	r7, sp, #0
 8005f10:	6078      	str	r0, [r7, #4]
>>>>>>> 39e4d10438a821cc799a472af87a77c6796a1676
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
<<<<<<< HEAD
 8005dfe:	687b      	ldr	r3, [r7, #4]
 8005e00:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8005e04:	b2db      	uxtb	r3, r3
 8005e06:	2b22      	cmp	r3, #34	@ 0x22
 8005e08:	f040 80ae 	bne.w	8005f68 <UART_Receive_IT+0x172>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8005e0c:	687b      	ldr	r3, [r7, #4]
 8005e0e:	689b      	ldr	r3, [r3, #8]
 8005e10:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8005e14:	d117      	bne.n	8005e46 <UART_Receive_IT+0x50>
 8005e16:	687b      	ldr	r3, [r7, #4]
 8005e18:	691b      	ldr	r3, [r3, #16]
 8005e1a:	2b00      	cmp	r3, #0
 8005e1c:	d113      	bne.n	8005e46 <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 8005e1e:	2300      	movs	r3, #0
 8005e20:	62fb      	str	r3, [r7, #44]	@ 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 8005e22:	687b      	ldr	r3, [r7, #4]
 8005e24:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005e26:	62bb      	str	r3, [r7, #40]	@ 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8005e28:	687b      	ldr	r3, [r7, #4]
 8005e2a:	681b      	ldr	r3, [r3, #0]
 8005e2c:	685b      	ldr	r3, [r3, #4]
 8005e2e:	b29b      	uxth	r3, r3
 8005e30:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005e34:	b29a      	uxth	r2, r3
 8005e36:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005e38:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 8005e3a:	687b      	ldr	r3, [r7, #4]
 8005e3c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005e3e:	1c9a      	adds	r2, r3, #2
 8005e40:	687b      	ldr	r3, [r7, #4]
 8005e42:	629a      	str	r2, [r3, #40]	@ 0x28
 8005e44:	e026      	b.n	8005e94 <UART_Receive_IT+0x9e>
=======
 8005f12:	687b      	ldr	r3, [r7, #4]
 8005f14:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8005f18:	b2db      	uxtb	r3, r3
 8005f1a:	2b22      	cmp	r3, #34	@ 0x22
 8005f1c:	f040 80ae 	bne.w	800607c <UART_Receive_IT+0x172>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8005f20:	687b      	ldr	r3, [r7, #4]
 8005f22:	689b      	ldr	r3, [r3, #8]
 8005f24:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8005f28:	d117      	bne.n	8005f5a <UART_Receive_IT+0x50>
 8005f2a:	687b      	ldr	r3, [r7, #4]
 8005f2c:	691b      	ldr	r3, [r3, #16]
 8005f2e:	2b00      	cmp	r3, #0
 8005f30:	d113      	bne.n	8005f5a <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 8005f32:	2300      	movs	r3, #0
 8005f34:	62fb      	str	r3, [r7, #44]	@ 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 8005f36:	687b      	ldr	r3, [r7, #4]
 8005f38:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005f3a:	62bb      	str	r3, [r7, #40]	@ 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8005f3c:	687b      	ldr	r3, [r7, #4]
 8005f3e:	681b      	ldr	r3, [r3, #0]
 8005f40:	685b      	ldr	r3, [r3, #4]
 8005f42:	b29b      	uxth	r3, r3
 8005f44:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005f48:	b29a      	uxth	r2, r3
 8005f4a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005f4c:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 8005f4e:	687b      	ldr	r3, [r7, #4]
 8005f50:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005f52:	1c9a      	adds	r2, r3, #2
 8005f54:	687b      	ldr	r3, [r7, #4]
 8005f56:	629a      	str	r2, [r3, #40]	@ 0x28
 8005f58:	e026      	b.n	8005fa8 <UART_Receive_IT+0x9e>
>>>>>>> 39e4d10438a821cc799a472af87a77c6796a1676
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
<<<<<<< HEAD
 8005e46:	687b      	ldr	r3, [r7, #4]
 8005e48:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005e4a:	62fb      	str	r3, [r7, #44]	@ 0x2c
      pdata16bits  = NULL;
 8005e4c:	2300      	movs	r3, #0
 8005e4e:	62bb      	str	r3, [r7, #40]	@ 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8005e50:	687b      	ldr	r3, [r7, #4]
 8005e52:	689b      	ldr	r3, [r3, #8]
 8005e54:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8005e58:	d007      	beq.n	8005e6a <UART_Receive_IT+0x74>
 8005e5a:	687b      	ldr	r3, [r7, #4]
 8005e5c:	689b      	ldr	r3, [r3, #8]
 8005e5e:	2b00      	cmp	r3, #0
 8005e60:	d10a      	bne.n	8005e78 <UART_Receive_IT+0x82>
 8005e62:	687b      	ldr	r3, [r7, #4]
 8005e64:	691b      	ldr	r3, [r3, #16]
 8005e66:	2b00      	cmp	r3, #0
 8005e68:	d106      	bne.n	8005e78 <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8005e6a:	687b      	ldr	r3, [r7, #4]
 8005e6c:	681b      	ldr	r3, [r3, #0]
 8005e6e:	685b      	ldr	r3, [r3, #4]
 8005e70:	b2da      	uxtb	r2, r3
 8005e72:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005e74:	701a      	strb	r2, [r3, #0]
 8005e76:	e008      	b.n	8005e8a <UART_Receive_IT+0x94>
=======
 8005f5a:	687b      	ldr	r3, [r7, #4]
 8005f5c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005f5e:	62fb      	str	r3, [r7, #44]	@ 0x2c
      pdata16bits  = NULL;
 8005f60:	2300      	movs	r3, #0
 8005f62:	62bb      	str	r3, [r7, #40]	@ 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8005f64:	687b      	ldr	r3, [r7, #4]
 8005f66:	689b      	ldr	r3, [r3, #8]
 8005f68:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8005f6c:	d007      	beq.n	8005f7e <UART_Receive_IT+0x74>
 8005f6e:	687b      	ldr	r3, [r7, #4]
 8005f70:	689b      	ldr	r3, [r3, #8]
 8005f72:	2b00      	cmp	r3, #0
 8005f74:	d10a      	bne.n	8005f8c <UART_Receive_IT+0x82>
 8005f76:	687b      	ldr	r3, [r7, #4]
 8005f78:	691b      	ldr	r3, [r3, #16]
 8005f7a:	2b00      	cmp	r3, #0
 8005f7c:	d106      	bne.n	8005f8c <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8005f7e:	687b      	ldr	r3, [r7, #4]
 8005f80:	681b      	ldr	r3, [r3, #0]
 8005f82:	685b      	ldr	r3, [r3, #4]
 8005f84:	b2da      	uxtb	r2, r3
 8005f86:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005f88:	701a      	strb	r2, [r3, #0]
 8005f8a:	e008      	b.n	8005f9e <UART_Receive_IT+0x94>
>>>>>>> 39e4d10438a821cc799a472af87a77c6796a1676
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
<<<<<<< HEAD
 8005e78:	687b      	ldr	r3, [r7, #4]
 8005e7a:	681b      	ldr	r3, [r3, #0]
 8005e7c:	685b      	ldr	r3, [r3, #4]
 8005e7e:	b2db      	uxtb	r3, r3
 8005e80:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8005e84:	b2da      	uxtb	r2, r3
 8005e86:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005e88:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 8005e8a:	687b      	ldr	r3, [r7, #4]
 8005e8c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005e8e:	1c5a      	adds	r2, r3, #1
 8005e90:	687b      	ldr	r3, [r7, #4]
 8005e92:	629a      	str	r2, [r3, #40]	@ 0x28
    }

    if (--huart->RxXferCount == 0U)
 8005e94:	687b      	ldr	r3, [r7, #4]
 8005e96:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8005e98:	b29b      	uxth	r3, r3
 8005e9a:	3b01      	subs	r3, #1
 8005e9c:	b29b      	uxth	r3, r3
 8005e9e:	687a      	ldr	r2, [r7, #4]
 8005ea0:	4619      	mov	r1, r3
 8005ea2:	85d1      	strh	r1, [r2, #46]	@ 0x2e
 8005ea4:	2b00      	cmp	r3, #0
 8005ea6:	d15d      	bne.n	8005f64 <UART_Receive_IT+0x16e>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8005ea8:	687b      	ldr	r3, [r7, #4]
 8005eaa:	681b      	ldr	r3, [r3, #0]
 8005eac:	68da      	ldr	r2, [r3, #12]
 8005eae:	687b      	ldr	r3, [r7, #4]
 8005eb0:	681b      	ldr	r3, [r3, #0]
 8005eb2:	f022 0220 	bic.w	r2, r2, #32
 8005eb6:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8005eb8:	687b      	ldr	r3, [r7, #4]
 8005eba:	681b      	ldr	r3, [r3, #0]
 8005ebc:	68da      	ldr	r2, [r3, #12]
 8005ebe:	687b      	ldr	r3, [r7, #4]
 8005ec0:	681b      	ldr	r3, [r3, #0]
 8005ec2:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8005ec6:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8005ec8:	687b      	ldr	r3, [r7, #4]
 8005eca:	681b      	ldr	r3, [r3, #0]
 8005ecc:	695a      	ldr	r2, [r3, #20]
 8005ece:	687b      	ldr	r3, [r7, #4]
 8005ed0:	681b      	ldr	r3, [r3, #0]
 8005ed2:	f022 0201 	bic.w	r2, r2, #1
 8005ed6:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8005ed8:	687b      	ldr	r3, [r7, #4]
 8005eda:	2220      	movs	r2, #32
 8005edc:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 8005ee0:	687b      	ldr	r3, [r7, #4]
 8005ee2:	2200      	movs	r2, #0
 8005ee4:	635a      	str	r2, [r3, #52]	@ 0x34
=======
 8005f8c:	687b      	ldr	r3, [r7, #4]
 8005f8e:	681b      	ldr	r3, [r3, #0]
 8005f90:	685b      	ldr	r3, [r3, #4]
 8005f92:	b2db      	uxtb	r3, r3
 8005f94:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8005f98:	b2da      	uxtb	r2, r3
 8005f9a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005f9c:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 8005f9e:	687b      	ldr	r3, [r7, #4]
 8005fa0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005fa2:	1c5a      	adds	r2, r3, #1
 8005fa4:	687b      	ldr	r3, [r7, #4]
 8005fa6:	629a      	str	r2, [r3, #40]	@ 0x28
    }

    if (--huart->RxXferCount == 0U)
 8005fa8:	687b      	ldr	r3, [r7, #4]
 8005faa:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8005fac:	b29b      	uxth	r3, r3
 8005fae:	3b01      	subs	r3, #1
 8005fb0:	b29b      	uxth	r3, r3
 8005fb2:	687a      	ldr	r2, [r7, #4]
 8005fb4:	4619      	mov	r1, r3
 8005fb6:	85d1      	strh	r1, [r2, #46]	@ 0x2e
 8005fb8:	2b00      	cmp	r3, #0
 8005fba:	d15d      	bne.n	8006078 <UART_Receive_IT+0x16e>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8005fbc:	687b      	ldr	r3, [r7, #4]
 8005fbe:	681b      	ldr	r3, [r3, #0]
 8005fc0:	68da      	ldr	r2, [r3, #12]
 8005fc2:	687b      	ldr	r3, [r7, #4]
 8005fc4:	681b      	ldr	r3, [r3, #0]
 8005fc6:	f022 0220 	bic.w	r2, r2, #32
 8005fca:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8005fcc:	687b      	ldr	r3, [r7, #4]
 8005fce:	681b      	ldr	r3, [r3, #0]
 8005fd0:	68da      	ldr	r2, [r3, #12]
 8005fd2:	687b      	ldr	r3, [r7, #4]
 8005fd4:	681b      	ldr	r3, [r3, #0]
 8005fd6:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8005fda:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8005fdc:	687b      	ldr	r3, [r7, #4]
 8005fde:	681b      	ldr	r3, [r3, #0]
 8005fe0:	695a      	ldr	r2, [r3, #20]
 8005fe2:	687b      	ldr	r3, [r7, #4]
 8005fe4:	681b      	ldr	r3, [r3, #0]
 8005fe6:	f022 0201 	bic.w	r2, r2, #1
 8005fea:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8005fec:	687b      	ldr	r3, [r7, #4]
 8005fee:	2220      	movs	r2, #32
 8005ff0:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 8005ff4:	687b      	ldr	r3, [r7, #4]
 8005ff6:	2200      	movs	r2, #0
 8005ff8:	635a      	str	r2, [r3, #52]	@ 0x34
>>>>>>> 39e4d10438a821cc799a472af87a77c6796a1676

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
<<<<<<< HEAD
 8005ee6:	687b      	ldr	r3, [r7, #4]
 8005ee8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005eea:	2b01      	cmp	r3, #1
 8005eec:	d135      	bne.n	8005f5a <UART_Receive_IT+0x164>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005eee:	687b      	ldr	r3, [r7, #4]
 8005ef0:	2200      	movs	r2, #0
 8005ef2:	631a      	str	r2, [r3, #48]	@ 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005ef4:	687b      	ldr	r3, [r7, #4]
 8005ef6:	681b      	ldr	r3, [r3, #0]
 8005ef8:	330c      	adds	r3, #12
 8005efa:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005efc:	697b      	ldr	r3, [r7, #20]
 8005efe:	e853 3f00 	ldrex	r3, [r3]
 8005f02:	613b      	str	r3, [r7, #16]
   return(result);
 8005f04:	693b      	ldr	r3, [r7, #16]
 8005f06:	f023 0310 	bic.w	r3, r3, #16
 8005f0a:	627b      	str	r3, [r7, #36]	@ 0x24
 8005f0c:	687b      	ldr	r3, [r7, #4]
 8005f0e:	681b      	ldr	r3, [r3, #0]
 8005f10:	330c      	adds	r3, #12
 8005f12:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8005f14:	623a      	str	r2, [r7, #32]
 8005f16:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005f18:	69f9      	ldr	r1, [r7, #28]
 8005f1a:	6a3a      	ldr	r2, [r7, #32]
 8005f1c:	e841 2300 	strex	r3, r2, [r1]
 8005f20:	61bb      	str	r3, [r7, #24]
   return(result);
 8005f22:	69bb      	ldr	r3, [r7, #24]
 8005f24:	2b00      	cmp	r3, #0
 8005f26:	d1e5      	bne.n	8005ef4 <UART_Receive_IT+0xfe>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 8005f28:	687b      	ldr	r3, [r7, #4]
 8005f2a:	681b      	ldr	r3, [r3, #0]
 8005f2c:	681b      	ldr	r3, [r3, #0]
 8005f2e:	f003 0310 	and.w	r3, r3, #16
 8005f32:	2b10      	cmp	r3, #16
 8005f34:	d10a      	bne.n	8005f4c <UART_Receive_IT+0x156>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 8005f36:	2300      	movs	r3, #0
 8005f38:	60fb      	str	r3, [r7, #12]
 8005f3a:	687b      	ldr	r3, [r7, #4]
 8005f3c:	681b      	ldr	r3, [r3, #0]
 8005f3e:	681b      	ldr	r3, [r3, #0]
 8005f40:	60fb      	str	r3, [r7, #12]
 8005f42:	687b      	ldr	r3, [r7, #4]
 8005f44:	681b      	ldr	r3, [r3, #0]
 8005f46:	685b      	ldr	r3, [r3, #4]
 8005f48:	60fb      	str	r3, [r7, #12]
 8005f4a:	68fb      	ldr	r3, [r7, #12]
=======
 8005ffa:	687b      	ldr	r3, [r7, #4]
 8005ffc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005ffe:	2b01      	cmp	r3, #1
 8006000:	d135      	bne.n	800606e <UART_Receive_IT+0x164>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006002:	687b      	ldr	r3, [r7, #4]
 8006004:	2200      	movs	r2, #0
 8006006:	631a      	str	r2, [r3, #48]	@ 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8006008:	687b      	ldr	r3, [r7, #4]
 800600a:	681b      	ldr	r3, [r3, #0]
 800600c:	330c      	adds	r3, #12
 800600e:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006010:	697b      	ldr	r3, [r7, #20]
 8006012:	e853 3f00 	ldrex	r3, [r3]
 8006016:	613b      	str	r3, [r7, #16]
   return(result);
 8006018:	693b      	ldr	r3, [r7, #16]
 800601a:	f023 0310 	bic.w	r3, r3, #16
 800601e:	627b      	str	r3, [r7, #36]	@ 0x24
 8006020:	687b      	ldr	r3, [r7, #4]
 8006022:	681b      	ldr	r3, [r3, #0]
 8006024:	330c      	adds	r3, #12
 8006026:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8006028:	623a      	str	r2, [r7, #32]
 800602a:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800602c:	69f9      	ldr	r1, [r7, #28]
 800602e:	6a3a      	ldr	r2, [r7, #32]
 8006030:	e841 2300 	strex	r3, r2, [r1]
 8006034:	61bb      	str	r3, [r7, #24]
   return(result);
 8006036:	69bb      	ldr	r3, [r7, #24]
 8006038:	2b00      	cmp	r3, #0
 800603a:	d1e5      	bne.n	8006008 <UART_Receive_IT+0xfe>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 800603c:	687b      	ldr	r3, [r7, #4]
 800603e:	681b      	ldr	r3, [r3, #0]
 8006040:	681b      	ldr	r3, [r3, #0]
 8006042:	f003 0310 	and.w	r3, r3, #16
 8006046:	2b10      	cmp	r3, #16
 8006048:	d10a      	bne.n	8006060 <UART_Receive_IT+0x156>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 800604a:	2300      	movs	r3, #0
 800604c:	60fb      	str	r3, [r7, #12]
 800604e:	687b      	ldr	r3, [r7, #4]
 8006050:	681b      	ldr	r3, [r3, #0]
 8006052:	681b      	ldr	r3, [r3, #0]
 8006054:	60fb      	str	r3, [r7, #12]
 8006056:	687b      	ldr	r3, [r7, #4]
 8006058:	681b      	ldr	r3, [r3, #0]
 800605a:	685b      	ldr	r3, [r3, #4]
 800605c:	60fb      	str	r3, [r7, #12]
 800605e:	68fb      	ldr	r3, [r7, #12]
>>>>>>> 39e4d10438a821cc799a472af87a77c6796a1676
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
<<<<<<< HEAD
 8005f4c:	687b      	ldr	r3, [r7, #4]
 8005f4e:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 8005f50:	4619      	mov	r1, r3
 8005f52:	6878      	ldr	r0, [r7, #4]
 8005f54:	f7ff fe2a 	bl	8005bac <HAL_UARTEx_RxEventCallback>
 8005f58:	e002      	b.n	8005f60 <UART_Receive_IT+0x16a>
=======
 8006060:	687b      	ldr	r3, [r7, #4]
 8006062:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 8006064:	4619      	mov	r1, r3
 8006066:	6878      	ldr	r0, [r7, #4]
 8006068:	f7ff fe2a 	bl	8005cc0 <HAL_UARTEx_RxEventCallback>
 800606c:	e002      	b.n	8006074 <UART_Receive_IT+0x16a>
>>>>>>> 39e4d10438a821cc799a472af87a77c6796a1676
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
<<<<<<< HEAD
 8005f5a:	6878      	ldr	r0, [r7, #4]
 8005f5c:	f7fb fd54 	bl	8001a08 <HAL_UART_RxCpltCallback>
=======
 800606e:	6878      	ldr	r0, [r7, #4]
 8006070:	f7fb fd40 	bl	8001af4 <HAL_UART_RxCpltCallback>
>>>>>>> 39e4d10438a821cc799a472af87a77c6796a1676
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
<<<<<<< HEAD
 8005f60:	2300      	movs	r3, #0
 8005f62:	e002      	b.n	8005f6a <UART_Receive_IT+0x174>
    }
    return HAL_OK;
 8005f64:	2300      	movs	r3, #0
 8005f66:	e000      	b.n	8005f6a <UART_Receive_IT+0x174>
=======
 8006074:	2300      	movs	r3, #0
 8006076:	e002      	b.n	800607e <UART_Receive_IT+0x174>
    }
    return HAL_OK;
 8006078:	2300      	movs	r3, #0
 800607a:	e000      	b.n	800607e <UART_Receive_IT+0x174>
>>>>>>> 39e4d10438a821cc799a472af87a77c6796a1676
  }
  else
  {
    return HAL_BUSY;
<<<<<<< HEAD
 8005f68:	2302      	movs	r3, #2
  }
}
 8005f6a:	4618      	mov	r0, r3
 8005f6c:	3730      	adds	r7, #48	@ 0x30
 8005f6e:	46bd      	mov	sp, r7
 8005f70:	bd80      	pop	{r7, pc}
	...

08005f74 <UART_SetConfig>:
=======
 800607c:	2302      	movs	r3, #2
  }
}
 800607e:	4618      	mov	r0, r3
 8006080:	3730      	adds	r7, #48	@ 0x30
 8006082:	46bd      	mov	sp, r7
 8006084:	bd80      	pop	{r7, pc}
	...

08006088 <UART_SetConfig>:
>>>>>>> 39e4d10438a821cc799a472af87a77c6796a1676
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
<<<<<<< HEAD
 8005f74:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8005f78:	b0c0      	sub	sp, #256	@ 0x100
 8005f7a:	af00      	add	r7, sp, #0
 8005f7c:	f8c7 00f4 	str.w	r0, [r7, #244]	@ 0xf4
=======
 8006088:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800608c:	b0c0      	sub	sp, #256	@ 0x100
 800608e:	af00      	add	r7, sp, #0
 8006090:	f8c7 00f4 	str.w	r0, [r7, #244]	@ 0xf4
>>>>>>> 39e4d10438a821cc799a472af87a77c6796a1676
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
<<<<<<< HEAD
 8005f80:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005f84:	681b      	ldr	r3, [r3, #0]
 8005f86:	691b      	ldr	r3, [r3, #16]
 8005f88:	f423 5040 	bic.w	r0, r3, #12288	@ 0x3000
 8005f8c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005f90:	68d9      	ldr	r1, [r3, #12]
 8005f92:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005f96:	681a      	ldr	r2, [r3, #0]
 8005f98:	ea40 0301 	orr.w	r3, r0, r1
 8005f9c:	6113      	str	r3, [r2, #16]
=======
 8006094:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006098:	681b      	ldr	r3, [r3, #0]
 800609a:	691b      	ldr	r3, [r3, #16]
 800609c:	f423 5040 	bic.w	r0, r3, #12288	@ 0x3000
 80060a0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80060a4:	68d9      	ldr	r1, [r3, #12]
 80060a6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80060aa:	681a      	ldr	r2, [r3, #0]
 80060ac:	ea40 0301 	orr.w	r3, r0, r1
 80060b0:	6113      	str	r3, [r2, #16]
>>>>>>> 39e4d10438a821cc799a472af87a77c6796a1676
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
<<<<<<< HEAD
 8005f9e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005fa2:	689a      	ldr	r2, [r3, #8]
 8005fa4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005fa8:	691b      	ldr	r3, [r3, #16]
 8005faa:	431a      	orrs	r2, r3
 8005fac:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005fb0:	695b      	ldr	r3, [r3, #20]
 8005fb2:	431a      	orrs	r2, r3
 8005fb4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005fb8:	69db      	ldr	r3, [r3, #28]
 8005fba:	4313      	orrs	r3, r2
 8005fbc:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
  MODIFY_REG(huart->Instance->CR1,
 8005fc0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005fc4:	681b      	ldr	r3, [r3, #0]
 8005fc6:	68db      	ldr	r3, [r3, #12]
 8005fc8:	f423 4116 	bic.w	r1, r3, #38400	@ 0x9600
 8005fcc:	f021 010c 	bic.w	r1, r1, #12
 8005fd0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005fd4:	681a      	ldr	r2, [r3, #0]
 8005fd6:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 8005fda:	430b      	orrs	r3, r1
 8005fdc:	60d3      	str	r3, [r2, #12]
=======
 80060b2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80060b6:	689a      	ldr	r2, [r3, #8]
 80060b8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80060bc:	691b      	ldr	r3, [r3, #16]
 80060be:	431a      	orrs	r2, r3
 80060c0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80060c4:	695b      	ldr	r3, [r3, #20]
 80060c6:	431a      	orrs	r2, r3
 80060c8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80060cc:	69db      	ldr	r3, [r3, #28]
 80060ce:	4313      	orrs	r3, r2
 80060d0:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
  MODIFY_REG(huart->Instance->CR1,
 80060d4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80060d8:	681b      	ldr	r3, [r3, #0]
 80060da:	68db      	ldr	r3, [r3, #12]
 80060dc:	f423 4116 	bic.w	r1, r3, #38400	@ 0x9600
 80060e0:	f021 010c 	bic.w	r1, r1, #12
 80060e4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80060e8:	681a      	ldr	r2, [r3, #0]
 80060ea:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 80060ee:	430b      	orrs	r3, r1
 80060f0:	60d3      	str	r3, [r2, #12]
>>>>>>> 39e4d10438a821cc799a472af87a77c6796a1676
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
<<<<<<< HEAD
 8005fde:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005fe2:	681b      	ldr	r3, [r3, #0]
 8005fe4:	695b      	ldr	r3, [r3, #20]
 8005fe6:	f423 7040 	bic.w	r0, r3, #768	@ 0x300
 8005fea:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005fee:	6999      	ldr	r1, [r3, #24]
 8005ff0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005ff4:	681a      	ldr	r2, [r3, #0]
 8005ff6:	ea40 0301 	orr.w	r3, r0, r1
 8005ffa:	6153      	str	r3, [r2, #20]
=======
 80060f2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80060f6:	681b      	ldr	r3, [r3, #0]
 80060f8:	695b      	ldr	r3, [r3, #20]
 80060fa:	f423 7040 	bic.w	r0, r3, #768	@ 0x300
 80060fe:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006102:	6999      	ldr	r1, [r3, #24]
 8006104:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006108:	681a      	ldr	r2, [r3, #0]
 800610a:	ea40 0301 	orr.w	r3, r0, r1
 800610e:	6153      	str	r3, [r2, #20]
>>>>>>> 39e4d10438a821cc799a472af87a77c6796a1676
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
<<<<<<< HEAD
 8005ffc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006000:	681a      	ldr	r2, [r3, #0]
 8006002:	4b8f      	ldr	r3, [pc, #572]	@ (8006240 <UART_SetConfig+0x2cc>)
 8006004:	429a      	cmp	r2, r3
 8006006:	d005      	beq.n	8006014 <UART_SetConfig+0xa0>
 8006008:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800600c:	681a      	ldr	r2, [r3, #0]
 800600e:	4b8d      	ldr	r3, [pc, #564]	@ (8006244 <UART_SetConfig+0x2d0>)
 8006010:	429a      	cmp	r2, r3
 8006012:	d104      	bne.n	800601e <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8006014:	f7fd fcc4 	bl	80039a0 <HAL_RCC_GetPCLK2Freq>
 8006018:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
 800601c:	e003      	b.n	8006026 <UART_SetConfig+0xb2>
=======
 8006110:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006114:	681a      	ldr	r2, [r3, #0]
 8006116:	4b8f      	ldr	r3, [pc, #572]	@ (8006354 <UART_SetConfig+0x2cc>)
 8006118:	429a      	cmp	r2, r3
 800611a:	d005      	beq.n	8006128 <UART_SetConfig+0xa0>
 800611c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006120:	681a      	ldr	r2, [r3, #0]
 8006122:	4b8d      	ldr	r3, [pc, #564]	@ (8006358 <UART_SetConfig+0x2d0>)
 8006124:	429a      	cmp	r2, r3
 8006126:	d104      	bne.n	8006132 <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8006128:	f7fd fcc4 	bl	8003ab4 <HAL_RCC_GetPCLK2Freq>
 800612c:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
 8006130:	e003      	b.n	800613a <UART_SetConfig+0xb2>
>>>>>>> 39e4d10438a821cc799a472af87a77c6796a1676
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
<<<<<<< HEAD
 800601e:	f7fd fcab 	bl	8003978 <HAL_RCC_GetPCLK1Freq>
 8006022:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8006026:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800602a:	69db      	ldr	r3, [r3, #28]
 800602c:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8006030:	f040 810c 	bne.w	800624c <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8006034:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8006038:	2200      	movs	r2, #0
 800603a:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 800603e:	f8c7 20ec 	str.w	r2, [r7, #236]	@ 0xec
 8006042:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	@ 0xe8
 8006046:	4622      	mov	r2, r4
 8006048:	462b      	mov	r3, r5
 800604a:	1891      	adds	r1, r2, r2
 800604c:	65b9      	str	r1, [r7, #88]	@ 0x58
 800604e:	415b      	adcs	r3, r3
 8006050:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8006052:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	@ 0x58
 8006056:	4621      	mov	r1, r4
 8006058:	eb12 0801 	adds.w	r8, r2, r1
 800605c:	4629      	mov	r1, r5
 800605e:	eb43 0901 	adc.w	r9, r3, r1
 8006062:	f04f 0200 	mov.w	r2, #0
 8006066:	f04f 0300 	mov.w	r3, #0
 800606a:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 800606e:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8006072:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8006076:	4690      	mov	r8, r2
 8006078:	4699      	mov	r9, r3
 800607a:	4623      	mov	r3, r4
 800607c:	eb18 0303 	adds.w	r3, r8, r3
 8006080:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 8006084:	462b      	mov	r3, r5
 8006086:	eb49 0303 	adc.w	r3, r9, r3
 800608a:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 800608e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006092:	685b      	ldr	r3, [r3, #4]
 8006094:	2200      	movs	r2, #0
 8006096:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 800609a:	f8c7 20dc 	str.w	r2, [r7, #220]	@ 0xdc
 800609e:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	@ 0xd8
 80060a2:	460b      	mov	r3, r1
 80060a4:	18db      	adds	r3, r3, r3
 80060a6:	653b      	str	r3, [r7, #80]	@ 0x50
 80060a8:	4613      	mov	r3, r2
 80060aa:	eb42 0303 	adc.w	r3, r2, r3
 80060ae:	657b      	str	r3, [r7, #84]	@ 0x54
 80060b0:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	@ 0x50
 80060b4:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	@ 0xe0
 80060b8:	f7fa fde6 	bl	8000c88 <__aeabi_uldivmod>
 80060bc:	4602      	mov	r2, r0
 80060be:	460b      	mov	r3, r1
 80060c0:	4b61      	ldr	r3, [pc, #388]	@ (8006248 <UART_SetConfig+0x2d4>)
 80060c2:	fba3 2302 	umull	r2, r3, r3, r2
 80060c6:	095b      	lsrs	r3, r3, #5
 80060c8:	011c      	lsls	r4, r3, #4
 80060ca:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80060ce:	2200      	movs	r2, #0
 80060d0:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 80060d4:	f8c7 20d4 	str.w	r2, [r7, #212]	@ 0xd4
 80060d8:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	@ 0xd0
 80060dc:	4642      	mov	r2, r8
 80060de:	464b      	mov	r3, r9
 80060e0:	1891      	adds	r1, r2, r2
 80060e2:	64b9      	str	r1, [r7, #72]	@ 0x48
 80060e4:	415b      	adcs	r3, r3
 80060e6:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80060e8:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	@ 0x48
 80060ec:	4641      	mov	r1, r8
 80060ee:	eb12 0a01 	adds.w	sl, r2, r1
 80060f2:	4649      	mov	r1, r9
 80060f4:	eb43 0b01 	adc.w	fp, r3, r1
 80060f8:	f04f 0200 	mov.w	r2, #0
 80060fc:	f04f 0300 	mov.w	r3, #0
 8006100:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8006104:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8006108:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 800610c:	4692      	mov	sl, r2
 800610e:	469b      	mov	fp, r3
 8006110:	4643      	mov	r3, r8
 8006112:	eb1a 0303 	adds.w	r3, sl, r3
 8006116:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 800611a:	464b      	mov	r3, r9
 800611c:	eb4b 0303 	adc.w	r3, fp, r3
 8006120:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 8006124:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006128:	685b      	ldr	r3, [r3, #4]
 800612a:	2200      	movs	r2, #0
 800612c:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8006130:	f8c7 20c4 	str.w	r2, [r7, #196]	@ 0xc4
 8006134:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	@ 0xc0
 8006138:	460b      	mov	r3, r1
 800613a:	18db      	adds	r3, r3, r3
 800613c:	643b      	str	r3, [r7, #64]	@ 0x40
 800613e:	4613      	mov	r3, r2
 8006140:	eb42 0303 	adc.w	r3, r2, r3
 8006144:	647b      	str	r3, [r7, #68]	@ 0x44
 8006146:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	@ 0x40
 800614a:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	@ 0xc8
 800614e:	f7fa fd9b 	bl	8000c88 <__aeabi_uldivmod>
 8006152:	4602      	mov	r2, r0
 8006154:	460b      	mov	r3, r1
 8006156:	4611      	mov	r1, r2
 8006158:	4b3b      	ldr	r3, [pc, #236]	@ (8006248 <UART_SetConfig+0x2d4>)
 800615a:	fba3 2301 	umull	r2, r3, r3, r1
 800615e:	095b      	lsrs	r3, r3, #5
 8006160:	2264      	movs	r2, #100	@ 0x64
 8006162:	fb02 f303 	mul.w	r3, r2, r3
 8006166:	1acb      	subs	r3, r1, r3
 8006168:	00db      	lsls	r3, r3, #3
 800616a:	f103 0232 	add.w	r2, r3, #50	@ 0x32
 800616e:	4b36      	ldr	r3, [pc, #216]	@ (8006248 <UART_SetConfig+0x2d4>)
 8006170:	fba3 2302 	umull	r2, r3, r3, r2
 8006174:	095b      	lsrs	r3, r3, #5
 8006176:	005b      	lsls	r3, r3, #1
 8006178:	f403 73f8 	and.w	r3, r3, #496	@ 0x1f0
 800617c:	441c      	add	r4, r3
 800617e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8006182:	2200      	movs	r2, #0
 8006184:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8006188:	f8c7 20bc 	str.w	r2, [r7, #188]	@ 0xbc
 800618c:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	@ 0xb8
 8006190:	4642      	mov	r2, r8
 8006192:	464b      	mov	r3, r9
 8006194:	1891      	adds	r1, r2, r2
 8006196:	63b9      	str	r1, [r7, #56]	@ 0x38
 8006198:	415b      	adcs	r3, r3
 800619a:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800619c:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	@ 0x38
 80061a0:	4641      	mov	r1, r8
 80061a2:	1851      	adds	r1, r2, r1
 80061a4:	6339      	str	r1, [r7, #48]	@ 0x30
 80061a6:	4649      	mov	r1, r9
 80061a8:	414b      	adcs	r3, r1
 80061aa:	637b      	str	r3, [r7, #52]	@ 0x34
 80061ac:	f04f 0200 	mov.w	r2, #0
 80061b0:	f04f 0300 	mov.w	r3, #0
 80061b4:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	@ 0x30
 80061b8:	4659      	mov	r1, fp
 80061ba:	00cb      	lsls	r3, r1, #3
 80061bc:	4651      	mov	r1, sl
 80061be:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80061c2:	4651      	mov	r1, sl
 80061c4:	00ca      	lsls	r2, r1, #3
 80061c6:	4610      	mov	r0, r2
 80061c8:	4619      	mov	r1, r3
 80061ca:	4603      	mov	r3, r0
 80061cc:	4642      	mov	r2, r8
 80061ce:	189b      	adds	r3, r3, r2
 80061d0:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 80061d4:	464b      	mov	r3, r9
 80061d6:	460a      	mov	r2, r1
 80061d8:	eb42 0303 	adc.w	r3, r2, r3
 80061dc:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 80061e0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80061e4:	685b      	ldr	r3, [r3, #4]
 80061e6:	2200      	movs	r2, #0
 80061e8:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 80061ec:	f8c7 20ac 	str.w	r2, [r7, #172]	@ 0xac
 80061f0:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	@ 0xa8
 80061f4:	460b      	mov	r3, r1
 80061f6:	18db      	adds	r3, r3, r3
 80061f8:	62bb      	str	r3, [r7, #40]	@ 0x28
 80061fa:	4613      	mov	r3, r2
 80061fc:	eb42 0303 	adc.w	r3, r2, r3
 8006200:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8006202:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 8006206:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	@ 0xb0
 800620a:	f7fa fd3d 	bl	8000c88 <__aeabi_uldivmod>
 800620e:	4602      	mov	r2, r0
 8006210:	460b      	mov	r3, r1
 8006212:	4b0d      	ldr	r3, [pc, #52]	@ (8006248 <UART_SetConfig+0x2d4>)
 8006214:	fba3 1302 	umull	r1, r3, r3, r2
 8006218:	095b      	lsrs	r3, r3, #5
 800621a:	2164      	movs	r1, #100	@ 0x64
 800621c:	fb01 f303 	mul.w	r3, r1, r3
 8006220:	1ad3      	subs	r3, r2, r3
 8006222:	00db      	lsls	r3, r3, #3
 8006224:	3332      	adds	r3, #50	@ 0x32
 8006226:	4a08      	ldr	r2, [pc, #32]	@ (8006248 <UART_SetConfig+0x2d4>)
 8006228:	fba2 2303 	umull	r2, r3, r2, r3
 800622c:	095b      	lsrs	r3, r3, #5
 800622e:	f003 0207 	and.w	r2, r3, #7
 8006232:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006236:	681b      	ldr	r3, [r3, #0]
 8006238:	4422      	add	r2, r4
 800623a:	609a      	str	r2, [r3, #8]
=======
 8006132:	f7fd fcab 	bl	8003a8c <HAL_RCC_GetPCLK1Freq>
 8006136:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800613a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800613e:	69db      	ldr	r3, [r3, #28]
 8006140:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8006144:	f040 810c 	bne.w	8006360 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8006148:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800614c:	2200      	movs	r2, #0
 800614e:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 8006152:	f8c7 20ec 	str.w	r2, [r7, #236]	@ 0xec
 8006156:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	@ 0xe8
 800615a:	4622      	mov	r2, r4
 800615c:	462b      	mov	r3, r5
 800615e:	1891      	adds	r1, r2, r2
 8006160:	65b9      	str	r1, [r7, #88]	@ 0x58
 8006162:	415b      	adcs	r3, r3
 8006164:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8006166:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	@ 0x58
 800616a:	4621      	mov	r1, r4
 800616c:	eb12 0801 	adds.w	r8, r2, r1
 8006170:	4629      	mov	r1, r5
 8006172:	eb43 0901 	adc.w	r9, r3, r1
 8006176:	f04f 0200 	mov.w	r2, #0
 800617a:	f04f 0300 	mov.w	r3, #0
 800617e:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8006182:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8006186:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 800618a:	4690      	mov	r8, r2
 800618c:	4699      	mov	r9, r3
 800618e:	4623      	mov	r3, r4
 8006190:	eb18 0303 	adds.w	r3, r8, r3
 8006194:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 8006198:	462b      	mov	r3, r5
 800619a:	eb49 0303 	adc.w	r3, r9, r3
 800619e:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 80061a2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80061a6:	685b      	ldr	r3, [r3, #4]
 80061a8:	2200      	movs	r2, #0
 80061aa:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 80061ae:	f8c7 20dc 	str.w	r2, [r7, #220]	@ 0xdc
 80061b2:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	@ 0xd8
 80061b6:	460b      	mov	r3, r1
 80061b8:	18db      	adds	r3, r3, r3
 80061ba:	653b      	str	r3, [r7, #80]	@ 0x50
 80061bc:	4613      	mov	r3, r2
 80061be:	eb42 0303 	adc.w	r3, r2, r3
 80061c2:	657b      	str	r3, [r7, #84]	@ 0x54
 80061c4:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	@ 0x50
 80061c8:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	@ 0xe0
 80061cc:	f7fa fd5c 	bl	8000c88 <__aeabi_uldivmod>
 80061d0:	4602      	mov	r2, r0
 80061d2:	460b      	mov	r3, r1
 80061d4:	4b61      	ldr	r3, [pc, #388]	@ (800635c <UART_SetConfig+0x2d4>)
 80061d6:	fba3 2302 	umull	r2, r3, r3, r2
 80061da:	095b      	lsrs	r3, r3, #5
 80061dc:	011c      	lsls	r4, r3, #4
 80061de:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80061e2:	2200      	movs	r2, #0
 80061e4:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 80061e8:	f8c7 20d4 	str.w	r2, [r7, #212]	@ 0xd4
 80061ec:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	@ 0xd0
 80061f0:	4642      	mov	r2, r8
 80061f2:	464b      	mov	r3, r9
 80061f4:	1891      	adds	r1, r2, r2
 80061f6:	64b9      	str	r1, [r7, #72]	@ 0x48
 80061f8:	415b      	adcs	r3, r3
 80061fa:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80061fc:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	@ 0x48
 8006200:	4641      	mov	r1, r8
 8006202:	eb12 0a01 	adds.w	sl, r2, r1
 8006206:	4649      	mov	r1, r9
 8006208:	eb43 0b01 	adc.w	fp, r3, r1
 800620c:	f04f 0200 	mov.w	r2, #0
 8006210:	f04f 0300 	mov.w	r3, #0
 8006214:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8006218:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 800621c:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8006220:	4692      	mov	sl, r2
 8006222:	469b      	mov	fp, r3
 8006224:	4643      	mov	r3, r8
 8006226:	eb1a 0303 	adds.w	r3, sl, r3
 800622a:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 800622e:	464b      	mov	r3, r9
 8006230:	eb4b 0303 	adc.w	r3, fp, r3
 8006234:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 8006238:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800623c:	685b      	ldr	r3, [r3, #4]
 800623e:	2200      	movs	r2, #0
 8006240:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8006244:	f8c7 20c4 	str.w	r2, [r7, #196]	@ 0xc4
 8006248:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	@ 0xc0
 800624c:	460b      	mov	r3, r1
 800624e:	18db      	adds	r3, r3, r3
 8006250:	643b      	str	r3, [r7, #64]	@ 0x40
 8006252:	4613      	mov	r3, r2
 8006254:	eb42 0303 	adc.w	r3, r2, r3
 8006258:	647b      	str	r3, [r7, #68]	@ 0x44
 800625a:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	@ 0x40
 800625e:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	@ 0xc8
 8006262:	f7fa fd11 	bl	8000c88 <__aeabi_uldivmod>
 8006266:	4602      	mov	r2, r0
 8006268:	460b      	mov	r3, r1
 800626a:	4611      	mov	r1, r2
 800626c:	4b3b      	ldr	r3, [pc, #236]	@ (800635c <UART_SetConfig+0x2d4>)
 800626e:	fba3 2301 	umull	r2, r3, r3, r1
 8006272:	095b      	lsrs	r3, r3, #5
 8006274:	2264      	movs	r2, #100	@ 0x64
 8006276:	fb02 f303 	mul.w	r3, r2, r3
 800627a:	1acb      	subs	r3, r1, r3
 800627c:	00db      	lsls	r3, r3, #3
 800627e:	f103 0232 	add.w	r2, r3, #50	@ 0x32
 8006282:	4b36      	ldr	r3, [pc, #216]	@ (800635c <UART_SetConfig+0x2d4>)
 8006284:	fba3 2302 	umull	r2, r3, r3, r2
 8006288:	095b      	lsrs	r3, r3, #5
 800628a:	005b      	lsls	r3, r3, #1
 800628c:	f403 73f8 	and.w	r3, r3, #496	@ 0x1f0
 8006290:	441c      	add	r4, r3
 8006292:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8006296:	2200      	movs	r2, #0
 8006298:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 800629c:	f8c7 20bc 	str.w	r2, [r7, #188]	@ 0xbc
 80062a0:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	@ 0xb8
 80062a4:	4642      	mov	r2, r8
 80062a6:	464b      	mov	r3, r9
 80062a8:	1891      	adds	r1, r2, r2
 80062aa:	63b9      	str	r1, [r7, #56]	@ 0x38
 80062ac:	415b      	adcs	r3, r3
 80062ae:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80062b0:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	@ 0x38
 80062b4:	4641      	mov	r1, r8
 80062b6:	1851      	adds	r1, r2, r1
 80062b8:	6339      	str	r1, [r7, #48]	@ 0x30
 80062ba:	4649      	mov	r1, r9
 80062bc:	414b      	adcs	r3, r1
 80062be:	637b      	str	r3, [r7, #52]	@ 0x34
 80062c0:	f04f 0200 	mov.w	r2, #0
 80062c4:	f04f 0300 	mov.w	r3, #0
 80062c8:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	@ 0x30
 80062cc:	4659      	mov	r1, fp
 80062ce:	00cb      	lsls	r3, r1, #3
 80062d0:	4651      	mov	r1, sl
 80062d2:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80062d6:	4651      	mov	r1, sl
 80062d8:	00ca      	lsls	r2, r1, #3
 80062da:	4610      	mov	r0, r2
 80062dc:	4619      	mov	r1, r3
 80062de:	4603      	mov	r3, r0
 80062e0:	4642      	mov	r2, r8
 80062e2:	189b      	adds	r3, r3, r2
 80062e4:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 80062e8:	464b      	mov	r3, r9
 80062ea:	460a      	mov	r2, r1
 80062ec:	eb42 0303 	adc.w	r3, r2, r3
 80062f0:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 80062f4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80062f8:	685b      	ldr	r3, [r3, #4]
 80062fa:	2200      	movs	r2, #0
 80062fc:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 8006300:	f8c7 20ac 	str.w	r2, [r7, #172]	@ 0xac
 8006304:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	@ 0xa8
 8006308:	460b      	mov	r3, r1
 800630a:	18db      	adds	r3, r3, r3
 800630c:	62bb      	str	r3, [r7, #40]	@ 0x28
 800630e:	4613      	mov	r3, r2
 8006310:	eb42 0303 	adc.w	r3, r2, r3
 8006314:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8006316:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 800631a:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	@ 0xb0
 800631e:	f7fa fcb3 	bl	8000c88 <__aeabi_uldivmod>
 8006322:	4602      	mov	r2, r0
 8006324:	460b      	mov	r3, r1
 8006326:	4b0d      	ldr	r3, [pc, #52]	@ (800635c <UART_SetConfig+0x2d4>)
 8006328:	fba3 1302 	umull	r1, r3, r3, r2
 800632c:	095b      	lsrs	r3, r3, #5
 800632e:	2164      	movs	r1, #100	@ 0x64
 8006330:	fb01 f303 	mul.w	r3, r1, r3
 8006334:	1ad3      	subs	r3, r2, r3
 8006336:	00db      	lsls	r3, r3, #3
 8006338:	3332      	adds	r3, #50	@ 0x32
 800633a:	4a08      	ldr	r2, [pc, #32]	@ (800635c <UART_SetConfig+0x2d4>)
 800633c:	fba2 2303 	umull	r2, r3, r2, r3
 8006340:	095b      	lsrs	r3, r3, #5
 8006342:	f003 0207 	and.w	r2, r3, #7
 8006346:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800634a:	681b      	ldr	r3, [r3, #0]
 800634c:	4422      	add	r2, r4
 800634e:	609a      	str	r2, [r3, #8]
>>>>>>> 39e4d10438a821cc799a472af87a77c6796a1676
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
<<<<<<< HEAD
 800623c:	e106      	b.n	800644c <UART_SetConfig+0x4d8>
 800623e:	bf00      	nop
 8006240:	40011000 	.word	0x40011000
 8006244:	40011400 	.word	0x40011400
 8006248:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 800624c:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8006250:	2200      	movs	r2, #0
 8006252:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 8006256:	f8c7 20a4 	str.w	r2, [r7, #164]	@ 0xa4
 800625a:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	@ 0xa0
 800625e:	4642      	mov	r2, r8
 8006260:	464b      	mov	r3, r9
 8006262:	1891      	adds	r1, r2, r2
 8006264:	6239      	str	r1, [r7, #32]
 8006266:	415b      	adcs	r3, r3
 8006268:	627b      	str	r3, [r7, #36]	@ 0x24
 800626a:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 800626e:	4641      	mov	r1, r8
 8006270:	1854      	adds	r4, r2, r1
 8006272:	4649      	mov	r1, r9
 8006274:	eb43 0501 	adc.w	r5, r3, r1
 8006278:	f04f 0200 	mov.w	r2, #0
 800627c:	f04f 0300 	mov.w	r3, #0
 8006280:	00eb      	lsls	r3, r5, #3
 8006282:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8006286:	00e2      	lsls	r2, r4, #3
 8006288:	4614      	mov	r4, r2
 800628a:	461d      	mov	r5, r3
 800628c:	4643      	mov	r3, r8
 800628e:	18e3      	adds	r3, r4, r3
 8006290:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 8006294:	464b      	mov	r3, r9
 8006296:	eb45 0303 	adc.w	r3, r5, r3
 800629a:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 800629e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80062a2:	685b      	ldr	r3, [r3, #4]
 80062a4:	2200      	movs	r2, #0
 80062a6:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 80062aa:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 80062ae:	f04f 0200 	mov.w	r2, #0
 80062b2:	f04f 0300 	mov.w	r3, #0
 80062b6:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	@ 0x90
 80062ba:	4629      	mov	r1, r5
 80062bc:	008b      	lsls	r3, r1, #2
 80062be:	4621      	mov	r1, r4
 80062c0:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80062c4:	4621      	mov	r1, r4
 80062c6:	008a      	lsls	r2, r1, #2
 80062c8:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	@ 0x98
 80062cc:	f7fa fcdc 	bl	8000c88 <__aeabi_uldivmod>
 80062d0:	4602      	mov	r2, r0
 80062d2:	460b      	mov	r3, r1
 80062d4:	4b60      	ldr	r3, [pc, #384]	@ (8006458 <UART_SetConfig+0x4e4>)
 80062d6:	fba3 2302 	umull	r2, r3, r3, r2
 80062da:	095b      	lsrs	r3, r3, #5
 80062dc:	011c      	lsls	r4, r3, #4
 80062de:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80062e2:	2200      	movs	r2, #0
 80062e4:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 80062e8:	f8c7 208c 	str.w	r2, [r7, #140]	@ 0x8c
 80062ec:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	@ 0x88
 80062f0:	4642      	mov	r2, r8
 80062f2:	464b      	mov	r3, r9
 80062f4:	1891      	adds	r1, r2, r2
 80062f6:	61b9      	str	r1, [r7, #24]
 80062f8:	415b      	adcs	r3, r3
 80062fa:	61fb      	str	r3, [r7, #28]
 80062fc:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8006300:	4641      	mov	r1, r8
 8006302:	1851      	adds	r1, r2, r1
 8006304:	6139      	str	r1, [r7, #16]
 8006306:	4649      	mov	r1, r9
 8006308:	414b      	adcs	r3, r1
 800630a:	617b      	str	r3, [r7, #20]
 800630c:	f04f 0200 	mov.w	r2, #0
 8006310:	f04f 0300 	mov.w	r3, #0
 8006314:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8006318:	4659      	mov	r1, fp
 800631a:	00cb      	lsls	r3, r1, #3
 800631c:	4651      	mov	r1, sl
 800631e:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8006322:	4651      	mov	r1, sl
 8006324:	00ca      	lsls	r2, r1, #3
 8006326:	4610      	mov	r0, r2
 8006328:	4619      	mov	r1, r3
 800632a:	4603      	mov	r3, r0
 800632c:	4642      	mov	r2, r8
 800632e:	189b      	adds	r3, r3, r2
 8006330:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8006334:	464b      	mov	r3, r9
 8006336:	460a      	mov	r2, r1
 8006338:	eb42 0303 	adc.w	r3, r2, r3
 800633c:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 8006340:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006344:	685b      	ldr	r3, [r3, #4]
 8006346:	2200      	movs	r2, #0
 8006348:	67bb      	str	r3, [r7, #120]	@ 0x78
 800634a:	67fa      	str	r2, [r7, #124]	@ 0x7c
 800634c:	f04f 0200 	mov.w	r2, #0
 8006350:	f04f 0300 	mov.w	r3, #0
 8006354:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	@ 0x78
 8006358:	4649      	mov	r1, r9
 800635a:	008b      	lsls	r3, r1, #2
 800635c:	4641      	mov	r1, r8
 800635e:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8006362:	4641      	mov	r1, r8
 8006364:	008a      	lsls	r2, r1, #2
 8006366:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	@ 0x80
 800636a:	f7fa fc8d 	bl	8000c88 <__aeabi_uldivmod>
 800636e:	4602      	mov	r2, r0
 8006370:	460b      	mov	r3, r1
 8006372:	4611      	mov	r1, r2
 8006374:	4b38      	ldr	r3, [pc, #224]	@ (8006458 <UART_SetConfig+0x4e4>)
 8006376:	fba3 2301 	umull	r2, r3, r3, r1
 800637a:	095b      	lsrs	r3, r3, #5
 800637c:	2264      	movs	r2, #100	@ 0x64
 800637e:	fb02 f303 	mul.w	r3, r2, r3
 8006382:	1acb      	subs	r3, r1, r3
 8006384:	011b      	lsls	r3, r3, #4
 8006386:	3332      	adds	r3, #50	@ 0x32
 8006388:	4a33      	ldr	r2, [pc, #204]	@ (8006458 <UART_SetConfig+0x4e4>)
 800638a:	fba2 2303 	umull	r2, r3, r2, r3
 800638e:	095b      	lsrs	r3, r3, #5
 8006390:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8006394:	441c      	add	r4, r3
 8006396:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800639a:	2200      	movs	r2, #0
 800639c:	673b      	str	r3, [r7, #112]	@ 0x70
 800639e:	677a      	str	r2, [r7, #116]	@ 0x74
 80063a0:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	@ 0x70
 80063a4:	4642      	mov	r2, r8
 80063a6:	464b      	mov	r3, r9
 80063a8:	1891      	adds	r1, r2, r2
 80063aa:	60b9      	str	r1, [r7, #8]
 80063ac:	415b      	adcs	r3, r3
 80063ae:	60fb      	str	r3, [r7, #12]
 80063b0:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 80063b4:	4641      	mov	r1, r8
 80063b6:	1851      	adds	r1, r2, r1
 80063b8:	6039      	str	r1, [r7, #0]
 80063ba:	4649      	mov	r1, r9
 80063bc:	414b      	adcs	r3, r1
 80063be:	607b      	str	r3, [r7, #4]
 80063c0:	f04f 0200 	mov.w	r2, #0
 80063c4:	f04f 0300 	mov.w	r3, #0
 80063c8:	e9d7 ab00 	ldrd	sl, fp, [r7]
 80063cc:	4659      	mov	r1, fp
 80063ce:	00cb      	lsls	r3, r1, #3
 80063d0:	4651      	mov	r1, sl
 80063d2:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80063d6:	4651      	mov	r1, sl
 80063d8:	00ca      	lsls	r2, r1, #3
 80063da:	4610      	mov	r0, r2
 80063dc:	4619      	mov	r1, r3
 80063de:	4603      	mov	r3, r0
 80063e0:	4642      	mov	r2, r8
 80063e2:	189b      	adds	r3, r3, r2
 80063e4:	66bb      	str	r3, [r7, #104]	@ 0x68
 80063e6:	464b      	mov	r3, r9
 80063e8:	460a      	mov	r2, r1
 80063ea:	eb42 0303 	adc.w	r3, r2, r3
 80063ee:	66fb      	str	r3, [r7, #108]	@ 0x6c
 80063f0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80063f4:	685b      	ldr	r3, [r3, #4]
 80063f6:	2200      	movs	r2, #0
 80063f8:	663b      	str	r3, [r7, #96]	@ 0x60
 80063fa:	667a      	str	r2, [r7, #100]	@ 0x64
 80063fc:	f04f 0200 	mov.w	r2, #0
 8006400:	f04f 0300 	mov.w	r3, #0
 8006404:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	@ 0x60
 8006408:	4649      	mov	r1, r9
 800640a:	008b      	lsls	r3, r1, #2
 800640c:	4641      	mov	r1, r8
 800640e:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8006412:	4641      	mov	r1, r8
 8006414:	008a      	lsls	r2, r1, #2
 8006416:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	@ 0x68
 800641a:	f7fa fc35 	bl	8000c88 <__aeabi_uldivmod>
 800641e:	4602      	mov	r2, r0
 8006420:	460b      	mov	r3, r1
 8006422:	4b0d      	ldr	r3, [pc, #52]	@ (8006458 <UART_SetConfig+0x4e4>)
 8006424:	fba3 1302 	umull	r1, r3, r3, r2
 8006428:	095b      	lsrs	r3, r3, #5
 800642a:	2164      	movs	r1, #100	@ 0x64
 800642c:	fb01 f303 	mul.w	r3, r1, r3
 8006430:	1ad3      	subs	r3, r2, r3
 8006432:	011b      	lsls	r3, r3, #4
 8006434:	3332      	adds	r3, #50	@ 0x32
 8006436:	4a08      	ldr	r2, [pc, #32]	@ (8006458 <UART_SetConfig+0x4e4>)
 8006438:	fba2 2303 	umull	r2, r3, r2, r3
 800643c:	095b      	lsrs	r3, r3, #5
 800643e:	f003 020f 	and.w	r2, r3, #15
 8006442:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006446:	681b      	ldr	r3, [r3, #0]
 8006448:	4422      	add	r2, r4
 800644a:	609a      	str	r2, [r3, #8]
}
 800644c:	bf00      	nop
 800644e:	f507 7780 	add.w	r7, r7, #256	@ 0x100
 8006452:	46bd      	mov	sp, r7
 8006454:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8006458:	51eb851f 	.word	0x51eb851f

0800645c <__cvt>:
 800645c:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8006460:	ec57 6b10 	vmov	r6, r7, d0
 8006464:	2f00      	cmp	r7, #0
 8006466:	460c      	mov	r4, r1
 8006468:	4619      	mov	r1, r3
 800646a:	463b      	mov	r3, r7
 800646c:	bfbb      	ittet	lt
 800646e:	f107 4300 	addlt.w	r3, r7, #2147483648	@ 0x80000000
 8006472:	461f      	movlt	r7, r3
 8006474:	2300      	movge	r3, #0
 8006476:	232d      	movlt	r3, #45	@ 0x2d
 8006478:	700b      	strb	r3, [r1, #0]
 800647a:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 800647c:	f8dd a030 	ldr.w	sl, [sp, #48]	@ 0x30
 8006480:	4691      	mov	r9, r2
 8006482:	f023 0820 	bic.w	r8, r3, #32
 8006486:	bfbc      	itt	lt
 8006488:	4632      	movlt	r2, r6
 800648a:	4616      	movlt	r6, r2
 800648c:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 8006490:	d005      	beq.n	800649e <__cvt+0x42>
 8006492:	f1b8 0f45 	cmp.w	r8, #69	@ 0x45
 8006496:	d100      	bne.n	800649a <__cvt+0x3e>
 8006498:	3401      	adds	r4, #1
 800649a:	2102      	movs	r1, #2
 800649c:	e000      	b.n	80064a0 <__cvt+0x44>
 800649e:	2103      	movs	r1, #3
 80064a0:	ab03      	add	r3, sp, #12
 80064a2:	9301      	str	r3, [sp, #4]
 80064a4:	ab02      	add	r3, sp, #8
 80064a6:	9300      	str	r3, [sp, #0]
 80064a8:	ec47 6b10 	vmov	d0, r6, r7
 80064ac:	4653      	mov	r3, sl
 80064ae:	4622      	mov	r2, r4
 80064b0:	f000 fe82 	bl	80071b8 <_dtoa_r>
 80064b4:	f1b8 0f47 	cmp.w	r8, #71	@ 0x47
 80064b8:	4605      	mov	r5, r0
 80064ba:	d119      	bne.n	80064f0 <__cvt+0x94>
 80064bc:	f019 0f01 	tst.w	r9, #1
 80064c0:	d00e      	beq.n	80064e0 <__cvt+0x84>
 80064c2:	eb00 0904 	add.w	r9, r0, r4
 80064c6:	2200      	movs	r2, #0
 80064c8:	2300      	movs	r3, #0
 80064ca:	4630      	mov	r0, r6
 80064cc:	4639      	mov	r1, r7
 80064ce:	f7fa fb1b 	bl	8000b08 <__aeabi_dcmpeq>
 80064d2:	b108      	cbz	r0, 80064d8 <__cvt+0x7c>
 80064d4:	f8cd 900c 	str.w	r9, [sp, #12]
 80064d8:	2230      	movs	r2, #48	@ 0x30
 80064da:	9b03      	ldr	r3, [sp, #12]
 80064dc:	454b      	cmp	r3, r9
 80064de:	d31e      	bcc.n	800651e <__cvt+0xc2>
 80064e0:	9b03      	ldr	r3, [sp, #12]
 80064e2:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 80064e4:	1b5b      	subs	r3, r3, r5
 80064e6:	4628      	mov	r0, r5
 80064e8:	6013      	str	r3, [r2, #0]
 80064ea:	b004      	add	sp, #16
 80064ec:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80064f0:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 80064f4:	eb00 0904 	add.w	r9, r0, r4
 80064f8:	d1e5      	bne.n	80064c6 <__cvt+0x6a>
 80064fa:	7803      	ldrb	r3, [r0, #0]
 80064fc:	2b30      	cmp	r3, #48	@ 0x30
 80064fe:	d10a      	bne.n	8006516 <__cvt+0xba>
 8006500:	2200      	movs	r2, #0
 8006502:	2300      	movs	r3, #0
 8006504:	4630      	mov	r0, r6
 8006506:	4639      	mov	r1, r7
 8006508:	f7fa fafe 	bl	8000b08 <__aeabi_dcmpeq>
 800650c:	b918      	cbnz	r0, 8006516 <__cvt+0xba>
 800650e:	f1c4 0401 	rsb	r4, r4, #1
 8006512:	f8ca 4000 	str.w	r4, [sl]
 8006516:	f8da 3000 	ldr.w	r3, [sl]
 800651a:	4499      	add	r9, r3
 800651c:	e7d3      	b.n	80064c6 <__cvt+0x6a>
 800651e:	1c59      	adds	r1, r3, #1
 8006520:	9103      	str	r1, [sp, #12]
 8006522:	701a      	strb	r2, [r3, #0]
 8006524:	e7d9      	b.n	80064da <__cvt+0x7e>

08006526 <__exponent>:
 8006526:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8006528:	2900      	cmp	r1, #0
 800652a:	bfba      	itte	lt
 800652c:	4249      	neglt	r1, r1
 800652e:	232d      	movlt	r3, #45	@ 0x2d
 8006530:	232b      	movge	r3, #43	@ 0x2b
 8006532:	2909      	cmp	r1, #9
 8006534:	7002      	strb	r2, [r0, #0]
 8006536:	7043      	strb	r3, [r0, #1]
 8006538:	dd29      	ble.n	800658e <__exponent+0x68>
 800653a:	f10d 0307 	add.w	r3, sp, #7
 800653e:	461d      	mov	r5, r3
 8006540:	270a      	movs	r7, #10
 8006542:	461a      	mov	r2, r3
 8006544:	fbb1 f6f7 	udiv	r6, r1, r7
 8006548:	fb07 1416 	mls	r4, r7, r6, r1
 800654c:	3430      	adds	r4, #48	@ 0x30
 800654e:	f802 4c01 	strb.w	r4, [r2, #-1]
 8006552:	460c      	mov	r4, r1
 8006554:	2c63      	cmp	r4, #99	@ 0x63
 8006556:	f103 33ff 	add.w	r3, r3, #4294967295
 800655a:	4631      	mov	r1, r6
 800655c:	dcf1      	bgt.n	8006542 <__exponent+0x1c>
 800655e:	3130      	adds	r1, #48	@ 0x30
 8006560:	1e94      	subs	r4, r2, #2
 8006562:	f803 1c01 	strb.w	r1, [r3, #-1]
 8006566:	1c41      	adds	r1, r0, #1
 8006568:	4623      	mov	r3, r4
 800656a:	42ab      	cmp	r3, r5
 800656c:	d30a      	bcc.n	8006584 <__exponent+0x5e>
 800656e:	f10d 0309 	add.w	r3, sp, #9
 8006572:	1a9b      	subs	r3, r3, r2
 8006574:	42ac      	cmp	r4, r5
 8006576:	bf88      	it	hi
 8006578:	2300      	movhi	r3, #0
 800657a:	3302      	adds	r3, #2
 800657c:	4403      	add	r3, r0
 800657e:	1a18      	subs	r0, r3, r0
 8006580:	b003      	add	sp, #12
 8006582:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8006584:	f813 6b01 	ldrb.w	r6, [r3], #1
 8006588:	f801 6f01 	strb.w	r6, [r1, #1]!
 800658c:	e7ed      	b.n	800656a <__exponent+0x44>
 800658e:	2330      	movs	r3, #48	@ 0x30
 8006590:	3130      	adds	r1, #48	@ 0x30
 8006592:	7083      	strb	r3, [r0, #2]
 8006594:	70c1      	strb	r1, [r0, #3]
 8006596:	1d03      	adds	r3, r0, #4
 8006598:	e7f1      	b.n	800657e <__exponent+0x58>
	...

0800659c <_printf_float>:
 800659c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80065a0:	b08d      	sub	sp, #52	@ 0x34
 80065a2:	460c      	mov	r4, r1
 80065a4:	f8dd 8058 	ldr.w	r8, [sp, #88]	@ 0x58
 80065a8:	4616      	mov	r6, r2
 80065aa:	461f      	mov	r7, r3
 80065ac:	4605      	mov	r5, r0
 80065ae:	f000 fd01 	bl	8006fb4 <_localeconv_r>
 80065b2:	6803      	ldr	r3, [r0, #0]
 80065b4:	9304      	str	r3, [sp, #16]
 80065b6:	4618      	mov	r0, r3
 80065b8:	f7f9 fe7a 	bl	80002b0 <strlen>
 80065bc:	2300      	movs	r3, #0
 80065be:	930a      	str	r3, [sp, #40]	@ 0x28
 80065c0:	f8d8 3000 	ldr.w	r3, [r8]
 80065c4:	9005      	str	r0, [sp, #20]
 80065c6:	3307      	adds	r3, #7
 80065c8:	f023 0307 	bic.w	r3, r3, #7
 80065cc:	f103 0208 	add.w	r2, r3, #8
 80065d0:	f894 a018 	ldrb.w	sl, [r4, #24]
 80065d4:	f8d4 b000 	ldr.w	fp, [r4]
 80065d8:	f8c8 2000 	str.w	r2, [r8]
 80065dc:	e9d3 8900 	ldrd	r8, r9, [r3]
 80065e0:	f029 4300 	bic.w	r3, r9, #2147483648	@ 0x80000000
 80065e4:	9307      	str	r3, [sp, #28]
 80065e6:	f8cd 8018 	str.w	r8, [sp, #24]
 80065ea:	e9c4 8912 	strd	r8, r9, [r4, #72]	@ 0x48
 80065ee:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 80065f2:	4b9c      	ldr	r3, [pc, #624]	@ (8006864 <_printf_float+0x2c8>)
 80065f4:	f04f 32ff 	mov.w	r2, #4294967295
 80065f8:	f7fa fab8 	bl	8000b6c <__aeabi_dcmpun>
 80065fc:	bb70      	cbnz	r0, 800665c <_printf_float+0xc0>
 80065fe:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8006602:	4b98      	ldr	r3, [pc, #608]	@ (8006864 <_printf_float+0x2c8>)
 8006604:	f04f 32ff 	mov.w	r2, #4294967295
 8006608:	f7fa fa92 	bl	8000b30 <__aeabi_dcmple>
 800660c:	bb30      	cbnz	r0, 800665c <_printf_float+0xc0>
 800660e:	2200      	movs	r2, #0
 8006610:	2300      	movs	r3, #0
 8006612:	4640      	mov	r0, r8
 8006614:	4649      	mov	r1, r9
 8006616:	f7fa fa81 	bl	8000b1c <__aeabi_dcmplt>
 800661a:	b110      	cbz	r0, 8006622 <_printf_float+0x86>
 800661c:	232d      	movs	r3, #45	@ 0x2d
 800661e:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8006622:	4a91      	ldr	r2, [pc, #580]	@ (8006868 <_printf_float+0x2cc>)
 8006624:	4b91      	ldr	r3, [pc, #580]	@ (800686c <_printf_float+0x2d0>)
 8006626:	f1ba 0f47 	cmp.w	sl, #71	@ 0x47
 800662a:	bf94      	ite	ls
 800662c:	4690      	movls	r8, r2
 800662e:	4698      	movhi	r8, r3
 8006630:	2303      	movs	r3, #3
 8006632:	6123      	str	r3, [r4, #16]
 8006634:	f02b 0304 	bic.w	r3, fp, #4
 8006638:	6023      	str	r3, [r4, #0]
 800663a:	f04f 0900 	mov.w	r9, #0
 800663e:	9700      	str	r7, [sp, #0]
 8006640:	4633      	mov	r3, r6
 8006642:	aa0b      	add	r2, sp, #44	@ 0x2c
 8006644:	4621      	mov	r1, r4
 8006646:	4628      	mov	r0, r5
 8006648:	f000 f9d2 	bl	80069f0 <_printf_common>
 800664c:	3001      	adds	r0, #1
 800664e:	f040 808d 	bne.w	800676c <_printf_float+0x1d0>
 8006652:	f04f 30ff 	mov.w	r0, #4294967295
 8006656:	b00d      	add	sp, #52	@ 0x34
 8006658:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800665c:	4642      	mov	r2, r8
 800665e:	464b      	mov	r3, r9
 8006660:	4640      	mov	r0, r8
 8006662:	4649      	mov	r1, r9
 8006664:	f7fa fa82 	bl	8000b6c <__aeabi_dcmpun>
 8006668:	b140      	cbz	r0, 800667c <_printf_float+0xe0>
 800666a:	464b      	mov	r3, r9
 800666c:	2b00      	cmp	r3, #0
 800666e:	bfbc      	itt	lt
 8006670:	232d      	movlt	r3, #45	@ 0x2d
 8006672:	f884 3043 	strblt.w	r3, [r4, #67]	@ 0x43
 8006676:	4a7e      	ldr	r2, [pc, #504]	@ (8006870 <_printf_float+0x2d4>)
 8006678:	4b7e      	ldr	r3, [pc, #504]	@ (8006874 <_printf_float+0x2d8>)
 800667a:	e7d4      	b.n	8006626 <_printf_float+0x8a>
 800667c:	6863      	ldr	r3, [r4, #4]
 800667e:	f00a 02df 	and.w	r2, sl, #223	@ 0xdf
 8006682:	9206      	str	r2, [sp, #24]
 8006684:	1c5a      	adds	r2, r3, #1
 8006686:	d13b      	bne.n	8006700 <_printf_float+0x164>
 8006688:	2306      	movs	r3, #6
 800668a:	6063      	str	r3, [r4, #4]
 800668c:	f44b 6280 	orr.w	r2, fp, #1024	@ 0x400
 8006690:	2300      	movs	r3, #0
 8006692:	6022      	str	r2, [r4, #0]
 8006694:	9303      	str	r3, [sp, #12]
 8006696:	ab0a      	add	r3, sp, #40	@ 0x28
 8006698:	e9cd a301 	strd	sl, r3, [sp, #4]
 800669c:	ab09      	add	r3, sp, #36	@ 0x24
 800669e:	9300      	str	r3, [sp, #0]
 80066a0:	6861      	ldr	r1, [r4, #4]
 80066a2:	ec49 8b10 	vmov	d0, r8, r9
 80066a6:	f10d 0323 	add.w	r3, sp, #35	@ 0x23
 80066aa:	4628      	mov	r0, r5
 80066ac:	f7ff fed6 	bl	800645c <__cvt>
 80066b0:	9b06      	ldr	r3, [sp, #24]
 80066b2:	9909      	ldr	r1, [sp, #36]	@ 0x24
 80066b4:	2b47      	cmp	r3, #71	@ 0x47
 80066b6:	4680      	mov	r8, r0
 80066b8:	d129      	bne.n	800670e <_printf_float+0x172>
 80066ba:	1cc8      	adds	r0, r1, #3
 80066bc:	db02      	blt.n	80066c4 <_printf_float+0x128>
 80066be:	6863      	ldr	r3, [r4, #4]
 80066c0:	4299      	cmp	r1, r3
 80066c2:	dd41      	ble.n	8006748 <_printf_float+0x1ac>
 80066c4:	f1aa 0a02 	sub.w	sl, sl, #2
 80066c8:	fa5f fa8a 	uxtb.w	sl, sl
 80066cc:	3901      	subs	r1, #1
 80066ce:	4652      	mov	r2, sl
 80066d0:	f104 0050 	add.w	r0, r4, #80	@ 0x50
 80066d4:	9109      	str	r1, [sp, #36]	@ 0x24
 80066d6:	f7ff ff26 	bl	8006526 <__exponent>
 80066da:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 80066dc:	1813      	adds	r3, r2, r0
 80066de:	2a01      	cmp	r2, #1
 80066e0:	4681      	mov	r9, r0
 80066e2:	6123      	str	r3, [r4, #16]
 80066e4:	dc02      	bgt.n	80066ec <_printf_float+0x150>
 80066e6:	6822      	ldr	r2, [r4, #0]
 80066e8:	07d2      	lsls	r2, r2, #31
 80066ea:	d501      	bpl.n	80066f0 <_printf_float+0x154>
 80066ec:	3301      	adds	r3, #1
 80066ee:	6123      	str	r3, [r4, #16]
 80066f0:	f89d 3023 	ldrb.w	r3, [sp, #35]	@ 0x23
 80066f4:	2b00      	cmp	r3, #0
 80066f6:	d0a2      	beq.n	800663e <_printf_float+0xa2>
 80066f8:	232d      	movs	r3, #45	@ 0x2d
 80066fa:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 80066fe:	e79e      	b.n	800663e <_printf_float+0xa2>
 8006700:	9a06      	ldr	r2, [sp, #24]
 8006702:	2a47      	cmp	r2, #71	@ 0x47
 8006704:	d1c2      	bne.n	800668c <_printf_float+0xf0>
 8006706:	2b00      	cmp	r3, #0
 8006708:	d1c0      	bne.n	800668c <_printf_float+0xf0>
 800670a:	2301      	movs	r3, #1
 800670c:	e7bd      	b.n	800668a <_printf_float+0xee>
 800670e:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 8006712:	d9db      	bls.n	80066cc <_printf_float+0x130>
 8006714:	f1ba 0f66 	cmp.w	sl, #102	@ 0x66
 8006718:	d118      	bne.n	800674c <_printf_float+0x1b0>
 800671a:	2900      	cmp	r1, #0
 800671c:	6863      	ldr	r3, [r4, #4]
 800671e:	dd0b      	ble.n	8006738 <_printf_float+0x19c>
 8006720:	6121      	str	r1, [r4, #16]
 8006722:	b913      	cbnz	r3, 800672a <_printf_float+0x18e>
 8006724:	6822      	ldr	r2, [r4, #0]
 8006726:	07d0      	lsls	r0, r2, #31
 8006728:	d502      	bpl.n	8006730 <_printf_float+0x194>
 800672a:	3301      	adds	r3, #1
 800672c:	440b      	add	r3, r1
 800672e:	6123      	str	r3, [r4, #16]
 8006730:	65a1      	str	r1, [r4, #88]	@ 0x58
 8006732:	f04f 0900 	mov.w	r9, #0
 8006736:	e7db      	b.n	80066f0 <_printf_float+0x154>
 8006738:	b913      	cbnz	r3, 8006740 <_printf_float+0x1a4>
 800673a:	6822      	ldr	r2, [r4, #0]
 800673c:	07d2      	lsls	r2, r2, #31
 800673e:	d501      	bpl.n	8006744 <_printf_float+0x1a8>
 8006740:	3302      	adds	r3, #2
 8006742:	e7f4      	b.n	800672e <_printf_float+0x192>
 8006744:	2301      	movs	r3, #1
 8006746:	e7f2      	b.n	800672e <_printf_float+0x192>
 8006748:	f04f 0a67 	mov.w	sl, #103	@ 0x67
 800674c:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800674e:	4299      	cmp	r1, r3
 8006750:	db05      	blt.n	800675e <_printf_float+0x1c2>
 8006752:	6823      	ldr	r3, [r4, #0]
 8006754:	6121      	str	r1, [r4, #16]
 8006756:	07d8      	lsls	r0, r3, #31
 8006758:	d5ea      	bpl.n	8006730 <_printf_float+0x194>
 800675a:	1c4b      	adds	r3, r1, #1
 800675c:	e7e7      	b.n	800672e <_printf_float+0x192>
 800675e:	2900      	cmp	r1, #0
 8006760:	bfd4      	ite	le
 8006762:	f1c1 0202 	rsble	r2, r1, #2
 8006766:	2201      	movgt	r2, #1
 8006768:	4413      	add	r3, r2
 800676a:	e7e0      	b.n	800672e <_printf_float+0x192>
 800676c:	6823      	ldr	r3, [r4, #0]
 800676e:	055a      	lsls	r2, r3, #21
 8006770:	d407      	bmi.n	8006782 <_printf_float+0x1e6>
 8006772:	6923      	ldr	r3, [r4, #16]
 8006774:	4642      	mov	r2, r8
 8006776:	4631      	mov	r1, r6
 8006778:	4628      	mov	r0, r5
 800677a:	47b8      	blx	r7
 800677c:	3001      	adds	r0, #1
 800677e:	d12b      	bne.n	80067d8 <_printf_float+0x23c>
 8006780:	e767      	b.n	8006652 <_printf_float+0xb6>
 8006782:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 8006786:	f240 80dd 	bls.w	8006944 <_printf_float+0x3a8>
 800678a:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 800678e:	2200      	movs	r2, #0
 8006790:	2300      	movs	r3, #0
 8006792:	f7fa f9b9 	bl	8000b08 <__aeabi_dcmpeq>
 8006796:	2800      	cmp	r0, #0
 8006798:	d033      	beq.n	8006802 <_printf_float+0x266>
 800679a:	4a37      	ldr	r2, [pc, #220]	@ (8006878 <_printf_float+0x2dc>)
 800679c:	2301      	movs	r3, #1
 800679e:	4631      	mov	r1, r6
 80067a0:	4628      	mov	r0, r5
 80067a2:	47b8      	blx	r7
 80067a4:	3001      	adds	r0, #1
 80067a6:	f43f af54 	beq.w	8006652 <_printf_float+0xb6>
 80067aa:	e9dd 3809 	ldrd	r3, r8, [sp, #36]	@ 0x24
 80067ae:	4543      	cmp	r3, r8
 80067b0:	db02      	blt.n	80067b8 <_printf_float+0x21c>
 80067b2:	6823      	ldr	r3, [r4, #0]
 80067b4:	07d8      	lsls	r0, r3, #31
 80067b6:	d50f      	bpl.n	80067d8 <_printf_float+0x23c>
 80067b8:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 80067bc:	4631      	mov	r1, r6
 80067be:	4628      	mov	r0, r5
 80067c0:	47b8      	blx	r7
 80067c2:	3001      	adds	r0, #1
 80067c4:	f43f af45 	beq.w	8006652 <_printf_float+0xb6>
 80067c8:	f04f 0900 	mov.w	r9, #0
 80067cc:	f108 38ff 	add.w	r8, r8, #4294967295
 80067d0:	f104 0a1a 	add.w	sl, r4, #26
 80067d4:	45c8      	cmp	r8, r9
 80067d6:	dc09      	bgt.n	80067ec <_printf_float+0x250>
 80067d8:	6823      	ldr	r3, [r4, #0]
 80067da:	079b      	lsls	r3, r3, #30
 80067dc:	f100 8103 	bmi.w	80069e6 <_printf_float+0x44a>
 80067e0:	68e0      	ldr	r0, [r4, #12]
 80067e2:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 80067e4:	4298      	cmp	r0, r3
 80067e6:	bfb8      	it	lt
 80067e8:	4618      	movlt	r0, r3
 80067ea:	e734      	b.n	8006656 <_printf_float+0xba>
 80067ec:	2301      	movs	r3, #1
 80067ee:	4652      	mov	r2, sl
 80067f0:	4631      	mov	r1, r6
 80067f2:	4628      	mov	r0, r5
 80067f4:	47b8      	blx	r7
 80067f6:	3001      	adds	r0, #1
 80067f8:	f43f af2b 	beq.w	8006652 <_printf_float+0xb6>
 80067fc:	f109 0901 	add.w	r9, r9, #1
 8006800:	e7e8      	b.n	80067d4 <_printf_float+0x238>
 8006802:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8006804:	2b00      	cmp	r3, #0
 8006806:	dc39      	bgt.n	800687c <_printf_float+0x2e0>
 8006808:	4a1b      	ldr	r2, [pc, #108]	@ (8006878 <_printf_float+0x2dc>)
 800680a:	2301      	movs	r3, #1
 800680c:	4631      	mov	r1, r6
 800680e:	4628      	mov	r0, r5
 8006810:	47b8      	blx	r7
 8006812:	3001      	adds	r0, #1
 8006814:	f43f af1d 	beq.w	8006652 <_printf_float+0xb6>
 8006818:	e9dd 3909 	ldrd	r3, r9, [sp, #36]	@ 0x24
 800681c:	ea59 0303 	orrs.w	r3, r9, r3
 8006820:	d102      	bne.n	8006828 <_printf_float+0x28c>
 8006822:	6823      	ldr	r3, [r4, #0]
 8006824:	07d9      	lsls	r1, r3, #31
 8006826:	d5d7      	bpl.n	80067d8 <_printf_float+0x23c>
 8006828:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800682c:	4631      	mov	r1, r6
 800682e:	4628      	mov	r0, r5
 8006830:	47b8      	blx	r7
 8006832:	3001      	adds	r0, #1
 8006834:	f43f af0d 	beq.w	8006652 <_printf_float+0xb6>
 8006838:	f04f 0a00 	mov.w	sl, #0
 800683c:	f104 0b1a 	add.w	fp, r4, #26
 8006840:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8006842:	425b      	negs	r3, r3
 8006844:	4553      	cmp	r3, sl
 8006846:	dc01      	bgt.n	800684c <_printf_float+0x2b0>
 8006848:	464b      	mov	r3, r9
 800684a:	e793      	b.n	8006774 <_printf_float+0x1d8>
 800684c:	2301      	movs	r3, #1
 800684e:	465a      	mov	r2, fp
 8006850:	4631      	mov	r1, r6
 8006852:	4628      	mov	r0, r5
 8006854:	47b8      	blx	r7
 8006856:	3001      	adds	r0, #1
 8006858:	f43f aefb 	beq.w	8006652 <_printf_float+0xb6>
 800685c:	f10a 0a01 	add.w	sl, sl, #1
 8006860:	e7ee      	b.n	8006840 <_printf_float+0x2a4>
 8006862:	bf00      	nop
 8006864:	7fefffff 	.word	0x7fefffff
 8006868:	0800a338 	.word	0x0800a338
 800686c:	0800a33c 	.word	0x0800a33c
 8006870:	0800a340 	.word	0x0800a340
 8006874:	0800a344 	.word	0x0800a344
 8006878:	0800a348 	.word	0x0800a348
 800687c:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 800687e:	f8dd a028 	ldr.w	sl, [sp, #40]	@ 0x28
 8006882:	4553      	cmp	r3, sl
 8006884:	bfa8      	it	ge
 8006886:	4653      	movge	r3, sl
 8006888:	2b00      	cmp	r3, #0
 800688a:	4699      	mov	r9, r3
 800688c:	dc36      	bgt.n	80068fc <_printf_float+0x360>
 800688e:	f04f 0b00 	mov.w	fp, #0
 8006892:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8006896:	f104 021a 	add.w	r2, r4, #26
 800689a:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 800689c:	9306      	str	r3, [sp, #24]
 800689e:	eba3 0309 	sub.w	r3, r3, r9
 80068a2:	455b      	cmp	r3, fp
 80068a4:	dc31      	bgt.n	800690a <_printf_float+0x36e>
 80068a6:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80068a8:	459a      	cmp	sl, r3
 80068aa:	dc3a      	bgt.n	8006922 <_printf_float+0x386>
 80068ac:	6823      	ldr	r3, [r4, #0]
 80068ae:	07da      	lsls	r2, r3, #31
 80068b0:	d437      	bmi.n	8006922 <_printf_float+0x386>
 80068b2:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80068b4:	ebaa 0903 	sub.w	r9, sl, r3
 80068b8:	9b06      	ldr	r3, [sp, #24]
 80068ba:	ebaa 0303 	sub.w	r3, sl, r3
 80068be:	4599      	cmp	r9, r3
 80068c0:	bfa8      	it	ge
 80068c2:	4699      	movge	r9, r3
 80068c4:	f1b9 0f00 	cmp.w	r9, #0
 80068c8:	dc33      	bgt.n	8006932 <_printf_float+0x396>
 80068ca:	f04f 0800 	mov.w	r8, #0
 80068ce:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 80068d2:	f104 0b1a 	add.w	fp, r4, #26
 80068d6:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80068d8:	ebaa 0303 	sub.w	r3, sl, r3
 80068dc:	eba3 0309 	sub.w	r3, r3, r9
 80068e0:	4543      	cmp	r3, r8
 80068e2:	f77f af79 	ble.w	80067d8 <_printf_float+0x23c>
 80068e6:	2301      	movs	r3, #1
 80068e8:	465a      	mov	r2, fp
 80068ea:	4631      	mov	r1, r6
 80068ec:	4628      	mov	r0, r5
 80068ee:	47b8      	blx	r7
 80068f0:	3001      	adds	r0, #1
 80068f2:	f43f aeae 	beq.w	8006652 <_printf_float+0xb6>
 80068f6:	f108 0801 	add.w	r8, r8, #1
 80068fa:	e7ec      	b.n	80068d6 <_printf_float+0x33a>
 80068fc:	4642      	mov	r2, r8
 80068fe:	4631      	mov	r1, r6
 8006900:	4628      	mov	r0, r5
 8006902:	47b8      	blx	r7
 8006904:	3001      	adds	r0, #1
 8006906:	d1c2      	bne.n	800688e <_printf_float+0x2f2>
 8006908:	e6a3      	b.n	8006652 <_printf_float+0xb6>
 800690a:	2301      	movs	r3, #1
 800690c:	4631      	mov	r1, r6
 800690e:	4628      	mov	r0, r5
 8006910:	9206      	str	r2, [sp, #24]
 8006912:	47b8      	blx	r7
 8006914:	3001      	adds	r0, #1
 8006916:	f43f ae9c 	beq.w	8006652 <_printf_float+0xb6>
 800691a:	9a06      	ldr	r2, [sp, #24]
 800691c:	f10b 0b01 	add.w	fp, fp, #1
 8006920:	e7bb      	b.n	800689a <_printf_float+0x2fe>
 8006922:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8006926:	4631      	mov	r1, r6
 8006928:	4628      	mov	r0, r5
 800692a:	47b8      	blx	r7
 800692c:	3001      	adds	r0, #1
 800692e:	d1c0      	bne.n	80068b2 <_printf_float+0x316>
 8006930:	e68f      	b.n	8006652 <_printf_float+0xb6>
 8006932:	9a06      	ldr	r2, [sp, #24]
 8006934:	464b      	mov	r3, r9
 8006936:	4442      	add	r2, r8
 8006938:	4631      	mov	r1, r6
 800693a:	4628      	mov	r0, r5
 800693c:	47b8      	blx	r7
 800693e:	3001      	adds	r0, #1
 8006940:	d1c3      	bne.n	80068ca <_printf_float+0x32e>
 8006942:	e686      	b.n	8006652 <_printf_float+0xb6>
 8006944:	f8dd a028 	ldr.w	sl, [sp, #40]	@ 0x28
 8006948:	f1ba 0f01 	cmp.w	sl, #1
 800694c:	dc01      	bgt.n	8006952 <_printf_float+0x3b6>
 800694e:	07db      	lsls	r3, r3, #31
 8006950:	d536      	bpl.n	80069c0 <_printf_float+0x424>
 8006952:	2301      	movs	r3, #1
 8006954:	4642      	mov	r2, r8
 8006956:	4631      	mov	r1, r6
 8006958:	4628      	mov	r0, r5
 800695a:	47b8      	blx	r7
 800695c:	3001      	adds	r0, #1
 800695e:	f43f ae78 	beq.w	8006652 <_printf_float+0xb6>
 8006962:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8006966:	4631      	mov	r1, r6
 8006968:	4628      	mov	r0, r5
 800696a:	47b8      	blx	r7
 800696c:	3001      	adds	r0, #1
 800696e:	f43f ae70 	beq.w	8006652 <_printf_float+0xb6>
 8006972:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 8006976:	2200      	movs	r2, #0
 8006978:	2300      	movs	r3, #0
 800697a:	f10a 3aff 	add.w	sl, sl, #4294967295
 800697e:	f7fa f8c3 	bl	8000b08 <__aeabi_dcmpeq>
 8006982:	b9c0      	cbnz	r0, 80069b6 <_printf_float+0x41a>
 8006984:	4653      	mov	r3, sl
 8006986:	f108 0201 	add.w	r2, r8, #1
 800698a:	4631      	mov	r1, r6
 800698c:	4628      	mov	r0, r5
 800698e:	47b8      	blx	r7
 8006990:	3001      	adds	r0, #1
 8006992:	d10c      	bne.n	80069ae <_printf_float+0x412>
 8006994:	e65d      	b.n	8006652 <_printf_float+0xb6>
 8006996:	2301      	movs	r3, #1
 8006998:	465a      	mov	r2, fp
 800699a:	4631      	mov	r1, r6
 800699c:	4628      	mov	r0, r5
 800699e:	47b8      	blx	r7
 80069a0:	3001      	adds	r0, #1
 80069a2:	f43f ae56 	beq.w	8006652 <_printf_float+0xb6>
 80069a6:	f108 0801 	add.w	r8, r8, #1
 80069aa:	45d0      	cmp	r8, sl
 80069ac:	dbf3      	blt.n	8006996 <_printf_float+0x3fa>
 80069ae:	464b      	mov	r3, r9
 80069b0:	f104 0250 	add.w	r2, r4, #80	@ 0x50
 80069b4:	e6df      	b.n	8006776 <_printf_float+0x1da>
 80069b6:	f04f 0800 	mov.w	r8, #0
 80069ba:	f104 0b1a 	add.w	fp, r4, #26
 80069be:	e7f4      	b.n	80069aa <_printf_float+0x40e>
 80069c0:	2301      	movs	r3, #1
 80069c2:	4642      	mov	r2, r8
 80069c4:	e7e1      	b.n	800698a <_printf_float+0x3ee>
 80069c6:	2301      	movs	r3, #1
 80069c8:	464a      	mov	r2, r9
 80069ca:	4631      	mov	r1, r6
 80069cc:	4628      	mov	r0, r5
 80069ce:	47b8      	blx	r7
 80069d0:	3001      	adds	r0, #1
 80069d2:	f43f ae3e 	beq.w	8006652 <_printf_float+0xb6>
 80069d6:	f108 0801 	add.w	r8, r8, #1
 80069da:	68e3      	ldr	r3, [r4, #12]
 80069dc:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 80069de:	1a5b      	subs	r3, r3, r1
 80069e0:	4543      	cmp	r3, r8
 80069e2:	dcf0      	bgt.n	80069c6 <_printf_float+0x42a>
 80069e4:	e6fc      	b.n	80067e0 <_printf_float+0x244>
 80069e6:	f04f 0800 	mov.w	r8, #0
 80069ea:	f104 0919 	add.w	r9, r4, #25
 80069ee:	e7f4      	b.n	80069da <_printf_float+0x43e>

080069f0 <_printf_common>:
 80069f0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80069f4:	4616      	mov	r6, r2
 80069f6:	4698      	mov	r8, r3
 80069f8:	688a      	ldr	r2, [r1, #8]
 80069fa:	690b      	ldr	r3, [r1, #16]
 80069fc:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8006a00:	4293      	cmp	r3, r2
 8006a02:	bfb8      	it	lt
 8006a04:	4613      	movlt	r3, r2
 8006a06:	6033      	str	r3, [r6, #0]
 8006a08:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 8006a0c:	4607      	mov	r7, r0
 8006a0e:	460c      	mov	r4, r1
 8006a10:	b10a      	cbz	r2, 8006a16 <_printf_common+0x26>
 8006a12:	3301      	adds	r3, #1
 8006a14:	6033      	str	r3, [r6, #0]
 8006a16:	6823      	ldr	r3, [r4, #0]
 8006a18:	0699      	lsls	r1, r3, #26
 8006a1a:	bf42      	ittt	mi
 8006a1c:	6833      	ldrmi	r3, [r6, #0]
 8006a1e:	3302      	addmi	r3, #2
 8006a20:	6033      	strmi	r3, [r6, #0]
 8006a22:	6825      	ldr	r5, [r4, #0]
 8006a24:	f015 0506 	ands.w	r5, r5, #6
 8006a28:	d106      	bne.n	8006a38 <_printf_common+0x48>
 8006a2a:	f104 0a19 	add.w	sl, r4, #25
 8006a2e:	68e3      	ldr	r3, [r4, #12]
 8006a30:	6832      	ldr	r2, [r6, #0]
 8006a32:	1a9b      	subs	r3, r3, r2
 8006a34:	42ab      	cmp	r3, r5
 8006a36:	dc26      	bgt.n	8006a86 <_printf_common+0x96>
 8006a38:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 8006a3c:	6822      	ldr	r2, [r4, #0]
 8006a3e:	3b00      	subs	r3, #0
 8006a40:	bf18      	it	ne
 8006a42:	2301      	movne	r3, #1
 8006a44:	0692      	lsls	r2, r2, #26
 8006a46:	d42b      	bmi.n	8006aa0 <_printf_common+0xb0>
 8006a48:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 8006a4c:	4641      	mov	r1, r8
 8006a4e:	4638      	mov	r0, r7
 8006a50:	47c8      	blx	r9
 8006a52:	3001      	adds	r0, #1
 8006a54:	d01e      	beq.n	8006a94 <_printf_common+0xa4>
 8006a56:	6823      	ldr	r3, [r4, #0]
 8006a58:	6922      	ldr	r2, [r4, #16]
 8006a5a:	f003 0306 	and.w	r3, r3, #6
 8006a5e:	2b04      	cmp	r3, #4
 8006a60:	bf02      	ittt	eq
 8006a62:	68e5      	ldreq	r5, [r4, #12]
 8006a64:	6833      	ldreq	r3, [r6, #0]
 8006a66:	1aed      	subeq	r5, r5, r3
 8006a68:	68a3      	ldr	r3, [r4, #8]
 8006a6a:	bf0c      	ite	eq
 8006a6c:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8006a70:	2500      	movne	r5, #0
 8006a72:	4293      	cmp	r3, r2
 8006a74:	bfc4      	itt	gt
 8006a76:	1a9b      	subgt	r3, r3, r2
 8006a78:	18ed      	addgt	r5, r5, r3
 8006a7a:	2600      	movs	r6, #0
 8006a7c:	341a      	adds	r4, #26
 8006a7e:	42b5      	cmp	r5, r6
 8006a80:	d11a      	bne.n	8006ab8 <_printf_common+0xc8>
 8006a82:	2000      	movs	r0, #0
 8006a84:	e008      	b.n	8006a98 <_printf_common+0xa8>
 8006a86:	2301      	movs	r3, #1
 8006a88:	4652      	mov	r2, sl
 8006a8a:	4641      	mov	r1, r8
 8006a8c:	4638      	mov	r0, r7
 8006a8e:	47c8      	blx	r9
 8006a90:	3001      	adds	r0, #1
 8006a92:	d103      	bne.n	8006a9c <_printf_common+0xac>
 8006a94:	f04f 30ff 	mov.w	r0, #4294967295
 8006a98:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006a9c:	3501      	adds	r5, #1
 8006a9e:	e7c6      	b.n	8006a2e <_printf_common+0x3e>
 8006aa0:	18e1      	adds	r1, r4, r3
 8006aa2:	1c5a      	adds	r2, r3, #1
 8006aa4:	2030      	movs	r0, #48	@ 0x30
 8006aa6:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 8006aaa:	4422      	add	r2, r4
 8006aac:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 8006ab0:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 8006ab4:	3302      	adds	r3, #2
 8006ab6:	e7c7      	b.n	8006a48 <_printf_common+0x58>
 8006ab8:	2301      	movs	r3, #1
 8006aba:	4622      	mov	r2, r4
 8006abc:	4641      	mov	r1, r8
 8006abe:	4638      	mov	r0, r7
 8006ac0:	47c8      	blx	r9
 8006ac2:	3001      	adds	r0, #1
 8006ac4:	d0e6      	beq.n	8006a94 <_printf_common+0xa4>
 8006ac6:	3601      	adds	r6, #1
 8006ac8:	e7d9      	b.n	8006a7e <_printf_common+0x8e>
	...

08006acc <_printf_i>:
 8006acc:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8006ad0:	7e0f      	ldrb	r7, [r1, #24]
 8006ad2:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 8006ad4:	2f78      	cmp	r7, #120	@ 0x78
 8006ad6:	4691      	mov	r9, r2
 8006ad8:	4680      	mov	r8, r0
 8006ada:	460c      	mov	r4, r1
 8006adc:	469a      	mov	sl, r3
 8006ade:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 8006ae2:	d807      	bhi.n	8006af4 <_printf_i+0x28>
 8006ae4:	2f62      	cmp	r7, #98	@ 0x62
 8006ae6:	d80a      	bhi.n	8006afe <_printf_i+0x32>
 8006ae8:	2f00      	cmp	r7, #0
 8006aea:	f000 80d2 	beq.w	8006c92 <_printf_i+0x1c6>
 8006aee:	2f58      	cmp	r7, #88	@ 0x58
 8006af0:	f000 80b9 	beq.w	8006c66 <_printf_i+0x19a>
 8006af4:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8006af8:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 8006afc:	e03a      	b.n	8006b74 <_printf_i+0xa8>
 8006afe:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 8006b02:	2b15      	cmp	r3, #21
 8006b04:	d8f6      	bhi.n	8006af4 <_printf_i+0x28>
 8006b06:	a101      	add	r1, pc, #4	@ (adr r1, 8006b0c <_printf_i+0x40>)
 8006b08:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8006b0c:	08006b65 	.word	0x08006b65
 8006b10:	08006b79 	.word	0x08006b79
 8006b14:	08006af5 	.word	0x08006af5
 8006b18:	08006af5 	.word	0x08006af5
 8006b1c:	08006af5 	.word	0x08006af5
 8006b20:	08006af5 	.word	0x08006af5
 8006b24:	08006b79 	.word	0x08006b79
 8006b28:	08006af5 	.word	0x08006af5
 8006b2c:	08006af5 	.word	0x08006af5
 8006b30:	08006af5 	.word	0x08006af5
 8006b34:	08006af5 	.word	0x08006af5
 8006b38:	08006c79 	.word	0x08006c79
 8006b3c:	08006ba3 	.word	0x08006ba3
 8006b40:	08006c33 	.word	0x08006c33
 8006b44:	08006af5 	.word	0x08006af5
 8006b48:	08006af5 	.word	0x08006af5
 8006b4c:	08006c9b 	.word	0x08006c9b
 8006b50:	08006af5 	.word	0x08006af5
 8006b54:	08006ba3 	.word	0x08006ba3
 8006b58:	08006af5 	.word	0x08006af5
 8006b5c:	08006af5 	.word	0x08006af5
 8006b60:	08006c3b 	.word	0x08006c3b
 8006b64:	6833      	ldr	r3, [r6, #0]
 8006b66:	1d1a      	adds	r2, r3, #4
 8006b68:	681b      	ldr	r3, [r3, #0]
 8006b6a:	6032      	str	r2, [r6, #0]
 8006b6c:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8006b70:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 8006b74:	2301      	movs	r3, #1
 8006b76:	e09d      	b.n	8006cb4 <_printf_i+0x1e8>
 8006b78:	6833      	ldr	r3, [r6, #0]
 8006b7a:	6820      	ldr	r0, [r4, #0]
 8006b7c:	1d19      	adds	r1, r3, #4
 8006b7e:	6031      	str	r1, [r6, #0]
 8006b80:	0606      	lsls	r6, r0, #24
 8006b82:	d501      	bpl.n	8006b88 <_printf_i+0xbc>
 8006b84:	681d      	ldr	r5, [r3, #0]
 8006b86:	e003      	b.n	8006b90 <_printf_i+0xc4>
 8006b88:	0645      	lsls	r5, r0, #25
 8006b8a:	d5fb      	bpl.n	8006b84 <_printf_i+0xb8>
 8006b8c:	f9b3 5000 	ldrsh.w	r5, [r3]
 8006b90:	2d00      	cmp	r5, #0
 8006b92:	da03      	bge.n	8006b9c <_printf_i+0xd0>
 8006b94:	232d      	movs	r3, #45	@ 0x2d
 8006b96:	426d      	negs	r5, r5
 8006b98:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8006b9c:	4859      	ldr	r0, [pc, #356]	@ (8006d04 <_printf_i+0x238>)
 8006b9e:	230a      	movs	r3, #10
 8006ba0:	e011      	b.n	8006bc6 <_printf_i+0xfa>
 8006ba2:	6821      	ldr	r1, [r4, #0]
 8006ba4:	6833      	ldr	r3, [r6, #0]
 8006ba6:	0608      	lsls	r0, r1, #24
 8006ba8:	f853 5b04 	ldr.w	r5, [r3], #4
 8006bac:	d402      	bmi.n	8006bb4 <_printf_i+0xe8>
 8006bae:	0649      	lsls	r1, r1, #25
 8006bb0:	bf48      	it	mi
 8006bb2:	b2ad      	uxthmi	r5, r5
 8006bb4:	2f6f      	cmp	r7, #111	@ 0x6f
 8006bb6:	4853      	ldr	r0, [pc, #332]	@ (8006d04 <_printf_i+0x238>)
 8006bb8:	6033      	str	r3, [r6, #0]
 8006bba:	bf14      	ite	ne
 8006bbc:	230a      	movne	r3, #10
 8006bbe:	2308      	moveq	r3, #8
 8006bc0:	2100      	movs	r1, #0
 8006bc2:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 8006bc6:	6866      	ldr	r6, [r4, #4]
 8006bc8:	60a6      	str	r6, [r4, #8]
 8006bca:	2e00      	cmp	r6, #0
 8006bcc:	bfa2      	ittt	ge
 8006bce:	6821      	ldrge	r1, [r4, #0]
 8006bd0:	f021 0104 	bicge.w	r1, r1, #4
 8006bd4:	6021      	strge	r1, [r4, #0]
 8006bd6:	b90d      	cbnz	r5, 8006bdc <_printf_i+0x110>
 8006bd8:	2e00      	cmp	r6, #0
 8006bda:	d04b      	beq.n	8006c74 <_printf_i+0x1a8>
 8006bdc:	4616      	mov	r6, r2
 8006bde:	fbb5 f1f3 	udiv	r1, r5, r3
 8006be2:	fb03 5711 	mls	r7, r3, r1, r5
 8006be6:	5dc7      	ldrb	r7, [r0, r7]
 8006be8:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8006bec:	462f      	mov	r7, r5
 8006bee:	42bb      	cmp	r3, r7
 8006bf0:	460d      	mov	r5, r1
 8006bf2:	d9f4      	bls.n	8006bde <_printf_i+0x112>
 8006bf4:	2b08      	cmp	r3, #8
 8006bf6:	d10b      	bne.n	8006c10 <_printf_i+0x144>
 8006bf8:	6823      	ldr	r3, [r4, #0]
 8006bfa:	07df      	lsls	r7, r3, #31
 8006bfc:	d508      	bpl.n	8006c10 <_printf_i+0x144>
 8006bfe:	6923      	ldr	r3, [r4, #16]
 8006c00:	6861      	ldr	r1, [r4, #4]
 8006c02:	4299      	cmp	r1, r3
 8006c04:	bfde      	ittt	le
 8006c06:	2330      	movle	r3, #48	@ 0x30
 8006c08:	f806 3c01 	strble.w	r3, [r6, #-1]
 8006c0c:	f106 36ff 	addle.w	r6, r6, #4294967295
 8006c10:	1b92      	subs	r2, r2, r6
 8006c12:	6122      	str	r2, [r4, #16]
 8006c14:	f8cd a000 	str.w	sl, [sp]
 8006c18:	464b      	mov	r3, r9
 8006c1a:	aa03      	add	r2, sp, #12
 8006c1c:	4621      	mov	r1, r4
 8006c1e:	4640      	mov	r0, r8
 8006c20:	f7ff fee6 	bl	80069f0 <_printf_common>
 8006c24:	3001      	adds	r0, #1
 8006c26:	d14a      	bne.n	8006cbe <_printf_i+0x1f2>
 8006c28:	f04f 30ff 	mov.w	r0, #4294967295
 8006c2c:	b004      	add	sp, #16
 8006c2e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006c32:	6823      	ldr	r3, [r4, #0]
 8006c34:	f043 0320 	orr.w	r3, r3, #32
 8006c38:	6023      	str	r3, [r4, #0]
 8006c3a:	4833      	ldr	r0, [pc, #204]	@ (8006d08 <_printf_i+0x23c>)
 8006c3c:	2778      	movs	r7, #120	@ 0x78
 8006c3e:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 8006c42:	6823      	ldr	r3, [r4, #0]
 8006c44:	6831      	ldr	r1, [r6, #0]
 8006c46:	061f      	lsls	r7, r3, #24
 8006c48:	f851 5b04 	ldr.w	r5, [r1], #4
 8006c4c:	d402      	bmi.n	8006c54 <_printf_i+0x188>
 8006c4e:	065f      	lsls	r7, r3, #25
 8006c50:	bf48      	it	mi
 8006c52:	b2ad      	uxthmi	r5, r5
 8006c54:	6031      	str	r1, [r6, #0]
 8006c56:	07d9      	lsls	r1, r3, #31
 8006c58:	bf44      	itt	mi
 8006c5a:	f043 0320 	orrmi.w	r3, r3, #32
 8006c5e:	6023      	strmi	r3, [r4, #0]
 8006c60:	b11d      	cbz	r5, 8006c6a <_printf_i+0x19e>
 8006c62:	2310      	movs	r3, #16
 8006c64:	e7ac      	b.n	8006bc0 <_printf_i+0xf4>
 8006c66:	4827      	ldr	r0, [pc, #156]	@ (8006d04 <_printf_i+0x238>)
 8006c68:	e7e9      	b.n	8006c3e <_printf_i+0x172>
 8006c6a:	6823      	ldr	r3, [r4, #0]
 8006c6c:	f023 0320 	bic.w	r3, r3, #32
 8006c70:	6023      	str	r3, [r4, #0]
 8006c72:	e7f6      	b.n	8006c62 <_printf_i+0x196>
 8006c74:	4616      	mov	r6, r2
 8006c76:	e7bd      	b.n	8006bf4 <_printf_i+0x128>
 8006c78:	6833      	ldr	r3, [r6, #0]
 8006c7a:	6825      	ldr	r5, [r4, #0]
 8006c7c:	6961      	ldr	r1, [r4, #20]
 8006c7e:	1d18      	adds	r0, r3, #4
 8006c80:	6030      	str	r0, [r6, #0]
 8006c82:	062e      	lsls	r6, r5, #24
 8006c84:	681b      	ldr	r3, [r3, #0]
 8006c86:	d501      	bpl.n	8006c8c <_printf_i+0x1c0>
 8006c88:	6019      	str	r1, [r3, #0]
 8006c8a:	e002      	b.n	8006c92 <_printf_i+0x1c6>
 8006c8c:	0668      	lsls	r0, r5, #25
 8006c8e:	d5fb      	bpl.n	8006c88 <_printf_i+0x1bc>
 8006c90:	8019      	strh	r1, [r3, #0]
 8006c92:	2300      	movs	r3, #0
 8006c94:	6123      	str	r3, [r4, #16]
 8006c96:	4616      	mov	r6, r2
 8006c98:	e7bc      	b.n	8006c14 <_printf_i+0x148>
 8006c9a:	6833      	ldr	r3, [r6, #0]
 8006c9c:	1d1a      	adds	r2, r3, #4
 8006c9e:	6032      	str	r2, [r6, #0]
 8006ca0:	681e      	ldr	r6, [r3, #0]
 8006ca2:	6862      	ldr	r2, [r4, #4]
 8006ca4:	2100      	movs	r1, #0
 8006ca6:	4630      	mov	r0, r6
 8006ca8:	f7f9 fab2 	bl	8000210 <memchr>
 8006cac:	b108      	cbz	r0, 8006cb2 <_printf_i+0x1e6>
 8006cae:	1b80      	subs	r0, r0, r6
 8006cb0:	6060      	str	r0, [r4, #4]
 8006cb2:	6863      	ldr	r3, [r4, #4]
 8006cb4:	6123      	str	r3, [r4, #16]
 8006cb6:	2300      	movs	r3, #0
 8006cb8:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8006cbc:	e7aa      	b.n	8006c14 <_printf_i+0x148>
 8006cbe:	6923      	ldr	r3, [r4, #16]
 8006cc0:	4632      	mov	r2, r6
 8006cc2:	4649      	mov	r1, r9
 8006cc4:	4640      	mov	r0, r8
 8006cc6:	47d0      	blx	sl
 8006cc8:	3001      	adds	r0, #1
 8006cca:	d0ad      	beq.n	8006c28 <_printf_i+0x15c>
 8006ccc:	6823      	ldr	r3, [r4, #0]
 8006cce:	079b      	lsls	r3, r3, #30
 8006cd0:	d413      	bmi.n	8006cfa <_printf_i+0x22e>
 8006cd2:	68e0      	ldr	r0, [r4, #12]
 8006cd4:	9b03      	ldr	r3, [sp, #12]
 8006cd6:	4298      	cmp	r0, r3
 8006cd8:	bfb8      	it	lt
 8006cda:	4618      	movlt	r0, r3
 8006cdc:	e7a6      	b.n	8006c2c <_printf_i+0x160>
 8006cde:	2301      	movs	r3, #1
 8006ce0:	4632      	mov	r2, r6
 8006ce2:	4649      	mov	r1, r9
 8006ce4:	4640      	mov	r0, r8
 8006ce6:	47d0      	blx	sl
 8006ce8:	3001      	adds	r0, #1
 8006cea:	d09d      	beq.n	8006c28 <_printf_i+0x15c>
 8006cec:	3501      	adds	r5, #1
 8006cee:	68e3      	ldr	r3, [r4, #12]
 8006cf0:	9903      	ldr	r1, [sp, #12]
 8006cf2:	1a5b      	subs	r3, r3, r1
 8006cf4:	42ab      	cmp	r3, r5
 8006cf6:	dcf2      	bgt.n	8006cde <_printf_i+0x212>
 8006cf8:	e7eb      	b.n	8006cd2 <_printf_i+0x206>
 8006cfa:	2500      	movs	r5, #0
 8006cfc:	f104 0619 	add.w	r6, r4, #25
 8006d00:	e7f5      	b.n	8006cee <_printf_i+0x222>
 8006d02:	bf00      	nop
 8006d04:	0800a34a 	.word	0x0800a34a
 8006d08:	0800a35b 	.word	0x0800a35b

08006d0c <std>:
 8006d0c:	2300      	movs	r3, #0
 8006d0e:	b510      	push	{r4, lr}
 8006d10:	4604      	mov	r4, r0
 8006d12:	e9c0 3300 	strd	r3, r3, [r0]
 8006d16:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8006d1a:	6083      	str	r3, [r0, #8]
 8006d1c:	8181      	strh	r1, [r0, #12]
 8006d1e:	6643      	str	r3, [r0, #100]	@ 0x64
 8006d20:	81c2      	strh	r2, [r0, #14]
 8006d22:	6183      	str	r3, [r0, #24]
 8006d24:	4619      	mov	r1, r3
 8006d26:	2208      	movs	r2, #8
 8006d28:	305c      	adds	r0, #92	@ 0x5c
 8006d2a:	f000 f928 	bl	8006f7e <memset>
 8006d2e:	4b0d      	ldr	r3, [pc, #52]	@ (8006d64 <std+0x58>)
 8006d30:	6263      	str	r3, [r4, #36]	@ 0x24
 8006d32:	4b0d      	ldr	r3, [pc, #52]	@ (8006d68 <std+0x5c>)
 8006d34:	62a3      	str	r3, [r4, #40]	@ 0x28
 8006d36:	4b0d      	ldr	r3, [pc, #52]	@ (8006d6c <std+0x60>)
 8006d38:	62e3      	str	r3, [r4, #44]	@ 0x2c
 8006d3a:	4b0d      	ldr	r3, [pc, #52]	@ (8006d70 <std+0x64>)
 8006d3c:	6323      	str	r3, [r4, #48]	@ 0x30
 8006d3e:	4b0d      	ldr	r3, [pc, #52]	@ (8006d74 <std+0x68>)
 8006d40:	6224      	str	r4, [r4, #32]
 8006d42:	429c      	cmp	r4, r3
 8006d44:	d006      	beq.n	8006d54 <std+0x48>
 8006d46:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 8006d4a:	4294      	cmp	r4, r2
 8006d4c:	d002      	beq.n	8006d54 <std+0x48>
 8006d4e:	33d0      	adds	r3, #208	@ 0xd0
 8006d50:	429c      	cmp	r4, r3
 8006d52:	d105      	bne.n	8006d60 <std+0x54>
 8006d54:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 8006d58:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8006d5c:	f000 b99e 	b.w	800709c <__retarget_lock_init_recursive>
 8006d60:	bd10      	pop	{r4, pc}
 8006d62:	bf00      	nop
 8006d64:	08006ef9 	.word	0x08006ef9
 8006d68:	08006f1b 	.word	0x08006f1b
 8006d6c:	08006f53 	.word	0x08006f53
 8006d70:	08006f77 	.word	0x08006f77
 8006d74:	20000604 	.word	0x20000604

08006d78 <stdio_exit_handler>:
 8006d78:	4a02      	ldr	r2, [pc, #8]	@ (8006d84 <stdio_exit_handler+0xc>)
 8006d7a:	4903      	ldr	r1, [pc, #12]	@ (8006d88 <stdio_exit_handler+0x10>)
 8006d7c:	4803      	ldr	r0, [pc, #12]	@ (8006d8c <stdio_exit_handler+0x14>)
 8006d7e:	f000 b869 	b.w	8006e54 <_fwalk_sglue>
 8006d82:	bf00      	nop
 8006d84:	2000000c 	.word	0x2000000c
 8006d88:	080089fd 	.word	0x080089fd
 8006d8c:	2000001c 	.word	0x2000001c

08006d90 <cleanup_stdio>:
 8006d90:	6841      	ldr	r1, [r0, #4]
 8006d92:	4b0c      	ldr	r3, [pc, #48]	@ (8006dc4 <cleanup_stdio+0x34>)
 8006d94:	4299      	cmp	r1, r3
 8006d96:	b510      	push	{r4, lr}
 8006d98:	4604      	mov	r4, r0
 8006d9a:	d001      	beq.n	8006da0 <cleanup_stdio+0x10>
 8006d9c:	f001 fe2e 	bl	80089fc <_fflush_r>
 8006da0:	68a1      	ldr	r1, [r4, #8]
 8006da2:	4b09      	ldr	r3, [pc, #36]	@ (8006dc8 <cleanup_stdio+0x38>)
 8006da4:	4299      	cmp	r1, r3
 8006da6:	d002      	beq.n	8006dae <cleanup_stdio+0x1e>
 8006da8:	4620      	mov	r0, r4
 8006daa:	f001 fe27 	bl	80089fc <_fflush_r>
 8006dae:	68e1      	ldr	r1, [r4, #12]
 8006db0:	4b06      	ldr	r3, [pc, #24]	@ (8006dcc <cleanup_stdio+0x3c>)
 8006db2:	4299      	cmp	r1, r3
 8006db4:	d004      	beq.n	8006dc0 <cleanup_stdio+0x30>
 8006db6:	4620      	mov	r0, r4
 8006db8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8006dbc:	f001 be1e 	b.w	80089fc <_fflush_r>
 8006dc0:	bd10      	pop	{r4, pc}
 8006dc2:	bf00      	nop
 8006dc4:	20000604 	.word	0x20000604
 8006dc8:	2000066c 	.word	0x2000066c
 8006dcc:	200006d4 	.word	0x200006d4

08006dd0 <global_stdio_init.part.0>:
 8006dd0:	b510      	push	{r4, lr}
 8006dd2:	4b0b      	ldr	r3, [pc, #44]	@ (8006e00 <global_stdio_init.part.0+0x30>)
 8006dd4:	4c0b      	ldr	r4, [pc, #44]	@ (8006e04 <global_stdio_init.part.0+0x34>)
 8006dd6:	4a0c      	ldr	r2, [pc, #48]	@ (8006e08 <global_stdio_init.part.0+0x38>)
 8006dd8:	601a      	str	r2, [r3, #0]
 8006dda:	4620      	mov	r0, r4
 8006ddc:	2200      	movs	r2, #0
 8006dde:	2104      	movs	r1, #4
 8006de0:	f7ff ff94 	bl	8006d0c <std>
 8006de4:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 8006de8:	2201      	movs	r2, #1
 8006dea:	2109      	movs	r1, #9
 8006dec:	f7ff ff8e 	bl	8006d0c <std>
 8006df0:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 8006df4:	2202      	movs	r2, #2
 8006df6:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8006dfa:	2112      	movs	r1, #18
 8006dfc:	f7ff bf86 	b.w	8006d0c <std>
 8006e00:	2000073c 	.word	0x2000073c
 8006e04:	20000604 	.word	0x20000604
 8006e08:	08006d79 	.word	0x08006d79

08006e0c <__sfp_lock_acquire>:
 8006e0c:	4801      	ldr	r0, [pc, #4]	@ (8006e14 <__sfp_lock_acquire+0x8>)
 8006e0e:	f000 b946 	b.w	800709e <__retarget_lock_acquire_recursive>
 8006e12:	bf00      	nop
 8006e14:	20000745 	.word	0x20000745

08006e18 <__sfp_lock_release>:
 8006e18:	4801      	ldr	r0, [pc, #4]	@ (8006e20 <__sfp_lock_release+0x8>)
 8006e1a:	f000 b941 	b.w	80070a0 <__retarget_lock_release_recursive>
 8006e1e:	bf00      	nop
 8006e20:	20000745 	.word	0x20000745

08006e24 <__sinit>:
 8006e24:	b510      	push	{r4, lr}
 8006e26:	4604      	mov	r4, r0
 8006e28:	f7ff fff0 	bl	8006e0c <__sfp_lock_acquire>
 8006e2c:	6a23      	ldr	r3, [r4, #32]
 8006e2e:	b11b      	cbz	r3, 8006e38 <__sinit+0x14>
 8006e30:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8006e34:	f7ff bff0 	b.w	8006e18 <__sfp_lock_release>
 8006e38:	4b04      	ldr	r3, [pc, #16]	@ (8006e4c <__sinit+0x28>)
 8006e3a:	6223      	str	r3, [r4, #32]
 8006e3c:	4b04      	ldr	r3, [pc, #16]	@ (8006e50 <__sinit+0x2c>)
 8006e3e:	681b      	ldr	r3, [r3, #0]
 8006e40:	2b00      	cmp	r3, #0
 8006e42:	d1f5      	bne.n	8006e30 <__sinit+0xc>
 8006e44:	f7ff ffc4 	bl	8006dd0 <global_stdio_init.part.0>
 8006e48:	e7f2      	b.n	8006e30 <__sinit+0xc>
 8006e4a:	bf00      	nop
 8006e4c:	08006d91 	.word	0x08006d91
 8006e50:	2000073c 	.word	0x2000073c

08006e54 <_fwalk_sglue>:
 8006e54:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8006e58:	4607      	mov	r7, r0
 8006e5a:	4688      	mov	r8, r1
 8006e5c:	4614      	mov	r4, r2
 8006e5e:	2600      	movs	r6, #0
 8006e60:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8006e64:	f1b9 0901 	subs.w	r9, r9, #1
 8006e68:	d505      	bpl.n	8006e76 <_fwalk_sglue+0x22>
 8006e6a:	6824      	ldr	r4, [r4, #0]
 8006e6c:	2c00      	cmp	r4, #0
 8006e6e:	d1f7      	bne.n	8006e60 <_fwalk_sglue+0xc>
 8006e70:	4630      	mov	r0, r6
 8006e72:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8006e76:	89ab      	ldrh	r3, [r5, #12]
 8006e78:	2b01      	cmp	r3, #1
 8006e7a:	d907      	bls.n	8006e8c <_fwalk_sglue+0x38>
 8006e7c:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8006e80:	3301      	adds	r3, #1
 8006e82:	d003      	beq.n	8006e8c <_fwalk_sglue+0x38>
 8006e84:	4629      	mov	r1, r5
 8006e86:	4638      	mov	r0, r7
 8006e88:	47c0      	blx	r8
 8006e8a:	4306      	orrs	r6, r0
 8006e8c:	3568      	adds	r5, #104	@ 0x68
 8006e8e:	e7e9      	b.n	8006e64 <_fwalk_sglue+0x10>

08006e90 <sniprintf>:
 8006e90:	b40c      	push	{r2, r3}
 8006e92:	b530      	push	{r4, r5, lr}
 8006e94:	4b17      	ldr	r3, [pc, #92]	@ (8006ef4 <sniprintf+0x64>)
 8006e96:	1e0c      	subs	r4, r1, #0
 8006e98:	681d      	ldr	r5, [r3, #0]
 8006e9a:	b09d      	sub	sp, #116	@ 0x74
 8006e9c:	da08      	bge.n	8006eb0 <sniprintf+0x20>
 8006e9e:	238b      	movs	r3, #139	@ 0x8b
 8006ea0:	602b      	str	r3, [r5, #0]
 8006ea2:	f04f 30ff 	mov.w	r0, #4294967295
 8006ea6:	b01d      	add	sp, #116	@ 0x74
 8006ea8:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8006eac:	b002      	add	sp, #8
 8006eae:	4770      	bx	lr
 8006eb0:	f44f 7302 	mov.w	r3, #520	@ 0x208
 8006eb4:	f8ad 3014 	strh.w	r3, [sp, #20]
 8006eb8:	bf14      	ite	ne
 8006eba:	f104 33ff 	addne.w	r3, r4, #4294967295
 8006ebe:	4623      	moveq	r3, r4
 8006ec0:	9304      	str	r3, [sp, #16]
 8006ec2:	9307      	str	r3, [sp, #28]
 8006ec4:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8006ec8:	9002      	str	r0, [sp, #8]
 8006eca:	9006      	str	r0, [sp, #24]
 8006ecc:	f8ad 3016 	strh.w	r3, [sp, #22]
 8006ed0:	9a20      	ldr	r2, [sp, #128]	@ 0x80
 8006ed2:	ab21      	add	r3, sp, #132	@ 0x84
 8006ed4:	a902      	add	r1, sp, #8
 8006ed6:	4628      	mov	r0, r5
 8006ed8:	9301      	str	r3, [sp, #4]
 8006eda:	f001 fc0f 	bl	80086fc <_svfiprintf_r>
 8006ede:	1c43      	adds	r3, r0, #1
 8006ee0:	bfbc      	itt	lt
 8006ee2:	238b      	movlt	r3, #139	@ 0x8b
 8006ee4:	602b      	strlt	r3, [r5, #0]
 8006ee6:	2c00      	cmp	r4, #0
 8006ee8:	d0dd      	beq.n	8006ea6 <sniprintf+0x16>
 8006eea:	9b02      	ldr	r3, [sp, #8]
 8006eec:	2200      	movs	r2, #0
 8006eee:	701a      	strb	r2, [r3, #0]
 8006ef0:	e7d9      	b.n	8006ea6 <sniprintf+0x16>
 8006ef2:	bf00      	nop
 8006ef4:	20000018 	.word	0x20000018

08006ef8 <__sread>:
 8006ef8:	b510      	push	{r4, lr}
 8006efa:	460c      	mov	r4, r1
 8006efc:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8006f00:	f000 f87e 	bl	8007000 <_read_r>
 8006f04:	2800      	cmp	r0, #0
 8006f06:	bfab      	itete	ge
 8006f08:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 8006f0a:	89a3      	ldrhlt	r3, [r4, #12]
 8006f0c:	181b      	addge	r3, r3, r0
 8006f0e:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 8006f12:	bfac      	ite	ge
 8006f14:	6563      	strge	r3, [r4, #84]	@ 0x54
 8006f16:	81a3      	strhlt	r3, [r4, #12]
 8006f18:	bd10      	pop	{r4, pc}

08006f1a <__swrite>:
 8006f1a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8006f1e:	461f      	mov	r7, r3
 8006f20:	898b      	ldrh	r3, [r1, #12]
 8006f22:	05db      	lsls	r3, r3, #23
 8006f24:	4605      	mov	r5, r0
 8006f26:	460c      	mov	r4, r1
 8006f28:	4616      	mov	r6, r2
 8006f2a:	d505      	bpl.n	8006f38 <__swrite+0x1e>
 8006f2c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8006f30:	2302      	movs	r3, #2
 8006f32:	2200      	movs	r2, #0
 8006f34:	f000 f852 	bl	8006fdc <_lseek_r>
 8006f38:	89a3      	ldrh	r3, [r4, #12]
 8006f3a:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8006f3e:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8006f42:	81a3      	strh	r3, [r4, #12]
 8006f44:	4632      	mov	r2, r6
 8006f46:	463b      	mov	r3, r7
 8006f48:	4628      	mov	r0, r5
 8006f4a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8006f4e:	f000 b869 	b.w	8007024 <_write_r>

08006f52 <__sseek>:
 8006f52:	b510      	push	{r4, lr}
 8006f54:	460c      	mov	r4, r1
 8006f56:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8006f5a:	f000 f83f 	bl	8006fdc <_lseek_r>
 8006f5e:	1c43      	adds	r3, r0, #1
 8006f60:	89a3      	ldrh	r3, [r4, #12]
 8006f62:	bf15      	itete	ne
 8006f64:	6560      	strne	r0, [r4, #84]	@ 0x54
 8006f66:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 8006f6a:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 8006f6e:	81a3      	strheq	r3, [r4, #12]
 8006f70:	bf18      	it	ne
 8006f72:	81a3      	strhne	r3, [r4, #12]
 8006f74:	bd10      	pop	{r4, pc}

08006f76 <__sclose>:
 8006f76:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8006f7a:	f000 b81f 	b.w	8006fbc <_close_r>

08006f7e <memset>:
 8006f7e:	4402      	add	r2, r0
 8006f80:	4603      	mov	r3, r0
 8006f82:	4293      	cmp	r3, r2
 8006f84:	d100      	bne.n	8006f88 <memset+0xa>
 8006f86:	4770      	bx	lr
 8006f88:	f803 1b01 	strb.w	r1, [r3], #1
 8006f8c:	e7f9      	b.n	8006f82 <memset+0x4>

08006f8e <strncpy>:
 8006f8e:	b510      	push	{r4, lr}
 8006f90:	3901      	subs	r1, #1
 8006f92:	4603      	mov	r3, r0
 8006f94:	b132      	cbz	r2, 8006fa4 <strncpy+0x16>
 8006f96:	f811 4f01 	ldrb.w	r4, [r1, #1]!
 8006f9a:	f803 4b01 	strb.w	r4, [r3], #1
 8006f9e:	3a01      	subs	r2, #1
 8006fa0:	2c00      	cmp	r4, #0
 8006fa2:	d1f7      	bne.n	8006f94 <strncpy+0x6>
 8006fa4:	441a      	add	r2, r3
 8006fa6:	2100      	movs	r1, #0
 8006fa8:	4293      	cmp	r3, r2
 8006faa:	d100      	bne.n	8006fae <strncpy+0x20>
 8006fac:	bd10      	pop	{r4, pc}
 8006fae:	f803 1b01 	strb.w	r1, [r3], #1
 8006fb2:	e7f9      	b.n	8006fa8 <strncpy+0x1a>

08006fb4 <_localeconv_r>:
 8006fb4:	4800      	ldr	r0, [pc, #0]	@ (8006fb8 <_localeconv_r+0x4>)
 8006fb6:	4770      	bx	lr
 8006fb8:	20000158 	.word	0x20000158

08006fbc <_close_r>:
 8006fbc:	b538      	push	{r3, r4, r5, lr}
 8006fbe:	4d06      	ldr	r5, [pc, #24]	@ (8006fd8 <_close_r+0x1c>)
 8006fc0:	2300      	movs	r3, #0
 8006fc2:	4604      	mov	r4, r0
 8006fc4:	4608      	mov	r0, r1
 8006fc6:	602b      	str	r3, [r5, #0]
 8006fc8:	f7fa ffda 	bl	8001f80 <_close>
 8006fcc:	1c43      	adds	r3, r0, #1
 8006fce:	d102      	bne.n	8006fd6 <_close_r+0x1a>
 8006fd0:	682b      	ldr	r3, [r5, #0]
 8006fd2:	b103      	cbz	r3, 8006fd6 <_close_r+0x1a>
 8006fd4:	6023      	str	r3, [r4, #0]
 8006fd6:	bd38      	pop	{r3, r4, r5, pc}
 8006fd8:	20000740 	.word	0x20000740

08006fdc <_lseek_r>:
 8006fdc:	b538      	push	{r3, r4, r5, lr}
 8006fde:	4d07      	ldr	r5, [pc, #28]	@ (8006ffc <_lseek_r+0x20>)
 8006fe0:	4604      	mov	r4, r0
 8006fe2:	4608      	mov	r0, r1
 8006fe4:	4611      	mov	r1, r2
 8006fe6:	2200      	movs	r2, #0
 8006fe8:	602a      	str	r2, [r5, #0]
 8006fea:	461a      	mov	r2, r3
 8006fec:	f7fa ffef 	bl	8001fce <_lseek>
 8006ff0:	1c43      	adds	r3, r0, #1
 8006ff2:	d102      	bne.n	8006ffa <_lseek_r+0x1e>
 8006ff4:	682b      	ldr	r3, [r5, #0]
 8006ff6:	b103      	cbz	r3, 8006ffa <_lseek_r+0x1e>
 8006ff8:	6023      	str	r3, [r4, #0]
 8006ffa:	bd38      	pop	{r3, r4, r5, pc}
 8006ffc:	20000740 	.word	0x20000740

08007000 <_read_r>:
 8007000:	b538      	push	{r3, r4, r5, lr}
 8007002:	4d07      	ldr	r5, [pc, #28]	@ (8007020 <_read_r+0x20>)
 8007004:	4604      	mov	r4, r0
 8007006:	4608      	mov	r0, r1
 8007008:	4611      	mov	r1, r2
 800700a:	2200      	movs	r2, #0
 800700c:	602a      	str	r2, [r5, #0]
 800700e:	461a      	mov	r2, r3
 8007010:	f7fa ff7d 	bl	8001f0e <_read>
 8007014:	1c43      	adds	r3, r0, #1
 8007016:	d102      	bne.n	800701e <_read_r+0x1e>
 8007018:	682b      	ldr	r3, [r5, #0]
 800701a:	b103      	cbz	r3, 800701e <_read_r+0x1e>
 800701c:	6023      	str	r3, [r4, #0]
 800701e:	bd38      	pop	{r3, r4, r5, pc}
 8007020:	20000740 	.word	0x20000740

08007024 <_write_r>:
 8007024:	b538      	push	{r3, r4, r5, lr}
 8007026:	4d07      	ldr	r5, [pc, #28]	@ (8007044 <_write_r+0x20>)
 8007028:	4604      	mov	r4, r0
 800702a:	4608      	mov	r0, r1
 800702c:	4611      	mov	r1, r2
 800702e:	2200      	movs	r2, #0
 8007030:	602a      	str	r2, [r5, #0]
 8007032:	461a      	mov	r2, r3
 8007034:	f7fa ff88 	bl	8001f48 <_write>
 8007038:	1c43      	adds	r3, r0, #1
 800703a:	d102      	bne.n	8007042 <_write_r+0x1e>
 800703c:	682b      	ldr	r3, [r5, #0]
 800703e:	b103      	cbz	r3, 8007042 <_write_r+0x1e>
 8007040:	6023      	str	r3, [r4, #0]
 8007042:	bd38      	pop	{r3, r4, r5, pc}
 8007044:	20000740 	.word	0x20000740

08007048 <__errno>:
 8007048:	4b01      	ldr	r3, [pc, #4]	@ (8007050 <__errno+0x8>)
 800704a:	6818      	ldr	r0, [r3, #0]
 800704c:	4770      	bx	lr
 800704e:	bf00      	nop
 8007050:	20000018 	.word	0x20000018

08007054 <__libc_init_array>:
 8007054:	b570      	push	{r4, r5, r6, lr}
 8007056:	4d0d      	ldr	r5, [pc, #52]	@ (800708c <__libc_init_array+0x38>)
 8007058:	4c0d      	ldr	r4, [pc, #52]	@ (8007090 <__libc_init_array+0x3c>)
 800705a:	1b64      	subs	r4, r4, r5
 800705c:	10a4      	asrs	r4, r4, #2
 800705e:	2600      	movs	r6, #0
 8007060:	42a6      	cmp	r6, r4
 8007062:	d109      	bne.n	8007078 <__libc_init_array+0x24>
 8007064:	4d0b      	ldr	r5, [pc, #44]	@ (8007094 <__libc_init_array+0x40>)
 8007066:	4c0c      	ldr	r4, [pc, #48]	@ (8007098 <__libc_init_array+0x44>)
 8007068:	f003 f8ea 	bl	800a240 <_init>
 800706c:	1b64      	subs	r4, r4, r5
 800706e:	10a4      	asrs	r4, r4, #2
 8007070:	2600      	movs	r6, #0
 8007072:	42a6      	cmp	r6, r4
 8007074:	d105      	bne.n	8007082 <__libc_init_array+0x2e>
 8007076:	bd70      	pop	{r4, r5, r6, pc}
 8007078:	f855 3b04 	ldr.w	r3, [r5], #4
 800707c:	4798      	blx	r3
 800707e:	3601      	adds	r6, #1
 8007080:	e7ee      	b.n	8007060 <__libc_init_array+0xc>
 8007082:	f855 3b04 	ldr.w	r3, [r5], #4
 8007086:	4798      	blx	r3
 8007088:	3601      	adds	r6, #1
 800708a:	e7f2      	b.n	8007072 <__libc_init_array+0x1e>
 800708c:	0800a888 	.word	0x0800a888
 8007090:	0800a888 	.word	0x0800a888
 8007094:	0800a888 	.word	0x0800a888
 8007098:	0800a88c 	.word	0x0800a88c

0800709c <__retarget_lock_init_recursive>:
 800709c:	4770      	bx	lr

0800709e <__retarget_lock_acquire_recursive>:
 800709e:	4770      	bx	lr

080070a0 <__retarget_lock_release_recursive>:
 80070a0:	4770      	bx	lr

080070a2 <quorem>:
 80070a2:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80070a6:	6903      	ldr	r3, [r0, #16]
 80070a8:	690c      	ldr	r4, [r1, #16]
 80070aa:	42a3      	cmp	r3, r4
 80070ac:	4607      	mov	r7, r0
 80070ae:	db7e      	blt.n	80071ae <quorem+0x10c>
 80070b0:	3c01      	subs	r4, #1
 80070b2:	f101 0814 	add.w	r8, r1, #20
 80070b6:	00a3      	lsls	r3, r4, #2
 80070b8:	f100 0514 	add.w	r5, r0, #20
 80070bc:	9300      	str	r3, [sp, #0]
 80070be:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 80070c2:	9301      	str	r3, [sp, #4]
 80070c4:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 80070c8:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 80070cc:	3301      	adds	r3, #1
 80070ce:	429a      	cmp	r2, r3
 80070d0:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 80070d4:	fbb2 f6f3 	udiv	r6, r2, r3
 80070d8:	d32e      	bcc.n	8007138 <quorem+0x96>
 80070da:	f04f 0a00 	mov.w	sl, #0
 80070de:	46c4      	mov	ip, r8
 80070e0:	46ae      	mov	lr, r5
 80070e2:	46d3      	mov	fp, sl
 80070e4:	f85c 3b04 	ldr.w	r3, [ip], #4
 80070e8:	b298      	uxth	r0, r3
 80070ea:	fb06 a000 	mla	r0, r6, r0, sl
 80070ee:	0c02      	lsrs	r2, r0, #16
 80070f0:	0c1b      	lsrs	r3, r3, #16
 80070f2:	fb06 2303 	mla	r3, r6, r3, r2
 80070f6:	f8de 2000 	ldr.w	r2, [lr]
 80070fa:	b280      	uxth	r0, r0
 80070fc:	b292      	uxth	r2, r2
 80070fe:	1a12      	subs	r2, r2, r0
 8007100:	445a      	add	r2, fp
 8007102:	f8de 0000 	ldr.w	r0, [lr]
 8007106:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 800710a:	b29b      	uxth	r3, r3
 800710c:	ebc3 4322 	rsb	r3, r3, r2, asr #16
 8007110:	eb03 4310 	add.w	r3, r3, r0, lsr #16
 8007114:	b292      	uxth	r2, r2
 8007116:	ea42 4203 	orr.w	r2, r2, r3, lsl #16
 800711a:	45e1      	cmp	r9, ip
 800711c:	f84e 2b04 	str.w	r2, [lr], #4
 8007120:	ea4f 4b23 	mov.w	fp, r3, asr #16
 8007124:	d2de      	bcs.n	80070e4 <quorem+0x42>
 8007126:	9b00      	ldr	r3, [sp, #0]
 8007128:	58eb      	ldr	r3, [r5, r3]
 800712a:	b92b      	cbnz	r3, 8007138 <quorem+0x96>
 800712c:	9b01      	ldr	r3, [sp, #4]
 800712e:	3b04      	subs	r3, #4
 8007130:	429d      	cmp	r5, r3
 8007132:	461a      	mov	r2, r3
 8007134:	d32f      	bcc.n	8007196 <quorem+0xf4>
 8007136:	613c      	str	r4, [r7, #16]
 8007138:	4638      	mov	r0, r7
 800713a:	f001 f97b 	bl	8008434 <__mcmp>
 800713e:	2800      	cmp	r0, #0
 8007140:	db25      	blt.n	800718e <quorem+0xec>
 8007142:	4629      	mov	r1, r5
 8007144:	2000      	movs	r0, #0
 8007146:	f858 2b04 	ldr.w	r2, [r8], #4
 800714a:	f8d1 c000 	ldr.w	ip, [r1]
 800714e:	fa1f fe82 	uxth.w	lr, r2
 8007152:	fa1f f38c 	uxth.w	r3, ip
 8007156:	eba3 030e 	sub.w	r3, r3, lr
 800715a:	4403      	add	r3, r0
 800715c:	0c12      	lsrs	r2, r2, #16
 800715e:	ebc2 4223 	rsb	r2, r2, r3, asr #16
 8007162:	eb02 421c 	add.w	r2, r2, ip, lsr #16
 8007166:	b29b      	uxth	r3, r3
 8007168:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800716c:	45c1      	cmp	r9, r8
 800716e:	f841 3b04 	str.w	r3, [r1], #4
 8007172:	ea4f 4022 	mov.w	r0, r2, asr #16
 8007176:	d2e6      	bcs.n	8007146 <quorem+0xa4>
 8007178:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800717c:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8007180:	b922      	cbnz	r2, 800718c <quorem+0xea>
 8007182:	3b04      	subs	r3, #4
 8007184:	429d      	cmp	r5, r3
 8007186:	461a      	mov	r2, r3
 8007188:	d30b      	bcc.n	80071a2 <quorem+0x100>
 800718a:	613c      	str	r4, [r7, #16]
 800718c:	3601      	adds	r6, #1
 800718e:	4630      	mov	r0, r6
 8007190:	b003      	add	sp, #12
 8007192:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007196:	6812      	ldr	r2, [r2, #0]
 8007198:	3b04      	subs	r3, #4
 800719a:	2a00      	cmp	r2, #0
 800719c:	d1cb      	bne.n	8007136 <quorem+0x94>
 800719e:	3c01      	subs	r4, #1
 80071a0:	e7c6      	b.n	8007130 <quorem+0x8e>
 80071a2:	6812      	ldr	r2, [r2, #0]
 80071a4:	3b04      	subs	r3, #4
 80071a6:	2a00      	cmp	r2, #0
 80071a8:	d1ef      	bne.n	800718a <quorem+0xe8>
 80071aa:	3c01      	subs	r4, #1
 80071ac:	e7ea      	b.n	8007184 <quorem+0xe2>
 80071ae:	2000      	movs	r0, #0
 80071b0:	e7ee      	b.n	8007190 <quorem+0xee>
 80071b2:	0000      	movs	r0, r0
 80071b4:	0000      	movs	r0, r0
	...

080071b8 <_dtoa_r>:
 80071b8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80071bc:	69c7      	ldr	r7, [r0, #28]
 80071be:	b099      	sub	sp, #100	@ 0x64
 80071c0:	ed8d 0b02 	vstr	d0, [sp, #8]
 80071c4:	ec55 4b10 	vmov	r4, r5, d0
 80071c8:	9e22      	ldr	r6, [sp, #136]	@ 0x88
 80071ca:	9109      	str	r1, [sp, #36]	@ 0x24
 80071cc:	4683      	mov	fp, r0
 80071ce:	920e      	str	r2, [sp, #56]	@ 0x38
 80071d0:	9313      	str	r3, [sp, #76]	@ 0x4c
 80071d2:	b97f      	cbnz	r7, 80071f4 <_dtoa_r+0x3c>
 80071d4:	2010      	movs	r0, #16
 80071d6:	f000 fdfd 	bl	8007dd4 <malloc>
 80071da:	4602      	mov	r2, r0
 80071dc:	f8cb 001c 	str.w	r0, [fp, #28]
 80071e0:	b920      	cbnz	r0, 80071ec <_dtoa_r+0x34>
 80071e2:	4ba7      	ldr	r3, [pc, #668]	@ (8007480 <_dtoa_r+0x2c8>)
 80071e4:	21ef      	movs	r1, #239	@ 0xef
 80071e6:	48a7      	ldr	r0, [pc, #668]	@ (8007484 <_dtoa_r+0x2cc>)
 80071e8:	f001 fc68 	bl	8008abc <__assert_func>
 80071ec:	e9c0 7701 	strd	r7, r7, [r0, #4]
 80071f0:	6007      	str	r7, [r0, #0]
 80071f2:	60c7      	str	r7, [r0, #12]
 80071f4:	f8db 301c 	ldr.w	r3, [fp, #28]
 80071f8:	6819      	ldr	r1, [r3, #0]
 80071fa:	b159      	cbz	r1, 8007214 <_dtoa_r+0x5c>
 80071fc:	685a      	ldr	r2, [r3, #4]
 80071fe:	604a      	str	r2, [r1, #4]
 8007200:	2301      	movs	r3, #1
 8007202:	4093      	lsls	r3, r2
 8007204:	608b      	str	r3, [r1, #8]
 8007206:	4658      	mov	r0, fp
 8007208:	f000 feda 	bl	8007fc0 <_Bfree>
 800720c:	f8db 301c 	ldr.w	r3, [fp, #28]
 8007210:	2200      	movs	r2, #0
 8007212:	601a      	str	r2, [r3, #0]
 8007214:	1e2b      	subs	r3, r5, #0
 8007216:	bfb9      	ittee	lt
 8007218:	f023 4300 	biclt.w	r3, r3, #2147483648	@ 0x80000000
 800721c:	9303      	strlt	r3, [sp, #12]
 800721e:	2300      	movge	r3, #0
 8007220:	6033      	strge	r3, [r6, #0]
 8007222:	9f03      	ldr	r7, [sp, #12]
 8007224:	4b98      	ldr	r3, [pc, #608]	@ (8007488 <_dtoa_r+0x2d0>)
 8007226:	bfbc      	itt	lt
 8007228:	2201      	movlt	r2, #1
 800722a:	6032      	strlt	r2, [r6, #0]
 800722c:	43bb      	bics	r3, r7
 800722e:	d112      	bne.n	8007256 <_dtoa_r+0x9e>
 8007230:	9a13      	ldr	r2, [sp, #76]	@ 0x4c
 8007232:	f242 730f 	movw	r3, #9999	@ 0x270f
 8007236:	6013      	str	r3, [r2, #0]
 8007238:	f3c7 0313 	ubfx	r3, r7, #0, #20
 800723c:	4323      	orrs	r3, r4
 800723e:	f000 854d 	beq.w	8007cdc <_dtoa_r+0xb24>
 8007242:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 8007244:	f8df a254 	ldr.w	sl, [pc, #596]	@ 800749c <_dtoa_r+0x2e4>
 8007248:	2b00      	cmp	r3, #0
 800724a:	f000 854f 	beq.w	8007cec <_dtoa_r+0xb34>
 800724e:	f10a 0303 	add.w	r3, sl, #3
 8007252:	f000 bd49 	b.w	8007ce8 <_dtoa_r+0xb30>
 8007256:	ed9d 7b02 	vldr	d7, [sp, #8]
 800725a:	2200      	movs	r2, #0
 800725c:	ec51 0b17 	vmov	r0, r1, d7
 8007260:	2300      	movs	r3, #0
 8007262:	ed8d 7b0c 	vstr	d7, [sp, #48]	@ 0x30
 8007266:	f7f9 fc4f 	bl	8000b08 <__aeabi_dcmpeq>
 800726a:	4680      	mov	r8, r0
 800726c:	b158      	cbz	r0, 8007286 <_dtoa_r+0xce>
 800726e:	9a13      	ldr	r2, [sp, #76]	@ 0x4c
 8007270:	2301      	movs	r3, #1
 8007272:	6013      	str	r3, [r2, #0]
 8007274:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 8007276:	b113      	cbz	r3, 800727e <_dtoa_r+0xc6>
 8007278:	9a23      	ldr	r2, [sp, #140]	@ 0x8c
 800727a:	4b84      	ldr	r3, [pc, #528]	@ (800748c <_dtoa_r+0x2d4>)
 800727c:	6013      	str	r3, [r2, #0]
 800727e:	f8df a220 	ldr.w	sl, [pc, #544]	@ 80074a0 <_dtoa_r+0x2e8>
 8007282:	f000 bd33 	b.w	8007cec <_dtoa_r+0xb34>
 8007286:	ed9d 0b0c 	vldr	d0, [sp, #48]	@ 0x30
 800728a:	aa16      	add	r2, sp, #88	@ 0x58
 800728c:	a917      	add	r1, sp, #92	@ 0x5c
 800728e:	4658      	mov	r0, fp
 8007290:	f001 f980 	bl	8008594 <__d2b>
 8007294:	f3c7 560a 	ubfx	r6, r7, #20, #11
 8007298:	4681      	mov	r9, r0
 800729a:	2e00      	cmp	r6, #0
 800729c:	d077      	beq.n	800738e <_dtoa_r+0x1d6>
 800729e:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 80072a0:	f8cd 8050 	str.w	r8, [sp, #80]	@ 0x50
 80072a4:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80072a8:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 80072ac:	f043 537f 	orr.w	r3, r3, #1069547520	@ 0x3fc00000
 80072b0:	f443 1340 	orr.w	r3, r3, #3145728	@ 0x300000
 80072b4:	f2a6 36ff 	subw	r6, r6, #1023	@ 0x3ff
 80072b8:	4619      	mov	r1, r3
 80072ba:	2200      	movs	r2, #0
 80072bc:	4b74      	ldr	r3, [pc, #464]	@ (8007490 <_dtoa_r+0x2d8>)
 80072be:	f7f9 f803 	bl	80002c8 <__aeabi_dsub>
 80072c2:	a369      	add	r3, pc, #420	@ (adr r3, 8007468 <_dtoa_r+0x2b0>)
 80072c4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80072c8:	f7f9 f9b6 	bl	8000638 <__aeabi_dmul>
 80072cc:	a368      	add	r3, pc, #416	@ (adr r3, 8007470 <_dtoa_r+0x2b8>)
 80072ce:	e9d3 2300 	ldrd	r2, r3, [r3]
 80072d2:	f7f8 fffb 	bl	80002cc <__adddf3>
 80072d6:	4604      	mov	r4, r0
 80072d8:	4630      	mov	r0, r6
 80072da:	460d      	mov	r5, r1
 80072dc:	f7f9 f942 	bl	8000564 <__aeabi_i2d>
 80072e0:	a365      	add	r3, pc, #404	@ (adr r3, 8007478 <_dtoa_r+0x2c0>)
 80072e2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80072e6:	f7f9 f9a7 	bl	8000638 <__aeabi_dmul>
 80072ea:	4602      	mov	r2, r0
 80072ec:	460b      	mov	r3, r1
 80072ee:	4620      	mov	r0, r4
 80072f0:	4629      	mov	r1, r5
 80072f2:	f7f8 ffeb 	bl	80002cc <__adddf3>
 80072f6:	4604      	mov	r4, r0
 80072f8:	460d      	mov	r5, r1
 80072fa:	f7f9 fc4d 	bl	8000b98 <__aeabi_d2iz>
 80072fe:	2200      	movs	r2, #0
 8007300:	4607      	mov	r7, r0
 8007302:	2300      	movs	r3, #0
 8007304:	4620      	mov	r0, r4
 8007306:	4629      	mov	r1, r5
 8007308:	f7f9 fc08 	bl	8000b1c <__aeabi_dcmplt>
 800730c:	b140      	cbz	r0, 8007320 <_dtoa_r+0x168>
 800730e:	4638      	mov	r0, r7
 8007310:	f7f9 f928 	bl	8000564 <__aeabi_i2d>
 8007314:	4622      	mov	r2, r4
 8007316:	462b      	mov	r3, r5
 8007318:	f7f9 fbf6 	bl	8000b08 <__aeabi_dcmpeq>
 800731c:	b900      	cbnz	r0, 8007320 <_dtoa_r+0x168>
 800731e:	3f01      	subs	r7, #1
 8007320:	2f16      	cmp	r7, #22
 8007322:	d851      	bhi.n	80073c8 <_dtoa_r+0x210>
 8007324:	4b5b      	ldr	r3, [pc, #364]	@ (8007494 <_dtoa_r+0x2dc>)
 8007326:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 800732a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800732e:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8007332:	f7f9 fbf3 	bl	8000b1c <__aeabi_dcmplt>
 8007336:	2800      	cmp	r0, #0
 8007338:	d048      	beq.n	80073cc <_dtoa_r+0x214>
 800733a:	3f01      	subs	r7, #1
 800733c:	2300      	movs	r3, #0
 800733e:	9312      	str	r3, [sp, #72]	@ 0x48
 8007340:	9b16      	ldr	r3, [sp, #88]	@ 0x58
 8007342:	1b9b      	subs	r3, r3, r6
 8007344:	1e5a      	subs	r2, r3, #1
 8007346:	bf44      	itt	mi
 8007348:	f1c3 0801 	rsbmi	r8, r3, #1
 800734c:	2300      	movmi	r3, #0
 800734e:	9208      	str	r2, [sp, #32]
 8007350:	bf54      	ite	pl
 8007352:	f04f 0800 	movpl.w	r8, #0
 8007356:	9308      	strmi	r3, [sp, #32]
 8007358:	2f00      	cmp	r7, #0
 800735a:	db39      	blt.n	80073d0 <_dtoa_r+0x218>
 800735c:	9b08      	ldr	r3, [sp, #32]
 800735e:	970f      	str	r7, [sp, #60]	@ 0x3c
 8007360:	443b      	add	r3, r7
 8007362:	9308      	str	r3, [sp, #32]
 8007364:	2300      	movs	r3, #0
 8007366:	930a      	str	r3, [sp, #40]	@ 0x28
 8007368:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800736a:	2b09      	cmp	r3, #9
 800736c:	d864      	bhi.n	8007438 <_dtoa_r+0x280>
 800736e:	2b05      	cmp	r3, #5
 8007370:	bfc4      	itt	gt
 8007372:	3b04      	subgt	r3, #4
 8007374:	9309      	strgt	r3, [sp, #36]	@ 0x24
 8007376:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8007378:	f1a3 0302 	sub.w	r3, r3, #2
 800737c:	bfcc      	ite	gt
 800737e:	2400      	movgt	r4, #0
 8007380:	2401      	movle	r4, #1
 8007382:	2b03      	cmp	r3, #3
 8007384:	d863      	bhi.n	800744e <_dtoa_r+0x296>
 8007386:	e8df f003 	tbb	[pc, r3]
 800738a:	372a      	.short	0x372a
 800738c:	5535      	.short	0x5535
 800738e:	e9dd 6316 	ldrd	r6, r3, [sp, #88]	@ 0x58
 8007392:	441e      	add	r6, r3
 8007394:	f206 4332 	addw	r3, r6, #1074	@ 0x432
 8007398:	2b20      	cmp	r3, #32
 800739a:	bfc1      	itttt	gt
 800739c:	f1c3 0340 	rsbgt	r3, r3, #64	@ 0x40
 80073a0:	409f      	lslgt	r7, r3
 80073a2:	f206 4312 	addwgt	r3, r6, #1042	@ 0x412
 80073a6:	fa24 f303 	lsrgt.w	r3, r4, r3
 80073aa:	bfd6      	itet	le
 80073ac:	f1c3 0320 	rsble	r3, r3, #32
 80073b0:	ea47 0003 	orrgt.w	r0, r7, r3
 80073b4:	fa04 f003 	lslle.w	r0, r4, r3
 80073b8:	f7f9 f8c4 	bl	8000544 <__aeabi_ui2d>
 80073bc:	2201      	movs	r2, #1
 80073be:	f1a1 73f8 	sub.w	r3, r1, #32505856	@ 0x1f00000
 80073c2:	3e01      	subs	r6, #1
 80073c4:	9214      	str	r2, [sp, #80]	@ 0x50
 80073c6:	e777      	b.n	80072b8 <_dtoa_r+0x100>
 80073c8:	2301      	movs	r3, #1
 80073ca:	e7b8      	b.n	800733e <_dtoa_r+0x186>
 80073cc:	9012      	str	r0, [sp, #72]	@ 0x48
 80073ce:	e7b7      	b.n	8007340 <_dtoa_r+0x188>
 80073d0:	427b      	negs	r3, r7
 80073d2:	930a      	str	r3, [sp, #40]	@ 0x28
 80073d4:	2300      	movs	r3, #0
 80073d6:	eba8 0807 	sub.w	r8, r8, r7
 80073da:	930f      	str	r3, [sp, #60]	@ 0x3c
 80073dc:	e7c4      	b.n	8007368 <_dtoa_r+0x1b0>
 80073de:	2300      	movs	r3, #0
 80073e0:	930b      	str	r3, [sp, #44]	@ 0x2c
 80073e2:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 80073e4:	2b00      	cmp	r3, #0
 80073e6:	dc35      	bgt.n	8007454 <_dtoa_r+0x29c>
 80073e8:	2301      	movs	r3, #1
 80073ea:	9300      	str	r3, [sp, #0]
 80073ec:	9307      	str	r3, [sp, #28]
 80073ee:	461a      	mov	r2, r3
 80073f0:	920e      	str	r2, [sp, #56]	@ 0x38
 80073f2:	e00b      	b.n	800740c <_dtoa_r+0x254>
 80073f4:	2301      	movs	r3, #1
 80073f6:	e7f3      	b.n	80073e0 <_dtoa_r+0x228>
 80073f8:	2300      	movs	r3, #0
 80073fa:	930b      	str	r3, [sp, #44]	@ 0x2c
 80073fc:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 80073fe:	18fb      	adds	r3, r7, r3
 8007400:	9300      	str	r3, [sp, #0]
 8007402:	3301      	adds	r3, #1
 8007404:	2b01      	cmp	r3, #1
 8007406:	9307      	str	r3, [sp, #28]
 8007408:	bfb8      	it	lt
 800740a:	2301      	movlt	r3, #1
 800740c:	f8db 001c 	ldr.w	r0, [fp, #28]
 8007410:	2100      	movs	r1, #0
 8007412:	2204      	movs	r2, #4
 8007414:	f102 0514 	add.w	r5, r2, #20
 8007418:	429d      	cmp	r5, r3
 800741a:	d91f      	bls.n	800745c <_dtoa_r+0x2a4>
 800741c:	6041      	str	r1, [r0, #4]
 800741e:	4658      	mov	r0, fp
 8007420:	f000 fd8e 	bl	8007f40 <_Balloc>
 8007424:	4682      	mov	sl, r0
 8007426:	2800      	cmp	r0, #0
 8007428:	d13c      	bne.n	80074a4 <_dtoa_r+0x2ec>
 800742a:	4b1b      	ldr	r3, [pc, #108]	@ (8007498 <_dtoa_r+0x2e0>)
 800742c:	4602      	mov	r2, r0
 800742e:	f240 11af 	movw	r1, #431	@ 0x1af
 8007432:	e6d8      	b.n	80071e6 <_dtoa_r+0x2e>
 8007434:	2301      	movs	r3, #1
 8007436:	e7e0      	b.n	80073fa <_dtoa_r+0x242>
 8007438:	2401      	movs	r4, #1
 800743a:	2300      	movs	r3, #0
 800743c:	9309      	str	r3, [sp, #36]	@ 0x24
 800743e:	940b      	str	r4, [sp, #44]	@ 0x2c
 8007440:	f04f 33ff 	mov.w	r3, #4294967295
 8007444:	9300      	str	r3, [sp, #0]
 8007446:	9307      	str	r3, [sp, #28]
 8007448:	2200      	movs	r2, #0
 800744a:	2312      	movs	r3, #18
 800744c:	e7d0      	b.n	80073f0 <_dtoa_r+0x238>
 800744e:	2301      	movs	r3, #1
 8007450:	930b      	str	r3, [sp, #44]	@ 0x2c
 8007452:	e7f5      	b.n	8007440 <_dtoa_r+0x288>
 8007454:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8007456:	9300      	str	r3, [sp, #0]
 8007458:	9307      	str	r3, [sp, #28]
 800745a:	e7d7      	b.n	800740c <_dtoa_r+0x254>
 800745c:	3101      	adds	r1, #1
 800745e:	0052      	lsls	r2, r2, #1
 8007460:	e7d8      	b.n	8007414 <_dtoa_r+0x25c>
 8007462:	bf00      	nop
 8007464:	f3af 8000 	nop.w
 8007468:	636f4361 	.word	0x636f4361
 800746c:	3fd287a7 	.word	0x3fd287a7
 8007470:	8b60c8b3 	.word	0x8b60c8b3
 8007474:	3fc68a28 	.word	0x3fc68a28
 8007478:	509f79fb 	.word	0x509f79fb
 800747c:	3fd34413 	.word	0x3fd34413
 8007480:	0800a379 	.word	0x0800a379
 8007484:	0800a390 	.word	0x0800a390
 8007488:	7ff00000 	.word	0x7ff00000
 800748c:	0800a349 	.word	0x0800a349
 8007490:	3ff80000 	.word	0x3ff80000
 8007494:	0800a488 	.word	0x0800a488
 8007498:	0800a3e8 	.word	0x0800a3e8
 800749c:	0800a375 	.word	0x0800a375
 80074a0:	0800a348 	.word	0x0800a348
 80074a4:	f8db 301c 	ldr.w	r3, [fp, #28]
 80074a8:	6018      	str	r0, [r3, #0]
 80074aa:	9b07      	ldr	r3, [sp, #28]
 80074ac:	2b0e      	cmp	r3, #14
 80074ae:	f200 80a4 	bhi.w	80075fa <_dtoa_r+0x442>
 80074b2:	2c00      	cmp	r4, #0
 80074b4:	f000 80a1 	beq.w	80075fa <_dtoa_r+0x442>
 80074b8:	2f00      	cmp	r7, #0
 80074ba:	dd33      	ble.n	8007524 <_dtoa_r+0x36c>
 80074bc:	4bad      	ldr	r3, [pc, #692]	@ (8007774 <_dtoa_r+0x5bc>)
 80074be:	f007 020f 	and.w	r2, r7, #15
 80074c2:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 80074c6:	ed93 7b00 	vldr	d7, [r3]
 80074ca:	05f8      	lsls	r0, r7, #23
 80074cc:	ed8d 7b04 	vstr	d7, [sp, #16]
 80074d0:	ea4f 1427 	mov.w	r4, r7, asr #4
 80074d4:	d516      	bpl.n	8007504 <_dtoa_r+0x34c>
 80074d6:	4ba8      	ldr	r3, [pc, #672]	@ (8007778 <_dtoa_r+0x5c0>)
 80074d8:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 80074dc:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 80074e0:	f7f9 f9d4 	bl	800088c <__aeabi_ddiv>
 80074e4:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80074e8:	f004 040f 	and.w	r4, r4, #15
 80074ec:	2603      	movs	r6, #3
 80074ee:	4da2      	ldr	r5, [pc, #648]	@ (8007778 <_dtoa_r+0x5c0>)
 80074f0:	b954      	cbnz	r4, 8007508 <_dtoa_r+0x350>
 80074f2:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 80074f6:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80074fa:	f7f9 f9c7 	bl	800088c <__aeabi_ddiv>
 80074fe:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8007502:	e028      	b.n	8007556 <_dtoa_r+0x39e>
 8007504:	2602      	movs	r6, #2
 8007506:	e7f2      	b.n	80074ee <_dtoa_r+0x336>
 8007508:	07e1      	lsls	r1, r4, #31
 800750a:	d508      	bpl.n	800751e <_dtoa_r+0x366>
 800750c:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8007510:	e9d5 2300 	ldrd	r2, r3, [r5]
 8007514:	f7f9 f890 	bl	8000638 <__aeabi_dmul>
 8007518:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800751c:	3601      	adds	r6, #1
 800751e:	1064      	asrs	r4, r4, #1
 8007520:	3508      	adds	r5, #8
 8007522:	e7e5      	b.n	80074f0 <_dtoa_r+0x338>
 8007524:	f000 80d2 	beq.w	80076cc <_dtoa_r+0x514>
 8007528:	427c      	negs	r4, r7
 800752a:	4b92      	ldr	r3, [pc, #584]	@ (8007774 <_dtoa_r+0x5bc>)
 800752c:	4d92      	ldr	r5, [pc, #584]	@ (8007778 <_dtoa_r+0x5c0>)
 800752e:	f004 020f 	and.w	r2, r4, #15
 8007532:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8007536:	e9d3 2300 	ldrd	r2, r3, [r3]
 800753a:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800753e:	f7f9 f87b 	bl	8000638 <__aeabi_dmul>
 8007542:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8007546:	1124      	asrs	r4, r4, #4
 8007548:	2300      	movs	r3, #0
 800754a:	2602      	movs	r6, #2
 800754c:	2c00      	cmp	r4, #0
 800754e:	f040 80b2 	bne.w	80076b6 <_dtoa_r+0x4fe>
 8007552:	2b00      	cmp	r3, #0
 8007554:	d1d3      	bne.n	80074fe <_dtoa_r+0x346>
 8007556:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 8007558:	e9dd 4502 	ldrd	r4, r5, [sp, #8]
 800755c:	2b00      	cmp	r3, #0
 800755e:	f000 80b7 	beq.w	80076d0 <_dtoa_r+0x518>
 8007562:	4b86      	ldr	r3, [pc, #536]	@ (800777c <_dtoa_r+0x5c4>)
 8007564:	2200      	movs	r2, #0
 8007566:	4620      	mov	r0, r4
 8007568:	4629      	mov	r1, r5
 800756a:	f7f9 fad7 	bl	8000b1c <__aeabi_dcmplt>
 800756e:	2800      	cmp	r0, #0
 8007570:	f000 80ae 	beq.w	80076d0 <_dtoa_r+0x518>
 8007574:	9b07      	ldr	r3, [sp, #28]
 8007576:	2b00      	cmp	r3, #0
 8007578:	f000 80aa 	beq.w	80076d0 <_dtoa_r+0x518>
 800757c:	9b00      	ldr	r3, [sp, #0]
 800757e:	2b00      	cmp	r3, #0
 8007580:	dd37      	ble.n	80075f2 <_dtoa_r+0x43a>
 8007582:	1e7b      	subs	r3, r7, #1
 8007584:	9304      	str	r3, [sp, #16]
 8007586:	4620      	mov	r0, r4
 8007588:	4b7d      	ldr	r3, [pc, #500]	@ (8007780 <_dtoa_r+0x5c8>)
 800758a:	2200      	movs	r2, #0
 800758c:	4629      	mov	r1, r5
 800758e:	f7f9 f853 	bl	8000638 <__aeabi_dmul>
 8007592:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8007596:	9c00      	ldr	r4, [sp, #0]
 8007598:	3601      	adds	r6, #1
 800759a:	4630      	mov	r0, r6
 800759c:	f7f8 ffe2 	bl	8000564 <__aeabi_i2d>
 80075a0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80075a4:	f7f9 f848 	bl	8000638 <__aeabi_dmul>
 80075a8:	4b76      	ldr	r3, [pc, #472]	@ (8007784 <_dtoa_r+0x5cc>)
 80075aa:	2200      	movs	r2, #0
 80075ac:	f7f8 fe8e 	bl	80002cc <__adddf3>
 80075b0:	4605      	mov	r5, r0
 80075b2:	f1a1 7650 	sub.w	r6, r1, #54525952	@ 0x3400000
 80075b6:	2c00      	cmp	r4, #0
 80075b8:	f040 808d 	bne.w	80076d6 <_dtoa_r+0x51e>
 80075bc:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80075c0:	4b71      	ldr	r3, [pc, #452]	@ (8007788 <_dtoa_r+0x5d0>)
 80075c2:	2200      	movs	r2, #0
 80075c4:	f7f8 fe80 	bl	80002c8 <__aeabi_dsub>
 80075c8:	4602      	mov	r2, r0
 80075ca:	460b      	mov	r3, r1
 80075cc:	e9cd 2302 	strd	r2, r3, [sp, #8]
 80075d0:	462a      	mov	r2, r5
 80075d2:	4633      	mov	r3, r6
 80075d4:	f7f9 fac0 	bl	8000b58 <__aeabi_dcmpgt>
 80075d8:	2800      	cmp	r0, #0
 80075da:	f040 828b 	bne.w	8007af4 <_dtoa_r+0x93c>
 80075de:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80075e2:	462a      	mov	r2, r5
 80075e4:	f106 4300 	add.w	r3, r6, #2147483648	@ 0x80000000
 80075e8:	f7f9 fa98 	bl	8000b1c <__aeabi_dcmplt>
 80075ec:	2800      	cmp	r0, #0
 80075ee:	f040 8128 	bne.w	8007842 <_dtoa_r+0x68a>
 80075f2:	e9dd 340c 	ldrd	r3, r4, [sp, #48]	@ 0x30
 80075f6:	e9cd 3402 	strd	r3, r4, [sp, #8]
 80075fa:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 80075fc:	2b00      	cmp	r3, #0
 80075fe:	f2c0 815a 	blt.w	80078b6 <_dtoa_r+0x6fe>
 8007602:	2f0e      	cmp	r7, #14
 8007604:	f300 8157 	bgt.w	80078b6 <_dtoa_r+0x6fe>
 8007608:	4b5a      	ldr	r3, [pc, #360]	@ (8007774 <_dtoa_r+0x5bc>)
 800760a:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 800760e:	ed93 7b00 	vldr	d7, [r3]
 8007612:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8007614:	2b00      	cmp	r3, #0
 8007616:	ed8d 7b00 	vstr	d7, [sp]
 800761a:	da03      	bge.n	8007624 <_dtoa_r+0x46c>
 800761c:	9b07      	ldr	r3, [sp, #28]
 800761e:	2b00      	cmp	r3, #0
 8007620:	f340 8101 	ble.w	8007826 <_dtoa_r+0x66e>
 8007624:	e9dd 4502 	ldrd	r4, r5, [sp, #8]
 8007628:	4656      	mov	r6, sl
 800762a:	e9dd 2300 	ldrd	r2, r3, [sp]
 800762e:	4620      	mov	r0, r4
 8007630:	4629      	mov	r1, r5
 8007632:	f7f9 f92b 	bl	800088c <__aeabi_ddiv>
 8007636:	f7f9 faaf 	bl	8000b98 <__aeabi_d2iz>
 800763a:	4680      	mov	r8, r0
 800763c:	f7f8 ff92 	bl	8000564 <__aeabi_i2d>
 8007640:	e9dd 2300 	ldrd	r2, r3, [sp]
 8007644:	f7f8 fff8 	bl	8000638 <__aeabi_dmul>
 8007648:	4602      	mov	r2, r0
 800764a:	460b      	mov	r3, r1
 800764c:	4620      	mov	r0, r4
 800764e:	4629      	mov	r1, r5
 8007650:	f108 0430 	add.w	r4, r8, #48	@ 0x30
 8007654:	f7f8 fe38 	bl	80002c8 <__aeabi_dsub>
 8007658:	f806 4b01 	strb.w	r4, [r6], #1
 800765c:	9d07      	ldr	r5, [sp, #28]
 800765e:	eba6 040a 	sub.w	r4, r6, sl
 8007662:	42a5      	cmp	r5, r4
 8007664:	4602      	mov	r2, r0
 8007666:	460b      	mov	r3, r1
 8007668:	f040 8117 	bne.w	800789a <_dtoa_r+0x6e2>
 800766c:	f7f8 fe2e 	bl	80002cc <__adddf3>
 8007670:	e9dd 2300 	ldrd	r2, r3, [sp]
 8007674:	4604      	mov	r4, r0
 8007676:	460d      	mov	r5, r1
 8007678:	f7f9 fa6e 	bl	8000b58 <__aeabi_dcmpgt>
 800767c:	2800      	cmp	r0, #0
 800767e:	f040 80f9 	bne.w	8007874 <_dtoa_r+0x6bc>
 8007682:	e9dd 2300 	ldrd	r2, r3, [sp]
 8007686:	4620      	mov	r0, r4
 8007688:	4629      	mov	r1, r5
 800768a:	f7f9 fa3d 	bl	8000b08 <__aeabi_dcmpeq>
 800768e:	b118      	cbz	r0, 8007698 <_dtoa_r+0x4e0>
 8007690:	f018 0f01 	tst.w	r8, #1
 8007694:	f040 80ee 	bne.w	8007874 <_dtoa_r+0x6bc>
 8007698:	4649      	mov	r1, r9
 800769a:	4658      	mov	r0, fp
 800769c:	f000 fc90 	bl	8007fc0 <_Bfree>
 80076a0:	2300      	movs	r3, #0
 80076a2:	7033      	strb	r3, [r6, #0]
 80076a4:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 80076a6:	3701      	adds	r7, #1
 80076a8:	601f      	str	r7, [r3, #0]
 80076aa:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 80076ac:	2b00      	cmp	r3, #0
 80076ae:	f000 831d 	beq.w	8007cec <_dtoa_r+0xb34>
 80076b2:	601e      	str	r6, [r3, #0]
 80076b4:	e31a      	b.n	8007cec <_dtoa_r+0xb34>
 80076b6:	07e2      	lsls	r2, r4, #31
 80076b8:	d505      	bpl.n	80076c6 <_dtoa_r+0x50e>
 80076ba:	e9d5 2300 	ldrd	r2, r3, [r5]
 80076be:	f7f8 ffbb 	bl	8000638 <__aeabi_dmul>
 80076c2:	3601      	adds	r6, #1
 80076c4:	2301      	movs	r3, #1
 80076c6:	1064      	asrs	r4, r4, #1
 80076c8:	3508      	adds	r5, #8
 80076ca:	e73f      	b.n	800754c <_dtoa_r+0x394>
 80076cc:	2602      	movs	r6, #2
 80076ce:	e742      	b.n	8007556 <_dtoa_r+0x39e>
 80076d0:	9c07      	ldr	r4, [sp, #28]
 80076d2:	9704      	str	r7, [sp, #16]
 80076d4:	e761      	b.n	800759a <_dtoa_r+0x3e2>
 80076d6:	4b27      	ldr	r3, [pc, #156]	@ (8007774 <_dtoa_r+0x5bc>)
 80076d8:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 80076da:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 80076de:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 80076e2:	4454      	add	r4, sl
 80076e4:	2900      	cmp	r1, #0
 80076e6:	d053      	beq.n	8007790 <_dtoa_r+0x5d8>
 80076e8:	4928      	ldr	r1, [pc, #160]	@ (800778c <_dtoa_r+0x5d4>)
 80076ea:	2000      	movs	r0, #0
 80076ec:	f7f9 f8ce 	bl	800088c <__aeabi_ddiv>
 80076f0:	4633      	mov	r3, r6
 80076f2:	462a      	mov	r2, r5
 80076f4:	f7f8 fde8 	bl	80002c8 <__aeabi_dsub>
 80076f8:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 80076fc:	4656      	mov	r6, sl
 80076fe:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8007702:	f7f9 fa49 	bl	8000b98 <__aeabi_d2iz>
 8007706:	4605      	mov	r5, r0
 8007708:	f7f8 ff2c 	bl	8000564 <__aeabi_i2d>
 800770c:	4602      	mov	r2, r0
 800770e:	460b      	mov	r3, r1
 8007710:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8007714:	f7f8 fdd8 	bl	80002c8 <__aeabi_dsub>
 8007718:	3530      	adds	r5, #48	@ 0x30
 800771a:	4602      	mov	r2, r0
 800771c:	460b      	mov	r3, r1
 800771e:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8007722:	f806 5b01 	strb.w	r5, [r6], #1
 8007726:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 800772a:	f7f9 f9f7 	bl	8000b1c <__aeabi_dcmplt>
 800772e:	2800      	cmp	r0, #0
 8007730:	d171      	bne.n	8007816 <_dtoa_r+0x65e>
 8007732:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8007736:	4911      	ldr	r1, [pc, #68]	@ (800777c <_dtoa_r+0x5c4>)
 8007738:	2000      	movs	r0, #0
 800773a:	f7f8 fdc5 	bl	80002c8 <__aeabi_dsub>
 800773e:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 8007742:	f7f9 f9eb 	bl	8000b1c <__aeabi_dcmplt>
 8007746:	2800      	cmp	r0, #0
 8007748:	f040 8095 	bne.w	8007876 <_dtoa_r+0x6be>
 800774c:	42a6      	cmp	r6, r4
 800774e:	f43f af50 	beq.w	80075f2 <_dtoa_r+0x43a>
 8007752:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	@ 0x40
 8007756:	4b0a      	ldr	r3, [pc, #40]	@ (8007780 <_dtoa_r+0x5c8>)
 8007758:	2200      	movs	r2, #0
 800775a:	f7f8 ff6d 	bl	8000638 <__aeabi_dmul>
 800775e:	4b08      	ldr	r3, [pc, #32]	@ (8007780 <_dtoa_r+0x5c8>)
 8007760:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 8007764:	2200      	movs	r2, #0
 8007766:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800776a:	f7f8 ff65 	bl	8000638 <__aeabi_dmul>
 800776e:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8007772:	e7c4      	b.n	80076fe <_dtoa_r+0x546>
 8007774:	0800a488 	.word	0x0800a488
 8007778:	0800a460 	.word	0x0800a460
 800777c:	3ff00000 	.word	0x3ff00000
 8007780:	40240000 	.word	0x40240000
 8007784:	401c0000 	.word	0x401c0000
 8007788:	40140000 	.word	0x40140000
 800778c:	3fe00000 	.word	0x3fe00000
 8007790:	4631      	mov	r1, r6
 8007792:	4628      	mov	r0, r5
 8007794:	f7f8 ff50 	bl	8000638 <__aeabi_dmul>
 8007798:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 800779c:	9415      	str	r4, [sp, #84]	@ 0x54
 800779e:	4656      	mov	r6, sl
 80077a0:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80077a4:	f7f9 f9f8 	bl	8000b98 <__aeabi_d2iz>
 80077a8:	4605      	mov	r5, r0
 80077aa:	f7f8 fedb 	bl	8000564 <__aeabi_i2d>
 80077ae:	4602      	mov	r2, r0
 80077b0:	460b      	mov	r3, r1
 80077b2:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80077b6:	f7f8 fd87 	bl	80002c8 <__aeabi_dsub>
 80077ba:	3530      	adds	r5, #48	@ 0x30
 80077bc:	f806 5b01 	strb.w	r5, [r6], #1
 80077c0:	4602      	mov	r2, r0
 80077c2:	460b      	mov	r3, r1
 80077c4:	42a6      	cmp	r6, r4
 80077c6:	e9cd 2302 	strd	r2, r3, [sp, #8]
 80077ca:	f04f 0200 	mov.w	r2, #0
 80077ce:	d124      	bne.n	800781a <_dtoa_r+0x662>
 80077d0:	4bac      	ldr	r3, [pc, #688]	@ (8007a84 <_dtoa_r+0x8cc>)
 80077d2:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	@ 0x40
 80077d6:	f7f8 fd79 	bl	80002cc <__adddf3>
 80077da:	4602      	mov	r2, r0
 80077dc:	460b      	mov	r3, r1
 80077de:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80077e2:	f7f9 f9b9 	bl	8000b58 <__aeabi_dcmpgt>
 80077e6:	2800      	cmp	r0, #0
 80077e8:	d145      	bne.n	8007876 <_dtoa_r+0x6be>
 80077ea:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 80077ee:	49a5      	ldr	r1, [pc, #660]	@ (8007a84 <_dtoa_r+0x8cc>)
 80077f0:	2000      	movs	r0, #0
 80077f2:	f7f8 fd69 	bl	80002c8 <__aeabi_dsub>
 80077f6:	4602      	mov	r2, r0
 80077f8:	460b      	mov	r3, r1
 80077fa:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80077fe:	f7f9 f98d 	bl	8000b1c <__aeabi_dcmplt>
 8007802:	2800      	cmp	r0, #0
 8007804:	f43f aef5 	beq.w	80075f2 <_dtoa_r+0x43a>
 8007808:	9e15      	ldr	r6, [sp, #84]	@ 0x54
 800780a:	1e73      	subs	r3, r6, #1
 800780c:	9315      	str	r3, [sp, #84]	@ 0x54
 800780e:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 8007812:	2b30      	cmp	r3, #48	@ 0x30
 8007814:	d0f8      	beq.n	8007808 <_dtoa_r+0x650>
 8007816:	9f04      	ldr	r7, [sp, #16]
 8007818:	e73e      	b.n	8007698 <_dtoa_r+0x4e0>
 800781a:	4b9b      	ldr	r3, [pc, #620]	@ (8007a88 <_dtoa_r+0x8d0>)
 800781c:	f7f8 ff0c 	bl	8000638 <__aeabi_dmul>
 8007820:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8007824:	e7bc      	b.n	80077a0 <_dtoa_r+0x5e8>
 8007826:	d10c      	bne.n	8007842 <_dtoa_r+0x68a>
 8007828:	4b98      	ldr	r3, [pc, #608]	@ (8007a8c <_dtoa_r+0x8d4>)
 800782a:	2200      	movs	r2, #0
 800782c:	e9dd 0100 	ldrd	r0, r1, [sp]
 8007830:	f7f8 ff02 	bl	8000638 <__aeabi_dmul>
 8007834:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8007838:	f7f9 f984 	bl	8000b44 <__aeabi_dcmpge>
 800783c:	2800      	cmp	r0, #0
 800783e:	f000 8157 	beq.w	8007af0 <_dtoa_r+0x938>
 8007842:	2400      	movs	r4, #0
 8007844:	4625      	mov	r5, r4
 8007846:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8007848:	43db      	mvns	r3, r3
 800784a:	9304      	str	r3, [sp, #16]
 800784c:	4656      	mov	r6, sl
 800784e:	2700      	movs	r7, #0
 8007850:	4621      	mov	r1, r4
 8007852:	4658      	mov	r0, fp
 8007854:	f000 fbb4 	bl	8007fc0 <_Bfree>
 8007858:	2d00      	cmp	r5, #0
 800785a:	d0dc      	beq.n	8007816 <_dtoa_r+0x65e>
 800785c:	b12f      	cbz	r7, 800786a <_dtoa_r+0x6b2>
 800785e:	42af      	cmp	r7, r5
 8007860:	d003      	beq.n	800786a <_dtoa_r+0x6b2>
 8007862:	4639      	mov	r1, r7
 8007864:	4658      	mov	r0, fp
 8007866:	f000 fbab 	bl	8007fc0 <_Bfree>
 800786a:	4629      	mov	r1, r5
 800786c:	4658      	mov	r0, fp
 800786e:	f000 fba7 	bl	8007fc0 <_Bfree>
 8007872:	e7d0      	b.n	8007816 <_dtoa_r+0x65e>
 8007874:	9704      	str	r7, [sp, #16]
 8007876:	4633      	mov	r3, r6
 8007878:	461e      	mov	r6, r3
 800787a:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800787e:	2a39      	cmp	r2, #57	@ 0x39
 8007880:	d107      	bne.n	8007892 <_dtoa_r+0x6da>
 8007882:	459a      	cmp	sl, r3
 8007884:	d1f8      	bne.n	8007878 <_dtoa_r+0x6c0>
 8007886:	9a04      	ldr	r2, [sp, #16]
 8007888:	3201      	adds	r2, #1
 800788a:	9204      	str	r2, [sp, #16]
 800788c:	2230      	movs	r2, #48	@ 0x30
 800788e:	f88a 2000 	strb.w	r2, [sl]
 8007892:	781a      	ldrb	r2, [r3, #0]
 8007894:	3201      	adds	r2, #1
 8007896:	701a      	strb	r2, [r3, #0]
 8007898:	e7bd      	b.n	8007816 <_dtoa_r+0x65e>
 800789a:	4b7b      	ldr	r3, [pc, #492]	@ (8007a88 <_dtoa_r+0x8d0>)
 800789c:	2200      	movs	r2, #0
 800789e:	f7f8 fecb 	bl	8000638 <__aeabi_dmul>
 80078a2:	2200      	movs	r2, #0
 80078a4:	2300      	movs	r3, #0
 80078a6:	4604      	mov	r4, r0
 80078a8:	460d      	mov	r5, r1
 80078aa:	f7f9 f92d 	bl	8000b08 <__aeabi_dcmpeq>
 80078ae:	2800      	cmp	r0, #0
 80078b0:	f43f aebb 	beq.w	800762a <_dtoa_r+0x472>
 80078b4:	e6f0      	b.n	8007698 <_dtoa_r+0x4e0>
 80078b6:	9a0b      	ldr	r2, [sp, #44]	@ 0x2c
 80078b8:	2a00      	cmp	r2, #0
 80078ba:	f000 80db 	beq.w	8007a74 <_dtoa_r+0x8bc>
 80078be:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 80078c0:	2a01      	cmp	r2, #1
 80078c2:	f300 80bf 	bgt.w	8007a44 <_dtoa_r+0x88c>
 80078c6:	9a14      	ldr	r2, [sp, #80]	@ 0x50
 80078c8:	2a00      	cmp	r2, #0
 80078ca:	f000 80b7 	beq.w	8007a3c <_dtoa_r+0x884>
 80078ce:	f203 4333 	addw	r3, r3, #1075	@ 0x433
 80078d2:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
 80078d4:	4646      	mov	r6, r8
 80078d6:	9a08      	ldr	r2, [sp, #32]
 80078d8:	2101      	movs	r1, #1
 80078da:	441a      	add	r2, r3
 80078dc:	4658      	mov	r0, fp
 80078de:	4498      	add	r8, r3
 80078e0:	9208      	str	r2, [sp, #32]
 80078e2:	f000 fc21 	bl	8008128 <__i2b>
 80078e6:	4605      	mov	r5, r0
 80078e8:	b15e      	cbz	r6, 8007902 <_dtoa_r+0x74a>
 80078ea:	9b08      	ldr	r3, [sp, #32]
 80078ec:	2b00      	cmp	r3, #0
 80078ee:	dd08      	ble.n	8007902 <_dtoa_r+0x74a>
 80078f0:	42b3      	cmp	r3, r6
 80078f2:	9a08      	ldr	r2, [sp, #32]
 80078f4:	bfa8      	it	ge
 80078f6:	4633      	movge	r3, r6
 80078f8:	eba8 0803 	sub.w	r8, r8, r3
 80078fc:	1af6      	subs	r6, r6, r3
 80078fe:	1ad3      	subs	r3, r2, r3
 8007900:	9308      	str	r3, [sp, #32]
 8007902:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8007904:	b1f3      	cbz	r3, 8007944 <_dtoa_r+0x78c>
 8007906:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8007908:	2b00      	cmp	r3, #0
 800790a:	f000 80b7 	beq.w	8007a7c <_dtoa_r+0x8c4>
 800790e:	b18c      	cbz	r4, 8007934 <_dtoa_r+0x77c>
 8007910:	4629      	mov	r1, r5
 8007912:	4622      	mov	r2, r4
 8007914:	4658      	mov	r0, fp
 8007916:	f000 fcc7 	bl	80082a8 <__pow5mult>
 800791a:	464a      	mov	r2, r9
 800791c:	4601      	mov	r1, r0
 800791e:	4605      	mov	r5, r0
 8007920:	4658      	mov	r0, fp
 8007922:	f000 fc17 	bl	8008154 <__multiply>
 8007926:	4649      	mov	r1, r9
 8007928:	9004      	str	r0, [sp, #16]
 800792a:	4658      	mov	r0, fp
 800792c:	f000 fb48 	bl	8007fc0 <_Bfree>
 8007930:	9b04      	ldr	r3, [sp, #16]
 8007932:	4699      	mov	r9, r3
 8007934:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8007936:	1b1a      	subs	r2, r3, r4
 8007938:	d004      	beq.n	8007944 <_dtoa_r+0x78c>
 800793a:	4649      	mov	r1, r9
 800793c:	4658      	mov	r0, fp
 800793e:	f000 fcb3 	bl	80082a8 <__pow5mult>
 8007942:	4681      	mov	r9, r0
 8007944:	2101      	movs	r1, #1
 8007946:	4658      	mov	r0, fp
 8007948:	f000 fbee 	bl	8008128 <__i2b>
 800794c:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800794e:	4604      	mov	r4, r0
 8007950:	2b00      	cmp	r3, #0
 8007952:	f000 81cf 	beq.w	8007cf4 <_dtoa_r+0xb3c>
 8007956:	461a      	mov	r2, r3
 8007958:	4601      	mov	r1, r0
 800795a:	4658      	mov	r0, fp
 800795c:	f000 fca4 	bl	80082a8 <__pow5mult>
 8007960:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8007962:	2b01      	cmp	r3, #1
 8007964:	4604      	mov	r4, r0
 8007966:	f300 8095 	bgt.w	8007a94 <_dtoa_r+0x8dc>
 800796a:	9b02      	ldr	r3, [sp, #8]
 800796c:	2b00      	cmp	r3, #0
 800796e:	f040 8087 	bne.w	8007a80 <_dtoa_r+0x8c8>
 8007972:	9b03      	ldr	r3, [sp, #12]
 8007974:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8007978:	2b00      	cmp	r3, #0
 800797a:	f040 8089 	bne.w	8007a90 <_dtoa_r+0x8d8>
 800797e:	9b03      	ldr	r3, [sp, #12]
 8007980:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8007984:	0d1b      	lsrs	r3, r3, #20
 8007986:	051b      	lsls	r3, r3, #20
 8007988:	b12b      	cbz	r3, 8007996 <_dtoa_r+0x7de>
 800798a:	9b08      	ldr	r3, [sp, #32]
 800798c:	3301      	adds	r3, #1
 800798e:	9308      	str	r3, [sp, #32]
 8007990:	f108 0801 	add.w	r8, r8, #1
 8007994:	2301      	movs	r3, #1
 8007996:	930a      	str	r3, [sp, #40]	@ 0x28
 8007998:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800799a:	2b00      	cmp	r3, #0
 800799c:	f000 81b0 	beq.w	8007d00 <_dtoa_r+0xb48>
 80079a0:	6923      	ldr	r3, [r4, #16]
 80079a2:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 80079a6:	6918      	ldr	r0, [r3, #16]
 80079a8:	f000 fb72 	bl	8008090 <__hi0bits>
 80079ac:	f1c0 0020 	rsb	r0, r0, #32
 80079b0:	9b08      	ldr	r3, [sp, #32]
 80079b2:	4418      	add	r0, r3
 80079b4:	f010 001f 	ands.w	r0, r0, #31
 80079b8:	d077      	beq.n	8007aaa <_dtoa_r+0x8f2>
 80079ba:	f1c0 0320 	rsb	r3, r0, #32
 80079be:	2b04      	cmp	r3, #4
 80079c0:	dd6b      	ble.n	8007a9a <_dtoa_r+0x8e2>
 80079c2:	9b08      	ldr	r3, [sp, #32]
 80079c4:	f1c0 001c 	rsb	r0, r0, #28
 80079c8:	4403      	add	r3, r0
 80079ca:	4480      	add	r8, r0
 80079cc:	4406      	add	r6, r0
 80079ce:	9308      	str	r3, [sp, #32]
 80079d0:	f1b8 0f00 	cmp.w	r8, #0
 80079d4:	dd05      	ble.n	80079e2 <_dtoa_r+0x82a>
 80079d6:	4649      	mov	r1, r9
 80079d8:	4642      	mov	r2, r8
 80079da:	4658      	mov	r0, fp
 80079dc:	f000 fcbe 	bl	800835c <__lshift>
 80079e0:	4681      	mov	r9, r0
 80079e2:	9b08      	ldr	r3, [sp, #32]
 80079e4:	2b00      	cmp	r3, #0
 80079e6:	dd05      	ble.n	80079f4 <_dtoa_r+0x83c>
 80079e8:	4621      	mov	r1, r4
 80079ea:	461a      	mov	r2, r3
 80079ec:	4658      	mov	r0, fp
 80079ee:	f000 fcb5 	bl	800835c <__lshift>
 80079f2:	4604      	mov	r4, r0
 80079f4:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 80079f6:	2b00      	cmp	r3, #0
 80079f8:	d059      	beq.n	8007aae <_dtoa_r+0x8f6>
 80079fa:	4621      	mov	r1, r4
 80079fc:	4648      	mov	r0, r9
 80079fe:	f000 fd19 	bl	8008434 <__mcmp>
 8007a02:	2800      	cmp	r0, #0
 8007a04:	da53      	bge.n	8007aae <_dtoa_r+0x8f6>
 8007a06:	1e7b      	subs	r3, r7, #1
 8007a08:	9304      	str	r3, [sp, #16]
 8007a0a:	4649      	mov	r1, r9
 8007a0c:	2300      	movs	r3, #0
 8007a0e:	220a      	movs	r2, #10
 8007a10:	4658      	mov	r0, fp
 8007a12:	f000 faf7 	bl	8008004 <__multadd>
 8007a16:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8007a18:	4681      	mov	r9, r0
 8007a1a:	2b00      	cmp	r3, #0
 8007a1c:	f000 8172 	beq.w	8007d04 <_dtoa_r+0xb4c>
 8007a20:	2300      	movs	r3, #0
 8007a22:	4629      	mov	r1, r5
 8007a24:	220a      	movs	r2, #10
 8007a26:	4658      	mov	r0, fp
 8007a28:	f000 faec 	bl	8008004 <__multadd>
 8007a2c:	9b00      	ldr	r3, [sp, #0]
 8007a2e:	2b00      	cmp	r3, #0
 8007a30:	4605      	mov	r5, r0
 8007a32:	dc67      	bgt.n	8007b04 <_dtoa_r+0x94c>
 8007a34:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8007a36:	2b02      	cmp	r3, #2
 8007a38:	dc41      	bgt.n	8007abe <_dtoa_r+0x906>
 8007a3a:	e063      	b.n	8007b04 <_dtoa_r+0x94c>
 8007a3c:	9b16      	ldr	r3, [sp, #88]	@ 0x58
 8007a3e:	f1c3 0336 	rsb	r3, r3, #54	@ 0x36
 8007a42:	e746      	b.n	80078d2 <_dtoa_r+0x71a>
 8007a44:	9b07      	ldr	r3, [sp, #28]
 8007a46:	1e5c      	subs	r4, r3, #1
 8007a48:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8007a4a:	42a3      	cmp	r3, r4
 8007a4c:	bfbf      	itttt	lt
 8007a4e:	9b0a      	ldrlt	r3, [sp, #40]	@ 0x28
 8007a50:	9a0f      	ldrlt	r2, [sp, #60]	@ 0x3c
 8007a52:	940a      	strlt	r4, [sp, #40]	@ 0x28
 8007a54:	1ae3      	sublt	r3, r4, r3
 8007a56:	bfb4      	ite	lt
 8007a58:	18d2      	addlt	r2, r2, r3
 8007a5a:	1b1c      	subge	r4, r3, r4
 8007a5c:	9b07      	ldr	r3, [sp, #28]
 8007a5e:	bfbc      	itt	lt
 8007a60:	920f      	strlt	r2, [sp, #60]	@ 0x3c
 8007a62:	2400      	movlt	r4, #0
 8007a64:	2b00      	cmp	r3, #0
 8007a66:	bfb5      	itete	lt
 8007a68:	eba8 0603 	sublt.w	r6, r8, r3
 8007a6c:	9b07      	ldrge	r3, [sp, #28]
 8007a6e:	2300      	movlt	r3, #0
 8007a70:	4646      	movge	r6, r8
 8007a72:	e730      	b.n	80078d6 <_dtoa_r+0x71e>
 8007a74:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
 8007a76:	9d0b      	ldr	r5, [sp, #44]	@ 0x2c
 8007a78:	4646      	mov	r6, r8
 8007a7a:	e735      	b.n	80078e8 <_dtoa_r+0x730>
 8007a7c:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 8007a7e:	e75c      	b.n	800793a <_dtoa_r+0x782>
 8007a80:	2300      	movs	r3, #0
 8007a82:	e788      	b.n	8007996 <_dtoa_r+0x7de>
 8007a84:	3fe00000 	.word	0x3fe00000
 8007a88:	40240000 	.word	0x40240000
 8007a8c:	40140000 	.word	0x40140000
 8007a90:	9b02      	ldr	r3, [sp, #8]
 8007a92:	e780      	b.n	8007996 <_dtoa_r+0x7de>
 8007a94:	2300      	movs	r3, #0
 8007a96:	930a      	str	r3, [sp, #40]	@ 0x28
 8007a98:	e782      	b.n	80079a0 <_dtoa_r+0x7e8>
 8007a9a:	d099      	beq.n	80079d0 <_dtoa_r+0x818>
 8007a9c:	9a08      	ldr	r2, [sp, #32]
 8007a9e:	331c      	adds	r3, #28
 8007aa0:	441a      	add	r2, r3
 8007aa2:	4498      	add	r8, r3
 8007aa4:	441e      	add	r6, r3
 8007aa6:	9208      	str	r2, [sp, #32]
 8007aa8:	e792      	b.n	80079d0 <_dtoa_r+0x818>
 8007aaa:	4603      	mov	r3, r0
 8007aac:	e7f6      	b.n	8007a9c <_dtoa_r+0x8e4>
 8007aae:	9b07      	ldr	r3, [sp, #28]
 8007ab0:	9704      	str	r7, [sp, #16]
 8007ab2:	2b00      	cmp	r3, #0
 8007ab4:	dc20      	bgt.n	8007af8 <_dtoa_r+0x940>
 8007ab6:	9300      	str	r3, [sp, #0]
 8007ab8:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8007aba:	2b02      	cmp	r3, #2
 8007abc:	dd1e      	ble.n	8007afc <_dtoa_r+0x944>
 8007abe:	9b00      	ldr	r3, [sp, #0]
 8007ac0:	2b00      	cmp	r3, #0
 8007ac2:	f47f aec0 	bne.w	8007846 <_dtoa_r+0x68e>
 8007ac6:	4621      	mov	r1, r4
 8007ac8:	2205      	movs	r2, #5
 8007aca:	4658      	mov	r0, fp
 8007acc:	f000 fa9a 	bl	8008004 <__multadd>
 8007ad0:	4601      	mov	r1, r0
 8007ad2:	4604      	mov	r4, r0
 8007ad4:	4648      	mov	r0, r9
 8007ad6:	f000 fcad 	bl	8008434 <__mcmp>
 8007ada:	2800      	cmp	r0, #0
 8007adc:	f77f aeb3 	ble.w	8007846 <_dtoa_r+0x68e>
 8007ae0:	4656      	mov	r6, sl
 8007ae2:	2331      	movs	r3, #49	@ 0x31
 8007ae4:	f806 3b01 	strb.w	r3, [r6], #1
 8007ae8:	9b04      	ldr	r3, [sp, #16]
 8007aea:	3301      	adds	r3, #1
 8007aec:	9304      	str	r3, [sp, #16]
 8007aee:	e6ae      	b.n	800784e <_dtoa_r+0x696>
 8007af0:	9c07      	ldr	r4, [sp, #28]
 8007af2:	9704      	str	r7, [sp, #16]
 8007af4:	4625      	mov	r5, r4
 8007af6:	e7f3      	b.n	8007ae0 <_dtoa_r+0x928>
 8007af8:	9b07      	ldr	r3, [sp, #28]
 8007afa:	9300      	str	r3, [sp, #0]
 8007afc:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8007afe:	2b00      	cmp	r3, #0
 8007b00:	f000 8104 	beq.w	8007d0c <_dtoa_r+0xb54>
 8007b04:	2e00      	cmp	r6, #0
 8007b06:	dd05      	ble.n	8007b14 <_dtoa_r+0x95c>
 8007b08:	4629      	mov	r1, r5
 8007b0a:	4632      	mov	r2, r6
 8007b0c:	4658      	mov	r0, fp
 8007b0e:	f000 fc25 	bl	800835c <__lshift>
 8007b12:	4605      	mov	r5, r0
 8007b14:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8007b16:	2b00      	cmp	r3, #0
 8007b18:	d05a      	beq.n	8007bd0 <_dtoa_r+0xa18>
 8007b1a:	6869      	ldr	r1, [r5, #4]
 8007b1c:	4658      	mov	r0, fp
 8007b1e:	f000 fa0f 	bl	8007f40 <_Balloc>
 8007b22:	4606      	mov	r6, r0
 8007b24:	b928      	cbnz	r0, 8007b32 <_dtoa_r+0x97a>
 8007b26:	4b84      	ldr	r3, [pc, #528]	@ (8007d38 <_dtoa_r+0xb80>)
 8007b28:	4602      	mov	r2, r0
 8007b2a:	f240 21ef 	movw	r1, #751	@ 0x2ef
 8007b2e:	f7ff bb5a 	b.w	80071e6 <_dtoa_r+0x2e>
 8007b32:	692a      	ldr	r2, [r5, #16]
 8007b34:	3202      	adds	r2, #2
 8007b36:	0092      	lsls	r2, r2, #2
 8007b38:	f105 010c 	add.w	r1, r5, #12
 8007b3c:	300c      	adds	r0, #12
 8007b3e:	f000 ffaf 	bl	8008aa0 <memcpy>
 8007b42:	2201      	movs	r2, #1
 8007b44:	4631      	mov	r1, r6
 8007b46:	4658      	mov	r0, fp
 8007b48:	f000 fc08 	bl	800835c <__lshift>
 8007b4c:	f10a 0301 	add.w	r3, sl, #1
 8007b50:	9307      	str	r3, [sp, #28]
 8007b52:	9b00      	ldr	r3, [sp, #0]
 8007b54:	4453      	add	r3, sl
 8007b56:	930b      	str	r3, [sp, #44]	@ 0x2c
 8007b58:	9b02      	ldr	r3, [sp, #8]
 8007b5a:	f003 0301 	and.w	r3, r3, #1
 8007b5e:	462f      	mov	r7, r5
 8007b60:	930a      	str	r3, [sp, #40]	@ 0x28
 8007b62:	4605      	mov	r5, r0
 8007b64:	9b07      	ldr	r3, [sp, #28]
 8007b66:	4621      	mov	r1, r4
 8007b68:	3b01      	subs	r3, #1
 8007b6a:	4648      	mov	r0, r9
 8007b6c:	9300      	str	r3, [sp, #0]
 8007b6e:	f7ff fa98 	bl	80070a2 <quorem>
 8007b72:	4639      	mov	r1, r7
 8007b74:	9002      	str	r0, [sp, #8]
 8007b76:	f100 0830 	add.w	r8, r0, #48	@ 0x30
 8007b7a:	4648      	mov	r0, r9
 8007b7c:	f000 fc5a 	bl	8008434 <__mcmp>
 8007b80:	462a      	mov	r2, r5
 8007b82:	9008      	str	r0, [sp, #32]
 8007b84:	4621      	mov	r1, r4
 8007b86:	4658      	mov	r0, fp
 8007b88:	f000 fc70 	bl	800846c <__mdiff>
 8007b8c:	68c2      	ldr	r2, [r0, #12]
 8007b8e:	4606      	mov	r6, r0
 8007b90:	bb02      	cbnz	r2, 8007bd4 <_dtoa_r+0xa1c>
 8007b92:	4601      	mov	r1, r0
 8007b94:	4648      	mov	r0, r9
 8007b96:	f000 fc4d 	bl	8008434 <__mcmp>
 8007b9a:	4602      	mov	r2, r0
 8007b9c:	4631      	mov	r1, r6
 8007b9e:	4658      	mov	r0, fp
 8007ba0:	920e      	str	r2, [sp, #56]	@ 0x38
 8007ba2:	f000 fa0d 	bl	8007fc0 <_Bfree>
 8007ba6:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8007ba8:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8007baa:	9e07      	ldr	r6, [sp, #28]
 8007bac:	ea43 0102 	orr.w	r1, r3, r2
 8007bb0:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8007bb2:	4319      	orrs	r1, r3
 8007bb4:	d110      	bne.n	8007bd8 <_dtoa_r+0xa20>
 8007bb6:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 8007bba:	d029      	beq.n	8007c10 <_dtoa_r+0xa58>
 8007bbc:	9b08      	ldr	r3, [sp, #32]
 8007bbe:	2b00      	cmp	r3, #0
 8007bc0:	dd02      	ble.n	8007bc8 <_dtoa_r+0xa10>
 8007bc2:	9b02      	ldr	r3, [sp, #8]
 8007bc4:	f103 0831 	add.w	r8, r3, #49	@ 0x31
 8007bc8:	9b00      	ldr	r3, [sp, #0]
 8007bca:	f883 8000 	strb.w	r8, [r3]
 8007bce:	e63f      	b.n	8007850 <_dtoa_r+0x698>
 8007bd0:	4628      	mov	r0, r5
 8007bd2:	e7bb      	b.n	8007b4c <_dtoa_r+0x994>
 8007bd4:	2201      	movs	r2, #1
 8007bd6:	e7e1      	b.n	8007b9c <_dtoa_r+0x9e4>
 8007bd8:	9b08      	ldr	r3, [sp, #32]
 8007bda:	2b00      	cmp	r3, #0
 8007bdc:	db04      	blt.n	8007be8 <_dtoa_r+0xa30>
 8007bde:	9909      	ldr	r1, [sp, #36]	@ 0x24
 8007be0:	430b      	orrs	r3, r1
 8007be2:	990a      	ldr	r1, [sp, #40]	@ 0x28
 8007be4:	430b      	orrs	r3, r1
 8007be6:	d120      	bne.n	8007c2a <_dtoa_r+0xa72>
 8007be8:	2a00      	cmp	r2, #0
 8007bea:	dded      	ble.n	8007bc8 <_dtoa_r+0xa10>
 8007bec:	4649      	mov	r1, r9
 8007bee:	2201      	movs	r2, #1
 8007bf0:	4658      	mov	r0, fp
 8007bf2:	f000 fbb3 	bl	800835c <__lshift>
 8007bf6:	4621      	mov	r1, r4
 8007bf8:	4681      	mov	r9, r0
 8007bfa:	f000 fc1b 	bl	8008434 <__mcmp>
 8007bfe:	2800      	cmp	r0, #0
 8007c00:	dc03      	bgt.n	8007c0a <_dtoa_r+0xa52>
 8007c02:	d1e1      	bne.n	8007bc8 <_dtoa_r+0xa10>
 8007c04:	f018 0f01 	tst.w	r8, #1
 8007c08:	d0de      	beq.n	8007bc8 <_dtoa_r+0xa10>
 8007c0a:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 8007c0e:	d1d8      	bne.n	8007bc2 <_dtoa_r+0xa0a>
 8007c10:	9a00      	ldr	r2, [sp, #0]
 8007c12:	2339      	movs	r3, #57	@ 0x39
 8007c14:	7013      	strb	r3, [r2, #0]
 8007c16:	4633      	mov	r3, r6
 8007c18:	461e      	mov	r6, r3
 8007c1a:	3b01      	subs	r3, #1
 8007c1c:	f816 2c01 	ldrb.w	r2, [r6, #-1]
 8007c20:	2a39      	cmp	r2, #57	@ 0x39
 8007c22:	d052      	beq.n	8007cca <_dtoa_r+0xb12>
 8007c24:	3201      	adds	r2, #1
 8007c26:	701a      	strb	r2, [r3, #0]
 8007c28:	e612      	b.n	8007850 <_dtoa_r+0x698>
 8007c2a:	2a00      	cmp	r2, #0
 8007c2c:	dd07      	ble.n	8007c3e <_dtoa_r+0xa86>
 8007c2e:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 8007c32:	d0ed      	beq.n	8007c10 <_dtoa_r+0xa58>
 8007c34:	9a00      	ldr	r2, [sp, #0]
 8007c36:	f108 0301 	add.w	r3, r8, #1
 8007c3a:	7013      	strb	r3, [r2, #0]
 8007c3c:	e608      	b.n	8007850 <_dtoa_r+0x698>
 8007c3e:	9b07      	ldr	r3, [sp, #28]
 8007c40:	9a07      	ldr	r2, [sp, #28]
 8007c42:	f803 8c01 	strb.w	r8, [r3, #-1]
 8007c46:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8007c48:	4293      	cmp	r3, r2
 8007c4a:	d028      	beq.n	8007c9e <_dtoa_r+0xae6>
 8007c4c:	4649      	mov	r1, r9
 8007c4e:	2300      	movs	r3, #0
 8007c50:	220a      	movs	r2, #10
 8007c52:	4658      	mov	r0, fp
 8007c54:	f000 f9d6 	bl	8008004 <__multadd>
 8007c58:	42af      	cmp	r7, r5
 8007c5a:	4681      	mov	r9, r0
 8007c5c:	f04f 0300 	mov.w	r3, #0
 8007c60:	f04f 020a 	mov.w	r2, #10
 8007c64:	4639      	mov	r1, r7
 8007c66:	4658      	mov	r0, fp
 8007c68:	d107      	bne.n	8007c7a <_dtoa_r+0xac2>
 8007c6a:	f000 f9cb 	bl	8008004 <__multadd>
 8007c6e:	4607      	mov	r7, r0
 8007c70:	4605      	mov	r5, r0
 8007c72:	9b07      	ldr	r3, [sp, #28]
 8007c74:	3301      	adds	r3, #1
 8007c76:	9307      	str	r3, [sp, #28]
 8007c78:	e774      	b.n	8007b64 <_dtoa_r+0x9ac>
 8007c7a:	f000 f9c3 	bl	8008004 <__multadd>
 8007c7e:	4629      	mov	r1, r5
 8007c80:	4607      	mov	r7, r0
 8007c82:	2300      	movs	r3, #0
 8007c84:	220a      	movs	r2, #10
 8007c86:	4658      	mov	r0, fp
 8007c88:	f000 f9bc 	bl	8008004 <__multadd>
 8007c8c:	4605      	mov	r5, r0
 8007c8e:	e7f0      	b.n	8007c72 <_dtoa_r+0xaba>
 8007c90:	9b00      	ldr	r3, [sp, #0]
 8007c92:	2b00      	cmp	r3, #0
 8007c94:	bfcc      	ite	gt
 8007c96:	461e      	movgt	r6, r3
 8007c98:	2601      	movle	r6, #1
 8007c9a:	4456      	add	r6, sl
 8007c9c:	2700      	movs	r7, #0
 8007c9e:	4649      	mov	r1, r9
 8007ca0:	2201      	movs	r2, #1
 8007ca2:	4658      	mov	r0, fp
 8007ca4:	f000 fb5a 	bl	800835c <__lshift>
 8007ca8:	4621      	mov	r1, r4
 8007caa:	4681      	mov	r9, r0
 8007cac:	f000 fbc2 	bl	8008434 <__mcmp>
 8007cb0:	2800      	cmp	r0, #0
 8007cb2:	dcb0      	bgt.n	8007c16 <_dtoa_r+0xa5e>
 8007cb4:	d102      	bne.n	8007cbc <_dtoa_r+0xb04>
 8007cb6:	f018 0f01 	tst.w	r8, #1
 8007cba:	d1ac      	bne.n	8007c16 <_dtoa_r+0xa5e>
 8007cbc:	4633      	mov	r3, r6
 8007cbe:	461e      	mov	r6, r3
 8007cc0:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8007cc4:	2a30      	cmp	r2, #48	@ 0x30
 8007cc6:	d0fa      	beq.n	8007cbe <_dtoa_r+0xb06>
 8007cc8:	e5c2      	b.n	8007850 <_dtoa_r+0x698>
 8007cca:	459a      	cmp	sl, r3
 8007ccc:	d1a4      	bne.n	8007c18 <_dtoa_r+0xa60>
 8007cce:	9b04      	ldr	r3, [sp, #16]
 8007cd0:	3301      	adds	r3, #1
 8007cd2:	9304      	str	r3, [sp, #16]
 8007cd4:	2331      	movs	r3, #49	@ 0x31
 8007cd6:	f88a 3000 	strb.w	r3, [sl]
 8007cda:	e5b9      	b.n	8007850 <_dtoa_r+0x698>
 8007cdc:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 8007cde:	f8df a05c 	ldr.w	sl, [pc, #92]	@ 8007d3c <_dtoa_r+0xb84>
 8007ce2:	b11b      	cbz	r3, 8007cec <_dtoa_r+0xb34>
 8007ce4:	f10a 0308 	add.w	r3, sl, #8
 8007ce8:	9a23      	ldr	r2, [sp, #140]	@ 0x8c
 8007cea:	6013      	str	r3, [r2, #0]
 8007cec:	4650      	mov	r0, sl
 8007cee:	b019      	add	sp, #100	@ 0x64
 8007cf0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007cf4:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8007cf6:	2b01      	cmp	r3, #1
 8007cf8:	f77f ae37 	ble.w	800796a <_dtoa_r+0x7b2>
 8007cfc:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8007cfe:	930a      	str	r3, [sp, #40]	@ 0x28
 8007d00:	2001      	movs	r0, #1
 8007d02:	e655      	b.n	80079b0 <_dtoa_r+0x7f8>
 8007d04:	9b00      	ldr	r3, [sp, #0]
 8007d06:	2b00      	cmp	r3, #0
 8007d08:	f77f aed6 	ble.w	8007ab8 <_dtoa_r+0x900>
 8007d0c:	4656      	mov	r6, sl
 8007d0e:	4621      	mov	r1, r4
 8007d10:	4648      	mov	r0, r9
 8007d12:	f7ff f9c6 	bl	80070a2 <quorem>
 8007d16:	f100 0830 	add.w	r8, r0, #48	@ 0x30
 8007d1a:	f806 8b01 	strb.w	r8, [r6], #1
 8007d1e:	9b00      	ldr	r3, [sp, #0]
 8007d20:	eba6 020a 	sub.w	r2, r6, sl
 8007d24:	4293      	cmp	r3, r2
 8007d26:	ddb3      	ble.n	8007c90 <_dtoa_r+0xad8>
 8007d28:	4649      	mov	r1, r9
 8007d2a:	2300      	movs	r3, #0
 8007d2c:	220a      	movs	r2, #10
 8007d2e:	4658      	mov	r0, fp
 8007d30:	f000 f968 	bl	8008004 <__multadd>
 8007d34:	4681      	mov	r9, r0
 8007d36:	e7ea      	b.n	8007d0e <_dtoa_r+0xb56>
 8007d38:	0800a3e8 	.word	0x0800a3e8
 8007d3c:	0800a36c 	.word	0x0800a36c

08007d40 <_free_r>:
 8007d40:	b538      	push	{r3, r4, r5, lr}
 8007d42:	4605      	mov	r5, r0
 8007d44:	2900      	cmp	r1, #0
 8007d46:	d041      	beq.n	8007dcc <_free_r+0x8c>
 8007d48:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8007d4c:	1f0c      	subs	r4, r1, #4
 8007d4e:	2b00      	cmp	r3, #0
 8007d50:	bfb8      	it	lt
 8007d52:	18e4      	addlt	r4, r4, r3
 8007d54:	f000 f8e8 	bl	8007f28 <__malloc_lock>
 8007d58:	4a1d      	ldr	r2, [pc, #116]	@ (8007dd0 <_free_r+0x90>)
 8007d5a:	6813      	ldr	r3, [r2, #0]
 8007d5c:	b933      	cbnz	r3, 8007d6c <_free_r+0x2c>
 8007d5e:	6063      	str	r3, [r4, #4]
 8007d60:	6014      	str	r4, [r2, #0]
 8007d62:	4628      	mov	r0, r5
 8007d64:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8007d68:	f000 b8e4 	b.w	8007f34 <__malloc_unlock>
 8007d6c:	42a3      	cmp	r3, r4
 8007d6e:	d908      	bls.n	8007d82 <_free_r+0x42>
 8007d70:	6820      	ldr	r0, [r4, #0]
 8007d72:	1821      	adds	r1, r4, r0
 8007d74:	428b      	cmp	r3, r1
 8007d76:	bf01      	itttt	eq
 8007d78:	6819      	ldreq	r1, [r3, #0]
 8007d7a:	685b      	ldreq	r3, [r3, #4]
 8007d7c:	1809      	addeq	r1, r1, r0
 8007d7e:	6021      	streq	r1, [r4, #0]
 8007d80:	e7ed      	b.n	8007d5e <_free_r+0x1e>
 8007d82:	461a      	mov	r2, r3
 8007d84:	685b      	ldr	r3, [r3, #4]
 8007d86:	b10b      	cbz	r3, 8007d8c <_free_r+0x4c>
 8007d88:	42a3      	cmp	r3, r4
 8007d8a:	d9fa      	bls.n	8007d82 <_free_r+0x42>
 8007d8c:	6811      	ldr	r1, [r2, #0]
 8007d8e:	1850      	adds	r0, r2, r1
 8007d90:	42a0      	cmp	r0, r4
 8007d92:	d10b      	bne.n	8007dac <_free_r+0x6c>
 8007d94:	6820      	ldr	r0, [r4, #0]
 8007d96:	4401      	add	r1, r0
 8007d98:	1850      	adds	r0, r2, r1
 8007d9a:	4283      	cmp	r3, r0
 8007d9c:	6011      	str	r1, [r2, #0]
 8007d9e:	d1e0      	bne.n	8007d62 <_free_r+0x22>
 8007da0:	6818      	ldr	r0, [r3, #0]
 8007da2:	685b      	ldr	r3, [r3, #4]
 8007da4:	6053      	str	r3, [r2, #4]
 8007da6:	4408      	add	r0, r1
 8007da8:	6010      	str	r0, [r2, #0]
 8007daa:	e7da      	b.n	8007d62 <_free_r+0x22>
 8007dac:	d902      	bls.n	8007db4 <_free_r+0x74>
 8007dae:	230c      	movs	r3, #12
 8007db0:	602b      	str	r3, [r5, #0]
 8007db2:	e7d6      	b.n	8007d62 <_free_r+0x22>
 8007db4:	6820      	ldr	r0, [r4, #0]
 8007db6:	1821      	adds	r1, r4, r0
 8007db8:	428b      	cmp	r3, r1
 8007dba:	bf04      	itt	eq
 8007dbc:	6819      	ldreq	r1, [r3, #0]
 8007dbe:	685b      	ldreq	r3, [r3, #4]
 8007dc0:	6063      	str	r3, [r4, #4]
 8007dc2:	bf04      	itt	eq
 8007dc4:	1809      	addeq	r1, r1, r0
 8007dc6:	6021      	streq	r1, [r4, #0]
 8007dc8:	6054      	str	r4, [r2, #4]
 8007dca:	e7ca      	b.n	8007d62 <_free_r+0x22>
 8007dcc:	bd38      	pop	{r3, r4, r5, pc}
 8007dce:	bf00      	nop
 8007dd0:	2000074c 	.word	0x2000074c

08007dd4 <malloc>:
 8007dd4:	4b02      	ldr	r3, [pc, #8]	@ (8007de0 <malloc+0xc>)
 8007dd6:	4601      	mov	r1, r0
 8007dd8:	6818      	ldr	r0, [r3, #0]
 8007dda:	f000 b825 	b.w	8007e28 <_malloc_r>
 8007dde:	bf00      	nop
 8007de0:	20000018 	.word	0x20000018

08007de4 <sbrk_aligned>:
 8007de4:	b570      	push	{r4, r5, r6, lr}
 8007de6:	4e0f      	ldr	r6, [pc, #60]	@ (8007e24 <sbrk_aligned+0x40>)
 8007de8:	460c      	mov	r4, r1
 8007dea:	6831      	ldr	r1, [r6, #0]
 8007dec:	4605      	mov	r5, r0
 8007dee:	b911      	cbnz	r1, 8007df6 <sbrk_aligned+0x12>
 8007df0:	f000 fe46 	bl	8008a80 <_sbrk_r>
 8007df4:	6030      	str	r0, [r6, #0]
 8007df6:	4621      	mov	r1, r4
 8007df8:	4628      	mov	r0, r5
 8007dfa:	f000 fe41 	bl	8008a80 <_sbrk_r>
 8007dfe:	1c43      	adds	r3, r0, #1
 8007e00:	d103      	bne.n	8007e0a <sbrk_aligned+0x26>
 8007e02:	f04f 34ff 	mov.w	r4, #4294967295
 8007e06:	4620      	mov	r0, r4
 8007e08:	bd70      	pop	{r4, r5, r6, pc}
 8007e0a:	1cc4      	adds	r4, r0, #3
 8007e0c:	f024 0403 	bic.w	r4, r4, #3
 8007e10:	42a0      	cmp	r0, r4
 8007e12:	d0f8      	beq.n	8007e06 <sbrk_aligned+0x22>
 8007e14:	1a21      	subs	r1, r4, r0
 8007e16:	4628      	mov	r0, r5
 8007e18:	f000 fe32 	bl	8008a80 <_sbrk_r>
 8007e1c:	3001      	adds	r0, #1
 8007e1e:	d1f2      	bne.n	8007e06 <sbrk_aligned+0x22>
 8007e20:	e7ef      	b.n	8007e02 <sbrk_aligned+0x1e>
 8007e22:	bf00      	nop
 8007e24:	20000748 	.word	0x20000748

08007e28 <_malloc_r>:
 8007e28:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8007e2c:	1ccd      	adds	r5, r1, #3
 8007e2e:	f025 0503 	bic.w	r5, r5, #3
 8007e32:	3508      	adds	r5, #8
 8007e34:	2d0c      	cmp	r5, #12
 8007e36:	bf38      	it	cc
 8007e38:	250c      	movcc	r5, #12
 8007e3a:	2d00      	cmp	r5, #0
 8007e3c:	4606      	mov	r6, r0
 8007e3e:	db01      	blt.n	8007e44 <_malloc_r+0x1c>
 8007e40:	42a9      	cmp	r1, r5
 8007e42:	d904      	bls.n	8007e4e <_malloc_r+0x26>
 8007e44:	230c      	movs	r3, #12
 8007e46:	6033      	str	r3, [r6, #0]
 8007e48:	2000      	movs	r0, #0
 8007e4a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8007e4e:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 8007f24 <_malloc_r+0xfc>
 8007e52:	f000 f869 	bl	8007f28 <__malloc_lock>
 8007e56:	f8d8 3000 	ldr.w	r3, [r8]
 8007e5a:	461c      	mov	r4, r3
 8007e5c:	bb44      	cbnz	r4, 8007eb0 <_malloc_r+0x88>
 8007e5e:	4629      	mov	r1, r5
 8007e60:	4630      	mov	r0, r6
 8007e62:	f7ff ffbf 	bl	8007de4 <sbrk_aligned>
 8007e66:	1c43      	adds	r3, r0, #1
 8007e68:	4604      	mov	r4, r0
 8007e6a:	d158      	bne.n	8007f1e <_malloc_r+0xf6>
 8007e6c:	f8d8 4000 	ldr.w	r4, [r8]
 8007e70:	4627      	mov	r7, r4
 8007e72:	2f00      	cmp	r7, #0
 8007e74:	d143      	bne.n	8007efe <_malloc_r+0xd6>
 8007e76:	2c00      	cmp	r4, #0
 8007e78:	d04b      	beq.n	8007f12 <_malloc_r+0xea>
 8007e7a:	6823      	ldr	r3, [r4, #0]
 8007e7c:	4639      	mov	r1, r7
 8007e7e:	4630      	mov	r0, r6
 8007e80:	eb04 0903 	add.w	r9, r4, r3
 8007e84:	f000 fdfc 	bl	8008a80 <_sbrk_r>
 8007e88:	4581      	cmp	r9, r0
 8007e8a:	d142      	bne.n	8007f12 <_malloc_r+0xea>
 8007e8c:	6821      	ldr	r1, [r4, #0]
 8007e8e:	1a6d      	subs	r5, r5, r1
 8007e90:	4629      	mov	r1, r5
 8007e92:	4630      	mov	r0, r6
 8007e94:	f7ff ffa6 	bl	8007de4 <sbrk_aligned>
 8007e98:	3001      	adds	r0, #1
 8007e9a:	d03a      	beq.n	8007f12 <_malloc_r+0xea>
 8007e9c:	6823      	ldr	r3, [r4, #0]
 8007e9e:	442b      	add	r3, r5
 8007ea0:	6023      	str	r3, [r4, #0]
 8007ea2:	f8d8 3000 	ldr.w	r3, [r8]
 8007ea6:	685a      	ldr	r2, [r3, #4]
 8007ea8:	bb62      	cbnz	r2, 8007f04 <_malloc_r+0xdc>
 8007eaa:	f8c8 7000 	str.w	r7, [r8]
 8007eae:	e00f      	b.n	8007ed0 <_malloc_r+0xa8>
 8007eb0:	6822      	ldr	r2, [r4, #0]
 8007eb2:	1b52      	subs	r2, r2, r5
 8007eb4:	d420      	bmi.n	8007ef8 <_malloc_r+0xd0>
 8007eb6:	2a0b      	cmp	r2, #11
 8007eb8:	d917      	bls.n	8007eea <_malloc_r+0xc2>
 8007eba:	1961      	adds	r1, r4, r5
 8007ebc:	42a3      	cmp	r3, r4
 8007ebe:	6025      	str	r5, [r4, #0]
 8007ec0:	bf18      	it	ne
 8007ec2:	6059      	strne	r1, [r3, #4]
 8007ec4:	6863      	ldr	r3, [r4, #4]
 8007ec6:	bf08      	it	eq
 8007ec8:	f8c8 1000 	streq.w	r1, [r8]
 8007ecc:	5162      	str	r2, [r4, r5]
 8007ece:	604b      	str	r3, [r1, #4]
 8007ed0:	4630      	mov	r0, r6
 8007ed2:	f000 f82f 	bl	8007f34 <__malloc_unlock>
 8007ed6:	f104 000b 	add.w	r0, r4, #11
 8007eda:	1d23      	adds	r3, r4, #4
 8007edc:	f020 0007 	bic.w	r0, r0, #7
 8007ee0:	1ac2      	subs	r2, r0, r3
 8007ee2:	bf1c      	itt	ne
 8007ee4:	1a1b      	subne	r3, r3, r0
 8007ee6:	50a3      	strne	r3, [r4, r2]
 8007ee8:	e7af      	b.n	8007e4a <_malloc_r+0x22>
 8007eea:	6862      	ldr	r2, [r4, #4]
 8007eec:	42a3      	cmp	r3, r4
 8007eee:	bf0c      	ite	eq
 8007ef0:	f8c8 2000 	streq.w	r2, [r8]
 8007ef4:	605a      	strne	r2, [r3, #4]
 8007ef6:	e7eb      	b.n	8007ed0 <_malloc_r+0xa8>
 8007ef8:	4623      	mov	r3, r4
 8007efa:	6864      	ldr	r4, [r4, #4]
 8007efc:	e7ae      	b.n	8007e5c <_malloc_r+0x34>
 8007efe:	463c      	mov	r4, r7
 8007f00:	687f      	ldr	r7, [r7, #4]
 8007f02:	e7b6      	b.n	8007e72 <_malloc_r+0x4a>
 8007f04:	461a      	mov	r2, r3
 8007f06:	685b      	ldr	r3, [r3, #4]
 8007f08:	42a3      	cmp	r3, r4
 8007f0a:	d1fb      	bne.n	8007f04 <_malloc_r+0xdc>
 8007f0c:	2300      	movs	r3, #0
 8007f0e:	6053      	str	r3, [r2, #4]
 8007f10:	e7de      	b.n	8007ed0 <_malloc_r+0xa8>
 8007f12:	230c      	movs	r3, #12
 8007f14:	6033      	str	r3, [r6, #0]
 8007f16:	4630      	mov	r0, r6
 8007f18:	f000 f80c 	bl	8007f34 <__malloc_unlock>
 8007f1c:	e794      	b.n	8007e48 <_malloc_r+0x20>
 8007f1e:	6005      	str	r5, [r0, #0]
 8007f20:	e7d6      	b.n	8007ed0 <_malloc_r+0xa8>
 8007f22:	bf00      	nop
 8007f24:	2000074c 	.word	0x2000074c

08007f28 <__malloc_lock>:
 8007f28:	4801      	ldr	r0, [pc, #4]	@ (8007f30 <__malloc_lock+0x8>)
 8007f2a:	f7ff b8b8 	b.w	800709e <__retarget_lock_acquire_recursive>
 8007f2e:	bf00      	nop
 8007f30:	20000744 	.word	0x20000744

08007f34 <__malloc_unlock>:
 8007f34:	4801      	ldr	r0, [pc, #4]	@ (8007f3c <__malloc_unlock+0x8>)
 8007f36:	f7ff b8b3 	b.w	80070a0 <__retarget_lock_release_recursive>
 8007f3a:	bf00      	nop
 8007f3c:	20000744 	.word	0x20000744

08007f40 <_Balloc>:
 8007f40:	b570      	push	{r4, r5, r6, lr}
 8007f42:	69c6      	ldr	r6, [r0, #28]
 8007f44:	4604      	mov	r4, r0
 8007f46:	460d      	mov	r5, r1
 8007f48:	b976      	cbnz	r6, 8007f68 <_Balloc+0x28>
 8007f4a:	2010      	movs	r0, #16
 8007f4c:	f7ff ff42 	bl	8007dd4 <malloc>
 8007f50:	4602      	mov	r2, r0
 8007f52:	61e0      	str	r0, [r4, #28]
 8007f54:	b920      	cbnz	r0, 8007f60 <_Balloc+0x20>
 8007f56:	4b18      	ldr	r3, [pc, #96]	@ (8007fb8 <_Balloc+0x78>)
 8007f58:	4818      	ldr	r0, [pc, #96]	@ (8007fbc <_Balloc+0x7c>)
 8007f5a:	216b      	movs	r1, #107	@ 0x6b
 8007f5c:	f000 fdae 	bl	8008abc <__assert_func>
 8007f60:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8007f64:	6006      	str	r6, [r0, #0]
 8007f66:	60c6      	str	r6, [r0, #12]
 8007f68:	69e6      	ldr	r6, [r4, #28]
 8007f6a:	68f3      	ldr	r3, [r6, #12]
 8007f6c:	b183      	cbz	r3, 8007f90 <_Balloc+0x50>
 8007f6e:	69e3      	ldr	r3, [r4, #28]
 8007f70:	68db      	ldr	r3, [r3, #12]
 8007f72:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 8007f76:	b9b8      	cbnz	r0, 8007fa8 <_Balloc+0x68>
 8007f78:	2101      	movs	r1, #1
 8007f7a:	fa01 f605 	lsl.w	r6, r1, r5
 8007f7e:	1d72      	adds	r2, r6, #5
 8007f80:	0092      	lsls	r2, r2, #2
 8007f82:	4620      	mov	r0, r4
 8007f84:	f000 fdb8 	bl	8008af8 <_calloc_r>
 8007f88:	b160      	cbz	r0, 8007fa4 <_Balloc+0x64>
 8007f8a:	e9c0 5601 	strd	r5, r6, [r0, #4]
 8007f8e:	e00e      	b.n	8007fae <_Balloc+0x6e>
 8007f90:	2221      	movs	r2, #33	@ 0x21
 8007f92:	2104      	movs	r1, #4
 8007f94:	4620      	mov	r0, r4
 8007f96:	f000 fdaf 	bl	8008af8 <_calloc_r>
 8007f9a:	69e3      	ldr	r3, [r4, #28]
 8007f9c:	60f0      	str	r0, [r6, #12]
 8007f9e:	68db      	ldr	r3, [r3, #12]
 8007fa0:	2b00      	cmp	r3, #0
 8007fa2:	d1e4      	bne.n	8007f6e <_Balloc+0x2e>
 8007fa4:	2000      	movs	r0, #0
 8007fa6:	bd70      	pop	{r4, r5, r6, pc}
 8007fa8:	6802      	ldr	r2, [r0, #0]
 8007faa:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 8007fae:	2300      	movs	r3, #0
 8007fb0:	e9c0 3303 	strd	r3, r3, [r0, #12]
 8007fb4:	e7f7      	b.n	8007fa6 <_Balloc+0x66>
 8007fb6:	bf00      	nop
 8007fb8:	0800a379 	.word	0x0800a379
 8007fbc:	0800a3f9 	.word	0x0800a3f9

08007fc0 <_Bfree>:
 8007fc0:	b570      	push	{r4, r5, r6, lr}
 8007fc2:	69c6      	ldr	r6, [r0, #28]
 8007fc4:	4605      	mov	r5, r0
 8007fc6:	460c      	mov	r4, r1
 8007fc8:	b976      	cbnz	r6, 8007fe8 <_Bfree+0x28>
 8007fca:	2010      	movs	r0, #16
 8007fcc:	f7ff ff02 	bl	8007dd4 <malloc>
 8007fd0:	4602      	mov	r2, r0
 8007fd2:	61e8      	str	r0, [r5, #28]
 8007fd4:	b920      	cbnz	r0, 8007fe0 <_Bfree+0x20>
 8007fd6:	4b09      	ldr	r3, [pc, #36]	@ (8007ffc <_Bfree+0x3c>)
 8007fd8:	4809      	ldr	r0, [pc, #36]	@ (8008000 <_Bfree+0x40>)
 8007fda:	218f      	movs	r1, #143	@ 0x8f
 8007fdc:	f000 fd6e 	bl	8008abc <__assert_func>
 8007fe0:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8007fe4:	6006      	str	r6, [r0, #0]
 8007fe6:	60c6      	str	r6, [r0, #12]
 8007fe8:	b13c      	cbz	r4, 8007ffa <_Bfree+0x3a>
 8007fea:	69eb      	ldr	r3, [r5, #28]
 8007fec:	6862      	ldr	r2, [r4, #4]
 8007fee:	68db      	ldr	r3, [r3, #12]
 8007ff0:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8007ff4:	6021      	str	r1, [r4, #0]
 8007ff6:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 8007ffa:	bd70      	pop	{r4, r5, r6, pc}
 8007ffc:	0800a379 	.word	0x0800a379
 8008000:	0800a3f9 	.word	0x0800a3f9

08008004 <__multadd>:
 8008004:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8008008:	690d      	ldr	r5, [r1, #16]
 800800a:	4607      	mov	r7, r0
 800800c:	460c      	mov	r4, r1
 800800e:	461e      	mov	r6, r3
 8008010:	f101 0c14 	add.w	ip, r1, #20
 8008014:	2000      	movs	r0, #0
 8008016:	f8dc 3000 	ldr.w	r3, [ip]
 800801a:	b299      	uxth	r1, r3
 800801c:	fb02 6101 	mla	r1, r2, r1, r6
 8008020:	0c1e      	lsrs	r6, r3, #16
 8008022:	0c0b      	lsrs	r3, r1, #16
 8008024:	fb02 3306 	mla	r3, r2, r6, r3
 8008028:	b289      	uxth	r1, r1
 800802a:	3001      	adds	r0, #1
 800802c:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 8008030:	4285      	cmp	r5, r0
 8008032:	f84c 1b04 	str.w	r1, [ip], #4
 8008036:	ea4f 4613 	mov.w	r6, r3, lsr #16
 800803a:	dcec      	bgt.n	8008016 <__multadd+0x12>
 800803c:	b30e      	cbz	r6, 8008082 <__multadd+0x7e>
 800803e:	68a3      	ldr	r3, [r4, #8]
 8008040:	42ab      	cmp	r3, r5
 8008042:	dc19      	bgt.n	8008078 <__multadd+0x74>
 8008044:	6861      	ldr	r1, [r4, #4]
 8008046:	4638      	mov	r0, r7
 8008048:	3101      	adds	r1, #1
 800804a:	f7ff ff79 	bl	8007f40 <_Balloc>
 800804e:	4680      	mov	r8, r0
 8008050:	b928      	cbnz	r0, 800805e <__multadd+0x5a>
 8008052:	4602      	mov	r2, r0
 8008054:	4b0c      	ldr	r3, [pc, #48]	@ (8008088 <__multadd+0x84>)
 8008056:	480d      	ldr	r0, [pc, #52]	@ (800808c <__multadd+0x88>)
 8008058:	21ba      	movs	r1, #186	@ 0xba
 800805a:	f000 fd2f 	bl	8008abc <__assert_func>
 800805e:	6922      	ldr	r2, [r4, #16]
 8008060:	3202      	adds	r2, #2
 8008062:	f104 010c 	add.w	r1, r4, #12
 8008066:	0092      	lsls	r2, r2, #2
 8008068:	300c      	adds	r0, #12
 800806a:	f000 fd19 	bl	8008aa0 <memcpy>
 800806e:	4621      	mov	r1, r4
 8008070:	4638      	mov	r0, r7
 8008072:	f7ff ffa5 	bl	8007fc0 <_Bfree>
 8008076:	4644      	mov	r4, r8
 8008078:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 800807c:	3501      	adds	r5, #1
 800807e:	615e      	str	r6, [r3, #20]
 8008080:	6125      	str	r5, [r4, #16]
 8008082:	4620      	mov	r0, r4
 8008084:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8008088:	0800a3e8 	.word	0x0800a3e8
 800808c:	0800a3f9 	.word	0x0800a3f9

08008090 <__hi0bits>:
 8008090:	f5b0 3f80 	cmp.w	r0, #65536	@ 0x10000
 8008094:	4603      	mov	r3, r0
 8008096:	bf36      	itet	cc
 8008098:	0403      	lslcc	r3, r0, #16
 800809a:	2000      	movcs	r0, #0
 800809c:	2010      	movcc	r0, #16
 800809e:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 80080a2:	bf3c      	itt	cc
 80080a4:	021b      	lslcc	r3, r3, #8
 80080a6:	3008      	addcc	r0, #8
 80080a8:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 80080ac:	bf3c      	itt	cc
 80080ae:	011b      	lslcc	r3, r3, #4
 80080b0:	3004      	addcc	r0, #4
 80080b2:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80080b6:	bf3c      	itt	cc
 80080b8:	009b      	lslcc	r3, r3, #2
 80080ba:	3002      	addcc	r0, #2
 80080bc:	2b00      	cmp	r3, #0
 80080be:	db05      	blt.n	80080cc <__hi0bits+0x3c>
 80080c0:	f013 4f80 	tst.w	r3, #1073741824	@ 0x40000000
 80080c4:	f100 0001 	add.w	r0, r0, #1
 80080c8:	bf08      	it	eq
 80080ca:	2020      	moveq	r0, #32
 80080cc:	4770      	bx	lr

080080ce <__lo0bits>:
 80080ce:	6803      	ldr	r3, [r0, #0]
 80080d0:	4602      	mov	r2, r0
 80080d2:	f013 0007 	ands.w	r0, r3, #7
 80080d6:	d00b      	beq.n	80080f0 <__lo0bits+0x22>
 80080d8:	07d9      	lsls	r1, r3, #31
 80080da:	d421      	bmi.n	8008120 <__lo0bits+0x52>
 80080dc:	0798      	lsls	r0, r3, #30
 80080de:	bf49      	itett	mi
 80080e0:	085b      	lsrmi	r3, r3, #1
 80080e2:	089b      	lsrpl	r3, r3, #2
 80080e4:	2001      	movmi	r0, #1
 80080e6:	6013      	strmi	r3, [r2, #0]
 80080e8:	bf5c      	itt	pl
 80080ea:	6013      	strpl	r3, [r2, #0]
 80080ec:	2002      	movpl	r0, #2
 80080ee:	4770      	bx	lr
 80080f0:	b299      	uxth	r1, r3
 80080f2:	b909      	cbnz	r1, 80080f8 <__lo0bits+0x2a>
 80080f4:	0c1b      	lsrs	r3, r3, #16
 80080f6:	2010      	movs	r0, #16
 80080f8:	b2d9      	uxtb	r1, r3
 80080fa:	b909      	cbnz	r1, 8008100 <__lo0bits+0x32>
 80080fc:	3008      	adds	r0, #8
 80080fe:	0a1b      	lsrs	r3, r3, #8
 8008100:	0719      	lsls	r1, r3, #28
 8008102:	bf04      	itt	eq
 8008104:	091b      	lsreq	r3, r3, #4
 8008106:	3004      	addeq	r0, #4
 8008108:	0799      	lsls	r1, r3, #30
 800810a:	bf04      	itt	eq
 800810c:	089b      	lsreq	r3, r3, #2
 800810e:	3002      	addeq	r0, #2
 8008110:	07d9      	lsls	r1, r3, #31
 8008112:	d403      	bmi.n	800811c <__lo0bits+0x4e>
 8008114:	085b      	lsrs	r3, r3, #1
 8008116:	f100 0001 	add.w	r0, r0, #1
 800811a:	d003      	beq.n	8008124 <__lo0bits+0x56>
 800811c:	6013      	str	r3, [r2, #0]
 800811e:	4770      	bx	lr
 8008120:	2000      	movs	r0, #0
 8008122:	4770      	bx	lr
 8008124:	2020      	movs	r0, #32
 8008126:	4770      	bx	lr

08008128 <__i2b>:
 8008128:	b510      	push	{r4, lr}
 800812a:	460c      	mov	r4, r1
 800812c:	2101      	movs	r1, #1
 800812e:	f7ff ff07 	bl	8007f40 <_Balloc>
 8008132:	4602      	mov	r2, r0
 8008134:	b928      	cbnz	r0, 8008142 <__i2b+0x1a>
 8008136:	4b05      	ldr	r3, [pc, #20]	@ (800814c <__i2b+0x24>)
 8008138:	4805      	ldr	r0, [pc, #20]	@ (8008150 <__i2b+0x28>)
 800813a:	f240 1145 	movw	r1, #325	@ 0x145
 800813e:	f000 fcbd 	bl	8008abc <__assert_func>
 8008142:	2301      	movs	r3, #1
 8008144:	6144      	str	r4, [r0, #20]
 8008146:	6103      	str	r3, [r0, #16]
 8008148:	bd10      	pop	{r4, pc}
 800814a:	bf00      	nop
 800814c:	0800a3e8 	.word	0x0800a3e8
 8008150:	0800a3f9 	.word	0x0800a3f9

08008154 <__multiply>:
 8008154:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008158:	4614      	mov	r4, r2
 800815a:	690a      	ldr	r2, [r1, #16]
 800815c:	6923      	ldr	r3, [r4, #16]
 800815e:	429a      	cmp	r2, r3
 8008160:	bfa8      	it	ge
 8008162:	4623      	movge	r3, r4
 8008164:	460f      	mov	r7, r1
 8008166:	bfa4      	itt	ge
 8008168:	460c      	movge	r4, r1
 800816a:	461f      	movge	r7, r3
 800816c:	f8d4 a010 	ldr.w	sl, [r4, #16]
 8008170:	f8d7 9010 	ldr.w	r9, [r7, #16]
 8008174:	68a3      	ldr	r3, [r4, #8]
 8008176:	6861      	ldr	r1, [r4, #4]
 8008178:	eb0a 0609 	add.w	r6, sl, r9
 800817c:	42b3      	cmp	r3, r6
 800817e:	b085      	sub	sp, #20
 8008180:	bfb8      	it	lt
 8008182:	3101      	addlt	r1, #1
 8008184:	f7ff fedc 	bl	8007f40 <_Balloc>
 8008188:	b930      	cbnz	r0, 8008198 <__multiply+0x44>
 800818a:	4602      	mov	r2, r0
 800818c:	4b44      	ldr	r3, [pc, #272]	@ (80082a0 <__multiply+0x14c>)
 800818e:	4845      	ldr	r0, [pc, #276]	@ (80082a4 <__multiply+0x150>)
 8008190:	f44f 71b1 	mov.w	r1, #354	@ 0x162
 8008194:	f000 fc92 	bl	8008abc <__assert_func>
 8008198:	f100 0514 	add.w	r5, r0, #20
 800819c:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 80081a0:	462b      	mov	r3, r5
 80081a2:	2200      	movs	r2, #0
 80081a4:	4543      	cmp	r3, r8
 80081a6:	d321      	bcc.n	80081ec <__multiply+0x98>
 80081a8:	f107 0114 	add.w	r1, r7, #20
 80081ac:	f104 0214 	add.w	r2, r4, #20
 80081b0:	eb02 028a 	add.w	r2, r2, sl, lsl #2
 80081b4:	eb01 0389 	add.w	r3, r1, r9, lsl #2
 80081b8:	9302      	str	r3, [sp, #8]
 80081ba:	1b13      	subs	r3, r2, r4
 80081bc:	3b15      	subs	r3, #21
 80081be:	f023 0303 	bic.w	r3, r3, #3
 80081c2:	3304      	adds	r3, #4
 80081c4:	f104 0715 	add.w	r7, r4, #21
 80081c8:	42ba      	cmp	r2, r7
 80081ca:	bf38      	it	cc
 80081cc:	2304      	movcc	r3, #4
 80081ce:	9301      	str	r3, [sp, #4]
 80081d0:	9b02      	ldr	r3, [sp, #8]
 80081d2:	9103      	str	r1, [sp, #12]
 80081d4:	428b      	cmp	r3, r1
 80081d6:	d80c      	bhi.n	80081f2 <__multiply+0x9e>
 80081d8:	2e00      	cmp	r6, #0
 80081da:	dd03      	ble.n	80081e4 <__multiply+0x90>
 80081dc:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 80081e0:	2b00      	cmp	r3, #0
 80081e2:	d05b      	beq.n	800829c <__multiply+0x148>
 80081e4:	6106      	str	r6, [r0, #16]
 80081e6:	b005      	add	sp, #20
 80081e8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80081ec:	f843 2b04 	str.w	r2, [r3], #4
 80081f0:	e7d8      	b.n	80081a4 <__multiply+0x50>
 80081f2:	f8b1 a000 	ldrh.w	sl, [r1]
 80081f6:	f1ba 0f00 	cmp.w	sl, #0
 80081fa:	d024      	beq.n	8008246 <__multiply+0xf2>
 80081fc:	f104 0e14 	add.w	lr, r4, #20
 8008200:	46a9      	mov	r9, r5
 8008202:	f04f 0c00 	mov.w	ip, #0
 8008206:	f85e 7b04 	ldr.w	r7, [lr], #4
 800820a:	f8d9 3000 	ldr.w	r3, [r9]
 800820e:	fa1f fb87 	uxth.w	fp, r7
 8008212:	b29b      	uxth	r3, r3
 8008214:	fb0a 330b 	mla	r3, sl, fp, r3
 8008218:	ea4f 4b17 	mov.w	fp, r7, lsr #16
 800821c:	f8d9 7000 	ldr.w	r7, [r9]
 8008220:	4463      	add	r3, ip
 8008222:	ea4f 4c17 	mov.w	ip, r7, lsr #16
 8008226:	fb0a c70b 	mla	r7, sl, fp, ip
 800822a:	eb07 4713 	add.w	r7, r7, r3, lsr #16
 800822e:	b29b      	uxth	r3, r3
 8008230:	ea43 4307 	orr.w	r3, r3, r7, lsl #16
 8008234:	4572      	cmp	r2, lr
 8008236:	f849 3b04 	str.w	r3, [r9], #4
 800823a:	ea4f 4c17 	mov.w	ip, r7, lsr #16
 800823e:	d8e2      	bhi.n	8008206 <__multiply+0xb2>
 8008240:	9b01      	ldr	r3, [sp, #4]
 8008242:	f845 c003 	str.w	ip, [r5, r3]
 8008246:	9b03      	ldr	r3, [sp, #12]
 8008248:	f8b3 9002 	ldrh.w	r9, [r3, #2]
 800824c:	3104      	adds	r1, #4
 800824e:	f1b9 0f00 	cmp.w	r9, #0
 8008252:	d021      	beq.n	8008298 <__multiply+0x144>
 8008254:	682b      	ldr	r3, [r5, #0]
 8008256:	f104 0c14 	add.w	ip, r4, #20
 800825a:	46ae      	mov	lr, r5
 800825c:	f04f 0a00 	mov.w	sl, #0
 8008260:	f8bc b000 	ldrh.w	fp, [ip]
 8008264:	f8be 7002 	ldrh.w	r7, [lr, #2]
 8008268:	fb09 770b 	mla	r7, r9, fp, r7
 800826c:	4457      	add	r7, sl
 800826e:	b29b      	uxth	r3, r3
 8008270:	ea43 4307 	orr.w	r3, r3, r7, lsl #16
 8008274:	f84e 3b04 	str.w	r3, [lr], #4
 8008278:	f85c 3b04 	ldr.w	r3, [ip], #4
 800827c:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 8008280:	f8be 3000 	ldrh.w	r3, [lr]
 8008284:	fb09 330a 	mla	r3, r9, sl, r3
 8008288:	eb03 4317 	add.w	r3, r3, r7, lsr #16
 800828c:	4562      	cmp	r2, ip
 800828e:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 8008292:	d8e5      	bhi.n	8008260 <__multiply+0x10c>
 8008294:	9f01      	ldr	r7, [sp, #4]
 8008296:	51eb      	str	r3, [r5, r7]
 8008298:	3504      	adds	r5, #4
 800829a:	e799      	b.n	80081d0 <__multiply+0x7c>
 800829c:	3e01      	subs	r6, #1
 800829e:	e79b      	b.n	80081d8 <__multiply+0x84>
 80082a0:	0800a3e8 	.word	0x0800a3e8
 80082a4:	0800a3f9 	.word	0x0800a3f9

080082a8 <__pow5mult>:
 80082a8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80082ac:	4615      	mov	r5, r2
 80082ae:	f012 0203 	ands.w	r2, r2, #3
 80082b2:	4607      	mov	r7, r0
 80082b4:	460e      	mov	r6, r1
 80082b6:	d007      	beq.n	80082c8 <__pow5mult+0x20>
 80082b8:	4c25      	ldr	r4, [pc, #148]	@ (8008350 <__pow5mult+0xa8>)
 80082ba:	3a01      	subs	r2, #1
 80082bc:	2300      	movs	r3, #0
 80082be:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 80082c2:	f7ff fe9f 	bl	8008004 <__multadd>
 80082c6:	4606      	mov	r6, r0
 80082c8:	10ad      	asrs	r5, r5, #2
 80082ca:	d03d      	beq.n	8008348 <__pow5mult+0xa0>
 80082cc:	69fc      	ldr	r4, [r7, #28]
 80082ce:	b97c      	cbnz	r4, 80082f0 <__pow5mult+0x48>
 80082d0:	2010      	movs	r0, #16
 80082d2:	f7ff fd7f 	bl	8007dd4 <malloc>
 80082d6:	4602      	mov	r2, r0
 80082d8:	61f8      	str	r0, [r7, #28]
 80082da:	b928      	cbnz	r0, 80082e8 <__pow5mult+0x40>
 80082dc:	4b1d      	ldr	r3, [pc, #116]	@ (8008354 <__pow5mult+0xac>)
 80082de:	481e      	ldr	r0, [pc, #120]	@ (8008358 <__pow5mult+0xb0>)
 80082e0:	f240 11b3 	movw	r1, #435	@ 0x1b3
 80082e4:	f000 fbea 	bl	8008abc <__assert_func>
 80082e8:	e9c0 4401 	strd	r4, r4, [r0, #4]
 80082ec:	6004      	str	r4, [r0, #0]
 80082ee:	60c4      	str	r4, [r0, #12]
 80082f0:	f8d7 801c 	ldr.w	r8, [r7, #28]
 80082f4:	f8d8 4008 	ldr.w	r4, [r8, #8]
 80082f8:	b94c      	cbnz	r4, 800830e <__pow5mult+0x66>
 80082fa:	f240 2171 	movw	r1, #625	@ 0x271
 80082fe:	4638      	mov	r0, r7
 8008300:	f7ff ff12 	bl	8008128 <__i2b>
 8008304:	2300      	movs	r3, #0
 8008306:	f8c8 0008 	str.w	r0, [r8, #8]
 800830a:	4604      	mov	r4, r0
 800830c:	6003      	str	r3, [r0, #0]
 800830e:	f04f 0900 	mov.w	r9, #0
 8008312:	07eb      	lsls	r3, r5, #31
 8008314:	d50a      	bpl.n	800832c <__pow5mult+0x84>
 8008316:	4631      	mov	r1, r6
 8008318:	4622      	mov	r2, r4
 800831a:	4638      	mov	r0, r7
 800831c:	f7ff ff1a 	bl	8008154 <__multiply>
 8008320:	4631      	mov	r1, r6
 8008322:	4680      	mov	r8, r0
 8008324:	4638      	mov	r0, r7
 8008326:	f7ff fe4b 	bl	8007fc0 <_Bfree>
 800832a:	4646      	mov	r6, r8
 800832c:	106d      	asrs	r5, r5, #1
 800832e:	d00b      	beq.n	8008348 <__pow5mult+0xa0>
 8008330:	6820      	ldr	r0, [r4, #0]
 8008332:	b938      	cbnz	r0, 8008344 <__pow5mult+0x9c>
 8008334:	4622      	mov	r2, r4
 8008336:	4621      	mov	r1, r4
 8008338:	4638      	mov	r0, r7
 800833a:	f7ff ff0b 	bl	8008154 <__multiply>
 800833e:	6020      	str	r0, [r4, #0]
 8008340:	f8c0 9000 	str.w	r9, [r0]
 8008344:	4604      	mov	r4, r0
 8008346:	e7e4      	b.n	8008312 <__pow5mult+0x6a>
 8008348:	4630      	mov	r0, r6
 800834a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800834e:	bf00      	nop
 8008350:	0800a454 	.word	0x0800a454
 8008354:	0800a379 	.word	0x0800a379
 8008358:	0800a3f9 	.word	0x0800a3f9

0800835c <__lshift>:
 800835c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8008360:	460c      	mov	r4, r1
 8008362:	6849      	ldr	r1, [r1, #4]
 8008364:	6923      	ldr	r3, [r4, #16]
 8008366:	eb03 1862 	add.w	r8, r3, r2, asr #5
 800836a:	68a3      	ldr	r3, [r4, #8]
 800836c:	4607      	mov	r7, r0
 800836e:	4691      	mov	r9, r2
 8008370:	ea4f 1a62 	mov.w	sl, r2, asr #5
 8008374:	f108 0601 	add.w	r6, r8, #1
 8008378:	42b3      	cmp	r3, r6
 800837a:	db0b      	blt.n	8008394 <__lshift+0x38>
 800837c:	4638      	mov	r0, r7
 800837e:	f7ff fddf 	bl	8007f40 <_Balloc>
 8008382:	4605      	mov	r5, r0
 8008384:	b948      	cbnz	r0, 800839a <__lshift+0x3e>
 8008386:	4602      	mov	r2, r0
 8008388:	4b28      	ldr	r3, [pc, #160]	@ (800842c <__lshift+0xd0>)
 800838a:	4829      	ldr	r0, [pc, #164]	@ (8008430 <__lshift+0xd4>)
 800838c:	f44f 71ef 	mov.w	r1, #478	@ 0x1de
 8008390:	f000 fb94 	bl	8008abc <__assert_func>
 8008394:	3101      	adds	r1, #1
 8008396:	005b      	lsls	r3, r3, #1
 8008398:	e7ee      	b.n	8008378 <__lshift+0x1c>
 800839a:	2300      	movs	r3, #0
 800839c:	f100 0114 	add.w	r1, r0, #20
 80083a0:	f100 0210 	add.w	r2, r0, #16
 80083a4:	4618      	mov	r0, r3
 80083a6:	4553      	cmp	r3, sl
 80083a8:	db33      	blt.n	8008412 <__lshift+0xb6>
 80083aa:	6920      	ldr	r0, [r4, #16]
 80083ac:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 80083b0:	f104 0314 	add.w	r3, r4, #20
 80083b4:	f019 091f 	ands.w	r9, r9, #31
 80083b8:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 80083bc:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 80083c0:	d02b      	beq.n	800841a <__lshift+0xbe>
 80083c2:	f1c9 0e20 	rsb	lr, r9, #32
 80083c6:	468a      	mov	sl, r1
 80083c8:	2200      	movs	r2, #0
 80083ca:	6818      	ldr	r0, [r3, #0]
 80083cc:	fa00 f009 	lsl.w	r0, r0, r9
 80083d0:	4310      	orrs	r0, r2
 80083d2:	f84a 0b04 	str.w	r0, [sl], #4
 80083d6:	f853 2b04 	ldr.w	r2, [r3], #4
 80083da:	459c      	cmp	ip, r3
 80083dc:	fa22 f20e 	lsr.w	r2, r2, lr
 80083e0:	d8f3      	bhi.n	80083ca <__lshift+0x6e>
 80083e2:	ebac 0304 	sub.w	r3, ip, r4
 80083e6:	3b15      	subs	r3, #21
 80083e8:	f023 0303 	bic.w	r3, r3, #3
 80083ec:	3304      	adds	r3, #4
 80083ee:	f104 0015 	add.w	r0, r4, #21
 80083f2:	4584      	cmp	ip, r0
 80083f4:	bf38      	it	cc
 80083f6:	2304      	movcc	r3, #4
 80083f8:	50ca      	str	r2, [r1, r3]
 80083fa:	b10a      	cbz	r2, 8008400 <__lshift+0xa4>
 80083fc:	f108 0602 	add.w	r6, r8, #2
 8008400:	3e01      	subs	r6, #1
 8008402:	4638      	mov	r0, r7
 8008404:	612e      	str	r6, [r5, #16]
 8008406:	4621      	mov	r1, r4
 8008408:	f7ff fdda 	bl	8007fc0 <_Bfree>
 800840c:	4628      	mov	r0, r5
 800840e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008412:	f842 0f04 	str.w	r0, [r2, #4]!
 8008416:	3301      	adds	r3, #1
 8008418:	e7c5      	b.n	80083a6 <__lshift+0x4a>
 800841a:	3904      	subs	r1, #4
 800841c:	f853 2b04 	ldr.w	r2, [r3], #4
 8008420:	f841 2f04 	str.w	r2, [r1, #4]!
 8008424:	459c      	cmp	ip, r3
 8008426:	d8f9      	bhi.n	800841c <__lshift+0xc0>
 8008428:	e7ea      	b.n	8008400 <__lshift+0xa4>
 800842a:	bf00      	nop
 800842c:	0800a3e8 	.word	0x0800a3e8
 8008430:	0800a3f9 	.word	0x0800a3f9

08008434 <__mcmp>:
 8008434:	690a      	ldr	r2, [r1, #16]
 8008436:	4603      	mov	r3, r0
 8008438:	6900      	ldr	r0, [r0, #16]
 800843a:	1a80      	subs	r0, r0, r2
 800843c:	b530      	push	{r4, r5, lr}
 800843e:	d10e      	bne.n	800845e <__mcmp+0x2a>
 8008440:	3314      	adds	r3, #20
 8008442:	3114      	adds	r1, #20
 8008444:	eb03 0482 	add.w	r4, r3, r2, lsl #2
 8008448:	eb01 0182 	add.w	r1, r1, r2, lsl #2
 800844c:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 8008450:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 8008454:	4295      	cmp	r5, r2
 8008456:	d003      	beq.n	8008460 <__mcmp+0x2c>
 8008458:	d205      	bcs.n	8008466 <__mcmp+0x32>
 800845a:	f04f 30ff 	mov.w	r0, #4294967295
 800845e:	bd30      	pop	{r4, r5, pc}
 8008460:	42a3      	cmp	r3, r4
 8008462:	d3f3      	bcc.n	800844c <__mcmp+0x18>
 8008464:	e7fb      	b.n	800845e <__mcmp+0x2a>
 8008466:	2001      	movs	r0, #1
 8008468:	e7f9      	b.n	800845e <__mcmp+0x2a>
	...

0800846c <__mdiff>:
 800846c:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008470:	4689      	mov	r9, r1
 8008472:	4606      	mov	r6, r0
 8008474:	4611      	mov	r1, r2
 8008476:	4648      	mov	r0, r9
 8008478:	4614      	mov	r4, r2
 800847a:	f7ff ffdb 	bl	8008434 <__mcmp>
 800847e:	1e05      	subs	r5, r0, #0
 8008480:	d112      	bne.n	80084a8 <__mdiff+0x3c>
 8008482:	4629      	mov	r1, r5
 8008484:	4630      	mov	r0, r6
 8008486:	f7ff fd5b 	bl	8007f40 <_Balloc>
 800848a:	4602      	mov	r2, r0
 800848c:	b928      	cbnz	r0, 800849a <__mdiff+0x2e>
 800848e:	4b3f      	ldr	r3, [pc, #252]	@ (800858c <__mdiff+0x120>)
 8008490:	f240 2137 	movw	r1, #567	@ 0x237
 8008494:	483e      	ldr	r0, [pc, #248]	@ (8008590 <__mdiff+0x124>)
 8008496:	f000 fb11 	bl	8008abc <__assert_func>
 800849a:	2301      	movs	r3, #1
 800849c:	e9c0 3504 	strd	r3, r5, [r0, #16]
 80084a0:	4610      	mov	r0, r2
 80084a2:	b003      	add	sp, #12
 80084a4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80084a8:	bfbc      	itt	lt
 80084aa:	464b      	movlt	r3, r9
 80084ac:	46a1      	movlt	r9, r4
 80084ae:	4630      	mov	r0, r6
 80084b0:	f8d9 1004 	ldr.w	r1, [r9, #4]
 80084b4:	bfba      	itte	lt
 80084b6:	461c      	movlt	r4, r3
 80084b8:	2501      	movlt	r5, #1
 80084ba:	2500      	movge	r5, #0
 80084bc:	f7ff fd40 	bl	8007f40 <_Balloc>
 80084c0:	4602      	mov	r2, r0
 80084c2:	b918      	cbnz	r0, 80084cc <__mdiff+0x60>
 80084c4:	4b31      	ldr	r3, [pc, #196]	@ (800858c <__mdiff+0x120>)
 80084c6:	f240 2145 	movw	r1, #581	@ 0x245
 80084ca:	e7e3      	b.n	8008494 <__mdiff+0x28>
 80084cc:	f8d9 7010 	ldr.w	r7, [r9, #16]
 80084d0:	6926      	ldr	r6, [r4, #16]
 80084d2:	60c5      	str	r5, [r0, #12]
 80084d4:	f109 0310 	add.w	r3, r9, #16
 80084d8:	f109 0514 	add.w	r5, r9, #20
 80084dc:	f104 0e14 	add.w	lr, r4, #20
 80084e0:	f100 0b14 	add.w	fp, r0, #20
 80084e4:	eb05 0887 	add.w	r8, r5, r7, lsl #2
 80084e8:	eb0e 0686 	add.w	r6, lr, r6, lsl #2
 80084ec:	9301      	str	r3, [sp, #4]
 80084ee:	46d9      	mov	r9, fp
 80084f0:	f04f 0c00 	mov.w	ip, #0
 80084f4:	9b01      	ldr	r3, [sp, #4]
 80084f6:	f85e 0b04 	ldr.w	r0, [lr], #4
 80084fa:	f853 af04 	ldr.w	sl, [r3, #4]!
 80084fe:	9301      	str	r3, [sp, #4]
 8008500:	fa1f f38a 	uxth.w	r3, sl
 8008504:	4619      	mov	r1, r3
 8008506:	b283      	uxth	r3, r0
 8008508:	1acb      	subs	r3, r1, r3
 800850a:	0c00      	lsrs	r0, r0, #16
 800850c:	4463      	add	r3, ip
 800850e:	ebc0 401a 	rsb	r0, r0, sl, lsr #16
 8008512:	eb00 4023 	add.w	r0, r0, r3, asr #16
 8008516:	b29b      	uxth	r3, r3
 8008518:	ea43 4300 	orr.w	r3, r3, r0, lsl #16
 800851c:	4576      	cmp	r6, lr
 800851e:	f849 3b04 	str.w	r3, [r9], #4
 8008522:	ea4f 4c20 	mov.w	ip, r0, asr #16
 8008526:	d8e5      	bhi.n	80084f4 <__mdiff+0x88>
 8008528:	1b33      	subs	r3, r6, r4
 800852a:	3b15      	subs	r3, #21
 800852c:	f023 0303 	bic.w	r3, r3, #3
 8008530:	3415      	adds	r4, #21
 8008532:	3304      	adds	r3, #4
 8008534:	42a6      	cmp	r6, r4
 8008536:	bf38      	it	cc
 8008538:	2304      	movcc	r3, #4
 800853a:	441d      	add	r5, r3
 800853c:	445b      	add	r3, fp
 800853e:	461e      	mov	r6, r3
 8008540:	462c      	mov	r4, r5
 8008542:	4544      	cmp	r4, r8
 8008544:	d30e      	bcc.n	8008564 <__mdiff+0xf8>
 8008546:	f108 0103 	add.w	r1, r8, #3
 800854a:	1b49      	subs	r1, r1, r5
 800854c:	f021 0103 	bic.w	r1, r1, #3
 8008550:	3d03      	subs	r5, #3
 8008552:	45a8      	cmp	r8, r5
 8008554:	bf38      	it	cc
 8008556:	2100      	movcc	r1, #0
 8008558:	440b      	add	r3, r1
 800855a:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 800855e:	b191      	cbz	r1, 8008586 <__mdiff+0x11a>
 8008560:	6117      	str	r7, [r2, #16]
 8008562:	e79d      	b.n	80084a0 <__mdiff+0x34>
 8008564:	f854 1b04 	ldr.w	r1, [r4], #4
 8008568:	46e6      	mov	lr, ip
 800856a:	0c08      	lsrs	r0, r1, #16
 800856c:	fa1c fc81 	uxtah	ip, ip, r1
 8008570:	4471      	add	r1, lr
 8008572:	eb00 402c 	add.w	r0, r0, ip, asr #16
 8008576:	b289      	uxth	r1, r1
 8008578:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 800857c:	f846 1b04 	str.w	r1, [r6], #4
 8008580:	ea4f 4c20 	mov.w	ip, r0, asr #16
 8008584:	e7dd      	b.n	8008542 <__mdiff+0xd6>
 8008586:	3f01      	subs	r7, #1
 8008588:	e7e7      	b.n	800855a <__mdiff+0xee>
 800858a:	bf00      	nop
 800858c:	0800a3e8 	.word	0x0800a3e8
 8008590:	0800a3f9 	.word	0x0800a3f9

08008594 <__d2b>:
 8008594:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 8008598:	460f      	mov	r7, r1
 800859a:	2101      	movs	r1, #1
 800859c:	ec59 8b10 	vmov	r8, r9, d0
 80085a0:	4616      	mov	r6, r2
 80085a2:	f7ff fccd 	bl	8007f40 <_Balloc>
 80085a6:	4604      	mov	r4, r0
 80085a8:	b930      	cbnz	r0, 80085b8 <__d2b+0x24>
 80085aa:	4602      	mov	r2, r0
 80085ac:	4b23      	ldr	r3, [pc, #140]	@ (800863c <__d2b+0xa8>)
 80085ae:	4824      	ldr	r0, [pc, #144]	@ (8008640 <__d2b+0xac>)
 80085b0:	f240 310f 	movw	r1, #783	@ 0x30f
 80085b4:	f000 fa82 	bl	8008abc <__assert_func>
 80085b8:	f3c9 550a 	ubfx	r5, r9, #20, #11
 80085bc:	f3c9 0313 	ubfx	r3, r9, #0, #20
 80085c0:	b10d      	cbz	r5, 80085c6 <__d2b+0x32>
 80085c2:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 80085c6:	9301      	str	r3, [sp, #4]
 80085c8:	f1b8 0300 	subs.w	r3, r8, #0
 80085cc:	d023      	beq.n	8008616 <__d2b+0x82>
 80085ce:	4668      	mov	r0, sp
 80085d0:	9300      	str	r3, [sp, #0]
 80085d2:	f7ff fd7c 	bl	80080ce <__lo0bits>
 80085d6:	e9dd 1200 	ldrd	r1, r2, [sp]
 80085da:	b1d0      	cbz	r0, 8008612 <__d2b+0x7e>
 80085dc:	f1c0 0320 	rsb	r3, r0, #32
 80085e0:	fa02 f303 	lsl.w	r3, r2, r3
 80085e4:	430b      	orrs	r3, r1
 80085e6:	40c2      	lsrs	r2, r0
 80085e8:	6163      	str	r3, [r4, #20]
 80085ea:	9201      	str	r2, [sp, #4]
 80085ec:	9b01      	ldr	r3, [sp, #4]
 80085ee:	61a3      	str	r3, [r4, #24]
 80085f0:	2b00      	cmp	r3, #0
 80085f2:	bf0c      	ite	eq
 80085f4:	2201      	moveq	r2, #1
 80085f6:	2202      	movne	r2, #2
 80085f8:	6122      	str	r2, [r4, #16]
 80085fa:	b1a5      	cbz	r5, 8008626 <__d2b+0x92>
 80085fc:	f2a5 4533 	subw	r5, r5, #1075	@ 0x433
 8008600:	4405      	add	r5, r0
 8008602:	603d      	str	r5, [r7, #0]
 8008604:	f1c0 0035 	rsb	r0, r0, #53	@ 0x35
 8008608:	6030      	str	r0, [r6, #0]
 800860a:	4620      	mov	r0, r4
 800860c:	b003      	add	sp, #12
 800860e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8008612:	6161      	str	r1, [r4, #20]
 8008614:	e7ea      	b.n	80085ec <__d2b+0x58>
 8008616:	a801      	add	r0, sp, #4
 8008618:	f7ff fd59 	bl	80080ce <__lo0bits>
 800861c:	9b01      	ldr	r3, [sp, #4]
 800861e:	6163      	str	r3, [r4, #20]
 8008620:	3020      	adds	r0, #32
 8008622:	2201      	movs	r2, #1
 8008624:	e7e8      	b.n	80085f8 <__d2b+0x64>
 8008626:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 800862a:	f2a0 4032 	subw	r0, r0, #1074	@ 0x432
 800862e:	6038      	str	r0, [r7, #0]
 8008630:	6918      	ldr	r0, [r3, #16]
 8008632:	f7ff fd2d 	bl	8008090 <__hi0bits>
 8008636:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 800863a:	e7e5      	b.n	8008608 <__d2b+0x74>
 800863c:	0800a3e8 	.word	0x0800a3e8
 8008640:	0800a3f9 	.word	0x0800a3f9

08008644 <__ssputs_r>:
 8008644:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8008648:	688e      	ldr	r6, [r1, #8]
 800864a:	461f      	mov	r7, r3
 800864c:	42be      	cmp	r6, r7
 800864e:	680b      	ldr	r3, [r1, #0]
 8008650:	4682      	mov	sl, r0
 8008652:	460c      	mov	r4, r1
 8008654:	4690      	mov	r8, r2
 8008656:	d82d      	bhi.n	80086b4 <__ssputs_r+0x70>
 8008658:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 800865c:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 8008660:	d026      	beq.n	80086b0 <__ssputs_r+0x6c>
 8008662:	6965      	ldr	r5, [r4, #20]
 8008664:	6909      	ldr	r1, [r1, #16]
 8008666:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800866a:	eba3 0901 	sub.w	r9, r3, r1
 800866e:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8008672:	1c7b      	adds	r3, r7, #1
 8008674:	444b      	add	r3, r9
 8008676:	106d      	asrs	r5, r5, #1
 8008678:	429d      	cmp	r5, r3
 800867a:	bf38      	it	cc
 800867c:	461d      	movcc	r5, r3
 800867e:	0553      	lsls	r3, r2, #21
 8008680:	d527      	bpl.n	80086d2 <__ssputs_r+0x8e>
 8008682:	4629      	mov	r1, r5
 8008684:	f7ff fbd0 	bl	8007e28 <_malloc_r>
 8008688:	4606      	mov	r6, r0
 800868a:	b360      	cbz	r0, 80086e6 <__ssputs_r+0xa2>
 800868c:	6921      	ldr	r1, [r4, #16]
 800868e:	464a      	mov	r2, r9
 8008690:	f000 fa06 	bl	8008aa0 <memcpy>
 8008694:	89a3      	ldrh	r3, [r4, #12]
 8008696:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 800869a:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800869e:	81a3      	strh	r3, [r4, #12]
 80086a0:	6126      	str	r6, [r4, #16]
 80086a2:	6165      	str	r5, [r4, #20]
 80086a4:	444e      	add	r6, r9
 80086a6:	eba5 0509 	sub.w	r5, r5, r9
 80086aa:	6026      	str	r6, [r4, #0]
 80086ac:	60a5      	str	r5, [r4, #8]
 80086ae:	463e      	mov	r6, r7
 80086b0:	42be      	cmp	r6, r7
 80086b2:	d900      	bls.n	80086b6 <__ssputs_r+0x72>
 80086b4:	463e      	mov	r6, r7
 80086b6:	6820      	ldr	r0, [r4, #0]
 80086b8:	4632      	mov	r2, r6
 80086ba:	4641      	mov	r1, r8
 80086bc:	f000 f9c6 	bl	8008a4c <memmove>
 80086c0:	68a3      	ldr	r3, [r4, #8]
 80086c2:	1b9b      	subs	r3, r3, r6
 80086c4:	60a3      	str	r3, [r4, #8]
 80086c6:	6823      	ldr	r3, [r4, #0]
 80086c8:	4433      	add	r3, r6
 80086ca:	6023      	str	r3, [r4, #0]
 80086cc:	2000      	movs	r0, #0
 80086ce:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80086d2:	462a      	mov	r2, r5
 80086d4:	f000 fa36 	bl	8008b44 <_realloc_r>
 80086d8:	4606      	mov	r6, r0
 80086da:	2800      	cmp	r0, #0
 80086dc:	d1e0      	bne.n	80086a0 <__ssputs_r+0x5c>
 80086de:	6921      	ldr	r1, [r4, #16]
 80086e0:	4650      	mov	r0, sl
 80086e2:	f7ff fb2d 	bl	8007d40 <_free_r>
 80086e6:	230c      	movs	r3, #12
 80086e8:	f8ca 3000 	str.w	r3, [sl]
 80086ec:	89a3      	ldrh	r3, [r4, #12]
 80086ee:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80086f2:	81a3      	strh	r3, [r4, #12]
 80086f4:	f04f 30ff 	mov.w	r0, #4294967295
 80086f8:	e7e9      	b.n	80086ce <__ssputs_r+0x8a>
	...

080086fc <_svfiprintf_r>:
 80086fc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008700:	4698      	mov	r8, r3
 8008702:	898b      	ldrh	r3, [r1, #12]
 8008704:	061b      	lsls	r3, r3, #24
 8008706:	b09d      	sub	sp, #116	@ 0x74
 8008708:	4607      	mov	r7, r0
 800870a:	460d      	mov	r5, r1
 800870c:	4614      	mov	r4, r2
 800870e:	d510      	bpl.n	8008732 <_svfiprintf_r+0x36>
 8008710:	690b      	ldr	r3, [r1, #16]
 8008712:	b973      	cbnz	r3, 8008732 <_svfiprintf_r+0x36>
 8008714:	2140      	movs	r1, #64	@ 0x40
 8008716:	f7ff fb87 	bl	8007e28 <_malloc_r>
 800871a:	6028      	str	r0, [r5, #0]
 800871c:	6128      	str	r0, [r5, #16]
 800871e:	b930      	cbnz	r0, 800872e <_svfiprintf_r+0x32>
 8008720:	230c      	movs	r3, #12
 8008722:	603b      	str	r3, [r7, #0]
 8008724:	f04f 30ff 	mov.w	r0, #4294967295
 8008728:	b01d      	add	sp, #116	@ 0x74
 800872a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800872e:	2340      	movs	r3, #64	@ 0x40
 8008730:	616b      	str	r3, [r5, #20]
 8008732:	2300      	movs	r3, #0
 8008734:	9309      	str	r3, [sp, #36]	@ 0x24
 8008736:	2320      	movs	r3, #32
 8008738:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 800873c:	f8cd 800c 	str.w	r8, [sp, #12]
 8008740:	2330      	movs	r3, #48	@ 0x30
 8008742:	f8df 819c 	ldr.w	r8, [pc, #412]	@ 80088e0 <_svfiprintf_r+0x1e4>
 8008746:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 800874a:	f04f 0901 	mov.w	r9, #1
 800874e:	4623      	mov	r3, r4
 8008750:	469a      	mov	sl, r3
 8008752:	f813 2b01 	ldrb.w	r2, [r3], #1
 8008756:	b10a      	cbz	r2, 800875c <_svfiprintf_r+0x60>
 8008758:	2a25      	cmp	r2, #37	@ 0x25
 800875a:	d1f9      	bne.n	8008750 <_svfiprintf_r+0x54>
 800875c:	ebba 0b04 	subs.w	fp, sl, r4
 8008760:	d00b      	beq.n	800877a <_svfiprintf_r+0x7e>
 8008762:	465b      	mov	r3, fp
 8008764:	4622      	mov	r2, r4
 8008766:	4629      	mov	r1, r5
 8008768:	4638      	mov	r0, r7
 800876a:	f7ff ff6b 	bl	8008644 <__ssputs_r>
 800876e:	3001      	adds	r0, #1
 8008770:	f000 80a7 	beq.w	80088c2 <_svfiprintf_r+0x1c6>
 8008774:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8008776:	445a      	add	r2, fp
 8008778:	9209      	str	r2, [sp, #36]	@ 0x24
 800877a:	f89a 3000 	ldrb.w	r3, [sl]
 800877e:	2b00      	cmp	r3, #0
 8008780:	f000 809f 	beq.w	80088c2 <_svfiprintf_r+0x1c6>
 8008784:	2300      	movs	r3, #0
 8008786:	f04f 32ff 	mov.w	r2, #4294967295
 800878a:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800878e:	f10a 0a01 	add.w	sl, sl, #1
 8008792:	9304      	str	r3, [sp, #16]
 8008794:	9307      	str	r3, [sp, #28]
 8008796:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 800879a:	931a      	str	r3, [sp, #104]	@ 0x68
 800879c:	4654      	mov	r4, sl
 800879e:	2205      	movs	r2, #5
 80087a0:	f814 1b01 	ldrb.w	r1, [r4], #1
 80087a4:	484e      	ldr	r0, [pc, #312]	@ (80088e0 <_svfiprintf_r+0x1e4>)
 80087a6:	f7f7 fd33 	bl	8000210 <memchr>
 80087aa:	9a04      	ldr	r2, [sp, #16]
 80087ac:	b9d8      	cbnz	r0, 80087e6 <_svfiprintf_r+0xea>
 80087ae:	06d0      	lsls	r0, r2, #27
 80087b0:	bf44      	itt	mi
 80087b2:	2320      	movmi	r3, #32
 80087b4:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 80087b8:	0711      	lsls	r1, r2, #28
 80087ba:	bf44      	itt	mi
 80087bc:	232b      	movmi	r3, #43	@ 0x2b
 80087be:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 80087c2:	f89a 3000 	ldrb.w	r3, [sl]
 80087c6:	2b2a      	cmp	r3, #42	@ 0x2a
 80087c8:	d015      	beq.n	80087f6 <_svfiprintf_r+0xfa>
 80087ca:	9a07      	ldr	r2, [sp, #28]
 80087cc:	4654      	mov	r4, sl
 80087ce:	2000      	movs	r0, #0
 80087d0:	f04f 0c0a 	mov.w	ip, #10
 80087d4:	4621      	mov	r1, r4
 80087d6:	f811 3b01 	ldrb.w	r3, [r1], #1
 80087da:	3b30      	subs	r3, #48	@ 0x30
 80087dc:	2b09      	cmp	r3, #9
 80087de:	d94b      	bls.n	8008878 <_svfiprintf_r+0x17c>
 80087e0:	b1b0      	cbz	r0, 8008810 <_svfiprintf_r+0x114>
 80087e2:	9207      	str	r2, [sp, #28]
 80087e4:	e014      	b.n	8008810 <_svfiprintf_r+0x114>
 80087e6:	eba0 0308 	sub.w	r3, r0, r8
 80087ea:	fa09 f303 	lsl.w	r3, r9, r3
 80087ee:	4313      	orrs	r3, r2
 80087f0:	9304      	str	r3, [sp, #16]
 80087f2:	46a2      	mov	sl, r4
 80087f4:	e7d2      	b.n	800879c <_svfiprintf_r+0xa0>
 80087f6:	9b03      	ldr	r3, [sp, #12]
 80087f8:	1d19      	adds	r1, r3, #4
 80087fa:	681b      	ldr	r3, [r3, #0]
 80087fc:	9103      	str	r1, [sp, #12]
 80087fe:	2b00      	cmp	r3, #0
 8008800:	bfbb      	ittet	lt
 8008802:	425b      	neglt	r3, r3
 8008804:	f042 0202 	orrlt.w	r2, r2, #2
 8008808:	9307      	strge	r3, [sp, #28]
 800880a:	9307      	strlt	r3, [sp, #28]
 800880c:	bfb8      	it	lt
 800880e:	9204      	strlt	r2, [sp, #16]
 8008810:	7823      	ldrb	r3, [r4, #0]
 8008812:	2b2e      	cmp	r3, #46	@ 0x2e
 8008814:	d10a      	bne.n	800882c <_svfiprintf_r+0x130>
 8008816:	7863      	ldrb	r3, [r4, #1]
 8008818:	2b2a      	cmp	r3, #42	@ 0x2a
 800881a:	d132      	bne.n	8008882 <_svfiprintf_r+0x186>
 800881c:	9b03      	ldr	r3, [sp, #12]
 800881e:	1d1a      	adds	r2, r3, #4
 8008820:	681b      	ldr	r3, [r3, #0]
 8008822:	9203      	str	r2, [sp, #12]
 8008824:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8008828:	3402      	adds	r4, #2
 800882a:	9305      	str	r3, [sp, #20]
 800882c:	f8df a0c0 	ldr.w	sl, [pc, #192]	@ 80088f0 <_svfiprintf_r+0x1f4>
 8008830:	7821      	ldrb	r1, [r4, #0]
 8008832:	2203      	movs	r2, #3
 8008834:	4650      	mov	r0, sl
 8008836:	f7f7 fceb 	bl	8000210 <memchr>
 800883a:	b138      	cbz	r0, 800884c <_svfiprintf_r+0x150>
 800883c:	9b04      	ldr	r3, [sp, #16]
 800883e:	eba0 000a 	sub.w	r0, r0, sl
 8008842:	2240      	movs	r2, #64	@ 0x40
 8008844:	4082      	lsls	r2, r0
 8008846:	4313      	orrs	r3, r2
 8008848:	3401      	adds	r4, #1
 800884a:	9304      	str	r3, [sp, #16]
 800884c:	f814 1b01 	ldrb.w	r1, [r4], #1
 8008850:	4824      	ldr	r0, [pc, #144]	@ (80088e4 <_svfiprintf_r+0x1e8>)
 8008852:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8008856:	2206      	movs	r2, #6
 8008858:	f7f7 fcda 	bl	8000210 <memchr>
 800885c:	2800      	cmp	r0, #0
 800885e:	d036      	beq.n	80088ce <_svfiprintf_r+0x1d2>
 8008860:	4b21      	ldr	r3, [pc, #132]	@ (80088e8 <_svfiprintf_r+0x1ec>)
 8008862:	bb1b      	cbnz	r3, 80088ac <_svfiprintf_r+0x1b0>
 8008864:	9b03      	ldr	r3, [sp, #12]
 8008866:	3307      	adds	r3, #7
 8008868:	f023 0307 	bic.w	r3, r3, #7
 800886c:	3308      	adds	r3, #8
 800886e:	9303      	str	r3, [sp, #12]
 8008870:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8008872:	4433      	add	r3, r6
 8008874:	9309      	str	r3, [sp, #36]	@ 0x24
 8008876:	e76a      	b.n	800874e <_svfiprintf_r+0x52>
 8008878:	fb0c 3202 	mla	r2, ip, r2, r3
 800887c:	460c      	mov	r4, r1
 800887e:	2001      	movs	r0, #1
 8008880:	e7a8      	b.n	80087d4 <_svfiprintf_r+0xd8>
 8008882:	2300      	movs	r3, #0
 8008884:	3401      	adds	r4, #1
 8008886:	9305      	str	r3, [sp, #20]
 8008888:	4619      	mov	r1, r3
 800888a:	f04f 0c0a 	mov.w	ip, #10
 800888e:	4620      	mov	r0, r4
 8008890:	f810 2b01 	ldrb.w	r2, [r0], #1
 8008894:	3a30      	subs	r2, #48	@ 0x30
 8008896:	2a09      	cmp	r2, #9
 8008898:	d903      	bls.n	80088a2 <_svfiprintf_r+0x1a6>
 800889a:	2b00      	cmp	r3, #0
 800889c:	d0c6      	beq.n	800882c <_svfiprintf_r+0x130>
 800889e:	9105      	str	r1, [sp, #20]
 80088a0:	e7c4      	b.n	800882c <_svfiprintf_r+0x130>
 80088a2:	fb0c 2101 	mla	r1, ip, r1, r2
 80088a6:	4604      	mov	r4, r0
 80088a8:	2301      	movs	r3, #1
 80088aa:	e7f0      	b.n	800888e <_svfiprintf_r+0x192>
 80088ac:	ab03      	add	r3, sp, #12
 80088ae:	9300      	str	r3, [sp, #0]
 80088b0:	462a      	mov	r2, r5
 80088b2:	4b0e      	ldr	r3, [pc, #56]	@ (80088ec <_svfiprintf_r+0x1f0>)
 80088b4:	a904      	add	r1, sp, #16
 80088b6:	4638      	mov	r0, r7
 80088b8:	f7fd fe70 	bl	800659c <_printf_float>
 80088bc:	1c42      	adds	r2, r0, #1
 80088be:	4606      	mov	r6, r0
 80088c0:	d1d6      	bne.n	8008870 <_svfiprintf_r+0x174>
 80088c2:	89ab      	ldrh	r3, [r5, #12]
 80088c4:	065b      	lsls	r3, r3, #25
 80088c6:	f53f af2d 	bmi.w	8008724 <_svfiprintf_r+0x28>
 80088ca:	9809      	ldr	r0, [sp, #36]	@ 0x24
 80088cc:	e72c      	b.n	8008728 <_svfiprintf_r+0x2c>
 80088ce:	ab03      	add	r3, sp, #12
 80088d0:	9300      	str	r3, [sp, #0]
 80088d2:	462a      	mov	r2, r5
 80088d4:	4b05      	ldr	r3, [pc, #20]	@ (80088ec <_svfiprintf_r+0x1f0>)
 80088d6:	a904      	add	r1, sp, #16
 80088d8:	4638      	mov	r0, r7
 80088da:	f7fe f8f7 	bl	8006acc <_printf_i>
 80088de:	e7ed      	b.n	80088bc <_svfiprintf_r+0x1c0>
 80088e0:	0800a550 	.word	0x0800a550
 80088e4:	0800a55a 	.word	0x0800a55a
 80088e8:	0800659d 	.word	0x0800659d
 80088ec:	08008645 	.word	0x08008645
 80088f0:	0800a556 	.word	0x0800a556

080088f4 <__sflush_r>:
 80088f4:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 80088f8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80088fc:	0716      	lsls	r6, r2, #28
 80088fe:	4605      	mov	r5, r0
 8008900:	460c      	mov	r4, r1
 8008902:	d454      	bmi.n	80089ae <__sflush_r+0xba>
 8008904:	684b      	ldr	r3, [r1, #4]
 8008906:	2b00      	cmp	r3, #0
 8008908:	dc02      	bgt.n	8008910 <__sflush_r+0x1c>
 800890a:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 800890c:	2b00      	cmp	r3, #0
 800890e:	dd48      	ble.n	80089a2 <__sflush_r+0xae>
 8008910:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8008912:	2e00      	cmp	r6, #0
 8008914:	d045      	beq.n	80089a2 <__sflush_r+0xae>
 8008916:	2300      	movs	r3, #0
 8008918:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 800891c:	682f      	ldr	r7, [r5, #0]
 800891e:	6a21      	ldr	r1, [r4, #32]
 8008920:	602b      	str	r3, [r5, #0]
 8008922:	d030      	beq.n	8008986 <__sflush_r+0x92>
 8008924:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 8008926:	89a3      	ldrh	r3, [r4, #12]
 8008928:	0759      	lsls	r1, r3, #29
 800892a:	d505      	bpl.n	8008938 <__sflush_r+0x44>
 800892c:	6863      	ldr	r3, [r4, #4]
 800892e:	1ad2      	subs	r2, r2, r3
 8008930:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 8008932:	b10b      	cbz	r3, 8008938 <__sflush_r+0x44>
 8008934:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 8008936:	1ad2      	subs	r2, r2, r3
 8008938:	2300      	movs	r3, #0
 800893a:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 800893c:	6a21      	ldr	r1, [r4, #32]
 800893e:	4628      	mov	r0, r5
 8008940:	47b0      	blx	r6
 8008942:	1c43      	adds	r3, r0, #1
 8008944:	89a3      	ldrh	r3, [r4, #12]
 8008946:	d106      	bne.n	8008956 <__sflush_r+0x62>
 8008948:	6829      	ldr	r1, [r5, #0]
 800894a:	291d      	cmp	r1, #29
 800894c:	d82b      	bhi.n	80089a6 <__sflush_r+0xb2>
 800894e:	4a2a      	ldr	r2, [pc, #168]	@ (80089f8 <__sflush_r+0x104>)
 8008950:	410a      	asrs	r2, r1
 8008952:	07d6      	lsls	r6, r2, #31
 8008954:	d427      	bmi.n	80089a6 <__sflush_r+0xb2>
 8008956:	2200      	movs	r2, #0
 8008958:	6062      	str	r2, [r4, #4]
 800895a:	04d9      	lsls	r1, r3, #19
 800895c:	6922      	ldr	r2, [r4, #16]
 800895e:	6022      	str	r2, [r4, #0]
 8008960:	d504      	bpl.n	800896c <__sflush_r+0x78>
 8008962:	1c42      	adds	r2, r0, #1
 8008964:	d101      	bne.n	800896a <__sflush_r+0x76>
 8008966:	682b      	ldr	r3, [r5, #0]
 8008968:	b903      	cbnz	r3, 800896c <__sflush_r+0x78>
 800896a:	6560      	str	r0, [r4, #84]	@ 0x54
 800896c:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800896e:	602f      	str	r7, [r5, #0]
 8008970:	b1b9      	cbz	r1, 80089a2 <__sflush_r+0xae>
 8008972:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8008976:	4299      	cmp	r1, r3
 8008978:	d002      	beq.n	8008980 <__sflush_r+0x8c>
 800897a:	4628      	mov	r0, r5
 800897c:	f7ff f9e0 	bl	8007d40 <_free_r>
 8008980:	2300      	movs	r3, #0
 8008982:	6363      	str	r3, [r4, #52]	@ 0x34
 8008984:	e00d      	b.n	80089a2 <__sflush_r+0xae>
 8008986:	2301      	movs	r3, #1
 8008988:	4628      	mov	r0, r5
 800898a:	47b0      	blx	r6
 800898c:	4602      	mov	r2, r0
 800898e:	1c50      	adds	r0, r2, #1
 8008990:	d1c9      	bne.n	8008926 <__sflush_r+0x32>
 8008992:	682b      	ldr	r3, [r5, #0]
 8008994:	2b00      	cmp	r3, #0
 8008996:	d0c6      	beq.n	8008926 <__sflush_r+0x32>
 8008998:	2b1d      	cmp	r3, #29
 800899a:	d001      	beq.n	80089a0 <__sflush_r+0xac>
 800899c:	2b16      	cmp	r3, #22
 800899e:	d11e      	bne.n	80089de <__sflush_r+0xea>
 80089a0:	602f      	str	r7, [r5, #0]
 80089a2:	2000      	movs	r0, #0
 80089a4:	e022      	b.n	80089ec <__sflush_r+0xf8>
 80089a6:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80089aa:	b21b      	sxth	r3, r3
 80089ac:	e01b      	b.n	80089e6 <__sflush_r+0xf2>
 80089ae:	690f      	ldr	r7, [r1, #16]
 80089b0:	2f00      	cmp	r7, #0
 80089b2:	d0f6      	beq.n	80089a2 <__sflush_r+0xae>
 80089b4:	0793      	lsls	r3, r2, #30
 80089b6:	680e      	ldr	r6, [r1, #0]
 80089b8:	bf08      	it	eq
 80089ba:	694b      	ldreq	r3, [r1, #20]
 80089bc:	600f      	str	r7, [r1, #0]
 80089be:	bf18      	it	ne
 80089c0:	2300      	movne	r3, #0
 80089c2:	eba6 0807 	sub.w	r8, r6, r7
 80089c6:	608b      	str	r3, [r1, #8]
 80089c8:	f1b8 0f00 	cmp.w	r8, #0
 80089cc:	dde9      	ble.n	80089a2 <__sflush_r+0xae>
 80089ce:	6a21      	ldr	r1, [r4, #32]
 80089d0:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 80089d2:	4643      	mov	r3, r8
 80089d4:	463a      	mov	r2, r7
 80089d6:	4628      	mov	r0, r5
 80089d8:	47b0      	blx	r6
 80089da:	2800      	cmp	r0, #0
 80089dc:	dc08      	bgt.n	80089f0 <__sflush_r+0xfc>
 80089de:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80089e2:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80089e6:	81a3      	strh	r3, [r4, #12]
 80089e8:	f04f 30ff 	mov.w	r0, #4294967295
 80089ec:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80089f0:	4407      	add	r7, r0
 80089f2:	eba8 0800 	sub.w	r8, r8, r0
 80089f6:	e7e7      	b.n	80089c8 <__sflush_r+0xd4>
 80089f8:	dfbffffe 	.word	0xdfbffffe

080089fc <_fflush_r>:
 80089fc:	b538      	push	{r3, r4, r5, lr}
 80089fe:	690b      	ldr	r3, [r1, #16]
 8008a00:	4605      	mov	r5, r0
 8008a02:	460c      	mov	r4, r1
 8008a04:	b913      	cbnz	r3, 8008a0c <_fflush_r+0x10>
 8008a06:	2500      	movs	r5, #0
 8008a08:	4628      	mov	r0, r5
 8008a0a:	bd38      	pop	{r3, r4, r5, pc}
 8008a0c:	b118      	cbz	r0, 8008a16 <_fflush_r+0x1a>
 8008a0e:	6a03      	ldr	r3, [r0, #32]
 8008a10:	b90b      	cbnz	r3, 8008a16 <_fflush_r+0x1a>
 8008a12:	f7fe fa07 	bl	8006e24 <__sinit>
 8008a16:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8008a1a:	2b00      	cmp	r3, #0
 8008a1c:	d0f3      	beq.n	8008a06 <_fflush_r+0xa>
 8008a1e:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 8008a20:	07d0      	lsls	r0, r2, #31
 8008a22:	d404      	bmi.n	8008a2e <_fflush_r+0x32>
 8008a24:	0599      	lsls	r1, r3, #22
 8008a26:	d402      	bmi.n	8008a2e <_fflush_r+0x32>
 8008a28:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8008a2a:	f7fe fb38 	bl	800709e <__retarget_lock_acquire_recursive>
 8008a2e:	4628      	mov	r0, r5
 8008a30:	4621      	mov	r1, r4
 8008a32:	f7ff ff5f 	bl	80088f4 <__sflush_r>
 8008a36:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8008a38:	07da      	lsls	r2, r3, #31
 8008a3a:	4605      	mov	r5, r0
 8008a3c:	d4e4      	bmi.n	8008a08 <_fflush_r+0xc>
 8008a3e:	89a3      	ldrh	r3, [r4, #12]
 8008a40:	059b      	lsls	r3, r3, #22
 8008a42:	d4e1      	bmi.n	8008a08 <_fflush_r+0xc>
 8008a44:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8008a46:	f7fe fb2b 	bl	80070a0 <__retarget_lock_release_recursive>
 8008a4a:	e7dd      	b.n	8008a08 <_fflush_r+0xc>

08008a4c <memmove>:
 8008a4c:	4288      	cmp	r0, r1
 8008a4e:	b510      	push	{r4, lr}
 8008a50:	eb01 0402 	add.w	r4, r1, r2
 8008a54:	d902      	bls.n	8008a5c <memmove+0x10>
 8008a56:	4284      	cmp	r4, r0
 8008a58:	4623      	mov	r3, r4
 8008a5a:	d807      	bhi.n	8008a6c <memmove+0x20>
 8008a5c:	1e43      	subs	r3, r0, #1
 8008a5e:	42a1      	cmp	r1, r4
 8008a60:	d008      	beq.n	8008a74 <memmove+0x28>
 8008a62:	f811 2b01 	ldrb.w	r2, [r1], #1
 8008a66:	f803 2f01 	strb.w	r2, [r3, #1]!
 8008a6a:	e7f8      	b.n	8008a5e <memmove+0x12>
 8008a6c:	4402      	add	r2, r0
 8008a6e:	4601      	mov	r1, r0
 8008a70:	428a      	cmp	r2, r1
 8008a72:	d100      	bne.n	8008a76 <memmove+0x2a>
 8008a74:	bd10      	pop	{r4, pc}
 8008a76:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8008a7a:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8008a7e:	e7f7      	b.n	8008a70 <memmove+0x24>

08008a80 <_sbrk_r>:
 8008a80:	b538      	push	{r3, r4, r5, lr}
 8008a82:	4d06      	ldr	r5, [pc, #24]	@ (8008a9c <_sbrk_r+0x1c>)
 8008a84:	2300      	movs	r3, #0
 8008a86:	4604      	mov	r4, r0
 8008a88:	4608      	mov	r0, r1
 8008a8a:	602b      	str	r3, [r5, #0]
 8008a8c:	f7f9 faac 	bl	8001fe8 <_sbrk>
 8008a90:	1c43      	adds	r3, r0, #1
 8008a92:	d102      	bne.n	8008a9a <_sbrk_r+0x1a>
 8008a94:	682b      	ldr	r3, [r5, #0]
 8008a96:	b103      	cbz	r3, 8008a9a <_sbrk_r+0x1a>
 8008a98:	6023      	str	r3, [r4, #0]
 8008a9a:	bd38      	pop	{r3, r4, r5, pc}
 8008a9c:	20000740 	.word	0x20000740

08008aa0 <memcpy>:
 8008aa0:	440a      	add	r2, r1
 8008aa2:	4291      	cmp	r1, r2
 8008aa4:	f100 33ff 	add.w	r3, r0, #4294967295
 8008aa8:	d100      	bne.n	8008aac <memcpy+0xc>
 8008aaa:	4770      	bx	lr
 8008aac:	b510      	push	{r4, lr}
 8008aae:	f811 4b01 	ldrb.w	r4, [r1], #1
 8008ab2:	f803 4f01 	strb.w	r4, [r3, #1]!
 8008ab6:	4291      	cmp	r1, r2
 8008ab8:	d1f9      	bne.n	8008aae <memcpy+0xe>
 8008aba:	bd10      	pop	{r4, pc}

08008abc <__assert_func>:
 8008abc:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8008abe:	4614      	mov	r4, r2
 8008ac0:	461a      	mov	r2, r3
 8008ac2:	4b09      	ldr	r3, [pc, #36]	@ (8008ae8 <__assert_func+0x2c>)
 8008ac4:	681b      	ldr	r3, [r3, #0]
 8008ac6:	4605      	mov	r5, r0
 8008ac8:	68d8      	ldr	r0, [r3, #12]
 8008aca:	b954      	cbnz	r4, 8008ae2 <__assert_func+0x26>
 8008acc:	4b07      	ldr	r3, [pc, #28]	@ (8008aec <__assert_func+0x30>)
 8008ace:	461c      	mov	r4, r3
 8008ad0:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8008ad4:	9100      	str	r1, [sp, #0]
 8008ad6:	462b      	mov	r3, r5
 8008ad8:	4905      	ldr	r1, [pc, #20]	@ (8008af0 <__assert_func+0x34>)
 8008ada:	f000 f86f 	bl	8008bbc <fiprintf>
 8008ade:	f000 f87f 	bl	8008be0 <abort>
 8008ae2:	4b04      	ldr	r3, [pc, #16]	@ (8008af4 <__assert_func+0x38>)
 8008ae4:	e7f4      	b.n	8008ad0 <__assert_func+0x14>
 8008ae6:	bf00      	nop
 8008ae8:	20000018 	.word	0x20000018
 8008aec:	0800a5a6 	.word	0x0800a5a6
 8008af0:	0800a578 	.word	0x0800a578
 8008af4:	0800a56b 	.word	0x0800a56b

08008af8 <_calloc_r>:
 8008af8:	b570      	push	{r4, r5, r6, lr}
 8008afa:	fba1 5402 	umull	r5, r4, r1, r2
 8008afe:	b93c      	cbnz	r4, 8008b10 <_calloc_r+0x18>
 8008b00:	4629      	mov	r1, r5
 8008b02:	f7ff f991 	bl	8007e28 <_malloc_r>
 8008b06:	4606      	mov	r6, r0
 8008b08:	b928      	cbnz	r0, 8008b16 <_calloc_r+0x1e>
 8008b0a:	2600      	movs	r6, #0
 8008b0c:	4630      	mov	r0, r6
 8008b0e:	bd70      	pop	{r4, r5, r6, pc}
 8008b10:	220c      	movs	r2, #12
 8008b12:	6002      	str	r2, [r0, #0]
 8008b14:	e7f9      	b.n	8008b0a <_calloc_r+0x12>
 8008b16:	462a      	mov	r2, r5
 8008b18:	4621      	mov	r1, r4
 8008b1a:	f7fe fa30 	bl	8006f7e <memset>
 8008b1e:	e7f5      	b.n	8008b0c <_calloc_r+0x14>

08008b20 <__ascii_mbtowc>:
 8008b20:	b082      	sub	sp, #8
 8008b22:	b901      	cbnz	r1, 8008b26 <__ascii_mbtowc+0x6>
 8008b24:	a901      	add	r1, sp, #4
 8008b26:	b142      	cbz	r2, 8008b3a <__ascii_mbtowc+0x1a>
 8008b28:	b14b      	cbz	r3, 8008b3e <__ascii_mbtowc+0x1e>
 8008b2a:	7813      	ldrb	r3, [r2, #0]
 8008b2c:	600b      	str	r3, [r1, #0]
 8008b2e:	7812      	ldrb	r2, [r2, #0]
 8008b30:	1e10      	subs	r0, r2, #0
 8008b32:	bf18      	it	ne
 8008b34:	2001      	movne	r0, #1
 8008b36:	b002      	add	sp, #8
 8008b38:	4770      	bx	lr
 8008b3a:	4610      	mov	r0, r2
 8008b3c:	e7fb      	b.n	8008b36 <__ascii_mbtowc+0x16>
 8008b3e:	f06f 0001 	mvn.w	r0, #1
 8008b42:	e7f8      	b.n	8008b36 <__ascii_mbtowc+0x16>

08008b44 <_realloc_r>:
 8008b44:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8008b48:	4680      	mov	r8, r0
 8008b4a:	4615      	mov	r5, r2
 8008b4c:	460c      	mov	r4, r1
 8008b4e:	b921      	cbnz	r1, 8008b5a <_realloc_r+0x16>
 8008b50:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8008b54:	4611      	mov	r1, r2
 8008b56:	f7ff b967 	b.w	8007e28 <_malloc_r>
 8008b5a:	b92a      	cbnz	r2, 8008b68 <_realloc_r+0x24>
 8008b5c:	f7ff f8f0 	bl	8007d40 <_free_r>
 8008b60:	2400      	movs	r4, #0
 8008b62:	4620      	mov	r0, r4
 8008b64:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8008b68:	f000 f841 	bl	8008bee <_malloc_usable_size_r>
 8008b6c:	4285      	cmp	r5, r0
 8008b6e:	4606      	mov	r6, r0
 8008b70:	d802      	bhi.n	8008b78 <_realloc_r+0x34>
 8008b72:	ebb5 0f50 	cmp.w	r5, r0, lsr #1
 8008b76:	d8f4      	bhi.n	8008b62 <_realloc_r+0x1e>
 8008b78:	4629      	mov	r1, r5
 8008b7a:	4640      	mov	r0, r8
 8008b7c:	f7ff f954 	bl	8007e28 <_malloc_r>
 8008b80:	4607      	mov	r7, r0
 8008b82:	2800      	cmp	r0, #0
 8008b84:	d0ec      	beq.n	8008b60 <_realloc_r+0x1c>
 8008b86:	42b5      	cmp	r5, r6
 8008b88:	462a      	mov	r2, r5
 8008b8a:	4621      	mov	r1, r4
 8008b8c:	bf28      	it	cs
 8008b8e:	4632      	movcs	r2, r6
 8008b90:	f7ff ff86 	bl	8008aa0 <memcpy>
 8008b94:	4621      	mov	r1, r4
 8008b96:	4640      	mov	r0, r8
 8008b98:	f7ff f8d2 	bl	8007d40 <_free_r>
 8008b9c:	463c      	mov	r4, r7
 8008b9e:	e7e0      	b.n	8008b62 <_realloc_r+0x1e>

08008ba0 <__ascii_wctomb>:
 8008ba0:	4603      	mov	r3, r0
 8008ba2:	4608      	mov	r0, r1
 8008ba4:	b141      	cbz	r1, 8008bb8 <__ascii_wctomb+0x18>
 8008ba6:	2aff      	cmp	r2, #255	@ 0xff
 8008ba8:	d904      	bls.n	8008bb4 <__ascii_wctomb+0x14>
 8008baa:	228a      	movs	r2, #138	@ 0x8a
 8008bac:	601a      	str	r2, [r3, #0]
 8008bae:	f04f 30ff 	mov.w	r0, #4294967295
 8008bb2:	4770      	bx	lr
 8008bb4:	700a      	strb	r2, [r1, #0]
 8008bb6:	2001      	movs	r0, #1
 8008bb8:	4770      	bx	lr
	...

08008bbc <fiprintf>:
 8008bbc:	b40e      	push	{r1, r2, r3}
 8008bbe:	b503      	push	{r0, r1, lr}
 8008bc0:	4601      	mov	r1, r0
 8008bc2:	ab03      	add	r3, sp, #12
 8008bc4:	4805      	ldr	r0, [pc, #20]	@ (8008bdc <fiprintf+0x20>)
 8008bc6:	f853 2b04 	ldr.w	r2, [r3], #4
 8008bca:	6800      	ldr	r0, [r0, #0]
 8008bcc:	9301      	str	r3, [sp, #4]
 8008bce:	f000 f83f 	bl	8008c50 <_vfiprintf_r>
 8008bd2:	b002      	add	sp, #8
 8008bd4:	f85d eb04 	ldr.w	lr, [sp], #4
 8008bd8:	b003      	add	sp, #12
 8008bda:	4770      	bx	lr
 8008bdc:	20000018 	.word	0x20000018

08008be0 <abort>:
 8008be0:	b508      	push	{r3, lr}
 8008be2:	2006      	movs	r0, #6
 8008be4:	f000 fa08 	bl	8008ff8 <raise>
 8008be8:	2001      	movs	r0, #1
 8008bea:	f7f9 f985 	bl	8001ef8 <_exit>

08008bee <_malloc_usable_size_r>:
 8008bee:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8008bf2:	1f18      	subs	r0, r3, #4
 8008bf4:	2b00      	cmp	r3, #0
 8008bf6:	bfbc      	itt	lt
 8008bf8:	580b      	ldrlt	r3, [r1, r0]
 8008bfa:	18c0      	addlt	r0, r0, r3
 8008bfc:	4770      	bx	lr

08008bfe <__sfputc_r>:
 8008bfe:	6893      	ldr	r3, [r2, #8]
 8008c00:	3b01      	subs	r3, #1
 8008c02:	2b00      	cmp	r3, #0
 8008c04:	b410      	push	{r4}
 8008c06:	6093      	str	r3, [r2, #8]
 8008c08:	da08      	bge.n	8008c1c <__sfputc_r+0x1e>
 8008c0a:	6994      	ldr	r4, [r2, #24]
 8008c0c:	42a3      	cmp	r3, r4
 8008c0e:	db01      	blt.n	8008c14 <__sfputc_r+0x16>
 8008c10:	290a      	cmp	r1, #10
 8008c12:	d103      	bne.n	8008c1c <__sfputc_r+0x1e>
 8008c14:	f85d 4b04 	ldr.w	r4, [sp], #4
 8008c18:	f000 b932 	b.w	8008e80 <__swbuf_r>
 8008c1c:	6813      	ldr	r3, [r2, #0]
 8008c1e:	1c58      	adds	r0, r3, #1
 8008c20:	6010      	str	r0, [r2, #0]
 8008c22:	7019      	strb	r1, [r3, #0]
 8008c24:	4608      	mov	r0, r1
 8008c26:	f85d 4b04 	ldr.w	r4, [sp], #4
 8008c2a:	4770      	bx	lr

08008c2c <__sfputs_r>:
 8008c2c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008c2e:	4606      	mov	r6, r0
 8008c30:	460f      	mov	r7, r1
 8008c32:	4614      	mov	r4, r2
 8008c34:	18d5      	adds	r5, r2, r3
 8008c36:	42ac      	cmp	r4, r5
 8008c38:	d101      	bne.n	8008c3e <__sfputs_r+0x12>
 8008c3a:	2000      	movs	r0, #0
 8008c3c:	e007      	b.n	8008c4e <__sfputs_r+0x22>
 8008c3e:	f814 1b01 	ldrb.w	r1, [r4], #1
 8008c42:	463a      	mov	r2, r7
 8008c44:	4630      	mov	r0, r6
 8008c46:	f7ff ffda 	bl	8008bfe <__sfputc_r>
 8008c4a:	1c43      	adds	r3, r0, #1
 8008c4c:	d1f3      	bne.n	8008c36 <__sfputs_r+0xa>
 8008c4e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

08008c50 <_vfiprintf_r>:
 8008c50:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008c54:	460d      	mov	r5, r1
 8008c56:	b09d      	sub	sp, #116	@ 0x74
 8008c58:	4614      	mov	r4, r2
 8008c5a:	4698      	mov	r8, r3
 8008c5c:	4606      	mov	r6, r0
 8008c5e:	b118      	cbz	r0, 8008c68 <_vfiprintf_r+0x18>
 8008c60:	6a03      	ldr	r3, [r0, #32]
 8008c62:	b90b      	cbnz	r3, 8008c68 <_vfiprintf_r+0x18>
 8008c64:	f7fe f8de 	bl	8006e24 <__sinit>
 8008c68:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8008c6a:	07d9      	lsls	r1, r3, #31
 8008c6c:	d405      	bmi.n	8008c7a <_vfiprintf_r+0x2a>
 8008c6e:	89ab      	ldrh	r3, [r5, #12]
 8008c70:	059a      	lsls	r2, r3, #22
 8008c72:	d402      	bmi.n	8008c7a <_vfiprintf_r+0x2a>
 8008c74:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8008c76:	f7fe fa12 	bl	800709e <__retarget_lock_acquire_recursive>
 8008c7a:	89ab      	ldrh	r3, [r5, #12]
 8008c7c:	071b      	lsls	r3, r3, #28
 8008c7e:	d501      	bpl.n	8008c84 <_vfiprintf_r+0x34>
 8008c80:	692b      	ldr	r3, [r5, #16]
 8008c82:	b99b      	cbnz	r3, 8008cac <_vfiprintf_r+0x5c>
 8008c84:	4629      	mov	r1, r5
 8008c86:	4630      	mov	r0, r6
 8008c88:	f000 f938 	bl	8008efc <__swsetup_r>
 8008c8c:	b170      	cbz	r0, 8008cac <_vfiprintf_r+0x5c>
 8008c8e:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8008c90:	07dc      	lsls	r4, r3, #31
 8008c92:	d504      	bpl.n	8008c9e <_vfiprintf_r+0x4e>
 8008c94:	f04f 30ff 	mov.w	r0, #4294967295
 8008c98:	b01d      	add	sp, #116	@ 0x74
 8008c9a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008c9e:	89ab      	ldrh	r3, [r5, #12]
 8008ca0:	0598      	lsls	r0, r3, #22
 8008ca2:	d4f7      	bmi.n	8008c94 <_vfiprintf_r+0x44>
 8008ca4:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8008ca6:	f7fe f9fb 	bl	80070a0 <__retarget_lock_release_recursive>
 8008caa:	e7f3      	b.n	8008c94 <_vfiprintf_r+0x44>
 8008cac:	2300      	movs	r3, #0
 8008cae:	9309      	str	r3, [sp, #36]	@ 0x24
 8008cb0:	2320      	movs	r3, #32
 8008cb2:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8008cb6:	f8cd 800c 	str.w	r8, [sp, #12]
 8008cba:	2330      	movs	r3, #48	@ 0x30
 8008cbc:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 8008e6c <_vfiprintf_r+0x21c>
 8008cc0:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8008cc4:	f04f 0901 	mov.w	r9, #1
 8008cc8:	4623      	mov	r3, r4
 8008cca:	469a      	mov	sl, r3
 8008ccc:	f813 2b01 	ldrb.w	r2, [r3], #1
 8008cd0:	b10a      	cbz	r2, 8008cd6 <_vfiprintf_r+0x86>
 8008cd2:	2a25      	cmp	r2, #37	@ 0x25
 8008cd4:	d1f9      	bne.n	8008cca <_vfiprintf_r+0x7a>
 8008cd6:	ebba 0b04 	subs.w	fp, sl, r4
 8008cda:	d00b      	beq.n	8008cf4 <_vfiprintf_r+0xa4>
 8008cdc:	465b      	mov	r3, fp
 8008cde:	4622      	mov	r2, r4
 8008ce0:	4629      	mov	r1, r5
 8008ce2:	4630      	mov	r0, r6
 8008ce4:	f7ff ffa2 	bl	8008c2c <__sfputs_r>
 8008ce8:	3001      	adds	r0, #1
 8008cea:	f000 80a7 	beq.w	8008e3c <_vfiprintf_r+0x1ec>
 8008cee:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8008cf0:	445a      	add	r2, fp
 8008cf2:	9209      	str	r2, [sp, #36]	@ 0x24
 8008cf4:	f89a 3000 	ldrb.w	r3, [sl]
 8008cf8:	2b00      	cmp	r3, #0
 8008cfa:	f000 809f 	beq.w	8008e3c <_vfiprintf_r+0x1ec>
 8008cfe:	2300      	movs	r3, #0
 8008d00:	f04f 32ff 	mov.w	r2, #4294967295
 8008d04:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8008d08:	f10a 0a01 	add.w	sl, sl, #1
 8008d0c:	9304      	str	r3, [sp, #16]
 8008d0e:	9307      	str	r3, [sp, #28]
 8008d10:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8008d14:	931a      	str	r3, [sp, #104]	@ 0x68
 8008d16:	4654      	mov	r4, sl
 8008d18:	2205      	movs	r2, #5
 8008d1a:	f814 1b01 	ldrb.w	r1, [r4], #1
 8008d1e:	4853      	ldr	r0, [pc, #332]	@ (8008e6c <_vfiprintf_r+0x21c>)
 8008d20:	f7f7 fa76 	bl	8000210 <memchr>
 8008d24:	9a04      	ldr	r2, [sp, #16]
 8008d26:	b9d8      	cbnz	r0, 8008d60 <_vfiprintf_r+0x110>
 8008d28:	06d1      	lsls	r1, r2, #27
 8008d2a:	bf44      	itt	mi
 8008d2c:	2320      	movmi	r3, #32
 8008d2e:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8008d32:	0713      	lsls	r3, r2, #28
 8008d34:	bf44      	itt	mi
 8008d36:	232b      	movmi	r3, #43	@ 0x2b
 8008d38:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8008d3c:	f89a 3000 	ldrb.w	r3, [sl]
 8008d40:	2b2a      	cmp	r3, #42	@ 0x2a
 8008d42:	d015      	beq.n	8008d70 <_vfiprintf_r+0x120>
 8008d44:	9a07      	ldr	r2, [sp, #28]
 8008d46:	4654      	mov	r4, sl
 8008d48:	2000      	movs	r0, #0
 8008d4a:	f04f 0c0a 	mov.w	ip, #10
 8008d4e:	4621      	mov	r1, r4
 8008d50:	f811 3b01 	ldrb.w	r3, [r1], #1
 8008d54:	3b30      	subs	r3, #48	@ 0x30
 8008d56:	2b09      	cmp	r3, #9
 8008d58:	d94b      	bls.n	8008df2 <_vfiprintf_r+0x1a2>
 8008d5a:	b1b0      	cbz	r0, 8008d8a <_vfiprintf_r+0x13a>
 8008d5c:	9207      	str	r2, [sp, #28]
 8008d5e:	e014      	b.n	8008d8a <_vfiprintf_r+0x13a>
 8008d60:	eba0 0308 	sub.w	r3, r0, r8
 8008d64:	fa09 f303 	lsl.w	r3, r9, r3
 8008d68:	4313      	orrs	r3, r2
 8008d6a:	9304      	str	r3, [sp, #16]
 8008d6c:	46a2      	mov	sl, r4
 8008d6e:	e7d2      	b.n	8008d16 <_vfiprintf_r+0xc6>
 8008d70:	9b03      	ldr	r3, [sp, #12]
 8008d72:	1d19      	adds	r1, r3, #4
 8008d74:	681b      	ldr	r3, [r3, #0]
 8008d76:	9103      	str	r1, [sp, #12]
 8008d78:	2b00      	cmp	r3, #0
 8008d7a:	bfbb      	ittet	lt
 8008d7c:	425b      	neglt	r3, r3
 8008d7e:	f042 0202 	orrlt.w	r2, r2, #2
 8008d82:	9307      	strge	r3, [sp, #28]
 8008d84:	9307      	strlt	r3, [sp, #28]
 8008d86:	bfb8      	it	lt
 8008d88:	9204      	strlt	r2, [sp, #16]
 8008d8a:	7823      	ldrb	r3, [r4, #0]
 8008d8c:	2b2e      	cmp	r3, #46	@ 0x2e
 8008d8e:	d10a      	bne.n	8008da6 <_vfiprintf_r+0x156>
 8008d90:	7863      	ldrb	r3, [r4, #1]
 8008d92:	2b2a      	cmp	r3, #42	@ 0x2a
 8008d94:	d132      	bne.n	8008dfc <_vfiprintf_r+0x1ac>
 8008d96:	9b03      	ldr	r3, [sp, #12]
 8008d98:	1d1a      	adds	r2, r3, #4
 8008d9a:	681b      	ldr	r3, [r3, #0]
 8008d9c:	9203      	str	r2, [sp, #12]
 8008d9e:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8008da2:	3402      	adds	r4, #2
 8008da4:	9305      	str	r3, [sp, #20]
 8008da6:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 8008e7c <_vfiprintf_r+0x22c>
 8008daa:	7821      	ldrb	r1, [r4, #0]
 8008dac:	2203      	movs	r2, #3
 8008dae:	4650      	mov	r0, sl
 8008db0:	f7f7 fa2e 	bl	8000210 <memchr>
 8008db4:	b138      	cbz	r0, 8008dc6 <_vfiprintf_r+0x176>
 8008db6:	9b04      	ldr	r3, [sp, #16]
 8008db8:	eba0 000a 	sub.w	r0, r0, sl
 8008dbc:	2240      	movs	r2, #64	@ 0x40
 8008dbe:	4082      	lsls	r2, r0
 8008dc0:	4313      	orrs	r3, r2
 8008dc2:	3401      	adds	r4, #1
 8008dc4:	9304      	str	r3, [sp, #16]
 8008dc6:	f814 1b01 	ldrb.w	r1, [r4], #1
 8008dca:	4829      	ldr	r0, [pc, #164]	@ (8008e70 <_vfiprintf_r+0x220>)
 8008dcc:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8008dd0:	2206      	movs	r2, #6
 8008dd2:	f7f7 fa1d 	bl	8000210 <memchr>
 8008dd6:	2800      	cmp	r0, #0
 8008dd8:	d03f      	beq.n	8008e5a <_vfiprintf_r+0x20a>
 8008dda:	4b26      	ldr	r3, [pc, #152]	@ (8008e74 <_vfiprintf_r+0x224>)
 8008ddc:	bb1b      	cbnz	r3, 8008e26 <_vfiprintf_r+0x1d6>
 8008dde:	9b03      	ldr	r3, [sp, #12]
 8008de0:	3307      	adds	r3, #7
 8008de2:	f023 0307 	bic.w	r3, r3, #7
 8008de6:	3308      	adds	r3, #8
 8008de8:	9303      	str	r3, [sp, #12]
 8008dea:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8008dec:	443b      	add	r3, r7
 8008dee:	9309      	str	r3, [sp, #36]	@ 0x24
 8008df0:	e76a      	b.n	8008cc8 <_vfiprintf_r+0x78>
 8008df2:	fb0c 3202 	mla	r2, ip, r2, r3
 8008df6:	460c      	mov	r4, r1
 8008df8:	2001      	movs	r0, #1
 8008dfa:	e7a8      	b.n	8008d4e <_vfiprintf_r+0xfe>
 8008dfc:	2300      	movs	r3, #0
 8008dfe:	3401      	adds	r4, #1
 8008e00:	9305      	str	r3, [sp, #20]
 8008e02:	4619      	mov	r1, r3
 8008e04:	f04f 0c0a 	mov.w	ip, #10
 8008e08:	4620      	mov	r0, r4
 8008e0a:	f810 2b01 	ldrb.w	r2, [r0], #1
 8008e0e:	3a30      	subs	r2, #48	@ 0x30
 8008e10:	2a09      	cmp	r2, #9
 8008e12:	d903      	bls.n	8008e1c <_vfiprintf_r+0x1cc>
 8008e14:	2b00      	cmp	r3, #0
 8008e16:	d0c6      	beq.n	8008da6 <_vfiprintf_r+0x156>
 8008e18:	9105      	str	r1, [sp, #20]
 8008e1a:	e7c4      	b.n	8008da6 <_vfiprintf_r+0x156>
 8008e1c:	fb0c 2101 	mla	r1, ip, r1, r2
 8008e20:	4604      	mov	r4, r0
 8008e22:	2301      	movs	r3, #1
 8008e24:	e7f0      	b.n	8008e08 <_vfiprintf_r+0x1b8>
 8008e26:	ab03      	add	r3, sp, #12
 8008e28:	9300      	str	r3, [sp, #0]
 8008e2a:	462a      	mov	r2, r5
 8008e2c:	4b12      	ldr	r3, [pc, #72]	@ (8008e78 <_vfiprintf_r+0x228>)
 8008e2e:	a904      	add	r1, sp, #16
 8008e30:	4630      	mov	r0, r6
 8008e32:	f7fd fbb3 	bl	800659c <_printf_float>
 8008e36:	4607      	mov	r7, r0
 8008e38:	1c78      	adds	r0, r7, #1
 8008e3a:	d1d6      	bne.n	8008dea <_vfiprintf_r+0x19a>
 8008e3c:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8008e3e:	07d9      	lsls	r1, r3, #31
 8008e40:	d405      	bmi.n	8008e4e <_vfiprintf_r+0x1fe>
 8008e42:	89ab      	ldrh	r3, [r5, #12]
 8008e44:	059a      	lsls	r2, r3, #22
 8008e46:	d402      	bmi.n	8008e4e <_vfiprintf_r+0x1fe>
 8008e48:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8008e4a:	f7fe f929 	bl	80070a0 <__retarget_lock_release_recursive>
 8008e4e:	89ab      	ldrh	r3, [r5, #12]
 8008e50:	065b      	lsls	r3, r3, #25
 8008e52:	f53f af1f 	bmi.w	8008c94 <_vfiprintf_r+0x44>
 8008e56:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8008e58:	e71e      	b.n	8008c98 <_vfiprintf_r+0x48>
 8008e5a:	ab03      	add	r3, sp, #12
 8008e5c:	9300      	str	r3, [sp, #0]
 8008e5e:	462a      	mov	r2, r5
 8008e60:	4b05      	ldr	r3, [pc, #20]	@ (8008e78 <_vfiprintf_r+0x228>)
 8008e62:	a904      	add	r1, sp, #16
 8008e64:	4630      	mov	r0, r6
 8008e66:	f7fd fe31 	bl	8006acc <_printf_i>
 8008e6a:	e7e4      	b.n	8008e36 <_vfiprintf_r+0x1e6>
 8008e6c:	0800a550 	.word	0x0800a550
 8008e70:	0800a55a 	.word	0x0800a55a
 8008e74:	0800659d 	.word	0x0800659d
 8008e78:	08008c2d 	.word	0x08008c2d
 8008e7c:	0800a556 	.word	0x0800a556

08008e80 <__swbuf_r>:
 8008e80:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008e82:	460e      	mov	r6, r1
 8008e84:	4614      	mov	r4, r2
 8008e86:	4605      	mov	r5, r0
 8008e88:	b118      	cbz	r0, 8008e92 <__swbuf_r+0x12>
 8008e8a:	6a03      	ldr	r3, [r0, #32]
 8008e8c:	b90b      	cbnz	r3, 8008e92 <__swbuf_r+0x12>
 8008e8e:	f7fd ffc9 	bl	8006e24 <__sinit>
 8008e92:	69a3      	ldr	r3, [r4, #24]
 8008e94:	60a3      	str	r3, [r4, #8]
 8008e96:	89a3      	ldrh	r3, [r4, #12]
 8008e98:	071a      	lsls	r2, r3, #28
 8008e9a:	d501      	bpl.n	8008ea0 <__swbuf_r+0x20>
 8008e9c:	6923      	ldr	r3, [r4, #16]
 8008e9e:	b943      	cbnz	r3, 8008eb2 <__swbuf_r+0x32>
 8008ea0:	4621      	mov	r1, r4
 8008ea2:	4628      	mov	r0, r5
 8008ea4:	f000 f82a 	bl	8008efc <__swsetup_r>
 8008ea8:	b118      	cbz	r0, 8008eb2 <__swbuf_r+0x32>
 8008eaa:	f04f 37ff 	mov.w	r7, #4294967295
 8008eae:	4638      	mov	r0, r7
 8008eb0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8008eb2:	6823      	ldr	r3, [r4, #0]
 8008eb4:	6922      	ldr	r2, [r4, #16]
 8008eb6:	1a98      	subs	r0, r3, r2
 8008eb8:	6963      	ldr	r3, [r4, #20]
 8008eba:	b2f6      	uxtb	r6, r6
 8008ebc:	4283      	cmp	r3, r0
 8008ebe:	4637      	mov	r7, r6
 8008ec0:	dc05      	bgt.n	8008ece <__swbuf_r+0x4e>
 8008ec2:	4621      	mov	r1, r4
 8008ec4:	4628      	mov	r0, r5
 8008ec6:	f7ff fd99 	bl	80089fc <_fflush_r>
 8008eca:	2800      	cmp	r0, #0
 8008ecc:	d1ed      	bne.n	8008eaa <__swbuf_r+0x2a>
 8008ece:	68a3      	ldr	r3, [r4, #8]
 8008ed0:	3b01      	subs	r3, #1
 8008ed2:	60a3      	str	r3, [r4, #8]
 8008ed4:	6823      	ldr	r3, [r4, #0]
 8008ed6:	1c5a      	adds	r2, r3, #1
 8008ed8:	6022      	str	r2, [r4, #0]
 8008eda:	701e      	strb	r6, [r3, #0]
 8008edc:	6962      	ldr	r2, [r4, #20]
 8008ede:	1c43      	adds	r3, r0, #1
 8008ee0:	429a      	cmp	r2, r3
 8008ee2:	d004      	beq.n	8008eee <__swbuf_r+0x6e>
 8008ee4:	89a3      	ldrh	r3, [r4, #12]
 8008ee6:	07db      	lsls	r3, r3, #31
 8008ee8:	d5e1      	bpl.n	8008eae <__swbuf_r+0x2e>
 8008eea:	2e0a      	cmp	r6, #10
 8008eec:	d1df      	bne.n	8008eae <__swbuf_r+0x2e>
 8008eee:	4621      	mov	r1, r4
 8008ef0:	4628      	mov	r0, r5
 8008ef2:	f7ff fd83 	bl	80089fc <_fflush_r>
 8008ef6:	2800      	cmp	r0, #0
 8008ef8:	d0d9      	beq.n	8008eae <__swbuf_r+0x2e>
 8008efa:	e7d6      	b.n	8008eaa <__swbuf_r+0x2a>

08008efc <__swsetup_r>:
 8008efc:	b538      	push	{r3, r4, r5, lr}
 8008efe:	4b29      	ldr	r3, [pc, #164]	@ (8008fa4 <__swsetup_r+0xa8>)
 8008f00:	4605      	mov	r5, r0
 8008f02:	6818      	ldr	r0, [r3, #0]
 8008f04:	460c      	mov	r4, r1
 8008f06:	b118      	cbz	r0, 8008f10 <__swsetup_r+0x14>
 8008f08:	6a03      	ldr	r3, [r0, #32]
 8008f0a:	b90b      	cbnz	r3, 8008f10 <__swsetup_r+0x14>
 8008f0c:	f7fd ff8a 	bl	8006e24 <__sinit>
 8008f10:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8008f14:	0719      	lsls	r1, r3, #28
 8008f16:	d422      	bmi.n	8008f5e <__swsetup_r+0x62>
 8008f18:	06da      	lsls	r2, r3, #27
 8008f1a:	d407      	bmi.n	8008f2c <__swsetup_r+0x30>
 8008f1c:	2209      	movs	r2, #9
 8008f1e:	602a      	str	r2, [r5, #0]
 8008f20:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8008f24:	81a3      	strh	r3, [r4, #12]
 8008f26:	f04f 30ff 	mov.w	r0, #4294967295
 8008f2a:	e033      	b.n	8008f94 <__swsetup_r+0x98>
 8008f2c:	0758      	lsls	r0, r3, #29
 8008f2e:	d512      	bpl.n	8008f56 <__swsetup_r+0x5a>
 8008f30:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8008f32:	b141      	cbz	r1, 8008f46 <__swsetup_r+0x4a>
 8008f34:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8008f38:	4299      	cmp	r1, r3
 8008f3a:	d002      	beq.n	8008f42 <__swsetup_r+0x46>
 8008f3c:	4628      	mov	r0, r5
 8008f3e:	f7fe feff 	bl	8007d40 <_free_r>
 8008f42:	2300      	movs	r3, #0
 8008f44:	6363      	str	r3, [r4, #52]	@ 0x34
 8008f46:	89a3      	ldrh	r3, [r4, #12]
 8008f48:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 8008f4c:	81a3      	strh	r3, [r4, #12]
 8008f4e:	2300      	movs	r3, #0
 8008f50:	6063      	str	r3, [r4, #4]
 8008f52:	6923      	ldr	r3, [r4, #16]
 8008f54:	6023      	str	r3, [r4, #0]
 8008f56:	89a3      	ldrh	r3, [r4, #12]
 8008f58:	f043 0308 	orr.w	r3, r3, #8
 8008f5c:	81a3      	strh	r3, [r4, #12]
 8008f5e:	6923      	ldr	r3, [r4, #16]
 8008f60:	b94b      	cbnz	r3, 8008f76 <__swsetup_r+0x7a>
 8008f62:	89a3      	ldrh	r3, [r4, #12]
 8008f64:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 8008f68:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8008f6c:	d003      	beq.n	8008f76 <__swsetup_r+0x7a>
 8008f6e:	4621      	mov	r1, r4
 8008f70:	4628      	mov	r0, r5
 8008f72:	f000 f883 	bl	800907c <__smakebuf_r>
 8008f76:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8008f7a:	f013 0201 	ands.w	r2, r3, #1
 8008f7e:	d00a      	beq.n	8008f96 <__swsetup_r+0x9a>
 8008f80:	2200      	movs	r2, #0
 8008f82:	60a2      	str	r2, [r4, #8]
 8008f84:	6962      	ldr	r2, [r4, #20]
 8008f86:	4252      	negs	r2, r2
 8008f88:	61a2      	str	r2, [r4, #24]
 8008f8a:	6922      	ldr	r2, [r4, #16]
 8008f8c:	b942      	cbnz	r2, 8008fa0 <__swsetup_r+0xa4>
 8008f8e:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 8008f92:	d1c5      	bne.n	8008f20 <__swsetup_r+0x24>
 8008f94:	bd38      	pop	{r3, r4, r5, pc}
 8008f96:	0799      	lsls	r1, r3, #30
 8008f98:	bf58      	it	pl
 8008f9a:	6962      	ldrpl	r2, [r4, #20]
 8008f9c:	60a2      	str	r2, [r4, #8]
 8008f9e:	e7f4      	b.n	8008f8a <__swsetup_r+0x8e>
 8008fa0:	2000      	movs	r0, #0
 8008fa2:	e7f7      	b.n	8008f94 <__swsetup_r+0x98>
 8008fa4:	20000018 	.word	0x20000018

08008fa8 <_raise_r>:
 8008fa8:	291f      	cmp	r1, #31
 8008faa:	b538      	push	{r3, r4, r5, lr}
 8008fac:	4605      	mov	r5, r0
 8008fae:	460c      	mov	r4, r1
 8008fb0:	d904      	bls.n	8008fbc <_raise_r+0x14>
 8008fb2:	2316      	movs	r3, #22
 8008fb4:	6003      	str	r3, [r0, #0]
 8008fb6:	f04f 30ff 	mov.w	r0, #4294967295
 8008fba:	bd38      	pop	{r3, r4, r5, pc}
 8008fbc:	6bc2      	ldr	r2, [r0, #60]	@ 0x3c
 8008fbe:	b112      	cbz	r2, 8008fc6 <_raise_r+0x1e>
 8008fc0:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8008fc4:	b94b      	cbnz	r3, 8008fda <_raise_r+0x32>
 8008fc6:	4628      	mov	r0, r5
 8008fc8:	f000 f830 	bl	800902c <_getpid_r>
 8008fcc:	4622      	mov	r2, r4
 8008fce:	4601      	mov	r1, r0
 8008fd0:	4628      	mov	r0, r5
 8008fd2:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8008fd6:	f000 b817 	b.w	8009008 <_kill_r>
 8008fda:	2b01      	cmp	r3, #1
 8008fdc:	d00a      	beq.n	8008ff4 <_raise_r+0x4c>
 8008fde:	1c59      	adds	r1, r3, #1
 8008fe0:	d103      	bne.n	8008fea <_raise_r+0x42>
 8008fe2:	2316      	movs	r3, #22
 8008fe4:	6003      	str	r3, [r0, #0]
 8008fe6:	2001      	movs	r0, #1
 8008fe8:	e7e7      	b.n	8008fba <_raise_r+0x12>
 8008fea:	2100      	movs	r1, #0
 8008fec:	f842 1024 	str.w	r1, [r2, r4, lsl #2]
 8008ff0:	4620      	mov	r0, r4
 8008ff2:	4798      	blx	r3
 8008ff4:	2000      	movs	r0, #0
 8008ff6:	e7e0      	b.n	8008fba <_raise_r+0x12>

08008ff8 <raise>:
 8008ff8:	4b02      	ldr	r3, [pc, #8]	@ (8009004 <raise+0xc>)
 8008ffa:	4601      	mov	r1, r0
 8008ffc:	6818      	ldr	r0, [r3, #0]
 8008ffe:	f7ff bfd3 	b.w	8008fa8 <_raise_r>
 8009002:	bf00      	nop
 8009004:	20000018 	.word	0x20000018

08009008 <_kill_r>:
 8009008:	b538      	push	{r3, r4, r5, lr}
 800900a:	4d07      	ldr	r5, [pc, #28]	@ (8009028 <_kill_r+0x20>)
 800900c:	2300      	movs	r3, #0
 800900e:	4604      	mov	r4, r0
 8009010:	4608      	mov	r0, r1
 8009012:	4611      	mov	r1, r2
 8009014:	602b      	str	r3, [r5, #0]
 8009016:	f7f8 ff5f 	bl	8001ed8 <_kill>
 800901a:	1c43      	adds	r3, r0, #1
 800901c:	d102      	bne.n	8009024 <_kill_r+0x1c>
 800901e:	682b      	ldr	r3, [r5, #0]
 8009020:	b103      	cbz	r3, 8009024 <_kill_r+0x1c>
 8009022:	6023      	str	r3, [r4, #0]
 8009024:	bd38      	pop	{r3, r4, r5, pc}
 8009026:	bf00      	nop
 8009028:	20000740 	.word	0x20000740

0800902c <_getpid_r>:
 800902c:	f7f8 bf4c 	b.w	8001ec8 <_getpid>

08009030 <__swhatbuf_r>:
 8009030:	b570      	push	{r4, r5, r6, lr}
 8009032:	460c      	mov	r4, r1
 8009034:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8009038:	2900      	cmp	r1, #0
 800903a:	b096      	sub	sp, #88	@ 0x58
 800903c:	4615      	mov	r5, r2
 800903e:	461e      	mov	r6, r3
 8009040:	da0d      	bge.n	800905e <__swhatbuf_r+0x2e>
 8009042:	89a3      	ldrh	r3, [r4, #12]
 8009044:	f013 0f80 	tst.w	r3, #128	@ 0x80
 8009048:	f04f 0100 	mov.w	r1, #0
 800904c:	bf14      	ite	ne
 800904e:	2340      	movne	r3, #64	@ 0x40
 8009050:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 8009054:	2000      	movs	r0, #0
 8009056:	6031      	str	r1, [r6, #0]
 8009058:	602b      	str	r3, [r5, #0]
 800905a:	b016      	add	sp, #88	@ 0x58
 800905c:	bd70      	pop	{r4, r5, r6, pc}
 800905e:	466a      	mov	r2, sp
 8009060:	f000 f848 	bl	80090f4 <_fstat_r>
 8009064:	2800      	cmp	r0, #0
 8009066:	dbec      	blt.n	8009042 <__swhatbuf_r+0x12>
 8009068:	9901      	ldr	r1, [sp, #4]
 800906a:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 800906e:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 8009072:	4259      	negs	r1, r3
 8009074:	4159      	adcs	r1, r3
 8009076:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800907a:	e7eb      	b.n	8009054 <__swhatbuf_r+0x24>

0800907c <__smakebuf_r>:
 800907c:	898b      	ldrh	r3, [r1, #12]
 800907e:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8009080:	079d      	lsls	r5, r3, #30
 8009082:	4606      	mov	r6, r0
 8009084:	460c      	mov	r4, r1
 8009086:	d507      	bpl.n	8009098 <__smakebuf_r+0x1c>
 8009088:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 800908c:	6023      	str	r3, [r4, #0]
 800908e:	6123      	str	r3, [r4, #16]
 8009090:	2301      	movs	r3, #1
 8009092:	6163      	str	r3, [r4, #20]
 8009094:	b003      	add	sp, #12
 8009096:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8009098:	ab01      	add	r3, sp, #4
 800909a:	466a      	mov	r2, sp
 800909c:	f7ff ffc8 	bl	8009030 <__swhatbuf_r>
 80090a0:	9f00      	ldr	r7, [sp, #0]
 80090a2:	4605      	mov	r5, r0
 80090a4:	4639      	mov	r1, r7
 80090a6:	4630      	mov	r0, r6
 80090a8:	f7fe febe 	bl	8007e28 <_malloc_r>
 80090ac:	b948      	cbnz	r0, 80090c2 <__smakebuf_r+0x46>
 80090ae:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80090b2:	059a      	lsls	r2, r3, #22
 80090b4:	d4ee      	bmi.n	8009094 <__smakebuf_r+0x18>
 80090b6:	f023 0303 	bic.w	r3, r3, #3
 80090ba:	f043 0302 	orr.w	r3, r3, #2
 80090be:	81a3      	strh	r3, [r4, #12]
 80090c0:	e7e2      	b.n	8009088 <__smakebuf_r+0xc>
 80090c2:	89a3      	ldrh	r3, [r4, #12]
 80090c4:	6020      	str	r0, [r4, #0]
 80090c6:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80090ca:	81a3      	strh	r3, [r4, #12]
 80090cc:	9b01      	ldr	r3, [sp, #4]
 80090ce:	e9c4 0704 	strd	r0, r7, [r4, #16]
 80090d2:	b15b      	cbz	r3, 80090ec <__smakebuf_r+0x70>
 80090d4:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80090d8:	4630      	mov	r0, r6
 80090da:	f000 f81d 	bl	8009118 <_isatty_r>
 80090de:	b128      	cbz	r0, 80090ec <__smakebuf_r+0x70>
 80090e0:	89a3      	ldrh	r3, [r4, #12]
 80090e2:	f023 0303 	bic.w	r3, r3, #3
 80090e6:	f043 0301 	orr.w	r3, r3, #1
 80090ea:	81a3      	strh	r3, [r4, #12]
 80090ec:	89a3      	ldrh	r3, [r4, #12]
 80090ee:	431d      	orrs	r5, r3
 80090f0:	81a5      	strh	r5, [r4, #12]
 80090f2:	e7cf      	b.n	8009094 <__smakebuf_r+0x18>

080090f4 <_fstat_r>:
 80090f4:	b538      	push	{r3, r4, r5, lr}
 80090f6:	4d07      	ldr	r5, [pc, #28]	@ (8009114 <_fstat_r+0x20>)
 80090f8:	2300      	movs	r3, #0
 80090fa:	4604      	mov	r4, r0
 80090fc:	4608      	mov	r0, r1
 80090fe:	4611      	mov	r1, r2
 8009100:	602b      	str	r3, [r5, #0]
 8009102:	f7f8 ff49 	bl	8001f98 <_fstat>
 8009106:	1c43      	adds	r3, r0, #1
 8009108:	d102      	bne.n	8009110 <_fstat_r+0x1c>
 800910a:	682b      	ldr	r3, [r5, #0]
 800910c:	b103      	cbz	r3, 8009110 <_fstat_r+0x1c>
 800910e:	6023      	str	r3, [r4, #0]
 8009110:	bd38      	pop	{r3, r4, r5, pc}
 8009112:	bf00      	nop
 8009114:	20000740 	.word	0x20000740

08009118 <_isatty_r>:
 8009118:	b538      	push	{r3, r4, r5, lr}
 800911a:	4d06      	ldr	r5, [pc, #24]	@ (8009134 <_isatty_r+0x1c>)
 800911c:	2300      	movs	r3, #0
 800911e:	4604      	mov	r4, r0
 8009120:	4608      	mov	r0, r1
 8009122:	602b      	str	r3, [r5, #0]
 8009124:	f7f8 ff48 	bl	8001fb8 <_isatty>
 8009128:	1c43      	adds	r3, r0, #1
 800912a:	d102      	bne.n	8009132 <_isatty_r+0x1a>
 800912c:	682b      	ldr	r3, [r5, #0]
 800912e:	b103      	cbz	r3, 8009132 <_isatty_r+0x1a>
 8009130:	6023      	str	r3, [r4, #0]
 8009132:	bd38      	pop	{r3, r4, r5, pc}
 8009134:	20000740 	.word	0x20000740

08009138 <cos>:
 8009138:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800913a:	ec53 2b10 	vmov	r2, r3, d0
 800913e:	4826      	ldr	r0, [pc, #152]	@ (80091d8 <cos+0xa0>)
 8009140:	f023 4100 	bic.w	r1, r3, #2147483648	@ 0x80000000
 8009144:	4281      	cmp	r1, r0
 8009146:	d806      	bhi.n	8009156 <cos+0x1e>
 8009148:	ed9f 1b21 	vldr	d1, [pc, #132]	@ 80091d0 <cos+0x98>
 800914c:	b005      	add	sp, #20
 800914e:	f85d eb04 	ldr.w	lr, [sp], #4
 8009152:	f000 b899 	b.w	8009288 <__kernel_cos>
 8009156:	4821      	ldr	r0, [pc, #132]	@ (80091dc <cos+0xa4>)
 8009158:	4281      	cmp	r1, r0
 800915a:	d908      	bls.n	800916e <cos+0x36>
 800915c:	4610      	mov	r0, r2
 800915e:	4619      	mov	r1, r3
 8009160:	f7f7 f8b2 	bl	80002c8 <__aeabi_dsub>
 8009164:	ec41 0b10 	vmov	d0, r0, r1
 8009168:	b005      	add	sp, #20
 800916a:	f85d fb04 	ldr.w	pc, [sp], #4
 800916e:	4668      	mov	r0, sp
 8009170:	f000 fa0e 	bl	8009590 <__ieee754_rem_pio2>
 8009174:	f000 0003 	and.w	r0, r0, #3
 8009178:	2801      	cmp	r0, #1
 800917a:	d00b      	beq.n	8009194 <cos+0x5c>
 800917c:	2802      	cmp	r0, #2
 800917e:	d015      	beq.n	80091ac <cos+0x74>
 8009180:	b9d8      	cbnz	r0, 80091ba <cos+0x82>
 8009182:	ed9d 1b02 	vldr	d1, [sp, #8]
 8009186:	ed9d 0b00 	vldr	d0, [sp]
 800918a:	f000 f87d 	bl	8009288 <__kernel_cos>
 800918e:	ec51 0b10 	vmov	r0, r1, d0
 8009192:	e7e7      	b.n	8009164 <cos+0x2c>
 8009194:	ed9d 1b02 	vldr	d1, [sp, #8]
 8009198:	ed9d 0b00 	vldr	d0, [sp]
 800919c:	f000 f93c 	bl	8009418 <__kernel_sin>
 80091a0:	ec53 2b10 	vmov	r2, r3, d0
 80091a4:	4610      	mov	r0, r2
 80091a6:	f103 4100 	add.w	r1, r3, #2147483648	@ 0x80000000
 80091aa:	e7db      	b.n	8009164 <cos+0x2c>
 80091ac:	ed9d 1b02 	vldr	d1, [sp, #8]
 80091b0:	ed9d 0b00 	vldr	d0, [sp]
 80091b4:	f000 f868 	bl	8009288 <__kernel_cos>
 80091b8:	e7f2      	b.n	80091a0 <cos+0x68>
 80091ba:	ed9d 1b02 	vldr	d1, [sp, #8]
 80091be:	ed9d 0b00 	vldr	d0, [sp]
 80091c2:	2001      	movs	r0, #1
 80091c4:	f000 f928 	bl	8009418 <__kernel_sin>
 80091c8:	e7e1      	b.n	800918e <cos+0x56>
 80091ca:	bf00      	nop
 80091cc:	f3af 8000 	nop.w
	...
 80091d8:	3fe921fb 	.word	0x3fe921fb
 80091dc:	7fefffff 	.word	0x7fefffff

080091e0 <sin>:
 80091e0:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 80091e2:	ec53 2b10 	vmov	r2, r3, d0
 80091e6:	4826      	ldr	r0, [pc, #152]	@ (8009280 <sin+0xa0>)
 80091e8:	f023 4100 	bic.w	r1, r3, #2147483648	@ 0x80000000
 80091ec:	4281      	cmp	r1, r0
 80091ee:	d807      	bhi.n	8009200 <sin+0x20>
 80091f0:	ed9f 1b21 	vldr	d1, [pc, #132]	@ 8009278 <sin+0x98>
 80091f4:	2000      	movs	r0, #0
 80091f6:	b005      	add	sp, #20
 80091f8:	f85d eb04 	ldr.w	lr, [sp], #4
 80091fc:	f000 b90c 	b.w	8009418 <__kernel_sin>
 8009200:	4820      	ldr	r0, [pc, #128]	@ (8009284 <sin+0xa4>)
 8009202:	4281      	cmp	r1, r0
 8009204:	d908      	bls.n	8009218 <sin+0x38>
 8009206:	4610      	mov	r0, r2
 8009208:	4619      	mov	r1, r3
 800920a:	f7f7 f85d 	bl	80002c8 <__aeabi_dsub>
 800920e:	ec41 0b10 	vmov	d0, r0, r1
 8009212:	b005      	add	sp, #20
 8009214:	f85d fb04 	ldr.w	pc, [sp], #4
 8009218:	4668      	mov	r0, sp
 800921a:	f000 f9b9 	bl	8009590 <__ieee754_rem_pio2>
 800921e:	f000 0003 	and.w	r0, r0, #3
 8009222:	2801      	cmp	r0, #1
 8009224:	d00c      	beq.n	8009240 <sin+0x60>
 8009226:	2802      	cmp	r0, #2
 8009228:	d011      	beq.n	800924e <sin+0x6e>
 800922a:	b9e8      	cbnz	r0, 8009268 <sin+0x88>
 800922c:	ed9d 1b02 	vldr	d1, [sp, #8]
 8009230:	ed9d 0b00 	vldr	d0, [sp]
 8009234:	2001      	movs	r0, #1
 8009236:	f000 f8ef 	bl	8009418 <__kernel_sin>
 800923a:	ec51 0b10 	vmov	r0, r1, d0
 800923e:	e7e6      	b.n	800920e <sin+0x2e>
 8009240:	ed9d 1b02 	vldr	d1, [sp, #8]
 8009244:	ed9d 0b00 	vldr	d0, [sp]
 8009248:	f000 f81e 	bl	8009288 <__kernel_cos>
 800924c:	e7f5      	b.n	800923a <sin+0x5a>
 800924e:	ed9d 1b02 	vldr	d1, [sp, #8]
 8009252:	ed9d 0b00 	vldr	d0, [sp]
 8009256:	2001      	movs	r0, #1
 8009258:	f000 f8de 	bl	8009418 <__kernel_sin>
 800925c:	ec53 2b10 	vmov	r2, r3, d0
 8009260:	4610      	mov	r0, r2
 8009262:	f103 4100 	add.w	r1, r3, #2147483648	@ 0x80000000
 8009266:	e7d2      	b.n	800920e <sin+0x2e>
 8009268:	ed9d 1b02 	vldr	d1, [sp, #8]
 800926c:	ed9d 0b00 	vldr	d0, [sp]
 8009270:	f000 f80a 	bl	8009288 <__kernel_cos>
 8009274:	e7f2      	b.n	800925c <sin+0x7c>
 8009276:	bf00      	nop
	...
 8009280:	3fe921fb 	.word	0x3fe921fb
 8009284:	7fefffff 	.word	0x7fefffff

08009288 <__kernel_cos>:
 8009288:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800928c:	ec57 6b10 	vmov	r6, r7, d0
 8009290:	f027 4800 	bic.w	r8, r7, #2147483648	@ 0x80000000
 8009294:	f1b8 5f79 	cmp.w	r8, #1044381696	@ 0x3e400000
 8009298:	ed8d 1b00 	vstr	d1, [sp]
 800929c:	d206      	bcs.n	80092ac <__kernel_cos+0x24>
 800929e:	4630      	mov	r0, r6
 80092a0:	4639      	mov	r1, r7
 80092a2:	f7f7 fc79 	bl	8000b98 <__aeabi_d2iz>
 80092a6:	2800      	cmp	r0, #0
 80092a8:	f000 8088 	beq.w	80093bc <__kernel_cos+0x134>
 80092ac:	4632      	mov	r2, r6
 80092ae:	463b      	mov	r3, r7
 80092b0:	4630      	mov	r0, r6
 80092b2:	4639      	mov	r1, r7
 80092b4:	f7f7 f9c0 	bl	8000638 <__aeabi_dmul>
 80092b8:	4b51      	ldr	r3, [pc, #324]	@ (8009400 <__kernel_cos+0x178>)
 80092ba:	2200      	movs	r2, #0
 80092bc:	4604      	mov	r4, r0
 80092be:	460d      	mov	r5, r1
 80092c0:	f7f7 f9ba 	bl	8000638 <__aeabi_dmul>
 80092c4:	a340      	add	r3, pc, #256	@ (adr r3, 80093c8 <__kernel_cos+0x140>)
 80092c6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80092ca:	4682      	mov	sl, r0
 80092cc:	468b      	mov	fp, r1
 80092ce:	4620      	mov	r0, r4
 80092d0:	4629      	mov	r1, r5
 80092d2:	f7f7 f9b1 	bl	8000638 <__aeabi_dmul>
 80092d6:	a33e      	add	r3, pc, #248	@ (adr r3, 80093d0 <__kernel_cos+0x148>)
 80092d8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80092dc:	f7f6 fff6 	bl	80002cc <__adddf3>
 80092e0:	4622      	mov	r2, r4
 80092e2:	462b      	mov	r3, r5
 80092e4:	f7f7 f9a8 	bl	8000638 <__aeabi_dmul>
 80092e8:	a33b      	add	r3, pc, #236	@ (adr r3, 80093d8 <__kernel_cos+0x150>)
 80092ea:	e9d3 2300 	ldrd	r2, r3, [r3]
 80092ee:	f7f6 ffeb 	bl	80002c8 <__aeabi_dsub>
 80092f2:	4622      	mov	r2, r4
 80092f4:	462b      	mov	r3, r5
 80092f6:	f7f7 f99f 	bl	8000638 <__aeabi_dmul>
 80092fa:	a339      	add	r3, pc, #228	@ (adr r3, 80093e0 <__kernel_cos+0x158>)
 80092fc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009300:	f7f6 ffe4 	bl	80002cc <__adddf3>
 8009304:	4622      	mov	r2, r4
 8009306:	462b      	mov	r3, r5
 8009308:	f7f7 f996 	bl	8000638 <__aeabi_dmul>
 800930c:	a336      	add	r3, pc, #216	@ (adr r3, 80093e8 <__kernel_cos+0x160>)
 800930e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009312:	f7f6 ffd9 	bl	80002c8 <__aeabi_dsub>
 8009316:	4622      	mov	r2, r4
 8009318:	462b      	mov	r3, r5
 800931a:	f7f7 f98d 	bl	8000638 <__aeabi_dmul>
 800931e:	a334      	add	r3, pc, #208	@ (adr r3, 80093f0 <__kernel_cos+0x168>)
 8009320:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009324:	f7f6 ffd2 	bl	80002cc <__adddf3>
 8009328:	4622      	mov	r2, r4
 800932a:	462b      	mov	r3, r5
 800932c:	f7f7 f984 	bl	8000638 <__aeabi_dmul>
 8009330:	4622      	mov	r2, r4
 8009332:	462b      	mov	r3, r5
 8009334:	f7f7 f980 	bl	8000638 <__aeabi_dmul>
 8009338:	e9dd 2300 	ldrd	r2, r3, [sp]
 800933c:	4604      	mov	r4, r0
 800933e:	460d      	mov	r5, r1
 8009340:	4630      	mov	r0, r6
 8009342:	4639      	mov	r1, r7
 8009344:	f7f7 f978 	bl	8000638 <__aeabi_dmul>
 8009348:	460b      	mov	r3, r1
 800934a:	4602      	mov	r2, r0
 800934c:	4629      	mov	r1, r5
 800934e:	4620      	mov	r0, r4
 8009350:	f7f6 ffba 	bl	80002c8 <__aeabi_dsub>
 8009354:	4b2b      	ldr	r3, [pc, #172]	@ (8009404 <__kernel_cos+0x17c>)
 8009356:	4598      	cmp	r8, r3
 8009358:	4606      	mov	r6, r0
 800935a:	460f      	mov	r7, r1
 800935c:	d810      	bhi.n	8009380 <__kernel_cos+0xf8>
 800935e:	4602      	mov	r2, r0
 8009360:	460b      	mov	r3, r1
 8009362:	4650      	mov	r0, sl
 8009364:	4659      	mov	r1, fp
 8009366:	f7f6 ffaf 	bl	80002c8 <__aeabi_dsub>
 800936a:	460b      	mov	r3, r1
 800936c:	4926      	ldr	r1, [pc, #152]	@ (8009408 <__kernel_cos+0x180>)
 800936e:	4602      	mov	r2, r0
 8009370:	2000      	movs	r0, #0
 8009372:	f7f6 ffa9 	bl	80002c8 <__aeabi_dsub>
 8009376:	ec41 0b10 	vmov	d0, r0, r1
 800937a:	b003      	add	sp, #12
 800937c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009380:	4b22      	ldr	r3, [pc, #136]	@ (800940c <__kernel_cos+0x184>)
 8009382:	4921      	ldr	r1, [pc, #132]	@ (8009408 <__kernel_cos+0x180>)
 8009384:	4598      	cmp	r8, r3
 8009386:	bf8c      	ite	hi
 8009388:	4d21      	ldrhi	r5, [pc, #132]	@ (8009410 <__kernel_cos+0x188>)
 800938a:	f5a8 1500 	subls.w	r5, r8, #2097152	@ 0x200000
 800938e:	2400      	movs	r4, #0
 8009390:	4622      	mov	r2, r4
 8009392:	462b      	mov	r3, r5
 8009394:	2000      	movs	r0, #0
 8009396:	f7f6 ff97 	bl	80002c8 <__aeabi_dsub>
 800939a:	4622      	mov	r2, r4
 800939c:	4680      	mov	r8, r0
 800939e:	4689      	mov	r9, r1
 80093a0:	462b      	mov	r3, r5
 80093a2:	4650      	mov	r0, sl
 80093a4:	4659      	mov	r1, fp
 80093a6:	f7f6 ff8f 	bl	80002c8 <__aeabi_dsub>
 80093aa:	4632      	mov	r2, r6
 80093ac:	463b      	mov	r3, r7
 80093ae:	f7f6 ff8b 	bl	80002c8 <__aeabi_dsub>
 80093b2:	4602      	mov	r2, r0
 80093b4:	460b      	mov	r3, r1
 80093b6:	4640      	mov	r0, r8
 80093b8:	4649      	mov	r1, r9
 80093ba:	e7da      	b.n	8009372 <__kernel_cos+0xea>
 80093bc:	ed9f 0b0e 	vldr	d0, [pc, #56]	@ 80093f8 <__kernel_cos+0x170>
 80093c0:	e7db      	b.n	800937a <__kernel_cos+0xf2>
 80093c2:	bf00      	nop
 80093c4:	f3af 8000 	nop.w
 80093c8:	be8838d4 	.word	0xbe8838d4
 80093cc:	bda8fae9 	.word	0xbda8fae9
 80093d0:	bdb4b1c4 	.word	0xbdb4b1c4
 80093d4:	3e21ee9e 	.word	0x3e21ee9e
 80093d8:	809c52ad 	.word	0x809c52ad
 80093dc:	3e927e4f 	.word	0x3e927e4f
 80093e0:	19cb1590 	.word	0x19cb1590
 80093e4:	3efa01a0 	.word	0x3efa01a0
 80093e8:	16c15177 	.word	0x16c15177
 80093ec:	3f56c16c 	.word	0x3f56c16c
 80093f0:	5555554c 	.word	0x5555554c
 80093f4:	3fa55555 	.word	0x3fa55555
 80093f8:	00000000 	.word	0x00000000
 80093fc:	3ff00000 	.word	0x3ff00000
 8009400:	3fe00000 	.word	0x3fe00000
 8009404:	3fd33332 	.word	0x3fd33332
 8009408:	3ff00000 	.word	0x3ff00000
 800940c:	3fe90000 	.word	0x3fe90000
 8009410:	3fd20000 	.word	0x3fd20000
 8009414:	00000000 	.word	0x00000000

08009418 <__kernel_sin>:
 8009418:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800941c:	ec55 4b10 	vmov	r4, r5, d0
 8009420:	f025 4300 	bic.w	r3, r5, #2147483648	@ 0x80000000
 8009424:	b085      	sub	sp, #20
 8009426:	f1b3 5f79 	cmp.w	r3, #1044381696	@ 0x3e400000
 800942a:	ed8d 1b02 	vstr	d1, [sp, #8]
 800942e:	4680      	mov	r8, r0
 8009430:	d205      	bcs.n	800943e <__kernel_sin+0x26>
 8009432:	4620      	mov	r0, r4
 8009434:	4629      	mov	r1, r5
 8009436:	f7f7 fbaf 	bl	8000b98 <__aeabi_d2iz>
 800943a:	2800      	cmp	r0, #0
 800943c:	d052      	beq.n	80094e4 <__kernel_sin+0xcc>
 800943e:	4622      	mov	r2, r4
 8009440:	462b      	mov	r3, r5
 8009442:	4620      	mov	r0, r4
 8009444:	4629      	mov	r1, r5
 8009446:	f7f7 f8f7 	bl	8000638 <__aeabi_dmul>
 800944a:	4682      	mov	sl, r0
 800944c:	468b      	mov	fp, r1
 800944e:	4602      	mov	r2, r0
 8009450:	460b      	mov	r3, r1
 8009452:	4620      	mov	r0, r4
 8009454:	4629      	mov	r1, r5
 8009456:	f7f7 f8ef 	bl	8000638 <__aeabi_dmul>
 800945a:	a342      	add	r3, pc, #264	@ (adr r3, 8009564 <__kernel_sin+0x14c>)
 800945c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009460:	e9cd 0100 	strd	r0, r1, [sp]
 8009464:	4650      	mov	r0, sl
 8009466:	4659      	mov	r1, fp
 8009468:	f7f7 f8e6 	bl	8000638 <__aeabi_dmul>
 800946c:	a33f      	add	r3, pc, #252	@ (adr r3, 800956c <__kernel_sin+0x154>)
 800946e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009472:	f7f6 ff29 	bl	80002c8 <__aeabi_dsub>
 8009476:	4652      	mov	r2, sl
 8009478:	465b      	mov	r3, fp
 800947a:	f7f7 f8dd 	bl	8000638 <__aeabi_dmul>
 800947e:	a33d      	add	r3, pc, #244	@ (adr r3, 8009574 <__kernel_sin+0x15c>)
 8009480:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009484:	f7f6 ff22 	bl	80002cc <__adddf3>
 8009488:	4652      	mov	r2, sl
 800948a:	465b      	mov	r3, fp
 800948c:	f7f7 f8d4 	bl	8000638 <__aeabi_dmul>
 8009490:	a33a      	add	r3, pc, #232	@ (adr r3, 800957c <__kernel_sin+0x164>)
 8009492:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009496:	f7f6 ff17 	bl	80002c8 <__aeabi_dsub>
 800949a:	4652      	mov	r2, sl
 800949c:	465b      	mov	r3, fp
 800949e:	f7f7 f8cb 	bl	8000638 <__aeabi_dmul>
 80094a2:	a338      	add	r3, pc, #224	@ (adr r3, 8009584 <__kernel_sin+0x16c>)
 80094a4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80094a8:	f7f6 ff10 	bl	80002cc <__adddf3>
 80094ac:	4606      	mov	r6, r0
 80094ae:	460f      	mov	r7, r1
 80094b0:	f1b8 0f00 	cmp.w	r8, #0
 80094b4:	d11b      	bne.n	80094ee <__kernel_sin+0xd6>
 80094b6:	4602      	mov	r2, r0
 80094b8:	460b      	mov	r3, r1
 80094ba:	4650      	mov	r0, sl
 80094bc:	4659      	mov	r1, fp
 80094be:	f7f7 f8bb 	bl	8000638 <__aeabi_dmul>
 80094c2:	a325      	add	r3, pc, #148	@ (adr r3, 8009558 <__kernel_sin+0x140>)
 80094c4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80094c8:	f7f6 fefe 	bl	80002c8 <__aeabi_dsub>
 80094cc:	e9dd 2300 	ldrd	r2, r3, [sp]
 80094d0:	f7f7 f8b2 	bl	8000638 <__aeabi_dmul>
 80094d4:	4602      	mov	r2, r0
 80094d6:	460b      	mov	r3, r1
 80094d8:	4620      	mov	r0, r4
 80094da:	4629      	mov	r1, r5
 80094dc:	f7f6 fef6 	bl	80002cc <__adddf3>
 80094e0:	4604      	mov	r4, r0
 80094e2:	460d      	mov	r5, r1
 80094e4:	ec45 4b10 	vmov	d0, r4, r5
 80094e8:	b005      	add	sp, #20
 80094ea:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80094ee:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80094f2:	4b1b      	ldr	r3, [pc, #108]	@ (8009560 <__kernel_sin+0x148>)
 80094f4:	2200      	movs	r2, #0
 80094f6:	f7f7 f89f 	bl	8000638 <__aeabi_dmul>
 80094fa:	4632      	mov	r2, r6
 80094fc:	4680      	mov	r8, r0
 80094fe:	4689      	mov	r9, r1
 8009500:	463b      	mov	r3, r7
 8009502:	e9dd 0100 	ldrd	r0, r1, [sp]
 8009506:	f7f7 f897 	bl	8000638 <__aeabi_dmul>
 800950a:	4602      	mov	r2, r0
 800950c:	460b      	mov	r3, r1
 800950e:	4640      	mov	r0, r8
 8009510:	4649      	mov	r1, r9
 8009512:	f7f6 fed9 	bl	80002c8 <__aeabi_dsub>
 8009516:	4652      	mov	r2, sl
 8009518:	465b      	mov	r3, fp
 800951a:	f7f7 f88d 	bl	8000638 <__aeabi_dmul>
 800951e:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8009522:	f7f6 fed1 	bl	80002c8 <__aeabi_dsub>
 8009526:	a30c      	add	r3, pc, #48	@ (adr r3, 8009558 <__kernel_sin+0x140>)
 8009528:	e9d3 2300 	ldrd	r2, r3, [r3]
 800952c:	4606      	mov	r6, r0
 800952e:	460f      	mov	r7, r1
 8009530:	e9dd 0100 	ldrd	r0, r1, [sp]
 8009534:	f7f7 f880 	bl	8000638 <__aeabi_dmul>
 8009538:	4602      	mov	r2, r0
 800953a:	460b      	mov	r3, r1
 800953c:	4630      	mov	r0, r6
 800953e:	4639      	mov	r1, r7
 8009540:	f7f6 fec4 	bl	80002cc <__adddf3>
 8009544:	4602      	mov	r2, r0
 8009546:	460b      	mov	r3, r1
 8009548:	4620      	mov	r0, r4
 800954a:	4629      	mov	r1, r5
 800954c:	f7f6 febc 	bl	80002c8 <__aeabi_dsub>
 8009550:	e7c6      	b.n	80094e0 <__kernel_sin+0xc8>
 8009552:	bf00      	nop
 8009554:	f3af 8000 	nop.w
 8009558:	55555549 	.word	0x55555549
 800955c:	3fc55555 	.word	0x3fc55555
 8009560:	3fe00000 	.word	0x3fe00000
 8009564:	5acfd57c 	.word	0x5acfd57c
 8009568:	3de5d93a 	.word	0x3de5d93a
 800956c:	8a2b9ceb 	.word	0x8a2b9ceb
 8009570:	3e5ae5e6 	.word	0x3e5ae5e6
 8009574:	57b1fe7d 	.word	0x57b1fe7d
 8009578:	3ec71de3 	.word	0x3ec71de3
 800957c:	19c161d5 	.word	0x19c161d5
 8009580:	3f2a01a0 	.word	0x3f2a01a0
 8009584:	1110f8a6 	.word	0x1110f8a6
 8009588:	3f811111 	.word	0x3f811111
 800958c:	00000000 	.word	0x00000000

08009590 <__ieee754_rem_pio2>:
 8009590:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009594:	ec57 6b10 	vmov	r6, r7, d0
 8009598:	4bc5      	ldr	r3, [pc, #788]	@ (80098b0 <__ieee754_rem_pio2+0x320>)
 800959a:	b08d      	sub	sp, #52	@ 0x34
 800959c:	f027 4800 	bic.w	r8, r7, #2147483648	@ 0x80000000
 80095a0:	4598      	cmp	r8, r3
 80095a2:	4604      	mov	r4, r0
 80095a4:	9704      	str	r7, [sp, #16]
 80095a6:	d807      	bhi.n	80095b8 <__ieee754_rem_pio2+0x28>
 80095a8:	2200      	movs	r2, #0
 80095aa:	2300      	movs	r3, #0
 80095ac:	ed80 0b00 	vstr	d0, [r0]
 80095b0:	e9c0 2302 	strd	r2, r3, [r0, #8]
 80095b4:	2500      	movs	r5, #0
 80095b6:	e028      	b.n	800960a <__ieee754_rem_pio2+0x7a>
 80095b8:	4bbe      	ldr	r3, [pc, #760]	@ (80098b4 <__ieee754_rem_pio2+0x324>)
 80095ba:	4598      	cmp	r8, r3
 80095bc:	d878      	bhi.n	80096b0 <__ieee754_rem_pio2+0x120>
 80095be:	9b04      	ldr	r3, [sp, #16]
 80095c0:	4dbd      	ldr	r5, [pc, #756]	@ (80098b8 <__ieee754_rem_pio2+0x328>)
 80095c2:	2b00      	cmp	r3, #0
 80095c4:	4630      	mov	r0, r6
 80095c6:	a3ac      	add	r3, pc, #688	@ (adr r3, 8009878 <__ieee754_rem_pio2+0x2e8>)
 80095c8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80095cc:	4639      	mov	r1, r7
 80095ce:	dd38      	ble.n	8009642 <__ieee754_rem_pio2+0xb2>
 80095d0:	f7f6 fe7a 	bl	80002c8 <__aeabi_dsub>
 80095d4:	45a8      	cmp	r8, r5
 80095d6:	4606      	mov	r6, r0
 80095d8:	460f      	mov	r7, r1
 80095da:	d01a      	beq.n	8009612 <__ieee754_rem_pio2+0x82>
 80095dc:	a3a8      	add	r3, pc, #672	@ (adr r3, 8009880 <__ieee754_rem_pio2+0x2f0>)
 80095de:	e9d3 2300 	ldrd	r2, r3, [r3]
 80095e2:	f7f6 fe71 	bl	80002c8 <__aeabi_dsub>
 80095e6:	4602      	mov	r2, r0
 80095e8:	460b      	mov	r3, r1
 80095ea:	4680      	mov	r8, r0
 80095ec:	4689      	mov	r9, r1
 80095ee:	4630      	mov	r0, r6
 80095f0:	4639      	mov	r1, r7
 80095f2:	f7f6 fe69 	bl	80002c8 <__aeabi_dsub>
 80095f6:	a3a2      	add	r3, pc, #648	@ (adr r3, 8009880 <__ieee754_rem_pio2+0x2f0>)
 80095f8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80095fc:	f7f6 fe64 	bl	80002c8 <__aeabi_dsub>
 8009600:	e9c4 8900 	strd	r8, r9, [r4]
 8009604:	e9c4 0102 	strd	r0, r1, [r4, #8]
 8009608:	2501      	movs	r5, #1
 800960a:	4628      	mov	r0, r5
 800960c:	b00d      	add	sp, #52	@ 0x34
 800960e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009612:	a39d      	add	r3, pc, #628	@ (adr r3, 8009888 <__ieee754_rem_pio2+0x2f8>)
 8009614:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009618:	f7f6 fe56 	bl	80002c8 <__aeabi_dsub>
 800961c:	a39c      	add	r3, pc, #624	@ (adr r3, 8009890 <__ieee754_rem_pio2+0x300>)
 800961e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009622:	4606      	mov	r6, r0
 8009624:	460f      	mov	r7, r1
 8009626:	f7f6 fe4f 	bl	80002c8 <__aeabi_dsub>
 800962a:	4602      	mov	r2, r0
 800962c:	460b      	mov	r3, r1
 800962e:	4680      	mov	r8, r0
 8009630:	4689      	mov	r9, r1
 8009632:	4630      	mov	r0, r6
 8009634:	4639      	mov	r1, r7
 8009636:	f7f6 fe47 	bl	80002c8 <__aeabi_dsub>
 800963a:	a395      	add	r3, pc, #596	@ (adr r3, 8009890 <__ieee754_rem_pio2+0x300>)
 800963c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009640:	e7dc      	b.n	80095fc <__ieee754_rem_pio2+0x6c>
 8009642:	f7f6 fe43 	bl	80002cc <__adddf3>
 8009646:	45a8      	cmp	r8, r5
 8009648:	4606      	mov	r6, r0
 800964a:	460f      	mov	r7, r1
 800964c:	d018      	beq.n	8009680 <__ieee754_rem_pio2+0xf0>
 800964e:	a38c      	add	r3, pc, #560	@ (adr r3, 8009880 <__ieee754_rem_pio2+0x2f0>)
 8009650:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009654:	f7f6 fe3a 	bl	80002cc <__adddf3>
 8009658:	4602      	mov	r2, r0
 800965a:	460b      	mov	r3, r1
 800965c:	4680      	mov	r8, r0
 800965e:	4689      	mov	r9, r1
 8009660:	4630      	mov	r0, r6
 8009662:	4639      	mov	r1, r7
 8009664:	f7f6 fe30 	bl	80002c8 <__aeabi_dsub>
 8009668:	a385      	add	r3, pc, #532	@ (adr r3, 8009880 <__ieee754_rem_pio2+0x2f0>)
 800966a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800966e:	f7f6 fe2d 	bl	80002cc <__adddf3>
 8009672:	f04f 35ff 	mov.w	r5, #4294967295
 8009676:	e9c4 8900 	strd	r8, r9, [r4]
 800967a:	e9c4 0102 	strd	r0, r1, [r4, #8]
 800967e:	e7c4      	b.n	800960a <__ieee754_rem_pio2+0x7a>
 8009680:	a381      	add	r3, pc, #516	@ (adr r3, 8009888 <__ieee754_rem_pio2+0x2f8>)
 8009682:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009686:	f7f6 fe21 	bl	80002cc <__adddf3>
 800968a:	a381      	add	r3, pc, #516	@ (adr r3, 8009890 <__ieee754_rem_pio2+0x300>)
 800968c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009690:	4606      	mov	r6, r0
 8009692:	460f      	mov	r7, r1
 8009694:	f7f6 fe1a 	bl	80002cc <__adddf3>
 8009698:	4602      	mov	r2, r0
 800969a:	460b      	mov	r3, r1
 800969c:	4680      	mov	r8, r0
 800969e:	4689      	mov	r9, r1
 80096a0:	4630      	mov	r0, r6
 80096a2:	4639      	mov	r1, r7
 80096a4:	f7f6 fe10 	bl	80002c8 <__aeabi_dsub>
 80096a8:	a379      	add	r3, pc, #484	@ (adr r3, 8009890 <__ieee754_rem_pio2+0x300>)
 80096aa:	e9d3 2300 	ldrd	r2, r3, [r3]
 80096ae:	e7de      	b.n	800966e <__ieee754_rem_pio2+0xde>
 80096b0:	4b82      	ldr	r3, [pc, #520]	@ (80098bc <__ieee754_rem_pio2+0x32c>)
 80096b2:	4598      	cmp	r8, r3
 80096b4:	f200 80d1 	bhi.w	800985a <__ieee754_rem_pio2+0x2ca>
 80096b8:	f000 f966 	bl	8009988 <fabs>
 80096bc:	ec57 6b10 	vmov	r6, r7, d0
 80096c0:	a375      	add	r3, pc, #468	@ (adr r3, 8009898 <__ieee754_rem_pio2+0x308>)
 80096c2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80096c6:	4630      	mov	r0, r6
 80096c8:	4639      	mov	r1, r7
 80096ca:	f7f6 ffb5 	bl	8000638 <__aeabi_dmul>
 80096ce:	4b7c      	ldr	r3, [pc, #496]	@ (80098c0 <__ieee754_rem_pio2+0x330>)
 80096d0:	2200      	movs	r2, #0
 80096d2:	f7f6 fdfb 	bl	80002cc <__adddf3>
 80096d6:	f7f7 fa5f 	bl	8000b98 <__aeabi_d2iz>
 80096da:	4605      	mov	r5, r0
 80096dc:	f7f6 ff42 	bl	8000564 <__aeabi_i2d>
 80096e0:	4602      	mov	r2, r0
 80096e2:	460b      	mov	r3, r1
 80096e4:	e9cd 2302 	strd	r2, r3, [sp, #8]
 80096e8:	a363      	add	r3, pc, #396	@ (adr r3, 8009878 <__ieee754_rem_pio2+0x2e8>)
 80096ea:	e9d3 2300 	ldrd	r2, r3, [r3]
 80096ee:	f7f6 ffa3 	bl	8000638 <__aeabi_dmul>
 80096f2:	4602      	mov	r2, r0
 80096f4:	460b      	mov	r3, r1
 80096f6:	4630      	mov	r0, r6
 80096f8:	4639      	mov	r1, r7
 80096fa:	f7f6 fde5 	bl	80002c8 <__aeabi_dsub>
 80096fe:	a360      	add	r3, pc, #384	@ (adr r3, 8009880 <__ieee754_rem_pio2+0x2f0>)
 8009700:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009704:	4682      	mov	sl, r0
 8009706:	468b      	mov	fp, r1
 8009708:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800970c:	f7f6 ff94 	bl	8000638 <__aeabi_dmul>
 8009710:	2d1f      	cmp	r5, #31
 8009712:	4606      	mov	r6, r0
 8009714:	460f      	mov	r7, r1
 8009716:	dc0c      	bgt.n	8009732 <__ieee754_rem_pio2+0x1a2>
 8009718:	4b6a      	ldr	r3, [pc, #424]	@ (80098c4 <__ieee754_rem_pio2+0x334>)
 800971a:	1e6a      	subs	r2, r5, #1
 800971c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8009720:	4543      	cmp	r3, r8
 8009722:	d006      	beq.n	8009732 <__ieee754_rem_pio2+0x1a2>
 8009724:	4632      	mov	r2, r6
 8009726:	463b      	mov	r3, r7
 8009728:	4650      	mov	r0, sl
 800972a:	4659      	mov	r1, fp
 800972c:	f7f6 fdcc 	bl	80002c8 <__aeabi_dsub>
 8009730:	e00e      	b.n	8009750 <__ieee754_rem_pio2+0x1c0>
 8009732:	463b      	mov	r3, r7
 8009734:	4632      	mov	r2, r6
 8009736:	4650      	mov	r0, sl
 8009738:	4659      	mov	r1, fp
 800973a:	f7f6 fdc5 	bl	80002c8 <__aeabi_dsub>
 800973e:	ea4f 5328 	mov.w	r3, r8, asr #20
 8009742:	9305      	str	r3, [sp, #20]
 8009744:	f3c1 530a 	ubfx	r3, r1, #20, #11
 8009748:	ebc3 5318 	rsb	r3, r3, r8, lsr #20
 800974c:	2b10      	cmp	r3, #16
 800974e:	dc02      	bgt.n	8009756 <__ieee754_rem_pio2+0x1c6>
 8009750:	e9c4 0100 	strd	r0, r1, [r4]
 8009754:	e039      	b.n	80097ca <__ieee754_rem_pio2+0x23a>
 8009756:	a34c      	add	r3, pc, #304	@ (adr r3, 8009888 <__ieee754_rem_pio2+0x2f8>)
 8009758:	e9d3 2300 	ldrd	r2, r3, [r3]
 800975c:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8009760:	f7f6 ff6a 	bl	8000638 <__aeabi_dmul>
 8009764:	4606      	mov	r6, r0
 8009766:	460f      	mov	r7, r1
 8009768:	4602      	mov	r2, r0
 800976a:	460b      	mov	r3, r1
 800976c:	4650      	mov	r0, sl
 800976e:	4659      	mov	r1, fp
 8009770:	f7f6 fdaa 	bl	80002c8 <__aeabi_dsub>
 8009774:	4602      	mov	r2, r0
 8009776:	460b      	mov	r3, r1
 8009778:	4680      	mov	r8, r0
 800977a:	4689      	mov	r9, r1
 800977c:	4650      	mov	r0, sl
 800977e:	4659      	mov	r1, fp
 8009780:	f7f6 fda2 	bl	80002c8 <__aeabi_dsub>
 8009784:	4632      	mov	r2, r6
 8009786:	463b      	mov	r3, r7
 8009788:	f7f6 fd9e 	bl	80002c8 <__aeabi_dsub>
 800978c:	a340      	add	r3, pc, #256	@ (adr r3, 8009890 <__ieee754_rem_pio2+0x300>)
 800978e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009792:	4606      	mov	r6, r0
 8009794:	460f      	mov	r7, r1
 8009796:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800979a:	f7f6 ff4d 	bl	8000638 <__aeabi_dmul>
 800979e:	4632      	mov	r2, r6
 80097a0:	463b      	mov	r3, r7
 80097a2:	f7f6 fd91 	bl	80002c8 <__aeabi_dsub>
 80097a6:	4602      	mov	r2, r0
 80097a8:	460b      	mov	r3, r1
 80097aa:	4606      	mov	r6, r0
 80097ac:	460f      	mov	r7, r1
 80097ae:	4640      	mov	r0, r8
 80097b0:	4649      	mov	r1, r9
 80097b2:	f7f6 fd89 	bl	80002c8 <__aeabi_dsub>
 80097b6:	9a05      	ldr	r2, [sp, #20]
 80097b8:	f3c1 530a 	ubfx	r3, r1, #20, #11
 80097bc:	1ad3      	subs	r3, r2, r3
 80097be:	2b31      	cmp	r3, #49	@ 0x31
 80097c0:	dc20      	bgt.n	8009804 <__ieee754_rem_pio2+0x274>
 80097c2:	e9c4 0100 	strd	r0, r1, [r4]
 80097c6:	46c2      	mov	sl, r8
 80097c8:	46cb      	mov	fp, r9
 80097ca:	e9d4 8900 	ldrd	r8, r9, [r4]
 80097ce:	4650      	mov	r0, sl
 80097d0:	4642      	mov	r2, r8
 80097d2:	464b      	mov	r3, r9
 80097d4:	4659      	mov	r1, fp
 80097d6:	f7f6 fd77 	bl	80002c8 <__aeabi_dsub>
 80097da:	463b      	mov	r3, r7
 80097dc:	4632      	mov	r2, r6
 80097de:	f7f6 fd73 	bl	80002c8 <__aeabi_dsub>
 80097e2:	9b04      	ldr	r3, [sp, #16]
 80097e4:	2b00      	cmp	r3, #0
 80097e6:	e9c4 0102 	strd	r0, r1, [r4, #8]
 80097ea:	f6bf af0e 	bge.w	800960a <__ieee754_rem_pio2+0x7a>
 80097ee:	f109 4300 	add.w	r3, r9, #2147483648	@ 0x80000000
 80097f2:	6063      	str	r3, [r4, #4]
 80097f4:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 80097f8:	f8c4 8000 	str.w	r8, [r4]
 80097fc:	60a0      	str	r0, [r4, #8]
 80097fe:	60e3      	str	r3, [r4, #12]
 8009800:	426d      	negs	r5, r5
 8009802:	e702      	b.n	800960a <__ieee754_rem_pio2+0x7a>
 8009804:	a326      	add	r3, pc, #152	@ (adr r3, 80098a0 <__ieee754_rem_pio2+0x310>)
 8009806:	e9d3 2300 	ldrd	r2, r3, [r3]
 800980a:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800980e:	f7f6 ff13 	bl	8000638 <__aeabi_dmul>
 8009812:	4606      	mov	r6, r0
 8009814:	460f      	mov	r7, r1
 8009816:	4602      	mov	r2, r0
 8009818:	460b      	mov	r3, r1
 800981a:	4640      	mov	r0, r8
 800981c:	4649      	mov	r1, r9
 800981e:	f7f6 fd53 	bl	80002c8 <__aeabi_dsub>
 8009822:	4602      	mov	r2, r0
 8009824:	460b      	mov	r3, r1
 8009826:	4682      	mov	sl, r0
 8009828:	468b      	mov	fp, r1
 800982a:	4640      	mov	r0, r8
 800982c:	4649      	mov	r1, r9
 800982e:	f7f6 fd4b 	bl	80002c8 <__aeabi_dsub>
 8009832:	4632      	mov	r2, r6
 8009834:	463b      	mov	r3, r7
 8009836:	f7f6 fd47 	bl	80002c8 <__aeabi_dsub>
 800983a:	a31b      	add	r3, pc, #108	@ (adr r3, 80098a8 <__ieee754_rem_pio2+0x318>)
 800983c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009840:	4606      	mov	r6, r0
 8009842:	460f      	mov	r7, r1
 8009844:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8009848:	f7f6 fef6 	bl	8000638 <__aeabi_dmul>
 800984c:	4632      	mov	r2, r6
 800984e:	463b      	mov	r3, r7
 8009850:	f7f6 fd3a 	bl	80002c8 <__aeabi_dsub>
 8009854:	4606      	mov	r6, r0
 8009856:	460f      	mov	r7, r1
 8009858:	e764      	b.n	8009724 <__ieee754_rem_pio2+0x194>
 800985a:	4b1b      	ldr	r3, [pc, #108]	@ (80098c8 <__ieee754_rem_pio2+0x338>)
 800985c:	4598      	cmp	r8, r3
 800985e:	d935      	bls.n	80098cc <__ieee754_rem_pio2+0x33c>
 8009860:	4632      	mov	r2, r6
 8009862:	463b      	mov	r3, r7
 8009864:	4630      	mov	r0, r6
 8009866:	4639      	mov	r1, r7
 8009868:	f7f6 fd2e 	bl	80002c8 <__aeabi_dsub>
 800986c:	e9c4 0102 	strd	r0, r1, [r4, #8]
 8009870:	e9c4 0100 	strd	r0, r1, [r4]
 8009874:	e69e      	b.n	80095b4 <__ieee754_rem_pio2+0x24>
 8009876:	bf00      	nop
 8009878:	54400000 	.word	0x54400000
 800987c:	3ff921fb 	.word	0x3ff921fb
 8009880:	1a626331 	.word	0x1a626331
 8009884:	3dd0b461 	.word	0x3dd0b461
 8009888:	1a600000 	.word	0x1a600000
 800988c:	3dd0b461 	.word	0x3dd0b461
 8009890:	2e037073 	.word	0x2e037073
 8009894:	3ba3198a 	.word	0x3ba3198a
 8009898:	6dc9c883 	.word	0x6dc9c883
 800989c:	3fe45f30 	.word	0x3fe45f30
 80098a0:	2e000000 	.word	0x2e000000
 80098a4:	3ba3198a 	.word	0x3ba3198a
 80098a8:	252049c1 	.word	0x252049c1
 80098ac:	397b839a 	.word	0x397b839a
 80098b0:	3fe921fb 	.word	0x3fe921fb
 80098b4:	4002d97b 	.word	0x4002d97b
 80098b8:	3ff921fb 	.word	0x3ff921fb
 80098bc:	413921fb 	.word	0x413921fb
 80098c0:	3fe00000 	.word	0x3fe00000
 80098c4:	0800a6a8 	.word	0x0800a6a8
 80098c8:	7fefffff 	.word	0x7fefffff
 80098cc:	ea4f 5528 	mov.w	r5, r8, asr #20
 80098d0:	f2a5 4516 	subw	r5, r5, #1046	@ 0x416
 80098d4:	eba8 5105 	sub.w	r1, r8, r5, lsl #20
 80098d8:	4630      	mov	r0, r6
 80098da:	460f      	mov	r7, r1
 80098dc:	f7f7 f95c 	bl	8000b98 <__aeabi_d2iz>
 80098e0:	f7f6 fe40 	bl	8000564 <__aeabi_i2d>
 80098e4:	4602      	mov	r2, r0
 80098e6:	460b      	mov	r3, r1
 80098e8:	4630      	mov	r0, r6
 80098ea:	4639      	mov	r1, r7
 80098ec:	e9cd 2306 	strd	r2, r3, [sp, #24]
 80098f0:	f7f6 fcea 	bl	80002c8 <__aeabi_dsub>
 80098f4:	4b22      	ldr	r3, [pc, #136]	@ (8009980 <__ieee754_rem_pio2+0x3f0>)
 80098f6:	2200      	movs	r2, #0
 80098f8:	f7f6 fe9e 	bl	8000638 <__aeabi_dmul>
 80098fc:	460f      	mov	r7, r1
 80098fe:	4606      	mov	r6, r0
 8009900:	f7f7 f94a 	bl	8000b98 <__aeabi_d2iz>
 8009904:	f7f6 fe2e 	bl	8000564 <__aeabi_i2d>
 8009908:	4602      	mov	r2, r0
 800990a:	460b      	mov	r3, r1
 800990c:	4630      	mov	r0, r6
 800990e:	4639      	mov	r1, r7
 8009910:	e9cd 2308 	strd	r2, r3, [sp, #32]
 8009914:	f7f6 fcd8 	bl	80002c8 <__aeabi_dsub>
 8009918:	4b19      	ldr	r3, [pc, #100]	@ (8009980 <__ieee754_rem_pio2+0x3f0>)
 800991a:	2200      	movs	r2, #0
 800991c:	f7f6 fe8c 	bl	8000638 <__aeabi_dmul>
 8009920:	e9cd 010a 	strd	r0, r1, [sp, #40]	@ 0x28
 8009924:	f10d 0930 	add.w	r9, sp, #48	@ 0x30
 8009928:	f04f 0803 	mov.w	r8, #3
 800992c:	2600      	movs	r6, #0
 800992e:	2700      	movs	r7, #0
 8009930:	e979 0102 	ldrd	r0, r1, [r9, #-8]!
 8009934:	4632      	mov	r2, r6
 8009936:	463b      	mov	r3, r7
 8009938:	46c2      	mov	sl, r8
 800993a:	f108 38ff 	add.w	r8, r8, #4294967295
 800993e:	f7f7 f8e3 	bl	8000b08 <__aeabi_dcmpeq>
 8009942:	2800      	cmp	r0, #0
 8009944:	d1f4      	bne.n	8009930 <__ieee754_rem_pio2+0x3a0>
 8009946:	4b0f      	ldr	r3, [pc, #60]	@ (8009984 <__ieee754_rem_pio2+0x3f4>)
 8009948:	9301      	str	r3, [sp, #4]
 800994a:	2302      	movs	r3, #2
 800994c:	9300      	str	r3, [sp, #0]
 800994e:	462a      	mov	r2, r5
 8009950:	4653      	mov	r3, sl
 8009952:	4621      	mov	r1, r4
 8009954:	a806      	add	r0, sp, #24
 8009956:	f000 f81f 	bl	8009998 <__kernel_rem_pio2>
 800995a:	9b04      	ldr	r3, [sp, #16]
 800995c:	2b00      	cmp	r3, #0
 800995e:	4605      	mov	r5, r0
 8009960:	f6bf ae53 	bge.w	800960a <__ieee754_rem_pio2+0x7a>
 8009964:	e9d4 2100 	ldrd	r2, r1, [r4]
 8009968:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 800996c:	e9c4 2300 	strd	r2, r3, [r4]
 8009970:	e9d4 2102 	ldrd	r2, r1, [r4, #8]
 8009974:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 8009978:	e9c4 2302 	strd	r2, r3, [r4, #8]
 800997c:	e740      	b.n	8009800 <__ieee754_rem_pio2+0x270>
 800997e:	bf00      	nop
 8009980:	41700000 	.word	0x41700000
 8009984:	0800a728 	.word	0x0800a728

08009988 <fabs>:
 8009988:	ec51 0b10 	vmov	r0, r1, d0
 800998c:	4602      	mov	r2, r0
 800998e:	f021 4300 	bic.w	r3, r1, #2147483648	@ 0x80000000
 8009992:	ec43 2b10 	vmov	d0, r2, r3
 8009996:	4770      	bx	lr

08009998 <__kernel_rem_pio2>:
 8009998:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800999c:	ed2d 8b02 	vpush	{d8}
 80099a0:	f5ad 7d19 	sub.w	sp, sp, #612	@ 0x264
 80099a4:	f112 0f14 	cmn.w	r2, #20
 80099a8:	9306      	str	r3, [sp, #24]
 80099aa:	9104      	str	r1, [sp, #16]
 80099ac:	4bbe      	ldr	r3, [pc, #760]	@ (8009ca8 <__kernel_rem_pio2+0x310>)
 80099ae:	99a4      	ldr	r1, [sp, #656]	@ 0x290
 80099b0:	9008      	str	r0, [sp, #32]
 80099b2:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 80099b6:	9300      	str	r3, [sp, #0]
 80099b8:	9b06      	ldr	r3, [sp, #24]
 80099ba:	f103 33ff 	add.w	r3, r3, #4294967295
 80099be:	bfa8      	it	ge
 80099c0:	1ed4      	subge	r4, r2, #3
 80099c2:	9305      	str	r3, [sp, #20]
 80099c4:	bfb2      	itee	lt
 80099c6:	2400      	movlt	r4, #0
 80099c8:	2318      	movge	r3, #24
 80099ca:	fb94 f4f3 	sdivge	r4, r4, r3
 80099ce:	f06f 0317 	mvn.w	r3, #23
 80099d2:	fb04 3303 	mla	r3, r4, r3, r3
 80099d6:	eb03 0b02 	add.w	fp, r3, r2
 80099da:	9b00      	ldr	r3, [sp, #0]
 80099dc:	9a05      	ldr	r2, [sp, #20]
 80099de:	ed9f 8bae 	vldr	d8, [pc, #696]	@ 8009c98 <__kernel_rem_pio2+0x300>
 80099e2:	eb03 0802 	add.w	r8, r3, r2
 80099e6:	9ba5      	ldr	r3, [sp, #660]	@ 0x294
 80099e8:	1aa7      	subs	r7, r4, r2
 80099ea:	ae20      	add	r6, sp, #128	@ 0x80
 80099ec:	eb03 0987 	add.w	r9, r3, r7, lsl #2
 80099f0:	2500      	movs	r5, #0
 80099f2:	4545      	cmp	r5, r8
 80099f4:	dd13      	ble.n	8009a1e <__kernel_rem_pio2+0x86>
 80099f6:	9b06      	ldr	r3, [sp, #24]
 80099f8:	aa20      	add	r2, sp, #128	@ 0x80
 80099fa:	eb02 05c3 	add.w	r5, r2, r3, lsl #3
 80099fe:	f50d 7ae0 	add.w	sl, sp, #448	@ 0x1c0
 8009a02:	f04f 0800 	mov.w	r8, #0
 8009a06:	9b00      	ldr	r3, [sp, #0]
 8009a08:	4598      	cmp	r8, r3
 8009a0a:	dc31      	bgt.n	8009a70 <__kernel_rem_pio2+0xd8>
 8009a0c:	ed9f 7ba2 	vldr	d7, [pc, #648]	@ 8009c98 <__kernel_rem_pio2+0x300>
 8009a10:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8009a14:	ed8d 7b02 	vstr	d7, [sp, #8]
 8009a18:	462f      	mov	r7, r5
 8009a1a:	2600      	movs	r6, #0
 8009a1c:	e01b      	b.n	8009a56 <__kernel_rem_pio2+0xbe>
 8009a1e:	42ef      	cmn	r7, r5
 8009a20:	d407      	bmi.n	8009a32 <__kernel_rem_pio2+0x9a>
 8009a22:	f859 0025 	ldr.w	r0, [r9, r5, lsl #2]
 8009a26:	f7f6 fd9d 	bl	8000564 <__aeabi_i2d>
 8009a2a:	e8e6 0102 	strd	r0, r1, [r6], #8
 8009a2e:	3501      	adds	r5, #1
 8009a30:	e7df      	b.n	80099f2 <__kernel_rem_pio2+0x5a>
 8009a32:	ec51 0b18 	vmov	r0, r1, d8
 8009a36:	e7f8      	b.n	8009a2a <__kernel_rem_pio2+0x92>
 8009a38:	e9d7 2300 	ldrd	r2, r3, [r7]
 8009a3c:	e8f9 0102 	ldrd	r0, r1, [r9], #8
 8009a40:	f7f6 fdfa 	bl	8000638 <__aeabi_dmul>
 8009a44:	4602      	mov	r2, r0
 8009a46:	460b      	mov	r3, r1
 8009a48:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8009a4c:	f7f6 fc3e 	bl	80002cc <__adddf3>
 8009a50:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8009a54:	3601      	adds	r6, #1
 8009a56:	9b05      	ldr	r3, [sp, #20]
 8009a58:	429e      	cmp	r6, r3
 8009a5a:	f1a7 0708 	sub.w	r7, r7, #8
 8009a5e:	ddeb      	ble.n	8009a38 <__kernel_rem_pio2+0xa0>
 8009a60:	ed9d 7b02 	vldr	d7, [sp, #8]
 8009a64:	f108 0801 	add.w	r8, r8, #1
 8009a68:	ecaa 7b02 	vstmia	sl!, {d7}
 8009a6c:	3508      	adds	r5, #8
 8009a6e:	e7ca      	b.n	8009a06 <__kernel_rem_pio2+0x6e>
 8009a70:	9b00      	ldr	r3, [sp, #0]
 8009a72:	f8dd 8000 	ldr.w	r8, [sp]
 8009a76:	aa0c      	add	r2, sp, #48	@ 0x30
 8009a78:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 8009a7c:	930a      	str	r3, [sp, #40]	@ 0x28
 8009a7e:	9ba5      	ldr	r3, [sp, #660]	@ 0x294
 8009a80:	eb03 0384 	add.w	r3, r3, r4, lsl #2
 8009a84:	9309      	str	r3, [sp, #36]	@ 0x24
 8009a86:	ea4f 03c8 	mov.w	r3, r8, lsl #3
 8009a8a:	930b      	str	r3, [sp, #44]	@ 0x2c
 8009a8c:	ab98      	add	r3, sp, #608	@ 0x260
 8009a8e:	eb03 03c8 	add.w	r3, r3, r8, lsl #3
 8009a92:	ed13 7b28 	vldr	d7, [r3, #-160]	@ 0xffffff60
 8009a96:	ed8d 7b02 	vstr	d7, [sp, #8]
 8009a9a:	ac0c      	add	r4, sp, #48	@ 0x30
 8009a9c:	ab70      	add	r3, sp, #448	@ 0x1c0
 8009a9e:	eb03 05c8 	add.w	r5, r3, r8, lsl #3
 8009aa2:	46a1      	mov	r9, r4
 8009aa4:	46c2      	mov	sl, r8
 8009aa6:	f1ba 0f00 	cmp.w	sl, #0
 8009aaa:	f1a5 0508 	sub.w	r5, r5, #8
 8009aae:	dc77      	bgt.n	8009ba0 <__kernel_rem_pio2+0x208>
 8009ab0:	4658      	mov	r0, fp
 8009ab2:	ed9d 0b02 	vldr	d0, [sp, #8]
 8009ab6:	f000 fac7 	bl	800a048 <scalbn>
 8009aba:	ec57 6b10 	vmov	r6, r7, d0
 8009abe:	2200      	movs	r2, #0
 8009ac0:	f04f 537f 	mov.w	r3, #1069547520	@ 0x3fc00000
 8009ac4:	4630      	mov	r0, r6
 8009ac6:	4639      	mov	r1, r7
 8009ac8:	f7f6 fdb6 	bl	8000638 <__aeabi_dmul>
 8009acc:	ec41 0b10 	vmov	d0, r0, r1
 8009ad0:	f000 fb3a 	bl	800a148 <floor>
 8009ad4:	4b75      	ldr	r3, [pc, #468]	@ (8009cac <__kernel_rem_pio2+0x314>)
 8009ad6:	ec51 0b10 	vmov	r0, r1, d0
 8009ada:	2200      	movs	r2, #0
 8009adc:	f7f6 fdac 	bl	8000638 <__aeabi_dmul>
 8009ae0:	4602      	mov	r2, r0
 8009ae2:	460b      	mov	r3, r1
 8009ae4:	4630      	mov	r0, r6
 8009ae6:	4639      	mov	r1, r7
 8009ae8:	f7f6 fbee 	bl	80002c8 <__aeabi_dsub>
 8009aec:	460f      	mov	r7, r1
 8009aee:	4606      	mov	r6, r0
 8009af0:	f7f7 f852 	bl	8000b98 <__aeabi_d2iz>
 8009af4:	9002      	str	r0, [sp, #8]
 8009af6:	f7f6 fd35 	bl	8000564 <__aeabi_i2d>
 8009afa:	4602      	mov	r2, r0
 8009afc:	460b      	mov	r3, r1
 8009afe:	4630      	mov	r0, r6
 8009b00:	4639      	mov	r1, r7
 8009b02:	f7f6 fbe1 	bl	80002c8 <__aeabi_dsub>
 8009b06:	f1bb 0f00 	cmp.w	fp, #0
 8009b0a:	4606      	mov	r6, r0
 8009b0c:	460f      	mov	r7, r1
 8009b0e:	dd6c      	ble.n	8009bea <__kernel_rem_pio2+0x252>
 8009b10:	f108 31ff 	add.w	r1, r8, #4294967295
 8009b14:	ab0c      	add	r3, sp, #48	@ 0x30
 8009b16:	9d02      	ldr	r5, [sp, #8]
 8009b18:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 8009b1c:	f1cb 0018 	rsb	r0, fp, #24
 8009b20:	fa43 f200 	asr.w	r2, r3, r0
 8009b24:	4415      	add	r5, r2
 8009b26:	4082      	lsls	r2, r0
 8009b28:	1a9b      	subs	r3, r3, r2
 8009b2a:	aa0c      	add	r2, sp, #48	@ 0x30
 8009b2c:	9502      	str	r5, [sp, #8]
 8009b2e:	f842 3021 	str.w	r3, [r2, r1, lsl #2]
 8009b32:	f1cb 0217 	rsb	r2, fp, #23
 8009b36:	fa43 f902 	asr.w	r9, r3, r2
 8009b3a:	f1b9 0f00 	cmp.w	r9, #0
 8009b3e:	dd64      	ble.n	8009c0a <__kernel_rem_pio2+0x272>
 8009b40:	9b02      	ldr	r3, [sp, #8]
 8009b42:	2200      	movs	r2, #0
 8009b44:	3301      	adds	r3, #1
 8009b46:	9302      	str	r3, [sp, #8]
 8009b48:	4615      	mov	r5, r2
 8009b4a:	f06f 417f 	mvn.w	r1, #4278190080	@ 0xff000000
 8009b4e:	4590      	cmp	r8, r2
 8009b50:	f300 80b8 	bgt.w	8009cc4 <__kernel_rem_pio2+0x32c>
 8009b54:	f1bb 0f00 	cmp.w	fp, #0
 8009b58:	dd07      	ble.n	8009b6a <__kernel_rem_pio2+0x1d2>
 8009b5a:	f1bb 0f01 	cmp.w	fp, #1
 8009b5e:	f000 80bf 	beq.w	8009ce0 <__kernel_rem_pio2+0x348>
 8009b62:	f1bb 0f02 	cmp.w	fp, #2
 8009b66:	f000 80c6 	beq.w	8009cf6 <__kernel_rem_pio2+0x35e>
 8009b6a:	f1b9 0f02 	cmp.w	r9, #2
 8009b6e:	d14c      	bne.n	8009c0a <__kernel_rem_pio2+0x272>
 8009b70:	4632      	mov	r2, r6
 8009b72:	463b      	mov	r3, r7
 8009b74:	494e      	ldr	r1, [pc, #312]	@ (8009cb0 <__kernel_rem_pio2+0x318>)
 8009b76:	2000      	movs	r0, #0
 8009b78:	f7f6 fba6 	bl	80002c8 <__aeabi_dsub>
 8009b7c:	4606      	mov	r6, r0
 8009b7e:	460f      	mov	r7, r1
 8009b80:	2d00      	cmp	r5, #0
 8009b82:	d042      	beq.n	8009c0a <__kernel_rem_pio2+0x272>
 8009b84:	4658      	mov	r0, fp
 8009b86:	ed9f 0b46 	vldr	d0, [pc, #280]	@ 8009ca0 <__kernel_rem_pio2+0x308>
 8009b8a:	f000 fa5d 	bl	800a048 <scalbn>
 8009b8e:	4630      	mov	r0, r6
 8009b90:	4639      	mov	r1, r7
 8009b92:	ec53 2b10 	vmov	r2, r3, d0
 8009b96:	f7f6 fb97 	bl	80002c8 <__aeabi_dsub>
 8009b9a:	4606      	mov	r6, r0
 8009b9c:	460f      	mov	r7, r1
 8009b9e:	e034      	b.n	8009c0a <__kernel_rem_pio2+0x272>
 8009ba0:	4b44      	ldr	r3, [pc, #272]	@ (8009cb4 <__kernel_rem_pio2+0x31c>)
 8009ba2:	2200      	movs	r2, #0
 8009ba4:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8009ba8:	f7f6 fd46 	bl	8000638 <__aeabi_dmul>
 8009bac:	f7f6 fff4 	bl	8000b98 <__aeabi_d2iz>
 8009bb0:	f7f6 fcd8 	bl	8000564 <__aeabi_i2d>
 8009bb4:	4b40      	ldr	r3, [pc, #256]	@ (8009cb8 <__kernel_rem_pio2+0x320>)
 8009bb6:	2200      	movs	r2, #0
 8009bb8:	4606      	mov	r6, r0
 8009bba:	460f      	mov	r7, r1
 8009bbc:	f7f6 fd3c 	bl	8000638 <__aeabi_dmul>
 8009bc0:	4602      	mov	r2, r0
 8009bc2:	460b      	mov	r3, r1
 8009bc4:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8009bc8:	f7f6 fb7e 	bl	80002c8 <__aeabi_dsub>
 8009bcc:	f7f6 ffe4 	bl	8000b98 <__aeabi_d2iz>
 8009bd0:	e9d5 2300 	ldrd	r2, r3, [r5]
 8009bd4:	f849 0b04 	str.w	r0, [r9], #4
 8009bd8:	4639      	mov	r1, r7
 8009bda:	4630      	mov	r0, r6
 8009bdc:	f7f6 fb76 	bl	80002cc <__adddf3>
 8009be0:	f10a 3aff 	add.w	sl, sl, #4294967295
 8009be4:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8009be8:	e75d      	b.n	8009aa6 <__kernel_rem_pio2+0x10e>
 8009bea:	d107      	bne.n	8009bfc <__kernel_rem_pio2+0x264>
 8009bec:	f108 33ff 	add.w	r3, r8, #4294967295
 8009bf0:	aa0c      	add	r2, sp, #48	@ 0x30
 8009bf2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8009bf6:	ea4f 59e3 	mov.w	r9, r3, asr #23
 8009bfa:	e79e      	b.n	8009b3a <__kernel_rem_pio2+0x1a2>
 8009bfc:	4b2f      	ldr	r3, [pc, #188]	@ (8009cbc <__kernel_rem_pio2+0x324>)
 8009bfe:	2200      	movs	r2, #0
 8009c00:	f7f6 ffa0 	bl	8000b44 <__aeabi_dcmpge>
 8009c04:	2800      	cmp	r0, #0
 8009c06:	d143      	bne.n	8009c90 <__kernel_rem_pio2+0x2f8>
 8009c08:	4681      	mov	r9, r0
 8009c0a:	2200      	movs	r2, #0
 8009c0c:	2300      	movs	r3, #0
 8009c0e:	4630      	mov	r0, r6
 8009c10:	4639      	mov	r1, r7
 8009c12:	f7f6 ff79 	bl	8000b08 <__aeabi_dcmpeq>
 8009c16:	2800      	cmp	r0, #0
 8009c18:	f000 80bf 	beq.w	8009d9a <__kernel_rem_pio2+0x402>
 8009c1c:	f108 33ff 	add.w	r3, r8, #4294967295
 8009c20:	2200      	movs	r2, #0
 8009c22:	9900      	ldr	r1, [sp, #0]
 8009c24:	428b      	cmp	r3, r1
 8009c26:	da6e      	bge.n	8009d06 <__kernel_rem_pio2+0x36e>
 8009c28:	2a00      	cmp	r2, #0
 8009c2a:	f000 8089 	beq.w	8009d40 <__kernel_rem_pio2+0x3a8>
 8009c2e:	f108 38ff 	add.w	r8, r8, #4294967295
 8009c32:	ab0c      	add	r3, sp, #48	@ 0x30
 8009c34:	f1ab 0b18 	sub.w	fp, fp, #24
 8009c38:	f853 3028 	ldr.w	r3, [r3, r8, lsl #2]
 8009c3c:	2b00      	cmp	r3, #0
 8009c3e:	d0f6      	beq.n	8009c2e <__kernel_rem_pio2+0x296>
 8009c40:	4658      	mov	r0, fp
 8009c42:	ed9f 0b17 	vldr	d0, [pc, #92]	@ 8009ca0 <__kernel_rem_pio2+0x308>
 8009c46:	f000 f9ff 	bl	800a048 <scalbn>
 8009c4a:	f108 0301 	add.w	r3, r8, #1
 8009c4e:	00da      	lsls	r2, r3, #3
 8009c50:	9205      	str	r2, [sp, #20]
 8009c52:	ec55 4b10 	vmov	r4, r5, d0
 8009c56:	aa70      	add	r2, sp, #448	@ 0x1c0
 8009c58:	f8df b058 	ldr.w	fp, [pc, #88]	@ 8009cb4 <__kernel_rem_pio2+0x31c>
 8009c5c:	eb02 07c3 	add.w	r7, r2, r3, lsl #3
 8009c60:	4646      	mov	r6, r8
 8009c62:	f04f 0a00 	mov.w	sl, #0
 8009c66:	2e00      	cmp	r6, #0
 8009c68:	f280 80cf 	bge.w	8009e0a <__kernel_rem_pio2+0x472>
 8009c6c:	4644      	mov	r4, r8
 8009c6e:	2c00      	cmp	r4, #0
 8009c70:	f2c0 80fd 	blt.w	8009e6e <__kernel_rem_pio2+0x4d6>
 8009c74:	4b12      	ldr	r3, [pc, #72]	@ (8009cc0 <__kernel_rem_pio2+0x328>)
 8009c76:	461f      	mov	r7, r3
 8009c78:	ab70      	add	r3, sp, #448	@ 0x1c0
 8009c7a:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 8009c7e:	9306      	str	r3, [sp, #24]
 8009c80:	f04f 0a00 	mov.w	sl, #0
 8009c84:	f04f 0b00 	mov.w	fp, #0
 8009c88:	2600      	movs	r6, #0
 8009c8a:	eba8 0504 	sub.w	r5, r8, r4
 8009c8e:	e0e2      	b.n	8009e56 <__kernel_rem_pio2+0x4be>
 8009c90:	f04f 0902 	mov.w	r9, #2
 8009c94:	e754      	b.n	8009b40 <__kernel_rem_pio2+0x1a8>
 8009c96:	bf00      	nop
	...
 8009ca4:	3ff00000 	.word	0x3ff00000
 8009ca8:	0800a870 	.word	0x0800a870
 8009cac:	40200000 	.word	0x40200000
 8009cb0:	3ff00000 	.word	0x3ff00000
 8009cb4:	3e700000 	.word	0x3e700000
 8009cb8:	41700000 	.word	0x41700000
 8009cbc:	3fe00000 	.word	0x3fe00000
 8009cc0:	0800a830 	.word	0x0800a830
 8009cc4:	f854 3b04 	ldr.w	r3, [r4], #4
 8009cc8:	b945      	cbnz	r5, 8009cdc <__kernel_rem_pio2+0x344>
 8009cca:	b123      	cbz	r3, 8009cd6 <__kernel_rem_pio2+0x33e>
 8009ccc:	f1c3 7380 	rsb	r3, r3, #16777216	@ 0x1000000
 8009cd0:	f844 3c04 	str.w	r3, [r4, #-4]
 8009cd4:	2301      	movs	r3, #1
 8009cd6:	3201      	adds	r2, #1
 8009cd8:	461d      	mov	r5, r3
 8009cda:	e738      	b.n	8009b4e <__kernel_rem_pio2+0x1b6>
 8009cdc:	1acb      	subs	r3, r1, r3
 8009cde:	e7f7      	b.n	8009cd0 <__kernel_rem_pio2+0x338>
 8009ce0:	f108 32ff 	add.w	r2, r8, #4294967295
 8009ce4:	ab0c      	add	r3, sp, #48	@ 0x30
 8009ce6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8009cea:	f3c3 0316 	ubfx	r3, r3, #0, #23
 8009cee:	a90c      	add	r1, sp, #48	@ 0x30
 8009cf0:	f841 3022 	str.w	r3, [r1, r2, lsl #2]
 8009cf4:	e739      	b.n	8009b6a <__kernel_rem_pio2+0x1d2>
 8009cf6:	f108 32ff 	add.w	r2, r8, #4294967295
 8009cfa:	ab0c      	add	r3, sp, #48	@ 0x30
 8009cfc:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8009d00:	f3c3 0315 	ubfx	r3, r3, #0, #22
 8009d04:	e7f3      	b.n	8009cee <__kernel_rem_pio2+0x356>
 8009d06:	a90c      	add	r1, sp, #48	@ 0x30
 8009d08:	f851 1023 	ldr.w	r1, [r1, r3, lsl #2]
 8009d0c:	3b01      	subs	r3, #1
 8009d0e:	430a      	orrs	r2, r1
 8009d10:	e787      	b.n	8009c22 <__kernel_rem_pio2+0x28a>
 8009d12:	3401      	adds	r4, #1
 8009d14:	f853 2d04 	ldr.w	r2, [r3, #-4]!
 8009d18:	2a00      	cmp	r2, #0
 8009d1a:	d0fa      	beq.n	8009d12 <__kernel_rem_pio2+0x37a>
 8009d1c:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8009d1e:	f503 7318 	add.w	r3, r3, #608	@ 0x260
 8009d22:	eb0d 0503 	add.w	r5, sp, r3
 8009d26:	9b06      	ldr	r3, [sp, #24]
 8009d28:	aa20      	add	r2, sp, #128	@ 0x80
 8009d2a:	4443      	add	r3, r8
 8009d2c:	f108 0701 	add.w	r7, r8, #1
 8009d30:	3d98      	subs	r5, #152	@ 0x98
 8009d32:	eb02 06c3 	add.w	r6, r2, r3, lsl #3
 8009d36:	4444      	add	r4, r8
 8009d38:	42bc      	cmp	r4, r7
 8009d3a:	da04      	bge.n	8009d46 <__kernel_rem_pio2+0x3ae>
 8009d3c:	46a0      	mov	r8, r4
 8009d3e:	e6a2      	b.n	8009a86 <__kernel_rem_pio2+0xee>
 8009d40:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8009d42:	2401      	movs	r4, #1
 8009d44:	e7e6      	b.n	8009d14 <__kernel_rem_pio2+0x37c>
 8009d46:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8009d48:	f853 0027 	ldr.w	r0, [r3, r7, lsl #2]
 8009d4c:	f7f6 fc0a 	bl	8000564 <__aeabi_i2d>
 8009d50:	ed9f 7bb1 	vldr	d7, [pc, #708]	@ 800a018 <__kernel_rem_pio2+0x680>
 8009d54:	e8e6 0102 	strd	r0, r1, [r6], #8
 8009d58:	ed8d 7b02 	vstr	d7, [sp, #8]
 8009d5c:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8009d60:	46b2      	mov	sl, r6
 8009d62:	f04f 0800 	mov.w	r8, #0
 8009d66:	9b05      	ldr	r3, [sp, #20]
 8009d68:	4598      	cmp	r8, r3
 8009d6a:	dd05      	ble.n	8009d78 <__kernel_rem_pio2+0x3e0>
 8009d6c:	ed9d 7b02 	vldr	d7, [sp, #8]
 8009d70:	3701      	adds	r7, #1
 8009d72:	eca5 7b02 	vstmia	r5!, {d7}
 8009d76:	e7df      	b.n	8009d38 <__kernel_rem_pio2+0x3a0>
 8009d78:	e97a 2302 	ldrd	r2, r3, [sl, #-8]!
 8009d7c:	e8f9 0102 	ldrd	r0, r1, [r9], #8
 8009d80:	f7f6 fc5a 	bl	8000638 <__aeabi_dmul>
 8009d84:	4602      	mov	r2, r0
 8009d86:	460b      	mov	r3, r1
 8009d88:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8009d8c:	f7f6 fa9e 	bl	80002cc <__adddf3>
 8009d90:	f108 0801 	add.w	r8, r8, #1
 8009d94:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8009d98:	e7e5      	b.n	8009d66 <__kernel_rem_pio2+0x3ce>
 8009d9a:	f1cb 0000 	rsb	r0, fp, #0
 8009d9e:	ec47 6b10 	vmov	d0, r6, r7
 8009da2:	f000 f951 	bl	800a048 <scalbn>
 8009da6:	ec55 4b10 	vmov	r4, r5, d0
 8009daa:	4b9d      	ldr	r3, [pc, #628]	@ (800a020 <__kernel_rem_pio2+0x688>)
 8009dac:	2200      	movs	r2, #0
 8009dae:	4620      	mov	r0, r4
 8009db0:	4629      	mov	r1, r5
 8009db2:	f7f6 fec7 	bl	8000b44 <__aeabi_dcmpge>
 8009db6:	b300      	cbz	r0, 8009dfa <__kernel_rem_pio2+0x462>
 8009db8:	4b9a      	ldr	r3, [pc, #616]	@ (800a024 <__kernel_rem_pio2+0x68c>)
 8009dba:	2200      	movs	r2, #0
 8009dbc:	4620      	mov	r0, r4
 8009dbe:	4629      	mov	r1, r5
 8009dc0:	f7f6 fc3a 	bl	8000638 <__aeabi_dmul>
 8009dc4:	f7f6 fee8 	bl	8000b98 <__aeabi_d2iz>
 8009dc8:	4606      	mov	r6, r0
 8009dca:	f7f6 fbcb 	bl	8000564 <__aeabi_i2d>
 8009dce:	4b94      	ldr	r3, [pc, #592]	@ (800a020 <__kernel_rem_pio2+0x688>)
 8009dd0:	2200      	movs	r2, #0
 8009dd2:	f7f6 fc31 	bl	8000638 <__aeabi_dmul>
 8009dd6:	460b      	mov	r3, r1
 8009dd8:	4602      	mov	r2, r0
 8009dda:	4629      	mov	r1, r5
 8009ddc:	4620      	mov	r0, r4
 8009dde:	f7f6 fa73 	bl	80002c8 <__aeabi_dsub>
 8009de2:	f7f6 fed9 	bl	8000b98 <__aeabi_d2iz>
 8009de6:	ab0c      	add	r3, sp, #48	@ 0x30
 8009de8:	f10b 0b18 	add.w	fp, fp, #24
 8009dec:	f843 0028 	str.w	r0, [r3, r8, lsl #2]
 8009df0:	f108 0801 	add.w	r8, r8, #1
 8009df4:	f843 6028 	str.w	r6, [r3, r8, lsl #2]
 8009df8:	e722      	b.n	8009c40 <__kernel_rem_pio2+0x2a8>
 8009dfa:	4620      	mov	r0, r4
 8009dfc:	4629      	mov	r1, r5
 8009dfe:	f7f6 fecb 	bl	8000b98 <__aeabi_d2iz>
 8009e02:	ab0c      	add	r3, sp, #48	@ 0x30
 8009e04:	f843 0028 	str.w	r0, [r3, r8, lsl #2]
 8009e08:	e71a      	b.n	8009c40 <__kernel_rem_pio2+0x2a8>
 8009e0a:	ab0c      	add	r3, sp, #48	@ 0x30
 8009e0c:	f853 0026 	ldr.w	r0, [r3, r6, lsl #2]
 8009e10:	f7f6 fba8 	bl	8000564 <__aeabi_i2d>
 8009e14:	4622      	mov	r2, r4
 8009e16:	462b      	mov	r3, r5
 8009e18:	f7f6 fc0e 	bl	8000638 <__aeabi_dmul>
 8009e1c:	4652      	mov	r2, sl
 8009e1e:	e967 0102 	strd	r0, r1, [r7, #-8]!
 8009e22:	465b      	mov	r3, fp
 8009e24:	4620      	mov	r0, r4
 8009e26:	4629      	mov	r1, r5
 8009e28:	f7f6 fc06 	bl	8000638 <__aeabi_dmul>
 8009e2c:	3e01      	subs	r6, #1
 8009e2e:	4604      	mov	r4, r0
 8009e30:	460d      	mov	r5, r1
 8009e32:	e718      	b.n	8009c66 <__kernel_rem_pio2+0x2ce>
 8009e34:	9906      	ldr	r1, [sp, #24]
 8009e36:	e8f1 2302 	ldrd	r2, r3, [r1], #8
 8009e3a:	9106      	str	r1, [sp, #24]
 8009e3c:	e8f7 0102 	ldrd	r0, r1, [r7], #8
 8009e40:	f7f6 fbfa 	bl	8000638 <__aeabi_dmul>
 8009e44:	4602      	mov	r2, r0
 8009e46:	460b      	mov	r3, r1
 8009e48:	4650      	mov	r0, sl
 8009e4a:	4659      	mov	r1, fp
 8009e4c:	f7f6 fa3e 	bl	80002cc <__adddf3>
 8009e50:	3601      	adds	r6, #1
 8009e52:	4682      	mov	sl, r0
 8009e54:	468b      	mov	fp, r1
 8009e56:	9b00      	ldr	r3, [sp, #0]
 8009e58:	429e      	cmp	r6, r3
 8009e5a:	dc01      	bgt.n	8009e60 <__kernel_rem_pio2+0x4c8>
 8009e5c:	42b5      	cmp	r5, r6
 8009e5e:	dae9      	bge.n	8009e34 <__kernel_rem_pio2+0x49c>
 8009e60:	ab48      	add	r3, sp, #288	@ 0x120
 8009e62:	eb03 05c5 	add.w	r5, r3, r5, lsl #3
 8009e66:	e9c5 ab00 	strd	sl, fp, [r5]
 8009e6a:	3c01      	subs	r4, #1
 8009e6c:	e6ff      	b.n	8009c6e <__kernel_rem_pio2+0x2d6>
 8009e6e:	9ba4      	ldr	r3, [sp, #656]	@ 0x290
 8009e70:	2b02      	cmp	r3, #2
 8009e72:	dc0b      	bgt.n	8009e8c <__kernel_rem_pio2+0x4f4>
 8009e74:	2b00      	cmp	r3, #0
 8009e76:	dc39      	bgt.n	8009eec <__kernel_rem_pio2+0x554>
 8009e78:	d05d      	beq.n	8009f36 <__kernel_rem_pio2+0x59e>
 8009e7a:	9b02      	ldr	r3, [sp, #8]
 8009e7c:	f003 0007 	and.w	r0, r3, #7
 8009e80:	f50d 7d19 	add.w	sp, sp, #612	@ 0x264
 8009e84:	ecbd 8b02 	vpop	{d8}
 8009e88:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009e8c:	9ba4      	ldr	r3, [sp, #656]	@ 0x290
 8009e8e:	2b03      	cmp	r3, #3
 8009e90:	d1f3      	bne.n	8009e7a <__kernel_rem_pio2+0x4e2>
 8009e92:	9b05      	ldr	r3, [sp, #20]
 8009e94:	f503 7318 	add.w	r3, r3, #608	@ 0x260
 8009e98:	eb0d 0403 	add.w	r4, sp, r3
 8009e9c:	f5a4 74a4 	sub.w	r4, r4, #328	@ 0x148
 8009ea0:	4625      	mov	r5, r4
 8009ea2:	46c2      	mov	sl, r8
 8009ea4:	f1ba 0f00 	cmp.w	sl, #0
 8009ea8:	f1a5 0508 	sub.w	r5, r5, #8
 8009eac:	dc6b      	bgt.n	8009f86 <__kernel_rem_pio2+0x5ee>
 8009eae:	4645      	mov	r5, r8
 8009eb0:	2d01      	cmp	r5, #1
 8009eb2:	f1a4 0408 	sub.w	r4, r4, #8
 8009eb6:	f300 8087 	bgt.w	8009fc8 <__kernel_rem_pio2+0x630>
 8009eba:	9c05      	ldr	r4, [sp, #20]
 8009ebc:	ab48      	add	r3, sp, #288	@ 0x120
 8009ebe:	441c      	add	r4, r3
 8009ec0:	2000      	movs	r0, #0
 8009ec2:	2100      	movs	r1, #0
 8009ec4:	f1b8 0f01 	cmp.w	r8, #1
 8009ec8:	f300 809c 	bgt.w	800a004 <__kernel_rem_pio2+0x66c>
 8009ecc:	e9dd 7848 	ldrd	r7, r8, [sp, #288]	@ 0x120
 8009ed0:	e9dd 564a 	ldrd	r5, r6, [sp, #296]	@ 0x128
 8009ed4:	f1b9 0f00 	cmp.w	r9, #0
 8009ed8:	f040 80a6 	bne.w	800a028 <__kernel_rem_pio2+0x690>
 8009edc:	9b04      	ldr	r3, [sp, #16]
 8009ede:	e9c3 7800 	strd	r7, r8, [r3]
 8009ee2:	e9c3 5602 	strd	r5, r6, [r3, #8]
 8009ee6:	e9c3 0104 	strd	r0, r1, [r3, #16]
 8009eea:	e7c6      	b.n	8009e7a <__kernel_rem_pio2+0x4e2>
 8009eec:	9d05      	ldr	r5, [sp, #20]
 8009eee:	ab48      	add	r3, sp, #288	@ 0x120
 8009ef0:	441d      	add	r5, r3
 8009ef2:	4644      	mov	r4, r8
 8009ef4:	2000      	movs	r0, #0
 8009ef6:	2100      	movs	r1, #0
 8009ef8:	2c00      	cmp	r4, #0
 8009efa:	da35      	bge.n	8009f68 <__kernel_rem_pio2+0x5d0>
 8009efc:	f1b9 0f00 	cmp.w	r9, #0
 8009f00:	d038      	beq.n	8009f74 <__kernel_rem_pio2+0x5dc>
 8009f02:	4602      	mov	r2, r0
 8009f04:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 8009f08:	9c04      	ldr	r4, [sp, #16]
 8009f0a:	e9c4 2300 	strd	r2, r3, [r4]
 8009f0e:	4602      	mov	r2, r0
 8009f10:	460b      	mov	r3, r1
 8009f12:	e9dd 0148 	ldrd	r0, r1, [sp, #288]	@ 0x120
 8009f16:	f7f6 f9d7 	bl	80002c8 <__aeabi_dsub>
 8009f1a:	ad4a      	add	r5, sp, #296	@ 0x128
 8009f1c:	2401      	movs	r4, #1
 8009f1e:	45a0      	cmp	r8, r4
 8009f20:	da2b      	bge.n	8009f7a <__kernel_rem_pio2+0x5e2>
 8009f22:	f1b9 0f00 	cmp.w	r9, #0
 8009f26:	d002      	beq.n	8009f2e <__kernel_rem_pio2+0x596>
 8009f28:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 8009f2c:	4619      	mov	r1, r3
 8009f2e:	9b04      	ldr	r3, [sp, #16]
 8009f30:	e9c3 0102 	strd	r0, r1, [r3, #8]
 8009f34:	e7a1      	b.n	8009e7a <__kernel_rem_pio2+0x4e2>
 8009f36:	9c05      	ldr	r4, [sp, #20]
 8009f38:	ab48      	add	r3, sp, #288	@ 0x120
 8009f3a:	441c      	add	r4, r3
 8009f3c:	2000      	movs	r0, #0
 8009f3e:	2100      	movs	r1, #0
 8009f40:	f1b8 0f00 	cmp.w	r8, #0
 8009f44:	da09      	bge.n	8009f5a <__kernel_rem_pio2+0x5c2>
 8009f46:	f1b9 0f00 	cmp.w	r9, #0
 8009f4a:	d002      	beq.n	8009f52 <__kernel_rem_pio2+0x5ba>
 8009f4c:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 8009f50:	4619      	mov	r1, r3
 8009f52:	9b04      	ldr	r3, [sp, #16]
 8009f54:	e9c3 0100 	strd	r0, r1, [r3]
 8009f58:	e78f      	b.n	8009e7a <__kernel_rem_pio2+0x4e2>
 8009f5a:	e974 2302 	ldrd	r2, r3, [r4, #-8]!
 8009f5e:	f7f6 f9b5 	bl	80002cc <__adddf3>
 8009f62:	f108 38ff 	add.w	r8, r8, #4294967295
 8009f66:	e7eb      	b.n	8009f40 <__kernel_rem_pio2+0x5a8>
 8009f68:	e975 2302 	ldrd	r2, r3, [r5, #-8]!
 8009f6c:	f7f6 f9ae 	bl	80002cc <__adddf3>
 8009f70:	3c01      	subs	r4, #1
 8009f72:	e7c1      	b.n	8009ef8 <__kernel_rem_pio2+0x560>
 8009f74:	4602      	mov	r2, r0
 8009f76:	460b      	mov	r3, r1
 8009f78:	e7c6      	b.n	8009f08 <__kernel_rem_pio2+0x570>
 8009f7a:	e8f5 2302 	ldrd	r2, r3, [r5], #8
 8009f7e:	f7f6 f9a5 	bl	80002cc <__adddf3>
 8009f82:	3401      	adds	r4, #1
 8009f84:	e7cb      	b.n	8009f1e <__kernel_rem_pio2+0x586>
 8009f86:	ed95 7b00 	vldr	d7, [r5]
 8009f8a:	ed8d 7b00 	vstr	d7, [sp]
 8009f8e:	ed95 7b02 	vldr	d7, [r5, #8]
 8009f92:	e9dd 0100 	ldrd	r0, r1, [sp]
 8009f96:	ec53 2b17 	vmov	r2, r3, d7
 8009f9a:	ed8d 7b06 	vstr	d7, [sp, #24]
 8009f9e:	f7f6 f995 	bl	80002cc <__adddf3>
 8009fa2:	4602      	mov	r2, r0
 8009fa4:	460b      	mov	r3, r1
 8009fa6:	4606      	mov	r6, r0
 8009fa8:	460f      	mov	r7, r1
 8009faa:	e9dd 0100 	ldrd	r0, r1, [sp]
 8009fae:	f7f6 f98b 	bl	80002c8 <__aeabi_dsub>
 8009fb2:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8009fb6:	f7f6 f989 	bl	80002cc <__adddf3>
 8009fba:	f10a 3aff 	add.w	sl, sl, #4294967295
 8009fbe:	e9c5 0102 	strd	r0, r1, [r5, #8]
 8009fc2:	e9c5 6700 	strd	r6, r7, [r5]
 8009fc6:	e76d      	b.n	8009ea4 <__kernel_rem_pio2+0x50c>
 8009fc8:	ed94 7b00 	vldr	d7, [r4]
 8009fcc:	e9d4 ab02 	ldrd	sl, fp, [r4, #8]
 8009fd0:	ec51 0b17 	vmov	r0, r1, d7
 8009fd4:	4652      	mov	r2, sl
 8009fd6:	465b      	mov	r3, fp
 8009fd8:	ed8d 7b00 	vstr	d7, [sp]
 8009fdc:	f7f6 f976 	bl	80002cc <__adddf3>
 8009fe0:	4602      	mov	r2, r0
 8009fe2:	460b      	mov	r3, r1
 8009fe4:	4606      	mov	r6, r0
 8009fe6:	460f      	mov	r7, r1
 8009fe8:	e9dd 0100 	ldrd	r0, r1, [sp]
 8009fec:	f7f6 f96c 	bl	80002c8 <__aeabi_dsub>
 8009ff0:	4652      	mov	r2, sl
 8009ff2:	465b      	mov	r3, fp
 8009ff4:	f7f6 f96a 	bl	80002cc <__adddf3>
 8009ff8:	3d01      	subs	r5, #1
 8009ffa:	e9c4 0102 	strd	r0, r1, [r4, #8]
 8009ffe:	e9c4 6700 	strd	r6, r7, [r4]
 800a002:	e755      	b.n	8009eb0 <__kernel_rem_pio2+0x518>
 800a004:	e974 2302 	ldrd	r2, r3, [r4, #-8]!
 800a008:	f7f6 f960 	bl	80002cc <__adddf3>
 800a00c:	f108 38ff 	add.w	r8, r8, #4294967295
 800a010:	e758      	b.n	8009ec4 <__kernel_rem_pio2+0x52c>
 800a012:	bf00      	nop
 800a014:	f3af 8000 	nop.w
	...
 800a020:	41700000 	.word	0x41700000
 800a024:	3e700000 	.word	0x3e700000
 800a028:	9b04      	ldr	r3, [sp, #16]
 800a02a:	9a04      	ldr	r2, [sp, #16]
 800a02c:	601f      	str	r7, [r3, #0]
 800a02e:	f108 4400 	add.w	r4, r8, #2147483648	@ 0x80000000
 800a032:	605c      	str	r4, [r3, #4]
 800a034:	609d      	str	r5, [r3, #8]
 800a036:	f106 4300 	add.w	r3, r6, #2147483648	@ 0x80000000
 800a03a:	60d3      	str	r3, [r2, #12]
 800a03c:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 800a040:	6110      	str	r0, [r2, #16]
 800a042:	6153      	str	r3, [r2, #20]
 800a044:	e719      	b.n	8009e7a <__kernel_rem_pio2+0x4e2>
 800a046:	bf00      	nop

0800a048 <scalbn>:
 800a048:	b570      	push	{r4, r5, r6, lr}
 800a04a:	ec55 4b10 	vmov	r4, r5, d0
 800a04e:	f3c5 510a 	ubfx	r1, r5, #20, #11
 800a052:	4606      	mov	r6, r0
 800a054:	462b      	mov	r3, r5
 800a056:	b991      	cbnz	r1, 800a07e <scalbn+0x36>
 800a058:	f025 4300 	bic.w	r3, r5, #2147483648	@ 0x80000000
 800a05c:	4323      	orrs	r3, r4
 800a05e:	d03d      	beq.n	800a0dc <scalbn+0x94>
 800a060:	4b35      	ldr	r3, [pc, #212]	@ (800a138 <scalbn+0xf0>)
 800a062:	4620      	mov	r0, r4
 800a064:	4629      	mov	r1, r5
 800a066:	2200      	movs	r2, #0
 800a068:	f7f6 fae6 	bl	8000638 <__aeabi_dmul>
 800a06c:	4b33      	ldr	r3, [pc, #204]	@ (800a13c <scalbn+0xf4>)
 800a06e:	429e      	cmp	r6, r3
 800a070:	4604      	mov	r4, r0
 800a072:	460d      	mov	r5, r1
 800a074:	da0f      	bge.n	800a096 <scalbn+0x4e>
 800a076:	a328      	add	r3, pc, #160	@ (adr r3, 800a118 <scalbn+0xd0>)
 800a078:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a07c:	e01e      	b.n	800a0bc <scalbn+0x74>
 800a07e:	f240 72ff 	movw	r2, #2047	@ 0x7ff
 800a082:	4291      	cmp	r1, r2
 800a084:	d10b      	bne.n	800a09e <scalbn+0x56>
 800a086:	4622      	mov	r2, r4
 800a088:	4620      	mov	r0, r4
 800a08a:	4629      	mov	r1, r5
 800a08c:	f7f6 f91e 	bl	80002cc <__adddf3>
 800a090:	4604      	mov	r4, r0
 800a092:	460d      	mov	r5, r1
 800a094:	e022      	b.n	800a0dc <scalbn+0x94>
 800a096:	460b      	mov	r3, r1
 800a098:	f3c1 510a 	ubfx	r1, r1, #20, #11
 800a09c:	3936      	subs	r1, #54	@ 0x36
 800a09e:	f24c 3250 	movw	r2, #50000	@ 0xc350
 800a0a2:	4296      	cmp	r6, r2
 800a0a4:	dd0d      	ble.n	800a0c2 <scalbn+0x7a>
 800a0a6:	2d00      	cmp	r5, #0
 800a0a8:	a11d      	add	r1, pc, #116	@ (adr r1, 800a120 <scalbn+0xd8>)
 800a0aa:	e9d1 0100 	ldrd	r0, r1, [r1]
 800a0ae:	da02      	bge.n	800a0b6 <scalbn+0x6e>
 800a0b0:	a11d      	add	r1, pc, #116	@ (adr r1, 800a128 <scalbn+0xe0>)
 800a0b2:	e9d1 0100 	ldrd	r0, r1, [r1]
 800a0b6:	a31a      	add	r3, pc, #104	@ (adr r3, 800a120 <scalbn+0xd8>)
 800a0b8:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a0bc:	f7f6 fabc 	bl	8000638 <__aeabi_dmul>
 800a0c0:	e7e6      	b.n	800a090 <scalbn+0x48>
 800a0c2:	1872      	adds	r2, r6, r1
 800a0c4:	f240 71fe 	movw	r1, #2046	@ 0x7fe
 800a0c8:	428a      	cmp	r2, r1
 800a0ca:	dcec      	bgt.n	800a0a6 <scalbn+0x5e>
 800a0cc:	2a00      	cmp	r2, #0
 800a0ce:	dd08      	ble.n	800a0e2 <scalbn+0x9a>
 800a0d0:	f023 43ff 	bic.w	r3, r3, #2139095040	@ 0x7f800000
 800a0d4:	f423 03e0 	bic.w	r3, r3, #7340032	@ 0x700000
 800a0d8:	ea43 5502 	orr.w	r5, r3, r2, lsl #20
 800a0dc:	ec45 4b10 	vmov	d0, r4, r5
 800a0e0:	bd70      	pop	{r4, r5, r6, pc}
 800a0e2:	f112 0f35 	cmn.w	r2, #53	@ 0x35
 800a0e6:	da08      	bge.n	800a0fa <scalbn+0xb2>
 800a0e8:	2d00      	cmp	r5, #0
 800a0ea:	a10b      	add	r1, pc, #44	@ (adr r1, 800a118 <scalbn+0xd0>)
 800a0ec:	e9d1 0100 	ldrd	r0, r1, [r1]
 800a0f0:	dac1      	bge.n	800a076 <scalbn+0x2e>
 800a0f2:	a10f      	add	r1, pc, #60	@ (adr r1, 800a130 <scalbn+0xe8>)
 800a0f4:	e9d1 0100 	ldrd	r0, r1, [r1]
 800a0f8:	e7bd      	b.n	800a076 <scalbn+0x2e>
 800a0fa:	f023 43ff 	bic.w	r3, r3, #2139095040	@ 0x7f800000
 800a0fe:	3236      	adds	r2, #54	@ 0x36
 800a100:	f423 03e0 	bic.w	r3, r3, #7340032	@ 0x700000
 800a104:	ea43 5502 	orr.w	r5, r3, r2, lsl #20
 800a108:	4620      	mov	r0, r4
 800a10a:	4b0d      	ldr	r3, [pc, #52]	@ (800a140 <scalbn+0xf8>)
 800a10c:	4629      	mov	r1, r5
 800a10e:	2200      	movs	r2, #0
 800a110:	e7d4      	b.n	800a0bc <scalbn+0x74>
 800a112:	bf00      	nop
 800a114:	f3af 8000 	nop.w
 800a118:	c2f8f359 	.word	0xc2f8f359
 800a11c:	01a56e1f 	.word	0x01a56e1f
 800a120:	8800759c 	.word	0x8800759c
 800a124:	7e37e43c 	.word	0x7e37e43c
 800a128:	8800759c 	.word	0x8800759c
 800a12c:	fe37e43c 	.word	0xfe37e43c
 800a130:	c2f8f359 	.word	0xc2f8f359
 800a134:	81a56e1f 	.word	0x81a56e1f
 800a138:	43500000 	.word	0x43500000
 800a13c:	ffff3cb0 	.word	0xffff3cb0
 800a140:	3c900000 	.word	0x3c900000
 800a144:	00000000 	.word	0x00000000

0800a148 <floor>:
 800a148:	ec51 0b10 	vmov	r0, r1, d0
 800a14c:	f3c1 530a 	ubfx	r3, r1, #20, #11
 800a150:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800a154:	f2a3 36ff 	subw	r6, r3, #1023	@ 0x3ff
 800a158:	2e13      	cmp	r6, #19
 800a15a:	460c      	mov	r4, r1
 800a15c:	4605      	mov	r5, r0
 800a15e:	4680      	mov	r8, r0
 800a160:	dc34      	bgt.n	800a1cc <floor+0x84>
 800a162:	2e00      	cmp	r6, #0
 800a164:	da17      	bge.n	800a196 <floor+0x4e>
 800a166:	a332      	add	r3, pc, #200	@ (adr r3, 800a230 <floor+0xe8>)
 800a168:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a16c:	f7f6 f8ae 	bl	80002cc <__adddf3>
 800a170:	2200      	movs	r2, #0
 800a172:	2300      	movs	r3, #0
 800a174:	f7f6 fcf0 	bl	8000b58 <__aeabi_dcmpgt>
 800a178:	b150      	cbz	r0, 800a190 <floor+0x48>
 800a17a:	2c00      	cmp	r4, #0
 800a17c:	da55      	bge.n	800a22a <floor+0xe2>
 800a17e:	f024 4400 	bic.w	r4, r4, #2147483648	@ 0x80000000
 800a182:	432c      	orrs	r4, r5
 800a184:	2500      	movs	r5, #0
 800a186:	42ac      	cmp	r4, r5
 800a188:	4c2b      	ldr	r4, [pc, #172]	@ (800a238 <floor+0xf0>)
 800a18a:	bf08      	it	eq
 800a18c:	f04f 4400 	moveq.w	r4, #2147483648	@ 0x80000000
 800a190:	4621      	mov	r1, r4
 800a192:	4628      	mov	r0, r5
 800a194:	e023      	b.n	800a1de <floor+0x96>
 800a196:	4f29      	ldr	r7, [pc, #164]	@ (800a23c <floor+0xf4>)
 800a198:	4137      	asrs	r7, r6
 800a19a:	ea01 0307 	and.w	r3, r1, r7
 800a19e:	4303      	orrs	r3, r0
 800a1a0:	d01d      	beq.n	800a1de <floor+0x96>
 800a1a2:	a323      	add	r3, pc, #140	@ (adr r3, 800a230 <floor+0xe8>)
 800a1a4:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a1a8:	f7f6 f890 	bl	80002cc <__adddf3>
 800a1ac:	2200      	movs	r2, #0
 800a1ae:	2300      	movs	r3, #0
 800a1b0:	f7f6 fcd2 	bl	8000b58 <__aeabi_dcmpgt>
 800a1b4:	2800      	cmp	r0, #0
 800a1b6:	d0eb      	beq.n	800a190 <floor+0x48>
 800a1b8:	2c00      	cmp	r4, #0
 800a1ba:	bfbe      	ittt	lt
 800a1bc:	f44f 1380 	movlt.w	r3, #1048576	@ 0x100000
 800a1c0:	4133      	asrlt	r3, r6
 800a1c2:	18e4      	addlt	r4, r4, r3
 800a1c4:	ea24 0407 	bic.w	r4, r4, r7
 800a1c8:	2500      	movs	r5, #0
 800a1ca:	e7e1      	b.n	800a190 <floor+0x48>
 800a1cc:	2e33      	cmp	r6, #51	@ 0x33
 800a1ce:	dd0a      	ble.n	800a1e6 <floor+0x9e>
 800a1d0:	f5b6 6f80 	cmp.w	r6, #1024	@ 0x400
 800a1d4:	d103      	bne.n	800a1de <floor+0x96>
 800a1d6:	4602      	mov	r2, r0
 800a1d8:	460b      	mov	r3, r1
 800a1da:	f7f6 f877 	bl	80002cc <__adddf3>
 800a1de:	ec41 0b10 	vmov	d0, r0, r1
 800a1e2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800a1e6:	f2a3 4313 	subw	r3, r3, #1043	@ 0x413
 800a1ea:	f04f 37ff 	mov.w	r7, #4294967295
 800a1ee:	40df      	lsrs	r7, r3
 800a1f0:	4207      	tst	r7, r0
 800a1f2:	d0f4      	beq.n	800a1de <floor+0x96>
 800a1f4:	a30e      	add	r3, pc, #56	@ (adr r3, 800a230 <floor+0xe8>)
 800a1f6:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a1fa:	f7f6 f867 	bl	80002cc <__adddf3>
 800a1fe:	2200      	movs	r2, #0
 800a200:	2300      	movs	r3, #0
 800a202:	f7f6 fca9 	bl	8000b58 <__aeabi_dcmpgt>
 800a206:	2800      	cmp	r0, #0
 800a208:	d0c2      	beq.n	800a190 <floor+0x48>
 800a20a:	2c00      	cmp	r4, #0
 800a20c:	da0a      	bge.n	800a224 <floor+0xdc>
 800a20e:	2e14      	cmp	r6, #20
 800a210:	d101      	bne.n	800a216 <floor+0xce>
 800a212:	3401      	adds	r4, #1
 800a214:	e006      	b.n	800a224 <floor+0xdc>
 800a216:	f1c6 0634 	rsb	r6, r6, #52	@ 0x34
 800a21a:	2301      	movs	r3, #1
 800a21c:	40b3      	lsls	r3, r6
 800a21e:	441d      	add	r5, r3
 800a220:	4545      	cmp	r5, r8
 800a222:	d3f6      	bcc.n	800a212 <floor+0xca>
 800a224:	ea25 0507 	bic.w	r5, r5, r7
 800a228:	e7b2      	b.n	800a190 <floor+0x48>
 800a22a:	2500      	movs	r5, #0
 800a22c:	462c      	mov	r4, r5
 800a22e:	e7af      	b.n	800a190 <floor+0x48>
 800a230:	8800759c 	.word	0x8800759c
 800a234:	7e37e43c 	.word	0x7e37e43c
 800a238:	bff00000 	.word	0xbff00000
 800a23c:	000fffff 	.word	0x000fffff

0800a240 <_init>:
 800a240:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a242:	bf00      	nop
 800a244:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800a246:	bc08      	pop	{r3}
 800a248:	469e      	mov	lr, r3
 800a24a:	4770      	bx	lr

0800a24c <_fini>:
 800a24c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a24e:	bf00      	nop
 800a250:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800a252:	bc08      	pop	{r3}
 800a254:	469e      	mov	lr, r3
 800a256:	4770      	bx	lr
=======
 8006350:	e106      	b.n	8006560 <UART_SetConfig+0x4d8>
 8006352:	bf00      	nop
 8006354:	40011000 	.word	0x40011000
 8006358:	40011400 	.word	0x40011400
 800635c:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8006360:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8006364:	2200      	movs	r2, #0
 8006366:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 800636a:	f8c7 20a4 	str.w	r2, [r7, #164]	@ 0xa4
 800636e:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	@ 0xa0
 8006372:	4642      	mov	r2, r8
 8006374:	464b      	mov	r3, r9
 8006376:	1891      	adds	r1, r2, r2
 8006378:	6239      	str	r1, [r7, #32]
 800637a:	415b      	adcs	r3, r3
 800637c:	627b      	str	r3, [r7, #36]	@ 0x24
 800637e:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8006382:	4641      	mov	r1, r8
 8006384:	1854      	adds	r4, r2, r1
 8006386:	4649      	mov	r1, r9
 8006388:	eb43 0501 	adc.w	r5, r3, r1
 800638c:	f04f 0200 	mov.w	r2, #0
 8006390:	f04f 0300 	mov.w	r3, #0
 8006394:	00eb      	lsls	r3, r5, #3
 8006396:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 800639a:	00e2      	lsls	r2, r4, #3
 800639c:	4614      	mov	r4, r2
 800639e:	461d      	mov	r5, r3
 80063a0:	4643      	mov	r3, r8
 80063a2:	18e3      	adds	r3, r4, r3
 80063a4:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 80063a8:	464b      	mov	r3, r9
 80063aa:	eb45 0303 	adc.w	r3, r5, r3
 80063ae:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 80063b2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80063b6:	685b      	ldr	r3, [r3, #4]
 80063b8:	2200      	movs	r2, #0
 80063ba:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 80063be:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 80063c2:	f04f 0200 	mov.w	r2, #0
 80063c6:	f04f 0300 	mov.w	r3, #0
 80063ca:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	@ 0x90
 80063ce:	4629      	mov	r1, r5
 80063d0:	008b      	lsls	r3, r1, #2
 80063d2:	4621      	mov	r1, r4
 80063d4:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80063d8:	4621      	mov	r1, r4
 80063da:	008a      	lsls	r2, r1, #2
 80063dc:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	@ 0x98
 80063e0:	f7fa fc52 	bl	8000c88 <__aeabi_uldivmod>
 80063e4:	4602      	mov	r2, r0
 80063e6:	460b      	mov	r3, r1
 80063e8:	4b60      	ldr	r3, [pc, #384]	@ (800656c <UART_SetConfig+0x4e4>)
 80063ea:	fba3 2302 	umull	r2, r3, r3, r2
 80063ee:	095b      	lsrs	r3, r3, #5
 80063f0:	011c      	lsls	r4, r3, #4
 80063f2:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80063f6:	2200      	movs	r2, #0
 80063f8:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 80063fc:	f8c7 208c 	str.w	r2, [r7, #140]	@ 0x8c
 8006400:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	@ 0x88
 8006404:	4642      	mov	r2, r8
 8006406:	464b      	mov	r3, r9
 8006408:	1891      	adds	r1, r2, r2
 800640a:	61b9      	str	r1, [r7, #24]
 800640c:	415b      	adcs	r3, r3
 800640e:	61fb      	str	r3, [r7, #28]
 8006410:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8006414:	4641      	mov	r1, r8
 8006416:	1851      	adds	r1, r2, r1
 8006418:	6139      	str	r1, [r7, #16]
 800641a:	4649      	mov	r1, r9
 800641c:	414b      	adcs	r3, r1
 800641e:	617b      	str	r3, [r7, #20]
 8006420:	f04f 0200 	mov.w	r2, #0
 8006424:	f04f 0300 	mov.w	r3, #0
 8006428:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 800642c:	4659      	mov	r1, fp
 800642e:	00cb      	lsls	r3, r1, #3
 8006430:	4651      	mov	r1, sl
 8006432:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8006436:	4651      	mov	r1, sl
 8006438:	00ca      	lsls	r2, r1, #3
 800643a:	4610      	mov	r0, r2
 800643c:	4619      	mov	r1, r3
 800643e:	4603      	mov	r3, r0
 8006440:	4642      	mov	r2, r8
 8006442:	189b      	adds	r3, r3, r2
 8006444:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8006448:	464b      	mov	r3, r9
 800644a:	460a      	mov	r2, r1
 800644c:	eb42 0303 	adc.w	r3, r2, r3
 8006450:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 8006454:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006458:	685b      	ldr	r3, [r3, #4]
 800645a:	2200      	movs	r2, #0
 800645c:	67bb      	str	r3, [r7, #120]	@ 0x78
 800645e:	67fa      	str	r2, [r7, #124]	@ 0x7c
 8006460:	f04f 0200 	mov.w	r2, #0
 8006464:	f04f 0300 	mov.w	r3, #0
 8006468:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	@ 0x78
 800646c:	4649      	mov	r1, r9
 800646e:	008b      	lsls	r3, r1, #2
 8006470:	4641      	mov	r1, r8
 8006472:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8006476:	4641      	mov	r1, r8
 8006478:	008a      	lsls	r2, r1, #2
 800647a:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	@ 0x80
 800647e:	f7fa fc03 	bl	8000c88 <__aeabi_uldivmod>
 8006482:	4602      	mov	r2, r0
 8006484:	460b      	mov	r3, r1
 8006486:	4611      	mov	r1, r2
 8006488:	4b38      	ldr	r3, [pc, #224]	@ (800656c <UART_SetConfig+0x4e4>)
 800648a:	fba3 2301 	umull	r2, r3, r3, r1
 800648e:	095b      	lsrs	r3, r3, #5
 8006490:	2264      	movs	r2, #100	@ 0x64
 8006492:	fb02 f303 	mul.w	r3, r2, r3
 8006496:	1acb      	subs	r3, r1, r3
 8006498:	011b      	lsls	r3, r3, #4
 800649a:	3332      	adds	r3, #50	@ 0x32
 800649c:	4a33      	ldr	r2, [pc, #204]	@ (800656c <UART_SetConfig+0x4e4>)
 800649e:	fba2 2303 	umull	r2, r3, r2, r3
 80064a2:	095b      	lsrs	r3, r3, #5
 80064a4:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 80064a8:	441c      	add	r4, r3
 80064aa:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80064ae:	2200      	movs	r2, #0
 80064b0:	673b      	str	r3, [r7, #112]	@ 0x70
 80064b2:	677a      	str	r2, [r7, #116]	@ 0x74
 80064b4:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	@ 0x70
 80064b8:	4642      	mov	r2, r8
 80064ba:	464b      	mov	r3, r9
 80064bc:	1891      	adds	r1, r2, r2
 80064be:	60b9      	str	r1, [r7, #8]
 80064c0:	415b      	adcs	r3, r3
 80064c2:	60fb      	str	r3, [r7, #12]
 80064c4:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 80064c8:	4641      	mov	r1, r8
 80064ca:	1851      	adds	r1, r2, r1
 80064cc:	6039      	str	r1, [r7, #0]
 80064ce:	4649      	mov	r1, r9
 80064d0:	414b      	adcs	r3, r1
 80064d2:	607b      	str	r3, [r7, #4]
 80064d4:	f04f 0200 	mov.w	r2, #0
 80064d8:	f04f 0300 	mov.w	r3, #0
 80064dc:	e9d7 ab00 	ldrd	sl, fp, [r7]
 80064e0:	4659      	mov	r1, fp
 80064e2:	00cb      	lsls	r3, r1, #3
 80064e4:	4651      	mov	r1, sl
 80064e6:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80064ea:	4651      	mov	r1, sl
 80064ec:	00ca      	lsls	r2, r1, #3
 80064ee:	4610      	mov	r0, r2
 80064f0:	4619      	mov	r1, r3
 80064f2:	4603      	mov	r3, r0
 80064f4:	4642      	mov	r2, r8
 80064f6:	189b      	adds	r3, r3, r2
 80064f8:	66bb      	str	r3, [r7, #104]	@ 0x68
 80064fa:	464b      	mov	r3, r9
 80064fc:	460a      	mov	r2, r1
 80064fe:	eb42 0303 	adc.w	r3, r2, r3
 8006502:	66fb      	str	r3, [r7, #108]	@ 0x6c
 8006504:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006508:	685b      	ldr	r3, [r3, #4]
 800650a:	2200      	movs	r2, #0
 800650c:	663b      	str	r3, [r7, #96]	@ 0x60
 800650e:	667a      	str	r2, [r7, #100]	@ 0x64
 8006510:	f04f 0200 	mov.w	r2, #0
 8006514:	f04f 0300 	mov.w	r3, #0
 8006518:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	@ 0x60
 800651c:	4649      	mov	r1, r9
 800651e:	008b      	lsls	r3, r1, #2
 8006520:	4641      	mov	r1, r8
 8006522:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8006526:	4641      	mov	r1, r8
 8006528:	008a      	lsls	r2, r1, #2
 800652a:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	@ 0x68
 800652e:	f7fa fbab 	bl	8000c88 <__aeabi_uldivmod>
 8006532:	4602      	mov	r2, r0
 8006534:	460b      	mov	r3, r1
 8006536:	4b0d      	ldr	r3, [pc, #52]	@ (800656c <UART_SetConfig+0x4e4>)
 8006538:	fba3 1302 	umull	r1, r3, r3, r2
 800653c:	095b      	lsrs	r3, r3, #5
 800653e:	2164      	movs	r1, #100	@ 0x64
 8006540:	fb01 f303 	mul.w	r3, r1, r3
 8006544:	1ad3      	subs	r3, r2, r3
 8006546:	011b      	lsls	r3, r3, #4
 8006548:	3332      	adds	r3, #50	@ 0x32
 800654a:	4a08      	ldr	r2, [pc, #32]	@ (800656c <UART_SetConfig+0x4e4>)
 800654c:	fba2 2303 	umull	r2, r3, r2, r3
 8006550:	095b      	lsrs	r3, r3, #5
 8006552:	f003 020f 	and.w	r2, r3, #15
 8006556:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800655a:	681b      	ldr	r3, [r3, #0]
 800655c:	4422      	add	r2, r4
 800655e:	609a      	str	r2, [r3, #8]
}
 8006560:	bf00      	nop
 8006562:	f507 7780 	add.w	r7, r7, #256	@ 0x100
 8006566:	46bd      	mov	sp, r7
 8006568:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800656c:	51eb851f 	.word	0x51eb851f

08006570 <__cvt>:
 8006570:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8006574:	ec57 6b10 	vmov	r6, r7, d0
 8006578:	2f00      	cmp	r7, #0
 800657a:	460c      	mov	r4, r1
 800657c:	4619      	mov	r1, r3
 800657e:	463b      	mov	r3, r7
 8006580:	bfbb      	ittet	lt
 8006582:	f107 4300 	addlt.w	r3, r7, #2147483648	@ 0x80000000
 8006586:	461f      	movlt	r7, r3
 8006588:	2300      	movge	r3, #0
 800658a:	232d      	movlt	r3, #45	@ 0x2d
 800658c:	700b      	strb	r3, [r1, #0]
 800658e:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8006590:	f8dd a030 	ldr.w	sl, [sp, #48]	@ 0x30
 8006594:	4691      	mov	r9, r2
 8006596:	f023 0820 	bic.w	r8, r3, #32
 800659a:	bfbc      	itt	lt
 800659c:	4632      	movlt	r2, r6
 800659e:	4616      	movlt	r6, r2
 80065a0:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 80065a4:	d005      	beq.n	80065b2 <__cvt+0x42>
 80065a6:	f1b8 0f45 	cmp.w	r8, #69	@ 0x45
 80065aa:	d100      	bne.n	80065ae <__cvt+0x3e>
 80065ac:	3401      	adds	r4, #1
 80065ae:	2102      	movs	r1, #2
 80065b0:	e000      	b.n	80065b4 <__cvt+0x44>
 80065b2:	2103      	movs	r1, #3
 80065b4:	ab03      	add	r3, sp, #12
 80065b6:	9301      	str	r3, [sp, #4]
 80065b8:	ab02      	add	r3, sp, #8
 80065ba:	9300      	str	r3, [sp, #0]
 80065bc:	ec47 6b10 	vmov	d0, r6, r7
 80065c0:	4653      	mov	r3, sl
 80065c2:	4622      	mov	r2, r4
 80065c4:	f000 fe80 	bl	80072c8 <_dtoa_r>
 80065c8:	f1b8 0f47 	cmp.w	r8, #71	@ 0x47
 80065cc:	4605      	mov	r5, r0
 80065ce:	d119      	bne.n	8006604 <__cvt+0x94>
 80065d0:	f019 0f01 	tst.w	r9, #1
 80065d4:	d00e      	beq.n	80065f4 <__cvt+0x84>
 80065d6:	eb00 0904 	add.w	r9, r0, r4
 80065da:	2200      	movs	r2, #0
 80065dc:	2300      	movs	r3, #0
 80065de:	4630      	mov	r0, r6
 80065e0:	4639      	mov	r1, r7
 80065e2:	f7fa fa91 	bl	8000b08 <__aeabi_dcmpeq>
 80065e6:	b108      	cbz	r0, 80065ec <__cvt+0x7c>
 80065e8:	f8cd 900c 	str.w	r9, [sp, #12]
 80065ec:	2230      	movs	r2, #48	@ 0x30
 80065ee:	9b03      	ldr	r3, [sp, #12]
 80065f0:	454b      	cmp	r3, r9
 80065f2:	d31e      	bcc.n	8006632 <__cvt+0xc2>
 80065f4:	9b03      	ldr	r3, [sp, #12]
 80065f6:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 80065f8:	1b5b      	subs	r3, r3, r5
 80065fa:	4628      	mov	r0, r5
 80065fc:	6013      	str	r3, [r2, #0]
 80065fe:	b004      	add	sp, #16
 8006600:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006604:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 8006608:	eb00 0904 	add.w	r9, r0, r4
 800660c:	d1e5      	bne.n	80065da <__cvt+0x6a>
 800660e:	7803      	ldrb	r3, [r0, #0]
 8006610:	2b30      	cmp	r3, #48	@ 0x30
 8006612:	d10a      	bne.n	800662a <__cvt+0xba>
 8006614:	2200      	movs	r2, #0
 8006616:	2300      	movs	r3, #0
 8006618:	4630      	mov	r0, r6
 800661a:	4639      	mov	r1, r7
 800661c:	f7fa fa74 	bl	8000b08 <__aeabi_dcmpeq>
 8006620:	b918      	cbnz	r0, 800662a <__cvt+0xba>
 8006622:	f1c4 0401 	rsb	r4, r4, #1
 8006626:	f8ca 4000 	str.w	r4, [sl]
 800662a:	f8da 3000 	ldr.w	r3, [sl]
 800662e:	4499      	add	r9, r3
 8006630:	e7d3      	b.n	80065da <__cvt+0x6a>
 8006632:	1c59      	adds	r1, r3, #1
 8006634:	9103      	str	r1, [sp, #12]
 8006636:	701a      	strb	r2, [r3, #0]
 8006638:	e7d9      	b.n	80065ee <__cvt+0x7e>

0800663a <__exponent>:
 800663a:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800663c:	2900      	cmp	r1, #0
 800663e:	bfba      	itte	lt
 8006640:	4249      	neglt	r1, r1
 8006642:	232d      	movlt	r3, #45	@ 0x2d
 8006644:	232b      	movge	r3, #43	@ 0x2b
 8006646:	2909      	cmp	r1, #9
 8006648:	7002      	strb	r2, [r0, #0]
 800664a:	7043      	strb	r3, [r0, #1]
 800664c:	dd29      	ble.n	80066a2 <__exponent+0x68>
 800664e:	f10d 0307 	add.w	r3, sp, #7
 8006652:	461d      	mov	r5, r3
 8006654:	270a      	movs	r7, #10
 8006656:	461a      	mov	r2, r3
 8006658:	fbb1 f6f7 	udiv	r6, r1, r7
 800665c:	fb07 1416 	mls	r4, r7, r6, r1
 8006660:	3430      	adds	r4, #48	@ 0x30
 8006662:	f802 4c01 	strb.w	r4, [r2, #-1]
 8006666:	460c      	mov	r4, r1
 8006668:	2c63      	cmp	r4, #99	@ 0x63
 800666a:	f103 33ff 	add.w	r3, r3, #4294967295
 800666e:	4631      	mov	r1, r6
 8006670:	dcf1      	bgt.n	8006656 <__exponent+0x1c>
 8006672:	3130      	adds	r1, #48	@ 0x30
 8006674:	1e94      	subs	r4, r2, #2
 8006676:	f803 1c01 	strb.w	r1, [r3, #-1]
 800667a:	1c41      	adds	r1, r0, #1
 800667c:	4623      	mov	r3, r4
 800667e:	42ab      	cmp	r3, r5
 8006680:	d30a      	bcc.n	8006698 <__exponent+0x5e>
 8006682:	f10d 0309 	add.w	r3, sp, #9
 8006686:	1a9b      	subs	r3, r3, r2
 8006688:	42ac      	cmp	r4, r5
 800668a:	bf88      	it	hi
 800668c:	2300      	movhi	r3, #0
 800668e:	3302      	adds	r3, #2
 8006690:	4403      	add	r3, r0
 8006692:	1a18      	subs	r0, r3, r0
 8006694:	b003      	add	sp, #12
 8006696:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8006698:	f813 6b01 	ldrb.w	r6, [r3], #1
 800669c:	f801 6f01 	strb.w	r6, [r1, #1]!
 80066a0:	e7ed      	b.n	800667e <__exponent+0x44>
 80066a2:	2330      	movs	r3, #48	@ 0x30
 80066a4:	3130      	adds	r1, #48	@ 0x30
 80066a6:	7083      	strb	r3, [r0, #2]
 80066a8:	70c1      	strb	r1, [r0, #3]
 80066aa:	1d03      	adds	r3, r0, #4
 80066ac:	e7f1      	b.n	8006692 <__exponent+0x58>
	...

080066b0 <_printf_float>:
 80066b0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80066b4:	b08d      	sub	sp, #52	@ 0x34
 80066b6:	460c      	mov	r4, r1
 80066b8:	f8dd 8058 	ldr.w	r8, [sp, #88]	@ 0x58
 80066bc:	4616      	mov	r6, r2
 80066be:	461f      	mov	r7, r3
 80066c0:	4605      	mov	r5, r0
 80066c2:	f000 fd01 	bl	80070c8 <_localeconv_r>
 80066c6:	6803      	ldr	r3, [r0, #0]
 80066c8:	9304      	str	r3, [sp, #16]
 80066ca:	4618      	mov	r0, r3
 80066cc:	f7f9 fdf0 	bl	80002b0 <strlen>
 80066d0:	2300      	movs	r3, #0
 80066d2:	930a      	str	r3, [sp, #40]	@ 0x28
 80066d4:	f8d8 3000 	ldr.w	r3, [r8]
 80066d8:	9005      	str	r0, [sp, #20]
 80066da:	3307      	adds	r3, #7
 80066dc:	f023 0307 	bic.w	r3, r3, #7
 80066e0:	f103 0208 	add.w	r2, r3, #8
 80066e4:	f894 a018 	ldrb.w	sl, [r4, #24]
 80066e8:	f8d4 b000 	ldr.w	fp, [r4]
 80066ec:	f8c8 2000 	str.w	r2, [r8]
 80066f0:	e9d3 8900 	ldrd	r8, r9, [r3]
 80066f4:	f029 4300 	bic.w	r3, r9, #2147483648	@ 0x80000000
 80066f8:	9307      	str	r3, [sp, #28]
 80066fa:	f8cd 8018 	str.w	r8, [sp, #24]
 80066fe:	e9c4 8912 	strd	r8, r9, [r4, #72]	@ 0x48
 8006702:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8006706:	4b9c      	ldr	r3, [pc, #624]	@ (8006978 <_printf_float+0x2c8>)
 8006708:	f04f 32ff 	mov.w	r2, #4294967295
 800670c:	f7fa fa2e 	bl	8000b6c <__aeabi_dcmpun>
 8006710:	bb70      	cbnz	r0, 8006770 <_printf_float+0xc0>
 8006712:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8006716:	4b98      	ldr	r3, [pc, #608]	@ (8006978 <_printf_float+0x2c8>)
 8006718:	f04f 32ff 	mov.w	r2, #4294967295
 800671c:	f7fa fa08 	bl	8000b30 <__aeabi_dcmple>
 8006720:	bb30      	cbnz	r0, 8006770 <_printf_float+0xc0>
 8006722:	2200      	movs	r2, #0
 8006724:	2300      	movs	r3, #0
 8006726:	4640      	mov	r0, r8
 8006728:	4649      	mov	r1, r9
 800672a:	f7fa f9f7 	bl	8000b1c <__aeabi_dcmplt>
 800672e:	b110      	cbz	r0, 8006736 <_printf_float+0x86>
 8006730:	232d      	movs	r3, #45	@ 0x2d
 8006732:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8006736:	4a91      	ldr	r2, [pc, #580]	@ (800697c <_printf_float+0x2cc>)
 8006738:	4b91      	ldr	r3, [pc, #580]	@ (8006980 <_printf_float+0x2d0>)
 800673a:	f1ba 0f47 	cmp.w	sl, #71	@ 0x47
 800673e:	bf94      	ite	ls
 8006740:	4690      	movls	r8, r2
 8006742:	4698      	movhi	r8, r3
 8006744:	2303      	movs	r3, #3
 8006746:	6123      	str	r3, [r4, #16]
 8006748:	f02b 0304 	bic.w	r3, fp, #4
 800674c:	6023      	str	r3, [r4, #0]
 800674e:	f04f 0900 	mov.w	r9, #0
 8006752:	9700      	str	r7, [sp, #0]
 8006754:	4633      	mov	r3, r6
 8006756:	aa0b      	add	r2, sp, #44	@ 0x2c
 8006758:	4621      	mov	r1, r4
 800675a:	4628      	mov	r0, r5
 800675c:	f000 f9d2 	bl	8006b04 <_printf_common>
 8006760:	3001      	adds	r0, #1
 8006762:	f040 808d 	bne.w	8006880 <_printf_float+0x1d0>
 8006766:	f04f 30ff 	mov.w	r0, #4294967295
 800676a:	b00d      	add	sp, #52	@ 0x34
 800676c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006770:	4642      	mov	r2, r8
 8006772:	464b      	mov	r3, r9
 8006774:	4640      	mov	r0, r8
 8006776:	4649      	mov	r1, r9
 8006778:	f7fa f9f8 	bl	8000b6c <__aeabi_dcmpun>
 800677c:	b140      	cbz	r0, 8006790 <_printf_float+0xe0>
 800677e:	464b      	mov	r3, r9
 8006780:	2b00      	cmp	r3, #0
 8006782:	bfbc      	itt	lt
 8006784:	232d      	movlt	r3, #45	@ 0x2d
 8006786:	f884 3043 	strblt.w	r3, [r4, #67]	@ 0x43
 800678a:	4a7e      	ldr	r2, [pc, #504]	@ (8006984 <_printf_float+0x2d4>)
 800678c:	4b7e      	ldr	r3, [pc, #504]	@ (8006988 <_printf_float+0x2d8>)
 800678e:	e7d4      	b.n	800673a <_printf_float+0x8a>
 8006790:	6863      	ldr	r3, [r4, #4]
 8006792:	f00a 02df 	and.w	r2, sl, #223	@ 0xdf
 8006796:	9206      	str	r2, [sp, #24]
 8006798:	1c5a      	adds	r2, r3, #1
 800679a:	d13b      	bne.n	8006814 <_printf_float+0x164>
 800679c:	2306      	movs	r3, #6
 800679e:	6063      	str	r3, [r4, #4]
 80067a0:	f44b 6280 	orr.w	r2, fp, #1024	@ 0x400
 80067a4:	2300      	movs	r3, #0
 80067a6:	6022      	str	r2, [r4, #0]
 80067a8:	9303      	str	r3, [sp, #12]
 80067aa:	ab0a      	add	r3, sp, #40	@ 0x28
 80067ac:	e9cd a301 	strd	sl, r3, [sp, #4]
 80067b0:	ab09      	add	r3, sp, #36	@ 0x24
 80067b2:	9300      	str	r3, [sp, #0]
 80067b4:	6861      	ldr	r1, [r4, #4]
 80067b6:	ec49 8b10 	vmov	d0, r8, r9
 80067ba:	f10d 0323 	add.w	r3, sp, #35	@ 0x23
 80067be:	4628      	mov	r0, r5
 80067c0:	f7ff fed6 	bl	8006570 <__cvt>
 80067c4:	9b06      	ldr	r3, [sp, #24]
 80067c6:	9909      	ldr	r1, [sp, #36]	@ 0x24
 80067c8:	2b47      	cmp	r3, #71	@ 0x47
 80067ca:	4680      	mov	r8, r0
 80067cc:	d129      	bne.n	8006822 <_printf_float+0x172>
 80067ce:	1cc8      	adds	r0, r1, #3
 80067d0:	db02      	blt.n	80067d8 <_printf_float+0x128>
 80067d2:	6863      	ldr	r3, [r4, #4]
 80067d4:	4299      	cmp	r1, r3
 80067d6:	dd41      	ble.n	800685c <_printf_float+0x1ac>
 80067d8:	f1aa 0a02 	sub.w	sl, sl, #2
 80067dc:	fa5f fa8a 	uxtb.w	sl, sl
 80067e0:	3901      	subs	r1, #1
 80067e2:	4652      	mov	r2, sl
 80067e4:	f104 0050 	add.w	r0, r4, #80	@ 0x50
 80067e8:	9109      	str	r1, [sp, #36]	@ 0x24
 80067ea:	f7ff ff26 	bl	800663a <__exponent>
 80067ee:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 80067f0:	1813      	adds	r3, r2, r0
 80067f2:	2a01      	cmp	r2, #1
 80067f4:	4681      	mov	r9, r0
 80067f6:	6123      	str	r3, [r4, #16]
 80067f8:	dc02      	bgt.n	8006800 <_printf_float+0x150>
 80067fa:	6822      	ldr	r2, [r4, #0]
 80067fc:	07d2      	lsls	r2, r2, #31
 80067fe:	d501      	bpl.n	8006804 <_printf_float+0x154>
 8006800:	3301      	adds	r3, #1
 8006802:	6123      	str	r3, [r4, #16]
 8006804:	f89d 3023 	ldrb.w	r3, [sp, #35]	@ 0x23
 8006808:	2b00      	cmp	r3, #0
 800680a:	d0a2      	beq.n	8006752 <_printf_float+0xa2>
 800680c:	232d      	movs	r3, #45	@ 0x2d
 800680e:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8006812:	e79e      	b.n	8006752 <_printf_float+0xa2>
 8006814:	9a06      	ldr	r2, [sp, #24]
 8006816:	2a47      	cmp	r2, #71	@ 0x47
 8006818:	d1c2      	bne.n	80067a0 <_printf_float+0xf0>
 800681a:	2b00      	cmp	r3, #0
 800681c:	d1c0      	bne.n	80067a0 <_printf_float+0xf0>
 800681e:	2301      	movs	r3, #1
 8006820:	e7bd      	b.n	800679e <_printf_float+0xee>
 8006822:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 8006826:	d9db      	bls.n	80067e0 <_printf_float+0x130>
 8006828:	f1ba 0f66 	cmp.w	sl, #102	@ 0x66
 800682c:	d118      	bne.n	8006860 <_printf_float+0x1b0>
 800682e:	2900      	cmp	r1, #0
 8006830:	6863      	ldr	r3, [r4, #4]
 8006832:	dd0b      	ble.n	800684c <_printf_float+0x19c>
 8006834:	6121      	str	r1, [r4, #16]
 8006836:	b913      	cbnz	r3, 800683e <_printf_float+0x18e>
 8006838:	6822      	ldr	r2, [r4, #0]
 800683a:	07d0      	lsls	r0, r2, #31
 800683c:	d502      	bpl.n	8006844 <_printf_float+0x194>
 800683e:	3301      	adds	r3, #1
 8006840:	440b      	add	r3, r1
 8006842:	6123      	str	r3, [r4, #16]
 8006844:	65a1      	str	r1, [r4, #88]	@ 0x58
 8006846:	f04f 0900 	mov.w	r9, #0
 800684a:	e7db      	b.n	8006804 <_printf_float+0x154>
 800684c:	b913      	cbnz	r3, 8006854 <_printf_float+0x1a4>
 800684e:	6822      	ldr	r2, [r4, #0]
 8006850:	07d2      	lsls	r2, r2, #31
 8006852:	d501      	bpl.n	8006858 <_printf_float+0x1a8>
 8006854:	3302      	adds	r3, #2
 8006856:	e7f4      	b.n	8006842 <_printf_float+0x192>
 8006858:	2301      	movs	r3, #1
 800685a:	e7f2      	b.n	8006842 <_printf_float+0x192>
 800685c:	f04f 0a67 	mov.w	sl, #103	@ 0x67
 8006860:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8006862:	4299      	cmp	r1, r3
 8006864:	db05      	blt.n	8006872 <_printf_float+0x1c2>
 8006866:	6823      	ldr	r3, [r4, #0]
 8006868:	6121      	str	r1, [r4, #16]
 800686a:	07d8      	lsls	r0, r3, #31
 800686c:	d5ea      	bpl.n	8006844 <_printf_float+0x194>
 800686e:	1c4b      	adds	r3, r1, #1
 8006870:	e7e7      	b.n	8006842 <_printf_float+0x192>
 8006872:	2900      	cmp	r1, #0
 8006874:	bfd4      	ite	le
 8006876:	f1c1 0202 	rsble	r2, r1, #2
 800687a:	2201      	movgt	r2, #1
 800687c:	4413      	add	r3, r2
 800687e:	e7e0      	b.n	8006842 <_printf_float+0x192>
 8006880:	6823      	ldr	r3, [r4, #0]
 8006882:	055a      	lsls	r2, r3, #21
 8006884:	d407      	bmi.n	8006896 <_printf_float+0x1e6>
 8006886:	6923      	ldr	r3, [r4, #16]
 8006888:	4642      	mov	r2, r8
 800688a:	4631      	mov	r1, r6
 800688c:	4628      	mov	r0, r5
 800688e:	47b8      	blx	r7
 8006890:	3001      	adds	r0, #1
 8006892:	d12b      	bne.n	80068ec <_printf_float+0x23c>
 8006894:	e767      	b.n	8006766 <_printf_float+0xb6>
 8006896:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 800689a:	f240 80dd 	bls.w	8006a58 <_printf_float+0x3a8>
 800689e:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 80068a2:	2200      	movs	r2, #0
 80068a4:	2300      	movs	r3, #0
 80068a6:	f7fa f92f 	bl	8000b08 <__aeabi_dcmpeq>
 80068aa:	2800      	cmp	r0, #0
 80068ac:	d033      	beq.n	8006916 <_printf_float+0x266>
 80068ae:	4a37      	ldr	r2, [pc, #220]	@ (800698c <_printf_float+0x2dc>)
 80068b0:	2301      	movs	r3, #1
 80068b2:	4631      	mov	r1, r6
 80068b4:	4628      	mov	r0, r5
 80068b6:	47b8      	blx	r7
 80068b8:	3001      	adds	r0, #1
 80068ba:	f43f af54 	beq.w	8006766 <_printf_float+0xb6>
 80068be:	e9dd 3809 	ldrd	r3, r8, [sp, #36]	@ 0x24
 80068c2:	4543      	cmp	r3, r8
 80068c4:	db02      	blt.n	80068cc <_printf_float+0x21c>
 80068c6:	6823      	ldr	r3, [r4, #0]
 80068c8:	07d8      	lsls	r0, r3, #31
 80068ca:	d50f      	bpl.n	80068ec <_printf_float+0x23c>
 80068cc:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 80068d0:	4631      	mov	r1, r6
 80068d2:	4628      	mov	r0, r5
 80068d4:	47b8      	blx	r7
 80068d6:	3001      	adds	r0, #1
 80068d8:	f43f af45 	beq.w	8006766 <_printf_float+0xb6>
 80068dc:	f04f 0900 	mov.w	r9, #0
 80068e0:	f108 38ff 	add.w	r8, r8, #4294967295
 80068e4:	f104 0a1a 	add.w	sl, r4, #26
 80068e8:	45c8      	cmp	r8, r9
 80068ea:	dc09      	bgt.n	8006900 <_printf_float+0x250>
 80068ec:	6823      	ldr	r3, [r4, #0]
 80068ee:	079b      	lsls	r3, r3, #30
 80068f0:	f100 8103 	bmi.w	8006afa <_printf_float+0x44a>
 80068f4:	68e0      	ldr	r0, [r4, #12]
 80068f6:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 80068f8:	4298      	cmp	r0, r3
 80068fa:	bfb8      	it	lt
 80068fc:	4618      	movlt	r0, r3
 80068fe:	e734      	b.n	800676a <_printf_float+0xba>
 8006900:	2301      	movs	r3, #1
 8006902:	4652      	mov	r2, sl
 8006904:	4631      	mov	r1, r6
 8006906:	4628      	mov	r0, r5
 8006908:	47b8      	blx	r7
 800690a:	3001      	adds	r0, #1
 800690c:	f43f af2b 	beq.w	8006766 <_printf_float+0xb6>
 8006910:	f109 0901 	add.w	r9, r9, #1
 8006914:	e7e8      	b.n	80068e8 <_printf_float+0x238>
 8006916:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8006918:	2b00      	cmp	r3, #0
 800691a:	dc39      	bgt.n	8006990 <_printf_float+0x2e0>
 800691c:	4a1b      	ldr	r2, [pc, #108]	@ (800698c <_printf_float+0x2dc>)
 800691e:	2301      	movs	r3, #1
 8006920:	4631      	mov	r1, r6
 8006922:	4628      	mov	r0, r5
 8006924:	47b8      	blx	r7
 8006926:	3001      	adds	r0, #1
 8006928:	f43f af1d 	beq.w	8006766 <_printf_float+0xb6>
 800692c:	e9dd 3909 	ldrd	r3, r9, [sp, #36]	@ 0x24
 8006930:	ea59 0303 	orrs.w	r3, r9, r3
 8006934:	d102      	bne.n	800693c <_printf_float+0x28c>
 8006936:	6823      	ldr	r3, [r4, #0]
 8006938:	07d9      	lsls	r1, r3, #31
 800693a:	d5d7      	bpl.n	80068ec <_printf_float+0x23c>
 800693c:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8006940:	4631      	mov	r1, r6
 8006942:	4628      	mov	r0, r5
 8006944:	47b8      	blx	r7
 8006946:	3001      	adds	r0, #1
 8006948:	f43f af0d 	beq.w	8006766 <_printf_float+0xb6>
 800694c:	f04f 0a00 	mov.w	sl, #0
 8006950:	f104 0b1a 	add.w	fp, r4, #26
 8006954:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8006956:	425b      	negs	r3, r3
 8006958:	4553      	cmp	r3, sl
 800695a:	dc01      	bgt.n	8006960 <_printf_float+0x2b0>
 800695c:	464b      	mov	r3, r9
 800695e:	e793      	b.n	8006888 <_printf_float+0x1d8>
 8006960:	2301      	movs	r3, #1
 8006962:	465a      	mov	r2, fp
 8006964:	4631      	mov	r1, r6
 8006966:	4628      	mov	r0, r5
 8006968:	47b8      	blx	r7
 800696a:	3001      	adds	r0, #1
 800696c:	f43f aefb 	beq.w	8006766 <_printf_float+0xb6>
 8006970:	f10a 0a01 	add.w	sl, sl, #1
 8006974:	e7ee      	b.n	8006954 <_printf_float+0x2a4>
 8006976:	bf00      	nop
 8006978:	7fefffff 	.word	0x7fefffff
 800697c:	0800a444 	.word	0x0800a444
 8006980:	0800a448 	.word	0x0800a448
 8006984:	0800a44c 	.word	0x0800a44c
 8006988:	0800a450 	.word	0x0800a450
 800698c:	0800a454 	.word	0x0800a454
 8006990:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 8006992:	f8dd a028 	ldr.w	sl, [sp, #40]	@ 0x28
 8006996:	4553      	cmp	r3, sl
 8006998:	bfa8      	it	ge
 800699a:	4653      	movge	r3, sl
 800699c:	2b00      	cmp	r3, #0
 800699e:	4699      	mov	r9, r3
 80069a0:	dc36      	bgt.n	8006a10 <_printf_float+0x360>
 80069a2:	f04f 0b00 	mov.w	fp, #0
 80069a6:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 80069aa:	f104 021a 	add.w	r2, r4, #26
 80069ae:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 80069b0:	9306      	str	r3, [sp, #24]
 80069b2:	eba3 0309 	sub.w	r3, r3, r9
 80069b6:	455b      	cmp	r3, fp
 80069b8:	dc31      	bgt.n	8006a1e <_printf_float+0x36e>
 80069ba:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80069bc:	459a      	cmp	sl, r3
 80069be:	dc3a      	bgt.n	8006a36 <_printf_float+0x386>
 80069c0:	6823      	ldr	r3, [r4, #0]
 80069c2:	07da      	lsls	r2, r3, #31
 80069c4:	d437      	bmi.n	8006a36 <_printf_float+0x386>
 80069c6:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80069c8:	ebaa 0903 	sub.w	r9, sl, r3
 80069cc:	9b06      	ldr	r3, [sp, #24]
 80069ce:	ebaa 0303 	sub.w	r3, sl, r3
 80069d2:	4599      	cmp	r9, r3
 80069d4:	bfa8      	it	ge
 80069d6:	4699      	movge	r9, r3
 80069d8:	f1b9 0f00 	cmp.w	r9, #0
 80069dc:	dc33      	bgt.n	8006a46 <_printf_float+0x396>
 80069de:	f04f 0800 	mov.w	r8, #0
 80069e2:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 80069e6:	f104 0b1a 	add.w	fp, r4, #26
 80069ea:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80069ec:	ebaa 0303 	sub.w	r3, sl, r3
 80069f0:	eba3 0309 	sub.w	r3, r3, r9
 80069f4:	4543      	cmp	r3, r8
 80069f6:	f77f af79 	ble.w	80068ec <_printf_float+0x23c>
 80069fa:	2301      	movs	r3, #1
 80069fc:	465a      	mov	r2, fp
 80069fe:	4631      	mov	r1, r6
 8006a00:	4628      	mov	r0, r5
 8006a02:	47b8      	blx	r7
 8006a04:	3001      	adds	r0, #1
 8006a06:	f43f aeae 	beq.w	8006766 <_printf_float+0xb6>
 8006a0a:	f108 0801 	add.w	r8, r8, #1
 8006a0e:	e7ec      	b.n	80069ea <_printf_float+0x33a>
 8006a10:	4642      	mov	r2, r8
 8006a12:	4631      	mov	r1, r6
 8006a14:	4628      	mov	r0, r5
 8006a16:	47b8      	blx	r7
 8006a18:	3001      	adds	r0, #1
 8006a1a:	d1c2      	bne.n	80069a2 <_printf_float+0x2f2>
 8006a1c:	e6a3      	b.n	8006766 <_printf_float+0xb6>
 8006a1e:	2301      	movs	r3, #1
 8006a20:	4631      	mov	r1, r6
 8006a22:	4628      	mov	r0, r5
 8006a24:	9206      	str	r2, [sp, #24]
 8006a26:	47b8      	blx	r7
 8006a28:	3001      	adds	r0, #1
 8006a2a:	f43f ae9c 	beq.w	8006766 <_printf_float+0xb6>
 8006a2e:	9a06      	ldr	r2, [sp, #24]
 8006a30:	f10b 0b01 	add.w	fp, fp, #1
 8006a34:	e7bb      	b.n	80069ae <_printf_float+0x2fe>
 8006a36:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8006a3a:	4631      	mov	r1, r6
 8006a3c:	4628      	mov	r0, r5
 8006a3e:	47b8      	blx	r7
 8006a40:	3001      	adds	r0, #1
 8006a42:	d1c0      	bne.n	80069c6 <_printf_float+0x316>
 8006a44:	e68f      	b.n	8006766 <_printf_float+0xb6>
 8006a46:	9a06      	ldr	r2, [sp, #24]
 8006a48:	464b      	mov	r3, r9
 8006a4a:	4442      	add	r2, r8
 8006a4c:	4631      	mov	r1, r6
 8006a4e:	4628      	mov	r0, r5
 8006a50:	47b8      	blx	r7
 8006a52:	3001      	adds	r0, #1
 8006a54:	d1c3      	bne.n	80069de <_printf_float+0x32e>
 8006a56:	e686      	b.n	8006766 <_printf_float+0xb6>
 8006a58:	f8dd a028 	ldr.w	sl, [sp, #40]	@ 0x28
 8006a5c:	f1ba 0f01 	cmp.w	sl, #1
 8006a60:	dc01      	bgt.n	8006a66 <_printf_float+0x3b6>
 8006a62:	07db      	lsls	r3, r3, #31
 8006a64:	d536      	bpl.n	8006ad4 <_printf_float+0x424>
 8006a66:	2301      	movs	r3, #1
 8006a68:	4642      	mov	r2, r8
 8006a6a:	4631      	mov	r1, r6
 8006a6c:	4628      	mov	r0, r5
 8006a6e:	47b8      	blx	r7
 8006a70:	3001      	adds	r0, #1
 8006a72:	f43f ae78 	beq.w	8006766 <_printf_float+0xb6>
 8006a76:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8006a7a:	4631      	mov	r1, r6
 8006a7c:	4628      	mov	r0, r5
 8006a7e:	47b8      	blx	r7
 8006a80:	3001      	adds	r0, #1
 8006a82:	f43f ae70 	beq.w	8006766 <_printf_float+0xb6>
 8006a86:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 8006a8a:	2200      	movs	r2, #0
 8006a8c:	2300      	movs	r3, #0
 8006a8e:	f10a 3aff 	add.w	sl, sl, #4294967295
 8006a92:	f7fa f839 	bl	8000b08 <__aeabi_dcmpeq>
 8006a96:	b9c0      	cbnz	r0, 8006aca <_printf_float+0x41a>
 8006a98:	4653      	mov	r3, sl
 8006a9a:	f108 0201 	add.w	r2, r8, #1
 8006a9e:	4631      	mov	r1, r6
 8006aa0:	4628      	mov	r0, r5
 8006aa2:	47b8      	blx	r7
 8006aa4:	3001      	adds	r0, #1
 8006aa6:	d10c      	bne.n	8006ac2 <_printf_float+0x412>
 8006aa8:	e65d      	b.n	8006766 <_printf_float+0xb6>
 8006aaa:	2301      	movs	r3, #1
 8006aac:	465a      	mov	r2, fp
 8006aae:	4631      	mov	r1, r6
 8006ab0:	4628      	mov	r0, r5
 8006ab2:	47b8      	blx	r7
 8006ab4:	3001      	adds	r0, #1
 8006ab6:	f43f ae56 	beq.w	8006766 <_printf_float+0xb6>
 8006aba:	f108 0801 	add.w	r8, r8, #1
 8006abe:	45d0      	cmp	r8, sl
 8006ac0:	dbf3      	blt.n	8006aaa <_printf_float+0x3fa>
 8006ac2:	464b      	mov	r3, r9
 8006ac4:	f104 0250 	add.w	r2, r4, #80	@ 0x50
 8006ac8:	e6df      	b.n	800688a <_printf_float+0x1da>
 8006aca:	f04f 0800 	mov.w	r8, #0
 8006ace:	f104 0b1a 	add.w	fp, r4, #26
 8006ad2:	e7f4      	b.n	8006abe <_printf_float+0x40e>
 8006ad4:	2301      	movs	r3, #1
 8006ad6:	4642      	mov	r2, r8
 8006ad8:	e7e1      	b.n	8006a9e <_printf_float+0x3ee>
 8006ada:	2301      	movs	r3, #1
 8006adc:	464a      	mov	r2, r9
 8006ade:	4631      	mov	r1, r6
 8006ae0:	4628      	mov	r0, r5
 8006ae2:	47b8      	blx	r7
 8006ae4:	3001      	adds	r0, #1
 8006ae6:	f43f ae3e 	beq.w	8006766 <_printf_float+0xb6>
 8006aea:	f108 0801 	add.w	r8, r8, #1
 8006aee:	68e3      	ldr	r3, [r4, #12]
 8006af0:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 8006af2:	1a5b      	subs	r3, r3, r1
 8006af4:	4543      	cmp	r3, r8
 8006af6:	dcf0      	bgt.n	8006ada <_printf_float+0x42a>
 8006af8:	e6fc      	b.n	80068f4 <_printf_float+0x244>
 8006afa:	f04f 0800 	mov.w	r8, #0
 8006afe:	f104 0919 	add.w	r9, r4, #25
 8006b02:	e7f4      	b.n	8006aee <_printf_float+0x43e>

08006b04 <_printf_common>:
 8006b04:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8006b08:	4616      	mov	r6, r2
 8006b0a:	4698      	mov	r8, r3
 8006b0c:	688a      	ldr	r2, [r1, #8]
 8006b0e:	690b      	ldr	r3, [r1, #16]
 8006b10:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8006b14:	4293      	cmp	r3, r2
 8006b16:	bfb8      	it	lt
 8006b18:	4613      	movlt	r3, r2
 8006b1a:	6033      	str	r3, [r6, #0]
 8006b1c:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 8006b20:	4607      	mov	r7, r0
 8006b22:	460c      	mov	r4, r1
 8006b24:	b10a      	cbz	r2, 8006b2a <_printf_common+0x26>
 8006b26:	3301      	adds	r3, #1
 8006b28:	6033      	str	r3, [r6, #0]
 8006b2a:	6823      	ldr	r3, [r4, #0]
 8006b2c:	0699      	lsls	r1, r3, #26
 8006b2e:	bf42      	ittt	mi
 8006b30:	6833      	ldrmi	r3, [r6, #0]
 8006b32:	3302      	addmi	r3, #2
 8006b34:	6033      	strmi	r3, [r6, #0]
 8006b36:	6825      	ldr	r5, [r4, #0]
 8006b38:	f015 0506 	ands.w	r5, r5, #6
 8006b3c:	d106      	bne.n	8006b4c <_printf_common+0x48>
 8006b3e:	f104 0a19 	add.w	sl, r4, #25
 8006b42:	68e3      	ldr	r3, [r4, #12]
 8006b44:	6832      	ldr	r2, [r6, #0]
 8006b46:	1a9b      	subs	r3, r3, r2
 8006b48:	42ab      	cmp	r3, r5
 8006b4a:	dc26      	bgt.n	8006b9a <_printf_common+0x96>
 8006b4c:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 8006b50:	6822      	ldr	r2, [r4, #0]
 8006b52:	3b00      	subs	r3, #0
 8006b54:	bf18      	it	ne
 8006b56:	2301      	movne	r3, #1
 8006b58:	0692      	lsls	r2, r2, #26
 8006b5a:	d42b      	bmi.n	8006bb4 <_printf_common+0xb0>
 8006b5c:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 8006b60:	4641      	mov	r1, r8
 8006b62:	4638      	mov	r0, r7
 8006b64:	47c8      	blx	r9
 8006b66:	3001      	adds	r0, #1
 8006b68:	d01e      	beq.n	8006ba8 <_printf_common+0xa4>
 8006b6a:	6823      	ldr	r3, [r4, #0]
 8006b6c:	6922      	ldr	r2, [r4, #16]
 8006b6e:	f003 0306 	and.w	r3, r3, #6
 8006b72:	2b04      	cmp	r3, #4
 8006b74:	bf02      	ittt	eq
 8006b76:	68e5      	ldreq	r5, [r4, #12]
 8006b78:	6833      	ldreq	r3, [r6, #0]
 8006b7a:	1aed      	subeq	r5, r5, r3
 8006b7c:	68a3      	ldr	r3, [r4, #8]
 8006b7e:	bf0c      	ite	eq
 8006b80:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8006b84:	2500      	movne	r5, #0
 8006b86:	4293      	cmp	r3, r2
 8006b88:	bfc4      	itt	gt
 8006b8a:	1a9b      	subgt	r3, r3, r2
 8006b8c:	18ed      	addgt	r5, r5, r3
 8006b8e:	2600      	movs	r6, #0
 8006b90:	341a      	adds	r4, #26
 8006b92:	42b5      	cmp	r5, r6
 8006b94:	d11a      	bne.n	8006bcc <_printf_common+0xc8>
 8006b96:	2000      	movs	r0, #0
 8006b98:	e008      	b.n	8006bac <_printf_common+0xa8>
 8006b9a:	2301      	movs	r3, #1
 8006b9c:	4652      	mov	r2, sl
 8006b9e:	4641      	mov	r1, r8
 8006ba0:	4638      	mov	r0, r7
 8006ba2:	47c8      	blx	r9
 8006ba4:	3001      	adds	r0, #1
 8006ba6:	d103      	bne.n	8006bb0 <_printf_common+0xac>
 8006ba8:	f04f 30ff 	mov.w	r0, #4294967295
 8006bac:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006bb0:	3501      	adds	r5, #1
 8006bb2:	e7c6      	b.n	8006b42 <_printf_common+0x3e>
 8006bb4:	18e1      	adds	r1, r4, r3
 8006bb6:	1c5a      	adds	r2, r3, #1
 8006bb8:	2030      	movs	r0, #48	@ 0x30
 8006bba:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 8006bbe:	4422      	add	r2, r4
 8006bc0:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 8006bc4:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 8006bc8:	3302      	adds	r3, #2
 8006bca:	e7c7      	b.n	8006b5c <_printf_common+0x58>
 8006bcc:	2301      	movs	r3, #1
 8006bce:	4622      	mov	r2, r4
 8006bd0:	4641      	mov	r1, r8
 8006bd2:	4638      	mov	r0, r7
 8006bd4:	47c8      	blx	r9
 8006bd6:	3001      	adds	r0, #1
 8006bd8:	d0e6      	beq.n	8006ba8 <_printf_common+0xa4>
 8006bda:	3601      	adds	r6, #1
 8006bdc:	e7d9      	b.n	8006b92 <_printf_common+0x8e>
	...

08006be0 <_printf_i>:
 8006be0:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8006be4:	7e0f      	ldrb	r7, [r1, #24]
 8006be6:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 8006be8:	2f78      	cmp	r7, #120	@ 0x78
 8006bea:	4691      	mov	r9, r2
 8006bec:	4680      	mov	r8, r0
 8006bee:	460c      	mov	r4, r1
 8006bf0:	469a      	mov	sl, r3
 8006bf2:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 8006bf6:	d807      	bhi.n	8006c08 <_printf_i+0x28>
 8006bf8:	2f62      	cmp	r7, #98	@ 0x62
 8006bfa:	d80a      	bhi.n	8006c12 <_printf_i+0x32>
 8006bfc:	2f00      	cmp	r7, #0
 8006bfe:	f000 80d2 	beq.w	8006da6 <_printf_i+0x1c6>
 8006c02:	2f58      	cmp	r7, #88	@ 0x58
 8006c04:	f000 80b9 	beq.w	8006d7a <_printf_i+0x19a>
 8006c08:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8006c0c:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 8006c10:	e03a      	b.n	8006c88 <_printf_i+0xa8>
 8006c12:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 8006c16:	2b15      	cmp	r3, #21
 8006c18:	d8f6      	bhi.n	8006c08 <_printf_i+0x28>
 8006c1a:	a101      	add	r1, pc, #4	@ (adr r1, 8006c20 <_printf_i+0x40>)
 8006c1c:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8006c20:	08006c79 	.word	0x08006c79
 8006c24:	08006c8d 	.word	0x08006c8d
 8006c28:	08006c09 	.word	0x08006c09
 8006c2c:	08006c09 	.word	0x08006c09
 8006c30:	08006c09 	.word	0x08006c09
 8006c34:	08006c09 	.word	0x08006c09
 8006c38:	08006c8d 	.word	0x08006c8d
 8006c3c:	08006c09 	.word	0x08006c09
 8006c40:	08006c09 	.word	0x08006c09
 8006c44:	08006c09 	.word	0x08006c09
 8006c48:	08006c09 	.word	0x08006c09
 8006c4c:	08006d8d 	.word	0x08006d8d
 8006c50:	08006cb7 	.word	0x08006cb7
 8006c54:	08006d47 	.word	0x08006d47
 8006c58:	08006c09 	.word	0x08006c09
 8006c5c:	08006c09 	.word	0x08006c09
 8006c60:	08006daf 	.word	0x08006daf
 8006c64:	08006c09 	.word	0x08006c09
 8006c68:	08006cb7 	.word	0x08006cb7
 8006c6c:	08006c09 	.word	0x08006c09
 8006c70:	08006c09 	.word	0x08006c09
 8006c74:	08006d4f 	.word	0x08006d4f
 8006c78:	6833      	ldr	r3, [r6, #0]
 8006c7a:	1d1a      	adds	r2, r3, #4
 8006c7c:	681b      	ldr	r3, [r3, #0]
 8006c7e:	6032      	str	r2, [r6, #0]
 8006c80:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8006c84:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 8006c88:	2301      	movs	r3, #1
 8006c8a:	e09d      	b.n	8006dc8 <_printf_i+0x1e8>
 8006c8c:	6833      	ldr	r3, [r6, #0]
 8006c8e:	6820      	ldr	r0, [r4, #0]
 8006c90:	1d19      	adds	r1, r3, #4
 8006c92:	6031      	str	r1, [r6, #0]
 8006c94:	0606      	lsls	r6, r0, #24
 8006c96:	d501      	bpl.n	8006c9c <_printf_i+0xbc>
 8006c98:	681d      	ldr	r5, [r3, #0]
 8006c9a:	e003      	b.n	8006ca4 <_printf_i+0xc4>
 8006c9c:	0645      	lsls	r5, r0, #25
 8006c9e:	d5fb      	bpl.n	8006c98 <_printf_i+0xb8>
 8006ca0:	f9b3 5000 	ldrsh.w	r5, [r3]
 8006ca4:	2d00      	cmp	r5, #0
 8006ca6:	da03      	bge.n	8006cb0 <_printf_i+0xd0>
 8006ca8:	232d      	movs	r3, #45	@ 0x2d
 8006caa:	426d      	negs	r5, r5
 8006cac:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8006cb0:	4859      	ldr	r0, [pc, #356]	@ (8006e18 <_printf_i+0x238>)
 8006cb2:	230a      	movs	r3, #10
 8006cb4:	e011      	b.n	8006cda <_printf_i+0xfa>
 8006cb6:	6821      	ldr	r1, [r4, #0]
 8006cb8:	6833      	ldr	r3, [r6, #0]
 8006cba:	0608      	lsls	r0, r1, #24
 8006cbc:	f853 5b04 	ldr.w	r5, [r3], #4
 8006cc0:	d402      	bmi.n	8006cc8 <_printf_i+0xe8>
 8006cc2:	0649      	lsls	r1, r1, #25
 8006cc4:	bf48      	it	mi
 8006cc6:	b2ad      	uxthmi	r5, r5
 8006cc8:	2f6f      	cmp	r7, #111	@ 0x6f
 8006cca:	4853      	ldr	r0, [pc, #332]	@ (8006e18 <_printf_i+0x238>)
 8006ccc:	6033      	str	r3, [r6, #0]
 8006cce:	bf14      	ite	ne
 8006cd0:	230a      	movne	r3, #10
 8006cd2:	2308      	moveq	r3, #8
 8006cd4:	2100      	movs	r1, #0
 8006cd6:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 8006cda:	6866      	ldr	r6, [r4, #4]
 8006cdc:	60a6      	str	r6, [r4, #8]
 8006cde:	2e00      	cmp	r6, #0
 8006ce0:	bfa2      	ittt	ge
 8006ce2:	6821      	ldrge	r1, [r4, #0]
 8006ce4:	f021 0104 	bicge.w	r1, r1, #4
 8006ce8:	6021      	strge	r1, [r4, #0]
 8006cea:	b90d      	cbnz	r5, 8006cf0 <_printf_i+0x110>
 8006cec:	2e00      	cmp	r6, #0
 8006cee:	d04b      	beq.n	8006d88 <_printf_i+0x1a8>
 8006cf0:	4616      	mov	r6, r2
 8006cf2:	fbb5 f1f3 	udiv	r1, r5, r3
 8006cf6:	fb03 5711 	mls	r7, r3, r1, r5
 8006cfa:	5dc7      	ldrb	r7, [r0, r7]
 8006cfc:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8006d00:	462f      	mov	r7, r5
 8006d02:	42bb      	cmp	r3, r7
 8006d04:	460d      	mov	r5, r1
 8006d06:	d9f4      	bls.n	8006cf2 <_printf_i+0x112>
 8006d08:	2b08      	cmp	r3, #8
 8006d0a:	d10b      	bne.n	8006d24 <_printf_i+0x144>
 8006d0c:	6823      	ldr	r3, [r4, #0]
 8006d0e:	07df      	lsls	r7, r3, #31
 8006d10:	d508      	bpl.n	8006d24 <_printf_i+0x144>
 8006d12:	6923      	ldr	r3, [r4, #16]
 8006d14:	6861      	ldr	r1, [r4, #4]
 8006d16:	4299      	cmp	r1, r3
 8006d18:	bfde      	ittt	le
 8006d1a:	2330      	movle	r3, #48	@ 0x30
 8006d1c:	f806 3c01 	strble.w	r3, [r6, #-1]
 8006d20:	f106 36ff 	addle.w	r6, r6, #4294967295
 8006d24:	1b92      	subs	r2, r2, r6
 8006d26:	6122      	str	r2, [r4, #16]
 8006d28:	f8cd a000 	str.w	sl, [sp]
 8006d2c:	464b      	mov	r3, r9
 8006d2e:	aa03      	add	r2, sp, #12
 8006d30:	4621      	mov	r1, r4
 8006d32:	4640      	mov	r0, r8
 8006d34:	f7ff fee6 	bl	8006b04 <_printf_common>
 8006d38:	3001      	adds	r0, #1
 8006d3a:	d14a      	bne.n	8006dd2 <_printf_i+0x1f2>
 8006d3c:	f04f 30ff 	mov.w	r0, #4294967295
 8006d40:	b004      	add	sp, #16
 8006d42:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006d46:	6823      	ldr	r3, [r4, #0]
 8006d48:	f043 0320 	orr.w	r3, r3, #32
 8006d4c:	6023      	str	r3, [r4, #0]
 8006d4e:	4833      	ldr	r0, [pc, #204]	@ (8006e1c <_printf_i+0x23c>)
 8006d50:	2778      	movs	r7, #120	@ 0x78
 8006d52:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 8006d56:	6823      	ldr	r3, [r4, #0]
 8006d58:	6831      	ldr	r1, [r6, #0]
 8006d5a:	061f      	lsls	r7, r3, #24
 8006d5c:	f851 5b04 	ldr.w	r5, [r1], #4
 8006d60:	d402      	bmi.n	8006d68 <_printf_i+0x188>
 8006d62:	065f      	lsls	r7, r3, #25
 8006d64:	bf48      	it	mi
 8006d66:	b2ad      	uxthmi	r5, r5
 8006d68:	6031      	str	r1, [r6, #0]
 8006d6a:	07d9      	lsls	r1, r3, #31
 8006d6c:	bf44      	itt	mi
 8006d6e:	f043 0320 	orrmi.w	r3, r3, #32
 8006d72:	6023      	strmi	r3, [r4, #0]
 8006d74:	b11d      	cbz	r5, 8006d7e <_printf_i+0x19e>
 8006d76:	2310      	movs	r3, #16
 8006d78:	e7ac      	b.n	8006cd4 <_printf_i+0xf4>
 8006d7a:	4827      	ldr	r0, [pc, #156]	@ (8006e18 <_printf_i+0x238>)
 8006d7c:	e7e9      	b.n	8006d52 <_printf_i+0x172>
 8006d7e:	6823      	ldr	r3, [r4, #0]
 8006d80:	f023 0320 	bic.w	r3, r3, #32
 8006d84:	6023      	str	r3, [r4, #0]
 8006d86:	e7f6      	b.n	8006d76 <_printf_i+0x196>
 8006d88:	4616      	mov	r6, r2
 8006d8a:	e7bd      	b.n	8006d08 <_printf_i+0x128>
 8006d8c:	6833      	ldr	r3, [r6, #0]
 8006d8e:	6825      	ldr	r5, [r4, #0]
 8006d90:	6961      	ldr	r1, [r4, #20]
 8006d92:	1d18      	adds	r0, r3, #4
 8006d94:	6030      	str	r0, [r6, #0]
 8006d96:	062e      	lsls	r6, r5, #24
 8006d98:	681b      	ldr	r3, [r3, #0]
 8006d9a:	d501      	bpl.n	8006da0 <_printf_i+0x1c0>
 8006d9c:	6019      	str	r1, [r3, #0]
 8006d9e:	e002      	b.n	8006da6 <_printf_i+0x1c6>
 8006da0:	0668      	lsls	r0, r5, #25
 8006da2:	d5fb      	bpl.n	8006d9c <_printf_i+0x1bc>
 8006da4:	8019      	strh	r1, [r3, #0]
 8006da6:	2300      	movs	r3, #0
 8006da8:	6123      	str	r3, [r4, #16]
 8006daa:	4616      	mov	r6, r2
 8006dac:	e7bc      	b.n	8006d28 <_printf_i+0x148>
 8006dae:	6833      	ldr	r3, [r6, #0]
 8006db0:	1d1a      	adds	r2, r3, #4
 8006db2:	6032      	str	r2, [r6, #0]
 8006db4:	681e      	ldr	r6, [r3, #0]
 8006db6:	6862      	ldr	r2, [r4, #4]
 8006db8:	2100      	movs	r1, #0
 8006dba:	4630      	mov	r0, r6
 8006dbc:	f7f9 fa28 	bl	8000210 <memchr>
 8006dc0:	b108      	cbz	r0, 8006dc6 <_printf_i+0x1e6>
 8006dc2:	1b80      	subs	r0, r0, r6
 8006dc4:	6060      	str	r0, [r4, #4]
 8006dc6:	6863      	ldr	r3, [r4, #4]
 8006dc8:	6123      	str	r3, [r4, #16]
 8006dca:	2300      	movs	r3, #0
 8006dcc:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8006dd0:	e7aa      	b.n	8006d28 <_printf_i+0x148>
 8006dd2:	6923      	ldr	r3, [r4, #16]
 8006dd4:	4632      	mov	r2, r6
 8006dd6:	4649      	mov	r1, r9
 8006dd8:	4640      	mov	r0, r8
 8006dda:	47d0      	blx	sl
 8006ddc:	3001      	adds	r0, #1
 8006dde:	d0ad      	beq.n	8006d3c <_printf_i+0x15c>
 8006de0:	6823      	ldr	r3, [r4, #0]
 8006de2:	079b      	lsls	r3, r3, #30
 8006de4:	d413      	bmi.n	8006e0e <_printf_i+0x22e>
 8006de6:	68e0      	ldr	r0, [r4, #12]
 8006de8:	9b03      	ldr	r3, [sp, #12]
 8006dea:	4298      	cmp	r0, r3
 8006dec:	bfb8      	it	lt
 8006dee:	4618      	movlt	r0, r3
 8006df0:	e7a6      	b.n	8006d40 <_printf_i+0x160>
 8006df2:	2301      	movs	r3, #1
 8006df4:	4632      	mov	r2, r6
 8006df6:	4649      	mov	r1, r9
 8006df8:	4640      	mov	r0, r8
 8006dfa:	47d0      	blx	sl
 8006dfc:	3001      	adds	r0, #1
 8006dfe:	d09d      	beq.n	8006d3c <_printf_i+0x15c>
 8006e00:	3501      	adds	r5, #1
 8006e02:	68e3      	ldr	r3, [r4, #12]
 8006e04:	9903      	ldr	r1, [sp, #12]
 8006e06:	1a5b      	subs	r3, r3, r1
 8006e08:	42ab      	cmp	r3, r5
 8006e0a:	dcf2      	bgt.n	8006df2 <_printf_i+0x212>
 8006e0c:	e7eb      	b.n	8006de6 <_printf_i+0x206>
 8006e0e:	2500      	movs	r5, #0
 8006e10:	f104 0619 	add.w	r6, r4, #25
 8006e14:	e7f5      	b.n	8006e02 <_printf_i+0x222>
 8006e16:	bf00      	nop
 8006e18:	0800a456 	.word	0x0800a456
 8006e1c:	0800a467 	.word	0x0800a467

08006e20 <std>:
 8006e20:	2300      	movs	r3, #0
 8006e22:	b510      	push	{r4, lr}
 8006e24:	4604      	mov	r4, r0
 8006e26:	e9c0 3300 	strd	r3, r3, [r0]
 8006e2a:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8006e2e:	6083      	str	r3, [r0, #8]
 8006e30:	8181      	strh	r1, [r0, #12]
 8006e32:	6643      	str	r3, [r0, #100]	@ 0x64
 8006e34:	81c2      	strh	r2, [r0, #14]
 8006e36:	6183      	str	r3, [r0, #24]
 8006e38:	4619      	mov	r1, r3
 8006e3a:	2208      	movs	r2, #8
 8006e3c:	305c      	adds	r0, #92	@ 0x5c
 8006e3e:	f000 f928 	bl	8007092 <memset>
 8006e42:	4b0d      	ldr	r3, [pc, #52]	@ (8006e78 <std+0x58>)
 8006e44:	6263      	str	r3, [r4, #36]	@ 0x24
 8006e46:	4b0d      	ldr	r3, [pc, #52]	@ (8006e7c <std+0x5c>)
 8006e48:	62a3      	str	r3, [r4, #40]	@ 0x28
 8006e4a:	4b0d      	ldr	r3, [pc, #52]	@ (8006e80 <std+0x60>)
 8006e4c:	62e3      	str	r3, [r4, #44]	@ 0x2c
 8006e4e:	4b0d      	ldr	r3, [pc, #52]	@ (8006e84 <std+0x64>)
 8006e50:	6323      	str	r3, [r4, #48]	@ 0x30
 8006e52:	4b0d      	ldr	r3, [pc, #52]	@ (8006e88 <std+0x68>)
 8006e54:	6224      	str	r4, [r4, #32]
 8006e56:	429c      	cmp	r4, r3
 8006e58:	d006      	beq.n	8006e68 <std+0x48>
 8006e5a:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 8006e5e:	4294      	cmp	r4, r2
 8006e60:	d002      	beq.n	8006e68 <std+0x48>
 8006e62:	33d0      	adds	r3, #208	@ 0xd0
 8006e64:	429c      	cmp	r4, r3
 8006e66:	d105      	bne.n	8006e74 <std+0x54>
 8006e68:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 8006e6c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8006e70:	f000 b99e 	b.w	80071b0 <__retarget_lock_init_recursive>
 8006e74:	bd10      	pop	{r4, pc}
 8006e76:	bf00      	nop
 8006e78:	0800700d 	.word	0x0800700d
 8006e7c:	0800702f 	.word	0x0800702f
 8006e80:	08007067 	.word	0x08007067
 8006e84:	0800708b 	.word	0x0800708b
 8006e88:	20000604 	.word	0x20000604

08006e8c <stdio_exit_handler>:
 8006e8c:	4a02      	ldr	r2, [pc, #8]	@ (8006e98 <stdio_exit_handler+0xc>)
 8006e8e:	4903      	ldr	r1, [pc, #12]	@ (8006e9c <stdio_exit_handler+0x10>)
 8006e90:	4803      	ldr	r0, [pc, #12]	@ (8006ea0 <stdio_exit_handler+0x14>)
 8006e92:	f000 b869 	b.w	8006f68 <_fwalk_sglue>
 8006e96:	bf00      	nop
 8006e98:	2000000c 	.word	0x2000000c
 8006e9c:	08008b0d 	.word	0x08008b0d
 8006ea0:	2000001c 	.word	0x2000001c

08006ea4 <cleanup_stdio>:
 8006ea4:	6841      	ldr	r1, [r0, #4]
 8006ea6:	4b0c      	ldr	r3, [pc, #48]	@ (8006ed8 <cleanup_stdio+0x34>)
 8006ea8:	4299      	cmp	r1, r3
 8006eaa:	b510      	push	{r4, lr}
 8006eac:	4604      	mov	r4, r0
 8006eae:	d001      	beq.n	8006eb4 <cleanup_stdio+0x10>
 8006eb0:	f001 fe2c 	bl	8008b0c <_fflush_r>
 8006eb4:	68a1      	ldr	r1, [r4, #8]
 8006eb6:	4b09      	ldr	r3, [pc, #36]	@ (8006edc <cleanup_stdio+0x38>)
 8006eb8:	4299      	cmp	r1, r3
 8006eba:	d002      	beq.n	8006ec2 <cleanup_stdio+0x1e>
 8006ebc:	4620      	mov	r0, r4
 8006ebe:	f001 fe25 	bl	8008b0c <_fflush_r>
 8006ec2:	68e1      	ldr	r1, [r4, #12]
 8006ec4:	4b06      	ldr	r3, [pc, #24]	@ (8006ee0 <cleanup_stdio+0x3c>)
 8006ec6:	4299      	cmp	r1, r3
 8006ec8:	d004      	beq.n	8006ed4 <cleanup_stdio+0x30>
 8006eca:	4620      	mov	r0, r4
 8006ecc:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8006ed0:	f001 be1c 	b.w	8008b0c <_fflush_r>
 8006ed4:	bd10      	pop	{r4, pc}
 8006ed6:	bf00      	nop
 8006ed8:	20000604 	.word	0x20000604
 8006edc:	2000066c 	.word	0x2000066c
 8006ee0:	200006d4 	.word	0x200006d4

08006ee4 <global_stdio_init.part.0>:
 8006ee4:	b510      	push	{r4, lr}
 8006ee6:	4b0b      	ldr	r3, [pc, #44]	@ (8006f14 <global_stdio_init.part.0+0x30>)
 8006ee8:	4c0b      	ldr	r4, [pc, #44]	@ (8006f18 <global_stdio_init.part.0+0x34>)
 8006eea:	4a0c      	ldr	r2, [pc, #48]	@ (8006f1c <global_stdio_init.part.0+0x38>)
 8006eec:	601a      	str	r2, [r3, #0]
 8006eee:	4620      	mov	r0, r4
 8006ef0:	2200      	movs	r2, #0
 8006ef2:	2104      	movs	r1, #4
 8006ef4:	f7ff ff94 	bl	8006e20 <std>
 8006ef8:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 8006efc:	2201      	movs	r2, #1
 8006efe:	2109      	movs	r1, #9
 8006f00:	f7ff ff8e 	bl	8006e20 <std>
 8006f04:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 8006f08:	2202      	movs	r2, #2
 8006f0a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8006f0e:	2112      	movs	r1, #18
 8006f10:	f7ff bf86 	b.w	8006e20 <std>
 8006f14:	2000073c 	.word	0x2000073c
 8006f18:	20000604 	.word	0x20000604
 8006f1c:	08006e8d 	.word	0x08006e8d

08006f20 <__sfp_lock_acquire>:
 8006f20:	4801      	ldr	r0, [pc, #4]	@ (8006f28 <__sfp_lock_acquire+0x8>)
 8006f22:	f000 b946 	b.w	80071b2 <__retarget_lock_acquire_recursive>
 8006f26:	bf00      	nop
 8006f28:	20000745 	.word	0x20000745

08006f2c <__sfp_lock_release>:
 8006f2c:	4801      	ldr	r0, [pc, #4]	@ (8006f34 <__sfp_lock_release+0x8>)
 8006f2e:	f000 b941 	b.w	80071b4 <__retarget_lock_release_recursive>
 8006f32:	bf00      	nop
 8006f34:	20000745 	.word	0x20000745

08006f38 <__sinit>:
 8006f38:	b510      	push	{r4, lr}
 8006f3a:	4604      	mov	r4, r0
 8006f3c:	f7ff fff0 	bl	8006f20 <__sfp_lock_acquire>
 8006f40:	6a23      	ldr	r3, [r4, #32]
 8006f42:	b11b      	cbz	r3, 8006f4c <__sinit+0x14>
 8006f44:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8006f48:	f7ff bff0 	b.w	8006f2c <__sfp_lock_release>
 8006f4c:	4b04      	ldr	r3, [pc, #16]	@ (8006f60 <__sinit+0x28>)
 8006f4e:	6223      	str	r3, [r4, #32]
 8006f50:	4b04      	ldr	r3, [pc, #16]	@ (8006f64 <__sinit+0x2c>)
 8006f52:	681b      	ldr	r3, [r3, #0]
 8006f54:	2b00      	cmp	r3, #0
 8006f56:	d1f5      	bne.n	8006f44 <__sinit+0xc>
 8006f58:	f7ff ffc4 	bl	8006ee4 <global_stdio_init.part.0>
 8006f5c:	e7f2      	b.n	8006f44 <__sinit+0xc>
 8006f5e:	bf00      	nop
 8006f60:	08006ea5 	.word	0x08006ea5
 8006f64:	2000073c 	.word	0x2000073c

08006f68 <_fwalk_sglue>:
 8006f68:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8006f6c:	4607      	mov	r7, r0
 8006f6e:	4688      	mov	r8, r1
 8006f70:	4614      	mov	r4, r2
 8006f72:	2600      	movs	r6, #0
 8006f74:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8006f78:	f1b9 0901 	subs.w	r9, r9, #1
 8006f7c:	d505      	bpl.n	8006f8a <_fwalk_sglue+0x22>
 8006f7e:	6824      	ldr	r4, [r4, #0]
 8006f80:	2c00      	cmp	r4, #0
 8006f82:	d1f7      	bne.n	8006f74 <_fwalk_sglue+0xc>
 8006f84:	4630      	mov	r0, r6
 8006f86:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8006f8a:	89ab      	ldrh	r3, [r5, #12]
 8006f8c:	2b01      	cmp	r3, #1
 8006f8e:	d907      	bls.n	8006fa0 <_fwalk_sglue+0x38>
 8006f90:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8006f94:	3301      	adds	r3, #1
 8006f96:	d003      	beq.n	8006fa0 <_fwalk_sglue+0x38>
 8006f98:	4629      	mov	r1, r5
 8006f9a:	4638      	mov	r0, r7
 8006f9c:	47c0      	blx	r8
 8006f9e:	4306      	orrs	r6, r0
 8006fa0:	3568      	adds	r5, #104	@ 0x68
 8006fa2:	e7e9      	b.n	8006f78 <_fwalk_sglue+0x10>

08006fa4 <sniprintf>:
 8006fa4:	b40c      	push	{r2, r3}
 8006fa6:	b530      	push	{r4, r5, lr}
 8006fa8:	4b17      	ldr	r3, [pc, #92]	@ (8007008 <sniprintf+0x64>)
 8006faa:	1e0c      	subs	r4, r1, #0
 8006fac:	681d      	ldr	r5, [r3, #0]
 8006fae:	b09d      	sub	sp, #116	@ 0x74
 8006fb0:	da08      	bge.n	8006fc4 <sniprintf+0x20>
 8006fb2:	238b      	movs	r3, #139	@ 0x8b
 8006fb4:	602b      	str	r3, [r5, #0]
 8006fb6:	f04f 30ff 	mov.w	r0, #4294967295
 8006fba:	b01d      	add	sp, #116	@ 0x74
 8006fbc:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8006fc0:	b002      	add	sp, #8
 8006fc2:	4770      	bx	lr
 8006fc4:	f44f 7302 	mov.w	r3, #520	@ 0x208
 8006fc8:	f8ad 3014 	strh.w	r3, [sp, #20]
 8006fcc:	bf14      	ite	ne
 8006fce:	f104 33ff 	addne.w	r3, r4, #4294967295
 8006fd2:	4623      	moveq	r3, r4
 8006fd4:	9304      	str	r3, [sp, #16]
 8006fd6:	9307      	str	r3, [sp, #28]
 8006fd8:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8006fdc:	9002      	str	r0, [sp, #8]
 8006fde:	9006      	str	r0, [sp, #24]
 8006fe0:	f8ad 3016 	strh.w	r3, [sp, #22]
 8006fe4:	9a20      	ldr	r2, [sp, #128]	@ 0x80
 8006fe6:	ab21      	add	r3, sp, #132	@ 0x84
 8006fe8:	a902      	add	r1, sp, #8
 8006fea:	4628      	mov	r0, r5
 8006fec:	9301      	str	r3, [sp, #4]
 8006fee:	f001 fc0d 	bl	800880c <_svfiprintf_r>
 8006ff2:	1c43      	adds	r3, r0, #1
 8006ff4:	bfbc      	itt	lt
 8006ff6:	238b      	movlt	r3, #139	@ 0x8b
 8006ff8:	602b      	strlt	r3, [r5, #0]
 8006ffa:	2c00      	cmp	r4, #0
 8006ffc:	d0dd      	beq.n	8006fba <sniprintf+0x16>
 8006ffe:	9b02      	ldr	r3, [sp, #8]
 8007000:	2200      	movs	r2, #0
 8007002:	701a      	strb	r2, [r3, #0]
 8007004:	e7d9      	b.n	8006fba <sniprintf+0x16>
 8007006:	bf00      	nop
 8007008:	20000018 	.word	0x20000018

0800700c <__sread>:
 800700c:	b510      	push	{r4, lr}
 800700e:	460c      	mov	r4, r1
 8007010:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8007014:	f000 f87e 	bl	8007114 <_read_r>
 8007018:	2800      	cmp	r0, #0
 800701a:	bfab      	itete	ge
 800701c:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 800701e:	89a3      	ldrhlt	r3, [r4, #12]
 8007020:	181b      	addge	r3, r3, r0
 8007022:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 8007026:	bfac      	ite	ge
 8007028:	6563      	strge	r3, [r4, #84]	@ 0x54
 800702a:	81a3      	strhlt	r3, [r4, #12]
 800702c:	bd10      	pop	{r4, pc}

0800702e <__swrite>:
 800702e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8007032:	461f      	mov	r7, r3
 8007034:	898b      	ldrh	r3, [r1, #12]
 8007036:	05db      	lsls	r3, r3, #23
 8007038:	4605      	mov	r5, r0
 800703a:	460c      	mov	r4, r1
 800703c:	4616      	mov	r6, r2
 800703e:	d505      	bpl.n	800704c <__swrite+0x1e>
 8007040:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8007044:	2302      	movs	r3, #2
 8007046:	2200      	movs	r2, #0
 8007048:	f000 f852 	bl	80070f0 <_lseek_r>
 800704c:	89a3      	ldrh	r3, [r4, #12]
 800704e:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8007052:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8007056:	81a3      	strh	r3, [r4, #12]
 8007058:	4632      	mov	r2, r6
 800705a:	463b      	mov	r3, r7
 800705c:	4628      	mov	r0, r5
 800705e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8007062:	f000 b869 	b.w	8007138 <_write_r>

08007066 <__sseek>:
 8007066:	b510      	push	{r4, lr}
 8007068:	460c      	mov	r4, r1
 800706a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800706e:	f000 f83f 	bl	80070f0 <_lseek_r>
 8007072:	1c43      	adds	r3, r0, #1
 8007074:	89a3      	ldrh	r3, [r4, #12]
 8007076:	bf15      	itete	ne
 8007078:	6560      	strne	r0, [r4, #84]	@ 0x54
 800707a:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 800707e:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 8007082:	81a3      	strheq	r3, [r4, #12]
 8007084:	bf18      	it	ne
 8007086:	81a3      	strhne	r3, [r4, #12]
 8007088:	bd10      	pop	{r4, pc}

0800708a <__sclose>:
 800708a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800708e:	f000 b81f 	b.w	80070d0 <_close_r>

08007092 <memset>:
 8007092:	4402      	add	r2, r0
 8007094:	4603      	mov	r3, r0
 8007096:	4293      	cmp	r3, r2
 8007098:	d100      	bne.n	800709c <memset+0xa>
 800709a:	4770      	bx	lr
 800709c:	f803 1b01 	strb.w	r1, [r3], #1
 80070a0:	e7f9      	b.n	8007096 <memset+0x4>

080070a2 <strncpy>:
 80070a2:	b510      	push	{r4, lr}
 80070a4:	3901      	subs	r1, #1
 80070a6:	4603      	mov	r3, r0
 80070a8:	b132      	cbz	r2, 80070b8 <strncpy+0x16>
 80070aa:	f811 4f01 	ldrb.w	r4, [r1, #1]!
 80070ae:	f803 4b01 	strb.w	r4, [r3], #1
 80070b2:	3a01      	subs	r2, #1
 80070b4:	2c00      	cmp	r4, #0
 80070b6:	d1f7      	bne.n	80070a8 <strncpy+0x6>
 80070b8:	441a      	add	r2, r3
 80070ba:	2100      	movs	r1, #0
 80070bc:	4293      	cmp	r3, r2
 80070be:	d100      	bne.n	80070c2 <strncpy+0x20>
 80070c0:	bd10      	pop	{r4, pc}
 80070c2:	f803 1b01 	strb.w	r1, [r3], #1
 80070c6:	e7f9      	b.n	80070bc <strncpy+0x1a>

080070c8 <_localeconv_r>:
 80070c8:	4800      	ldr	r0, [pc, #0]	@ (80070cc <_localeconv_r+0x4>)
 80070ca:	4770      	bx	lr
 80070cc:	20000158 	.word	0x20000158

080070d0 <_close_r>:
 80070d0:	b538      	push	{r3, r4, r5, lr}
 80070d2:	4d06      	ldr	r5, [pc, #24]	@ (80070ec <_close_r+0x1c>)
 80070d4:	2300      	movs	r3, #0
 80070d6:	4604      	mov	r4, r0
 80070d8:	4608      	mov	r0, r1
 80070da:	602b      	str	r3, [r5, #0]
 80070dc:	f7fa ffda 	bl	8002094 <_close>
 80070e0:	1c43      	adds	r3, r0, #1
 80070e2:	d102      	bne.n	80070ea <_close_r+0x1a>
 80070e4:	682b      	ldr	r3, [r5, #0]
 80070e6:	b103      	cbz	r3, 80070ea <_close_r+0x1a>
 80070e8:	6023      	str	r3, [r4, #0]
 80070ea:	bd38      	pop	{r3, r4, r5, pc}
 80070ec:	20000740 	.word	0x20000740

080070f0 <_lseek_r>:
 80070f0:	b538      	push	{r3, r4, r5, lr}
 80070f2:	4d07      	ldr	r5, [pc, #28]	@ (8007110 <_lseek_r+0x20>)
 80070f4:	4604      	mov	r4, r0
 80070f6:	4608      	mov	r0, r1
 80070f8:	4611      	mov	r1, r2
 80070fa:	2200      	movs	r2, #0
 80070fc:	602a      	str	r2, [r5, #0]
 80070fe:	461a      	mov	r2, r3
 8007100:	f7fa ffef 	bl	80020e2 <_lseek>
 8007104:	1c43      	adds	r3, r0, #1
 8007106:	d102      	bne.n	800710e <_lseek_r+0x1e>
 8007108:	682b      	ldr	r3, [r5, #0]
 800710a:	b103      	cbz	r3, 800710e <_lseek_r+0x1e>
 800710c:	6023      	str	r3, [r4, #0]
 800710e:	bd38      	pop	{r3, r4, r5, pc}
 8007110:	20000740 	.word	0x20000740

08007114 <_read_r>:
 8007114:	b538      	push	{r3, r4, r5, lr}
 8007116:	4d07      	ldr	r5, [pc, #28]	@ (8007134 <_read_r+0x20>)
 8007118:	4604      	mov	r4, r0
 800711a:	4608      	mov	r0, r1
 800711c:	4611      	mov	r1, r2
 800711e:	2200      	movs	r2, #0
 8007120:	602a      	str	r2, [r5, #0]
 8007122:	461a      	mov	r2, r3
 8007124:	f7fa ff7d 	bl	8002022 <_read>
 8007128:	1c43      	adds	r3, r0, #1
 800712a:	d102      	bne.n	8007132 <_read_r+0x1e>
 800712c:	682b      	ldr	r3, [r5, #0]
 800712e:	b103      	cbz	r3, 8007132 <_read_r+0x1e>
 8007130:	6023      	str	r3, [r4, #0]
 8007132:	bd38      	pop	{r3, r4, r5, pc}
 8007134:	20000740 	.word	0x20000740

08007138 <_write_r>:
 8007138:	b538      	push	{r3, r4, r5, lr}
 800713a:	4d07      	ldr	r5, [pc, #28]	@ (8007158 <_write_r+0x20>)
 800713c:	4604      	mov	r4, r0
 800713e:	4608      	mov	r0, r1
 8007140:	4611      	mov	r1, r2
 8007142:	2200      	movs	r2, #0
 8007144:	602a      	str	r2, [r5, #0]
 8007146:	461a      	mov	r2, r3
 8007148:	f7fa ff88 	bl	800205c <_write>
 800714c:	1c43      	adds	r3, r0, #1
 800714e:	d102      	bne.n	8007156 <_write_r+0x1e>
 8007150:	682b      	ldr	r3, [r5, #0]
 8007152:	b103      	cbz	r3, 8007156 <_write_r+0x1e>
 8007154:	6023      	str	r3, [r4, #0]
 8007156:	bd38      	pop	{r3, r4, r5, pc}
 8007158:	20000740 	.word	0x20000740

0800715c <__errno>:
 800715c:	4b01      	ldr	r3, [pc, #4]	@ (8007164 <__errno+0x8>)
 800715e:	6818      	ldr	r0, [r3, #0]
 8007160:	4770      	bx	lr
 8007162:	bf00      	nop
 8007164:	20000018 	.word	0x20000018

08007168 <__libc_init_array>:
 8007168:	b570      	push	{r4, r5, r6, lr}
 800716a:	4d0d      	ldr	r5, [pc, #52]	@ (80071a0 <__libc_init_array+0x38>)
 800716c:	4c0d      	ldr	r4, [pc, #52]	@ (80071a4 <__libc_init_array+0x3c>)
 800716e:	1b64      	subs	r4, r4, r5
 8007170:	10a4      	asrs	r4, r4, #2
 8007172:	2600      	movs	r6, #0
 8007174:	42a6      	cmp	r6, r4
 8007176:	d109      	bne.n	800718c <__libc_init_array+0x24>
 8007178:	4d0b      	ldr	r5, [pc, #44]	@ (80071a8 <__libc_init_array+0x40>)
 800717a:	4c0c      	ldr	r4, [pc, #48]	@ (80071ac <__libc_init_array+0x44>)
 800717c:	f003 f8e8 	bl	800a350 <_init>
 8007180:	1b64      	subs	r4, r4, r5
 8007182:	10a4      	asrs	r4, r4, #2
 8007184:	2600      	movs	r6, #0
 8007186:	42a6      	cmp	r6, r4
 8007188:	d105      	bne.n	8007196 <__libc_init_array+0x2e>
 800718a:	bd70      	pop	{r4, r5, r6, pc}
 800718c:	f855 3b04 	ldr.w	r3, [r5], #4
 8007190:	4798      	blx	r3
 8007192:	3601      	adds	r6, #1
 8007194:	e7ee      	b.n	8007174 <__libc_init_array+0xc>
 8007196:	f855 3b04 	ldr.w	r3, [r5], #4
 800719a:	4798      	blx	r3
 800719c:	3601      	adds	r6, #1
 800719e:	e7f2      	b.n	8007186 <__libc_init_array+0x1e>
 80071a0:	0800a998 	.word	0x0800a998
 80071a4:	0800a998 	.word	0x0800a998
 80071a8:	0800a998 	.word	0x0800a998
 80071ac:	0800a99c 	.word	0x0800a99c

080071b0 <__retarget_lock_init_recursive>:
 80071b0:	4770      	bx	lr

080071b2 <__retarget_lock_acquire_recursive>:
 80071b2:	4770      	bx	lr

080071b4 <__retarget_lock_release_recursive>:
 80071b4:	4770      	bx	lr

080071b6 <quorem>:
 80071b6:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80071ba:	6903      	ldr	r3, [r0, #16]
 80071bc:	690c      	ldr	r4, [r1, #16]
 80071be:	42a3      	cmp	r3, r4
 80071c0:	4607      	mov	r7, r0
 80071c2:	db7e      	blt.n	80072c2 <quorem+0x10c>
 80071c4:	3c01      	subs	r4, #1
 80071c6:	f101 0814 	add.w	r8, r1, #20
 80071ca:	00a3      	lsls	r3, r4, #2
 80071cc:	f100 0514 	add.w	r5, r0, #20
 80071d0:	9300      	str	r3, [sp, #0]
 80071d2:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 80071d6:	9301      	str	r3, [sp, #4]
 80071d8:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 80071dc:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 80071e0:	3301      	adds	r3, #1
 80071e2:	429a      	cmp	r2, r3
 80071e4:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 80071e8:	fbb2 f6f3 	udiv	r6, r2, r3
 80071ec:	d32e      	bcc.n	800724c <quorem+0x96>
 80071ee:	f04f 0a00 	mov.w	sl, #0
 80071f2:	46c4      	mov	ip, r8
 80071f4:	46ae      	mov	lr, r5
 80071f6:	46d3      	mov	fp, sl
 80071f8:	f85c 3b04 	ldr.w	r3, [ip], #4
 80071fc:	b298      	uxth	r0, r3
 80071fe:	fb06 a000 	mla	r0, r6, r0, sl
 8007202:	0c02      	lsrs	r2, r0, #16
 8007204:	0c1b      	lsrs	r3, r3, #16
 8007206:	fb06 2303 	mla	r3, r6, r3, r2
 800720a:	f8de 2000 	ldr.w	r2, [lr]
 800720e:	b280      	uxth	r0, r0
 8007210:	b292      	uxth	r2, r2
 8007212:	1a12      	subs	r2, r2, r0
 8007214:	445a      	add	r2, fp
 8007216:	f8de 0000 	ldr.w	r0, [lr]
 800721a:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 800721e:	b29b      	uxth	r3, r3
 8007220:	ebc3 4322 	rsb	r3, r3, r2, asr #16
 8007224:	eb03 4310 	add.w	r3, r3, r0, lsr #16
 8007228:	b292      	uxth	r2, r2
 800722a:	ea42 4203 	orr.w	r2, r2, r3, lsl #16
 800722e:	45e1      	cmp	r9, ip
 8007230:	f84e 2b04 	str.w	r2, [lr], #4
 8007234:	ea4f 4b23 	mov.w	fp, r3, asr #16
 8007238:	d2de      	bcs.n	80071f8 <quorem+0x42>
 800723a:	9b00      	ldr	r3, [sp, #0]
 800723c:	58eb      	ldr	r3, [r5, r3]
 800723e:	b92b      	cbnz	r3, 800724c <quorem+0x96>
 8007240:	9b01      	ldr	r3, [sp, #4]
 8007242:	3b04      	subs	r3, #4
 8007244:	429d      	cmp	r5, r3
 8007246:	461a      	mov	r2, r3
 8007248:	d32f      	bcc.n	80072aa <quorem+0xf4>
 800724a:	613c      	str	r4, [r7, #16]
 800724c:	4638      	mov	r0, r7
 800724e:	f001 f979 	bl	8008544 <__mcmp>
 8007252:	2800      	cmp	r0, #0
 8007254:	db25      	blt.n	80072a2 <quorem+0xec>
 8007256:	4629      	mov	r1, r5
 8007258:	2000      	movs	r0, #0
 800725a:	f858 2b04 	ldr.w	r2, [r8], #4
 800725e:	f8d1 c000 	ldr.w	ip, [r1]
 8007262:	fa1f fe82 	uxth.w	lr, r2
 8007266:	fa1f f38c 	uxth.w	r3, ip
 800726a:	eba3 030e 	sub.w	r3, r3, lr
 800726e:	4403      	add	r3, r0
 8007270:	0c12      	lsrs	r2, r2, #16
 8007272:	ebc2 4223 	rsb	r2, r2, r3, asr #16
 8007276:	eb02 421c 	add.w	r2, r2, ip, lsr #16
 800727a:	b29b      	uxth	r3, r3
 800727c:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8007280:	45c1      	cmp	r9, r8
 8007282:	f841 3b04 	str.w	r3, [r1], #4
 8007286:	ea4f 4022 	mov.w	r0, r2, asr #16
 800728a:	d2e6      	bcs.n	800725a <quorem+0xa4>
 800728c:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8007290:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8007294:	b922      	cbnz	r2, 80072a0 <quorem+0xea>
 8007296:	3b04      	subs	r3, #4
 8007298:	429d      	cmp	r5, r3
 800729a:	461a      	mov	r2, r3
 800729c:	d30b      	bcc.n	80072b6 <quorem+0x100>
 800729e:	613c      	str	r4, [r7, #16]
 80072a0:	3601      	adds	r6, #1
 80072a2:	4630      	mov	r0, r6
 80072a4:	b003      	add	sp, #12
 80072a6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80072aa:	6812      	ldr	r2, [r2, #0]
 80072ac:	3b04      	subs	r3, #4
 80072ae:	2a00      	cmp	r2, #0
 80072b0:	d1cb      	bne.n	800724a <quorem+0x94>
 80072b2:	3c01      	subs	r4, #1
 80072b4:	e7c6      	b.n	8007244 <quorem+0x8e>
 80072b6:	6812      	ldr	r2, [r2, #0]
 80072b8:	3b04      	subs	r3, #4
 80072ba:	2a00      	cmp	r2, #0
 80072bc:	d1ef      	bne.n	800729e <quorem+0xe8>
 80072be:	3c01      	subs	r4, #1
 80072c0:	e7ea      	b.n	8007298 <quorem+0xe2>
 80072c2:	2000      	movs	r0, #0
 80072c4:	e7ee      	b.n	80072a4 <quorem+0xee>
	...

080072c8 <_dtoa_r>:
 80072c8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80072cc:	69c7      	ldr	r7, [r0, #28]
 80072ce:	b099      	sub	sp, #100	@ 0x64
 80072d0:	ed8d 0b02 	vstr	d0, [sp, #8]
 80072d4:	ec55 4b10 	vmov	r4, r5, d0
 80072d8:	9e22      	ldr	r6, [sp, #136]	@ 0x88
 80072da:	9109      	str	r1, [sp, #36]	@ 0x24
 80072dc:	4683      	mov	fp, r0
 80072de:	920e      	str	r2, [sp, #56]	@ 0x38
 80072e0:	9313      	str	r3, [sp, #76]	@ 0x4c
 80072e2:	b97f      	cbnz	r7, 8007304 <_dtoa_r+0x3c>
 80072e4:	2010      	movs	r0, #16
 80072e6:	f000 fdfd 	bl	8007ee4 <malloc>
 80072ea:	4602      	mov	r2, r0
 80072ec:	f8cb 001c 	str.w	r0, [fp, #28]
 80072f0:	b920      	cbnz	r0, 80072fc <_dtoa_r+0x34>
 80072f2:	4ba7      	ldr	r3, [pc, #668]	@ (8007590 <_dtoa_r+0x2c8>)
 80072f4:	21ef      	movs	r1, #239	@ 0xef
 80072f6:	48a7      	ldr	r0, [pc, #668]	@ (8007594 <_dtoa_r+0x2cc>)
 80072f8:	f001 fc68 	bl	8008bcc <__assert_func>
 80072fc:	e9c0 7701 	strd	r7, r7, [r0, #4]
 8007300:	6007      	str	r7, [r0, #0]
 8007302:	60c7      	str	r7, [r0, #12]
 8007304:	f8db 301c 	ldr.w	r3, [fp, #28]
 8007308:	6819      	ldr	r1, [r3, #0]
 800730a:	b159      	cbz	r1, 8007324 <_dtoa_r+0x5c>
 800730c:	685a      	ldr	r2, [r3, #4]
 800730e:	604a      	str	r2, [r1, #4]
 8007310:	2301      	movs	r3, #1
 8007312:	4093      	lsls	r3, r2
 8007314:	608b      	str	r3, [r1, #8]
 8007316:	4658      	mov	r0, fp
 8007318:	f000 feda 	bl	80080d0 <_Bfree>
 800731c:	f8db 301c 	ldr.w	r3, [fp, #28]
 8007320:	2200      	movs	r2, #0
 8007322:	601a      	str	r2, [r3, #0]
 8007324:	1e2b      	subs	r3, r5, #0
 8007326:	bfb9      	ittee	lt
 8007328:	f023 4300 	biclt.w	r3, r3, #2147483648	@ 0x80000000
 800732c:	9303      	strlt	r3, [sp, #12]
 800732e:	2300      	movge	r3, #0
 8007330:	6033      	strge	r3, [r6, #0]
 8007332:	9f03      	ldr	r7, [sp, #12]
 8007334:	4b98      	ldr	r3, [pc, #608]	@ (8007598 <_dtoa_r+0x2d0>)
 8007336:	bfbc      	itt	lt
 8007338:	2201      	movlt	r2, #1
 800733a:	6032      	strlt	r2, [r6, #0]
 800733c:	43bb      	bics	r3, r7
 800733e:	d112      	bne.n	8007366 <_dtoa_r+0x9e>
 8007340:	9a13      	ldr	r2, [sp, #76]	@ 0x4c
 8007342:	f242 730f 	movw	r3, #9999	@ 0x270f
 8007346:	6013      	str	r3, [r2, #0]
 8007348:	f3c7 0313 	ubfx	r3, r7, #0, #20
 800734c:	4323      	orrs	r3, r4
 800734e:	f000 854d 	beq.w	8007dec <_dtoa_r+0xb24>
 8007352:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 8007354:	f8df a254 	ldr.w	sl, [pc, #596]	@ 80075ac <_dtoa_r+0x2e4>
 8007358:	2b00      	cmp	r3, #0
 800735a:	f000 854f 	beq.w	8007dfc <_dtoa_r+0xb34>
 800735e:	f10a 0303 	add.w	r3, sl, #3
 8007362:	f000 bd49 	b.w	8007df8 <_dtoa_r+0xb30>
 8007366:	ed9d 7b02 	vldr	d7, [sp, #8]
 800736a:	2200      	movs	r2, #0
 800736c:	ec51 0b17 	vmov	r0, r1, d7
 8007370:	2300      	movs	r3, #0
 8007372:	ed8d 7b0c 	vstr	d7, [sp, #48]	@ 0x30
 8007376:	f7f9 fbc7 	bl	8000b08 <__aeabi_dcmpeq>
 800737a:	4680      	mov	r8, r0
 800737c:	b158      	cbz	r0, 8007396 <_dtoa_r+0xce>
 800737e:	9a13      	ldr	r2, [sp, #76]	@ 0x4c
 8007380:	2301      	movs	r3, #1
 8007382:	6013      	str	r3, [r2, #0]
 8007384:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 8007386:	b113      	cbz	r3, 800738e <_dtoa_r+0xc6>
 8007388:	9a23      	ldr	r2, [sp, #140]	@ 0x8c
 800738a:	4b84      	ldr	r3, [pc, #528]	@ (800759c <_dtoa_r+0x2d4>)
 800738c:	6013      	str	r3, [r2, #0]
 800738e:	f8df a220 	ldr.w	sl, [pc, #544]	@ 80075b0 <_dtoa_r+0x2e8>
 8007392:	f000 bd33 	b.w	8007dfc <_dtoa_r+0xb34>
 8007396:	ed9d 0b0c 	vldr	d0, [sp, #48]	@ 0x30
 800739a:	aa16      	add	r2, sp, #88	@ 0x58
 800739c:	a917      	add	r1, sp, #92	@ 0x5c
 800739e:	4658      	mov	r0, fp
 80073a0:	f001 f980 	bl	80086a4 <__d2b>
 80073a4:	f3c7 560a 	ubfx	r6, r7, #20, #11
 80073a8:	4681      	mov	r9, r0
 80073aa:	2e00      	cmp	r6, #0
 80073ac:	d077      	beq.n	800749e <_dtoa_r+0x1d6>
 80073ae:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 80073b0:	f8cd 8050 	str.w	r8, [sp, #80]	@ 0x50
 80073b4:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80073b8:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 80073bc:	f043 537f 	orr.w	r3, r3, #1069547520	@ 0x3fc00000
 80073c0:	f443 1340 	orr.w	r3, r3, #3145728	@ 0x300000
 80073c4:	f2a6 36ff 	subw	r6, r6, #1023	@ 0x3ff
 80073c8:	4619      	mov	r1, r3
 80073ca:	2200      	movs	r2, #0
 80073cc:	4b74      	ldr	r3, [pc, #464]	@ (80075a0 <_dtoa_r+0x2d8>)
 80073ce:	f7f8 ff7b 	bl	80002c8 <__aeabi_dsub>
 80073d2:	a369      	add	r3, pc, #420	@ (adr r3, 8007578 <_dtoa_r+0x2b0>)
 80073d4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80073d8:	f7f9 f92e 	bl	8000638 <__aeabi_dmul>
 80073dc:	a368      	add	r3, pc, #416	@ (adr r3, 8007580 <_dtoa_r+0x2b8>)
 80073de:	e9d3 2300 	ldrd	r2, r3, [r3]
 80073e2:	f7f8 ff73 	bl	80002cc <__adddf3>
 80073e6:	4604      	mov	r4, r0
 80073e8:	4630      	mov	r0, r6
 80073ea:	460d      	mov	r5, r1
 80073ec:	f7f9 f8ba 	bl	8000564 <__aeabi_i2d>
 80073f0:	a365      	add	r3, pc, #404	@ (adr r3, 8007588 <_dtoa_r+0x2c0>)
 80073f2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80073f6:	f7f9 f91f 	bl	8000638 <__aeabi_dmul>
 80073fa:	4602      	mov	r2, r0
 80073fc:	460b      	mov	r3, r1
 80073fe:	4620      	mov	r0, r4
 8007400:	4629      	mov	r1, r5
 8007402:	f7f8 ff63 	bl	80002cc <__adddf3>
 8007406:	4604      	mov	r4, r0
 8007408:	460d      	mov	r5, r1
 800740a:	f7f9 fbc5 	bl	8000b98 <__aeabi_d2iz>
 800740e:	2200      	movs	r2, #0
 8007410:	4607      	mov	r7, r0
 8007412:	2300      	movs	r3, #0
 8007414:	4620      	mov	r0, r4
 8007416:	4629      	mov	r1, r5
 8007418:	f7f9 fb80 	bl	8000b1c <__aeabi_dcmplt>
 800741c:	b140      	cbz	r0, 8007430 <_dtoa_r+0x168>
 800741e:	4638      	mov	r0, r7
 8007420:	f7f9 f8a0 	bl	8000564 <__aeabi_i2d>
 8007424:	4622      	mov	r2, r4
 8007426:	462b      	mov	r3, r5
 8007428:	f7f9 fb6e 	bl	8000b08 <__aeabi_dcmpeq>
 800742c:	b900      	cbnz	r0, 8007430 <_dtoa_r+0x168>
 800742e:	3f01      	subs	r7, #1
 8007430:	2f16      	cmp	r7, #22
 8007432:	d851      	bhi.n	80074d8 <_dtoa_r+0x210>
 8007434:	4b5b      	ldr	r3, [pc, #364]	@ (80075a4 <_dtoa_r+0x2dc>)
 8007436:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 800743a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800743e:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8007442:	f7f9 fb6b 	bl	8000b1c <__aeabi_dcmplt>
 8007446:	2800      	cmp	r0, #0
 8007448:	d048      	beq.n	80074dc <_dtoa_r+0x214>
 800744a:	3f01      	subs	r7, #1
 800744c:	2300      	movs	r3, #0
 800744e:	9312      	str	r3, [sp, #72]	@ 0x48
 8007450:	9b16      	ldr	r3, [sp, #88]	@ 0x58
 8007452:	1b9b      	subs	r3, r3, r6
 8007454:	1e5a      	subs	r2, r3, #1
 8007456:	bf44      	itt	mi
 8007458:	f1c3 0801 	rsbmi	r8, r3, #1
 800745c:	2300      	movmi	r3, #0
 800745e:	9208      	str	r2, [sp, #32]
 8007460:	bf54      	ite	pl
 8007462:	f04f 0800 	movpl.w	r8, #0
 8007466:	9308      	strmi	r3, [sp, #32]
 8007468:	2f00      	cmp	r7, #0
 800746a:	db39      	blt.n	80074e0 <_dtoa_r+0x218>
 800746c:	9b08      	ldr	r3, [sp, #32]
 800746e:	970f      	str	r7, [sp, #60]	@ 0x3c
 8007470:	443b      	add	r3, r7
 8007472:	9308      	str	r3, [sp, #32]
 8007474:	2300      	movs	r3, #0
 8007476:	930a      	str	r3, [sp, #40]	@ 0x28
 8007478:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800747a:	2b09      	cmp	r3, #9
 800747c:	d864      	bhi.n	8007548 <_dtoa_r+0x280>
 800747e:	2b05      	cmp	r3, #5
 8007480:	bfc4      	itt	gt
 8007482:	3b04      	subgt	r3, #4
 8007484:	9309      	strgt	r3, [sp, #36]	@ 0x24
 8007486:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8007488:	f1a3 0302 	sub.w	r3, r3, #2
 800748c:	bfcc      	ite	gt
 800748e:	2400      	movgt	r4, #0
 8007490:	2401      	movle	r4, #1
 8007492:	2b03      	cmp	r3, #3
 8007494:	d863      	bhi.n	800755e <_dtoa_r+0x296>
 8007496:	e8df f003 	tbb	[pc, r3]
 800749a:	372a      	.short	0x372a
 800749c:	5535      	.short	0x5535
 800749e:	e9dd 6316 	ldrd	r6, r3, [sp, #88]	@ 0x58
 80074a2:	441e      	add	r6, r3
 80074a4:	f206 4332 	addw	r3, r6, #1074	@ 0x432
 80074a8:	2b20      	cmp	r3, #32
 80074aa:	bfc1      	itttt	gt
 80074ac:	f1c3 0340 	rsbgt	r3, r3, #64	@ 0x40
 80074b0:	409f      	lslgt	r7, r3
 80074b2:	f206 4312 	addwgt	r3, r6, #1042	@ 0x412
 80074b6:	fa24 f303 	lsrgt.w	r3, r4, r3
 80074ba:	bfd6      	itet	le
 80074bc:	f1c3 0320 	rsble	r3, r3, #32
 80074c0:	ea47 0003 	orrgt.w	r0, r7, r3
 80074c4:	fa04 f003 	lslle.w	r0, r4, r3
 80074c8:	f7f9 f83c 	bl	8000544 <__aeabi_ui2d>
 80074cc:	2201      	movs	r2, #1
 80074ce:	f1a1 73f8 	sub.w	r3, r1, #32505856	@ 0x1f00000
 80074d2:	3e01      	subs	r6, #1
 80074d4:	9214      	str	r2, [sp, #80]	@ 0x50
 80074d6:	e777      	b.n	80073c8 <_dtoa_r+0x100>
 80074d8:	2301      	movs	r3, #1
 80074da:	e7b8      	b.n	800744e <_dtoa_r+0x186>
 80074dc:	9012      	str	r0, [sp, #72]	@ 0x48
 80074de:	e7b7      	b.n	8007450 <_dtoa_r+0x188>
 80074e0:	427b      	negs	r3, r7
 80074e2:	930a      	str	r3, [sp, #40]	@ 0x28
 80074e4:	2300      	movs	r3, #0
 80074e6:	eba8 0807 	sub.w	r8, r8, r7
 80074ea:	930f      	str	r3, [sp, #60]	@ 0x3c
 80074ec:	e7c4      	b.n	8007478 <_dtoa_r+0x1b0>
 80074ee:	2300      	movs	r3, #0
 80074f0:	930b      	str	r3, [sp, #44]	@ 0x2c
 80074f2:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 80074f4:	2b00      	cmp	r3, #0
 80074f6:	dc35      	bgt.n	8007564 <_dtoa_r+0x29c>
 80074f8:	2301      	movs	r3, #1
 80074fa:	9300      	str	r3, [sp, #0]
 80074fc:	9307      	str	r3, [sp, #28]
 80074fe:	461a      	mov	r2, r3
 8007500:	920e      	str	r2, [sp, #56]	@ 0x38
 8007502:	e00b      	b.n	800751c <_dtoa_r+0x254>
 8007504:	2301      	movs	r3, #1
 8007506:	e7f3      	b.n	80074f0 <_dtoa_r+0x228>
 8007508:	2300      	movs	r3, #0
 800750a:	930b      	str	r3, [sp, #44]	@ 0x2c
 800750c:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800750e:	18fb      	adds	r3, r7, r3
 8007510:	9300      	str	r3, [sp, #0]
 8007512:	3301      	adds	r3, #1
 8007514:	2b01      	cmp	r3, #1
 8007516:	9307      	str	r3, [sp, #28]
 8007518:	bfb8      	it	lt
 800751a:	2301      	movlt	r3, #1
 800751c:	f8db 001c 	ldr.w	r0, [fp, #28]
 8007520:	2100      	movs	r1, #0
 8007522:	2204      	movs	r2, #4
 8007524:	f102 0514 	add.w	r5, r2, #20
 8007528:	429d      	cmp	r5, r3
 800752a:	d91f      	bls.n	800756c <_dtoa_r+0x2a4>
 800752c:	6041      	str	r1, [r0, #4]
 800752e:	4658      	mov	r0, fp
 8007530:	f000 fd8e 	bl	8008050 <_Balloc>
 8007534:	4682      	mov	sl, r0
 8007536:	2800      	cmp	r0, #0
 8007538:	d13c      	bne.n	80075b4 <_dtoa_r+0x2ec>
 800753a:	4b1b      	ldr	r3, [pc, #108]	@ (80075a8 <_dtoa_r+0x2e0>)
 800753c:	4602      	mov	r2, r0
 800753e:	f240 11af 	movw	r1, #431	@ 0x1af
 8007542:	e6d8      	b.n	80072f6 <_dtoa_r+0x2e>
 8007544:	2301      	movs	r3, #1
 8007546:	e7e0      	b.n	800750a <_dtoa_r+0x242>
 8007548:	2401      	movs	r4, #1
 800754a:	2300      	movs	r3, #0
 800754c:	9309      	str	r3, [sp, #36]	@ 0x24
 800754e:	940b      	str	r4, [sp, #44]	@ 0x2c
 8007550:	f04f 33ff 	mov.w	r3, #4294967295
 8007554:	9300      	str	r3, [sp, #0]
 8007556:	9307      	str	r3, [sp, #28]
 8007558:	2200      	movs	r2, #0
 800755a:	2312      	movs	r3, #18
 800755c:	e7d0      	b.n	8007500 <_dtoa_r+0x238>
 800755e:	2301      	movs	r3, #1
 8007560:	930b      	str	r3, [sp, #44]	@ 0x2c
 8007562:	e7f5      	b.n	8007550 <_dtoa_r+0x288>
 8007564:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8007566:	9300      	str	r3, [sp, #0]
 8007568:	9307      	str	r3, [sp, #28]
 800756a:	e7d7      	b.n	800751c <_dtoa_r+0x254>
 800756c:	3101      	adds	r1, #1
 800756e:	0052      	lsls	r2, r2, #1
 8007570:	e7d8      	b.n	8007524 <_dtoa_r+0x25c>
 8007572:	bf00      	nop
 8007574:	f3af 8000 	nop.w
 8007578:	636f4361 	.word	0x636f4361
 800757c:	3fd287a7 	.word	0x3fd287a7
 8007580:	8b60c8b3 	.word	0x8b60c8b3
 8007584:	3fc68a28 	.word	0x3fc68a28
 8007588:	509f79fb 	.word	0x509f79fb
 800758c:	3fd34413 	.word	0x3fd34413
 8007590:	0800a485 	.word	0x0800a485
 8007594:	0800a49c 	.word	0x0800a49c
 8007598:	7ff00000 	.word	0x7ff00000
 800759c:	0800a455 	.word	0x0800a455
 80075a0:	3ff80000 	.word	0x3ff80000
 80075a4:	0800a598 	.word	0x0800a598
 80075a8:	0800a4f4 	.word	0x0800a4f4
 80075ac:	0800a481 	.word	0x0800a481
 80075b0:	0800a454 	.word	0x0800a454
 80075b4:	f8db 301c 	ldr.w	r3, [fp, #28]
 80075b8:	6018      	str	r0, [r3, #0]
 80075ba:	9b07      	ldr	r3, [sp, #28]
 80075bc:	2b0e      	cmp	r3, #14
 80075be:	f200 80a4 	bhi.w	800770a <_dtoa_r+0x442>
 80075c2:	2c00      	cmp	r4, #0
 80075c4:	f000 80a1 	beq.w	800770a <_dtoa_r+0x442>
 80075c8:	2f00      	cmp	r7, #0
 80075ca:	dd33      	ble.n	8007634 <_dtoa_r+0x36c>
 80075cc:	4bad      	ldr	r3, [pc, #692]	@ (8007884 <_dtoa_r+0x5bc>)
 80075ce:	f007 020f 	and.w	r2, r7, #15
 80075d2:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 80075d6:	ed93 7b00 	vldr	d7, [r3]
 80075da:	05f8      	lsls	r0, r7, #23
 80075dc:	ed8d 7b04 	vstr	d7, [sp, #16]
 80075e0:	ea4f 1427 	mov.w	r4, r7, asr #4
 80075e4:	d516      	bpl.n	8007614 <_dtoa_r+0x34c>
 80075e6:	4ba8      	ldr	r3, [pc, #672]	@ (8007888 <_dtoa_r+0x5c0>)
 80075e8:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 80075ec:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 80075f0:	f7f9 f94c 	bl	800088c <__aeabi_ddiv>
 80075f4:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80075f8:	f004 040f 	and.w	r4, r4, #15
 80075fc:	2603      	movs	r6, #3
 80075fe:	4da2      	ldr	r5, [pc, #648]	@ (8007888 <_dtoa_r+0x5c0>)
 8007600:	b954      	cbnz	r4, 8007618 <_dtoa_r+0x350>
 8007602:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8007606:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800760a:	f7f9 f93f 	bl	800088c <__aeabi_ddiv>
 800760e:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8007612:	e028      	b.n	8007666 <_dtoa_r+0x39e>
 8007614:	2602      	movs	r6, #2
 8007616:	e7f2      	b.n	80075fe <_dtoa_r+0x336>
 8007618:	07e1      	lsls	r1, r4, #31
 800761a:	d508      	bpl.n	800762e <_dtoa_r+0x366>
 800761c:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8007620:	e9d5 2300 	ldrd	r2, r3, [r5]
 8007624:	f7f9 f808 	bl	8000638 <__aeabi_dmul>
 8007628:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800762c:	3601      	adds	r6, #1
 800762e:	1064      	asrs	r4, r4, #1
 8007630:	3508      	adds	r5, #8
 8007632:	e7e5      	b.n	8007600 <_dtoa_r+0x338>
 8007634:	f000 80d2 	beq.w	80077dc <_dtoa_r+0x514>
 8007638:	427c      	negs	r4, r7
 800763a:	4b92      	ldr	r3, [pc, #584]	@ (8007884 <_dtoa_r+0x5bc>)
 800763c:	4d92      	ldr	r5, [pc, #584]	@ (8007888 <_dtoa_r+0x5c0>)
 800763e:	f004 020f 	and.w	r2, r4, #15
 8007642:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8007646:	e9d3 2300 	ldrd	r2, r3, [r3]
 800764a:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800764e:	f7f8 fff3 	bl	8000638 <__aeabi_dmul>
 8007652:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8007656:	1124      	asrs	r4, r4, #4
 8007658:	2300      	movs	r3, #0
 800765a:	2602      	movs	r6, #2
 800765c:	2c00      	cmp	r4, #0
 800765e:	f040 80b2 	bne.w	80077c6 <_dtoa_r+0x4fe>
 8007662:	2b00      	cmp	r3, #0
 8007664:	d1d3      	bne.n	800760e <_dtoa_r+0x346>
 8007666:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 8007668:	e9dd 4502 	ldrd	r4, r5, [sp, #8]
 800766c:	2b00      	cmp	r3, #0
 800766e:	f000 80b7 	beq.w	80077e0 <_dtoa_r+0x518>
 8007672:	4b86      	ldr	r3, [pc, #536]	@ (800788c <_dtoa_r+0x5c4>)
 8007674:	2200      	movs	r2, #0
 8007676:	4620      	mov	r0, r4
 8007678:	4629      	mov	r1, r5
 800767a:	f7f9 fa4f 	bl	8000b1c <__aeabi_dcmplt>
 800767e:	2800      	cmp	r0, #0
 8007680:	f000 80ae 	beq.w	80077e0 <_dtoa_r+0x518>
 8007684:	9b07      	ldr	r3, [sp, #28]
 8007686:	2b00      	cmp	r3, #0
 8007688:	f000 80aa 	beq.w	80077e0 <_dtoa_r+0x518>
 800768c:	9b00      	ldr	r3, [sp, #0]
 800768e:	2b00      	cmp	r3, #0
 8007690:	dd37      	ble.n	8007702 <_dtoa_r+0x43a>
 8007692:	1e7b      	subs	r3, r7, #1
 8007694:	9304      	str	r3, [sp, #16]
 8007696:	4620      	mov	r0, r4
 8007698:	4b7d      	ldr	r3, [pc, #500]	@ (8007890 <_dtoa_r+0x5c8>)
 800769a:	2200      	movs	r2, #0
 800769c:	4629      	mov	r1, r5
 800769e:	f7f8 ffcb 	bl	8000638 <__aeabi_dmul>
 80076a2:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80076a6:	9c00      	ldr	r4, [sp, #0]
 80076a8:	3601      	adds	r6, #1
 80076aa:	4630      	mov	r0, r6
 80076ac:	f7f8 ff5a 	bl	8000564 <__aeabi_i2d>
 80076b0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80076b4:	f7f8 ffc0 	bl	8000638 <__aeabi_dmul>
 80076b8:	4b76      	ldr	r3, [pc, #472]	@ (8007894 <_dtoa_r+0x5cc>)
 80076ba:	2200      	movs	r2, #0
 80076bc:	f7f8 fe06 	bl	80002cc <__adddf3>
 80076c0:	4605      	mov	r5, r0
 80076c2:	f1a1 7650 	sub.w	r6, r1, #54525952	@ 0x3400000
 80076c6:	2c00      	cmp	r4, #0
 80076c8:	f040 808d 	bne.w	80077e6 <_dtoa_r+0x51e>
 80076cc:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80076d0:	4b71      	ldr	r3, [pc, #452]	@ (8007898 <_dtoa_r+0x5d0>)
 80076d2:	2200      	movs	r2, #0
 80076d4:	f7f8 fdf8 	bl	80002c8 <__aeabi_dsub>
 80076d8:	4602      	mov	r2, r0
 80076da:	460b      	mov	r3, r1
 80076dc:	e9cd 2302 	strd	r2, r3, [sp, #8]
 80076e0:	462a      	mov	r2, r5
 80076e2:	4633      	mov	r3, r6
 80076e4:	f7f9 fa38 	bl	8000b58 <__aeabi_dcmpgt>
 80076e8:	2800      	cmp	r0, #0
 80076ea:	f040 828b 	bne.w	8007c04 <_dtoa_r+0x93c>
 80076ee:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80076f2:	462a      	mov	r2, r5
 80076f4:	f106 4300 	add.w	r3, r6, #2147483648	@ 0x80000000
 80076f8:	f7f9 fa10 	bl	8000b1c <__aeabi_dcmplt>
 80076fc:	2800      	cmp	r0, #0
 80076fe:	f040 8128 	bne.w	8007952 <_dtoa_r+0x68a>
 8007702:	e9dd 340c 	ldrd	r3, r4, [sp, #48]	@ 0x30
 8007706:	e9cd 3402 	strd	r3, r4, [sp, #8]
 800770a:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 800770c:	2b00      	cmp	r3, #0
 800770e:	f2c0 815a 	blt.w	80079c6 <_dtoa_r+0x6fe>
 8007712:	2f0e      	cmp	r7, #14
 8007714:	f300 8157 	bgt.w	80079c6 <_dtoa_r+0x6fe>
 8007718:	4b5a      	ldr	r3, [pc, #360]	@ (8007884 <_dtoa_r+0x5bc>)
 800771a:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 800771e:	ed93 7b00 	vldr	d7, [r3]
 8007722:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8007724:	2b00      	cmp	r3, #0
 8007726:	ed8d 7b00 	vstr	d7, [sp]
 800772a:	da03      	bge.n	8007734 <_dtoa_r+0x46c>
 800772c:	9b07      	ldr	r3, [sp, #28]
 800772e:	2b00      	cmp	r3, #0
 8007730:	f340 8101 	ble.w	8007936 <_dtoa_r+0x66e>
 8007734:	e9dd 4502 	ldrd	r4, r5, [sp, #8]
 8007738:	4656      	mov	r6, sl
 800773a:	e9dd 2300 	ldrd	r2, r3, [sp]
 800773e:	4620      	mov	r0, r4
 8007740:	4629      	mov	r1, r5
 8007742:	f7f9 f8a3 	bl	800088c <__aeabi_ddiv>
 8007746:	f7f9 fa27 	bl	8000b98 <__aeabi_d2iz>
 800774a:	4680      	mov	r8, r0
 800774c:	f7f8 ff0a 	bl	8000564 <__aeabi_i2d>
 8007750:	e9dd 2300 	ldrd	r2, r3, [sp]
 8007754:	f7f8 ff70 	bl	8000638 <__aeabi_dmul>
 8007758:	4602      	mov	r2, r0
 800775a:	460b      	mov	r3, r1
 800775c:	4620      	mov	r0, r4
 800775e:	4629      	mov	r1, r5
 8007760:	f108 0430 	add.w	r4, r8, #48	@ 0x30
 8007764:	f7f8 fdb0 	bl	80002c8 <__aeabi_dsub>
 8007768:	f806 4b01 	strb.w	r4, [r6], #1
 800776c:	9d07      	ldr	r5, [sp, #28]
 800776e:	eba6 040a 	sub.w	r4, r6, sl
 8007772:	42a5      	cmp	r5, r4
 8007774:	4602      	mov	r2, r0
 8007776:	460b      	mov	r3, r1
 8007778:	f040 8117 	bne.w	80079aa <_dtoa_r+0x6e2>
 800777c:	f7f8 fda6 	bl	80002cc <__adddf3>
 8007780:	e9dd 2300 	ldrd	r2, r3, [sp]
 8007784:	4604      	mov	r4, r0
 8007786:	460d      	mov	r5, r1
 8007788:	f7f9 f9e6 	bl	8000b58 <__aeabi_dcmpgt>
 800778c:	2800      	cmp	r0, #0
 800778e:	f040 80f9 	bne.w	8007984 <_dtoa_r+0x6bc>
 8007792:	e9dd 2300 	ldrd	r2, r3, [sp]
 8007796:	4620      	mov	r0, r4
 8007798:	4629      	mov	r1, r5
 800779a:	f7f9 f9b5 	bl	8000b08 <__aeabi_dcmpeq>
 800779e:	b118      	cbz	r0, 80077a8 <_dtoa_r+0x4e0>
 80077a0:	f018 0f01 	tst.w	r8, #1
 80077a4:	f040 80ee 	bne.w	8007984 <_dtoa_r+0x6bc>
 80077a8:	4649      	mov	r1, r9
 80077aa:	4658      	mov	r0, fp
 80077ac:	f000 fc90 	bl	80080d0 <_Bfree>
 80077b0:	2300      	movs	r3, #0
 80077b2:	7033      	strb	r3, [r6, #0]
 80077b4:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 80077b6:	3701      	adds	r7, #1
 80077b8:	601f      	str	r7, [r3, #0]
 80077ba:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 80077bc:	2b00      	cmp	r3, #0
 80077be:	f000 831d 	beq.w	8007dfc <_dtoa_r+0xb34>
 80077c2:	601e      	str	r6, [r3, #0]
 80077c4:	e31a      	b.n	8007dfc <_dtoa_r+0xb34>
 80077c6:	07e2      	lsls	r2, r4, #31
 80077c8:	d505      	bpl.n	80077d6 <_dtoa_r+0x50e>
 80077ca:	e9d5 2300 	ldrd	r2, r3, [r5]
 80077ce:	f7f8 ff33 	bl	8000638 <__aeabi_dmul>
 80077d2:	3601      	adds	r6, #1
 80077d4:	2301      	movs	r3, #1
 80077d6:	1064      	asrs	r4, r4, #1
 80077d8:	3508      	adds	r5, #8
 80077da:	e73f      	b.n	800765c <_dtoa_r+0x394>
 80077dc:	2602      	movs	r6, #2
 80077de:	e742      	b.n	8007666 <_dtoa_r+0x39e>
 80077e0:	9c07      	ldr	r4, [sp, #28]
 80077e2:	9704      	str	r7, [sp, #16]
 80077e4:	e761      	b.n	80076aa <_dtoa_r+0x3e2>
 80077e6:	4b27      	ldr	r3, [pc, #156]	@ (8007884 <_dtoa_r+0x5bc>)
 80077e8:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 80077ea:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 80077ee:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 80077f2:	4454      	add	r4, sl
 80077f4:	2900      	cmp	r1, #0
 80077f6:	d053      	beq.n	80078a0 <_dtoa_r+0x5d8>
 80077f8:	4928      	ldr	r1, [pc, #160]	@ (800789c <_dtoa_r+0x5d4>)
 80077fa:	2000      	movs	r0, #0
 80077fc:	f7f9 f846 	bl	800088c <__aeabi_ddiv>
 8007800:	4633      	mov	r3, r6
 8007802:	462a      	mov	r2, r5
 8007804:	f7f8 fd60 	bl	80002c8 <__aeabi_dsub>
 8007808:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 800780c:	4656      	mov	r6, sl
 800780e:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8007812:	f7f9 f9c1 	bl	8000b98 <__aeabi_d2iz>
 8007816:	4605      	mov	r5, r0
 8007818:	f7f8 fea4 	bl	8000564 <__aeabi_i2d>
 800781c:	4602      	mov	r2, r0
 800781e:	460b      	mov	r3, r1
 8007820:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8007824:	f7f8 fd50 	bl	80002c8 <__aeabi_dsub>
 8007828:	3530      	adds	r5, #48	@ 0x30
 800782a:	4602      	mov	r2, r0
 800782c:	460b      	mov	r3, r1
 800782e:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8007832:	f806 5b01 	strb.w	r5, [r6], #1
 8007836:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 800783a:	f7f9 f96f 	bl	8000b1c <__aeabi_dcmplt>
 800783e:	2800      	cmp	r0, #0
 8007840:	d171      	bne.n	8007926 <_dtoa_r+0x65e>
 8007842:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8007846:	4911      	ldr	r1, [pc, #68]	@ (800788c <_dtoa_r+0x5c4>)
 8007848:	2000      	movs	r0, #0
 800784a:	f7f8 fd3d 	bl	80002c8 <__aeabi_dsub>
 800784e:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 8007852:	f7f9 f963 	bl	8000b1c <__aeabi_dcmplt>
 8007856:	2800      	cmp	r0, #0
 8007858:	f040 8095 	bne.w	8007986 <_dtoa_r+0x6be>
 800785c:	42a6      	cmp	r6, r4
 800785e:	f43f af50 	beq.w	8007702 <_dtoa_r+0x43a>
 8007862:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	@ 0x40
 8007866:	4b0a      	ldr	r3, [pc, #40]	@ (8007890 <_dtoa_r+0x5c8>)
 8007868:	2200      	movs	r2, #0
 800786a:	f7f8 fee5 	bl	8000638 <__aeabi_dmul>
 800786e:	4b08      	ldr	r3, [pc, #32]	@ (8007890 <_dtoa_r+0x5c8>)
 8007870:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 8007874:	2200      	movs	r2, #0
 8007876:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800787a:	f7f8 fedd 	bl	8000638 <__aeabi_dmul>
 800787e:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8007882:	e7c4      	b.n	800780e <_dtoa_r+0x546>
 8007884:	0800a598 	.word	0x0800a598
 8007888:	0800a570 	.word	0x0800a570
 800788c:	3ff00000 	.word	0x3ff00000
 8007890:	40240000 	.word	0x40240000
 8007894:	401c0000 	.word	0x401c0000
 8007898:	40140000 	.word	0x40140000
 800789c:	3fe00000 	.word	0x3fe00000
 80078a0:	4631      	mov	r1, r6
 80078a2:	4628      	mov	r0, r5
 80078a4:	f7f8 fec8 	bl	8000638 <__aeabi_dmul>
 80078a8:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 80078ac:	9415      	str	r4, [sp, #84]	@ 0x54
 80078ae:	4656      	mov	r6, sl
 80078b0:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80078b4:	f7f9 f970 	bl	8000b98 <__aeabi_d2iz>
 80078b8:	4605      	mov	r5, r0
 80078ba:	f7f8 fe53 	bl	8000564 <__aeabi_i2d>
 80078be:	4602      	mov	r2, r0
 80078c0:	460b      	mov	r3, r1
 80078c2:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80078c6:	f7f8 fcff 	bl	80002c8 <__aeabi_dsub>
 80078ca:	3530      	adds	r5, #48	@ 0x30
 80078cc:	f806 5b01 	strb.w	r5, [r6], #1
 80078d0:	4602      	mov	r2, r0
 80078d2:	460b      	mov	r3, r1
 80078d4:	42a6      	cmp	r6, r4
 80078d6:	e9cd 2302 	strd	r2, r3, [sp, #8]
 80078da:	f04f 0200 	mov.w	r2, #0
 80078de:	d124      	bne.n	800792a <_dtoa_r+0x662>
 80078e0:	4bac      	ldr	r3, [pc, #688]	@ (8007b94 <_dtoa_r+0x8cc>)
 80078e2:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	@ 0x40
 80078e6:	f7f8 fcf1 	bl	80002cc <__adddf3>
 80078ea:	4602      	mov	r2, r0
 80078ec:	460b      	mov	r3, r1
 80078ee:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80078f2:	f7f9 f931 	bl	8000b58 <__aeabi_dcmpgt>
 80078f6:	2800      	cmp	r0, #0
 80078f8:	d145      	bne.n	8007986 <_dtoa_r+0x6be>
 80078fa:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 80078fe:	49a5      	ldr	r1, [pc, #660]	@ (8007b94 <_dtoa_r+0x8cc>)
 8007900:	2000      	movs	r0, #0
 8007902:	f7f8 fce1 	bl	80002c8 <__aeabi_dsub>
 8007906:	4602      	mov	r2, r0
 8007908:	460b      	mov	r3, r1
 800790a:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800790e:	f7f9 f905 	bl	8000b1c <__aeabi_dcmplt>
 8007912:	2800      	cmp	r0, #0
 8007914:	f43f aef5 	beq.w	8007702 <_dtoa_r+0x43a>
 8007918:	9e15      	ldr	r6, [sp, #84]	@ 0x54
 800791a:	1e73      	subs	r3, r6, #1
 800791c:	9315      	str	r3, [sp, #84]	@ 0x54
 800791e:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 8007922:	2b30      	cmp	r3, #48	@ 0x30
 8007924:	d0f8      	beq.n	8007918 <_dtoa_r+0x650>
 8007926:	9f04      	ldr	r7, [sp, #16]
 8007928:	e73e      	b.n	80077a8 <_dtoa_r+0x4e0>
 800792a:	4b9b      	ldr	r3, [pc, #620]	@ (8007b98 <_dtoa_r+0x8d0>)
 800792c:	f7f8 fe84 	bl	8000638 <__aeabi_dmul>
 8007930:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8007934:	e7bc      	b.n	80078b0 <_dtoa_r+0x5e8>
 8007936:	d10c      	bne.n	8007952 <_dtoa_r+0x68a>
 8007938:	4b98      	ldr	r3, [pc, #608]	@ (8007b9c <_dtoa_r+0x8d4>)
 800793a:	2200      	movs	r2, #0
 800793c:	e9dd 0100 	ldrd	r0, r1, [sp]
 8007940:	f7f8 fe7a 	bl	8000638 <__aeabi_dmul>
 8007944:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8007948:	f7f9 f8fc 	bl	8000b44 <__aeabi_dcmpge>
 800794c:	2800      	cmp	r0, #0
 800794e:	f000 8157 	beq.w	8007c00 <_dtoa_r+0x938>
 8007952:	2400      	movs	r4, #0
 8007954:	4625      	mov	r5, r4
 8007956:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8007958:	43db      	mvns	r3, r3
 800795a:	9304      	str	r3, [sp, #16]
 800795c:	4656      	mov	r6, sl
 800795e:	2700      	movs	r7, #0
 8007960:	4621      	mov	r1, r4
 8007962:	4658      	mov	r0, fp
 8007964:	f000 fbb4 	bl	80080d0 <_Bfree>
 8007968:	2d00      	cmp	r5, #0
 800796a:	d0dc      	beq.n	8007926 <_dtoa_r+0x65e>
 800796c:	b12f      	cbz	r7, 800797a <_dtoa_r+0x6b2>
 800796e:	42af      	cmp	r7, r5
 8007970:	d003      	beq.n	800797a <_dtoa_r+0x6b2>
 8007972:	4639      	mov	r1, r7
 8007974:	4658      	mov	r0, fp
 8007976:	f000 fbab 	bl	80080d0 <_Bfree>
 800797a:	4629      	mov	r1, r5
 800797c:	4658      	mov	r0, fp
 800797e:	f000 fba7 	bl	80080d0 <_Bfree>
 8007982:	e7d0      	b.n	8007926 <_dtoa_r+0x65e>
 8007984:	9704      	str	r7, [sp, #16]
 8007986:	4633      	mov	r3, r6
 8007988:	461e      	mov	r6, r3
 800798a:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800798e:	2a39      	cmp	r2, #57	@ 0x39
 8007990:	d107      	bne.n	80079a2 <_dtoa_r+0x6da>
 8007992:	459a      	cmp	sl, r3
 8007994:	d1f8      	bne.n	8007988 <_dtoa_r+0x6c0>
 8007996:	9a04      	ldr	r2, [sp, #16]
 8007998:	3201      	adds	r2, #1
 800799a:	9204      	str	r2, [sp, #16]
 800799c:	2230      	movs	r2, #48	@ 0x30
 800799e:	f88a 2000 	strb.w	r2, [sl]
 80079a2:	781a      	ldrb	r2, [r3, #0]
 80079a4:	3201      	adds	r2, #1
 80079a6:	701a      	strb	r2, [r3, #0]
 80079a8:	e7bd      	b.n	8007926 <_dtoa_r+0x65e>
 80079aa:	4b7b      	ldr	r3, [pc, #492]	@ (8007b98 <_dtoa_r+0x8d0>)
 80079ac:	2200      	movs	r2, #0
 80079ae:	f7f8 fe43 	bl	8000638 <__aeabi_dmul>
 80079b2:	2200      	movs	r2, #0
 80079b4:	2300      	movs	r3, #0
 80079b6:	4604      	mov	r4, r0
 80079b8:	460d      	mov	r5, r1
 80079ba:	f7f9 f8a5 	bl	8000b08 <__aeabi_dcmpeq>
 80079be:	2800      	cmp	r0, #0
 80079c0:	f43f aebb 	beq.w	800773a <_dtoa_r+0x472>
 80079c4:	e6f0      	b.n	80077a8 <_dtoa_r+0x4e0>
 80079c6:	9a0b      	ldr	r2, [sp, #44]	@ 0x2c
 80079c8:	2a00      	cmp	r2, #0
 80079ca:	f000 80db 	beq.w	8007b84 <_dtoa_r+0x8bc>
 80079ce:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 80079d0:	2a01      	cmp	r2, #1
 80079d2:	f300 80bf 	bgt.w	8007b54 <_dtoa_r+0x88c>
 80079d6:	9a14      	ldr	r2, [sp, #80]	@ 0x50
 80079d8:	2a00      	cmp	r2, #0
 80079da:	f000 80b7 	beq.w	8007b4c <_dtoa_r+0x884>
 80079de:	f203 4333 	addw	r3, r3, #1075	@ 0x433
 80079e2:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
 80079e4:	4646      	mov	r6, r8
 80079e6:	9a08      	ldr	r2, [sp, #32]
 80079e8:	2101      	movs	r1, #1
 80079ea:	441a      	add	r2, r3
 80079ec:	4658      	mov	r0, fp
 80079ee:	4498      	add	r8, r3
 80079f0:	9208      	str	r2, [sp, #32]
 80079f2:	f000 fc21 	bl	8008238 <__i2b>
 80079f6:	4605      	mov	r5, r0
 80079f8:	b15e      	cbz	r6, 8007a12 <_dtoa_r+0x74a>
 80079fa:	9b08      	ldr	r3, [sp, #32]
 80079fc:	2b00      	cmp	r3, #0
 80079fe:	dd08      	ble.n	8007a12 <_dtoa_r+0x74a>
 8007a00:	42b3      	cmp	r3, r6
 8007a02:	9a08      	ldr	r2, [sp, #32]
 8007a04:	bfa8      	it	ge
 8007a06:	4633      	movge	r3, r6
 8007a08:	eba8 0803 	sub.w	r8, r8, r3
 8007a0c:	1af6      	subs	r6, r6, r3
 8007a0e:	1ad3      	subs	r3, r2, r3
 8007a10:	9308      	str	r3, [sp, #32]
 8007a12:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8007a14:	b1f3      	cbz	r3, 8007a54 <_dtoa_r+0x78c>
 8007a16:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8007a18:	2b00      	cmp	r3, #0
 8007a1a:	f000 80b7 	beq.w	8007b8c <_dtoa_r+0x8c4>
 8007a1e:	b18c      	cbz	r4, 8007a44 <_dtoa_r+0x77c>
 8007a20:	4629      	mov	r1, r5
 8007a22:	4622      	mov	r2, r4
 8007a24:	4658      	mov	r0, fp
 8007a26:	f000 fcc7 	bl	80083b8 <__pow5mult>
 8007a2a:	464a      	mov	r2, r9
 8007a2c:	4601      	mov	r1, r0
 8007a2e:	4605      	mov	r5, r0
 8007a30:	4658      	mov	r0, fp
 8007a32:	f000 fc17 	bl	8008264 <__multiply>
 8007a36:	4649      	mov	r1, r9
 8007a38:	9004      	str	r0, [sp, #16]
 8007a3a:	4658      	mov	r0, fp
 8007a3c:	f000 fb48 	bl	80080d0 <_Bfree>
 8007a40:	9b04      	ldr	r3, [sp, #16]
 8007a42:	4699      	mov	r9, r3
 8007a44:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8007a46:	1b1a      	subs	r2, r3, r4
 8007a48:	d004      	beq.n	8007a54 <_dtoa_r+0x78c>
 8007a4a:	4649      	mov	r1, r9
 8007a4c:	4658      	mov	r0, fp
 8007a4e:	f000 fcb3 	bl	80083b8 <__pow5mult>
 8007a52:	4681      	mov	r9, r0
 8007a54:	2101      	movs	r1, #1
 8007a56:	4658      	mov	r0, fp
 8007a58:	f000 fbee 	bl	8008238 <__i2b>
 8007a5c:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8007a5e:	4604      	mov	r4, r0
 8007a60:	2b00      	cmp	r3, #0
 8007a62:	f000 81cf 	beq.w	8007e04 <_dtoa_r+0xb3c>
 8007a66:	461a      	mov	r2, r3
 8007a68:	4601      	mov	r1, r0
 8007a6a:	4658      	mov	r0, fp
 8007a6c:	f000 fca4 	bl	80083b8 <__pow5mult>
 8007a70:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8007a72:	2b01      	cmp	r3, #1
 8007a74:	4604      	mov	r4, r0
 8007a76:	f300 8095 	bgt.w	8007ba4 <_dtoa_r+0x8dc>
 8007a7a:	9b02      	ldr	r3, [sp, #8]
 8007a7c:	2b00      	cmp	r3, #0
 8007a7e:	f040 8087 	bne.w	8007b90 <_dtoa_r+0x8c8>
 8007a82:	9b03      	ldr	r3, [sp, #12]
 8007a84:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8007a88:	2b00      	cmp	r3, #0
 8007a8a:	f040 8089 	bne.w	8007ba0 <_dtoa_r+0x8d8>
 8007a8e:	9b03      	ldr	r3, [sp, #12]
 8007a90:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8007a94:	0d1b      	lsrs	r3, r3, #20
 8007a96:	051b      	lsls	r3, r3, #20
 8007a98:	b12b      	cbz	r3, 8007aa6 <_dtoa_r+0x7de>
 8007a9a:	9b08      	ldr	r3, [sp, #32]
 8007a9c:	3301      	adds	r3, #1
 8007a9e:	9308      	str	r3, [sp, #32]
 8007aa0:	f108 0801 	add.w	r8, r8, #1
 8007aa4:	2301      	movs	r3, #1
 8007aa6:	930a      	str	r3, [sp, #40]	@ 0x28
 8007aa8:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8007aaa:	2b00      	cmp	r3, #0
 8007aac:	f000 81b0 	beq.w	8007e10 <_dtoa_r+0xb48>
 8007ab0:	6923      	ldr	r3, [r4, #16]
 8007ab2:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 8007ab6:	6918      	ldr	r0, [r3, #16]
 8007ab8:	f000 fb72 	bl	80081a0 <__hi0bits>
 8007abc:	f1c0 0020 	rsb	r0, r0, #32
 8007ac0:	9b08      	ldr	r3, [sp, #32]
 8007ac2:	4418      	add	r0, r3
 8007ac4:	f010 001f 	ands.w	r0, r0, #31
 8007ac8:	d077      	beq.n	8007bba <_dtoa_r+0x8f2>
 8007aca:	f1c0 0320 	rsb	r3, r0, #32
 8007ace:	2b04      	cmp	r3, #4
 8007ad0:	dd6b      	ble.n	8007baa <_dtoa_r+0x8e2>
 8007ad2:	9b08      	ldr	r3, [sp, #32]
 8007ad4:	f1c0 001c 	rsb	r0, r0, #28
 8007ad8:	4403      	add	r3, r0
 8007ada:	4480      	add	r8, r0
 8007adc:	4406      	add	r6, r0
 8007ade:	9308      	str	r3, [sp, #32]
 8007ae0:	f1b8 0f00 	cmp.w	r8, #0
 8007ae4:	dd05      	ble.n	8007af2 <_dtoa_r+0x82a>
 8007ae6:	4649      	mov	r1, r9
 8007ae8:	4642      	mov	r2, r8
 8007aea:	4658      	mov	r0, fp
 8007aec:	f000 fcbe 	bl	800846c <__lshift>
 8007af0:	4681      	mov	r9, r0
 8007af2:	9b08      	ldr	r3, [sp, #32]
 8007af4:	2b00      	cmp	r3, #0
 8007af6:	dd05      	ble.n	8007b04 <_dtoa_r+0x83c>
 8007af8:	4621      	mov	r1, r4
 8007afa:	461a      	mov	r2, r3
 8007afc:	4658      	mov	r0, fp
 8007afe:	f000 fcb5 	bl	800846c <__lshift>
 8007b02:	4604      	mov	r4, r0
 8007b04:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 8007b06:	2b00      	cmp	r3, #0
 8007b08:	d059      	beq.n	8007bbe <_dtoa_r+0x8f6>
 8007b0a:	4621      	mov	r1, r4
 8007b0c:	4648      	mov	r0, r9
 8007b0e:	f000 fd19 	bl	8008544 <__mcmp>
 8007b12:	2800      	cmp	r0, #0
 8007b14:	da53      	bge.n	8007bbe <_dtoa_r+0x8f6>
 8007b16:	1e7b      	subs	r3, r7, #1
 8007b18:	9304      	str	r3, [sp, #16]
 8007b1a:	4649      	mov	r1, r9
 8007b1c:	2300      	movs	r3, #0
 8007b1e:	220a      	movs	r2, #10
 8007b20:	4658      	mov	r0, fp
 8007b22:	f000 faf7 	bl	8008114 <__multadd>
 8007b26:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8007b28:	4681      	mov	r9, r0
 8007b2a:	2b00      	cmp	r3, #0
 8007b2c:	f000 8172 	beq.w	8007e14 <_dtoa_r+0xb4c>
 8007b30:	2300      	movs	r3, #0
 8007b32:	4629      	mov	r1, r5
 8007b34:	220a      	movs	r2, #10
 8007b36:	4658      	mov	r0, fp
 8007b38:	f000 faec 	bl	8008114 <__multadd>
 8007b3c:	9b00      	ldr	r3, [sp, #0]
 8007b3e:	2b00      	cmp	r3, #0
 8007b40:	4605      	mov	r5, r0
 8007b42:	dc67      	bgt.n	8007c14 <_dtoa_r+0x94c>
 8007b44:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8007b46:	2b02      	cmp	r3, #2
 8007b48:	dc41      	bgt.n	8007bce <_dtoa_r+0x906>
 8007b4a:	e063      	b.n	8007c14 <_dtoa_r+0x94c>
 8007b4c:	9b16      	ldr	r3, [sp, #88]	@ 0x58
 8007b4e:	f1c3 0336 	rsb	r3, r3, #54	@ 0x36
 8007b52:	e746      	b.n	80079e2 <_dtoa_r+0x71a>
 8007b54:	9b07      	ldr	r3, [sp, #28]
 8007b56:	1e5c      	subs	r4, r3, #1
 8007b58:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8007b5a:	42a3      	cmp	r3, r4
 8007b5c:	bfbf      	itttt	lt
 8007b5e:	9b0a      	ldrlt	r3, [sp, #40]	@ 0x28
 8007b60:	9a0f      	ldrlt	r2, [sp, #60]	@ 0x3c
 8007b62:	940a      	strlt	r4, [sp, #40]	@ 0x28
 8007b64:	1ae3      	sublt	r3, r4, r3
 8007b66:	bfb4      	ite	lt
 8007b68:	18d2      	addlt	r2, r2, r3
 8007b6a:	1b1c      	subge	r4, r3, r4
 8007b6c:	9b07      	ldr	r3, [sp, #28]
 8007b6e:	bfbc      	itt	lt
 8007b70:	920f      	strlt	r2, [sp, #60]	@ 0x3c
 8007b72:	2400      	movlt	r4, #0
 8007b74:	2b00      	cmp	r3, #0
 8007b76:	bfb5      	itete	lt
 8007b78:	eba8 0603 	sublt.w	r6, r8, r3
 8007b7c:	9b07      	ldrge	r3, [sp, #28]
 8007b7e:	2300      	movlt	r3, #0
 8007b80:	4646      	movge	r6, r8
 8007b82:	e730      	b.n	80079e6 <_dtoa_r+0x71e>
 8007b84:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
 8007b86:	9d0b      	ldr	r5, [sp, #44]	@ 0x2c
 8007b88:	4646      	mov	r6, r8
 8007b8a:	e735      	b.n	80079f8 <_dtoa_r+0x730>
 8007b8c:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 8007b8e:	e75c      	b.n	8007a4a <_dtoa_r+0x782>
 8007b90:	2300      	movs	r3, #0
 8007b92:	e788      	b.n	8007aa6 <_dtoa_r+0x7de>
 8007b94:	3fe00000 	.word	0x3fe00000
 8007b98:	40240000 	.word	0x40240000
 8007b9c:	40140000 	.word	0x40140000
 8007ba0:	9b02      	ldr	r3, [sp, #8]
 8007ba2:	e780      	b.n	8007aa6 <_dtoa_r+0x7de>
 8007ba4:	2300      	movs	r3, #0
 8007ba6:	930a      	str	r3, [sp, #40]	@ 0x28
 8007ba8:	e782      	b.n	8007ab0 <_dtoa_r+0x7e8>
 8007baa:	d099      	beq.n	8007ae0 <_dtoa_r+0x818>
 8007bac:	9a08      	ldr	r2, [sp, #32]
 8007bae:	331c      	adds	r3, #28
 8007bb0:	441a      	add	r2, r3
 8007bb2:	4498      	add	r8, r3
 8007bb4:	441e      	add	r6, r3
 8007bb6:	9208      	str	r2, [sp, #32]
 8007bb8:	e792      	b.n	8007ae0 <_dtoa_r+0x818>
 8007bba:	4603      	mov	r3, r0
 8007bbc:	e7f6      	b.n	8007bac <_dtoa_r+0x8e4>
 8007bbe:	9b07      	ldr	r3, [sp, #28]
 8007bc0:	9704      	str	r7, [sp, #16]
 8007bc2:	2b00      	cmp	r3, #0
 8007bc4:	dc20      	bgt.n	8007c08 <_dtoa_r+0x940>
 8007bc6:	9300      	str	r3, [sp, #0]
 8007bc8:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8007bca:	2b02      	cmp	r3, #2
 8007bcc:	dd1e      	ble.n	8007c0c <_dtoa_r+0x944>
 8007bce:	9b00      	ldr	r3, [sp, #0]
 8007bd0:	2b00      	cmp	r3, #0
 8007bd2:	f47f aec0 	bne.w	8007956 <_dtoa_r+0x68e>
 8007bd6:	4621      	mov	r1, r4
 8007bd8:	2205      	movs	r2, #5
 8007bda:	4658      	mov	r0, fp
 8007bdc:	f000 fa9a 	bl	8008114 <__multadd>
 8007be0:	4601      	mov	r1, r0
 8007be2:	4604      	mov	r4, r0
 8007be4:	4648      	mov	r0, r9
 8007be6:	f000 fcad 	bl	8008544 <__mcmp>
 8007bea:	2800      	cmp	r0, #0
 8007bec:	f77f aeb3 	ble.w	8007956 <_dtoa_r+0x68e>
 8007bf0:	4656      	mov	r6, sl
 8007bf2:	2331      	movs	r3, #49	@ 0x31
 8007bf4:	f806 3b01 	strb.w	r3, [r6], #1
 8007bf8:	9b04      	ldr	r3, [sp, #16]
 8007bfa:	3301      	adds	r3, #1
 8007bfc:	9304      	str	r3, [sp, #16]
 8007bfe:	e6ae      	b.n	800795e <_dtoa_r+0x696>
 8007c00:	9c07      	ldr	r4, [sp, #28]
 8007c02:	9704      	str	r7, [sp, #16]
 8007c04:	4625      	mov	r5, r4
 8007c06:	e7f3      	b.n	8007bf0 <_dtoa_r+0x928>
 8007c08:	9b07      	ldr	r3, [sp, #28]
 8007c0a:	9300      	str	r3, [sp, #0]
 8007c0c:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8007c0e:	2b00      	cmp	r3, #0
 8007c10:	f000 8104 	beq.w	8007e1c <_dtoa_r+0xb54>
 8007c14:	2e00      	cmp	r6, #0
 8007c16:	dd05      	ble.n	8007c24 <_dtoa_r+0x95c>
 8007c18:	4629      	mov	r1, r5
 8007c1a:	4632      	mov	r2, r6
 8007c1c:	4658      	mov	r0, fp
 8007c1e:	f000 fc25 	bl	800846c <__lshift>
 8007c22:	4605      	mov	r5, r0
 8007c24:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8007c26:	2b00      	cmp	r3, #0
 8007c28:	d05a      	beq.n	8007ce0 <_dtoa_r+0xa18>
 8007c2a:	6869      	ldr	r1, [r5, #4]
 8007c2c:	4658      	mov	r0, fp
 8007c2e:	f000 fa0f 	bl	8008050 <_Balloc>
 8007c32:	4606      	mov	r6, r0
 8007c34:	b928      	cbnz	r0, 8007c42 <_dtoa_r+0x97a>
 8007c36:	4b84      	ldr	r3, [pc, #528]	@ (8007e48 <_dtoa_r+0xb80>)
 8007c38:	4602      	mov	r2, r0
 8007c3a:	f240 21ef 	movw	r1, #751	@ 0x2ef
 8007c3e:	f7ff bb5a 	b.w	80072f6 <_dtoa_r+0x2e>
 8007c42:	692a      	ldr	r2, [r5, #16]
 8007c44:	3202      	adds	r2, #2
 8007c46:	0092      	lsls	r2, r2, #2
 8007c48:	f105 010c 	add.w	r1, r5, #12
 8007c4c:	300c      	adds	r0, #12
 8007c4e:	f000 ffaf 	bl	8008bb0 <memcpy>
 8007c52:	2201      	movs	r2, #1
 8007c54:	4631      	mov	r1, r6
 8007c56:	4658      	mov	r0, fp
 8007c58:	f000 fc08 	bl	800846c <__lshift>
 8007c5c:	f10a 0301 	add.w	r3, sl, #1
 8007c60:	9307      	str	r3, [sp, #28]
 8007c62:	9b00      	ldr	r3, [sp, #0]
 8007c64:	4453      	add	r3, sl
 8007c66:	930b      	str	r3, [sp, #44]	@ 0x2c
 8007c68:	9b02      	ldr	r3, [sp, #8]
 8007c6a:	f003 0301 	and.w	r3, r3, #1
 8007c6e:	462f      	mov	r7, r5
 8007c70:	930a      	str	r3, [sp, #40]	@ 0x28
 8007c72:	4605      	mov	r5, r0
 8007c74:	9b07      	ldr	r3, [sp, #28]
 8007c76:	4621      	mov	r1, r4
 8007c78:	3b01      	subs	r3, #1
 8007c7a:	4648      	mov	r0, r9
 8007c7c:	9300      	str	r3, [sp, #0]
 8007c7e:	f7ff fa9a 	bl	80071b6 <quorem>
 8007c82:	4639      	mov	r1, r7
 8007c84:	9002      	str	r0, [sp, #8]
 8007c86:	f100 0830 	add.w	r8, r0, #48	@ 0x30
 8007c8a:	4648      	mov	r0, r9
 8007c8c:	f000 fc5a 	bl	8008544 <__mcmp>
 8007c90:	462a      	mov	r2, r5
 8007c92:	9008      	str	r0, [sp, #32]
 8007c94:	4621      	mov	r1, r4
 8007c96:	4658      	mov	r0, fp
 8007c98:	f000 fc70 	bl	800857c <__mdiff>
 8007c9c:	68c2      	ldr	r2, [r0, #12]
 8007c9e:	4606      	mov	r6, r0
 8007ca0:	bb02      	cbnz	r2, 8007ce4 <_dtoa_r+0xa1c>
 8007ca2:	4601      	mov	r1, r0
 8007ca4:	4648      	mov	r0, r9
 8007ca6:	f000 fc4d 	bl	8008544 <__mcmp>
 8007caa:	4602      	mov	r2, r0
 8007cac:	4631      	mov	r1, r6
 8007cae:	4658      	mov	r0, fp
 8007cb0:	920e      	str	r2, [sp, #56]	@ 0x38
 8007cb2:	f000 fa0d 	bl	80080d0 <_Bfree>
 8007cb6:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8007cb8:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8007cba:	9e07      	ldr	r6, [sp, #28]
 8007cbc:	ea43 0102 	orr.w	r1, r3, r2
 8007cc0:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8007cc2:	4319      	orrs	r1, r3
 8007cc4:	d110      	bne.n	8007ce8 <_dtoa_r+0xa20>
 8007cc6:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 8007cca:	d029      	beq.n	8007d20 <_dtoa_r+0xa58>
 8007ccc:	9b08      	ldr	r3, [sp, #32]
 8007cce:	2b00      	cmp	r3, #0
 8007cd0:	dd02      	ble.n	8007cd8 <_dtoa_r+0xa10>
 8007cd2:	9b02      	ldr	r3, [sp, #8]
 8007cd4:	f103 0831 	add.w	r8, r3, #49	@ 0x31
 8007cd8:	9b00      	ldr	r3, [sp, #0]
 8007cda:	f883 8000 	strb.w	r8, [r3]
 8007cde:	e63f      	b.n	8007960 <_dtoa_r+0x698>
 8007ce0:	4628      	mov	r0, r5
 8007ce2:	e7bb      	b.n	8007c5c <_dtoa_r+0x994>
 8007ce4:	2201      	movs	r2, #1
 8007ce6:	e7e1      	b.n	8007cac <_dtoa_r+0x9e4>
 8007ce8:	9b08      	ldr	r3, [sp, #32]
 8007cea:	2b00      	cmp	r3, #0
 8007cec:	db04      	blt.n	8007cf8 <_dtoa_r+0xa30>
 8007cee:	9909      	ldr	r1, [sp, #36]	@ 0x24
 8007cf0:	430b      	orrs	r3, r1
 8007cf2:	990a      	ldr	r1, [sp, #40]	@ 0x28
 8007cf4:	430b      	orrs	r3, r1
 8007cf6:	d120      	bne.n	8007d3a <_dtoa_r+0xa72>
 8007cf8:	2a00      	cmp	r2, #0
 8007cfa:	dded      	ble.n	8007cd8 <_dtoa_r+0xa10>
 8007cfc:	4649      	mov	r1, r9
 8007cfe:	2201      	movs	r2, #1
 8007d00:	4658      	mov	r0, fp
 8007d02:	f000 fbb3 	bl	800846c <__lshift>
 8007d06:	4621      	mov	r1, r4
 8007d08:	4681      	mov	r9, r0
 8007d0a:	f000 fc1b 	bl	8008544 <__mcmp>
 8007d0e:	2800      	cmp	r0, #0
 8007d10:	dc03      	bgt.n	8007d1a <_dtoa_r+0xa52>
 8007d12:	d1e1      	bne.n	8007cd8 <_dtoa_r+0xa10>
 8007d14:	f018 0f01 	tst.w	r8, #1
 8007d18:	d0de      	beq.n	8007cd8 <_dtoa_r+0xa10>
 8007d1a:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 8007d1e:	d1d8      	bne.n	8007cd2 <_dtoa_r+0xa0a>
 8007d20:	9a00      	ldr	r2, [sp, #0]
 8007d22:	2339      	movs	r3, #57	@ 0x39
 8007d24:	7013      	strb	r3, [r2, #0]
 8007d26:	4633      	mov	r3, r6
 8007d28:	461e      	mov	r6, r3
 8007d2a:	3b01      	subs	r3, #1
 8007d2c:	f816 2c01 	ldrb.w	r2, [r6, #-1]
 8007d30:	2a39      	cmp	r2, #57	@ 0x39
 8007d32:	d052      	beq.n	8007dda <_dtoa_r+0xb12>
 8007d34:	3201      	adds	r2, #1
 8007d36:	701a      	strb	r2, [r3, #0]
 8007d38:	e612      	b.n	8007960 <_dtoa_r+0x698>
 8007d3a:	2a00      	cmp	r2, #0
 8007d3c:	dd07      	ble.n	8007d4e <_dtoa_r+0xa86>
 8007d3e:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 8007d42:	d0ed      	beq.n	8007d20 <_dtoa_r+0xa58>
 8007d44:	9a00      	ldr	r2, [sp, #0]
 8007d46:	f108 0301 	add.w	r3, r8, #1
 8007d4a:	7013      	strb	r3, [r2, #0]
 8007d4c:	e608      	b.n	8007960 <_dtoa_r+0x698>
 8007d4e:	9b07      	ldr	r3, [sp, #28]
 8007d50:	9a07      	ldr	r2, [sp, #28]
 8007d52:	f803 8c01 	strb.w	r8, [r3, #-1]
 8007d56:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8007d58:	4293      	cmp	r3, r2
 8007d5a:	d028      	beq.n	8007dae <_dtoa_r+0xae6>
 8007d5c:	4649      	mov	r1, r9
 8007d5e:	2300      	movs	r3, #0
 8007d60:	220a      	movs	r2, #10
 8007d62:	4658      	mov	r0, fp
 8007d64:	f000 f9d6 	bl	8008114 <__multadd>
 8007d68:	42af      	cmp	r7, r5
 8007d6a:	4681      	mov	r9, r0
 8007d6c:	f04f 0300 	mov.w	r3, #0
 8007d70:	f04f 020a 	mov.w	r2, #10
 8007d74:	4639      	mov	r1, r7
 8007d76:	4658      	mov	r0, fp
 8007d78:	d107      	bne.n	8007d8a <_dtoa_r+0xac2>
 8007d7a:	f000 f9cb 	bl	8008114 <__multadd>
 8007d7e:	4607      	mov	r7, r0
 8007d80:	4605      	mov	r5, r0
 8007d82:	9b07      	ldr	r3, [sp, #28]
 8007d84:	3301      	adds	r3, #1
 8007d86:	9307      	str	r3, [sp, #28]
 8007d88:	e774      	b.n	8007c74 <_dtoa_r+0x9ac>
 8007d8a:	f000 f9c3 	bl	8008114 <__multadd>
 8007d8e:	4629      	mov	r1, r5
 8007d90:	4607      	mov	r7, r0
 8007d92:	2300      	movs	r3, #0
 8007d94:	220a      	movs	r2, #10
 8007d96:	4658      	mov	r0, fp
 8007d98:	f000 f9bc 	bl	8008114 <__multadd>
 8007d9c:	4605      	mov	r5, r0
 8007d9e:	e7f0      	b.n	8007d82 <_dtoa_r+0xaba>
 8007da0:	9b00      	ldr	r3, [sp, #0]
 8007da2:	2b00      	cmp	r3, #0
 8007da4:	bfcc      	ite	gt
 8007da6:	461e      	movgt	r6, r3
 8007da8:	2601      	movle	r6, #1
 8007daa:	4456      	add	r6, sl
 8007dac:	2700      	movs	r7, #0
 8007dae:	4649      	mov	r1, r9
 8007db0:	2201      	movs	r2, #1
 8007db2:	4658      	mov	r0, fp
 8007db4:	f000 fb5a 	bl	800846c <__lshift>
 8007db8:	4621      	mov	r1, r4
 8007dba:	4681      	mov	r9, r0
 8007dbc:	f000 fbc2 	bl	8008544 <__mcmp>
 8007dc0:	2800      	cmp	r0, #0
 8007dc2:	dcb0      	bgt.n	8007d26 <_dtoa_r+0xa5e>
 8007dc4:	d102      	bne.n	8007dcc <_dtoa_r+0xb04>
 8007dc6:	f018 0f01 	tst.w	r8, #1
 8007dca:	d1ac      	bne.n	8007d26 <_dtoa_r+0xa5e>
 8007dcc:	4633      	mov	r3, r6
 8007dce:	461e      	mov	r6, r3
 8007dd0:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8007dd4:	2a30      	cmp	r2, #48	@ 0x30
 8007dd6:	d0fa      	beq.n	8007dce <_dtoa_r+0xb06>
 8007dd8:	e5c2      	b.n	8007960 <_dtoa_r+0x698>
 8007dda:	459a      	cmp	sl, r3
 8007ddc:	d1a4      	bne.n	8007d28 <_dtoa_r+0xa60>
 8007dde:	9b04      	ldr	r3, [sp, #16]
 8007de0:	3301      	adds	r3, #1
 8007de2:	9304      	str	r3, [sp, #16]
 8007de4:	2331      	movs	r3, #49	@ 0x31
 8007de6:	f88a 3000 	strb.w	r3, [sl]
 8007dea:	e5b9      	b.n	8007960 <_dtoa_r+0x698>
 8007dec:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 8007dee:	f8df a05c 	ldr.w	sl, [pc, #92]	@ 8007e4c <_dtoa_r+0xb84>
 8007df2:	b11b      	cbz	r3, 8007dfc <_dtoa_r+0xb34>
 8007df4:	f10a 0308 	add.w	r3, sl, #8
 8007df8:	9a23      	ldr	r2, [sp, #140]	@ 0x8c
 8007dfa:	6013      	str	r3, [r2, #0]
 8007dfc:	4650      	mov	r0, sl
 8007dfe:	b019      	add	sp, #100	@ 0x64
 8007e00:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007e04:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8007e06:	2b01      	cmp	r3, #1
 8007e08:	f77f ae37 	ble.w	8007a7a <_dtoa_r+0x7b2>
 8007e0c:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8007e0e:	930a      	str	r3, [sp, #40]	@ 0x28
 8007e10:	2001      	movs	r0, #1
 8007e12:	e655      	b.n	8007ac0 <_dtoa_r+0x7f8>
 8007e14:	9b00      	ldr	r3, [sp, #0]
 8007e16:	2b00      	cmp	r3, #0
 8007e18:	f77f aed6 	ble.w	8007bc8 <_dtoa_r+0x900>
 8007e1c:	4656      	mov	r6, sl
 8007e1e:	4621      	mov	r1, r4
 8007e20:	4648      	mov	r0, r9
 8007e22:	f7ff f9c8 	bl	80071b6 <quorem>
 8007e26:	f100 0830 	add.w	r8, r0, #48	@ 0x30
 8007e2a:	f806 8b01 	strb.w	r8, [r6], #1
 8007e2e:	9b00      	ldr	r3, [sp, #0]
 8007e30:	eba6 020a 	sub.w	r2, r6, sl
 8007e34:	4293      	cmp	r3, r2
 8007e36:	ddb3      	ble.n	8007da0 <_dtoa_r+0xad8>
 8007e38:	4649      	mov	r1, r9
 8007e3a:	2300      	movs	r3, #0
 8007e3c:	220a      	movs	r2, #10
 8007e3e:	4658      	mov	r0, fp
 8007e40:	f000 f968 	bl	8008114 <__multadd>
 8007e44:	4681      	mov	r9, r0
 8007e46:	e7ea      	b.n	8007e1e <_dtoa_r+0xb56>
 8007e48:	0800a4f4 	.word	0x0800a4f4
 8007e4c:	0800a478 	.word	0x0800a478

08007e50 <_free_r>:
 8007e50:	b538      	push	{r3, r4, r5, lr}
 8007e52:	4605      	mov	r5, r0
 8007e54:	2900      	cmp	r1, #0
 8007e56:	d041      	beq.n	8007edc <_free_r+0x8c>
 8007e58:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8007e5c:	1f0c      	subs	r4, r1, #4
 8007e5e:	2b00      	cmp	r3, #0
 8007e60:	bfb8      	it	lt
 8007e62:	18e4      	addlt	r4, r4, r3
 8007e64:	f000 f8e8 	bl	8008038 <__malloc_lock>
 8007e68:	4a1d      	ldr	r2, [pc, #116]	@ (8007ee0 <_free_r+0x90>)
 8007e6a:	6813      	ldr	r3, [r2, #0]
 8007e6c:	b933      	cbnz	r3, 8007e7c <_free_r+0x2c>
 8007e6e:	6063      	str	r3, [r4, #4]
 8007e70:	6014      	str	r4, [r2, #0]
 8007e72:	4628      	mov	r0, r5
 8007e74:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8007e78:	f000 b8e4 	b.w	8008044 <__malloc_unlock>
 8007e7c:	42a3      	cmp	r3, r4
 8007e7e:	d908      	bls.n	8007e92 <_free_r+0x42>
 8007e80:	6820      	ldr	r0, [r4, #0]
 8007e82:	1821      	adds	r1, r4, r0
 8007e84:	428b      	cmp	r3, r1
 8007e86:	bf01      	itttt	eq
 8007e88:	6819      	ldreq	r1, [r3, #0]
 8007e8a:	685b      	ldreq	r3, [r3, #4]
 8007e8c:	1809      	addeq	r1, r1, r0
 8007e8e:	6021      	streq	r1, [r4, #0]
 8007e90:	e7ed      	b.n	8007e6e <_free_r+0x1e>
 8007e92:	461a      	mov	r2, r3
 8007e94:	685b      	ldr	r3, [r3, #4]
 8007e96:	b10b      	cbz	r3, 8007e9c <_free_r+0x4c>
 8007e98:	42a3      	cmp	r3, r4
 8007e9a:	d9fa      	bls.n	8007e92 <_free_r+0x42>
 8007e9c:	6811      	ldr	r1, [r2, #0]
 8007e9e:	1850      	adds	r0, r2, r1
 8007ea0:	42a0      	cmp	r0, r4
 8007ea2:	d10b      	bne.n	8007ebc <_free_r+0x6c>
 8007ea4:	6820      	ldr	r0, [r4, #0]
 8007ea6:	4401      	add	r1, r0
 8007ea8:	1850      	adds	r0, r2, r1
 8007eaa:	4283      	cmp	r3, r0
 8007eac:	6011      	str	r1, [r2, #0]
 8007eae:	d1e0      	bne.n	8007e72 <_free_r+0x22>
 8007eb0:	6818      	ldr	r0, [r3, #0]
 8007eb2:	685b      	ldr	r3, [r3, #4]
 8007eb4:	6053      	str	r3, [r2, #4]
 8007eb6:	4408      	add	r0, r1
 8007eb8:	6010      	str	r0, [r2, #0]
 8007eba:	e7da      	b.n	8007e72 <_free_r+0x22>
 8007ebc:	d902      	bls.n	8007ec4 <_free_r+0x74>
 8007ebe:	230c      	movs	r3, #12
 8007ec0:	602b      	str	r3, [r5, #0]
 8007ec2:	e7d6      	b.n	8007e72 <_free_r+0x22>
 8007ec4:	6820      	ldr	r0, [r4, #0]
 8007ec6:	1821      	adds	r1, r4, r0
 8007ec8:	428b      	cmp	r3, r1
 8007eca:	bf04      	itt	eq
 8007ecc:	6819      	ldreq	r1, [r3, #0]
 8007ece:	685b      	ldreq	r3, [r3, #4]
 8007ed0:	6063      	str	r3, [r4, #4]
 8007ed2:	bf04      	itt	eq
 8007ed4:	1809      	addeq	r1, r1, r0
 8007ed6:	6021      	streq	r1, [r4, #0]
 8007ed8:	6054      	str	r4, [r2, #4]
 8007eda:	e7ca      	b.n	8007e72 <_free_r+0x22>
 8007edc:	bd38      	pop	{r3, r4, r5, pc}
 8007ede:	bf00      	nop
 8007ee0:	2000074c 	.word	0x2000074c

08007ee4 <malloc>:
 8007ee4:	4b02      	ldr	r3, [pc, #8]	@ (8007ef0 <malloc+0xc>)
 8007ee6:	4601      	mov	r1, r0
 8007ee8:	6818      	ldr	r0, [r3, #0]
 8007eea:	f000 b825 	b.w	8007f38 <_malloc_r>
 8007eee:	bf00      	nop
 8007ef0:	20000018 	.word	0x20000018

08007ef4 <sbrk_aligned>:
 8007ef4:	b570      	push	{r4, r5, r6, lr}
 8007ef6:	4e0f      	ldr	r6, [pc, #60]	@ (8007f34 <sbrk_aligned+0x40>)
 8007ef8:	460c      	mov	r4, r1
 8007efa:	6831      	ldr	r1, [r6, #0]
 8007efc:	4605      	mov	r5, r0
 8007efe:	b911      	cbnz	r1, 8007f06 <sbrk_aligned+0x12>
 8007f00:	f000 fe46 	bl	8008b90 <_sbrk_r>
 8007f04:	6030      	str	r0, [r6, #0]
 8007f06:	4621      	mov	r1, r4
 8007f08:	4628      	mov	r0, r5
 8007f0a:	f000 fe41 	bl	8008b90 <_sbrk_r>
 8007f0e:	1c43      	adds	r3, r0, #1
 8007f10:	d103      	bne.n	8007f1a <sbrk_aligned+0x26>
 8007f12:	f04f 34ff 	mov.w	r4, #4294967295
 8007f16:	4620      	mov	r0, r4
 8007f18:	bd70      	pop	{r4, r5, r6, pc}
 8007f1a:	1cc4      	adds	r4, r0, #3
 8007f1c:	f024 0403 	bic.w	r4, r4, #3
 8007f20:	42a0      	cmp	r0, r4
 8007f22:	d0f8      	beq.n	8007f16 <sbrk_aligned+0x22>
 8007f24:	1a21      	subs	r1, r4, r0
 8007f26:	4628      	mov	r0, r5
 8007f28:	f000 fe32 	bl	8008b90 <_sbrk_r>
 8007f2c:	3001      	adds	r0, #1
 8007f2e:	d1f2      	bne.n	8007f16 <sbrk_aligned+0x22>
 8007f30:	e7ef      	b.n	8007f12 <sbrk_aligned+0x1e>
 8007f32:	bf00      	nop
 8007f34:	20000748 	.word	0x20000748

08007f38 <_malloc_r>:
 8007f38:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8007f3c:	1ccd      	adds	r5, r1, #3
 8007f3e:	f025 0503 	bic.w	r5, r5, #3
 8007f42:	3508      	adds	r5, #8
 8007f44:	2d0c      	cmp	r5, #12
 8007f46:	bf38      	it	cc
 8007f48:	250c      	movcc	r5, #12
 8007f4a:	2d00      	cmp	r5, #0
 8007f4c:	4606      	mov	r6, r0
 8007f4e:	db01      	blt.n	8007f54 <_malloc_r+0x1c>
 8007f50:	42a9      	cmp	r1, r5
 8007f52:	d904      	bls.n	8007f5e <_malloc_r+0x26>
 8007f54:	230c      	movs	r3, #12
 8007f56:	6033      	str	r3, [r6, #0]
 8007f58:	2000      	movs	r0, #0
 8007f5a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8007f5e:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 8008034 <_malloc_r+0xfc>
 8007f62:	f000 f869 	bl	8008038 <__malloc_lock>
 8007f66:	f8d8 3000 	ldr.w	r3, [r8]
 8007f6a:	461c      	mov	r4, r3
 8007f6c:	bb44      	cbnz	r4, 8007fc0 <_malloc_r+0x88>
 8007f6e:	4629      	mov	r1, r5
 8007f70:	4630      	mov	r0, r6
 8007f72:	f7ff ffbf 	bl	8007ef4 <sbrk_aligned>
 8007f76:	1c43      	adds	r3, r0, #1
 8007f78:	4604      	mov	r4, r0
 8007f7a:	d158      	bne.n	800802e <_malloc_r+0xf6>
 8007f7c:	f8d8 4000 	ldr.w	r4, [r8]
 8007f80:	4627      	mov	r7, r4
 8007f82:	2f00      	cmp	r7, #0
 8007f84:	d143      	bne.n	800800e <_malloc_r+0xd6>
 8007f86:	2c00      	cmp	r4, #0
 8007f88:	d04b      	beq.n	8008022 <_malloc_r+0xea>
 8007f8a:	6823      	ldr	r3, [r4, #0]
 8007f8c:	4639      	mov	r1, r7
 8007f8e:	4630      	mov	r0, r6
 8007f90:	eb04 0903 	add.w	r9, r4, r3
 8007f94:	f000 fdfc 	bl	8008b90 <_sbrk_r>
 8007f98:	4581      	cmp	r9, r0
 8007f9a:	d142      	bne.n	8008022 <_malloc_r+0xea>
 8007f9c:	6821      	ldr	r1, [r4, #0]
 8007f9e:	1a6d      	subs	r5, r5, r1
 8007fa0:	4629      	mov	r1, r5
 8007fa2:	4630      	mov	r0, r6
 8007fa4:	f7ff ffa6 	bl	8007ef4 <sbrk_aligned>
 8007fa8:	3001      	adds	r0, #1
 8007faa:	d03a      	beq.n	8008022 <_malloc_r+0xea>
 8007fac:	6823      	ldr	r3, [r4, #0]
 8007fae:	442b      	add	r3, r5
 8007fb0:	6023      	str	r3, [r4, #0]
 8007fb2:	f8d8 3000 	ldr.w	r3, [r8]
 8007fb6:	685a      	ldr	r2, [r3, #4]
 8007fb8:	bb62      	cbnz	r2, 8008014 <_malloc_r+0xdc>
 8007fba:	f8c8 7000 	str.w	r7, [r8]
 8007fbe:	e00f      	b.n	8007fe0 <_malloc_r+0xa8>
 8007fc0:	6822      	ldr	r2, [r4, #0]
 8007fc2:	1b52      	subs	r2, r2, r5
 8007fc4:	d420      	bmi.n	8008008 <_malloc_r+0xd0>
 8007fc6:	2a0b      	cmp	r2, #11
 8007fc8:	d917      	bls.n	8007ffa <_malloc_r+0xc2>
 8007fca:	1961      	adds	r1, r4, r5
 8007fcc:	42a3      	cmp	r3, r4
 8007fce:	6025      	str	r5, [r4, #0]
 8007fd0:	bf18      	it	ne
 8007fd2:	6059      	strne	r1, [r3, #4]
 8007fd4:	6863      	ldr	r3, [r4, #4]
 8007fd6:	bf08      	it	eq
 8007fd8:	f8c8 1000 	streq.w	r1, [r8]
 8007fdc:	5162      	str	r2, [r4, r5]
 8007fde:	604b      	str	r3, [r1, #4]
 8007fe0:	4630      	mov	r0, r6
 8007fe2:	f000 f82f 	bl	8008044 <__malloc_unlock>
 8007fe6:	f104 000b 	add.w	r0, r4, #11
 8007fea:	1d23      	adds	r3, r4, #4
 8007fec:	f020 0007 	bic.w	r0, r0, #7
 8007ff0:	1ac2      	subs	r2, r0, r3
 8007ff2:	bf1c      	itt	ne
 8007ff4:	1a1b      	subne	r3, r3, r0
 8007ff6:	50a3      	strne	r3, [r4, r2]
 8007ff8:	e7af      	b.n	8007f5a <_malloc_r+0x22>
 8007ffa:	6862      	ldr	r2, [r4, #4]
 8007ffc:	42a3      	cmp	r3, r4
 8007ffe:	bf0c      	ite	eq
 8008000:	f8c8 2000 	streq.w	r2, [r8]
 8008004:	605a      	strne	r2, [r3, #4]
 8008006:	e7eb      	b.n	8007fe0 <_malloc_r+0xa8>
 8008008:	4623      	mov	r3, r4
 800800a:	6864      	ldr	r4, [r4, #4]
 800800c:	e7ae      	b.n	8007f6c <_malloc_r+0x34>
 800800e:	463c      	mov	r4, r7
 8008010:	687f      	ldr	r7, [r7, #4]
 8008012:	e7b6      	b.n	8007f82 <_malloc_r+0x4a>
 8008014:	461a      	mov	r2, r3
 8008016:	685b      	ldr	r3, [r3, #4]
 8008018:	42a3      	cmp	r3, r4
 800801a:	d1fb      	bne.n	8008014 <_malloc_r+0xdc>
 800801c:	2300      	movs	r3, #0
 800801e:	6053      	str	r3, [r2, #4]
 8008020:	e7de      	b.n	8007fe0 <_malloc_r+0xa8>
 8008022:	230c      	movs	r3, #12
 8008024:	6033      	str	r3, [r6, #0]
 8008026:	4630      	mov	r0, r6
 8008028:	f000 f80c 	bl	8008044 <__malloc_unlock>
 800802c:	e794      	b.n	8007f58 <_malloc_r+0x20>
 800802e:	6005      	str	r5, [r0, #0]
 8008030:	e7d6      	b.n	8007fe0 <_malloc_r+0xa8>
 8008032:	bf00      	nop
 8008034:	2000074c 	.word	0x2000074c

08008038 <__malloc_lock>:
 8008038:	4801      	ldr	r0, [pc, #4]	@ (8008040 <__malloc_lock+0x8>)
 800803a:	f7ff b8ba 	b.w	80071b2 <__retarget_lock_acquire_recursive>
 800803e:	bf00      	nop
 8008040:	20000744 	.word	0x20000744

08008044 <__malloc_unlock>:
 8008044:	4801      	ldr	r0, [pc, #4]	@ (800804c <__malloc_unlock+0x8>)
 8008046:	f7ff b8b5 	b.w	80071b4 <__retarget_lock_release_recursive>
 800804a:	bf00      	nop
 800804c:	20000744 	.word	0x20000744

08008050 <_Balloc>:
 8008050:	b570      	push	{r4, r5, r6, lr}
 8008052:	69c6      	ldr	r6, [r0, #28]
 8008054:	4604      	mov	r4, r0
 8008056:	460d      	mov	r5, r1
 8008058:	b976      	cbnz	r6, 8008078 <_Balloc+0x28>
 800805a:	2010      	movs	r0, #16
 800805c:	f7ff ff42 	bl	8007ee4 <malloc>
 8008060:	4602      	mov	r2, r0
 8008062:	61e0      	str	r0, [r4, #28]
 8008064:	b920      	cbnz	r0, 8008070 <_Balloc+0x20>
 8008066:	4b18      	ldr	r3, [pc, #96]	@ (80080c8 <_Balloc+0x78>)
 8008068:	4818      	ldr	r0, [pc, #96]	@ (80080cc <_Balloc+0x7c>)
 800806a:	216b      	movs	r1, #107	@ 0x6b
 800806c:	f000 fdae 	bl	8008bcc <__assert_func>
 8008070:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8008074:	6006      	str	r6, [r0, #0]
 8008076:	60c6      	str	r6, [r0, #12]
 8008078:	69e6      	ldr	r6, [r4, #28]
 800807a:	68f3      	ldr	r3, [r6, #12]
 800807c:	b183      	cbz	r3, 80080a0 <_Balloc+0x50>
 800807e:	69e3      	ldr	r3, [r4, #28]
 8008080:	68db      	ldr	r3, [r3, #12]
 8008082:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 8008086:	b9b8      	cbnz	r0, 80080b8 <_Balloc+0x68>
 8008088:	2101      	movs	r1, #1
 800808a:	fa01 f605 	lsl.w	r6, r1, r5
 800808e:	1d72      	adds	r2, r6, #5
 8008090:	0092      	lsls	r2, r2, #2
 8008092:	4620      	mov	r0, r4
 8008094:	f000 fdb8 	bl	8008c08 <_calloc_r>
 8008098:	b160      	cbz	r0, 80080b4 <_Balloc+0x64>
 800809a:	e9c0 5601 	strd	r5, r6, [r0, #4]
 800809e:	e00e      	b.n	80080be <_Balloc+0x6e>
 80080a0:	2221      	movs	r2, #33	@ 0x21
 80080a2:	2104      	movs	r1, #4
 80080a4:	4620      	mov	r0, r4
 80080a6:	f000 fdaf 	bl	8008c08 <_calloc_r>
 80080aa:	69e3      	ldr	r3, [r4, #28]
 80080ac:	60f0      	str	r0, [r6, #12]
 80080ae:	68db      	ldr	r3, [r3, #12]
 80080b0:	2b00      	cmp	r3, #0
 80080b2:	d1e4      	bne.n	800807e <_Balloc+0x2e>
 80080b4:	2000      	movs	r0, #0
 80080b6:	bd70      	pop	{r4, r5, r6, pc}
 80080b8:	6802      	ldr	r2, [r0, #0]
 80080ba:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 80080be:	2300      	movs	r3, #0
 80080c0:	e9c0 3303 	strd	r3, r3, [r0, #12]
 80080c4:	e7f7      	b.n	80080b6 <_Balloc+0x66>
 80080c6:	bf00      	nop
 80080c8:	0800a485 	.word	0x0800a485
 80080cc:	0800a505 	.word	0x0800a505

080080d0 <_Bfree>:
 80080d0:	b570      	push	{r4, r5, r6, lr}
 80080d2:	69c6      	ldr	r6, [r0, #28]
 80080d4:	4605      	mov	r5, r0
 80080d6:	460c      	mov	r4, r1
 80080d8:	b976      	cbnz	r6, 80080f8 <_Bfree+0x28>
 80080da:	2010      	movs	r0, #16
 80080dc:	f7ff ff02 	bl	8007ee4 <malloc>
 80080e0:	4602      	mov	r2, r0
 80080e2:	61e8      	str	r0, [r5, #28]
 80080e4:	b920      	cbnz	r0, 80080f0 <_Bfree+0x20>
 80080e6:	4b09      	ldr	r3, [pc, #36]	@ (800810c <_Bfree+0x3c>)
 80080e8:	4809      	ldr	r0, [pc, #36]	@ (8008110 <_Bfree+0x40>)
 80080ea:	218f      	movs	r1, #143	@ 0x8f
 80080ec:	f000 fd6e 	bl	8008bcc <__assert_func>
 80080f0:	e9c0 6601 	strd	r6, r6, [r0, #4]
 80080f4:	6006      	str	r6, [r0, #0]
 80080f6:	60c6      	str	r6, [r0, #12]
 80080f8:	b13c      	cbz	r4, 800810a <_Bfree+0x3a>
 80080fa:	69eb      	ldr	r3, [r5, #28]
 80080fc:	6862      	ldr	r2, [r4, #4]
 80080fe:	68db      	ldr	r3, [r3, #12]
 8008100:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8008104:	6021      	str	r1, [r4, #0]
 8008106:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 800810a:	bd70      	pop	{r4, r5, r6, pc}
 800810c:	0800a485 	.word	0x0800a485
 8008110:	0800a505 	.word	0x0800a505

08008114 <__multadd>:
 8008114:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8008118:	690d      	ldr	r5, [r1, #16]
 800811a:	4607      	mov	r7, r0
 800811c:	460c      	mov	r4, r1
 800811e:	461e      	mov	r6, r3
 8008120:	f101 0c14 	add.w	ip, r1, #20
 8008124:	2000      	movs	r0, #0
 8008126:	f8dc 3000 	ldr.w	r3, [ip]
 800812a:	b299      	uxth	r1, r3
 800812c:	fb02 6101 	mla	r1, r2, r1, r6
 8008130:	0c1e      	lsrs	r6, r3, #16
 8008132:	0c0b      	lsrs	r3, r1, #16
 8008134:	fb02 3306 	mla	r3, r2, r6, r3
 8008138:	b289      	uxth	r1, r1
 800813a:	3001      	adds	r0, #1
 800813c:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 8008140:	4285      	cmp	r5, r0
 8008142:	f84c 1b04 	str.w	r1, [ip], #4
 8008146:	ea4f 4613 	mov.w	r6, r3, lsr #16
 800814a:	dcec      	bgt.n	8008126 <__multadd+0x12>
 800814c:	b30e      	cbz	r6, 8008192 <__multadd+0x7e>
 800814e:	68a3      	ldr	r3, [r4, #8]
 8008150:	42ab      	cmp	r3, r5
 8008152:	dc19      	bgt.n	8008188 <__multadd+0x74>
 8008154:	6861      	ldr	r1, [r4, #4]
 8008156:	4638      	mov	r0, r7
 8008158:	3101      	adds	r1, #1
 800815a:	f7ff ff79 	bl	8008050 <_Balloc>
 800815e:	4680      	mov	r8, r0
 8008160:	b928      	cbnz	r0, 800816e <__multadd+0x5a>
 8008162:	4602      	mov	r2, r0
 8008164:	4b0c      	ldr	r3, [pc, #48]	@ (8008198 <__multadd+0x84>)
 8008166:	480d      	ldr	r0, [pc, #52]	@ (800819c <__multadd+0x88>)
 8008168:	21ba      	movs	r1, #186	@ 0xba
 800816a:	f000 fd2f 	bl	8008bcc <__assert_func>
 800816e:	6922      	ldr	r2, [r4, #16]
 8008170:	3202      	adds	r2, #2
 8008172:	f104 010c 	add.w	r1, r4, #12
 8008176:	0092      	lsls	r2, r2, #2
 8008178:	300c      	adds	r0, #12
 800817a:	f000 fd19 	bl	8008bb0 <memcpy>
 800817e:	4621      	mov	r1, r4
 8008180:	4638      	mov	r0, r7
 8008182:	f7ff ffa5 	bl	80080d0 <_Bfree>
 8008186:	4644      	mov	r4, r8
 8008188:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 800818c:	3501      	adds	r5, #1
 800818e:	615e      	str	r6, [r3, #20]
 8008190:	6125      	str	r5, [r4, #16]
 8008192:	4620      	mov	r0, r4
 8008194:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8008198:	0800a4f4 	.word	0x0800a4f4
 800819c:	0800a505 	.word	0x0800a505

080081a0 <__hi0bits>:
 80081a0:	f5b0 3f80 	cmp.w	r0, #65536	@ 0x10000
 80081a4:	4603      	mov	r3, r0
 80081a6:	bf36      	itet	cc
 80081a8:	0403      	lslcc	r3, r0, #16
 80081aa:	2000      	movcs	r0, #0
 80081ac:	2010      	movcc	r0, #16
 80081ae:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 80081b2:	bf3c      	itt	cc
 80081b4:	021b      	lslcc	r3, r3, #8
 80081b6:	3008      	addcc	r0, #8
 80081b8:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 80081bc:	bf3c      	itt	cc
 80081be:	011b      	lslcc	r3, r3, #4
 80081c0:	3004      	addcc	r0, #4
 80081c2:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80081c6:	bf3c      	itt	cc
 80081c8:	009b      	lslcc	r3, r3, #2
 80081ca:	3002      	addcc	r0, #2
 80081cc:	2b00      	cmp	r3, #0
 80081ce:	db05      	blt.n	80081dc <__hi0bits+0x3c>
 80081d0:	f013 4f80 	tst.w	r3, #1073741824	@ 0x40000000
 80081d4:	f100 0001 	add.w	r0, r0, #1
 80081d8:	bf08      	it	eq
 80081da:	2020      	moveq	r0, #32
 80081dc:	4770      	bx	lr

080081de <__lo0bits>:
 80081de:	6803      	ldr	r3, [r0, #0]
 80081e0:	4602      	mov	r2, r0
 80081e2:	f013 0007 	ands.w	r0, r3, #7
 80081e6:	d00b      	beq.n	8008200 <__lo0bits+0x22>
 80081e8:	07d9      	lsls	r1, r3, #31
 80081ea:	d421      	bmi.n	8008230 <__lo0bits+0x52>
 80081ec:	0798      	lsls	r0, r3, #30
 80081ee:	bf49      	itett	mi
 80081f0:	085b      	lsrmi	r3, r3, #1
 80081f2:	089b      	lsrpl	r3, r3, #2
 80081f4:	2001      	movmi	r0, #1
 80081f6:	6013      	strmi	r3, [r2, #0]
 80081f8:	bf5c      	itt	pl
 80081fa:	6013      	strpl	r3, [r2, #0]
 80081fc:	2002      	movpl	r0, #2
 80081fe:	4770      	bx	lr
 8008200:	b299      	uxth	r1, r3
 8008202:	b909      	cbnz	r1, 8008208 <__lo0bits+0x2a>
 8008204:	0c1b      	lsrs	r3, r3, #16
 8008206:	2010      	movs	r0, #16
 8008208:	b2d9      	uxtb	r1, r3
 800820a:	b909      	cbnz	r1, 8008210 <__lo0bits+0x32>
 800820c:	3008      	adds	r0, #8
 800820e:	0a1b      	lsrs	r3, r3, #8
 8008210:	0719      	lsls	r1, r3, #28
 8008212:	bf04      	itt	eq
 8008214:	091b      	lsreq	r3, r3, #4
 8008216:	3004      	addeq	r0, #4
 8008218:	0799      	lsls	r1, r3, #30
 800821a:	bf04      	itt	eq
 800821c:	089b      	lsreq	r3, r3, #2
 800821e:	3002      	addeq	r0, #2
 8008220:	07d9      	lsls	r1, r3, #31
 8008222:	d403      	bmi.n	800822c <__lo0bits+0x4e>
 8008224:	085b      	lsrs	r3, r3, #1
 8008226:	f100 0001 	add.w	r0, r0, #1
 800822a:	d003      	beq.n	8008234 <__lo0bits+0x56>
 800822c:	6013      	str	r3, [r2, #0]
 800822e:	4770      	bx	lr
 8008230:	2000      	movs	r0, #0
 8008232:	4770      	bx	lr
 8008234:	2020      	movs	r0, #32
 8008236:	4770      	bx	lr

08008238 <__i2b>:
 8008238:	b510      	push	{r4, lr}
 800823a:	460c      	mov	r4, r1
 800823c:	2101      	movs	r1, #1
 800823e:	f7ff ff07 	bl	8008050 <_Balloc>
 8008242:	4602      	mov	r2, r0
 8008244:	b928      	cbnz	r0, 8008252 <__i2b+0x1a>
 8008246:	4b05      	ldr	r3, [pc, #20]	@ (800825c <__i2b+0x24>)
 8008248:	4805      	ldr	r0, [pc, #20]	@ (8008260 <__i2b+0x28>)
 800824a:	f240 1145 	movw	r1, #325	@ 0x145
 800824e:	f000 fcbd 	bl	8008bcc <__assert_func>
 8008252:	2301      	movs	r3, #1
 8008254:	6144      	str	r4, [r0, #20]
 8008256:	6103      	str	r3, [r0, #16]
 8008258:	bd10      	pop	{r4, pc}
 800825a:	bf00      	nop
 800825c:	0800a4f4 	.word	0x0800a4f4
 8008260:	0800a505 	.word	0x0800a505

08008264 <__multiply>:
 8008264:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008268:	4614      	mov	r4, r2
 800826a:	690a      	ldr	r2, [r1, #16]
 800826c:	6923      	ldr	r3, [r4, #16]
 800826e:	429a      	cmp	r2, r3
 8008270:	bfa8      	it	ge
 8008272:	4623      	movge	r3, r4
 8008274:	460f      	mov	r7, r1
 8008276:	bfa4      	itt	ge
 8008278:	460c      	movge	r4, r1
 800827a:	461f      	movge	r7, r3
 800827c:	f8d4 a010 	ldr.w	sl, [r4, #16]
 8008280:	f8d7 9010 	ldr.w	r9, [r7, #16]
 8008284:	68a3      	ldr	r3, [r4, #8]
 8008286:	6861      	ldr	r1, [r4, #4]
 8008288:	eb0a 0609 	add.w	r6, sl, r9
 800828c:	42b3      	cmp	r3, r6
 800828e:	b085      	sub	sp, #20
 8008290:	bfb8      	it	lt
 8008292:	3101      	addlt	r1, #1
 8008294:	f7ff fedc 	bl	8008050 <_Balloc>
 8008298:	b930      	cbnz	r0, 80082a8 <__multiply+0x44>
 800829a:	4602      	mov	r2, r0
 800829c:	4b44      	ldr	r3, [pc, #272]	@ (80083b0 <__multiply+0x14c>)
 800829e:	4845      	ldr	r0, [pc, #276]	@ (80083b4 <__multiply+0x150>)
 80082a0:	f44f 71b1 	mov.w	r1, #354	@ 0x162
 80082a4:	f000 fc92 	bl	8008bcc <__assert_func>
 80082a8:	f100 0514 	add.w	r5, r0, #20
 80082ac:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 80082b0:	462b      	mov	r3, r5
 80082b2:	2200      	movs	r2, #0
 80082b4:	4543      	cmp	r3, r8
 80082b6:	d321      	bcc.n	80082fc <__multiply+0x98>
 80082b8:	f107 0114 	add.w	r1, r7, #20
 80082bc:	f104 0214 	add.w	r2, r4, #20
 80082c0:	eb02 028a 	add.w	r2, r2, sl, lsl #2
 80082c4:	eb01 0389 	add.w	r3, r1, r9, lsl #2
 80082c8:	9302      	str	r3, [sp, #8]
 80082ca:	1b13      	subs	r3, r2, r4
 80082cc:	3b15      	subs	r3, #21
 80082ce:	f023 0303 	bic.w	r3, r3, #3
 80082d2:	3304      	adds	r3, #4
 80082d4:	f104 0715 	add.w	r7, r4, #21
 80082d8:	42ba      	cmp	r2, r7
 80082da:	bf38      	it	cc
 80082dc:	2304      	movcc	r3, #4
 80082de:	9301      	str	r3, [sp, #4]
 80082e0:	9b02      	ldr	r3, [sp, #8]
 80082e2:	9103      	str	r1, [sp, #12]
 80082e4:	428b      	cmp	r3, r1
 80082e6:	d80c      	bhi.n	8008302 <__multiply+0x9e>
 80082e8:	2e00      	cmp	r6, #0
 80082ea:	dd03      	ble.n	80082f4 <__multiply+0x90>
 80082ec:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 80082f0:	2b00      	cmp	r3, #0
 80082f2:	d05b      	beq.n	80083ac <__multiply+0x148>
 80082f4:	6106      	str	r6, [r0, #16]
 80082f6:	b005      	add	sp, #20
 80082f8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80082fc:	f843 2b04 	str.w	r2, [r3], #4
 8008300:	e7d8      	b.n	80082b4 <__multiply+0x50>
 8008302:	f8b1 a000 	ldrh.w	sl, [r1]
 8008306:	f1ba 0f00 	cmp.w	sl, #0
 800830a:	d024      	beq.n	8008356 <__multiply+0xf2>
 800830c:	f104 0e14 	add.w	lr, r4, #20
 8008310:	46a9      	mov	r9, r5
 8008312:	f04f 0c00 	mov.w	ip, #0
 8008316:	f85e 7b04 	ldr.w	r7, [lr], #4
 800831a:	f8d9 3000 	ldr.w	r3, [r9]
 800831e:	fa1f fb87 	uxth.w	fp, r7
 8008322:	b29b      	uxth	r3, r3
 8008324:	fb0a 330b 	mla	r3, sl, fp, r3
 8008328:	ea4f 4b17 	mov.w	fp, r7, lsr #16
 800832c:	f8d9 7000 	ldr.w	r7, [r9]
 8008330:	4463      	add	r3, ip
 8008332:	ea4f 4c17 	mov.w	ip, r7, lsr #16
 8008336:	fb0a c70b 	mla	r7, sl, fp, ip
 800833a:	eb07 4713 	add.w	r7, r7, r3, lsr #16
 800833e:	b29b      	uxth	r3, r3
 8008340:	ea43 4307 	orr.w	r3, r3, r7, lsl #16
 8008344:	4572      	cmp	r2, lr
 8008346:	f849 3b04 	str.w	r3, [r9], #4
 800834a:	ea4f 4c17 	mov.w	ip, r7, lsr #16
 800834e:	d8e2      	bhi.n	8008316 <__multiply+0xb2>
 8008350:	9b01      	ldr	r3, [sp, #4]
 8008352:	f845 c003 	str.w	ip, [r5, r3]
 8008356:	9b03      	ldr	r3, [sp, #12]
 8008358:	f8b3 9002 	ldrh.w	r9, [r3, #2]
 800835c:	3104      	adds	r1, #4
 800835e:	f1b9 0f00 	cmp.w	r9, #0
 8008362:	d021      	beq.n	80083a8 <__multiply+0x144>
 8008364:	682b      	ldr	r3, [r5, #0]
 8008366:	f104 0c14 	add.w	ip, r4, #20
 800836a:	46ae      	mov	lr, r5
 800836c:	f04f 0a00 	mov.w	sl, #0
 8008370:	f8bc b000 	ldrh.w	fp, [ip]
 8008374:	f8be 7002 	ldrh.w	r7, [lr, #2]
 8008378:	fb09 770b 	mla	r7, r9, fp, r7
 800837c:	4457      	add	r7, sl
 800837e:	b29b      	uxth	r3, r3
 8008380:	ea43 4307 	orr.w	r3, r3, r7, lsl #16
 8008384:	f84e 3b04 	str.w	r3, [lr], #4
 8008388:	f85c 3b04 	ldr.w	r3, [ip], #4
 800838c:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 8008390:	f8be 3000 	ldrh.w	r3, [lr]
 8008394:	fb09 330a 	mla	r3, r9, sl, r3
 8008398:	eb03 4317 	add.w	r3, r3, r7, lsr #16
 800839c:	4562      	cmp	r2, ip
 800839e:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 80083a2:	d8e5      	bhi.n	8008370 <__multiply+0x10c>
 80083a4:	9f01      	ldr	r7, [sp, #4]
 80083a6:	51eb      	str	r3, [r5, r7]
 80083a8:	3504      	adds	r5, #4
 80083aa:	e799      	b.n	80082e0 <__multiply+0x7c>
 80083ac:	3e01      	subs	r6, #1
 80083ae:	e79b      	b.n	80082e8 <__multiply+0x84>
 80083b0:	0800a4f4 	.word	0x0800a4f4
 80083b4:	0800a505 	.word	0x0800a505

080083b8 <__pow5mult>:
 80083b8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80083bc:	4615      	mov	r5, r2
 80083be:	f012 0203 	ands.w	r2, r2, #3
 80083c2:	4607      	mov	r7, r0
 80083c4:	460e      	mov	r6, r1
 80083c6:	d007      	beq.n	80083d8 <__pow5mult+0x20>
 80083c8:	4c25      	ldr	r4, [pc, #148]	@ (8008460 <__pow5mult+0xa8>)
 80083ca:	3a01      	subs	r2, #1
 80083cc:	2300      	movs	r3, #0
 80083ce:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 80083d2:	f7ff fe9f 	bl	8008114 <__multadd>
 80083d6:	4606      	mov	r6, r0
 80083d8:	10ad      	asrs	r5, r5, #2
 80083da:	d03d      	beq.n	8008458 <__pow5mult+0xa0>
 80083dc:	69fc      	ldr	r4, [r7, #28]
 80083de:	b97c      	cbnz	r4, 8008400 <__pow5mult+0x48>
 80083e0:	2010      	movs	r0, #16
 80083e2:	f7ff fd7f 	bl	8007ee4 <malloc>
 80083e6:	4602      	mov	r2, r0
 80083e8:	61f8      	str	r0, [r7, #28]
 80083ea:	b928      	cbnz	r0, 80083f8 <__pow5mult+0x40>
 80083ec:	4b1d      	ldr	r3, [pc, #116]	@ (8008464 <__pow5mult+0xac>)
 80083ee:	481e      	ldr	r0, [pc, #120]	@ (8008468 <__pow5mult+0xb0>)
 80083f0:	f240 11b3 	movw	r1, #435	@ 0x1b3
 80083f4:	f000 fbea 	bl	8008bcc <__assert_func>
 80083f8:	e9c0 4401 	strd	r4, r4, [r0, #4]
 80083fc:	6004      	str	r4, [r0, #0]
 80083fe:	60c4      	str	r4, [r0, #12]
 8008400:	f8d7 801c 	ldr.w	r8, [r7, #28]
 8008404:	f8d8 4008 	ldr.w	r4, [r8, #8]
 8008408:	b94c      	cbnz	r4, 800841e <__pow5mult+0x66>
 800840a:	f240 2171 	movw	r1, #625	@ 0x271
 800840e:	4638      	mov	r0, r7
 8008410:	f7ff ff12 	bl	8008238 <__i2b>
 8008414:	2300      	movs	r3, #0
 8008416:	f8c8 0008 	str.w	r0, [r8, #8]
 800841a:	4604      	mov	r4, r0
 800841c:	6003      	str	r3, [r0, #0]
 800841e:	f04f 0900 	mov.w	r9, #0
 8008422:	07eb      	lsls	r3, r5, #31
 8008424:	d50a      	bpl.n	800843c <__pow5mult+0x84>
 8008426:	4631      	mov	r1, r6
 8008428:	4622      	mov	r2, r4
 800842a:	4638      	mov	r0, r7
 800842c:	f7ff ff1a 	bl	8008264 <__multiply>
 8008430:	4631      	mov	r1, r6
 8008432:	4680      	mov	r8, r0
 8008434:	4638      	mov	r0, r7
 8008436:	f7ff fe4b 	bl	80080d0 <_Bfree>
 800843a:	4646      	mov	r6, r8
 800843c:	106d      	asrs	r5, r5, #1
 800843e:	d00b      	beq.n	8008458 <__pow5mult+0xa0>
 8008440:	6820      	ldr	r0, [r4, #0]
 8008442:	b938      	cbnz	r0, 8008454 <__pow5mult+0x9c>
 8008444:	4622      	mov	r2, r4
 8008446:	4621      	mov	r1, r4
 8008448:	4638      	mov	r0, r7
 800844a:	f7ff ff0b 	bl	8008264 <__multiply>
 800844e:	6020      	str	r0, [r4, #0]
 8008450:	f8c0 9000 	str.w	r9, [r0]
 8008454:	4604      	mov	r4, r0
 8008456:	e7e4      	b.n	8008422 <__pow5mult+0x6a>
 8008458:	4630      	mov	r0, r6
 800845a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800845e:	bf00      	nop
 8008460:	0800a560 	.word	0x0800a560
 8008464:	0800a485 	.word	0x0800a485
 8008468:	0800a505 	.word	0x0800a505

0800846c <__lshift>:
 800846c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8008470:	460c      	mov	r4, r1
 8008472:	6849      	ldr	r1, [r1, #4]
 8008474:	6923      	ldr	r3, [r4, #16]
 8008476:	eb03 1862 	add.w	r8, r3, r2, asr #5
 800847a:	68a3      	ldr	r3, [r4, #8]
 800847c:	4607      	mov	r7, r0
 800847e:	4691      	mov	r9, r2
 8008480:	ea4f 1a62 	mov.w	sl, r2, asr #5
 8008484:	f108 0601 	add.w	r6, r8, #1
 8008488:	42b3      	cmp	r3, r6
 800848a:	db0b      	blt.n	80084a4 <__lshift+0x38>
 800848c:	4638      	mov	r0, r7
 800848e:	f7ff fddf 	bl	8008050 <_Balloc>
 8008492:	4605      	mov	r5, r0
 8008494:	b948      	cbnz	r0, 80084aa <__lshift+0x3e>
 8008496:	4602      	mov	r2, r0
 8008498:	4b28      	ldr	r3, [pc, #160]	@ (800853c <__lshift+0xd0>)
 800849a:	4829      	ldr	r0, [pc, #164]	@ (8008540 <__lshift+0xd4>)
 800849c:	f44f 71ef 	mov.w	r1, #478	@ 0x1de
 80084a0:	f000 fb94 	bl	8008bcc <__assert_func>
 80084a4:	3101      	adds	r1, #1
 80084a6:	005b      	lsls	r3, r3, #1
 80084a8:	e7ee      	b.n	8008488 <__lshift+0x1c>
 80084aa:	2300      	movs	r3, #0
 80084ac:	f100 0114 	add.w	r1, r0, #20
 80084b0:	f100 0210 	add.w	r2, r0, #16
 80084b4:	4618      	mov	r0, r3
 80084b6:	4553      	cmp	r3, sl
 80084b8:	db33      	blt.n	8008522 <__lshift+0xb6>
 80084ba:	6920      	ldr	r0, [r4, #16]
 80084bc:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 80084c0:	f104 0314 	add.w	r3, r4, #20
 80084c4:	f019 091f 	ands.w	r9, r9, #31
 80084c8:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 80084cc:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 80084d0:	d02b      	beq.n	800852a <__lshift+0xbe>
 80084d2:	f1c9 0e20 	rsb	lr, r9, #32
 80084d6:	468a      	mov	sl, r1
 80084d8:	2200      	movs	r2, #0
 80084da:	6818      	ldr	r0, [r3, #0]
 80084dc:	fa00 f009 	lsl.w	r0, r0, r9
 80084e0:	4310      	orrs	r0, r2
 80084e2:	f84a 0b04 	str.w	r0, [sl], #4
 80084e6:	f853 2b04 	ldr.w	r2, [r3], #4
 80084ea:	459c      	cmp	ip, r3
 80084ec:	fa22 f20e 	lsr.w	r2, r2, lr
 80084f0:	d8f3      	bhi.n	80084da <__lshift+0x6e>
 80084f2:	ebac 0304 	sub.w	r3, ip, r4
 80084f6:	3b15      	subs	r3, #21
 80084f8:	f023 0303 	bic.w	r3, r3, #3
 80084fc:	3304      	adds	r3, #4
 80084fe:	f104 0015 	add.w	r0, r4, #21
 8008502:	4584      	cmp	ip, r0
 8008504:	bf38      	it	cc
 8008506:	2304      	movcc	r3, #4
 8008508:	50ca      	str	r2, [r1, r3]
 800850a:	b10a      	cbz	r2, 8008510 <__lshift+0xa4>
 800850c:	f108 0602 	add.w	r6, r8, #2
 8008510:	3e01      	subs	r6, #1
 8008512:	4638      	mov	r0, r7
 8008514:	612e      	str	r6, [r5, #16]
 8008516:	4621      	mov	r1, r4
 8008518:	f7ff fdda 	bl	80080d0 <_Bfree>
 800851c:	4628      	mov	r0, r5
 800851e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008522:	f842 0f04 	str.w	r0, [r2, #4]!
 8008526:	3301      	adds	r3, #1
 8008528:	e7c5      	b.n	80084b6 <__lshift+0x4a>
 800852a:	3904      	subs	r1, #4
 800852c:	f853 2b04 	ldr.w	r2, [r3], #4
 8008530:	f841 2f04 	str.w	r2, [r1, #4]!
 8008534:	459c      	cmp	ip, r3
 8008536:	d8f9      	bhi.n	800852c <__lshift+0xc0>
 8008538:	e7ea      	b.n	8008510 <__lshift+0xa4>
 800853a:	bf00      	nop
 800853c:	0800a4f4 	.word	0x0800a4f4
 8008540:	0800a505 	.word	0x0800a505

08008544 <__mcmp>:
 8008544:	690a      	ldr	r2, [r1, #16]
 8008546:	4603      	mov	r3, r0
 8008548:	6900      	ldr	r0, [r0, #16]
 800854a:	1a80      	subs	r0, r0, r2
 800854c:	b530      	push	{r4, r5, lr}
 800854e:	d10e      	bne.n	800856e <__mcmp+0x2a>
 8008550:	3314      	adds	r3, #20
 8008552:	3114      	adds	r1, #20
 8008554:	eb03 0482 	add.w	r4, r3, r2, lsl #2
 8008558:	eb01 0182 	add.w	r1, r1, r2, lsl #2
 800855c:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 8008560:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 8008564:	4295      	cmp	r5, r2
 8008566:	d003      	beq.n	8008570 <__mcmp+0x2c>
 8008568:	d205      	bcs.n	8008576 <__mcmp+0x32>
 800856a:	f04f 30ff 	mov.w	r0, #4294967295
 800856e:	bd30      	pop	{r4, r5, pc}
 8008570:	42a3      	cmp	r3, r4
 8008572:	d3f3      	bcc.n	800855c <__mcmp+0x18>
 8008574:	e7fb      	b.n	800856e <__mcmp+0x2a>
 8008576:	2001      	movs	r0, #1
 8008578:	e7f9      	b.n	800856e <__mcmp+0x2a>
	...

0800857c <__mdiff>:
 800857c:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008580:	4689      	mov	r9, r1
 8008582:	4606      	mov	r6, r0
 8008584:	4611      	mov	r1, r2
 8008586:	4648      	mov	r0, r9
 8008588:	4614      	mov	r4, r2
 800858a:	f7ff ffdb 	bl	8008544 <__mcmp>
 800858e:	1e05      	subs	r5, r0, #0
 8008590:	d112      	bne.n	80085b8 <__mdiff+0x3c>
 8008592:	4629      	mov	r1, r5
 8008594:	4630      	mov	r0, r6
 8008596:	f7ff fd5b 	bl	8008050 <_Balloc>
 800859a:	4602      	mov	r2, r0
 800859c:	b928      	cbnz	r0, 80085aa <__mdiff+0x2e>
 800859e:	4b3f      	ldr	r3, [pc, #252]	@ (800869c <__mdiff+0x120>)
 80085a0:	f240 2137 	movw	r1, #567	@ 0x237
 80085a4:	483e      	ldr	r0, [pc, #248]	@ (80086a0 <__mdiff+0x124>)
 80085a6:	f000 fb11 	bl	8008bcc <__assert_func>
 80085aa:	2301      	movs	r3, #1
 80085ac:	e9c0 3504 	strd	r3, r5, [r0, #16]
 80085b0:	4610      	mov	r0, r2
 80085b2:	b003      	add	sp, #12
 80085b4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80085b8:	bfbc      	itt	lt
 80085ba:	464b      	movlt	r3, r9
 80085bc:	46a1      	movlt	r9, r4
 80085be:	4630      	mov	r0, r6
 80085c0:	f8d9 1004 	ldr.w	r1, [r9, #4]
 80085c4:	bfba      	itte	lt
 80085c6:	461c      	movlt	r4, r3
 80085c8:	2501      	movlt	r5, #1
 80085ca:	2500      	movge	r5, #0
 80085cc:	f7ff fd40 	bl	8008050 <_Balloc>
 80085d0:	4602      	mov	r2, r0
 80085d2:	b918      	cbnz	r0, 80085dc <__mdiff+0x60>
 80085d4:	4b31      	ldr	r3, [pc, #196]	@ (800869c <__mdiff+0x120>)
 80085d6:	f240 2145 	movw	r1, #581	@ 0x245
 80085da:	e7e3      	b.n	80085a4 <__mdiff+0x28>
 80085dc:	f8d9 7010 	ldr.w	r7, [r9, #16]
 80085e0:	6926      	ldr	r6, [r4, #16]
 80085e2:	60c5      	str	r5, [r0, #12]
 80085e4:	f109 0310 	add.w	r3, r9, #16
 80085e8:	f109 0514 	add.w	r5, r9, #20
 80085ec:	f104 0e14 	add.w	lr, r4, #20
 80085f0:	f100 0b14 	add.w	fp, r0, #20
 80085f4:	eb05 0887 	add.w	r8, r5, r7, lsl #2
 80085f8:	eb0e 0686 	add.w	r6, lr, r6, lsl #2
 80085fc:	9301      	str	r3, [sp, #4]
 80085fe:	46d9      	mov	r9, fp
 8008600:	f04f 0c00 	mov.w	ip, #0
 8008604:	9b01      	ldr	r3, [sp, #4]
 8008606:	f85e 0b04 	ldr.w	r0, [lr], #4
 800860a:	f853 af04 	ldr.w	sl, [r3, #4]!
 800860e:	9301      	str	r3, [sp, #4]
 8008610:	fa1f f38a 	uxth.w	r3, sl
 8008614:	4619      	mov	r1, r3
 8008616:	b283      	uxth	r3, r0
 8008618:	1acb      	subs	r3, r1, r3
 800861a:	0c00      	lsrs	r0, r0, #16
 800861c:	4463      	add	r3, ip
 800861e:	ebc0 401a 	rsb	r0, r0, sl, lsr #16
 8008622:	eb00 4023 	add.w	r0, r0, r3, asr #16
 8008626:	b29b      	uxth	r3, r3
 8008628:	ea43 4300 	orr.w	r3, r3, r0, lsl #16
 800862c:	4576      	cmp	r6, lr
 800862e:	f849 3b04 	str.w	r3, [r9], #4
 8008632:	ea4f 4c20 	mov.w	ip, r0, asr #16
 8008636:	d8e5      	bhi.n	8008604 <__mdiff+0x88>
 8008638:	1b33      	subs	r3, r6, r4
 800863a:	3b15      	subs	r3, #21
 800863c:	f023 0303 	bic.w	r3, r3, #3
 8008640:	3415      	adds	r4, #21
 8008642:	3304      	adds	r3, #4
 8008644:	42a6      	cmp	r6, r4
 8008646:	bf38      	it	cc
 8008648:	2304      	movcc	r3, #4
 800864a:	441d      	add	r5, r3
 800864c:	445b      	add	r3, fp
 800864e:	461e      	mov	r6, r3
 8008650:	462c      	mov	r4, r5
 8008652:	4544      	cmp	r4, r8
 8008654:	d30e      	bcc.n	8008674 <__mdiff+0xf8>
 8008656:	f108 0103 	add.w	r1, r8, #3
 800865a:	1b49      	subs	r1, r1, r5
 800865c:	f021 0103 	bic.w	r1, r1, #3
 8008660:	3d03      	subs	r5, #3
 8008662:	45a8      	cmp	r8, r5
 8008664:	bf38      	it	cc
 8008666:	2100      	movcc	r1, #0
 8008668:	440b      	add	r3, r1
 800866a:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 800866e:	b191      	cbz	r1, 8008696 <__mdiff+0x11a>
 8008670:	6117      	str	r7, [r2, #16]
 8008672:	e79d      	b.n	80085b0 <__mdiff+0x34>
 8008674:	f854 1b04 	ldr.w	r1, [r4], #4
 8008678:	46e6      	mov	lr, ip
 800867a:	0c08      	lsrs	r0, r1, #16
 800867c:	fa1c fc81 	uxtah	ip, ip, r1
 8008680:	4471      	add	r1, lr
 8008682:	eb00 402c 	add.w	r0, r0, ip, asr #16
 8008686:	b289      	uxth	r1, r1
 8008688:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 800868c:	f846 1b04 	str.w	r1, [r6], #4
 8008690:	ea4f 4c20 	mov.w	ip, r0, asr #16
 8008694:	e7dd      	b.n	8008652 <__mdiff+0xd6>
 8008696:	3f01      	subs	r7, #1
 8008698:	e7e7      	b.n	800866a <__mdiff+0xee>
 800869a:	bf00      	nop
 800869c:	0800a4f4 	.word	0x0800a4f4
 80086a0:	0800a505 	.word	0x0800a505

080086a4 <__d2b>:
 80086a4:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 80086a8:	460f      	mov	r7, r1
 80086aa:	2101      	movs	r1, #1
 80086ac:	ec59 8b10 	vmov	r8, r9, d0
 80086b0:	4616      	mov	r6, r2
 80086b2:	f7ff fccd 	bl	8008050 <_Balloc>
 80086b6:	4604      	mov	r4, r0
 80086b8:	b930      	cbnz	r0, 80086c8 <__d2b+0x24>
 80086ba:	4602      	mov	r2, r0
 80086bc:	4b23      	ldr	r3, [pc, #140]	@ (800874c <__d2b+0xa8>)
 80086be:	4824      	ldr	r0, [pc, #144]	@ (8008750 <__d2b+0xac>)
 80086c0:	f240 310f 	movw	r1, #783	@ 0x30f
 80086c4:	f000 fa82 	bl	8008bcc <__assert_func>
 80086c8:	f3c9 550a 	ubfx	r5, r9, #20, #11
 80086cc:	f3c9 0313 	ubfx	r3, r9, #0, #20
 80086d0:	b10d      	cbz	r5, 80086d6 <__d2b+0x32>
 80086d2:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 80086d6:	9301      	str	r3, [sp, #4]
 80086d8:	f1b8 0300 	subs.w	r3, r8, #0
 80086dc:	d023      	beq.n	8008726 <__d2b+0x82>
 80086de:	4668      	mov	r0, sp
 80086e0:	9300      	str	r3, [sp, #0]
 80086e2:	f7ff fd7c 	bl	80081de <__lo0bits>
 80086e6:	e9dd 1200 	ldrd	r1, r2, [sp]
 80086ea:	b1d0      	cbz	r0, 8008722 <__d2b+0x7e>
 80086ec:	f1c0 0320 	rsb	r3, r0, #32
 80086f0:	fa02 f303 	lsl.w	r3, r2, r3
 80086f4:	430b      	orrs	r3, r1
 80086f6:	40c2      	lsrs	r2, r0
 80086f8:	6163      	str	r3, [r4, #20]
 80086fa:	9201      	str	r2, [sp, #4]
 80086fc:	9b01      	ldr	r3, [sp, #4]
 80086fe:	61a3      	str	r3, [r4, #24]
 8008700:	2b00      	cmp	r3, #0
 8008702:	bf0c      	ite	eq
 8008704:	2201      	moveq	r2, #1
 8008706:	2202      	movne	r2, #2
 8008708:	6122      	str	r2, [r4, #16]
 800870a:	b1a5      	cbz	r5, 8008736 <__d2b+0x92>
 800870c:	f2a5 4533 	subw	r5, r5, #1075	@ 0x433
 8008710:	4405      	add	r5, r0
 8008712:	603d      	str	r5, [r7, #0]
 8008714:	f1c0 0035 	rsb	r0, r0, #53	@ 0x35
 8008718:	6030      	str	r0, [r6, #0]
 800871a:	4620      	mov	r0, r4
 800871c:	b003      	add	sp, #12
 800871e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8008722:	6161      	str	r1, [r4, #20]
 8008724:	e7ea      	b.n	80086fc <__d2b+0x58>
 8008726:	a801      	add	r0, sp, #4
 8008728:	f7ff fd59 	bl	80081de <__lo0bits>
 800872c:	9b01      	ldr	r3, [sp, #4]
 800872e:	6163      	str	r3, [r4, #20]
 8008730:	3020      	adds	r0, #32
 8008732:	2201      	movs	r2, #1
 8008734:	e7e8      	b.n	8008708 <__d2b+0x64>
 8008736:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 800873a:	f2a0 4032 	subw	r0, r0, #1074	@ 0x432
 800873e:	6038      	str	r0, [r7, #0]
 8008740:	6918      	ldr	r0, [r3, #16]
 8008742:	f7ff fd2d 	bl	80081a0 <__hi0bits>
 8008746:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 800874a:	e7e5      	b.n	8008718 <__d2b+0x74>
 800874c:	0800a4f4 	.word	0x0800a4f4
 8008750:	0800a505 	.word	0x0800a505

08008754 <__ssputs_r>:
 8008754:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8008758:	688e      	ldr	r6, [r1, #8]
 800875a:	461f      	mov	r7, r3
 800875c:	42be      	cmp	r6, r7
 800875e:	680b      	ldr	r3, [r1, #0]
 8008760:	4682      	mov	sl, r0
 8008762:	460c      	mov	r4, r1
 8008764:	4690      	mov	r8, r2
 8008766:	d82d      	bhi.n	80087c4 <__ssputs_r+0x70>
 8008768:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 800876c:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 8008770:	d026      	beq.n	80087c0 <__ssputs_r+0x6c>
 8008772:	6965      	ldr	r5, [r4, #20]
 8008774:	6909      	ldr	r1, [r1, #16]
 8008776:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800877a:	eba3 0901 	sub.w	r9, r3, r1
 800877e:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8008782:	1c7b      	adds	r3, r7, #1
 8008784:	444b      	add	r3, r9
 8008786:	106d      	asrs	r5, r5, #1
 8008788:	429d      	cmp	r5, r3
 800878a:	bf38      	it	cc
 800878c:	461d      	movcc	r5, r3
 800878e:	0553      	lsls	r3, r2, #21
 8008790:	d527      	bpl.n	80087e2 <__ssputs_r+0x8e>
 8008792:	4629      	mov	r1, r5
 8008794:	f7ff fbd0 	bl	8007f38 <_malloc_r>
 8008798:	4606      	mov	r6, r0
 800879a:	b360      	cbz	r0, 80087f6 <__ssputs_r+0xa2>
 800879c:	6921      	ldr	r1, [r4, #16]
 800879e:	464a      	mov	r2, r9
 80087a0:	f000 fa06 	bl	8008bb0 <memcpy>
 80087a4:	89a3      	ldrh	r3, [r4, #12]
 80087a6:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 80087aa:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80087ae:	81a3      	strh	r3, [r4, #12]
 80087b0:	6126      	str	r6, [r4, #16]
 80087b2:	6165      	str	r5, [r4, #20]
 80087b4:	444e      	add	r6, r9
 80087b6:	eba5 0509 	sub.w	r5, r5, r9
 80087ba:	6026      	str	r6, [r4, #0]
 80087bc:	60a5      	str	r5, [r4, #8]
 80087be:	463e      	mov	r6, r7
 80087c0:	42be      	cmp	r6, r7
 80087c2:	d900      	bls.n	80087c6 <__ssputs_r+0x72>
 80087c4:	463e      	mov	r6, r7
 80087c6:	6820      	ldr	r0, [r4, #0]
 80087c8:	4632      	mov	r2, r6
 80087ca:	4641      	mov	r1, r8
 80087cc:	f000 f9c6 	bl	8008b5c <memmove>
 80087d0:	68a3      	ldr	r3, [r4, #8]
 80087d2:	1b9b      	subs	r3, r3, r6
 80087d4:	60a3      	str	r3, [r4, #8]
 80087d6:	6823      	ldr	r3, [r4, #0]
 80087d8:	4433      	add	r3, r6
 80087da:	6023      	str	r3, [r4, #0]
 80087dc:	2000      	movs	r0, #0
 80087de:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80087e2:	462a      	mov	r2, r5
 80087e4:	f000 fa36 	bl	8008c54 <_realloc_r>
 80087e8:	4606      	mov	r6, r0
 80087ea:	2800      	cmp	r0, #0
 80087ec:	d1e0      	bne.n	80087b0 <__ssputs_r+0x5c>
 80087ee:	6921      	ldr	r1, [r4, #16]
 80087f0:	4650      	mov	r0, sl
 80087f2:	f7ff fb2d 	bl	8007e50 <_free_r>
 80087f6:	230c      	movs	r3, #12
 80087f8:	f8ca 3000 	str.w	r3, [sl]
 80087fc:	89a3      	ldrh	r3, [r4, #12]
 80087fe:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8008802:	81a3      	strh	r3, [r4, #12]
 8008804:	f04f 30ff 	mov.w	r0, #4294967295
 8008808:	e7e9      	b.n	80087de <__ssputs_r+0x8a>
	...

0800880c <_svfiprintf_r>:
 800880c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008810:	4698      	mov	r8, r3
 8008812:	898b      	ldrh	r3, [r1, #12]
 8008814:	061b      	lsls	r3, r3, #24
 8008816:	b09d      	sub	sp, #116	@ 0x74
 8008818:	4607      	mov	r7, r0
 800881a:	460d      	mov	r5, r1
 800881c:	4614      	mov	r4, r2
 800881e:	d510      	bpl.n	8008842 <_svfiprintf_r+0x36>
 8008820:	690b      	ldr	r3, [r1, #16]
 8008822:	b973      	cbnz	r3, 8008842 <_svfiprintf_r+0x36>
 8008824:	2140      	movs	r1, #64	@ 0x40
 8008826:	f7ff fb87 	bl	8007f38 <_malloc_r>
 800882a:	6028      	str	r0, [r5, #0]
 800882c:	6128      	str	r0, [r5, #16]
 800882e:	b930      	cbnz	r0, 800883e <_svfiprintf_r+0x32>
 8008830:	230c      	movs	r3, #12
 8008832:	603b      	str	r3, [r7, #0]
 8008834:	f04f 30ff 	mov.w	r0, #4294967295
 8008838:	b01d      	add	sp, #116	@ 0x74
 800883a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800883e:	2340      	movs	r3, #64	@ 0x40
 8008840:	616b      	str	r3, [r5, #20]
 8008842:	2300      	movs	r3, #0
 8008844:	9309      	str	r3, [sp, #36]	@ 0x24
 8008846:	2320      	movs	r3, #32
 8008848:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 800884c:	f8cd 800c 	str.w	r8, [sp, #12]
 8008850:	2330      	movs	r3, #48	@ 0x30
 8008852:	f8df 819c 	ldr.w	r8, [pc, #412]	@ 80089f0 <_svfiprintf_r+0x1e4>
 8008856:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 800885a:	f04f 0901 	mov.w	r9, #1
 800885e:	4623      	mov	r3, r4
 8008860:	469a      	mov	sl, r3
 8008862:	f813 2b01 	ldrb.w	r2, [r3], #1
 8008866:	b10a      	cbz	r2, 800886c <_svfiprintf_r+0x60>
 8008868:	2a25      	cmp	r2, #37	@ 0x25
 800886a:	d1f9      	bne.n	8008860 <_svfiprintf_r+0x54>
 800886c:	ebba 0b04 	subs.w	fp, sl, r4
 8008870:	d00b      	beq.n	800888a <_svfiprintf_r+0x7e>
 8008872:	465b      	mov	r3, fp
 8008874:	4622      	mov	r2, r4
 8008876:	4629      	mov	r1, r5
 8008878:	4638      	mov	r0, r7
 800887a:	f7ff ff6b 	bl	8008754 <__ssputs_r>
 800887e:	3001      	adds	r0, #1
 8008880:	f000 80a7 	beq.w	80089d2 <_svfiprintf_r+0x1c6>
 8008884:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8008886:	445a      	add	r2, fp
 8008888:	9209      	str	r2, [sp, #36]	@ 0x24
 800888a:	f89a 3000 	ldrb.w	r3, [sl]
 800888e:	2b00      	cmp	r3, #0
 8008890:	f000 809f 	beq.w	80089d2 <_svfiprintf_r+0x1c6>
 8008894:	2300      	movs	r3, #0
 8008896:	f04f 32ff 	mov.w	r2, #4294967295
 800889a:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800889e:	f10a 0a01 	add.w	sl, sl, #1
 80088a2:	9304      	str	r3, [sp, #16]
 80088a4:	9307      	str	r3, [sp, #28]
 80088a6:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 80088aa:	931a      	str	r3, [sp, #104]	@ 0x68
 80088ac:	4654      	mov	r4, sl
 80088ae:	2205      	movs	r2, #5
 80088b0:	f814 1b01 	ldrb.w	r1, [r4], #1
 80088b4:	484e      	ldr	r0, [pc, #312]	@ (80089f0 <_svfiprintf_r+0x1e4>)
 80088b6:	f7f7 fcab 	bl	8000210 <memchr>
 80088ba:	9a04      	ldr	r2, [sp, #16]
 80088bc:	b9d8      	cbnz	r0, 80088f6 <_svfiprintf_r+0xea>
 80088be:	06d0      	lsls	r0, r2, #27
 80088c0:	bf44      	itt	mi
 80088c2:	2320      	movmi	r3, #32
 80088c4:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 80088c8:	0711      	lsls	r1, r2, #28
 80088ca:	bf44      	itt	mi
 80088cc:	232b      	movmi	r3, #43	@ 0x2b
 80088ce:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 80088d2:	f89a 3000 	ldrb.w	r3, [sl]
 80088d6:	2b2a      	cmp	r3, #42	@ 0x2a
 80088d8:	d015      	beq.n	8008906 <_svfiprintf_r+0xfa>
 80088da:	9a07      	ldr	r2, [sp, #28]
 80088dc:	4654      	mov	r4, sl
 80088de:	2000      	movs	r0, #0
 80088e0:	f04f 0c0a 	mov.w	ip, #10
 80088e4:	4621      	mov	r1, r4
 80088e6:	f811 3b01 	ldrb.w	r3, [r1], #1
 80088ea:	3b30      	subs	r3, #48	@ 0x30
 80088ec:	2b09      	cmp	r3, #9
 80088ee:	d94b      	bls.n	8008988 <_svfiprintf_r+0x17c>
 80088f0:	b1b0      	cbz	r0, 8008920 <_svfiprintf_r+0x114>
 80088f2:	9207      	str	r2, [sp, #28]
 80088f4:	e014      	b.n	8008920 <_svfiprintf_r+0x114>
 80088f6:	eba0 0308 	sub.w	r3, r0, r8
 80088fa:	fa09 f303 	lsl.w	r3, r9, r3
 80088fe:	4313      	orrs	r3, r2
 8008900:	9304      	str	r3, [sp, #16]
 8008902:	46a2      	mov	sl, r4
 8008904:	e7d2      	b.n	80088ac <_svfiprintf_r+0xa0>
 8008906:	9b03      	ldr	r3, [sp, #12]
 8008908:	1d19      	adds	r1, r3, #4
 800890a:	681b      	ldr	r3, [r3, #0]
 800890c:	9103      	str	r1, [sp, #12]
 800890e:	2b00      	cmp	r3, #0
 8008910:	bfbb      	ittet	lt
 8008912:	425b      	neglt	r3, r3
 8008914:	f042 0202 	orrlt.w	r2, r2, #2
 8008918:	9307      	strge	r3, [sp, #28]
 800891a:	9307      	strlt	r3, [sp, #28]
 800891c:	bfb8      	it	lt
 800891e:	9204      	strlt	r2, [sp, #16]
 8008920:	7823      	ldrb	r3, [r4, #0]
 8008922:	2b2e      	cmp	r3, #46	@ 0x2e
 8008924:	d10a      	bne.n	800893c <_svfiprintf_r+0x130>
 8008926:	7863      	ldrb	r3, [r4, #1]
 8008928:	2b2a      	cmp	r3, #42	@ 0x2a
 800892a:	d132      	bne.n	8008992 <_svfiprintf_r+0x186>
 800892c:	9b03      	ldr	r3, [sp, #12]
 800892e:	1d1a      	adds	r2, r3, #4
 8008930:	681b      	ldr	r3, [r3, #0]
 8008932:	9203      	str	r2, [sp, #12]
 8008934:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8008938:	3402      	adds	r4, #2
 800893a:	9305      	str	r3, [sp, #20]
 800893c:	f8df a0c0 	ldr.w	sl, [pc, #192]	@ 8008a00 <_svfiprintf_r+0x1f4>
 8008940:	7821      	ldrb	r1, [r4, #0]
 8008942:	2203      	movs	r2, #3
 8008944:	4650      	mov	r0, sl
 8008946:	f7f7 fc63 	bl	8000210 <memchr>
 800894a:	b138      	cbz	r0, 800895c <_svfiprintf_r+0x150>
 800894c:	9b04      	ldr	r3, [sp, #16]
 800894e:	eba0 000a 	sub.w	r0, r0, sl
 8008952:	2240      	movs	r2, #64	@ 0x40
 8008954:	4082      	lsls	r2, r0
 8008956:	4313      	orrs	r3, r2
 8008958:	3401      	adds	r4, #1
 800895a:	9304      	str	r3, [sp, #16]
 800895c:	f814 1b01 	ldrb.w	r1, [r4], #1
 8008960:	4824      	ldr	r0, [pc, #144]	@ (80089f4 <_svfiprintf_r+0x1e8>)
 8008962:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8008966:	2206      	movs	r2, #6
 8008968:	f7f7 fc52 	bl	8000210 <memchr>
 800896c:	2800      	cmp	r0, #0
 800896e:	d036      	beq.n	80089de <_svfiprintf_r+0x1d2>
 8008970:	4b21      	ldr	r3, [pc, #132]	@ (80089f8 <_svfiprintf_r+0x1ec>)
 8008972:	bb1b      	cbnz	r3, 80089bc <_svfiprintf_r+0x1b0>
 8008974:	9b03      	ldr	r3, [sp, #12]
 8008976:	3307      	adds	r3, #7
 8008978:	f023 0307 	bic.w	r3, r3, #7
 800897c:	3308      	adds	r3, #8
 800897e:	9303      	str	r3, [sp, #12]
 8008980:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8008982:	4433      	add	r3, r6
 8008984:	9309      	str	r3, [sp, #36]	@ 0x24
 8008986:	e76a      	b.n	800885e <_svfiprintf_r+0x52>
 8008988:	fb0c 3202 	mla	r2, ip, r2, r3
 800898c:	460c      	mov	r4, r1
 800898e:	2001      	movs	r0, #1
 8008990:	e7a8      	b.n	80088e4 <_svfiprintf_r+0xd8>
 8008992:	2300      	movs	r3, #0
 8008994:	3401      	adds	r4, #1
 8008996:	9305      	str	r3, [sp, #20]
 8008998:	4619      	mov	r1, r3
 800899a:	f04f 0c0a 	mov.w	ip, #10
 800899e:	4620      	mov	r0, r4
 80089a0:	f810 2b01 	ldrb.w	r2, [r0], #1
 80089a4:	3a30      	subs	r2, #48	@ 0x30
 80089a6:	2a09      	cmp	r2, #9
 80089a8:	d903      	bls.n	80089b2 <_svfiprintf_r+0x1a6>
 80089aa:	2b00      	cmp	r3, #0
 80089ac:	d0c6      	beq.n	800893c <_svfiprintf_r+0x130>
 80089ae:	9105      	str	r1, [sp, #20]
 80089b0:	e7c4      	b.n	800893c <_svfiprintf_r+0x130>
 80089b2:	fb0c 2101 	mla	r1, ip, r1, r2
 80089b6:	4604      	mov	r4, r0
 80089b8:	2301      	movs	r3, #1
 80089ba:	e7f0      	b.n	800899e <_svfiprintf_r+0x192>
 80089bc:	ab03      	add	r3, sp, #12
 80089be:	9300      	str	r3, [sp, #0]
 80089c0:	462a      	mov	r2, r5
 80089c2:	4b0e      	ldr	r3, [pc, #56]	@ (80089fc <_svfiprintf_r+0x1f0>)
 80089c4:	a904      	add	r1, sp, #16
 80089c6:	4638      	mov	r0, r7
 80089c8:	f7fd fe72 	bl	80066b0 <_printf_float>
 80089cc:	1c42      	adds	r2, r0, #1
 80089ce:	4606      	mov	r6, r0
 80089d0:	d1d6      	bne.n	8008980 <_svfiprintf_r+0x174>
 80089d2:	89ab      	ldrh	r3, [r5, #12]
 80089d4:	065b      	lsls	r3, r3, #25
 80089d6:	f53f af2d 	bmi.w	8008834 <_svfiprintf_r+0x28>
 80089da:	9809      	ldr	r0, [sp, #36]	@ 0x24
 80089dc:	e72c      	b.n	8008838 <_svfiprintf_r+0x2c>
 80089de:	ab03      	add	r3, sp, #12
 80089e0:	9300      	str	r3, [sp, #0]
 80089e2:	462a      	mov	r2, r5
 80089e4:	4b05      	ldr	r3, [pc, #20]	@ (80089fc <_svfiprintf_r+0x1f0>)
 80089e6:	a904      	add	r1, sp, #16
 80089e8:	4638      	mov	r0, r7
 80089ea:	f7fe f8f9 	bl	8006be0 <_printf_i>
 80089ee:	e7ed      	b.n	80089cc <_svfiprintf_r+0x1c0>
 80089f0:	0800a660 	.word	0x0800a660
 80089f4:	0800a66a 	.word	0x0800a66a
 80089f8:	080066b1 	.word	0x080066b1
 80089fc:	08008755 	.word	0x08008755
 8008a00:	0800a666 	.word	0x0800a666

08008a04 <__sflush_r>:
 8008a04:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8008a08:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8008a0c:	0716      	lsls	r6, r2, #28
 8008a0e:	4605      	mov	r5, r0
 8008a10:	460c      	mov	r4, r1
 8008a12:	d454      	bmi.n	8008abe <__sflush_r+0xba>
 8008a14:	684b      	ldr	r3, [r1, #4]
 8008a16:	2b00      	cmp	r3, #0
 8008a18:	dc02      	bgt.n	8008a20 <__sflush_r+0x1c>
 8008a1a:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 8008a1c:	2b00      	cmp	r3, #0
 8008a1e:	dd48      	ble.n	8008ab2 <__sflush_r+0xae>
 8008a20:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8008a22:	2e00      	cmp	r6, #0
 8008a24:	d045      	beq.n	8008ab2 <__sflush_r+0xae>
 8008a26:	2300      	movs	r3, #0
 8008a28:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 8008a2c:	682f      	ldr	r7, [r5, #0]
 8008a2e:	6a21      	ldr	r1, [r4, #32]
 8008a30:	602b      	str	r3, [r5, #0]
 8008a32:	d030      	beq.n	8008a96 <__sflush_r+0x92>
 8008a34:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 8008a36:	89a3      	ldrh	r3, [r4, #12]
 8008a38:	0759      	lsls	r1, r3, #29
 8008a3a:	d505      	bpl.n	8008a48 <__sflush_r+0x44>
 8008a3c:	6863      	ldr	r3, [r4, #4]
 8008a3e:	1ad2      	subs	r2, r2, r3
 8008a40:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 8008a42:	b10b      	cbz	r3, 8008a48 <__sflush_r+0x44>
 8008a44:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 8008a46:	1ad2      	subs	r2, r2, r3
 8008a48:	2300      	movs	r3, #0
 8008a4a:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8008a4c:	6a21      	ldr	r1, [r4, #32]
 8008a4e:	4628      	mov	r0, r5
 8008a50:	47b0      	blx	r6
 8008a52:	1c43      	adds	r3, r0, #1
 8008a54:	89a3      	ldrh	r3, [r4, #12]
 8008a56:	d106      	bne.n	8008a66 <__sflush_r+0x62>
 8008a58:	6829      	ldr	r1, [r5, #0]
 8008a5a:	291d      	cmp	r1, #29
 8008a5c:	d82b      	bhi.n	8008ab6 <__sflush_r+0xb2>
 8008a5e:	4a2a      	ldr	r2, [pc, #168]	@ (8008b08 <__sflush_r+0x104>)
 8008a60:	410a      	asrs	r2, r1
 8008a62:	07d6      	lsls	r6, r2, #31
 8008a64:	d427      	bmi.n	8008ab6 <__sflush_r+0xb2>
 8008a66:	2200      	movs	r2, #0
 8008a68:	6062      	str	r2, [r4, #4]
 8008a6a:	04d9      	lsls	r1, r3, #19
 8008a6c:	6922      	ldr	r2, [r4, #16]
 8008a6e:	6022      	str	r2, [r4, #0]
 8008a70:	d504      	bpl.n	8008a7c <__sflush_r+0x78>
 8008a72:	1c42      	adds	r2, r0, #1
 8008a74:	d101      	bne.n	8008a7a <__sflush_r+0x76>
 8008a76:	682b      	ldr	r3, [r5, #0]
 8008a78:	b903      	cbnz	r3, 8008a7c <__sflush_r+0x78>
 8008a7a:	6560      	str	r0, [r4, #84]	@ 0x54
 8008a7c:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8008a7e:	602f      	str	r7, [r5, #0]
 8008a80:	b1b9      	cbz	r1, 8008ab2 <__sflush_r+0xae>
 8008a82:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8008a86:	4299      	cmp	r1, r3
 8008a88:	d002      	beq.n	8008a90 <__sflush_r+0x8c>
 8008a8a:	4628      	mov	r0, r5
 8008a8c:	f7ff f9e0 	bl	8007e50 <_free_r>
 8008a90:	2300      	movs	r3, #0
 8008a92:	6363      	str	r3, [r4, #52]	@ 0x34
 8008a94:	e00d      	b.n	8008ab2 <__sflush_r+0xae>
 8008a96:	2301      	movs	r3, #1
 8008a98:	4628      	mov	r0, r5
 8008a9a:	47b0      	blx	r6
 8008a9c:	4602      	mov	r2, r0
 8008a9e:	1c50      	adds	r0, r2, #1
 8008aa0:	d1c9      	bne.n	8008a36 <__sflush_r+0x32>
 8008aa2:	682b      	ldr	r3, [r5, #0]
 8008aa4:	2b00      	cmp	r3, #0
 8008aa6:	d0c6      	beq.n	8008a36 <__sflush_r+0x32>
 8008aa8:	2b1d      	cmp	r3, #29
 8008aaa:	d001      	beq.n	8008ab0 <__sflush_r+0xac>
 8008aac:	2b16      	cmp	r3, #22
 8008aae:	d11e      	bne.n	8008aee <__sflush_r+0xea>
 8008ab0:	602f      	str	r7, [r5, #0]
 8008ab2:	2000      	movs	r0, #0
 8008ab4:	e022      	b.n	8008afc <__sflush_r+0xf8>
 8008ab6:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8008aba:	b21b      	sxth	r3, r3
 8008abc:	e01b      	b.n	8008af6 <__sflush_r+0xf2>
 8008abe:	690f      	ldr	r7, [r1, #16]
 8008ac0:	2f00      	cmp	r7, #0
 8008ac2:	d0f6      	beq.n	8008ab2 <__sflush_r+0xae>
 8008ac4:	0793      	lsls	r3, r2, #30
 8008ac6:	680e      	ldr	r6, [r1, #0]
 8008ac8:	bf08      	it	eq
 8008aca:	694b      	ldreq	r3, [r1, #20]
 8008acc:	600f      	str	r7, [r1, #0]
 8008ace:	bf18      	it	ne
 8008ad0:	2300      	movne	r3, #0
 8008ad2:	eba6 0807 	sub.w	r8, r6, r7
 8008ad6:	608b      	str	r3, [r1, #8]
 8008ad8:	f1b8 0f00 	cmp.w	r8, #0
 8008adc:	dde9      	ble.n	8008ab2 <__sflush_r+0xae>
 8008ade:	6a21      	ldr	r1, [r4, #32]
 8008ae0:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 8008ae2:	4643      	mov	r3, r8
 8008ae4:	463a      	mov	r2, r7
 8008ae6:	4628      	mov	r0, r5
 8008ae8:	47b0      	blx	r6
 8008aea:	2800      	cmp	r0, #0
 8008aec:	dc08      	bgt.n	8008b00 <__sflush_r+0xfc>
 8008aee:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8008af2:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8008af6:	81a3      	strh	r3, [r4, #12]
 8008af8:	f04f 30ff 	mov.w	r0, #4294967295
 8008afc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8008b00:	4407      	add	r7, r0
 8008b02:	eba8 0800 	sub.w	r8, r8, r0
 8008b06:	e7e7      	b.n	8008ad8 <__sflush_r+0xd4>
 8008b08:	dfbffffe 	.word	0xdfbffffe

08008b0c <_fflush_r>:
 8008b0c:	b538      	push	{r3, r4, r5, lr}
 8008b0e:	690b      	ldr	r3, [r1, #16]
 8008b10:	4605      	mov	r5, r0
 8008b12:	460c      	mov	r4, r1
 8008b14:	b913      	cbnz	r3, 8008b1c <_fflush_r+0x10>
 8008b16:	2500      	movs	r5, #0
 8008b18:	4628      	mov	r0, r5
 8008b1a:	bd38      	pop	{r3, r4, r5, pc}
 8008b1c:	b118      	cbz	r0, 8008b26 <_fflush_r+0x1a>
 8008b1e:	6a03      	ldr	r3, [r0, #32]
 8008b20:	b90b      	cbnz	r3, 8008b26 <_fflush_r+0x1a>
 8008b22:	f7fe fa09 	bl	8006f38 <__sinit>
 8008b26:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8008b2a:	2b00      	cmp	r3, #0
 8008b2c:	d0f3      	beq.n	8008b16 <_fflush_r+0xa>
 8008b2e:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 8008b30:	07d0      	lsls	r0, r2, #31
 8008b32:	d404      	bmi.n	8008b3e <_fflush_r+0x32>
 8008b34:	0599      	lsls	r1, r3, #22
 8008b36:	d402      	bmi.n	8008b3e <_fflush_r+0x32>
 8008b38:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8008b3a:	f7fe fb3a 	bl	80071b2 <__retarget_lock_acquire_recursive>
 8008b3e:	4628      	mov	r0, r5
 8008b40:	4621      	mov	r1, r4
 8008b42:	f7ff ff5f 	bl	8008a04 <__sflush_r>
 8008b46:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8008b48:	07da      	lsls	r2, r3, #31
 8008b4a:	4605      	mov	r5, r0
 8008b4c:	d4e4      	bmi.n	8008b18 <_fflush_r+0xc>
 8008b4e:	89a3      	ldrh	r3, [r4, #12]
 8008b50:	059b      	lsls	r3, r3, #22
 8008b52:	d4e1      	bmi.n	8008b18 <_fflush_r+0xc>
 8008b54:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8008b56:	f7fe fb2d 	bl	80071b4 <__retarget_lock_release_recursive>
 8008b5a:	e7dd      	b.n	8008b18 <_fflush_r+0xc>

08008b5c <memmove>:
 8008b5c:	4288      	cmp	r0, r1
 8008b5e:	b510      	push	{r4, lr}
 8008b60:	eb01 0402 	add.w	r4, r1, r2
 8008b64:	d902      	bls.n	8008b6c <memmove+0x10>
 8008b66:	4284      	cmp	r4, r0
 8008b68:	4623      	mov	r3, r4
 8008b6a:	d807      	bhi.n	8008b7c <memmove+0x20>
 8008b6c:	1e43      	subs	r3, r0, #1
 8008b6e:	42a1      	cmp	r1, r4
 8008b70:	d008      	beq.n	8008b84 <memmove+0x28>
 8008b72:	f811 2b01 	ldrb.w	r2, [r1], #1
 8008b76:	f803 2f01 	strb.w	r2, [r3, #1]!
 8008b7a:	e7f8      	b.n	8008b6e <memmove+0x12>
 8008b7c:	4402      	add	r2, r0
 8008b7e:	4601      	mov	r1, r0
 8008b80:	428a      	cmp	r2, r1
 8008b82:	d100      	bne.n	8008b86 <memmove+0x2a>
 8008b84:	bd10      	pop	{r4, pc}
 8008b86:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8008b8a:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8008b8e:	e7f7      	b.n	8008b80 <memmove+0x24>

08008b90 <_sbrk_r>:
 8008b90:	b538      	push	{r3, r4, r5, lr}
 8008b92:	4d06      	ldr	r5, [pc, #24]	@ (8008bac <_sbrk_r+0x1c>)
 8008b94:	2300      	movs	r3, #0
 8008b96:	4604      	mov	r4, r0
 8008b98:	4608      	mov	r0, r1
 8008b9a:	602b      	str	r3, [r5, #0]
 8008b9c:	f7f9 faae 	bl	80020fc <_sbrk>
 8008ba0:	1c43      	adds	r3, r0, #1
 8008ba2:	d102      	bne.n	8008baa <_sbrk_r+0x1a>
 8008ba4:	682b      	ldr	r3, [r5, #0]
 8008ba6:	b103      	cbz	r3, 8008baa <_sbrk_r+0x1a>
 8008ba8:	6023      	str	r3, [r4, #0]
 8008baa:	bd38      	pop	{r3, r4, r5, pc}
 8008bac:	20000740 	.word	0x20000740

08008bb0 <memcpy>:
 8008bb0:	440a      	add	r2, r1
 8008bb2:	4291      	cmp	r1, r2
 8008bb4:	f100 33ff 	add.w	r3, r0, #4294967295
 8008bb8:	d100      	bne.n	8008bbc <memcpy+0xc>
 8008bba:	4770      	bx	lr
 8008bbc:	b510      	push	{r4, lr}
 8008bbe:	f811 4b01 	ldrb.w	r4, [r1], #1
 8008bc2:	f803 4f01 	strb.w	r4, [r3, #1]!
 8008bc6:	4291      	cmp	r1, r2
 8008bc8:	d1f9      	bne.n	8008bbe <memcpy+0xe>
 8008bca:	bd10      	pop	{r4, pc}

08008bcc <__assert_func>:
 8008bcc:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8008bce:	4614      	mov	r4, r2
 8008bd0:	461a      	mov	r2, r3
 8008bd2:	4b09      	ldr	r3, [pc, #36]	@ (8008bf8 <__assert_func+0x2c>)
 8008bd4:	681b      	ldr	r3, [r3, #0]
 8008bd6:	4605      	mov	r5, r0
 8008bd8:	68d8      	ldr	r0, [r3, #12]
 8008bda:	b954      	cbnz	r4, 8008bf2 <__assert_func+0x26>
 8008bdc:	4b07      	ldr	r3, [pc, #28]	@ (8008bfc <__assert_func+0x30>)
 8008bde:	461c      	mov	r4, r3
 8008be0:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8008be4:	9100      	str	r1, [sp, #0]
 8008be6:	462b      	mov	r3, r5
 8008be8:	4905      	ldr	r1, [pc, #20]	@ (8008c00 <__assert_func+0x34>)
 8008bea:	f000 f86f 	bl	8008ccc <fiprintf>
 8008bee:	f000 f87f 	bl	8008cf0 <abort>
 8008bf2:	4b04      	ldr	r3, [pc, #16]	@ (8008c04 <__assert_func+0x38>)
 8008bf4:	e7f4      	b.n	8008be0 <__assert_func+0x14>
 8008bf6:	bf00      	nop
 8008bf8:	20000018 	.word	0x20000018
 8008bfc:	0800a6b6 	.word	0x0800a6b6
 8008c00:	0800a688 	.word	0x0800a688
 8008c04:	0800a67b 	.word	0x0800a67b

08008c08 <_calloc_r>:
 8008c08:	b570      	push	{r4, r5, r6, lr}
 8008c0a:	fba1 5402 	umull	r5, r4, r1, r2
 8008c0e:	b93c      	cbnz	r4, 8008c20 <_calloc_r+0x18>
 8008c10:	4629      	mov	r1, r5
 8008c12:	f7ff f991 	bl	8007f38 <_malloc_r>
 8008c16:	4606      	mov	r6, r0
 8008c18:	b928      	cbnz	r0, 8008c26 <_calloc_r+0x1e>
 8008c1a:	2600      	movs	r6, #0
 8008c1c:	4630      	mov	r0, r6
 8008c1e:	bd70      	pop	{r4, r5, r6, pc}
 8008c20:	220c      	movs	r2, #12
 8008c22:	6002      	str	r2, [r0, #0]
 8008c24:	e7f9      	b.n	8008c1a <_calloc_r+0x12>
 8008c26:	462a      	mov	r2, r5
 8008c28:	4621      	mov	r1, r4
 8008c2a:	f7fe fa32 	bl	8007092 <memset>
 8008c2e:	e7f5      	b.n	8008c1c <_calloc_r+0x14>

08008c30 <__ascii_mbtowc>:
 8008c30:	b082      	sub	sp, #8
 8008c32:	b901      	cbnz	r1, 8008c36 <__ascii_mbtowc+0x6>
 8008c34:	a901      	add	r1, sp, #4
 8008c36:	b142      	cbz	r2, 8008c4a <__ascii_mbtowc+0x1a>
 8008c38:	b14b      	cbz	r3, 8008c4e <__ascii_mbtowc+0x1e>
 8008c3a:	7813      	ldrb	r3, [r2, #0]
 8008c3c:	600b      	str	r3, [r1, #0]
 8008c3e:	7812      	ldrb	r2, [r2, #0]
 8008c40:	1e10      	subs	r0, r2, #0
 8008c42:	bf18      	it	ne
 8008c44:	2001      	movne	r0, #1
 8008c46:	b002      	add	sp, #8
 8008c48:	4770      	bx	lr
 8008c4a:	4610      	mov	r0, r2
 8008c4c:	e7fb      	b.n	8008c46 <__ascii_mbtowc+0x16>
 8008c4e:	f06f 0001 	mvn.w	r0, #1
 8008c52:	e7f8      	b.n	8008c46 <__ascii_mbtowc+0x16>

08008c54 <_realloc_r>:
 8008c54:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8008c58:	4680      	mov	r8, r0
 8008c5a:	4615      	mov	r5, r2
 8008c5c:	460c      	mov	r4, r1
 8008c5e:	b921      	cbnz	r1, 8008c6a <_realloc_r+0x16>
 8008c60:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8008c64:	4611      	mov	r1, r2
 8008c66:	f7ff b967 	b.w	8007f38 <_malloc_r>
 8008c6a:	b92a      	cbnz	r2, 8008c78 <_realloc_r+0x24>
 8008c6c:	f7ff f8f0 	bl	8007e50 <_free_r>
 8008c70:	2400      	movs	r4, #0
 8008c72:	4620      	mov	r0, r4
 8008c74:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8008c78:	f000 f841 	bl	8008cfe <_malloc_usable_size_r>
 8008c7c:	4285      	cmp	r5, r0
 8008c7e:	4606      	mov	r6, r0
 8008c80:	d802      	bhi.n	8008c88 <_realloc_r+0x34>
 8008c82:	ebb5 0f50 	cmp.w	r5, r0, lsr #1
 8008c86:	d8f4      	bhi.n	8008c72 <_realloc_r+0x1e>
 8008c88:	4629      	mov	r1, r5
 8008c8a:	4640      	mov	r0, r8
 8008c8c:	f7ff f954 	bl	8007f38 <_malloc_r>
 8008c90:	4607      	mov	r7, r0
 8008c92:	2800      	cmp	r0, #0
 8008c94:	d0ec      	beq.n	8008c70 <_realloc_r+0x1c>
 8008c96:	42b5      	cmp	r5, r6
 8008c98:	462a      	mov	r2, r5
 8008c9a:	4621      	mov	r1, r4
 8008c9c:	bf28      	it	cs
 8008c9e:	4632      	movcs	r2, r6
 8008ca0:	f7ff ff86 	bl	8008bb0 <memcpy>
 8008ca4:	4621      	mov	r1, r4
 8008ca6:	4640      	mov	r0, r8
 8008ca8:	f7ff f8d2 	bl	8007e50 <_free_r>
 8008cac:	463c      	mov	r4, r7
 8008cae:	e7e0      	b.n	8008c72 <_realloc_r+0x1e>

08008cb0 <__ascii_wctomb>:
 8008cb0:	4603      	mov	r3, r0
 8008cb2:	4608      	mov	r0, r1
 8008cb4:	b141      	cbz	r1, 8008cc8 <__ascii_wctomb+0x18>
 8008cb6:	2aff      	cmp	r2, #255	@ 0xff
 8008cb8:	d904      	bls.n	8008cc4 <__ascii_wctomb+0x14>
 8008cba:	228a      	movs	r2, #138	@ 0x8a
 8008cbc:	601a      	str	r2, [r3, #0]
 8008cbe:	f04f 30ff 	mov.w	r0, #4294967295
 8008cc2:	4770      	bx	lr
 8008cc4:	700a      	strb	r2, [r1, #0]
 8008cc6:	2001      	movs	r0, #1
 8008cc8:	4770      	bx	lr
	...

08008ccc <fiprintf>:
 8008ccc:	b40e      	push	{r1, r2, r3}
 8008cce:	b503      	push	{r0, r1, lr}
 8008cd0:	4601      	mov	r1, r0
 8008cd2:	ab03      	add	r3, sp, #12
 8008cd4:	4805      	ldr	r0, [pc, #20]	@ (8008cec <fiprintf+0x20>)
 8008cd6:	f853 2b04 	ldr.w	r2, [r3], #4
 8008cda:	6800      	ldr	r0, [r0, #0]
 8008cdc:	9301      	str	r3, [sp, #4]
 8008cde:	f000 f83f 	bl	8008d60 <_vfiprintf_r>
 8008ce2:	b002      	add	sp, #8
 8008ce4:	f85d eb04 	ldr.w	lr, [sp], #4
 8008ce8:	b003      	add	sp, #12
 8008cea:	4770      	bx	lr
 8008cec:	20000018 	.word	0x20000018

08008cf0 <abort>:
 8008cf0:	b508      	push	{r3, lr}
 8008cf2:	2006      	movs	r0, #6
 8008cf4:	f000 fa08 	bl	8009108 <raise>
 8008cf8:	2001      	movs	r0, #1
 8008cfa:	f7f9 f987 	bl	800200c <_exit>

08008cfe <_malloc_usable_size_r>:
 8008cfe:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8008d02:	1f18      	subs	r0, r3, #4
 8008d04:	2b00      	cmp	r3, #0
 8008d06:	bfbc      	itt	lt
 8008d08:	580b      	ldrlt	r3, [r1, r0]
 8008d0a:	18c0      	addlt	r0, r0, r3
 8008d0c:	4770      	bx	lr

08008d0e <__sfputc_r>:
 8008d0e:	6893      	ldr	r3, [r2, #8]
 8008d10:	3b01      	subs	r3, #1
 8008d12:	2b00      	cmp	r3, #0
 8008d14:	b410      	push	{r4}
 8008d16:	6093      	str	r3, [r2, #8]
 8008d18:	da08      	bge.n	8008d2c <__sfputc_r+0x1e>
 8008d1a:	6994      	ldr	r4, [r2, #24]
 8008d1c:	42a3      	cmp	r3, r4
 8008d1e:	db01      	blt.n	8008d24 <__sfputc_r+0x16>
 8008d20:	290a      	cmp	r1, #10
 8008d22:	d103      	bne.n	8008d2c <__sfputc_r+0x1e>
 8008d24:	f85d 4b04 	ldr.w	r4, [sp], #4
 8008d28:	f000 b932 	b.w	8008f90 <__swbuf_r>
 8008d2c:	6813      	ldr	r3, [r2, #0]
 8008d2e:	1c58      	adds	r0, r3, #1
 8008d30:	6010      	str	r0, [r2, #0]
 8008d32:	7019      	strb	r1, [r3, #0]
 8008d34:	4608      	mov	r0, r1
 8008d36:	f85d 4b04 	ldr.w	r4, [sp], #4
 8008d3a:	4770      	bx	lr

08008d3c <__sfputs_r>:
 8008d3c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008d3e:	4606      	mov	r6, r0
 8008d40:	460f      	mov	r7, r1
 8008d42:	4614      	mov	r4, r2
 8008d44:	18d5      	adds	r5, r2, r3
 8008d46:	42ac      	cmp	r4, r5
 8008d48:	d101      	bne.n	8008d4e <__sfputs_r+0x12>
 8008d4a:	2000      	movs	r0, #0
 8008d4c:	e007      	b.n	8008d5e <__sfputs_r+0x22>
 8008d4e:	f814 1b01 	ldrb.w	r1, [r4], #1
 8008d52:	463a      	mov	r2, r7
 8008d54:	4630      	mov	r0, r6
 8008d56:	f7ff ffda 	bl	8008d0e <__sfputc_r>
 8008d5a:	1c43      	adds	r3, r0, #1
 8008d5c:	d1f3      	bne.n	8008d46 <__sfputs_r+0xa>
 8008d5e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

08008d60 <_vfiprintf_r>:
 8008d60:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008d64:	460d      	mov	r5, r1
 8008d66:	b09d      	sub	sp, #116	@ 0x74
 8008d68:	4614      	mov	r4, r2
 8008d6a:	4698      	mov	r8, r3
 8008d6c:	4606      	mov	r6, r0
 8008d6e:	b118      	cbz	r0, 8008d78 <_vfiprintf_r+0x18>
 8008d70:	6a03      	ldr	r3, [r0, #32]
 8008d72:	b90b      	cbnz	r3, 8008d78 <_vfiprintf_r+0x18>
 8008d74:	f7fe f8e0 	bl	8006f38 <__sinit>
 8008d78:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8008d7a:	07d9      	lsls	r1, r3, #31
 8008d7c:	d405      	bmi.n	8008d8a <_vfiprintf_r+0x2a>
 8008d7e:	89ab      	ldrh	r3, [r5, #12]
 8008d80:	059a      	lsls	r2, r3, #22
 8008d82:	d402      	bmi.n	8008d8a <_vfiprintf_r+0x2a>
 8008d84:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8008d86:	f7fe fa14 	bl	80071b2 <__retarget_lock_acquire_recursive>
 8008d8a:	89ab      	ldrh	r3, [r5, #12]
 8008d8c:	071b      	lsls	r3, r3, #28
 8008d8e:	d501      	bpl.n	8008d94 <_vfiprintf_r+0x34>
 8008d90:	692b      	ldr	r3, [r5, #16]
 8008d92:	b99b      	cbnz	r3, 8008dbc <_vfiprintf_r+0x5c>
 8008d94:	4629      	mov	r1, r5
 8008d96:	4630      	mov	r0, r6
 8008d98:	f000 f938 	bl	800900c <__swsetup_r>
 8008d9c:	b170      	cbz	r0, 8008dbc <_vfiprintf_r+0x5c>
 8008d9e:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8008da0:	07dc      	lsls	r4, r3, #31
 8008da2:	d504      	bpl.n	8008dae <_vfiprintf_r+0x4e>
 8008da4:	f04f 30ff 	mov.w	r0, #4294967295
 8008da8:	b01d      	add	sp, #116	@ 0x74
 8008daa:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008dae:	89ab      	ldrh	r3, [r5, #12]
 8008db0:	0598      	lsls	r0, r3, #22
 8008db2:	d4f7      	bmi.n	8008da4 <_vfiprintf_r+0x44>
 8008db4:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8008db6:	f7fe f9fd 	bl	80071b4 <__retarget_lock_release_recursive>
 8008dba:	e7f3      	b.n	8008da4 <_vfiprintf_r+0x44>
 8008dbc:	2300      	movs	r3, #0
 8008dbe:	9309      	str	r3, [sp, #36]	@ 0x24
 8008dc0:	2320      	movs	r3, #32
 8008dc2:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8008dc6:	f8cd 800c 	str.w	r8, [sp, #12]
 8008dca:	2330      	movs	r3, #48	@ 0x30
 8008dcc:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 8008f7c <_vfiprintf_r+0x21c>
 8008dd0:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8008dd4:	f04f 0901 	mov.w	r9, #1
 8008dd8:	4623      	mov	r3, r4
 8008dda:	469a      	mov	sl, r3
 8008ddc:	f813 2b01 	ldrb.w	r2, [r3], #1
 8008de0:	b10a      	cbz	r2, 8008de6 <_vfiprintf_r+0x86>
 8008de2:	2a25      	cmp	r2, #37	@ 0x25
 8008de4:	d1f9      	bne.n	8008dda <_vfiprintf_r+0x7a>
 8008de6:	ebba 0b04 	subs.w	fp, sl, r4
 8008dea:	d00b      	beq.n	8008e04 <_vfiprintf_r+0xa4>
 8008dec:	465b      	mov	r3, fp
 8008dee:	4622      	mov	r2, r4
 8008df0:	4629      	mov	r1, r5
 8008df2:	4630      	mov	r0, r6
 8008df4:	f7ff ffa2 	bl	8008d3c <__sfputs_r>
 8008df8:	3001      	adds	r0, #1
 8008dfa:	f000 80a7 	beq.w	8008f4c <_vfiprintf_r+0x1ec>
 8008dfe:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8008e00:	445a      	add	r2, fp
 8008e02:	9209      	str	r2, [sp, #36]	@ 0x24
 8008e04:	f89a 3000 	ldrb.w	r3, [sl]
 8008e08:	2b00      	cmp	r3, #0
 8008e0a:	f000 809f 	beq.w	8008f4c <_vfiprintf_r+0x1ec>
 8008e0e:	2300      	movs	r3, #0
 8008e10:	f04f 32ff 	mov.w	r2, #4294967295
 8008e14:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8008e18:	f10a 0a01 	add.w	sl, sl, #1
 8008e1c:	9304      	str	r3, [sp, #16]
 8008e1e:	9307      	str	r3, [sp, #28]
 8008e20:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8008e24:	931a      	str	r3, [sp, #104]	@ 0x68
 8008e26:	4654      	mov	r4, sl
 8008e28:	2205      	movs	r2, #5
 8008e2a:	f814 1b01 	ldrb.w	r1, [r4], #1
 8008e2e:	4853      	ldr	r0, [pc, #332]	@ (8008f7c <_vfiprintf_r+0x21c>)
 8008e30:	f7f7 f9ee 	bl	8000210 <memchr>
 8008e34:	9a04      	ldr	r2, [sp, #16]
 8008e36:	b9d8      	cbnz	r0, 8008e70 <_vfiprintf_r+0x110>
 8008e38:	06d1      	lsls	r1, r2, #27
 8008e3a:	bf44      	itt	mi
 8008e3c:	2320      	movmi	r3, #32
 8008e3e:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8008e42:	0713      	lsls	r3, r2, #28
 8008e44:	bf44      	itt	mi
 8008e46:	232b      	movmi	r3, #43	@ 0x2b
 8008e48:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8008e4c:	f89a 3000 	ldrb.w	r3, [sl]
 8008e50:	2b2a      	cmp	r3, #42	@ 0x2a
 8008e52:	d015      	beq.n	8008e80 <_vfiprintf_r+0x120>
 8008e54:	9a07      	ldr	r2, [sp, #28]
 8008e56:	4654      	mov	r4, sl
 8008e58:	2000      	movs	r0, #0
 8008e5a:	f04f 0c0a 	mov.w	ip, #10
 8008e5e:	4621      	mov	r1, r4
 8008e60:	f811 3b01 	ldrb.w	r3, [r1], #1
 8008e64:	3b30      	subs	r3, #48	@ 0x30
 8008e66:	2b09      	cmp	r3, #9
 8008e68:	d94b      	bls.n	8008f02 <_vfiprintf_r+0x1a2>
 8008e6a:	b1b0      	cbz	r0, 8008e9a <_vfiprintf_r+0x13a>
 8008e6c:	9207      	str	r2, [sp, #28]
 8008e6e:	e014      	b.n	8008e9a <_vfiprintf_r+0x13a>
 8008e70:	eba0 0308 	sub.w	r3, r0, r8
 8008e74:	fa09 f303 	lsl.w	r3, r9, r3
 8008e78:	4313      	orrs	r3, r2
 8008e7a:	9304      	str	r3, [sp, #16]
 8008e7c:	46a2      	mov	sl, r4
 8008e7e:	e7d2      	b.n	8008e26 <_vfiprintf_r+0xc6>
 8008e80:	9b03      	ldr	r3, [sp, #12]
 8008e82:	1d19      	adds	r1, r3, #4
 8008e84:	681b      	ldr	r3, [r3, #0]
 8008e86:	9103      	str	r1, [sp, #12]
 8008e88:	2b00      	cmp	r3, #0
 8008e8a:	bfbb      	ittet	lt
 8008e8c:	425b      	neglt	r3, r3
 8008e8e:	f042 0202 	orrlt.w	r2, r2, #2
 8008e92:	9307      	strge	r3, [sp, #28]
 8008e94:	9307      	strlt	r3, [sp, #28]
 8008e96:	bfb8      	it	lt
 8008e98:	9204      	strlt	r2, [sp, #16]
 8008e9a:	7823      	ldrb	r3, [r4, #0]
 8008e9c:	2b2e      	cmp	r3, #46	@ 0x2e
 8008e9e:	d10a      	bne.n	8008eb6 <_vfiprintf_r+0x156>
 8008ea0:	7863      	ldrb	r3, [r4, #1]
 8008ea2:	2b2a      	cmp	r3, #42	@ 0x2a
 8008ea4:	d132      	bne.n	8008f0c <_vfiprintf_r+0x1ac>
 8008ea6:	9b03      	ldr	r3, [sp, #12]
 8008ea8:	1d1a      	adds	r2, r3, #4
 8008eaa:	681b      	ldr	r3, [r3, #0]
 8008eac:	9203      	str	r2, [sp, #12]
 8008eae:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8008eb2:	3402      	adds	r4, #2
 8008eb4:	9305      	str	r3, [sp, #20]
 8008eb6:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 8008f8c <_vfiprintf_r+0x22c>
 8008eba:	7821      	ldrb	r1, [r4, #0]
 8008ebc:	2203      	movs	r2, #3
 8008ebe:	4650      	mov	r0, sl
 8008ec0:	f7f7 f9a6 	bl	8000210 <memchr>
 8008ec4:	b138      	cbz	r0, 8008ed6 <_vfiprintf_r+0x176>
 8008ec6:	9b04      	ldr	r3, [sp, #16]
 8008ec8:	eba0 000a 	sub.w	r0, r0, sl
 8008ecc:	2240      	movs	r2, #64	@ 0x40
 8008ece:	4082      	lsls	r2, r0
 8008ed0:	4313      	orrs	r3, r2
 8008ed2:	3401      	adds	r4, #1
 8008ed4:	9304      	str	r3, [sp, #16]
 8008ed6:	f814 1b01 	ldrb.w	r1, [r4], #1
 8008eda:	4829      	ldr	r0, [pc, #164]	@ (8008f80 <_vfiprintf_r+0x220>)
 8008edc:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8008ee0:	2206      	movs	r2, #6
 8008ee2:	f7f7 f995 	bl	8000210 <memchr>
 8008ee6:	2800      	cmp	r0, #0
 8008ee8:	d03f      	beq.n	8008f6a <_vfiprintf_r+0x20a>
 8008eea:	4b26      	ldr	r3, [pc, #152]	@ (8008f84 <_vfiprintf_r+0x224>)
 8008eec:	bb1b      	cbnz	r3, 8008f36 <_vfiprintf_r+0x1d6>
 8008eee:	9b03      	ldr	r3, [sp, #12]
 8008ef0:	3307      	adds	r3, #7
 8008ef2:	f023 0307 	bic.w	r3, r3, #7
 8008ef6:	3308      	adds	r3, #8
 8008ef8:	9303      	str	r3, [sp, #12]
 8008efa:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8008efc:	443b      	add	r3, r7
 8008efe:	9309      	str	r3, [sp, #36]	@ 0x24
 8008f00:	e76a      	b.n	8008dd8 <_vfiprintf_r+0x78>
 8008f02:	fb0c 3202 	mla	r2, ip, r2, r3
 8008f06:	460c      	mov	r4, r1
 8008f08:	2001      	movs	r0, #1
 8008f0a:	e7a8      	b.n	8008e5e <_vfiprintf_r+0xfe>
 8008f0c:	2300      	movs	r3, #0
 8008f0e:	3401      	adds	r4, #1
 8008f10:	9305      	str	r3, [sp, #20]
 8008f12:	4619      	mov	r1, r3
 8008f14:	f04f 0c0a 	mov.w	ip, #10
 8008f18:	4620      	mov	r0, r4
 8008f1a:	f810 2b01 	ldrb.w	r2, [r0], #1
 8008f1e:	3a30      	subs	r2, #48	@ 0x30
 8008f20:	2a09      	cmp	r2, #9
 8008f22:	d903      	bls.n	8008f2c <_vfiprintf_r+0x1cc>
 8008f24:	2b00      	cmp	r3, #0
 8008f26:	d0c6      	beq.n	8008eb6 <_vfiprintf_r+0x156>
 8008f28:	9105      	str	r1, [sp, #20]
 8008f2a:	e7c4      	b.n	8008eb6 <_vfiprintf_r+0x156>
 8008f2c:	fb0c 2101 	mla	r1, ip, r1, r2
 8008f30:	4604      	mov	r4, r0
 8008f32:	2301      	movs	r3, #1
 8008f34:	e7f0      	b.n	8008f18 <_vfiprintf_r+0x1b8>
 8008f36:	ab03      	add	r3, sp, #12
 8008f38:	9300      	str	r3, [sp, #0]
 8008f3a:	462a      	mov	r2, r5
 8008f3c:	4b12      	ldr	r3, [pc, #72]	@ (8008f88 <_vfiprintf_r+0x228>)
 8008f3e:	a904      	add	r1, sp, #16
 8008f40:	4630      	mov	r0, r6
 8008f42:	f7fd fbb5 	bl	80066b0 <_printf_float>
 8008f46:	4607      	mov	r7, r0
 8008f48:	1c78      	adds	r0, r7, #1
 8008f4a:	d1d6      	bne.n	8008efa <_vfiprintf_r+0x19a>
 8008f4c:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8008f4e:	07d9      	lsls	r1, r3, #31
 8008f50:	d405      	bmi.n	8008f5e <_vfiprintf_r+0x1fe>
 8008f52:	89ab      	ldrh	r3, [r5, #12]
 8008f54:	059a      	lsls	r2, r3, #22
 8008f56:	d402      	bmi.n	8008f5e <_vfiprintf_r+0x1fe>
 8008f58:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8008f5a:	f7fe f92b 	bl	80071b4 <__retarget_lock_release_recursive>
 8008f5e:	89ab      	ldrh	r3, [r5, #12]
 8008f60:	065b      	lsls	r3, r3, #25
 8008f62:	f53f af1f 	bmi.w	8008da4 <_vfiprintf_r+0x44>
 8008f66:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8008f68:	e71e      	b.n	8008da8 <_vfiprintf_r+0x48>
 8008f6a:	ab03      	add	r3, sp, #12
 8008f6c:	9300      	str	r3, [sp, #0]
 8008f6e:	462a      	mov	r2, r5
 8008f70:	4b05      	ldr	r3, [pc, #20]	@ (8008f88 <_vfiprintf_r+0x228>)
 8008f72:	a904      	add	r1, sp, #16
 8008f74:	4630      	mov	r0, r6
 8008f76:	f7fd fe33 	bl	8006be0 <_printf_i>
 8008f7a:	e7e4      	b.n	8008f46 <_vfiprintf_r+0x1e6>
 8008f7c:	0800a660 	.word	0x0800a660
 8008f80:	0800a66a 	.word	0x0800a66a
 8008f84:	080066b1 	.word	0x080066b1
 8008f88:	08008d3d 	.word	0x08008d3d
 8008f8c:	0800a666 	.word	0x0800a666

08008f90 <__swbuf_r>:
 8008f90:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008f92:	460e      	mov	r6, r1
 8008f94:	4614      	mov	r4, r2
 8008f96:	4605      	mov	r5, r0
 8008f98:	b118      	cbz	r0, 8008fa2 <__swbuf_r+0x12>
 8008f9a:	6a03      	ldr	r3, [r0, #32]
 8008f9c:	b90b      	cbnz	r3, 8008fa2 <__swbuf_r+0x12>
 8008f9e:	f7fd ffcb 	bl	8006f38 <__sinit>
 8008fa2:	69a3      	ldr	r3, [r4, #24]
 8008fa4:	60a3      	str	r3, [r4, #8]
 8008fa6:	89a3      	ldrh	r3, [r4, #12]
 8008fa8:	071a      	lsls	r2, r3, #28
 8008faa:	d501      	bpl.n	8008fb0 <__swbuf_r+0x20>
 8008fac:	6923      	ldr	r3, [r4, #16]
 8008fae:	b943      	cbnz	r3, 8008fc2 <__swbuf_r+0x32>
 8008fb0:	4621      	mov	r1, r4
 8008fb2:	4628      	mov	r0, r5
 8008fb4:	f000 f82a 	bl	800900c <__swsetup_r>
 8008fb8:	b118      	cbz	r0, 8008fc2 <__swbuf_r+0x32>
 8008fba:	f04f 37ff 	mov.w	r7, #4294967295
 8008fbe:	4638      	mov	r0, r7
 8008fc0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8008fc2:	6823      	ldr	r3, [r4, #0]
 8008fc4:	6922      	ldr	r2, [r4, #16]
 8008fc6:	1a98      	subs	r0, r3, r2
 8008fc8:	6963      	ldr	r3, [r4, #20]
 8008fca:	b2f6      	uxtb	r6, r6
 8008fcc:	4283      	cmp	r3, r0
 8008fce:	4637      	mov	r7, r6
 8008fd0:	dc05      	bgt.n	8008fde <__swbuf_r+0x4e>
 8008fd2:	4621      	mov	r1, r4
 8008fd4:	4628      	mov	r0, r5
 8008fd6:	f7ff fd99 	bl	8008b0c <_fflush_r>
 8008fda:	2800      	cmp	r0, #0
 8008fdc:	d1ed      	bne.n	8008fba <__swbuf_r+0x2a>
 8008fde:	68a3      	ldr	r3, [r4, #8]
 8008fe0:	3b01      	subs	r3, #1
 8008fe2:	60a3      	str	r3, [r4, #8]
 8008fe4:	6823      	ldr	r3, [r4, #0]
 8008fe6:	1c5a      	adds	r2, r3, #1
 8008fe8:	6022      	str	r2, [r4, #0]
 8008fea:	701e      	strb	r6, [r3, #0]
 8008fec:	6962      	ldr	r2, [r4, #20]
 8008fee:	1c43      	adds	r3, r0, #1
 8008ff0:	429a      	cmp	r2, r3
 8008ff2:	d004      	beq.n	8008ffe <__swbuf_r+0x6e>
 8008ff4:	89a3      	ldrh	r3, [r4, #12]
 8008ff6:	07db      	lsls	r3, r3, #31
 8008ff8:	d5e1      	bpl.n	8008fbe <__swbuf_r+0x2e>
 8008ffa:	2e0a      	cmp	r6, #10
 8008ffc:	d1df      	bne.n	8008fbe <__swbuf_r+0x2e>
 8008ffe:	4621      	mov	r1, r4
 8009000:	4628      	mov	r0, r5
 8009002:	f7ff fd83 	bl	8008b0c <_fflush_r>
 8009006:	2800      	cmp	r0, #0
 8009008:	d0d9      	beq.n	8008fbe <__swbuf_r+0x2e>
 800900a:	e7d6      	b.n	8008fba <__swbuf_r+0x2a>

0800900c <__swsetup_r>:
 800900c:	b538      	push	{r3, r4, r5, lr}
 800900e:	4b29      	ldr	r3, [pc, #164]	@ (80090b4 <__swsetup_r+0xa8>)
 8009010:	4605      	mov	r5, r0
 8009012:	6818      	ldr	r0, [r3, #0]
 8009014:	460c      	mov	r4, r1
 8009016:	b118      	cbz	r0, 8009020 <__swsetup_r+0x14>
 8009018:	6a03      	ldr	r3, [r0, #32]
 800901a:	b90b      	cbnz	r3, 8009020 <__swsetup_r+0x14>
 800901c:	f7fd ff8c 	bl	8006f38 <__sinit>
 8009020:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8009024:	0719      	lsls	r1, r3, #28
 8009026:	d422      	bmi.n	800906e <__swsetup_r+0x62>
 8009028:	06da      	lsls	r2, r3, #27
 800902a:	d407      	bmi.n	800903c <__swsetup_r+0x30>
 800902c:	2209      	movs	r2, #9
 800902e:	602a      	str	r2, [r5, #0]
 8009030:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8009034:	81a3      	strh	r3, [r4, #12]
 8009036:	f04f 30ff 	mov.w	r0, #4294967295
 800903a:	e033      	b.n	80090a4 <__swsetup_r+0x98>
 800903c:	0758      	lsls	r0, r3, #29
 800903e:	d512      	bpl.n	8009066 <__swsetup_r+0x5a>
 8009040:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8009042:	b141      	cbz	r1, 8009056 <__swsetup_r+0x4a>
 8009044:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8009048:	4299      	cmp	r1, r3
 800904a:	d002      	beq.n	8009052 <__swsetup_r+0x46>
 800904c:	4628      	mov	r0, r5
 800904e:	f7fe feff 	bl	8007e50 <_free_r>
 8009052:	2300      	movs	r3, #0
 8009054:	6363      	str	r3, [r4, #52]	@ 0x34
 8009056:	89a3      	ldrh	r3, [r4, #12]
 8009058:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 800905c:	81a3      	strh	r3, [r4, #12]
 800905e:	2300      	movs	r3, #0
 8009060:	6063      	str	r3, [r4, #4]
 8009062:	6923      	ldr	r3, [r4, #16]
 8009064:	6023      	str	r3, [r4, #0]
 8009066:	89a3      	ldrh	r3, [r4, #12]
 8009068:	f043 0308 	orr.w	r3, r3, #8
 800906c:	81a3      	strh	r3, [r4, #12]
 800906e:	6923      	ldr	r3, [r4, #16]
 8009070:	b94b      	cbnz	r3, 8009086 <__swsetup_r+0x7a>
 8009072:	89a3      	ldrh	r3, [r4, #12]
 8009074:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 8009078:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800907c:	d003      	beq.n	8009086 <__swsetup_r+0x7a>
 800907e:	4621      	mov	r1, r4
 8009080:	4628      	mov	r0, r5
 8009082:	f000 f883 	bl	800918c <__smakebuf_r>
 8009086:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800908a:	f013 0201 	ands.w	r2, r3, #1
 800908e:	d00a      	beq.n	80090a6 <__swsetup_r+0x9a>
 8009090:	2200      	movs	r2, #0
 8009092:	60a2      	str	r2, [r4, #8]
 8009094:	6962      	ldr	r2, [r4, #20]
 8009096:	4252      	negs	r2, r2
 8009098:	61a2      	str	r2, [r4, #24]
 800909a:	6922      	ldr	r2, [r4, #16]
 800909c:	b942      	cbnz	r2, 80090b0 <__swsetup_r+0xa4>
 800909e:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 80090a2:	d1c5      	bne.n	8009030 <__swsetup_r+0x24>
 80090a4:	bd38      	pop	{r3, r4, r5, pc}
 80090a6:	0799      	lsls	r1, r3, #30
 80090a8:	bf58      	it	pl
 80090aa:	6962      	ldrpl	r2, [r4, #20]
 80090ac:	60a2      	str	r2, [r4, #8]
 80090ae:	e7f4      	b.n	800909a <__swsetup_r+0x8e>
 80090b0:	2000      	movs	r0, #0
 80090b2:	e7f7      	b.n	80090a4 <__swsetup_r+0x98>
 80090b4:	20000018 	.word	0x20000018

080090b8 <_raise_r>:
 80090b8:	291f      	cmp	r1, #31
 80090ba:	b538      	push	{r3, r4, r5, lr}
 80090bc:	4605      	mov	r5, r0
 80090be:	460c      	mov	r4, r1
 80090c0:	d904      	bls.n	80090cc <_raise_r+0x14>
 80090c2:	2316      	movs	r3, #22
 80090c4:	6003      	str	r3, [r0, #0]
 80090c6:	f04f 30ff 	mov.w	r0, #4294967295
 80090ca:	bd38      	pop	{r3, r4, r5, pc}
 80090cc:	6bc2      	ldr	r2, [r0, #60]	@ 0x3c
 80090ce:	b112      	cbz	r2, 80090d6 <_raise_r+0x1e>
 80090d0:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 80090d4:	b94b      	cbnz	r3, 80090ea <_raise_r+0x32>
 80090d6:	4628      	mov	r0, r5
 80090d8:	f000 f830 	bl	800913c <_getpid_r>
 80090dc:	4622      	mov	r2, r4
 80090de:	4601      	mov	r1, r0
 80090e0:	4628      	mov	r0, r5
 80090e2:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80090e6:	f000 b817 	b.w	8009118 <_kill_r>
 80090ea:	2b01      	cmp	r3, #1
 80090ec:	d00a      	beq.n	8009104 <_raise_r+0x4c>
 80090ee:	1c59      	adds	r1, r3, #1
 80090f0:	d103      	bne.n	80090fa <_raise_r+0x42>
 80090f2:	2316      	movs	r3, #22
 80090f4:	6003      	str	r3, [r0, #0]
 80090f6:	2001      	movs	r0, #1
 80090f8:	e7e7      	b.n	80090ca <_raise_r+0x12>
 80090fa:	2100      	movs	r1, #0
 80090fc:	f842 1024 	str.w	r1, [r2, r4, lsl #2]
 8009100:	4620      	mov	r0, r4
 8009102:	4798      	blx	r3
 8009104:	2000      	movs	r0, #0
 8009106:	e7e0      	b.n	80090ca <_raise_r+0x12>

08009108 <raise>:
 8009108:	4b02      	ldr	r3, [pc, #8]	@ (8009114 <raise+0xc>)
 800910a:	4601      	mov	r1, r0
 800910c:	6818      	ldr	r0, [r3, #0]
 800910e:	f7ff bfd3 	b.w	80090b8 <_raise_r>
 8009112:	bf00      	nop
 8009114:	20000018 	.word	0x20000018

08009118 <_kill_r>:
 8009118:	b538      	push	{r3, r4, r5, lr}
 800911a:	4d07      	ldr	r5, [pc, #28]	@ (8009138 <_kill_r+0x20>)
 800911c:	2300      	movs	r3, #0
 800911e:	4604      	mov	r4, r0
 8009120:	4608      	mov	r0, r1
 8009122:	4611      	mov	r1, r2
 8009124:	602b      	str	r3, [r5, #0]
 8009126:	f7f8 ff61 	bl	8001fec <_kill>
 800912a:	1c43      	adds	r3, r0, #1
 800912c:	d102      	bne.n	8009134 <_kill_r+0x1c>
 800912e:	682b      	ldr	r3, [r5, #0]
 8009130:	b103      	cbz	r3, 8009134 <_kill_r+0x1c>
 8009132:	6023      	str	r3, [r4, #0]
 8009134:	bd38      	pop	{r3, r4, r5, pc}
 8009136:	bf00      	nop
 8009138:	20000740 	.word	0x20000740

0800913c <_getpid_r>:
 800913c:	f7f8 bf4e 	b.w	8001fdc <_getpid>

08009140 <__swhatbuf_r>:
 8009140:	b570      	push	{r4, r5, r6, lr}
 8009142:	460c      	mov	r4, r1
 8009144:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8009148:	2900      	cmp	r1, #0
 800914a:	b096      	sub	sp, #88	@ 0x58
 800914c:	4615      	mov	r5, r2
 800914e:	461e      	mov	r6, r3
 8009150:	da0d      	bge.n	800916e <__swhatbuf_r+0x2e>
 8009152:	89a3      	ldrh	r3, [r4, #12]
 8009154:	f013 0f80 	tst.w	r3, #128	@ 0x80
 8009158:	f04f 0100 	mov.w	r1, #0
 800915c:	bf14      	ite	ne
 800915e:	2340      	movne	r3, #64	@ 0x40
 8009160:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 8009164:	2000      	movs	r0, #0
 8009166:	6031      	str	r1, [r6, #0]
 8009168:	602b      	str	r3, [r5, #0]
 800916a:	b016      	add	sp, #88	@ 0x58
 800916c:	bd70      	pop	{r4, r5, r6, pc}
 800916e:	466a      	mov	r2, sp
 8009170:	f000 f848 	bl	8009204 <_fstat_r>
 8009174:	2800      	cmp	r0, #0
 8009176:	dbec      	blt.n	8009152 <__swhatbuf_r+0x12>
 8009178:	9901      	ldr	r1, [sp, #4]
 800917a:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 800917e:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 8009182:	4259      	negs	r1, r3
 8009184:	4159      	adcs	r1, r3
 8009186:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800918a:	e7eb      	b.n	8009164 <__swhatbuf_r+0x24>

0800918c <__smakebuf_r>:
 800918c:	898b      	ldrh	r3, [r1, #12]
 800918e:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8009190:	079d      	lsls	r5, r3, #30
 8009192:	4606      	mov	r6, r0
 8009194:	460c      	mov	r4, r1
 8009196:	d507      	bpl.n	80091a8 <__smakebuf_r+0x1c>
 8009198:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 800919c:	6023      	str	r3, [r4, #0]
 800919e:	6123      	str	r3, [r4, #16]
 80091a0:	2301      	movs	r3, #1
 80091a2:	6163      	str	r3, [r4, #20]
 80091a4:	b003      	add	sp, #12
 80091a6:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80091a8:	ab01      	add	r3, sp, #4
 80091aa:	466a      	mov	r2, sp
 80091ac:	f7ff ffc8 	bl	8009140 <__swhatbuf_r>
 80091b0:	9f00      	ldr	r7, [sp, #0]
 80091b2:	4605      	mov	r5, r0
 80091b4:	4639      	mov	r1, r7
 80091b6:	4630      	mov	r0, r6
 80091b8:	f7fe febe 	bl	8007f38 <_malloc_r>
 80091bc:	b948      	cbnz	r0, 80091d2 <__smakebuf_r+0x46>
 80091be:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80091c2:	059a      	lsls	r2, r3, #22
 80091c4:	d4ee      	bmi.n	80091a4 <__smakebuf_r+0x18>
 80091c6:	f023 0303 	bic.w	r3, r3, #3
 80091ca:	f043 0302 	orr.w	r3, r3, #2
 80091ce:	81a3      	strh	r3, [r4, #12]
 80091d0:	e7e2      	b.n	8009198 <__smakebuf_r+0xc>
 80091d2:	89a3      	ldrh	r3, [r4, #12]
 80091d4:	6020      	str	r0, [r4, #0]
 80091d6:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80091da:	81a3      	strh	r3, [r4, #12]
 80091dc:	9b01      	ldr	r3, [sp, #4]
 80091de:	e9c4 0704 	strd	r0, r7, [r4, #16]
 80091e2:	b15b      	cbz	r3, 80091fc <__smakebuf_r+0x70>
 80091e4:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80091e8:	4630      	mov	r0, r6
 80091ea:	f000 f81d 	bl	8009228 <_isatty_r>
 80091ee:	b128      	cbz	r0, 80091fc <__smakebuf_r+0x70>
 80091f0:	89a3      	ldrh	r3, [r4, #12]
 80091f2:	f023 0303 	bic.w	r3, r3, #3
 80091f6:	f043 0301 	orr.w	r3, r3, #1
 80091fa:	81a3      	strh	r3, [r4, #12]
 80091fc:	89a3      	ldrh	r3, [r4, #12]
 80091fe:	431d      	orrs	r5, r3
 8009200:	81a5      	strh	r5, [r4, #12]
 8009202:	e7cf      	b.n	80091a4 <__smakebuf_r+0x18>

08009204 <_fstat_r>:
 8009204:	b538      	push	{r3, r4, r5, lr}
 8009206:	4d07      	ldr	r5, [pc, #28]	@ (8009224 <_fstat_r+0x20>)
 8009208:	2300      	movs	r3, #0
 800920a:	4604      	mov	r4, r0
 800920c:	4608      	mov	r0, r1
 800920e:	4611      	mov	r1, r2
 8009210:	602b      	str	r3, [r5, #0]
 8009212:	f7f8 ff4b 	bl	80020ac <_fstat>
 8009216:	1c43      	adds	r3, r0, #1
 8009218:	d102      	bne.n	8009220 <_fstat_r+0x1c>
 800921a:	682b      	ldr	r3, [r5, #0]
 800921c:	b103      	cbz	r3, 8009220 <_fstat_r+0x1c>
 800921e:	6023      	str	r3, [r4, #0]
 8009220:	bd38      	pop	{r3, r4, r5, pc}
 8009222:	bf00      	nop
 8009224:	20000740 	.word	0x20000740

08009228 <_isatty_r>:
 8009228:	b538      	push	{r3, r4, r5, lr}
 800922a:	4d06      	ldr	r5, [pc, #24]	@ (8009244 <_isatty_r+0x1c>)
 800922c:	2300      	movs	r3, #0
 800922e:	4604      	mov	r4, r0
 8009230:	4608      	mov	r0, r1
 8009232:	602b      	str	r3, [r5, #0]
 8009234:	f7f8 ff4a 	bl	80020cc <_isatty>
 8009238:	1c43      	adds	r3, r0, #1
 800923a:	d102      	bne.n	8009242 <_isatty_r+0x1a>
 800923c:	682b      	ldr	r3, [r5, #0]
 800923e:	b103      	cbz	r3, 8009242 <_isatty_r+0x1a>
 8009240:	6023      	str	r3, [r4, #0]
 8009242:	bd38      	pop	{r3, r4, r5, pc}
 8009244:	20000740 	.word	0x20000740

08009248 <cos>:
 8009248:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800924a:	ec53 2b10 	vmov	r2, r3, d0
 800924e:	4826      	ldr	r0, [pc, #152]	@ (80092e8 <cos+0xa0>)
 8009250:	f023 4100 	bic.w	r1, r3, #2147483648	@ 0x80000000
 8009254:	4281      	cmp	r1, r0
 8009256:	d806      	bhi.n	8009266 <cos+0x1e>
 8009258:	ed9f 1b21 	vldr	d1, [pc, #132]	@ 80092e0 <cos+0x98>
 800925c:	b005      	add	sp, #20
 800925e:	f85d eb04 	ldr.w	lr, [sp], #4
 8009262:	f000 b899 	b.w	8009398 <__kernel_cos>
 8009266:	4821      	ldr	r0, [pc, #132]	@ (80092ec <cos+0xa4>)
 8009268:	4281      	cmp	r1, r0
 800926a:	d908      	bls.n	800927e <cos+0x36>
 800926c:	4610      	mov	r0, r2
 800926e:	4619      	mov	r1, r3
 8009270:	f7f7 f82a 	bl	80002c8 <__aeabi_dsub>
 8009274:	ec41 0b10 	vmov	d0, r0, r1
 8009278:	b005      	add	sp, #20
 800927a:	f85d fb04 	ldr.w	pc, [sp], #4
 800927e:	4668      	mov	r0, sp
 8009280:	f000 fa0e 	bl	80096a0 <__ieee754_rem_pio2>
 8009284:	f000 0003 	and.w	r0, r0, #3
 8009288:	2801      	cmp	r0, #1
 800928a:	d00b      	beq.n	80092a4 <cos+0x5c>
 800928c:	2802      	cmp	r0, #2
 800928e:	d015      	beq.n	80092bc <cos+0x74>
 8009290:	b9d8      	cbnz	r0, 80092ca <cos+0x82>
 8009292:	ed9d 1b02 	vldr	d1, [sp, #8]
 8009296:	ed9d 0b00 	vldr	d0, [sp]
 800929a:	f000 f87d 	bl	8009398 <__kernel_cos>
 800929e:	ec51 0b10 	vmov	r0, r1, d0
 80092a2:	e7e7      	b.n	8009274 <cos+0x2c>
 80092a4:	ed9d 1b02 	vldr	d1, [sp, #8]
 80092a8:	ed9d 0b00 	vldr	d0, [sp]
 80092ac:	f000 f93c 	bl	8009528 <__kernel_sin>
 80092b0:	ec53 2b10 	vmov	r2, r3, d0
 80092b4:	4610      	mov	r0, r2
 80092b6:	f103 4100 	add.w	r1, r3, #2147483648	@ 0x80000000
 80092ba:	e7db      	b.n	8009274 <cos+0x2c>
 80092bc:	ed9d 1b02 	vldr	d1, [sp, #8]
 80092c0:	ed9d 0b00 	vldr	d0, [sp]
 80092c4:	f000 f868 	bl	8009398 <__kernel_cos>
 80092c8:	e7f2      	b.n	80092b0 <cos+0x68>
 80092ca:	ed9d 1b02 	vldr	d1, [sp, #8]
 80092ce:	ed9d 0b00 	vldr	d0, [sp]
 80092d2:	2001      	movs	r0, #1
 80092d4:	f000 f928 	bl	8009528 <__kernel_sin>
 80092d8:	e7e1      	b.n	800929e <cos+0x56>
 80092da:	bf00      	nop
 80092dc:	f3af 8000 	nop.w
	...
 80092e8:	3fe921fb 	.word	0x3fe921fb
 80092ec:	7fefffff 	.word	0x7fefffff

080092f0 <sin>:
 80092f0:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 80092f2:	ec53 2b10 	vmov	r2, r3, d0
 80092f6:	4826      	ldr	r0, [pc, #152]	@ (8009390 <sin+0xa0>)
 80092f8:	f023 4100 	bic.w	r1, r3, #2147483648	@ 0x80000000
 80092fc:	4281      	cmp	r1, r0
 80092fe:	d807      	bhi.n	8009310 <sin+0x20>
 8009300:	ed9f 1b21 	vldr	d1, [pc, #132]	@ 8009388 <sin+0x98>
 8009304:	2000      	movs	r0, #0
 8009306:	b005      	add	sp, #20
 8009308:	f85d eb04 	ldr.w	lr, [sp], #4
 800930c:	f000 b90c 	b.w	8009528 <__kernel_sin>
 8009310:	4820      	ldr	r0, [pc, #128]	@ (8009394 <sin+0xa4>)
 8009312:	4281      	cmp	r1, r0
 8009314:	d908      	bls.n	8009328 <sin+0x38>
 8009316:	4610      	mov	r0, r2
 8009318:	4619      	mov	r1, r3
 800931a:	f7f6 ffd5 	bl	80002c8 <__aeabi_dsub>
 800931e:	ec41 0b10 	vmov	d0, r0, r1
 8009322:	b005      	add	sp, #20
 8009324:	f85d fb04 	ldr.w	pc, [sp], #4
 8009328:	4668      	mov	r0, sp
 800932a:	f000 f9b9 	bl	80096a0 <__ieee754_rem_pio2>
 800932e:	f000 0003 	and.w	r0, r0, #3
 8009332:	2801      	cmp	r0, #1
 8009334:	d00c      	beq.n	8009350 <sin+0x60>
 8009336:	2802      	cmp	r0, #2
 8009338:	d011      	beq.n	800935e <sin+0x6e>
 800933a:	b9e8      	cbnz	r0, 8009378 <sin+0x88>
 800933c:	ed9d 1b02 	vldr	d1, [sp, #8]
 8009340:	ed9d 0b00 	vldr	d0, [sp]
 8009344:	2001      	movs	r0, #1
 8009346:	f000 f8ef 	bl	8009528 <__kernel_sin>
 800934a:	ec51 0b10 	vmov	r0, r1, d0
 800934e:	e7e6      	b.n	800931e <sin+0x2e>
 8009350:	ed9d 1b02 	vldr	d1, [sp, #8]
 8009354:	ed9d 0b00 	vldr	d0, [sp]
 8009358:	f000 f81e 	bl	8009398 <__kernel_cos>
 800935c:	e7f5      	b.n	800934a <sin+0x5a>
 800935e:	ed9d 1b02 	vldr	d1, [sp, #8]
 8009362:	ed9d 0b00 	vldr	d0, [sp]
 8009366:	2001      	movs	r0, #1
 8009368:	f000 f8de 	bl	8009528 <__kernel_sin>
 800936c:	ec53 2b10 	vmov	r2, r3, d0
 8009370:	4610      	mov	r0, r2
 8009372:	f103 4100 	add.w	r1, r3, #2147483648	@ 0x80000000
 8009376:	e7d2      	b.n	800931e <sin+0x2e>
 8009378:	ed9d 1b02 	vldr	d1, [sp, #8]
 800937c:	ed9d 0b00 	vldr	d0, [sp]
 8009380:	f000 f80a 	bl	8009398 <__kernel_cos>
 8009384:	e7f2      	b.n	800936c <sin+0x7c>
 8009386:	bf00      	nop
	...
 8009390:	3fe921fb 	.word	0x3fe921fb
 8009394:	7fefffff 	.word	0x7fefffff

08009398 <__kernel_cos>:
 8009398:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800939c:	ec57 6b10 	vmov	r6, r7, d0
 80093a0:	f027 4800 	bic.w	r8, r7, #2147483648	@ 0x80000000
 80093a4:	f1b8 5f79 	cmp.w	r8, #1044381696	@ 0x3e400000
 80093a8:	ed8d 1b00 	vstr	d1, [sp]
 80093ac:	d206      	bcs.n	80093bc <__kernel_cos+0x24>
 80093ae:	4630      	mov	r0, r6
 80093b0:	4639      	mov	r1, r7
 80093b2:	f7f7 fbf1 	bl	8000b98 <__aeabi_d2iz>
 80093b6:	2800      	cmp	r0, #0
 80093b8:	f000 8088 	beq.w	80094cc <__kernel_cos+0x134>
 80093bc:	4632      	mov	r2, r6
 80093be:	463b      	mov	r3, r7
 80093c0:	4630      	mov	r0, r6
 80093c2:	4639      	mov	r1, r7
 80093c4:	f7f7 f938 	bl	8000638 <__aeabi_dmul>
 80093c8:	4b51      	ldr	r3, [pc, #324]	@ (8009510 <__kernel_cos+0x178>)
 80093ca:	2200      	movs	r2, #0
 80093cc:	4604      	mov	r4, r0
 80093ce:	460d      	mov	r5, r1
 80093d0:	f7f7 f932 	bl	8000638 <__aeabi_dmul>
 80093d4:	a340      	add	r3, pc, #256	@ (adr r3, 80094d8 <__kernel_cos+0x140>)
 80093d6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80093da:	4682      	mov	sl, r0
 80093dc:	468b      	mov	fp, r1
 80093de:	4620      	mov	r0, r4
 80093e0:	4629      	mov	r1, r5
 80093e2:	f7f7 f929 	bl	8000638 <__aeabi_dmul>
 80093e6:	a33e      	add	r3, pc, #248	@ (adr r3, 80094e0 <__kernel_cos+0x148>)
 80093e8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80093ec:	f7f6 ff6e 	bl	80002cc <__adddf3>
 80093f0:	4622      	mov	r2, r4
 80093f2:	462b      	mov	r3, r5
 80093f4:	f7f7 f920 	bl	8000638 <__aeabi_dmul>
 80093f8:	a33b      	add	r3, pc, #236	@ (adr r3, 80094e8 <__kernel_cos+0x150>)
 80093fa:	e9d3 2300 	ldrd	r2, r3, [r3]
 80093fe:	f7f6 ff63 	bl	80002c8 <__aeabi_dsub>
 8009402:	4622      	mov	r2, r4
 8009404:	462b      	mov	r3, r5
 8009406:	f7f7 f917 	bl	8000638 <__aeabi_dmul>
 800940a:	a339      	add	r3, pc, #228	@ (adr r3, 80094f0 <__kernel_cos+0x158>)
 800940c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009410:	f7f6 ff5c 	bl	80002cc <__adddf3>
 8009414:	4622      	mov	r2, r4
 8009416:	462b      	mov	r3, r5
 8009418:	f7f7 f90e 	bl	8000638 <__aeabi_dmul>
 800941c:	a336      	add	r3, pc, #216	@ (adr r3, 80094f8 <__kernel_cos+0x160>)
 800941e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009422:	f7f6 ff51 	bl	80002c8 <__aeabi_dsub>
 8009426:	4622      	mov	r2, r4
 8009428:	462b      	mov	r3, r5
 800942a:	f7f7 f905 	bl	8000638 <__aeabi_dmul>
 800942e:	a334      	add	r3, pc, #208	@ (adr r3, 8009500 <__kernel_cos+0x168>)
 8009430:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009434:	f7f6 ff4a 	bl	80002cc <__adddf3>
 8009438:	4622      	mov	r2, r4
 800943a:	462b      	mov	r3, r5
 800943c:	f7f7 f8fc 	bl	8000638 <__aeabi_dmul>
 8009440:	4622      	mov	r2, r4
 8009442:	462b      	mov	r3, r5
 8009444:	f7f7 f8f8 	bl	8000638 <__aeabi_dmul>
 8009448:	e9dd 2300 	ldrd	r2, r3, [sp]
 800944c:	4604      	mov	r4, r0
 800944e:	460d      	mov	r5, r1
 8009450:	4630      	mov	r0, r6
 8009452:	4639      	mov	r1, r7
 8009454:	f7f7 f8f0 	bl	8000638 <__aeabi_dmul>
 8009458:	460b      	mov	r3, r1
 800945a:	4602      	mov	r2, r0
 800945c:	4629      	mov	r1, r5
 800945e:	4620      	mov	r0, r4
 8009460:	f7f6 ff32 	bl	80002c8 <__aeabi_dsub>
 8009464:	4b2b      	ldr	r3, [pc, #172]	@ (8009514 <__kernel_cos+0x17c>)
 8009466:	4598      	cmp	r8, r3
 8009468:	4606      	mov	r6, r0
 800946a:	460f      	mov	r7, r1
 800946c:	d810      	bhi.n	8009490 <__kernel_cos+0xf8>
 800946e:	4602      	mov	r2, r0
 8009470:	460b      	mov	r3, r1
 8009472:	4650      	mov	r0, sl
 8009474:	4659      	mov	r1, fp
 8009476:	f7f6 ff27 	bl	80002c8 <__aeabi_dsub>
 800947a:	460b      	mov	r3, r1
 800947c:	4926      	ldr	r1, [pc, #152]	@ (8009518 <__kernel_cos+0x180>)
 800947e:	4602      	mov	r2, r0
 8009480:	2000      	movs	r0, #0
 8009482:	f7f6 ff21 	bl	80002c8 <__aeabi_dsub>
 8009486:	ec41 0b10 	vmov	d0, r0, r1
 800948a:	b003      	add	sp, #12
 800948c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009490:	4b22      	ldr	r3, [pc, #136]	@ (800951c <__kernel_cos+0x184>)
 8009492:	4921      	ldr	r1, [pc, #132]	@ (8009518 <__kernel_cos+0x180>)
 8009494:	4598      	cmp	r8, r3
 8009496:	bf8c      	ite	hi
 8009498:	4d21      	ldrhi	r5, [pc, #132]	@ (8009520 <__kernel_cos+0x188>)
 800949a:	f5a8 1500 	subls.w	r5, r8, #2097152	@ 0x200000
 800949e:	2400      	movs	r4, #0
 80094a0:	4622      	mov	r2, r4
 80094a2:	462b      	mov	r3, r5
 80094a4:	2000      	movs	r0, #0
 80094a6:	f7f6 ff0f 	bl	80002c8 <__aeabi_dsub>
 80094aa:	4622      	mov	r2, r4
 80094ac:	4680      	mov	r8, r0
 80094ae:	4689      	mov	r9, r1
 80094b0:	462b      	mov	r3, r5
 80094b2:	4650      	mov	r0, sl
 80094b4:	4659      	mov	r1, fp
 80094b6:	f7f6 ff07 	bl	80002c8 <__aeabi_dsub>
 80094ba:	4632      	mov	r2, r6
 80094bc:	463b      	mov	r3, r7
 80094be:	f7f6 ff03 	bl	80002c8 <__aeabi_dsub>
 80094c2:	4602      	mov	r2, r0
 80094c4:	460b      	mov	r3, r1
 80094c6:	4640      	mov	r0, r8
 80094c8:	4649      	mov	r1, r9
 80094ca:	e7da      	b.n	8009482 <__kernel_cos+0xea>
 80094cc:	ed9f 0b0e 	vldr	d0, [pc, #56]	@ 8009508 <__kernel_cos+0x170>
 80094d0:	e7db      	b.n	800948a <__kernel_cos+0xf2>
 80094d2:	bf00      	nop
 80094d4:	f3af 8000 	nop.w
 80094d8:	be8838d4 	.word	0xbe8838d4
 80094dc:	bda8fae9 	.word	0xbda8fae9
 80094e0:	bdb4b1c4 	.word	0xbdb4b1c4
 80094e4:	3e21ee9e 	.word	0x3e21ee9e
 80094e8:	809c52ad 	.word	0x809c52ad
 80094ec:	3e927e4f 	.word	0x3e927e4f
 80094f0:	19cb1590 	.word	0x19cb1590
 80094f4:	3efa01a0 	.word	0x3efa01a0
 80094f8:	16c15177 	.word	0x16c15177
 80094fc:	3f56c16c 	.word	0x3f56c16c
 8009500:	5555554c 	.word	0x5555554c
 8009504:	3fa55555 	.word	0x3fa55555
 8009508:	00000000 	.word	0x00000000
 800950c:	3ff00000 	.word	0x3ff00000
 8009510:	3fe00000 	.word	0x3fe00000
 8009514:	3fd33332 	.word	0x3fd33332
 8009518:	3ff00000 	.word	0x3ff00000
 800951c:	3fe90000 	.word	0x3fe90000
 8009520:	3fd20000 	.word	0x3fd20000
 8009524:	00000000 	.word	0x00000000

08009528 <__kernel_sin>:
 8009528:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800952c:	ec55 4b10 	vmov	r4, r5, d0
 8009530:	f025 4300 	bic.w	r3, r5, #2147483648	@ 0x80000000
 8009534:	b085      	sub	sp, #20
 8009536:	f1b3 5f79 	cmp.w	r3, #1044381696	@ 0x3e400000
 800953a:	ed8d 1b02 	vstr	d1, [sp, #8]
 800953e:	4680      	mov	r8, r0
 8009540:	d205      	bcs.n	800954e <__kernel_sin+0x26>
 8009542:	4620      	mov	r0, r4
 8009544:	4629      	mov	r1, r5
 8009546:	f7f7 fb27 	bl	8000b98 <__aeabi_d2iz>
 800954a:	2800      	cmp	r0, #0
 800954c:	d052      	beq.n	80095f4 <__kernel_sin+0xcc>
 800954e:	4622      	mov	r2, r4
 8009550:	462b      	mov	r3, r5
 8009552:	4620      	mov	r0, r4
 8009554:	4629      	mov	r1, r5
 8009556:	f7f7 f86f 	bl	8000638 <__aeabi_dmul>
 800955a:	4682      	mov	sl, r0
 800955c:	468b      	mov	fp, r1
 800955e:	4602      	mov	r2, r0
 8009560:	460b      	mov	r3, r1
 8009562:	4620      	mov	r0, r4
 8009564:	4629      	mov	r1, r5
 8009566:	f7f7 f867 	bl	8000638 <__aeabi_dmul>
 800956a:	a342      	add	r3, pc, #264	@ (adr r3, 8009674 <__kernel_sin+0x14c>)
 800956c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009570:	e9cd 0100 	strd	r0, r1, [sp]
 8009574:	4650      	mov	r0, sl
 8009576:	4659      	mov	r1, fp
 8009578:	f7f7 f85e 	bl	8000638 <__aeabi_dmul>
 800957c:	a33f      	add	r3, pc, #252	@ (adr r3, 800967c <__kernel_sin+0x154>)
 800957e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009582:	f7f6 fea1 	bl	80002c8 <__aeabi_dsub>
 8009586:	4652      	mov	r2, sl
 8009588:	465b      	mov	r3, fp
 800958a:	f7f7 f855 	bl	8000638 <__aeabi_dmul>
 800958e:	a33d      	add	r3, pc, #244	@ (adr r3, 8009684 <__kernel_sin+0x15c>)
 8009590:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009594:	f7f6 fe9a 	bl	80002cc <__adddf3>
 8009598:	4652      	mov	r2, sl
 800959a:	465b      	mov	r3, fp
 800959c:	f7f7 f84c 	bl	8000638 <__aeabi_dmul>
 80095a0:	a33a      	add	r3, pc, #232	@ (adr r3, 800968c <__kernel_sin+0x164>)
 80095a2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80095a6:	f7f6 fe8f 	bl	80002c8 <__aeabi_dsub>
 80095aa:	4652      	mov	r2, sl
 80095ac:	465b      	mov	r3, fp
 80095ae:	f7f7 f843 	bl	8000638 <__aeabi_dmul>
 80095b2:	a338      	add	r3, pc, #224	@ (adr r3, 8009694 <__kernel_sin+0x16c>)
 80095b4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80095b8:	f7f6 fe88 	bl	80002cc <__adddf3>
 80095bc:	4606      	mov	r6, r0
 80095be:	460f      	mov	r7, r1
 80095c0:	f1b8 0f00 	cmp.w	r8, #0
 80095c4:	d11b      	bne.n	80095fe <__kernel_sin+0xd6>
 80095c6:	4602      	mov	r2, r0
 80095c8:	460b      	mov	r3, r1
 80095ca:	4650      	mov	r0, sl
 80095cc:	4659      	mov	r1, fp
 80095ce:	f7f7 f833 	bl	8000638 <__aeabi_dmul>
 80095d2:	a325      	add	r3, pc, #148	@ (adr r3, 8009668 <__kernel_sin+0x140>)
 80095d4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80095d8:	f7f6 fe76 	bl	80002c8 <__aeabi_dsub>
 80095dc:	e9dd 2300 	ldrd	r2, r3, [sp]
 80095e0:	f7f7 f82a 	bl	8000638 <__aeabi_dmul>
 80095e4:	4602      	mov	r2, r0
 80095e6:	460b      	mov	r3, r1
 80095e8:	4620      	mov	r0, r4
 80095ea:	4629      	mov	r1, r5
 80095ec:	f7f6 fe6e 	bl	80002cc <__adddf3>
 80095f0:	4604      	mov	r4, r0
 80095f2:	460d      	mov	r5, r1
 80095f4:	ec45 4b10 	vmov	d0, r4, r5
 80095f8:	b005      	add	sp, #20
 80095fa:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80095fe:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8009602:	4b1b      	ldr	r3, [pc, #108]	@ (8009670 <__kernel_sin+0x148>)
 8009604:	2200      	movs	r2, #0
 8009606:	f7f7 f817 	bl	8000638 <__aeabi_dmul>
 800960a:	4632      	mov	r2, r6
 800960c:	4680      	mov	r8, r0
 800960e:	4689      	mov	r9, r1
 8009610:	463b      	mov	r3, r7
 8009612:	e9dd 0100 	ldrd	r0, r1, [sp]
 8009616:	f7f7 f80f 	bl	8000638 <__aeabi_dmul>
 800961a:	4602      	mov	r2, r0
 800961c:	460b      	mov	r3, r1
 800961e:	4640      	mov	r0, r8
 8009620:	4649      	mov	r1, r9
 8009622:	f7f6 fe51 	bl	80002c8 <__aeabi_dsub>
 8009626:	4652      	mov	r2, sl
 8009628:	465b      	mov	r3, fp
 800962a:	f7f7 f805 	bl	8000638 <__aeabi_dmul>
 800962e:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8009632:	f7f6 fe49 	bl	80002c8 <__aeabi_dsub>
 8009636:	a30c      	add	r3, pc, #48	@ (adr r3, 8009668 <__kernel_sin+0x140>)
 8009638:	e9d3 2300 	ldrd	r2, r3, [r3]
 800963c:	4606      	mov	r6, r0
 800963e:	460f      	mov	r7, r1
 8009640:	e9dd 0100 	ldrd	r0, r1, [sp]
 8009644:	f7f6 fff8 	bl	8000638 <__aeabi_dmul>
 8009648:	4602      	mov	r2, r0
 800964a:	460b      	mov	r3, r1
 800964c:	4630      	mov	r0, r6
 800964e:	4639      	mov	r1, r7
 8009650:	f7f6 fe3c 	bl	80002cc <__adddf3>
 8009654:	4602      	mov	r2, r0
 8009656:	460b      	mov	r3, r1
 8009658:	4620      	mov	r0, r4
 800965a:	4629      	mov	r1, r5
 800965c:	f7f6 fe34 	bl	80002c8 <__aeabi_dsub>
 8009660:	e7c6      	b.n	80095f0 <__kernel_sin+0xc8>
 8009662:	bf00      	nop
 8009664:	f3af 8000 	nop.w
 8009668:	55555549 	.word	0x55555549
 800966c:	3fc55555 	.word	0x3fc55555
 8009670:	3fe00000 	.word	0x3fe00000
 8009674:	5acfd57c 	.word	0x5acfd57c
 8009678:	3de5d93a 	.word	0x3de5d93a
 800967c:	8a2b9ceb 	.word	0x8a2b9ceb
 8009680:	3e5ae5e6 	.word	0x3e5ae5e6
 8009684:	57b1fe7d 	.word	0x57b1fe7d
 8009688:	3ec71de3 	.word	0x3ec71de3
 800968c:	19c161d5 	.word	0x19c161d5
 8009690:	3f2a01a0 	.word	0x3f2a01a0
 8009694:	1110f8a6 	.word	0x1110f8a6
 8009698:	3f811111 	.word	0x3f811111
 800969c:	00000000 	.word	0x00000000

080096a0 <__ieee754_rem_pio2>:
 80096a0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80096a4:	ec57 6b10 	vmov	r6, r7, d0
 80096a8:	4bc5      	ldr	r3, [pc, #788]	@ (80099c0 <__ieee754_rem_pio2+0x320>)
 80096aa:	b08d      	sub	sp, #52	@ 0x34
 80096ac:	f027 4800 	bic.w	r8, r7, #2147483648	@ 0x80000000
 80096b0:	4598      	cmp	r8, r3
 80096b2:	4604      	mov	r4, r0
 80096b4:	9704      	str	r7, [sp, #16]
 80096b6:	d807      	bhi.n	80096c8 <__ieee754_rem_pio2+0x28>
 80096b8:	2200      	movs	r2, #0
 80096ba:	2300      	movs	r3, #0
 80096bc:	ed80 0b00 	vstr	d0, [r0]
 80096c0:	e9c0 2302 	strd	r2, r3, [r0, #8]
 80096c4:	2500      	movs	r5, #0
 80096c6:	e028      	b.n	800971a <__ieee754_rem_pio2+0x7a>
 80096c8:	4bbe      	ldr	r3, [pc, #760]	@ (80099c4 <__ieee754_rem_pio2+0x324>)
 80096ca:	4598      	cmp	r8, r3
 80096cc:	d878      	bhi.n	80097c0 <__ieee754_rem_pio2+0x120>
 80096ce:	9b04      	ldr	r3, [sp, #16]
 80096d0:	4dbd      	ldr	r5, [pc, #756]	@ (80099c8 <__ieee754_rem_pio2+0x328>)
 80096d2:	2b00      	cmp	r3, #0
 80096d4:	4630      	mov	r0, r6
 80096d6:	a3ac      	add	r3, pc, #688	@ (adr r3, 8009988 <__ieee754_rem_pio2+0x2e8>)
 80096d8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80096dc:	4639      	mov	r1, r7
 80096de:	dd38      	ble.n	8009752 <__ieee754_rem_pio2+0xb2>
 80096e0:	f7f6 fdf2 	bl	80002c8 <__aeabi_dsub>
 80096e4:	45a8      	cmp	r8, r5
 80096e6:	4606      	mov	r6, r0
 80096e8:	460f      	mov	r7, r1
 80096ea:	d01a      	beq.n	8009722 <__ieee754_rem_pio2+0x82>
 80096ec:	a3a8      	add	r3, pc, #672	@ (adr r3, 8009990 <__ieee754_rem_pio2+0x2f0>)
 80096ee:	e9d3 2300 	ldrd	r2, r3, [r3]
 80096f2:	f7f6 fde9 	bl	80002c8 <__aeabi_dsub>
 80096f6:	4602      	mov	r2, r0
 80096f8:	460b      	mov	r3, r1
 80096fa:	4680      	mov	r8, r0
 80096fc:	4689      	mov	r9, r1
 80096fe:	4630      	mov	r0, r6
 8009700:	4639      	mov	r1, r7
 8009702:	f7f6 fde1 	bl	80002c8 <__aeabi_dsub>
 8009706:	a3a2      	add	r3, pc, #648	@ (adr r3, 8009990 <__ieee754_rem_pio2+0x2f0>)
 8009708:	e9d3 2300 	ldrd	r2, r3, [r3]
 800970c:	f7f6 fddc 	bl	80002c8 <__aeabi_dsub>
 8009710:	e9c4 8900 	strd	r8, r9, [r4]
 8009714:	e9c4 0102 	strd	r0, r1, [r4, #8]
 8009718:	2501      	movs	r5, #1
 800971a:	4628      	mov	r0, r5
 800971c:	b00d      	add	sp, #52	@ 0x34
 800971e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009722:	a39d      	add	r3, pc, #628	@ (adr r3, 8009998 <__ieee754_rem_pio2+0x2f8>)
 8009724:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009728:	f7f6 fdce 	bl	80002c8 <__aeabi_dsub>
 800972c:	a39c      	add	r3, pc, #624	@ (adr r3, 80099a0 <__ieee754_rem_pio2+0x300>)
 800972e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009732:	4606      	mov	r6, r0
 8009734:	460f      	mov	r7, r1
 8009736:	f7f6 fdc7 	bl	80002c8 <__aeabi_dsub>
 800973a:	4602      	mov	r2, r0
 800973c:	460b      	mov	r3, r1
 800973e:	4680      	mov	r8, r0
 8009740:	4689      	mov	r9, r1
 8009742:	4630      	mov	r0, r6
 8009744:	4639      	mov	r1, r7
 8009746:	f7f6 fdbf 	bl	80002c8 <__aeabi_dsub>
 800974a:	a395      	add	r3, pc, #596	@ (adr r3, 80099a0 <__ieee754_rem_pio2+0x300>)
 800974c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009750:	e7dc      	b.n	800970c <__ieee754_rem_pio2+0x6c>
 8009752:	f7f6 fdbb 	bl	80002cc <__adddf3>
 8009756:	45a8      	cmp	r8, r5
 8009758:	4606      	mov	r6, r0
 800975a:	460f      	mov	r7, r1
 800975c:	d018      	beq.n	8009790 <__ieee754_rem_pio2+0xf0>
 800975e:	a38c      	add	r3, pc, #560	@ (adr r3, 8009990 <__ieee754_rem_pio2+0x2f0>)
 8009760:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009764:	f7f6 fdb2 	bl	80002cc <__adddf3>
 8009768:	4602      	mov	r2, r0
 800976a:	460b      	mov	r3, r1
 800976c:	4680      	mov	r8, r0
 800976e:	4689      	mov	r9, r1
 8009770:	4630      	mov	r0, r6
 8009772:	4639      	mov	r1, r7
 8009774:	f7f6 fda8 	bl	80002c8 <__aeabi_dsub>
 8009778:	a385      	add	r3, pc, #532	@ (adr r3, 8009990 <__ieee754_rem_pio2+0x2f0>)
 800977a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800977e:	f7f6 fda5 	bl	80002cc <__adddf3>
 8009782:	f04f 35ff 	mov.w	r5, #4294967295
 8009786:	e9c4 8900 	strd	r8, r9, [r4]
 800978a:	e9c4 0102 	strd	r0, r1, [r4, #8]
 800978e:	e7c4      	b.n	800971a <__ieee754_rem_pio2+0x7a>
 8009790:	a381      	add	r3, pc, #516	@ (adr r3, 8009998 <__ieee754_rem_pio2+0x2f8>)
 8009792:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009796:	f7f6 fd99 	bl	80002cc <__adddf3>
 800979a:	a381      	add	r3, pc, #516	@ (adr r3, 80099a0 <__ieee754_rem_pio2+0x300>)
 800979c:	e9d3 2300 	ldrd	r2, r3, [r3]
 80097a0:	4606      	mov	r6, r0
 80097a2:	460f      	mov	r7, r1
 80097a4:	f7f6 fd92 	bl	80002cc <__adddf3>
 80097a8:	4602      	mov	r2, r0
 80097aa:	460b      	mov	r3, r1
 80097ac:	4680      	mov	r8, r0
 80097ae:	4689      	mov	r9, r1
 80097b0:	4630      	mov	r0, r6
 80097b2:	4639      	mov	r1, r7
 80097b4:	f7f6 fd88 	bl	80002c8 <__aeabi_dsub>
 80097b8:	a379      	add	r3, pc, #484	@ (adr r3, 80099a0 <__ieee754_rem_pio2+0x300>)
 80097ba:	e9d3 2300 	ldrd	r2, r3, [r3]
 80097be:	e7de      	b.n	800977e <__ieee754_rem_pio2+0xde>
 80097c0:	4b82      	ldr	r3, [pc, #520]	@ (80099cc <__ieee754_rem_pio2+0x32c>)
 80097c2:	4598      	cmp	r8, r3
 80097c4:	f200 80d1 	bhi.w	800996a <__ieee754_rem_pio2+0x2ca>
 80097c8:	f000 f966 	bl	8009a98 <fabs>
 80097cc:	ec57 6b10 	vmov	r6, r7, d0
 80097d0:	a375      	add	r3, pc, #468	@ (adr r3, 80099a8 <__ieee754_rem_pio2+0x308>)
 80097d2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80097d6:	4630      	mov	r0, r6
 80097d8:	4639      	mov	r1, r7
 80097da:	f7f6 ff2d 	bl	8000638 <__aeabi_dmul>
 80097de:	4b7c      	ldr	r3, [pc, #496]	@ (80099d0 <__ieee754_rem_pio2+0x330>)
 80097e0:	2200      	movs	r2, #0
 80097e2:	f7f6 fd73 	bl	80002cc <__adddf3>
 80097e6:	f7f7 f9d7 	bl	8000b98 <__aeabi_d2iz>
 80097ea:	4605      	mov	r5, r0
 80097ec:	f7f6 feba 	bl	8000564 <__aeabi_i2d>
 80097f0:	4602      	mov	r2, r0
 80097f2:	460b      	mov	r3, r1
 80097f4:	e9cd 2302 	strd	r2, r3, [sp, #8]
 80097f8:	a363      	add	r3, pc, #396	@ (adr r3, 8009988 <__ieee754_rem_pio2+0x2e8>)
 80097fa:	e9d3 2300 	ldrd	r2, r3, [r3]
 80097fe:	f7f6 ff1b 	bl	8000638 <__aeabi_dmul>
 8009802:	4602      	mov	r2, r0
 8009804:	460b      	mov	r3, r1
 8009806:	4630      	mov	r0, r6
 8009808:	4639      	mov	r1, r7
 800980a:	f7f6 fd5d 	bl	80002c8 <__aeabi_dsub>
 800980e:	a360      	add	r3, pc, #384	@ (adr r3, 8009990 <__ieee754_rem_pio2+0x2f0>)
 8009810:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009814:	4682      	mov	sl, r0
 8009816:	468b      	mov	fp, r1
 8009818:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800981c:	f7f6 ff0c 	bl	8000638 <__aeabi_dmul>
 8009820:	2d1f      	cmp	r5, #31
 8009822:	4606      	mov	r6, r0
 8009824:	460f      	mov	r7, r1
 8009826:	dc0c      	bgt.n	8009842 <__ieee754_rem_pio2+0x1a2>
 8009828:	4b6a      	ldr	r3, [pc, #424]	@ (80099d4 <__ieee754_rem_pio2+0x334>)
 800982a:	1e6a      	subs	r2, r5, #1
 800982c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8009830:	4543      	cmp	r3, r8
 8009832:	d006      	beq.n	8009842 <__ieee754_rem_pio2+0x1a2>
 8009834:	4632      	mov	r2, r6
 8009836:	463b      	mov	r3, r7
 8009838:	4650      	mov	r0, sl
 800983a:	4659      	mov	r1, fp
 800983c:	f7f6 fd44 	bl	80002c8 <__aeabi_dsub>
 8009840:	e00e      	b.n	8009860 <__ieee754_rem_pio2+0x1c0>
 8009842:	463b      	mov	r3, r7
 8009844:	4632      	mov	r2, r6
 8009846:	4650      	mov	r0, sl
 8009848:	4659      	mov	r1, fp
 800984a:	f7f6 fd3d 	bl	80002c8 <__aeabi_dsub>
 800984e:	ea4f 5328 	mov.w	r3, r8, asr #20
 8009852:	9305      	str	r3, [sp, #20]
 8009854:	f3c1 530a 	ubfx	r3, r1, #20, #11
 8009858:	ebc3 5318 	rsb	r3, r3, r8, lsr #20
 800985c:	2b10      	cmp	r3, #16
 800985e:	dc02      	bgt.n	8009866 <__ieee754_rem_pio2+0x1c6>
 8009860:	e9c4 0100 	strd	r0, r1, [r4]
 8009864:	e039      	b.n	80098da <__ieee754_rem_pio2+0x23a>
 8009866:	a34c      	add	r3, pc, #304	@ (adr r3, 8009998 <__ieee754_rem_pio2+0x2f8>)
 8009868:	e9d3 2300 	ldrd	r2, r3, [r3]
 800986c:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8009870:	f7f6 fee2 	bl	8000638 <__aeabi_dmul>
 8009874:	4606      	mov	r6, r0
 8009876:	460f      	mov	r7, r1
 8009878:	4602      	mov	r2, r0
 800987a:	460b      	mov	r3, r1
 800987c:	4650      	mov	r0, sl
 800987e:	4659      	mov	r1, fp
 8009880:	f7f6 fd22 	bl	80002c8 <__aeabi_dsub>
 8009884:	4602      	mov	r2, r0
 8009886:	460b      	mov	r3, r1
 8009888:	4680      	mov	r8, r0
 800988a:	4689      	mov	r9, r1
 800988c:	4650      	mov	r0, sl
 800988e:	4659      	mov	r1, fp
 8009890:	f7f6 fd1a 	bl	80002c8 <__aeabi_dsub>
 8009894:	4632      	mov	r2, r6
 8009896:	463b      	mov	r3, r7
 8009898:	f7f6 fd16 	bl	80002c8 <__aeabi_dsub>
 800989c:	a340      	add	r3, pc, #256	@ (adr r3, 80099a0 <__ieee754_rem_pio2+0x300>)
 800989e:	e9d3 2300 	ldrd	r2, r3, [r3]
 80098a2:	4606      	mov	r6, r0
 80098a4:	460f      	mov	r7, r1
 80098a6:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80098aa:	f7f6 fec5 	bl	8000638 <__aeabi_dmul>
 80098ae:	4632      	mov	r2, r6
 80098b0:	463b      	mov	r3, r7
 80098b2:	f7f6 fd09 	bl	80002c8 <__aeabi_dsub>
 80098b6:	4602      	mov	r2, r0
 80098b8:	460b      	mov	r3, r1
 80098ba:	4606      	mov	r6, r0
 80098bc:	460f      	mov	r7, r1
 80098be:	4640      	mov	r0, r8
 80098c0:	4649      	mov	r1, r9
 80098c2:	f7f6 fd01 	bl	80002c8 <__aeabi_dsub>
 80098c6:	9a05      	ldr	r2, [sp, #20]
 80098c8:	f3c1 530a 	ubfx	r3, r1, #20, #11
 80098cc:	1ad3      	subs	r3, r2, r3
 80098ce:	2b31      	cmp	r3, #49	@ 0x31
 80098d0:	dc20      	bgt.n	8009914 <__ieee754_rem_pio2+0x274>
 80098d2:	e9c4 0100 	strd	r0, r1, [r4]
 80098d6:	46c2      	mov	sl, r8
 80098d8:	46cb      	mov	fp, r9
 80098da:	e9d4 8900 	ldrd	r8, r9, [r4]
 80098de:	4650      	mov	r0, sl
 80098e0:	4642      	mov	r2, r8
 80098e2:	464b      	mov	r3, r9
 80098e4:	4659      	mov	r1, fp
 80098e6:	f7f6 fcef 	bl	80002c8 <__aeabi_dsub>
 80098ea:	463b      	mov	r3, r7
 80098ec:	4632      	mov	r2, r6
 80098ee:	f7f6 fceb 	bl	80002c8 <__aeabi_dsub>
 80098f2:	9b04      	ldr	r3, [sp, #16]
 80098f4:	2b00      	cmp	r3, #0
 80098f6:	e9c4 0102 	strd	r0, r1, [r4, #8]
 80098fa:	f6bf af0e 	bge.w	800971a <__ieee754_rem_pio2+0x7a>
 80098fe:	f109 4300 	add.w	r3, r9, #2147483648	@ 0x80000000
 8009902:	6063      	str	r3, [r4, #4]
 8009904:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 8009908:	f8c4 8000 	str.w	r8, [r4]
 800990c:	60a0      	str	r0, [r4, #8]
 800990e:	60e3      	str	r3, [r4, #12]
 8009910:	426d      	negs	r5, r5
 8009912:	e702      	b.n	800971a <__ieee754_rem_pio2+0x7a>
 8009914:	a326      	add	r3, pc, #152	@ (adr r3, 80099b0 <__ieee754_rem_pio2+0x310>)
 8009916:	e9d3 2300 	ldrd	r2, r3, [r3]
 800991a:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800991e:	f7f6 fe8b 	bl	8000638 <__aeabi_dmul>
 8009922:	4606      	mov	r6, r0
 8009924:	460f      	mov	r7, r1
 8009926:	4602      	mov	r2, r0
 8009928:	460b      	mov	r3, r1
 800992a:	4640      	mov	r0, r8
 800992c:	4649      	mov	r1, r9
 800992e:	f7f6 fccb 	bl	80002c8 <__aeabi_dsub>
 8009932:	4602      	mov	r2, r0
 8009934:	460b      	mov	r3, r1
 8009936:	4682      	mov	sl, r0
 8009938:	468b      	mov	fp, r1
 800993a:	4640      	mov	r0, r8
 800993c:	4649      	mov	r1, r9
 800993e:	f7f6 fcc3 	bl	80002c8 <__aeabi_dsub>
 8009942:	4632      	mov	r2, r6
 8009944:	463b      	mov	r3, r7
 8009946:	f7f6 fcbf 	bl	80002c8 <__aeabi_dsub>
 800994a:	a31b      	add	r3, pc, #108	@ (adr r3, 80099b8 <__ieee754_rem_pio2+0x318>)
 800994c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009950:	4606      	mov	r6, r0
 8009952:	460f      	mov	r7, r1
 8009954:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8009958:	f7f6 fe6e 	bl	8000638 <__aeabi_dmul>
 800995c:	4632      	mov	r2, r6
 800995e:	463b      	mov	r3, r7
 8009960:	f7f6 fcb2 	bl	80002c8 <__aeabi_dsub>
 8009964:	4606      	mov	r6, r0
 8009966:	460f      	mov	r7, r1
 8009968:	e764      	b.n	8009834 <__ieee754_rem_pio2+0x194>
 800996a:	4b1b      	ldr	r3, [pc, #108]	@ (80099d8 <__ieee754_rem_pio2+0x338>)
 800996c:	4598      	cmp	r8, r3
 800996e:	d935      	bls.n	80099dc <__ieee754_rem_pio2+0x33c>
 8009970:	4632      	mov	r2, r6
 8009972:	463b      	mov	r3, r7
 8009974:	4630      	mov	r0, r6
 8009976:	4639      	mov	r1, r7
 8009978:	f7f6 fca6 	bl	80002c8 <__aeabi_dsub>
 800997c:	e9c4 0102 	strd	r0, r1, [r4, #8]
 8009980:	e9c4 0100 	strd	r0, r1, [r4]
 8009984:	e69e      	b.n	80096c4 <__ieee754_rem_pio2+0x24>
 8009986:	bf00      	nop
 8009988:	54400000 	.word	0x54400000
 800998c:	3ff921fb 	.word	0x3ff921fb
 8009990:	1a626331 	.word	0x1a626331
 8009994:	3dd0b461 	.word	0x3dd0b461
 8009998:	1a600000 	.word	0x1a600000
 800999c:	3dd0b461 	.word	0x3dd0b461
 80099a0:	2e037073 	.word	0x2e037073
 80099a4:	3ba3198a 	.word	0x3ba3198a
 80099a8:	6dc9c883 	.word	0x6dc9c883
 80099ac:	3fe45f30 	.word	0x3fe45f30
 80099b0:	2e000000 	.word	0x2e000000
 80099b4:	3ba3198a 	.word	0x3ba3198a
 80099b8:	252049c1 	.word	0x252049c1
 80099bc:	397b839a 	.word	0x397b839a
 80099c0:	3fe921fb 	.word	0x3fe921fb
 80099c4:	4002d97b 	.word	0x4002d97b
 80099c8:	3ff921fb 	.word	0x3ff921fb
 80099cc:	413921fb 	.word	0x413921fb
 80099d0:	3fe00000 	.word	0x3fe00000
 80099d4:	0800a7b8 	.word	0x0800a7b8
 80099d8:	7fefffff 	.word	0x7fefffff
 80099dc:	ea4f 5528 	mov.w	r5, r8, asr #20
 80099e0:	f2a5 4516 	subw	r5, r5, #1046	@ 0x416
 80099e4:	eba8 5105 	sub.w	r1, r8, r5, lsl #20
 80099e8:	4630      	mov	r0, r6
 80099ea:	460f      	mov	r7, r1
 80099ec:	f7f7 f8d4 	bl	8000b98 <__aeabi_d2iz>
 80099f0:	f7f6 fdb8 	bl	8000564 <__aeabi_i2d>
 80099f4:	4602      	mov	r2, r0
 80099f6:	460b      	mov	r3, r1
 80099f8:	4630      	mov	r0, r6
 80099fa:	4639      	mov	r1, r7
 80099fc:	e9cd 2306 	strd	r2, r3, [sp, #24]
 8009a00:	f7f6 fc62 	bl	80002c8 <__aeabi_dsub>
 8009a04:	4b22      	ldr	r3, [pc, #136]	@ (8009a90 <__ieee754_rem_pio2+0x3f0>)
 8009a06:	2200      	movs	r2, #0
 8009a08:	f7f6 fe16 	bl	8000638 <__aeabi_dmul>
 8009a0c:	460f      	mov	r7, r1
 8009a0e:	4606      	mov	r6, r0
 8009a10:	f7f7 f8c2 	bl	8000b98 <__aeabi_d2iz>
 8009a14:	f7f6 fda6 	bl	8000564 <__aeabi_i2d>
 8009a18:	4602      	mov	r2, r0
 8009a1a:	460b      	mov	r3, r1
 8009a1c:	4630      	mov	r0, r6
 8009a1e:	4639      	mov	r1, r7
 8009a20:	e9cd 2308 	strd	r2, r3, [sp, #32]
 8009a24:	f7f6 fc50 	bl	80002c8 <__aeabi_dsub>
 8009a28:	4b19      	ldr	r3, [pc, #100]	@ (8009a90 <__ieee754_rem_pio2+0x3f0>)
 8009a2a:	2200      	movs	r2, #0
 8009a2c:	f7f6 fe04 	bl	8000638 <__aeabi_dmul>
 8009a30:	e9cd 010a 	strd	r0, r1, [sp, #40]	@ 0x28
 8009a34:	f10d 0930 	add.w	r9, sp, #48	@ 0x30
 8009a38:	f04f 0803 	mov.w	r8, #3
 8009a3c:	2600      	movs	r6, #0
 8009a3e:	2700      	movs	r7, #0
 8009a40:	e979 0102 	ldrd	r0, r1, [r9, #-8]!
 8009a44:	4632      	mov	r2, r6
 8009a46:	463b      	mov	r3, r7
 8009a48:	46c2      	mov	sl, r8
 8009a4a:	f108 38ff 	add.w	r8, r8, #4294967295
 8009a4e:	f7f7 f85b 	bl	8000b08 <__aeabi_dcmpeq>
 8009a52:	2800      	cmp	r0, #0
 8009a54:	d1f4      	bne.n	8009a40 <__ieee754_rem_pio2+0x3a0>
 8009a56:	4b0f      	ldr	r3, [pc, #60]	@ (8009a94 <__ieee754_rem_pio2+0x3f4>)
 8009a58:	9301      	str	r3, [sp, #4]
 8009a5a:	2302      	movs	r3, #2
 8009a5c:	9300      	str	r3, [sp, #0]
 8009a5e:	462a      	mov	r2, r5
 8009a60:	4653      	mov	r3, sl
 8009a62:	4621      	mov	r1, r4
 8009a64:	a806      	add	r0, sp, #24
 8009a66:	f000 f81f 	bl	8009aa8 <__kernel_rem_pio2>
 8009a6a:	9b04      	ldr	r3, [sp, #16]
 8009a6c:	2b00      	cmp	r3, #0
 8009a6e:	4605      	mov	r5, r0
 8009a70:	f6bf ae53 	bge.w	800971a <__ieee754_rem_pio2+0x7a>
 8009a74:	e9d4 2100 	ldrd	r2, r1, [r4]
 8009a78:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 8009a7c:	e9c4 2300 	strd	r2, r3, [r4]
 8009a80:	e9d4 2102 	ldrd	r2, r1, [r4, #8]
 8009a84:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 8009a88:	e9c4 2302 	strd	r2, r3, [r4, #8]
 8009a8c:	e740      	b.n	8009910 <__ieee754_rem_pio2+0x270>
 8009a8e:	bf00      	nop
 8009a90:	41700000 	.word	0x41700000
 8009a94:	0800a838 	.word	0x0800a838

08009a98 <fabs>:
 8009a98:	ec51 0b10 	vmov	r0, r1, d0
 8009a9c:	4602      	mov	r2, r0
 8009a9e:	f021 4300 	bic.w	r3, r1, #2147483648	@ 0x80000000
 8009aa2:	ec43 2b10 	vmov	d0, r2, r3
 8009aa6:	4770      	bx	lr

08009aa8 <__kernel_rem_pio2>:
 8009aa8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009aac:	ed2d 8b02 	vpush	{d8}
 8009ab0:	f5ad 7d19 	sub.w	sp, sp, #612	@ 0x264
 8009ab4:	f112 0f14 	cmn.w	r2, #20
 8009ab8:	9306      	str	r3, [sp, #24]
 8009aba:	9104      	str	r1, [sp, #16]
 8009abc:	4bbe      	ldr	r3, [pc, #760]	@ (8009db8 <__kernel_rem_pio2+0x310>)
 8009abe:	99a4      	ldr	r1, [sp, #656]	@ 0x290
 8009ac0:	9008      	str	r0, [sp, #32]
 8009ac2:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 8009ac6:	9300      	str	r3, [sp, #0]
 8009ac8:	9b06      	ldr	r3, [sp, #24]
 8009aca:	f103 33ff 	add.w	r3, r3, #4294967295
 8009ace:	bfa8      	it	ge
 8009ad0:	1ed4      	subge	r4, r2, #3
 8009ad2:	9305      	str	r3, [sp, #20]
 8009ad4:	bfb2      	itee	lt
 8009ad6:	2400      	movlt	r4, #0
 8009ad8:	2318      	movge	r3, #24
 8009ada:	fb94 f4f3 	sdivge	r4, r4, r3
 8009ade:	f06f 0317 	mvn.w	r3, #23
 8009ae2:	fb04 3303 	mla	r3, r4, r3, r3
 8009ae6:	eb03 0b02 	add.w	fp, r3, r2
 8009aea:	9b00      	ldr	r3, [sp, #0]
 8009aec:	9a05      	ldr	r2, [sp, #20]
 8009aee:	ed9f 8bae 	vldr	d8, [pc, #696]	@ 8009da8 <__kernel_rem_pio2+0x300>
 8009af2:	eb03 0802 	add.w	r8, r3, r2
 8009af6:	9ba5      	ldr	r3, [sp, #660]	@ 0x294
 8009af8:	1aa7      	subs	r7, r4, r2
 8009afa:	ae20      	add	r6, sp, #128	@ 0x80
 8009afc:	eb03 0987 	add.w	r9, r3, r7, lsl #2
 8009b00:	2500      	movs	r5, #0
 8009b02:	4545      	cmp	r5, r8
 8009b04:	dd13      	ble.n	8009b2e <__kernel_rem_pio2+0x86>
 8009b06:	9b06      	ldr	r3, [sp, #24]
 8009b08:	aa20      	add	r2, sp, #128	@ 0x80
 8009b0a:	eb02 05c3 	add.w	r5, r2, r3, lsl #3
 8009b0e:	f50d 7ae0 	add.w	sl, sp, #448	@ 0x1c0
 8009b12:	f04f 0800 	mov.w	r8, #0
 8009b16:	9b00      	ldr	r3, [sp, #0]
 8009b18:	4598      	cmp	r8, r3
 8009b1a:	dc31      	bgt.n	8009b80 <__kernel_rem_pio2+0xd8>
 8009b1c:	ed9f 7ba2 	vldr	d7, [pc, #648]	@ 8009da8 <__kernel_rem_pio2+0x300>
 8009b20:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8009b24:	ed8d 7b02 	vstr	d7, [sp, #8]
 8009b28:	462f      	mov	r7, r5
 8009b2a:	2600      	movs	r6, #0
 8009b2c:	e01b      	b.n	8009b66 <__kernel_rem_pio2+0xbe>
 8009b2e:	42ef      	cmn	r7, r5
 8009b30:	d407      	bmi.n	8009b42 <__kernel_rem_pio2+0x9a>
 8009b32:	f859 0025 	ldr.w	r0, [r9, r5, lsl #2]
 8009b36:	f7f6 fd15 	bl	8000564 <__aeabi_i2d>
 8009b3a:	e8e6 0102 	strd	r0, r1, [r6], #8
 8009b3e:	3501      	adds	r5, #1
 8009b40:	e7df      	b.n	8009b02 <__kernel_rem_pio2+0x5a>
 8009b42:	ec51 0b18 	vmov	r0, r1, d8
 8009b46:	e7f8      	b.n	8009b3a <__kernel_rem_pio2+0x92>
 8009b48:	e9d7 2300 	ldrd	r2, r3, [r7]
 8009b4c:	e8f9 0102 	ldrd	r0, r1, [r9], #8
 8009b50:	f7f6 fd72 	bl	8000638 <__aeabi_dmul>
 8009b54:	4602      	mov	r2, r0
 8009b56:	460b      	mov	r3, r1
 8009b58:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8009b5c:	f7f6 fbb6 	bl	80002cc <__adddf3>
 8009b60:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8009b64:	3601      	adds	r6, #1
 8009b66:	9b05      	ldr	r3, [sp, #20]
 8009b68:	429e      	cmp	r6, r3
 8009b6a:	f1a7 0708 	sub.w	r7, r7, #8
 8009b6e:	ddeb      	ble.n	8009b48 <__kernel_rem_pio2+0xa0>
 8009b70:	ed9d 7b02 	vldr	d7, [sp, #8]
 8009b74:	f108 0801 	add.w	r8, r8, #1
 8009b78:	ecaa 7b02 	vstmia	sl!, {d7}
 8009b7c:	3508      	adds	r5, #8
 8009b7e:	e7ca      	b.n	8009b16 <__kernel_rem_pio2+0x6e>
 8009b80:	9b00      	ldr	r3, [sp, #0]
 8009b82:	f8dd 8000 	ldr.w	r8, [sp]
 8009b86:	aa0c      	add	r2, sp, #48	@ 0x30
 8009b88:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 8009b8c:	930a      	str	r3, [sp, #40]	@ 0x28
 8009b8e:	9ba5      	ldr	r3, [sp, #660]	@ 0x294
 8009b90:	eb03 0384 	add.w	r3, r3, r4, lsl #2
 8009b94:	9309      	str	r3, [sp, #36]	@ 0x24
 8009b96:	ea4f 03c8 	mov.w	r3, r8, lsl #3
 8009b9a:	930b      	str	r3, [sp, #44]	@ 0x2c
 8009b9c:	ab98      	add	r3, sp, #608	@ 0x260
 8009b9e:	eb03 03c8 	add.w	r3, r3, r8, lsl #3
 8009ba2:	ed13 7b28 	vldr	d7, [r3, #-160]	@ 0xffffff60
 8009ba6:	ed8d 7b02 	vstr	d7, [sp, #8]
 8009baa:	ac0c      	add	r4, sp, #48	@ 0x30
 8009bac:	ab70      	add	r3, sp, #448	@ 0x1c0
 8009bae:	eb03 05c8 	add.w	r5, r3, r8, lsl #3
 8009bb2:	46a1      	mov	r9, r4
 8009bb4:	46c2      	mov	sl, r8
 8009bb6:	f1ba 0f00 	cmp.w	sl, #0
 8009bba:	f1a5 0508 	sub.w	r5, r5, #8
 8009bbe:	dc77      	bgt.n	8009cb0 <__kernel_rem_pio2+0x208>
 8009bc0:	4658      	mov	r0, fp
 8009bc2:	ed9d 0b02 	vldr	d0, [sp, #8]
 8009bc6:	f000 fac7 	bl	800a158 <scalbn>
 8009bca:	ec57 6b10 	vmov	r6, r7, d0
 8009bce:	2200      	movs	r2, #0
 8009bd0:	f04f 537f 	mov.w	r3, #1069547520	@ 0x3fc00000
 8009bd4:	4630      	mov	r0, r6
 8009bd6:	4639      	mov	r1, r7
 8009bd8:	f7f6 fd2e 	bl	8000638 <__aeabi_dmul>
 8009bdc:	ec41 0b10 	vmov	d0, r0, r1
 8009be0:	f000 fb3a 	bl	800a258 <floor>
 8009be4:	4b75      	ldr	r3, [pc, #468]	@ (8009dbc <__kernel_rem_pio2+0x314>)
 8009be6:	ec51 0b10 	vmov	r0, r1, d0
 8009bea:	2200      	movs	r2, #0
 8009bec:	f7f6 fd24 	bl	8000638 <__aeabi_dmul>
 8009bf0:	4602      	mov	r2, r0
 8009bf2:	460b      	mov	r3, r1
 8009bf4:	4630      	mov	r0, r6
 8009bf6:	4639      	mov	r1, r7
 8009bf8:	f7f6 fb66 	bl	80002c8 <__aeabi_dsub>
 8009bfc:	460f      	mov	r7, r1
 8009bfe:	4606      	mov	r6, r0
 8009c00:	f7f6 ffca 	bl	8000b98 <__aeabi_d2iz>
 8009c04:	9002      	str	r0, [sp, #8]
 8009c06:	f7f6 fcad 	bl	8000564 <__aeabi_i2d>
 8009c0a:	4602      	mov	r2, r0
 8009c0c:	460b      	mov	r3, r1
 8009c0e:	4630      	mov	r0, r6
 8009c10:	4639      	mov	r1, r7
 8009c12:	f7f6 fb59 	bl	80002c8 <__aeabi_dsub>
 8009c16:	f1bb 0f00 	cmp.w	fp, #0
 8009c1a:	4606      	mov	r6, r0
 8009c1c:	460f      	mov	r7, r1
 8009c1e:	dd6c      	ble.n	8009cfa <__kernel_rem_pio2+0x252>
 8009c20:	f108 31ff 	add.w	r1, r8, #4294967295
 8009c24:	ab0c      	add	r3, sp, #48	@ 0x30
 8009c26:	9d02      	ldr	r5, [sp, #8]
 8009c28:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 8009c2c:	f1cb 0018 	rsb	r0, fp, #24
 8009c30:	fa43 f200 	asr.w	r2, r3, r0
 8009c34:	4415      	add	r5, r2
 8009c36:	4082      	lsls	r2, r0
 8009c38:	1a9b      	subs	r3, r3, r2
 8009c3a:	aa0c      	add	r2, sp, #48	@ 0x30
 8009c3c:	9502      	str	r5, [sp, #8]
 8009c3e:	f842 3021 	str.w	r3, [r2, r1, lsl #2]
 8009c42:	f1cb 0217 	rsb	r2, fp, #23
 8009c46:	fa43 f902 	asr.w	r9, r3, r2
 8009c4a:	f1b9 0f00 	cmp.w	r9, #0
 8009c4e:	dd64      	ble.n	8009d1a <__kernel_rem_pio2+0x272>
 8009c50:	9b02      	ldr	r3, [sp, #8]
 8009c52:	2200      	movs	r2, #0
 8009c54:	3301      	adds	r3, #1
 8009c56:	9302      	str	r3, [sp, #8]
 8009c58:	4615      	mov	r5, r2
 8009c5a:	f06f 417f 	mvn.w	r1, #4278190080	@ 0xff000000
 8009c5e:	4590      	cmp	r8, r2
 8009c60:	f300 80b8 	bgt.w	8009dd4 <__kernel_rem_pio2+0x32c>
 8009c64:	f1bb 0f00 	cmp.w	fp, #0
 8009c68:	dd07      	ble.n	8009c7a <__kernel_rem_pio2+0x1d2>
 8009c6a:	f1bb 0f01 	cmp.w	fp, #1
 8009c6e:	f000 80bf 	beq.w	8009df0 <__kernel_rem_pio2+0x348>
 8009c72:	f1bb 0f02 	cmp.w	fp, #2
 8009c76:	f000 80c6 	beq.w	8009e06 <__kernel_rem_pio2+0x35e>
 8009c7a:	f1b9 0f02 	cmp.w	r9, #2
 8009c7e:	d14c      	bne.n	8009d1a <__kernel_rem_pio2+0x272>
 8009c80:	4632      	mov	r2, r6
 8009c82:	463b      	mov	r3, r7
 8009c84:	494e      	ldr	r1, [pc, #312]	@ (8009dc0 <__kernel_rem_pio2+0x318>)
 8009c86:	2000      	movs	r0, #0
 8009c88:	f7f6 fb1e 	bl	80002c8 <__aeabi_dsub>
 8009c8c:	4606      	mov	r6, r0
 8009c8e:	460f      	mov	r7, r1
 8009c90:	2d00      	cmp	r5, #0
 8009c92:	d042      	beq.n	8009d1a <__kernel_rem_pio2+0x272>
 8009c94:	4658      	mov	r0, fp
 8009c96:	ed9f 0b46 	vldr	d0, [pc, #280]	@ 8009db0 <__kernel_rem_pio2+0x308>
 8009c9a:	f000 fa5d 	bl	800a158 <scalbn>
 8009c9e:	4630      	mov	r0, r6
 8009ca0:	4639      	mov	r1, r7
 8009ca2:	ec53 2b10 	vmov	r2, r3, d0
 8009ca6:	f7f6 fb0f 	bl	80002c8 <__aeabi_dsub>
 8009caa:	4606      	mov	r6, r0
 8009cac:	460f      	mov	r7, r1
 8009cae:	e034      	b.n	8009d1a <__kernel_rem_pio2+0x272>
 8009cb0:	4b44      	ldr	r3, [pc, #272]	@ (8009dc4 <__kernel_rem_pio2+0x31c>)
 8009cb2:	2200      	movs	r2, #0
 8009cb4:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8009cb8:	f7f6 fcbe 	bl	8000638 <__aeabi_dmul>
 8009cbc:	f7f6 ff6c 	bl	8000b98 <__aeabi_d2iz>
 8009cc0:	f7f6 fc50 	bl	8000564 <__aeabi_i2d>
 8009cc4:	4b40      	ldr	r3, [pc, #256]	@ (8009dc8 <__kernel_rem_pio2+0x320>)
 8009cc6:	2200      	movs	r2, #0
 8009cc8:	4606      	mov	r6, r0
 8009cca:	460f      	mov	r7, r1
 8009ccc:	f7f6 fcb4 	bl	8000638 <__aeabi_dmul>
 8009cd0:	4602      	mov	r2, r0
 8009cd2:	460b      	mov	r3, r1
 8009cd4:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8009cd8:	f7f6 faf6 	bl	80002c8 <__aeabi_dsub>
 8009cdc:	f7f6 ff5c 	bl	8000b98 <__aeabi_d2iz>
 8009ce0:	e9d5 2300 	ldrd	r2, r3, [r5]
 8009ce4:	f849 0b04 	str.w	r0, [r9], #4
 8009ce8:	4639      	mov	r1, r7
 8009cea:	4630      	mov	r0, r6
 8009cec:	f7f6 faee 	bl	80002cc <__adddf3>
 8009cf0:	f10a 3aff 	add.w	sl, sl, #4294967295
 8009cf4:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8009cf8:	e75d      	b.n	8009bb6 <__kernel_rem_pio2+0x10e>
 8009cfa:	d107      	bne.n	8009d0c <__kernel_rem_pio2+0x264>
 8009cfc:	f108 33ff 	add.w	r3, r8, #4294967295
 8009d00:	aa0c      	add	r2, sp, #48	@ 0x30
 8009d02:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8009d06:	ea4f 59e3 	mov.w	r9, r3, asr #23
 8009d0a:	e79e      	b.n	8009c4a <__kernel_rem_pio2+0x1a2>
 8009d0c:	4b2f      	ldr	r3, [pc, #188]	@ (8009dcc <__kernel_rem_pio2+0x324>)
 8009d0e:	2200      	movs	r2, #0
 8009d10:	f7f6 ff18 	bl	8000b44 <__aeabi_dcmpge>
 8009d14:	2800      	cmp	r0, #0
 8009d16:	d143      	bne.n	8009da0 <__kernel_rem_pio2+0x2f8>
 8009d18:	4681      	mov	r9, r0
 8009d1a:	2200      	movs	r2, #0
 8009d1c:	2300      	movs	r3, #0
 8009d1e:	4630      	mov	r0, r6
 8009d20:	4639      	mov	r1, r7
 8009d22:	f7f6 fef1 	bl	8000b08 <__aeabi_dcmpeq>
 8009d26:	2800      	cmp	r0, #0
 8009d28:	f000 80bf 	beq.w	8009eaa <__kernel_rem_pio2+0x402>
 8009d2c:	f108 33ff 	add.w	r3, r8, #4294967295
 8009d30:	2200      	movs	r2, #0
 8009d32:	9900      	ldr	r1, [sp, #0]
 8009d34:	428b      	cmp	r3, r1
 8009d36:	da6e      	bge.n	8009e16 <__kernel_rem_pio2+0x36e>
 8009d38:	2a00      	cmp	r2, #0
 8009d3a:	f000 8089 	beq.w	8009e50 <__kernel_rem_pio2+0x3a8>
 8009d3e:	f108 38ff 	add.w	r8, r8, #4294967295
 8009d42:	ab0c      	add	r3, sp, #48	@ 0x30
 8009d44:	f1ab 0b18 	sub.w	fp, fp, #24
 8009d48:	f853 3028 	ldr.w	r3, [r3, r8, lsl #2]
 8009d4c:	2b00      	cmp	r3, #0
 8009d4e:	d0f6      	beq.n	8009d3e <__kernel_rem_pio2+0x296>
 8009d50:	4658      	mov	r0, fp
 8009d52:	ed9f 0b17 	vldr	d0, [pc, #92]	@ 8009db0 <__kernel_rem_pio2+0x308>
 8009d56:	f000 f9ff 	bl	800a158 <scalbn>
 8009d5a:	f108 0301 	add.w	r3, r8, #1
 8009d5e:	00da      	lsls	r2, r3, #3
 8009d60:	9205      	str	r2, [sp, #20]
 8009d62:	ec55 4b10 	vmov	r4, r5, d0
 8009d66:	aa70      	add	r2, sp, #448	@ 0x1c0
 8009d68:	f8df b058 	ldr.w	fp, [pc, #88]	@ 8009dc4 <__kernel_rem_pio2+0x31c>
 8009d6c:	eb02 07c3 	add.w	r7, r2, r3, lsl #3
 8009d70:	4646      	mov	r6, r8
 8009d72:	f04f 0a00 	mov.w	sl, #0
 8009d76:	2e00      	cmp	r6, #0
 8009d78:	f280 80cf 	bge.w	8009f1a <__kernel_rem_pio2+0x472>
 8009d7c:	4644      	mov	r4, r8
 8009d7e:	2c00      	cmp	r4, #0
 8009d80:	f2c0 80fd 	blt.w	8009f7e <__kernel_rem_pio2+0x4d6>
 8009d84:	4b12      	ldr	r3, [pc, #72]	@ (8009dd0 <__kernel_rem_pio2+0x328>)
 8009d86:	461f      	mov	r7, r3
 8009d88:	ab70      	add	r3, sp, #448	@ 0x1c0
 8009d8a:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 8009d8e:	9306      	str	r3, [sp, #24]
 8009d90:	f04f 0a00 	mov.w	sl, #0
 8009d94:	f04f 0b00 	mov.w	fp, #0
 8009d98:	2600      	movs	r6, #0
 8009d9a:	eba8 0504 	sub.w	r5, r8, r4
 8009d9e:	e0e2      	b.n	8009f66 <__kernel_rem_pio2+0x4be>
 8009da0:	f04f 0902 	mov.w	r9, #2
 8009da4:	e754      	b.n	8009c50 <__kernel_rem_pio2+0x1a8>
 8009da6:	bf00      	nop
	...
 8009db4:	3ff00000 	.word	0x3ff00000
 8009db8:	0800a980 	.word	0x0800a980
 8009dbc:	40200000 	.word	0x40200000
 8009dc0:	3ff00000 	.word	0x3ff00000
 8009dc4:	3e700000 	.word	0x3e700000
 8009dc8:	41700000 	.word	0x41700000
 8009dcc:	3fe00000 	.word	0x3fe00000
 8009dd0:	0800a940 	.word	0x0800a940
 8009dd4:	f854 3b04 	ldr.w	r3, [r4], #4
 8009dd8:	b945      	cbnz	r5, 8009dec <__kernel_rem_pio2+0x344>
 8009dda:	b123      	cbz	r3, 8009de6 <__kernel_rem_pio2+0x33e>
 8009ddc:	f1c3 7380 	rsb	r3, r3, #16777216	@ 0x1000000
 8009de0:	f844 3c04 	str.w	r3, [r4, #-4]
 8009de4:	2301      	movs	r3, #1
 8009de6:	3201      	adds	r2, #1
 8009de8:	461d      	mov	r5, r3
 8009dea:	e738      	b.n	8009c5e <__kernel_rem_pio2+0x1b6>
 8009dec:	1acb      	subs	r3, r1, r3
 8009dee:	e7f7      	b.n	8009de0 <__kernel_rem_pio2+0x338>
 8009df0:	f108 32ff 	add.w	r2, r8, #4294967295
 8009df4:	ab0c      	add	r3, sp, #48	@ 0x30
 8009df6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8009dfa:	f3c3 0316 	ubfx	r3, r3, #0, #23
 8009dfe:	a90c      	add	r1, sp, #48	@ 0x30
 8009e00:	f841 3022 	str.w	r3, [r1, r2, lsl #2]
 8009e04:	e739      	b.n	8009c7a <__kernel_rem_pio2+0x1d2>
 8009e06:	f108 32ff 	add.w	r2, r8, #4294967295
 8009e0a:	ab0c      	add	r3, sp, #48	@ 0x30
 8009e0c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8009e10:	f3c3 0315 	ubfx	r3, r3, #0, #22
 8009e14:	e7f3      	b.n	8009dfe <__kernel_rem_pio2+0x356>
 8009e16:	a90c      	add	r1, sp, #48	@ 0x30
 8009e18:	f851 1023 	ldr.w	r1, [r1, r3, lsl #2]
 8009e1c:	3b01      	subs	r3, #1
 8009e1e:	430a      	orrs	r2, r1
 8009e20:	e787      	b.n	8009d32 <__kernel_rem_pio2+0x28a>
 8009e22:	3401      	adds	r4, #1
 8009e24:	f853 2d04 	ldr.w	r2, [r3, #-4]!
 8009e28:	2a00      	cmp	r2, #0
 8009e2a:	d0fa      	beq.n	8009e22 <__kernel_rem_pio2+0x37a>
 8009e2c:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8009e2e:	f503 7318 	add.w	r3, r3, #608	@ 0x260
 8009e32:	eb0d 0503 	add.w	r5, sp, r3
 8009e36:	9b06      	ldr	r3, [sp, #24]
 8009e38:	aa20      	add	r2, sp, #128	@ 0x80
 8009e3a:	4443      	add	r3, r8
 8009e3c:	f108 0701 	add.w	r7, r8, #1
 8009e40:	3d98      	subs	r5, #152	@ 0x98
 8009e42:	eb02 06c3 	add.w	r6, r2, r3, lsl #3
 8009e46:	4444      	add	r4, r8
 8009e48:	42bc      	cmp	r4, r7
 8009e4a:	da04      	bge.n	8009e56 <__kernel_rem_pio2+0x3ae>
 8009e4c:	46a0      	mov	r8, r4
 8009e4e:	e6a2      	b.n	8009b96 <__kernel_rem_pio2+0xee>
 8009e50:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8009e52:	2401      	movs	r4, #1
 8009e54:	e7e6      	b.n	8009e24 <__kernel_rem_pio2+0x37c>
 8009e56:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8009e58:	f853 0027 	ldr.w	r0, [r3, r7, lsl #2]
 8009e5c:	f7f6 fb82 	bl	8000564 <__aeabi_i2d>
 8009e60:	ed9f 7bb1 	vldr	d7, [pc, #708]	@ 800a128 <__kernel_rem_pio2+0x680>
 8009e64:	e8e6 0102 	strd	r0, r1, [r6], #8
 8009e68:	ed8d 7b02 	vstr	d7, [sp, #8]
 8009e6c:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8009e70:	46b2      	mov	sl, r6
 8009e72:	f04f 0800 	mov.w	r8, #0
 8009e76:	9b05      	ldr	r3, [sp, #20]
 8009e78:	4598      	cmp	r8, r3
 8009e7a:	dd05      	ble.n	8009e88 <__kernel_rem_pio2+0x3e0>
 8009e7c:	ed9d 7b02 	vldr	d7, [sp, #8]
 8009e80:	3701      	adds	r7, #1
 8009e82:	eca5 7b02 	vstmia	r5!, {d7}
 8009e86:	e7df      	b.n	8009e48 <__kernel_rem_pio2+0x3a0>
 8009e88:	e97a 2302 	ldrd	r2, r3, [sl, #-8]!
 8009e8c:	e8f9 0102 	ldrd	r0, r1, [r9], #8
 8009e90:	f7f6 fbd2 	bl	8000638 <__aeabi_dmul>
 8009e94:	4602      	mov	r2, r0
 8009e96:	460b      	mov	r3, r1
 8009e98:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8009e9c:	f7f6 fa16 	bl	80002cc <__adddf3>
 8009ea0:	f108 0801 	add.w	r8, r8, #1
 8009ea4:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8009ea8:	e7e5      	b.n	8009e76 <__kernel_rem_pio2+0x3ce>
 8009eaa:	f1cb 0000 	rsb	r0, fp, #0
 8009eae:	ec47 6b10 	vmov	d0, r6, r7
 8009eb2:	f000 f951 	bl	800a158 <scalbn>
 8009eb6:	ec55 4b10 	vmov	r4, r5, d0
 8009eba:	4b9d      	ldr	r3, [pc, #628]	@ (800a130 <__kernel_rem_pio2+0x688>)
 8009ebc:	2200      	movs	r2, #0
 8009ebe:	4620      	mov	r0, r4
 8009ec0:	4629      	mov	r1, r5
 8009ec2:	f7f6 fe3f 	bl	8000b44 <__aeabi_dcmpge>
 8009ec6:	b300      	cbz	r0, 8009f0a <__kernel_rem_pio2+0x462>
 8009ec8:	4b9a      	ldr	r3, [pc, #616]	@ (800a134 <__kernel_rem_pio2+0x68c>)
 8009eca:	2200      	movs	r2, #0
 8009ecc:	4620      	mov	r0, r4
 8009ece:	4629      	mov	r1, r5
 8009ed0:	f7f6 fbb2 	bl	8000638 <__aeabi_dmul>
 8009ed4:	f7f6 fe60 	bl	8000b98 <__aeabi_d2iz>
 8009ed8:	4606      	mov	r6, r0
 8009eda:	f7f6 fb43 	bl	8000564 <__aeabi_i2d>
 8009ede:	4b94      	ldr	r3, [pc, #592]	@ (800a130 <__kernel_rem_pio2+0x688>)
 8009ee0:	2200      	movs	r2, #0
 8009ee2:	f7f6 fba9 	bl	8000638 <__aeabi_dmul>
 8009ee6:	460b      	mov	r3, r1
 8009ee8:	4602      	mov	r2, r0
 8009eea:	4629      	mov	r1, r5
 8009eec:	4620      	mov	r0, r4
 8009eee:	f7f6 f9eb 	bl	80002c8 <__aeabi_dsub>
 8009ef2:	f7f6 fe51 	bl	8000b98 <__aeabi_d2iz>
 8009ef6:	ab0c      	add	r3, sp, #48	@ 0x30
 8009ef8:	f10b 0b18 	add.w	fp, fp, #24
 8009efc:	f843 0028 	str.w	r0, [r3, r8, lsl #2]
 8009f00:	f108 0801 	add.w	r8, r8, #1
 8009f04:	f843 6028 	str.w	r6, [r3, r8, lsl #2]
 8009f08:	e722      	b.n	8009d50 <__kernel_rem_pio2+0x2a8>
 8009f0a:	4620      	mov	r0, r4
 8009f0c:	4629      	mov	r1, r5
 8009f0e:	f7f6 fe43 	bl	8000b98 <__aeabi_d2iz>
 8009f12:	ab0c      	add	r3, sp, #48	@ 0x30
 8009f14:	f843 0028 	str.w	r0, [r3, r8, lsl #2]
 8009f18:	e71a      	b.n	8009d50 <__kernel_rem_pio2+0x2a8>
 8009f1a:	ab0c      	add	r3, sp, #48	@ 0x30
 8009f1c:	f853 0026 	ldr.w	r0, [r3, r6, lsl #2]
 8009f20:	f7f6 fb20 	bl	8000564 <__aeabi_i2d>
 8009f24:	4622      	mov	r2, r4
 8009f26:	462b      	mov	r3, r5
 8009f28:	f7f6 fb86 	bl	8000638 <__aeabi_dmul>
 8009f2c:	4652      	mov	r2, sl
 8009f2e:	e967 0102 	strd	r0, r1, [r7, #-8]!
 8009f32:	465b      	mov	r3, fp
 8009f34:	4620      	mov	r0, r4
 8009f36:	4629      	mov	r1, r5
 8009f38:	f7f6 fb7e 	bl	8000638 <__aeabi_dmul>
 8009f3c:	3e01      	subs	r6, #1
 8009f3e:	4604      	mov	r4, r0
 8009f40:	460d      	mov	r5, r1
 8009f42:	e718      	b.n	8009d76 <__kernel_rem_pio2+0x2ce>
 8009f44:	9906      	ldr	r1, [sp, #24]
 8009f46:	e8f1 2302 	ldrd	r2, r3, [r1], #8
 8009f4a:	9106      	str	r1, [sp, #24]
 8009f4c:	e8f7 0102 	ldrd	r0, r1, [r7], #8
 8009f50:	f7f6 fb72 	bl	8000638 <__aeabi_dmul>
 8009f54:	4602      	mov	r2, r0
 8009f56:	460b      	mov	r3, r1
 8009f58:	4650      	mov	r0, sl
 8009f5a:	4659      	mov	r1, fp
 8009f5c:	f7f6 f9b6 	bl	80002cc <__adddf3>
 8009f60:	3601      	adds	r6, #1
 8009f62:	4682      	mov	sl, r0
 8009f64:	468b      	mov	fp, r1
 8009f66:	9b00      	ldr	r3, [sp, #0]
 8009f68:	429e      	cmp	r6, r3
 8009f6a:	dc01      	bgt.n	8009f70 <__kernel_rem_pio2+0x4c8>
 8009f6c:	42b5      	cmp	r5, r6
 8009f6e:	dae9      	bge.n	8009f44 <__kernel_rem_pio2+0x49c>
 8009f70:	ab48      	add	r3, sp, #288	@ 0x120
 8009f72:	eb03 05c5 	add.w	r5, r3, r5, lsl #3
 8009f76:	e9c5 ab00 	strd	sl, fp, [r5]
 8009f7a:	3c01      	subs	r4, #1
 8009f7c:	e6ff      	b.n	8009d7e <__kernel_rem_pio2+0x2d6>
 8009f7e:	9ba4      	ldr	r3, [sp, #656]	@ 0x290
 8009f80:	2b02      	cmp	r3, #2
 8009f82:	dc0b      	bgt.n	8009f9c <__kernel_rem_pio2+0x4f4>
 8009f84:	2b00      	cmp	r3, #0
 8009f86:	dc39      	bgt.n	8009ffc <__kernel_rem_pio2+0x554>
 8009f88:	d05d      	beq.n	800a046 <__kernel_rem_pio2+0x59e>
 8009f8a:	9b02      	ldr	r3, [sp, #8]
 8009f8c:	f003 0007 	and.w	r0, r3, #7
 8009f90:	f50d 7d19 	add.w	sp, sp, #612	@ 0x264
 8009f94:	ecbd 8b02 	vpop	{d8}
 8009f98:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009f9c:	9ba4      	ldr	r3, [sp, #656]	@ 0x290
 8009f9e:	2b03      	cmp	r3, #3
 8009fa0:	d1f3      	bne.n	8009f8a <__kernel_rem_pio2+0x4e2>
 8009fa2:	9b05      	ldr	r3, [sp, #20]
 8009fa4:	f503 7318 	add.w	r3, r3, #608	@ 0x260
 8009fa8:	eb0d 0403 	add.w	r4, sp, r3
 8009fac:	f5a4 74a4 	sub.w	r4, r4, #328	@ 0x148
 8009fb0:	4625      	mov	r5, r4
 8009fb2:	46c2      	mov	sl, r8
 8009fb4:	f1ba 0f00 	cmp.w	sl, #0
 8009fb8:	f1a5 0508 	sub.w	r5, r5, #8
 8009fbc:	dc6b      	bgt.n	800a096 <__kernel_rem_pio2+0x5ee>
 8009fbe:	4645      	mov	r5, r8
 8009fc0:	2d01      	cmp	r5, #1
 8009fc2:	f1a4 0408 	sub.w	r4, r4, #8
 8009fc6:	f300 8087 	bgt.w	800a0d8 <__kernel_rem_pio2+0x630>
 8009fca:	9c05      	ldr	r4, [sp, #20]
 8009fcc:	ab48      	add	r3, sp, #288	@ 0x120
 8009fce:	441c      	add	r4, r3
 8009fd0:	2000      	movs	r0, #0
 8009fd2:	2100      	movs	r1, #0
 8009fd4:	f1b8 0f01 	cmp.w	r8, #1
 8009fd8:	f300 809c 	bgt.w	800a114 <__kernel_rem_pio2+0x66c>
 8009fdc:	e9dd 7848 	ldrd	r7, r8, [sp, #288]	@ 0x120
 8009fe0:	e9dd 564a 	ldrd	r5, r6, [sp, #296]	@ 0x128
 8009fe4:	f1b9 0f00 	cmp.w	r9, #0
 8009fe8:	f040 80a6 	bne.w	800a138 <__kernel_rem_pio2+0x690>
 8009fec:	9b04      	ldr	r3, [sp, #16]
 8009fee:	e9c3 7800 	strd	r7, r8, [r3]
 8009ff2:	e9c3 5602 	strd	r5, r6, [r3, #8]
 8009ff6:	e9c3 0104 	strd	r0, r1, [r3, #16]
 8009ffa:	e7c6      	b.n	8009f8a <__kernel_rem_pio2+0x4e2>
 8009ffc:	9d05      	ldr	r5, [sp, #20]
 8009ffe:	ab48      	add	r3, sp, #288	@ 0x120
 800a000:	441d      	add	r5, r3
 800a002:	4644      	mov	r4, r8
 800a004:	2000      	movs	r0, #0
 800a006:	2100      	movs	r1, #0
 800a008:	2c00      	cmp	r4, #0
 800a00a:	da35      	bge.n	800a078 <__kernel_rem_pio2+0x5d0>
 800a00c:	f1b9 0f00 	cmp.w	r9, #0
 800a010:	d038      	beq.n	800a084 <__kernel_rem_pio2+0x5dc>
 800a012:	4602      	mov	r2, r0
 800a014:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 800a018:	9c04      	ldr	r4, [sp, #16]
 800a01a:	e9c4 2300 	strd	r2, r3, [r4]
 800a01e:	4602      	mov	r2, r0
 800a020:	460b      	mov	r3, r1
 800a022:	e9dd 0148 	ldrd	r0, r1, [sp, #288]	@ 0x120
 800a026:	f7f6 f94f 	bl	80002c8 <__aeabi_dsub>
 800a02a:	ad4a      	add	r5, sp, #296	@ 0x128
 800a02c:	2401      	movs	r4, #1
 800a02e:	45a0      	cmp	r8, r4
 800a030:	da2b      	bge.n	800a08a <__kernel_rem_pio2+0x5e2>
 800a032:	f1b9 0f00 	cmp.w	r9, #0
 800a036:	d002      	beq.n	800a03e <__kernel_rem_pio2+0x596>
 800a038:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 800a03c:	4619      	mov	r1, r3
 800a03e:	9b04      	ldr	r3, [sp, #16]
 800a040:	e9c3 0102 	strd	r0, r1, [r3, #8]
 800a044:	e7a1      	b.n	8009f8a <__kernel_rem_pio2+0x4e2>
 800a046:	9c05      	ldr	r4, [sp, #20]
 800a048:	ab48      	add	r3, sp, #288	@ 0x120
 800a04a:	441c      	add	r4, r3
 800a04c:	2000      	movs	r0, #0
 800a04e:	2100      	movs	r1, #0
 800a050:	f1b8 0f00 	cmp.w	r8, #0
 800a054:	da09      	bge.n	800a06a <__kernel_rem_pio2+0x5c2>
 800a056:	f1b9 0f00 	cmp.w	r9, #0
 800a05a:	d002      	beq.n	800a062 <__kernel_rem_pio2+0x5ba>
 800a05c:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 800a060:	4619      	mov	r1, r3
 800a062:	9b04      	ldr	r3, [sp, #16]
 800a064:	e9c3 0100 	strd	r0, r1, [r3]
 800a068:	e78f      	b.n	8009f8a <__kernel_rem_pio2+0x4e2>
 800a06a:	e974 2302 	ldrd	r2, r3, [r4, #-8]!
 800a06e:	f7f6 f92d 	bl	80002cc <__adddf3>
 800a072:	f108 38ff 	add.w	r8, r8, #4294967295
 800a076:	e7eb      	b.n	800a050 <__kernel_rem_pio2+0x5a8>
 800a078:	e975 2302 	ldrd	r2, r3, [r5, #-8]!
 800a07c:	f7f6 f926 	bl	80002cc <__adddf3>
 800a080:	3c01      	subs	r4, #1
 800a082:	e7c1      	b.n	800a008 <__kernel_rem_pio2+0x560>
 800a084:	4602      	mov	r2, r0
 800a086:	460b      	mov	r3, r1
 800a088:	e7c6      	b.n	800a018 <__kernel_rem_pio2+0x570>
 800a08a:	e8f5 2302 	ldrd	r2, r3, [r5], #8
 800a08e:	f7f6 f91d 	bl	80002cc <__adddf3>
 800a092:	3401      	adds	r4, #1
 800a094:	e7cb      	b.n	800a02e <__kernel_rem_pio2+0x586>
 800a096:	ed95 7b00 	vldr	d7, [r5]
 800a09a:	ed8d 7b00 	vstr	d7, [sp]
 800a09e:	ed95 7b02 	vldr	d7, [r5, #8]
 800a0a2:	e9dd 0100 	ldrd	r0, r1, [sp]
 800a0a6:	ec53 2b17 	vmov	r2, r3, d7
 800a0aa:	ed8d 7b06 	vstr	d7, [sp, #24]
 800a0ae:	f7f6 f90d 	bl	80002cc <__adddf3>
 800a0b2:	4602      	mov	r2, r0
 800a0b4:	460b      	mov	r3, r1
 800a0b6:	4606      	mov	r6, r0
 800a0b8:	460f      	mov	r7, r1
 800a0ba:	e9dd 0100 	ldrd	r0, r1, [sp]
 800a0be:	f7f6 f903 	bl	80002c8 <__aeabi_dsub>
 800a0c2:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 800a0c6:	f7f6 f901 	bl	80002cc <__adddf3>
 800a0ca:	f10a 3aff 	add.w	sl, sl, #4294967295
 800a0ce:	e9c5 0102 	strd	r0, r1, [r5, #8]
 800a0d2:	e9c5 6700 	strd	r6, r7, [r5]
 800a0d6:	e76d      	b.n	8009fb4 <__kernel_rem_pio2+0x50c>
 800a0d8:	ed94 7b00 	vldr	d7, [r4]
 800a0dc:	e9d4 ab02 	ldrd	sl, fp, [r4, #8]
 800a0e0:	ec51 0b17 	vmov	r0, r1, d7
 800a0e4:	4652      	mov	r2, sl
 800a0e6:	465b      	mov	r3, fp
 800a0e8:	ed8d 7b00 	vstr	d7, [sp]
 800a0ec:	f7f6 f8ee 	bl	80002cc <__adddf3>
 800a0f0:	4602      	mov	r2, r0
 800a0f2:	460b      	mov	r3, r1
 800a0f4:	4606      	mov	r6, r0
 800a0f6:	460f      	mov	r7, r1
 800a0f8:	e9dd 0100 	ldrd	r0, r1, [sp]
 800a0fc:	f7f6 f8e4 	bl	80002c8 <__aeabi_dsub>
 800a100:	4652      	mov	r2, sl
 800a102:	465b      	mov	r3, fp
 800a104:	f7f6 f8e2 	bl	80002cc <__adddf3>
 800a108:	3d01      	subs	r5, #1
 800a10a:	e9c4 0102 	strd	r0, r1, [r4, #8]
 800a10e:	e9c4 6700 	strd	r6, r7, [r4]
 800a112:	e755      	b.n	8009fc0 <__kernel_rem_pio2+0x518>
 800a114:	e974 2302 	ldrd	r2, r3, [r4, #-8]!
 800a118:	f7f6 f8d8 	bl	80002cc <__adddf3>
 800a11c:	f108 38ff 	add.w	r8, r8, #4294967295
 800a120:	e758      	b.n	8009fd4 <__kernel_rem_pio2+0x52c>
 800a122:	bf00      	nop
 800a124:	f3af 8000 	nop.w
	...
 800a130:	41700000 	.word	0x41700000
 800a134:	3e700000 	.word	0x3e700000
 800a138:	9b04      	ldr	r3, [sp, #16]
 800a13a:	9a04      	ldr	r2, [sp, #16]
 800a13c:	601f      	str	r7, [r3, #0]
 800a13e:	f108 4400 	add.w	r4, r8, #2147483648	@ 0x80000000
 800a142:	605c      	str	r4, [r3, #4]
 800a144:	609d      	str	r5, [r3, #8]
 800a146:	f106 4300 	add.w	r3, r6, #2147483648	@ 0x80000000
 800a14a:	60d3      	str	r3, [r2, #12]
 800a14c:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 800a150:	6110      	str	r0, [r2, #16]
 800a152:	6153      	str	r3, [r2, #20]
 800a154:	e719      	b.n	8009f8a <__kernel_rem_pio2+0x4e2>
 800a156:	bf00      	nop

0800a158 <scalbn>:
 800a158:	b570      	push	{r4, r5, r6, lr}
 800a15a:	ec55 4b10 	vmov	r4, r5, d0
 800a15e:	f3c5 510a 	ubfx	r1, r5, #20, #11
 800a162:	4606      	mov	r6, r0
 800a164:	462b      	mov	r3, r5
 800a166:	b991      	cbnz	r1, 800a18e <scalbn+0x36>
 800a168:	f025 4300 	bic.w	r3, r5, #2147483648	@ 0x80000000
 800a16c:	4323      	orrs	r3, r4
 800a16e:	d03d      	beq.n	800a1ec <scalbn+0x94>
 800a170:	4b35      	ldr	r3, [pc, #212]	@ (800a248 <scalbn+0xf0>)
 800a172:	4620      	mov	r0, r4
 800a174:	4629      	mov	r1, r5
 800a176:	2200      	movs	r2, #0
 800a178:	f7f6 fa5e 	bl	8000638 <__aeabi_dmul>
 800a17c:	4b33      	ldr	r3, [pc, #204]	@ (800a24c <scalbn+0xf4>)
 800a17e:	429e      	cmp	r6, r3
 800a180:	4604      	mov	r4, r0
 800a182:	460d      	mov	r5, r1
 800a184:	da0f      	bge.n	800a1a6 <scalbn+0x4e>
 800a186:	a328      	add	r3, pc, #160	@ (adr r3, 800a228 <scalbn+0xd0>)
 800a188:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a18c:	e01e      	b.n	800a1cc <scalbn+0x74>
 800a18e:	f240 72ff 	movw	r2, #2047	@ 0x7ff
 800a192:	4291      	cmp	r1, r2
 800a194:	d10b      	bne.n	800a1ae <scalbn+0x56>
 800a196:	4622      	mov	r2, r4
 800a198:	4620      	mov	r0, r4
 800a19a:	4629      	mov	r1, r5
 800a19c:	f7f6 f896 	bl	80002cc <__adddf3>
 800a1a0:	4604      	mov	r4, r0
 800a1a2:	460d      	mov	r5, r1
 800a1a4:	e022      	b.n	800a1ec <scalbn+0x94>
 800a1a6:	460b      	mov	r3, r1
 800a1a8:	f3c1 510a 	ubfx	r1, r1, #20, #11
 800a1ac:	3936      	subs	r1, #54	@ 0x36
 800a1ae:	f24c 3250 	movw	r2, #50000	@ 0xc350
 800a1b2:	4296      	cmp	r6, r2
 800a1b4:	dd0d      	ble.n	800a1d2 <scalbn+0x7a>
 800a1b6:	2d00      	cmp	r5, #0
 800a1b8:	a11d      	add	r1, pc, #116	@ (adr r1, 800a230 <scalbn+0xd8>)
 800a1ba:	e9d1 0100 	ldrd	r0, r1, [r1]
 800a1be:	da02      	bge.n	800a1c6 <scalbn+0x6e>
 800a1c0:	a11d      	add	r1, pc, #116	@ (adr r1, 800a238 <scalbn+0xe0>)
 800a1c2:	e9d1 0100 	ldrd	r0, r1, [r1]
 800a1c6:	a31a      	add	r3, pc, #104	@ (adr r3, 800a230 <scalbn+0xd8>)
 800a1c8:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a1cc:	f7f6 fa34 	bl	8000638 <__aeabi_dmul>
 800a1d0:	e7e6      	b.n	800a1a0 <scalbn+0x48>
 800a1d2:	1872      	adds	r2, r6, r1
 800a1d4:	f240 71fe 	movw	r1, #2046	@ 0x7fe
 800a1d8:	428a      	cmp	r2, r1
 800a1da:	dcec      	bgt.n	800a1b6 <scalbn+0x5e>
 800a1dc:	2a00      	cmp	r2, #0
 800a1de:	dd08      	ble.n	800a1f2 <scalbn+0x9a>
 800a1e0:	f023 43ff 	bic.w	r3, r3, #2139095040	@ 0x7f800000
 800a1e4:	f423 03e0 	bic.w	r3, r3, #7340032	@ 0x700000
 800a1e8:	ea43 5502 	orr.w	r5, r3, r2, lsl #20
 800a1ec:	ec45 4b10 	vmov	d0, r4, r5
 800a1f0:	bd70      	pop	{r4, r5, r6, pc}
 800a1f2:	f112 0f35 	cmn.w	r2, #53	@ 0x35
 800a1f6:	da08      	bge.n	800a20a <scalbn+0xb2>
 800a1f8:	2d00      	cmp	r5, #0
 800a1fa:	a10b      	add	r1, pc, #44	@ (adr r1, 800a228 <scalbn+0xd0>)
 800a1fc:	e9d1 0100 	ldrd	r0, r1, [r1]
 800a200:	dac1      	bge.n	800a186 <scalbn+0x2e>
 800a202:	a10f      	add	r1, pc, #60	@ (adr r1, 800a240 <scalbn+0xe8>)
 800a204:	e9d1 0100 	ldrd	r0, r1, [r1]
 800a208:	e7bd      	b.n	800a186 <scalbn+0x2e>
 800a20a:	f023 43ff 	bic.w	r3, r3, #2139095040	@ 0x7f800000
 800a20e:	3236      	adds	r2, #54	@ 0x36
 800a210:	f423 03e0 	bic.w	r3, r3, #7340032	@ 0x700000
 800a214:	ea43 5502 	orr.w	r5, r3, r2, lsl #20
 800a218:	4620      	mov	r0, r4
 800a21a:	4b0d      	ldr	r3, [pc, #52]	@ (800a250 <scalbn+0xf8>)
 800a21c:	4629      	mov	r1, r5
 800a21e:	2200      	movs	r2, #0
 800a220:	e7d4      	b.n	800a1cc <scalbn+0x74>
 800a222:	bf00      	nop
 800a224:	f3af 8000 	nop.w
 800a228:	c2f8f359 	.word	0xc2f8f359
 800a22c:	01a56e1f 	.word	0x01a56e1f
 800a230:	8800759c 	.word	0x8800759c
 800a234:	7e37e43c 	.word	0x7e37e43c
 800a238:	8800759c 	.word	0x8800759c
 800a23c:	fe37e43c 	.word	0xfe37e43c
 800a240:	c2f8f359 	.word	0xc2f8f359
 800a244:	81a56e1f 	.word	0x81a56e1f
 800a248:	43500000 	.word	0x43500000
 800a24c:	ffff3cb0 	.word	0xffff3cb0
 800a250:	3c900000 	.word	0x3c900000
 800a254:	00000000 	.word	0x00000000

0800a258 <floor>:
 800a258:	ec51 0b10 	vmov	r0, r1, d0
 800a25c:	f3c1 530a 	ubfx	r3, r1, #20, #11
 800a260:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800a264:	f2a3 36ff 	subw	r6, r3, #1023	@ 0x3ff
 800a268:	2e13      	cmp	r6, #19
 800a26a:	460c      	mov	r4, r1
 800a26c:	4605      	mov	r5, r0
 800a26e:	4680      	mov	r8, r0
 800a270:	dc34      	bgt.n	800a2dc <floor+0x84>
 800a272:	2e00      	cmp	r6, #0
 800a274:	da17      	bge.n	800a2a6 <floor+0x4e>
 800a276:	a332      	add	r3, pc, #200	@ (adr r3, 800a340 <floor+0xe8>)
 800a278:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a27c:	f7f6 f826 	bl	80002cc <__adddf3>
 800a280:	2200      	movs	r2, #0
 800a282:	2300      	movs	r3, #0
 800a284:	f7f6 fc68 	bl	8000b58 <__aeabi_dcmpgt>
 800a288:	b150      	cbz	r0, 800a2a0 <floor+0x48>
 800a28a:	2c00      	cmp	r4, #0
 800a28c:	da55      	bge.n	800a33a <floor+0xe2>
 800a28e:	f024 4400 	bic.w	r4, r4, #2147483648	@ 0x80000000
 800a292:	432c      	orrs	r4, r5
 800a294:	2500      	movs	r5, #0
 800a296:	42ac      	cmp	r4, r5
 800a298:	4c2b      	ldr	r4, [pc, #172]	@ (800a348 <floor+0xf0>)
 800a29a:	bf08      	it	eq
 800a29c:	f04f 4400 	moveq.w	r4, #2147483648	@ 0x80000000
 800a2a0:	4621      	mov	r1, r4
 800a2a2:	4628      	mov	r0, r5
 800a2a4:	e023      	b.n	800a2ee <floor+0x96>
 800a2a6:	4f29      	ldr	r7, [pc, #164]	@ (800a34c <floor+0xf4>)
 800a2a8:	4137      	asrs	r7, r6
 800a2aa:	ea01 0307 	and.w	r3, r1, r7
 800a2ae:	4303      	orrs	r3, r0
 800a2b0:	d01d      	beq.n	800a2ee <floor+0x96>
 800a2b2:	a323      	add	r3, pc, #140	@ (adr r3, 800a340 <floor+0xe8>)
 800a2b4:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a2b8:	f7f6 f808 	bl	80002cc <__adddf3>
 800a2bc:	2200      	movs	r2, #0
 800a2be:	2300      	movs	r3, #0
 800a2c0:	f7f6 fc4a 	bl	8000b58 <__aeabi_dcmpgt>
 800a2c4:	2800      	cmp	r0, #0
 800a2c6:	d0eb      	beq.n	800a2a0 <floor+0x48>
 800a2c8:	2c00      	cmp	r4, #0
 800a2ca:	bfbe      	ittt	lt
 800a2cc:	f44f 1380 	movlt.w	r3, #1048576	@ 0x100000
 800a2d0:	4133      	asrlt	r3, r6
 800a2d2:	18e4      	addlt	r4, r4, r3
 800a2d4:	ea24 0407 	bic.w	r4, r4, r7
 800a2d8:	2500      	movs	r5, #0
 800a2da:	e7e1      	b.n	800a2a0 <floor+0x48>
 800a2dc:	2e33      	cmp	r6, #51	@ 0x33
 800a2de:	dd0a      	ble.n	800a2f6 <floor+0x9e>
 800a2e0:	f5b6 6f80 	cmp.w	r6, #1024	@ 0x400
 800a2e4:	d103      	bne.n	800a2ee <floor+0x96>
 800a2e6:	4602      	mov	r2, r0
 800a2e8:	460b      	mov	r3, r1
 800a2ea:	f7f5 ffef 	bl	80002cc <__adddf3>
 800a2ee:	ec41 0b10 	vmov	d0, r0, r1
 800a2f2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800a2f6:	f2a3 4313 	subw	r3, r3, #1043	@ 0x413
 800a2fa:	f04f 37ff 	mov.w	r7, #4294967295
 800a2fe:	40df      	lsrs	r7, r3
 800a300:	4207      	tst	r7, r0
 800a302:	d0f4      	beq.n	800a2ee <floor+0x96>
 800a304:	a30e      	add	r3, pc, #56	@ (adr r3, 800a340 <floor+0xe8>)
 800a306:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a30a:	f7f5 ffdf 	bl	80002cc <__adddf3>
 800a30e:	2200      	movs	r2, #0
 800a310:	2300      	movs	r3, #0
 800a312:	f7f6 fc21 	bl	8000b58 <__aeabi_dcmpgt>
 800a316:	2800      	cmp	r0, #0
 800a318:	d0c2      	beq.n	800a2a0 <floor+0x48>
 800a31a:	2c00      	cmp	r4, #0
 800a31c:	da0a      	bge.n	800a334 <floor+0xdc>
 800a31e:	2e14      	cmp	r6, #20
 800a320:	d101      	bne.n	800a326 <floor+0xce>
 800a322:	3401      	adds	r4, #1
 800a324:	e006      	b.n	800a334 <floor+0xdc>
 800a326:	f1c6 0634 	rsb	r6, r6, #52	@ 0x34
 800a32a:	2301      	movs	r3, #1
 800a32c:	40b3      	lsls	r3, r6
 800a32e:	441d      	add	r5, r3
 800a330:	4545      	cmp	r5, r8
 800a332:	d3f6      	bcc.n	800a322 <floor+0xca>
 800a334:	ea25 0507 	bic.w	r5, r5, r7
 800a338:	e7b2      	b.n	800a2a0 <floor+0x48>
 800a33a:	2500      	movs	r5, #0
 800a33c:	462c      	mov	r4, r5
 800a33e:	e7af      	b.n	800a2a0 <floor+0x48>
 800a340:	8800759c 	.word	0x8800759c
 800a344:	7e37e43c 	.word	0x7e37e43c
 800a348:	bff00000 	.word	0xbff00000
 800a34c:	000fffff 	.word	0x000fffff

0800a350 <_init>:
 800a350:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a352:	bf00      	nop
 800a354:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800a356:	bc08      	pop	{r3}
 800a358:	469e      	mov	lr, r3
 800a35a:	4770      	bx	lr

0800a35c <_fini>:
 800a35c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a35e:	bf00      	nop
 800a360:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800a362:	bc08      	pop	{r3}
 800a364:	469e      	mov	lr, r3
 800a366:	4770      	bx	lr
>>>>>>> 39e4d10438a821cc799a472af87a77c6796a1676
>>>>>>> ef0d341697957f8628c074acbc12bb9a12bbe146
