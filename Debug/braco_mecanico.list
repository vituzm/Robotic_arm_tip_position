
braco_mecanico.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c4  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000a088  080001d0  080001d0  000011d0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000628  0800a258  0800a258  0000b258  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800a880  0800a880  0000c1d4  2**0
                  CONTENTS
  4 .ARM          00000008  0800a880  0800a880  0000b880  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800a888  0800a888  0000c1d4  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800a888  0800a888  0000b888  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  0800a88c  0800a88c  0000b88c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         000001d4  20000000  0800a890  0000c000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000057c  200001d4  0800aa64  0000c1d4  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000750  0800aa64  0000c750  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0000c1d4  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000fb2b  00000000  00000000  0000c204  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000023ea  00000000  00000000  0001bd2f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000ec0  00000000  00000000  0001e120  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000b89  00000000  00000000  0001efe0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  000242d4  00000000  00000000  0001fb69  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00011c36  00000000  00000000  00043e3d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000dfeda  00000000  00000000  00055a73  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  0013594d  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000051ec  00000000  00000000  00135990  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000040  00000000  00000000  0013ab7c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001d0 <__do_global_dtors_aux>:
 80001d0:	b510      	push	{r4, lr}
 80001d2:	4c05      	ldr	r4, [pc, #20]	@ (80001e8 <__do_global_dtors_aux+0x18>)
 80001d4:	7823      	ldrb	r3, [r4, #0]
 80001d6:	b933      	cbnz	r3, 80001e6 <__do_global_dtors_aux+0x16>
 80001d8:	4b04      	ldr	r3, [pc, #16]	@ (80001ec <__do_global_dtors_aux+0x1c>)
 80001da:	b113      	cbz	r3, 80001e2 <__do_global_dtors_aux+0x12>
 80001dc:	4804      	ldr	r0, [pc, #16]	@ (80001f0 <__do_global_dtors_aux+0x20>)
 80001de:	f3af 8000 	nop.w
 80001e2:	2301      	movs	r3, #1
 80001e4:	7023      	strb	r3, [r4, #0]
 80001e6:	bd10      	pop	{r4, pc}
 80001e8:	200001d4 	.word	0x200001d4
 80001ec:	00000000 	.word	0x00000000
 80001f0:	0800a240 	.word	0x0800a240

080001f4 <frame_dummy>:
 80001f4:	b508      	push	{r3, lr}
 80001f6:	4b03      	ldr	r3, [pc, #12]	@ (8000204 <frame_dummy+0x10>)
 80001f8:	b11b      	cbz	r3, 8000202 <frame_dummy+0xe>
 80001fa:	4903      	ldr	r1, [pc, #12]	@ (8000208 <frame_dummy+0x14>)
 80001fc:	4803      	ldr	r0, [pc, #12]	@ (800020c <frame_dummy+0x18>)
 80001fe:	f3af 8000 	nop.w
 8000202:	bd08      	pop	{r3, pc}
 8000204:	00000000 	.word	0x00000000
 8000208:	200001d8 	.word	0x200001d8
 800020c:	0800a240 	.word	0x0800a240

08000210 <memchr>:
 8000210:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 8000214:	2a10      	cmp	r2, #16
 8000216:	db2b      	blt.n	8000270 <memchr+0x60>
 8000218:	f010 0f07 	tst.w	r0, #7
 800021c:	d008      	beq.n	8000230 <memchr+0x20>
 800021e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000222:	3a01      	subs	r2, #1
 8000224:	428b      	cmp	r3, r1
 8000226:	d02d      	beq.n	8000284 <memchr+0x74>
 8000228:	f010 0f07 	tst.w	r0, #7
 800022c:	b342      	cbz	r2, 8000280 <memchr+0x70>
 800022e:	d1f6      	bne.n	800021e <memchr+0xe>
 8000230:	b4f0      	push	{r4, r5, r6, r7}
 8000232:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000236:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800023a:	f022 0407 	bic.w	r4, r2, #7
 800023e:	f07f 0700 	mvns.w	r7, #0
 8000242:	2300      	movs	r3, #0
 8000244:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000248:	3c08      	subs	r4, #8
 800024a:	ea85 0501 	eor.w	r5, r5, r1
 800024e:	ea86 0601 	eor.w	r6, r6, r1
 8000252:	fa85 f547 	uadd8	r5, r5, r7
 8000256:	faa3 f587 	sel	r5, r3, r7
 800025a:	fa86 f647 	uadd8	r6, r6, r7
 800025e:	faa5 f687 	sel	r6, r5, r7
 8000262:	b98e      	cbnz	r6, 8000288 <memchr+0x78>
 8000264:	d1ee      	bne.n	8000244 <memchr+0x34>
 8000266:	bcf0      	pop	{r4, r5, r6, r7}
 8000268:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800026c:	f002 0207 	and.w	r2, r2, #7
 8000270:	b132      	cbz	r2, 8000280 <memchr+0x70>
 8000272:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000276:	3a01      	subs	r2, #1
 8000278:	ea83 0301 	eor.w	r3, r3, r1
 800027c:	b113      	cbz	r3, 8000284 <memchr+0x74>
 800027e:	d1f8      	bne.n	8000272 <memchr+0x62>
 8000280:	2000      	movs	r0, #0
 8000282:	4770      	bx	lr
 8000284:	3801      	subs	r0, #1
 8000286:	4770      	bx	lr
 8000288:	2d00      	cmp	r5, #0
 800028a:	bf06      	itte	eq
 800028c:	4635      	moveq	r5, r6
 800028e:	3803      	subeq	r0, #3
 8000290:	3807      	subne	r0, #7
 8000292:	f015 0f01 	tst.w	r5, #1
 8000296:	d107      	bne.n	80002a8 <memchr+0x98>
 8000298:	3001      	adds	r0, #1
 800029a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800029e:	bf02      	ittt	eq
 80002a0:	3001      	addeq	r0, #1
 80002a2:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 80002a6:	3001      	addeq	r0, #1
 80002a8:	bcf0      	pop	{r4, r5, r6, r7}
 80002aa:	3801      	subs	r0, #1
 80002ac:	4770      	bx	lr
 80002ae:	bf00      	nop

080002b0 <strlen>:
 80002b0:	4603      	mov	r3, r0
 80002b2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80002b6:	2a00      	cmp	r2, #0
 80002b8:	d1fb      	bne.n	80002b2 <strlen+0x2>
 80002ba:	1a18      	subs	r0, r3, r0
 80002bc:	3801      	subs	r0, #1
 80002be:	4770      	bx	lr

080002c0 <__aeabi_drsub>:
 80002c0:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 80002c4:	e002      	b.n	80002cc <__adddf3>
 80002c6:	bf00      	nop

080002c8 <__aeabi_dsub>:
 80002c8:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

080002cc <__adddf3>:
 80002cc:	b530      	push	{r4, r5, lr}
 80002ce:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002d2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002d6:	ea94 0f05 	teq	r4, r5
 80002da:	bf08      	it	eq
 80002dc:	ea90 0f02 	teqeq	r0, r2
 80002e0:	bf1f      	itttt	ne
 80002e2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002e6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002ea:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002ee:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002f2:	f000 80e2 	beq.w	80004ba <__adddf3+0x1ee>
 80002f6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002fa:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002fe:	bfb8      	it	lt
 8000300:	426d      	neglt	r5, r5
 8000302:	dd0c      	ble.n	800031e <__adddf3+0x52>
 8000304:	442c      	add	r4, r5
 8000306:	ea80 0202 	eor.w	r2, r0, r2
 800030a:	ea81 0303 	eor.w	r3, r1, r3
 800030e:	ea82 0000 	eor.w	r0, r2, r0
 8000312:	ea83 0101 	eor.w	r1, r3, r1
 8000316:	ea80 0202 	eor.w	r2, r0, r2
 800031a:	ea81 0303 	eor.w	r3, r1, r3
 800031e:	2d36      	cmp	r5, #54	@ 0x36
 8000320:	bf88      	it	hi
 8000322:	bd30      	pophi	{r4, r5, pc}
 8000324:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000328:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800032c:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 8000330:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000334:	d002      	beq.n	800033c <__adddf3+0x70>
 8000336:	4240      	negs	r0, r0
 8000338:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800033c:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 8000340:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000344:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000348:	d002      	beq.n	8000350 <__adddf3+0x84>
 800034a:	4252      	negs	r2, r2
 800034c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000350:	ea94 0f05 	teq	r4, r5
 8000354:	f000 80a7 	beq.w	80004a6 <__adddf3+0x1da>
 8000358:	f1a4 0401 	sub.w	r4, r4, #1
 800035c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000360:	db0d      	blt.n	800037e <__adddf3+0xb2>
 8000362:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000366:	fa22 f205 	lsr.w	r2, r2, r5
 800036a:	1880      	adds	r0, r0, r2
 800036c:	f141 0100 	adc.w	r1, r1, #0
 8000370:	fa03 f20e 	lsl.w	r2, r3, lr
 8000374:	1880      	adds	r0, r0, r2
 8000376:	fa43 f305 	asr.w	r3, r3, r5
 800037a:	4159      	adcs	r1, r3
 800037c:	e00e      	b.n	800039c <__adddf3+0xd0>
 800037e:	f1a5 0520 	sub.w	r5, r5, #32
 8000382:	f10e 0e20 	add.w	lr, lr, #32
 8000386:	2a01      	cmp	r2, #1
 8000388:	fa03 fc0e 	lsl.w	ip, r3, lr
 800038c:	bf28      	it	cs
 800038e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000392:	fa43 f305 	asr.w	r3, r3, r5
 8000396:	18c0      	adds	r0, r0, r3
 8000398:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800039c:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80003a0:	d507      	bpl.n	80003b2 <__adddf3+0xe6>
 80003a2:	f04f 0e00 	mov.w	lr, #0
 80003a6:	f1dc 0c00 	rsbs	ip, ip, #0
 80003aa:	eb7e 0000 	sbcs.w	r0, lr, r0
 80003ae:	eb6e 0101 	sbc.w	r1, lr, r1
 80003b2:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 80003b6:	d31b      	bcc.n	80003f0 <__adddf3+0x124>
 80003b8:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 80003bc:	d30c      	bcc.n	80003d8 <__adddf3+0x10c>
 80003be:	0849      	lsrs	r1, r1, #1
 80003c0:	ea5f 0030 	movs.w	r0, r0, rrx
 80003c4:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80003c8:	f104 0401 	add.w	r4, r4, #1
 80003cc:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003d0:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 80003d4:	f080 809a 	bcs.w	800050c <__adddf3+0x240>
 80003d8:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 80003dc:	bf08      	it	eq
 80003de:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003e2:	f150 0000 	adcs.w	r0, r0, #0
 80003e6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003ea:	ea41 0105 	orr.w	r1, r1, r5
 80003ee:	bd30      	pop	{r4, r5, pc}
 80003f0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003f4:	4140      	adcs	r0, r0
 80003f6:	eb41 0101 	adc.w	r1, r1, r1
 80003fa:	3c01      	subs	r4, #1
 80003fc:	bf28      	it	cs
 80003fe:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 8000402:	d2e9      	bcs.n	80003d8 <__adddf3+0x10c>
 8000404:	f091 0f00 	teq	r1, #0
 8000408:	bf04      	itt	eq
 800040a:	4601      	moveq	r1, r0
 800040c:	2000      	moveq	r0, #0
 800040e:	fab1 f381 	clz	r3, r1
 8000412:	bf08      	it	eq
 8000414:	3320      	addeq	r3, #32
 8000416:	f1a3 030b 	sub.w	r3, r3, #11
 800041a:	f1b3 0220 	subs.w	r2, r3, #32
 800041e:	da0c      	bge.n	800043a <__adddf3+0x16e>
 8000420:	320c      	adds	r2, #12
 8000422:	dd08      	ble.n	8000436 <__adddf3+0x16a>
 8000424:	f102 0c14 	add.w	ip, r2, #20
 8000428:	f1c2 020c 	rsb	r2, r2, #12
 800042c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000430:	fa21 f102 	lsr.w	r1, r1, r2
 8000434:	e00c      	b.n	8000450 <__adddf3+0x184>
 8000436:	f102 0214 	add.w	r2, r2, #20
 800043a:	bfd8      	it	le
 800043c:	f1c2 0c20 	rsble	ip, r2, #32
 8000440:	fa01 f102 	lsl.w	r1, r1, r2
 8000444:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000448:	bfdc      	itt	le
 800044a:	ea41 010c 	orrle.w	r1, r1, ip
 800044e:	4090      	lslle	r0, r2
 8000450:	1ae4      	subs	r4, r4, r3
 8000452:	bfa2      	ittt	ge
 8000454:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000458:	4329      	orrge	r1, r5
 800045a:	bd30      	popge	{r4, r5, pc}
 800045c:	ea6f 0404 	mvn.w	r4, r4
 8000460:	3c1f      	subs	r4, #31
 8000462:	da1c      	bge.n	800049e <__adddf3+0x1d2>
 8000464:	340c      	adds	r4, #12
 8000466:	dc0e      	bgt.n	8000486 <__adddf3+0x1ba>
 8000468:	f104 0414 	add.w	r4, r4, #20
 800046c:	f1c4 0220 	rsb	r2, r4, #32
 8000470:	fa20 f004 	lsr.w	r0, r0, r4
 8000474:	fa01 f302 	lsl.w	r3, r1, r2
 8000478:	ea40 0003 	orr.w	r0, r0, r3
 800047c:	fa21 f304 	lsr.w	r3, r1, r4
 8000480:	ea45 0103 	orr.w	r1, r5, r3
 8000484:	bd30      	pop	{r4, r5, pc}
 8000486:	f1c4 040c 	rsb	r4, r4, #12
 800048a:	f1c4 0220 	rsb	r2, r4, #32
 800048e:	fa20 f002 	lsr.w	r0, r0, r2
 8000492:	fa01 f304 	lsl.w	r3, r1, r4
 8000496:	ea40 0003 	orr.w	r0, r0, r3
 800049a:	4629      	mov	r1, r5
 800049c:	bd30      	pop	{r4, r5, pc}
 800049e:	fa21 f004 	lsr.w	r0, r1, r4
 80004a2:	4629      	mov	r1, r5
 80004a4:	bd30      	pop	{r4, r5, pc}
 80004a6:	f094 0f00 	teq	r4, #0
 80004aa:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 80004ae:	bf06      	itte	eq
 80004b0:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 80004b4:	3401      	addeq	r4, #1
 80004b6:	3d01      	subne	r5, #1
 80004b8:	e74e      	b.n	8000358 <__adddf3+0x8c>
 80004ba:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004be:	bf18      	it	ne
 80004c0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80004c4:	d029      	beq.n	800051a <__adddf3+0x24e>
 80004c6:	ea94 0f05 	teq	r4, r5
 80004ca:	bf08      	it	eq
 80004cc:	ea90 0f02 	teqeq	r0, r2
 80004d0:	d005      	beq.n	80004de <__adddf3+0x212>
 80004d2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004d6:	bf04      	itt	eq
 80004d8:	4619      	moveq	r1, r3
 80004da:	4610      	moveq	r0, r2
 80004dc:	bd30      	pop	{r4, r5, pc}
 80004de:	ea91 0f03 	teq	r1, r3
 80004e2:	bf1e      	ittt	ne
 80004e4:	2100      	movne	r1, #0
 80004e6:	2000      	movne	r0, #0
 80004e8:	bd30      	popne	{r4, r5, pc}
 80004ea:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004ee:	d105      	bne.n	80004fc <__adddf3+0x230>
 80004f0:	0040      	lsls	r0, r0, #1
 80004f2:	4149      	adcs	r1, r1
 80004f4:	bf28      	it	cs
 80004f6:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 80004fa:	bd30      	pop	{r4, r5, pc}
 80004fc:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 8000500:	bf3c      	itt	cc
 8000502:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 8000506:	bd30      	popcc	{r4, r5, pc}
 8000508:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 800050c:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 8000510:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 8000514:	f04f 0000 	mov.w	r0, #0
 8000518:	bd30      	pop	{r4, r5, pc}
 800051a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800051e:	bf1a      	itte	ne
 8000520:	4619      	movne	r1, r3
 8000522:	4610      	movne	r0, r2
 8000524:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000528:	bf1c      	itt	ne
 800052a:	460b      	movne	r3, r1
 800052c:	4602      	movne	r2, r0
 800052e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000532:	bf06      	itte	eq
 8000534:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000538:	ea91 0f03 	teqeq	r1, r3
 800053c:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 8000540:	bd30      	pop	{r4, r5, pc}
 8000542:	bf00      	nop

08000544 <__aeabi_ui2d>:
 8000544:	f090 0f00 	teq	r0, #0
 8000548:	bf04      	itt	eq
 800054a:	2100      	moveq	r1, #0
 800054c:	4770      	bxeq	lr
 800054e:	b530      	push	{r4, r5, lr}
 8000550:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000554:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000558:	f04f 0500 	mov.w	r5, #0
 800055c:	f04f 0100 	mov.w	r1, #0
 8000560:	e750      	b.n	8000404 <__adddf3+0x138>
 8000562:	bf00      	nop

08000564 <__aeabi_i2d>:
 8000564:	f090 0f00 	teq	r0, #0
 8000568:	bf04      	itt	eq
 800056a:	2100      	moveq	r1, #0
 800056c:	4770      	bxeq	lr
 800056e:	b530      	push	{r4, r5, lr}
 8000570:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000574:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000578:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 800057c:	bf48      	it	mi
 800057e:	4240      	negmi	r0, r0
 8000580:	f04f 0100 	mov.w	r1, #0
 8000584:	e73e      	b.n	8000404 <__adddf3+0x138>
 8000586:	bf00      	nop

08000588 <__aeabi_f2d>:
 8000588:	0042      	lsls	r2, r0, #1
 800058a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800058e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000592:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000596:	bf1f      	itttt	ne
 8000598:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 800059c:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 80005a0:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 80005a4:	4770      	bxne	lr
 80005a6:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 80005aa:	bf08      	it	eq
 80005ac:	4770      	bxeq	lr
 80005ae:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 80005b2:	bf04      	itt	eq
 80005b4:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 80005b8:	4770      	bxeq	lr
 80005ba:	b530      	push	{r4, r5, lr}
 80005bc:	f44f 7460 	mov.w	r4, #896	@ 0x380
 80005c0:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80005c4:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 80005c8:	e71c      	b.n	8000404 <__adddf3+0x138>
 80005ca:	bf00      	nop

080005cc <__aeabi_ul2d>:
 80005cc:	ea50 0201 	orrs.w	r2, r0, r1
 80005d0:	bf08      	it	eq
 80005d2:	4770      	bxeq	lr
 80005d4:	b530      	push	{r4, r5, lr}
 80005d6:	f04f 0500 	mov.w	r5, #0
 80005da:	e00a      	b.n	80005f2 <__aeabi_l2d+0x16>

080005dc <__aeabi_l2d>:
 80005dc:	ea50 0201 	orrs.w	r2, r0, r1
 80005e0:	bf08      	it	eq
 80005e2:	4770      	bxeq	lr
 80005e4:	b530      	push	{r4, r5, lr}
 80005e6:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 80005ea:	d502      	bpl.n	80005f2 <__aeabi_l2d+0x16>
 80005ec:	4240      	negs	r0, r0
 80005ee:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005f2:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80005f6:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80005fa:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005fe:	f43f aed8 	beq.w	80003b2 <__adddf3+0xe6>
 8000602:	f04f 0203 	mov.w	r2, #3
 8000606:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800060a:	bf18      	it	ne
 800060c:	3203      	addne	r2, #3
 800060e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000612:	bf18      	it	ne
 8000614:	3203      	addne	r2, #3
 8000616:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800061a:	f1c2 0320 	rsb	r3, r2, #32
 800061e:	fa00 fc03 	lsl.w	ip, r0, r3
 8000622:	fa20 f002 	lsr.w	r0, r0, r2
 8000626:	fa01 fe03 	lsl.w	lr, r1, r3
 800062a:	ea40 000e 	orr.w	r0, r0, lr
 800062e:	fa21 f102 	lsr.w	r1, r1, r2
 8000632:	4414      	add	r4, r2
 8000634:	e6bd      	b.n	80003b2 <__adddf3+0xe6>
 8000636:	bf00      	nop

08000638 <__aeabi_dmul>:
 8000638:	b570      	push	{r4, r5, r6, lr}
 800063a:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 800063e:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000642:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000646:	bf1d      	ittte	ne
 8000648:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800064c:	ea94 0f0c 	teqne	r4, ip
 8000650:	ea95 0f0c 	teqne	r5, ip
 8000654:	f000 f8de 	bleq	8000814 <__aeabi_dmul+0x1dc>
 8000658:	442c      	add	r4, r5
 800065a:	ea81 0603 	eor.w	r6, r1, r3
 800065e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000662:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000666:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800066a:	bf18      	it	ne
 800066c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000670:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000674:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8000678:	d038      	beq.n	80006ec <__aeabi_dmul+0xb4>
 800067a:	fba0 ce02 	umull	ip, lr, r0, r2
 800067e:	f04f 0500 	mov.w	r5, #0
 8000682:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000686:	f006 4200 	and.w	r2, r6, #2147483648	@ 0x80000000
 800068a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800068e:	f04f 0600 	mov.w	r6, #0
 8000692:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000696:	f09c 0f00 	teq	ip, #0
 800069a:	bf18      	it	ne
 800069c:	f04e 0e01 	orrne.w	lr, lr, #1
 80006a0:	f1a4 04ff 	sub.w	r4, r4, #255	@ 0xff
 80006a4:	f5b6 7f00 	cmp.w	r6, #512	@ 0x200
 80006a8:	f564 7440 	sbc.w	r4, r4, #768	@ 0x300
 80006ac:	d204      	bcs.n	80006b8 <__aeabi_dmul+0x80>
 80006ae:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80006b2:	416d      	adcs	r5, r5
 80006b4:	eb46 0606 	adc.w	r6, r6, r6
 80006b8:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80006bc:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80006c0:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80006c4:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80006c8:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80006cc:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 80006d0:	bf88      	it	hi
 80006d2:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 80006d6:	d81e      	bhi.n	8000716 <__aeabi_dmul+0xde>
 80006d8:	f1be 4f00 	cmp.w	lr, #2147483648	@ 0x80000000
 80006dc:	bf08      	it	eq
 80006de:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006e2:	f150 0000 	adcs.w	r0, r0, #0
 80006e6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006ea:	bd70      	pop	{r4, r5, r6, pc}
 80006ec:	f006 4600 	and.w	r6, r6, #2147483648	@ 0x80000000
 80006f0:	ea46 0101 	orr.w	r1, r6, r1
 80006f4:	ea40 0002 	orr.w	r0, r0, r2
 80006f8:	ea81 0103 	eor.w	r1, r1, r3
 80006fc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000700:	bfc2      	ittt	gt
 8000702:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000706:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800070a:	bd70      	popgt	{r4, r5, r6, pc}
 800070c:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000710:	f04f 0e00 	mov.w	lr, #0
 8000714:	3c01      	subs	r4, #1
 8000716:	f300 80ab 	bgt.w	8000870 <__aeabi_dmul+0x238>
 800071a:	f114 0f36 	cmn.w	r4, #54	@ 0x36
 800071e:	bfde      	ittt	le
 8000720:	2000      	movle	r0, #0
 8000722:	f001 4100 	andle.w	r1, r1, #2147483648	@ 0x80000000
 8000726:	bd70      	pople	{r4, r5, r6, pc}
 8000728:	f1c4 0400 	rsb	r4, r4, #0
 800072c:	3c20      	subs	r4, #32
 800072e:	da35      	bge.n	800079c <__aeabi_dmul+0x164>
 8000730:	340c      	adds	r4, #12
 8000732:	dc1b      	bgt.n	800076c <__aeabi_dmul+0x134>
 8000734:	f104 0414 	add.w	r4, r4, #20
 8000738:	f1c4 0520 	rsb	r5, r4, #32
 800073c:	fa00 f305 	lsl.w	r3, r0, r5
 8000740:	fa20 f004 	lsr.w	r0, r0, r4
 8000744:	fa01 f205 	lsl.w	r2, r1, r5
 8000748:	ea40 0002 	orr.w	r0, r0, r2
 800074c:	f001 4200 	and.w	r2, r1, #2147483648	@ 0x80000000
 8000750:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000754:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000758:	fa21 f604 	lsr.w	r6, r1, r4
 800075c:	eb42 0106 	adc.w	r1, r2, r6
 8000760:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000764:	bf08      	it	eq
 8000766:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800076a:	bd70      	pop	{r4, r5, r6, pc}
 800076c:	f1c4 040c 	rsb	r4, r4, #12
 8000770:	f1c4 0520 	rsb	r5, r4, #32
 8000774:	fa00 f304 	lsl.w	r3, r0, r4
 8000778:	fa20 f005 	lsr.w	r0, r0, r5
 800077c:	fa01 f204 	lsl.w	r2, r1, r4
 8000780:	ea40 0002 	orr.w	r0, r0, r2
 8000784:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000788:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800078c:	f141 0100 	adc.w	r1, r1, #0
 8000790:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000794:	bf08      	it	eq
 8000796:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800079a:	bd70      	pop	{r4, r5, r6, pc}
 800079c:	f1c4 0520 	rsb	r5, r4, #32
 80007a0:	fa00 f205 	lsl.w	r2, r0, r5
 80007a4:	ea4e 0e02 	orr.w	lr, lr, r2
 80007a8:	fa20 f304 	lsr.w	r3, r0, r4
 80007ac:	fa01 f205 	lsl.w	r2, r1, r5
 80007b0:	ea43 0302 	orr.w	r3, r3, r2
 80007b4:	fa21 f004 	lsr.w	r0, r1, r4
 80007b8:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80007bc:	fa21 f204 	lsr.w	r2, r1, r4
 80007c0:	ea20 0002 	bic.w	r0, r0, r2
 80007c4:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80007c8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007cc:	bf08      	it	eq
 80007ce:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007d2:	bd70      	pop	{r4, r5, r6, pc}
 80007d4:	f094 0f00 	teq	r4, #0
 80007d8:	d10f      	bne.n	80007fa <__aeabi_dmul+0x1c2>
 80007da:	f001 4600 	and.w	r6, r1, #2147483648	@ 0x80000000
 80007de:	0040      	lsls	r0, r0, #1
 80007e0:	eb41 0101 	adc.w	r1, r1, r1
 80007e4:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80007e8:	bf08      	it	eq
 80007ea:	3c01      	subeq	r4, #1
 80007ec:	d0f7      	beq.n	80007de <__aeabi_dmul+0x1a6>
 80007ee:	ea41 0106 	orr.w	r1, r1, r6
 80007f2:	f095 0f00 	teq	r5, #0
 80007f6:	bf18      	it	ne
 80007f8:	4770      	bxne	lr
 80007fa:	f003 4600 	and.w	r6, r3, #2147483648	@ 0x80000000
 80007fe:	0052      	lsls	r2, r2, #1
 8000800:	eb43 0303 	adc.w	r3, r3, r3
 8000804:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 8000808:	bf08      	it	eq
 800080a:	3d01      	subeq	r5, #1
 800080c:	d0f7      	beq.n	80007fe <__aeabi_dmul+0x1c6>
 800080e:	ea43 0306 	orr.w	r3, r3, r6
 8000812:	4770      	bx	lr
 8000814:	ea94 0f0c 	teq	r4, ip
 8000818:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800081c:	bf18      	it	ne
 800081e:	ea95 0f0c 	teqne	r5, ip
 8000822:	d00c      	beq.n	800083e <__aeabi_dmul+0x206>
 8000824:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000828:	bf18      	it	ne
 800082a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800082e:	d1d1      	bne.n	80007d4 <__aeabi_dmul+0x19c>
 8000830:	ea81 0103 	eor.w	r1, r1, r3
 8000834:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000838:	f04f 0000 	mov.w	r0, #0
 800083c:	bd70      	pop	{r4, r5, r6, pc}
 800083e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000842:	bf06      	itte	eq
 8000844:	4610      	moveq	r0, r2
 8000846:	4619      	moveq	r1, r3
 8000848:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800084c:	d019      	beq.n	8000882 <__aeabi_dmul+0x24a>
 800084e:	ea94 0f0c 	teq	r4, ip
 8000852:	d102      	bne.n	800085a <__aeabi_dmul+0x222>
 8000854:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000858:	d113      	bne.n	8000882 <__aeabi_dmul+0x24a>
 800085a:	ea95 0f0c 	teq	r5, ip
 800085e:	d105      	bne.n	800086c <__aeabi_dmul+0x234>
 8000860:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000864:	bf1c      	itt	ne
 8000866:	4610      	movne	r0, r2
 8000868:	4619      	movne	r1, r3
 800086a:	d10a      	bne.n	8000882 <__aeabi_dmul+0x24a>
 800086c:	ea81 0103 	eor.w	r1, r1, r3
 8000870:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000874:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000878:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800087c:	f04f 0000 	mov.w	r0, #0
 8000880:	bd70      	pop	{r4, r5, r6, pc}
 8000882:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000886:	f441 0178 	orr.w	r1, r1, #16252928	@ 0xf80000
 800088a:	bd70      	pop	{r4, r5, r6, pc}

0800088c <__aeabi_ddiv>:
 800088c:	b570      	push	{r4, r5, r6, lr}
 800088e:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000892:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000896:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800089a:	bf1d      	ittte	ne
 800089c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80008a0:	ea94 0f0c 	teqne	r4, ip
 80008a4:	ea95 0f0c 	teqne	r5, ip
 80008a8:	f000 f8a7 	bleq	80009fa <__aeabi_ddiv+0x16e>
 80008ac:	eba4 0405 	sub.w	r4, r4, r5
 80008b0:	ea81 0e03 	eor.w	lr, r1, r3
 80008b4:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008b8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80008bc:	f000 8088 	beq.w	80009d0 <__aeabi_ddiv+0x144>
 80008c0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80008c4:	f04f 5580 	mov.w	r5, #268435456	@ 0x10000000
 80008c8:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80008cc:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008d0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008d4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008d8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008dc:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008e0:	f00e 4100 	and.w	r1, lr, #2147483648	@ 0x80000000
 80008e4:	429d      	cmp	r5, r3
 80008e6:	bf08      	it	eq
 80008e8:	4296      	cmpeq	r6, r2
 80008ea:	f144 04fd 	adc.w	r4, r4, #253	@ 0xfd
 80008ee:	f504 7440 	add.w	r4, r4, #768	@ 0x300
 80008f2:	d202      	bcs.n	80008fa <__aeabi_ddiv+0x6e>
 80008f4:	085b      	lsrs	r3, r3, #1
 80008f6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008fa:	1ab6      	subs	r6, r6, r2
 80008fc:	eb65 0503 	sbc.w	r5, r5, r3
 8000900:	085b      	lsrs	r3, r3, #1
 8000902:	ea4f 0232 	mov.w	r2, r2, rrx
 8000906:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 800090a:	f44f 2c00 	mov.w	ip, #524288	@ 0x80000
 800090e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000912:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000916:	bf22      	ittt	cs
 8000918:	1ab6      	subcs	r6, r6, r2
 800091a:	4675      	movcs	r5, lr
 800091c:	ea40 000c 	orrcs.w	r0, r0, ip
 8000920:	085b      	lsrs	r3, r3, #1
 8000922:	ea4f 0232 	mov.w	r2, r2, rrx
 8000926:	ebb6 0e02 	subs.w	lr, r6, r2
 800092a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800092e:	bf22      	ittt	cs
 8000930:	1ab6      	subcs	r6, r6, r2
 8000932:	4675      	movcs	r5, lr
 8000934:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000938:	085b      	lsrs	r3, r3, #1
 800093a:	ea4f 0232 	mov.w	r2, r2, rrx
 800093e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000942:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000946:	bf22      	ittt	cs
 8000948:	1ab6      	subcs	r6, r6, r2
 800094a:	4675      	movcs	r5, lr
 800094c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000950:	085b      	lsrs	r3, r3, #1
 8000952:	ea4f 0232 	mov.w	r2, r2, rrx
 8000956:	ebb6 0e02 	subs.w	lr, r6, r2
 800095a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800095e:	bf22      	ittt	cs
 8000960:	1ab6      	subcs	r6, r6, r2
 8000962:	4675      	movcs	r5, lr
 8000964:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000968:	ea55 0e06 	orrs.w	lr, r5, r6
 800096c:	d018      	beq.n	80009a0 <__aeabi_ddiv+0x114>
 800096e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000972:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000976:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800097a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800097e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000982:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000986:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800098a:	d1c0      	bne.n	800090e <__aeabi_ddiv+0x82>
 800098c:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000990:	d10b      	bne.n	80009aa <__aeabi_ddiv+0x11e>
 8000992:	ea41 0100 	orr.w	r1, r1, r0
 8000996:	f04f 0000 	mov.w	r0, #0
 800099a:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 800099e:	e7b6      	b.n	800090e <__aeabi_ddiv+0x82>
 80009a0:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80009a4:	bf04      	itt	eq
 80009a6:	4301      	orreq	r1, r0
 80009a8:	2000      	moveq	r0, #0
 80009aa:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 80009ae:	bf88      	it	hi
 80009b0:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 80009b4:	f63f aeaf 	bhi.w	8000716 <__aeabi_dmul+0xde>
 80009b8:	ebb5 0c03 	subs.w	ip, r5, r3
 80009bc:	bf04      	itt	eq
 80009be:	ebb6 0c02 	subseq.w	ip, r6, r2
 80009c2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80009c6:	f150 0000 	adcs.w	r0, r0, #0
 80009ca:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80009ce:	bd70      	pop	{r4, r5, r6, pc}
 80009d0:	f00e 4e00 	and.w	lr, lr, #2147483648	@ 0x80000000
 80009d4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009d8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009dc:	bfc2      	ittt	gt
 80009de:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009e2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009e6:	bd70      	popgt	{r4, r5, r6, pc}
 80009e8:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80009ec:	f04f 0e00 	mov.w	lr, #0
 80009f0:	3c01      	subs	r4, #1
 80009f2:	e690      	b.n	8000716 <__aeabi_dmul+0xde>
 80009f4:	ea45 0e06 	orr.w	lr, r5, r6
 80009f8:	e68d      	b.n	8000716 <__aeabi_dmul+0xde>
 80009fa:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009fe:	ea94 0f0c 	teq	r4, ip
 8000a02:	bf08      	it	eq
 8000a04:	ea95 0f0c 	teqeq	r5, ip
 8000a08:	f43f af3b 	beq.w	8000882 <__aeabi_dmul+0x24a>
 8000a0c:	ea94 0f0c 	teq	r4, ip
 8000a10:	d10a      	bne.n	8000a28 <__aeabi_ddiv+0x19c>
 8000a12:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000a16:	f47f af34 	bne.w	8000882 <__aeabi_dmul+0x24a>
 8000a1a:	ea95 0f0c 	teq	r5, ip
 8000a1e:	f47f af25 	bne.w	800086c <__aeabi_dmul+0x234>
 8000a22:	4610      	mov	r0, r2
 8000a24:	4619      	mov	r1, r3
 8000a26:	e72c      	b.n	8000882 <__aeabi_dmul+0x24a>
 8000a28:	ea95 0f0c 	teq	r5, ip
 8000a2c:	d106      	bne.n	8000a3c <__aeabi_ddiv+0x1b0>
 8000a2e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a32:	f43f aefd 	beq.w	8000830 <__aeabi_dmul+0x1f8>
 8000a36:	4610      	mov	r0, r2
 8000a38:	4619      	mov	r1, r3
 8000a3a:	e722      	b.n	8000882 <__aeabi_dmul+0x24a>
 8000a3c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a40:	bf18      	it	ne
 8000a42:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a46:	f47f aec5 	bne.w	80007d4 <__aeabi_dmul+0x19c>
 8000a4a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a4e:	f47f af0d 	bne.w	800086c <__aeabi_dmul+0x234>
 8000a52:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a56:	f47f aeeb 	bne.w	8000830 <__aeabi_dmul+0x1f8>
 8000a5a:	e712      	b.n	8000882 <__aeabi_dmul+0x24a>

08000a5c <__gedf2>:
 8000a5c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a60:	e006      	b.n	8000a70 <__cmpdf2+0x4>
 8000a62:	bf00      	nop

08000a64 <__ledf2>:
 8000a64:	f04f 0c01 	mov.w	ip, #1
 8000a68:	e002      	b.n	8000a70 <__cmpdf2+0x4>
 8000a6a:	bf00      	nop

08000a6c <__cmpdf2>:
 8000a6c:	f04f 0c01 	mov.w	ip, #1
 8000a70:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a74:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a78:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a7c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a80:	bf18      	it	ne
 8000a82:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a86:	d01b      	beq.n	8000ac0 <__cmpdf2+0x54>
 8000a88:	b001      	add	sp, #4
 8000a8a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a8e:	bf0c      	ite	eq
 8000a90:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a94:	ea91 0f03 	teqne	r1, r3
 8000a98:	bf02      	ittt	eq
 8000a9a:	ea90 0f02 	teqeq	r0, r2
 8000a9e:	2000      	moveq	r0, #0
 8000aa0:	4770      	bxeq	lr
 8000aa2:	f110 0f00 	cmn.w	r0, #0
 8000aa6:	ea91 0f03 	teq	r1, r3
 8000aaa:	bf58      	it	pl
 8000aac:	4299      	cmppl	r1, r3
 8000aae:	bf08      	it	eq
 8000ab0:	4290      	cmpeq	r0, r2
 8000ab2:	bf2c      	ite	cs
 8000ab4:	17d8      	asrcs	r0, r3, #31
 8000ab6:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000aba:	f040 0001 	orr.w	r0, r0, #1
 8000abe:	4770      	bx	lr
 8000ac0:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000ac4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ac8:	d102      	bne.n	8000ad0 <__cmpdf2+0x64>
 8000aca:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000ace:	d107      	bne.n	8000ae0 <__cmpdf2+0x74>
 8000ad0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000ad4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ad8:	d1d6      	bne.n	8000a88 <__cmpdf2+0x1c>
 8000ada:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000ade:	d0d3      	beq.n	8000a88 <__cmpdf2+0x1c>
 8000ae0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000ae4:	4770      	bx	lr
 8000ae6:	bf00      	nop

08000ae8 <__aeabi_cdrcmple>:
 8000ae8:	4684      	mov	ip, r0
 8000aea:	4610      	mov	r0, r2
 8000aec:	4662      	mov	r2, ip
 8000aee:	468c      	mov	ip, r1
 8000af0:	4619      	mov	r1, r3
 8000af2:	4663      	mov	r3, ip
 8000af4:	e000      	b.n	8000af8 <__aeabi_cdcmpeq>
 8000af6:	bf00      	nop

08000af8 <__aeabi_cdcmpeq>:
 8000af8:	b501      	push	{r0, lr}
 8000afa:	f7ff ffb7 	bl	8000a6c <__cmpdf2>
 8000afe:	2800      	cmp	r0, #0
 8000b00:	bf48      	it	mi
 8000b02:	f110 0f00 	cmnmi.w	r0, #0
 8000b06:	bd01      	pop	{r0, pc}

08000b08 <__aeabi_dcmpeq>:
 8000b08:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b0c:	f7ff fff4 	bl	8000af8 <__aeabi_cdcmpeq>
 8000b10:	bf0c      	ite	eq
 8000b12:	2001      	moveq	r0, #1
 8000b14:	2000      	movne	r0, #0
 8000b16:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b1a:	bf00      	nop

08000b1c <__aeabi_dcmplt>:
 8000b1c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b20:	f7ff ffea 	bl	8000af8 <__aeabi_cdcmpeq>
 8000b24:	bf34      	ite	cc
 8000b26:	2001      	movcc	r0, #1
 8000b28:	2000      	movcs	r0, #0
 8000b2a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b2e:	bf00      	nop

08000b30 <__aeabi_dcmple>:
 8000b30:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b34:	f7ff ffe0 	bl	8000af8 <__aeabi_cdcmpeq>
 8000b38:	bf94      	ite	ls
 8000b3a:	2001      	movls	r0, #1
 8000b3c:	2000      	movhi	r0, #0
 8000b3e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b42:	bf00      	nop

08000b44 <__aeabi_dcmpge>:
 8000b44:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b48:	f7ff ffce 	bl	8000ae8 <__aeabi_cdrcmple>
 8000b4c:	bf94      	ite	ls
 8000b4e:	2001      	movls	r0, #1
 8000b50:	2000      	movhi	r0, #0
 8000b52:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b56:	bf00      	nop

08000b58 <__aeabi_dcmpgt>:
 8000b58:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b5c:	f7ff ffc4 	bl	8000ae8 <__aeabi_cdrcmple>
 8000b60:	bf34      	ite	cc
 8000b62:	2001      	movcc	r0, #1
 8000b64:	2000      	movcs	r0, #0
 8000b66:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b6a:	bf00      	nop

08000b6c <__aeabi_dcmpun>:
 8000b6c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b70:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b74:	d102      	bne.n	8000b7c <__aeabi_dcmpun+0x10>
 8000b76:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b7a:	d10a      	bne.n	8000b92 <__aeabi_dcmpun+0x26>
 8000b7c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b80:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b84:	d102      	bne.n	8000b8c <__aeabi_dcmpun+0x20>
 8000b86:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b8a:	d102      	bne.n	8000b92 <__aeabi_dcmpun+0x26>
 8000b8c:	f04f 0000 	mov.w	r0, #0
 8000b90:	4770      	bx	lr
 8000b92:	f04f 0001 	mov.w	r0, #1
 8000b96:	4770      	bx	lr

08000b98 <__aeabi_d2iz>:
 8000b98:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b9c:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000ba0:	d215      	bcs.n	8000bce <__aeabi_d2iz+0x36>
 8000ba2:	d511      	bpl.n	8000bc8 <__aeabi_d2iz+0x30>
 8000ba4:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000ba8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000bac:	d912      	bls.n	8000bd4 <__aeabi_d2iz+0x3c>
 8000bae:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000bb2:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000bb6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000bba:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000bbe:	fa23 f002 	lsr.w	r0, r3, r2
 8000bc2:	bf18      	it	ne
 8000bc4:	4240      	negne	r0, r0
 8000bc6:	4770      	bx	lr
 8000bc8:	f04f 0000 	mov.w	r0, #0
 8000bcc:	4770      	bx	lr
 8000bce:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000bd2:	d105      	bne.n	8000be0 <__aeabi_d2iz+0x48>
 8000bd4:	f011 4000 	ands.w	r0, r1, #2147483648	@ 0x80000000
 8000bd8:	bf08      	it	eq
 8000bda:	f06f 4000 	mvneq.w	r0, #2147483648	@ 0x80000000
 8000bde:	4770      	bx	lr
 8000be0:	f04f 0000 	mov.w	r0, #0
 8000be4:	4770      	bx	lr
 8000be6:	bf00      	nop

08000be8 <__aeabi_d2f>:
 8000be8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000bec:	f1b2 43e0 	subs.w	r3, r2, #1879048192	@ 0x70000000
 8000bf0:	bf24      	itt	cs
 8000bf2:	f5b3 1c00 	subscs.w	ip, r3, #2097152	@ 0x200000
 8000bf6:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	@ 0x1fc00000
 8000bfa:	d90d      	bls.n	8000c18 <__aeabi_d2f+0x30>
 8000bfc:	f001 4c00 	and.w	ip, r1, #2147483648	@ 0x80000000
 8000c00:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000c04:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000c08:	f1b2 4f00 	cmp.w	r2, #2147483648	@ 0x80000000
 8000c0c:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000c10:	bf08      	it	eq
 8000c12:	f020 0001 	biceq.w	r0, r0, #1
 8000c16:	4770      	bx	lr
 8000c18:	f011 4f80 	tst.w	r1, #1073741824	@ 0x40000000
 8000c1c:	d121      	bne.n	8000c62 <__aeabi_d2f+0x7a>
 8000c1e:	f113 7238 	adds.w	r2, r3, #48234496	@ 0x2e00000
 8000c22:	bfbc      	itt	lt
 8000c24:	f001 4000 	andlt.w	r0, r1, #2147483648	@ 0x80000000
 8000c28:	4770      	bxlt	lr
 8000c2a:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000c2e:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000c32:	f1c2 0218 	rsb	r2, r2, #24
 8000c36:	f1c2 0c20 	rsb	ip, r2, #32
 8000c3a:	fa10 f30c 	lsls.w	r3, r0, ip
 8000c3e:	fa20 f002 	lsr.w	r0, r0, r2
 8000c42:	bf18      	it	ne
 8000c44:	f040 0001 	orrne.w	r0, r0, #1
 8000c48:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c4c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000c50:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000c54:	ea40 000c 	orr.w	r0, r0, ip
 8000c58:	fa23 f302 	lsr.w	r3, r3, r2
 8000c5c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000c60:	e7cc      	b.n	8000bfc <__aeabi_d2f+0x14>
 8000c62:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000c66:	d107      	bne.n	8000c78 <__aeabi_d2f+0x90>
 8000c68:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000c6c:	bf1e      	ittt	ne
 8000c6e:	f04f 40fe 	movne.w	r0, #2130706432	@ 0x7f000000
 8000c72:	f440 0040 	orrne.w	r0, r0, #12582912	@ 0xc00000
 8000c76:	4770      	bxne	lr
 8000c78:	f001 4000 	and.w	r0, r1, #2147483648	@ 0x80000000
 8000c7c:	f040 40fe 	orr.w	r0, r0, #2130706432	@ 0x7f000000
 8000c80:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000c84:	4770      	bx	lr
 8000c86:	bf00      	nop

08000c88 <__aeabi_uldivmod>:
 8000c88:	b953      	cbnz	r3, 8000ca0 <__aeabi_uldivmod+0x18>
 8000c8a:	b94a      	cbnz	r2, 8000ca0 <__aeabi_uldivmod+0x18>
 8000c8c:	2900      	cmp	r1, #0
 8000c8e:	bf08      	it	eq
 8000c90:	2800      	cmpeq	r0, #0
 8000c92:	bf1c      	itt	ne
 8000c94:	f04f 31ff 	movne.w	r1, #4294967295
 8000c98:	f04f 30ff 	movne.w	r0, #4294967295
 8000c9c:	f000 b96a 	b.w	8000f74 <__aeabi_idiv0>
 8000ca0:	f1ad 0c08 	sub.w	ip, sp, #8
 8000ca4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000ca8:	f000 f806 	bl	8000cb8 <__udivmoddi4>
 8000cac:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000cb0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000cb4:	b004      	add	sp, #16
 8000cb6:	4770      	bx	lr

08000cb8 <__udivmoddi4>:
 8000cb8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000cbc:	9d08      	ldr	r5, [sp, #32]
 8000cbe:	460c      	mov	r4, r1
 8000cc0:	2b00      	cmp	r3, #0
 8000cc2:	d14e      	bne.n	8000d62 <__udivmoddi4+0xaa>
 8000cc4:	4694      	mov	ip, r2
 8000cc6:	458c      	cmp	ip, r1
 8000cc8:	4686      	mov	lr, r0
 8000cca:	fab2 f282 	clz	r2, r2
 8000cce:	d962      	bls.n	8000d96 <__udivmoddi4+0xde>
 8000cd0:	b14a      	cbz	r2, 8000ce6 <__udivmoddi4+0x2e>
 8000cd2:	f1c2 0320 	rsb	r3, r2, #32
 8000cd6:	4091      	lsls	r1, r2
 8000cd8:	fa20 f303 	lsr.w	r3, r0, r3
 8000cdc:	fa0c fc02 	lsl.w	ip, ip, r2
 8000ce0:	4319      	orrs	r1, r3
 8000ce2:	fa00 fe02 	lsl.w	lr, r0, r2
 8000ce6:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000cea:	fa1f f68c 	uxth.w	r6, ip
 8000cee:	fbb1 f4f7 	udiv	r4, r1, r7
 8000cf2:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000cf6:	fb07 1114 	mls	r1, r7, r4, r1
 8000cfa:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000cfe:	fb04 f106 	mul.w	r1, r4, r6
 8000d02:	4299      	cmp	r1, r3
 8000d04:	d90a      	bls.n	8000d1c <__udivmoddi4+0x64>
 8000d06:	eb1c 0303 	adds.w	r3, ip, r3
 8000d0a:	f104 30ff 	add.w	r0, r4, #4294967295
 8000d0e:	f080 8112 	bcs.w	8000f36 <__udivmoddi4+0x27e>
 8000d12:	4299      	cmp	r1, r3
 8000d14:	f240 810f 	bls.w	8000f36 <__udivmoddi4+0x27e>
 8000d18:	3c02      	subs	r4, #2
 8000d1a:	4463      	add	r3, ip
 8000d1c:	1a59      	subs	r1, r3, r1
 8000d1e:	fa1f f38e 	uxth.w	r3, lr
 8000d22:	fbb1 f0f7 	udiv	r0, r1, r7
 8000d26:	fb07 1110 	mls	r1, r7, r0, r1
 8000d2a:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000d2e:	fb00 f606 	mul.w	r6, r0, r6
 8000d32:	429e      	cmp	r6, r3
 8000d34:	d90a      	bls.n	8000d4c <__udivmoddi4+0x94>
 8000d36:	eb1c 0303 	adds.w	r3, ip, r3
 8000d3a:	f100 31ff 	add.w	r1, r0, #4294967295
 8000d3e:	f080 80fc 	bcs.w	8000f3a <__udivmoddi4+0x282>
 8000d42:	429e      	cmp	r6, r3
 8000d44:	f240 80f9 	bls.w	8000f3a <__udivmoddi4+0x282>
 8000d48:	4463      	add	r3, ip
 8000d4a:	3802      	subs	r0, #2
 8000d4c:	1b9b      	subs	r3, r3, r6
 8000d4e:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 8000d52:	2100      	movs	r1, #0
 8000d54:	b11d      	cbz	r5, 8000d5e <__udivmoddi4+0xa6>
 8000d56:	40d3      	lsrs	r3, r2
 8000d58:	2200      	movs	r2, #0
 8000d5a:	e9c5 3200 	strd	r3, r2, [r5]
 8000d5e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000d62:	428b      	cmp	r3, r1
 8000d64:	d905      	bls.n	8000d72 <__udivmoddi4+0xba>
 8000d66:	b10d      	cbz	r5, 8000d6c <__udivmoddi4+0xb4>
 8000d68:	e9c5 0100 	strd	r0, r1, [r5]
 8000d6c:	2100      	movs	r1, #0
 8000d6e:	4608      	mov	r0, r1
 8000d70:	e7f5      	b.n	8000d5e <__udivmoddi4+0xa6>
 8000d72:	fab3 f183 	clz	r1, r3
 8000d76:	2900      	cmp	r1, #0
 8000d78:	d146      	bne.n	8000e08 <__udivmoddi4+0x150>
 8000d7a:	42a3      	cmp	r3, r4
 8000d7c:	d302      	bcc.n	8000d84 <__udivmoddi4+0xcc>
 8000d7e:	4290      	cmp	r0, r2
 8000d80:	f0c0 80f0 	bcc.w	8000f64 <__udivmoddi4+0x2ac>
 8000d84:	1a86      	subs	r6, r0, r2
 8000d86:	eb64 0303 	sbc.w	r3, r4, r3
 8000d8a:	2001      	movs	r0, #1
 8000d8c:	2d00      	cmp	r5, #0
 8000d8e:	d0e6      	beq.n	8000d5e <__udivmoddi4+0xa6>
 8000d90:	e9c5 6300 	strd	r6, r3, [r5]
 8000d94:	e7e3      	b.n	8000d5e <__udivmoddi4+0xa6>
 8000d96:	2a00      	cmp	r2, #0
 8000d98:	f040 8090 	bne.w	8000ebc <__udivmoddi4+0x204>
 8000d9c:	eba1 040c 	sub.w	r4, r1, ip
 8000da0:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000da4:	fa1f f78c 	uxth.w	r7, ip
 8000da8:	2101      	movs	r1, #1
 8000daa:	fbb4 f6f8 	udiv	r6, r4, r8
 8000dae:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000db2:	fb08 4416 	mls	r4, r8, r6, r4
 8000db6:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000dba:	fb07 f006 	mul.w	r0, r7, r6
 8000dbe:	4298      	cmp	r0, r3
 8000dc0:	d908      	bls.n	8000dd4 <__udivmoddi4+0x11c>
 8000dc2:	eb1c 0303 	adds.w	r3, ip, r3
 8000dc6:	f106 34ff 	add.w	r4, r6, #4294967295
 8000dca:	d202      	bcs.n	8000dd2 <__udivmoddi4+0x11a>
 8000dcc:	4298      	cmp	r0, r3
 8000dce:	f200 80cd 	bhi.w	8000f6c <__udivmoddi4+0x2b4>
 8000dd2:	4626      	mov	r6, r4
 8000dd4:	1a1c      	subs	r4, r3, r0
 8000dd6:	fa1f f38e 	uxth.w	r3, lr
 8000dda:	fbb4 f0f8 	udiv	r0, r4, r8
 8000dde:	fb08 4410 	mls	r4, r8, r0, r4
 8000de2:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000de6:	fb00 f707 	mul.w	r7, r0, r7
 8000dea:	429f      	cmp	r7, r3
 8000dec:	d908      	bls.n	8000e00 <__udivmoddi4+0x148>
 8000dee:	eb1c 0303 	adds.w	r3, ip, r3
 8000df2:	f100 34ff 	add.w	r4, r0, #4294967295
 8000df6:	d202      	bcs.n	8000dfe <__udivmoddi4+0x146>
 8000df8:	429f      	cmp	r7, r3
 8000dfa:	f200 80b0 	bhi.w	8000f5e <__udivmoddi4+0x2a6>
 8000dfe:	4620      	mov	r0, r4
 8000e00:	1bdb      	subs	r3, r3, r7
 8000e02:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000e06:	e7a5      	b.n	8000d54 <__udivmoddi4+0x9c>
 8000e08:	f1c1 0620 	rsb	r6, r1, #32
 8000e0c:	408b      	lsls	r3, r1
 8000e0e:	fa22 f706 	lsr.w	r7, r2, r6
 8000e12:	431f      	orrs	r7, r3
 8000e14:	fa20 fc06 	lsr.w	ip, r0, r6
 8000e18:	fa04 f301 	lsl.w	r3, r4, r1
 8000e1c:	ea43 030c 	orr.w	r3, r3, ip
 8000e20:	40f4      	lsrs	r4, r6
 8000e22:	fa00 f801 	lsl.w	r8, r0, r1
 8000e26:	0c38      	lsrs	r0, r7, #16
 8000e28:	ea4f 4913 	mov.w	r9, r3, lsr #16
 8000e2c:	fbb4 fef0 	udiv	lr, r4, r0
 8000e30:	fa1f fc87 	uxth.w	ip, r7
 8000e34:	fb00 441e 	mls	r4, r0, lr, r4
 8000e38:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000e3c:	fb0e f90c 	mul.w	r9, lr, ip
 8000e40:	45a1      	cmp	r9, r4
 8000e42:	fa02 f201 	lsl.w	r2, r2, r1
 8000e46:	d90a      	bls.n	8000e5e <__udivmoddi4+0x1a6>
 8000e48:	193c      	adds	r4, r7, r4
 8000e4a:	f10e 3aff 	add.w	sl, lr, #4294967295
 8000e4e:	f080 8084 	bcs.w	8000f5a <__udivmoddi4+0x2a2>
 8000e52:	45a1      	cmp	r9, r4
 8000e54:	f240 8081 	bls.w	8000f5a <__udivmoddi4+0x2a2>
 8000e58:	f1ae 0e02 	sub.w	lr, lr, #2
 8000e5c:	443c      	add	r4, r7
 8000e5e:	eba4 0409 	sub.w	r4, r4, r9
 8000e62:	fa1f f983 	uxth.w	r9, r3
 8000e66:	fbb4 f3f0 	udiv	r3, r4, r0
 8000e6a:	fb00 4413 	mls	r4, r0, r3, r4
 8000e6e:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000e72:	fb03 fc0c 	mul.w	ip, r3, ip
 8000e76:	45a4      	cmp	ip, r4
 8000e78:	d907      	bls.n	8000e8a <__udivmoddi4+0x1d2>
 8000e7a:	193c      	adds	r4, r7, r4
 8000e7c:	f103 30ff 	add.w	r0, r3, #4294967295
 8000e80:	d267      	bcs.n	8000f52 <__udivmoddi4+0x29a>
 8000e82:	45a4      	cmp	ip, r4
 8000e84:	d965      	bls.n	8000f52 <__udivmoddi4+0x29a>
 8000e86:	3b02      	subs	r3, #2
 8000e88:	443c      	add	r4, r7
 8000e8a:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 8000e8e:	fba0 9302 	umull	r9, r3, r0, r2
 8000e92:	eba4 040c 	sub.w	r4, r4, ip
 8000e96:	429c      	cmp	r4, r3
 8000e98:	46ce      	mov	lr, r9
 8000e9a:	469c      	mov	ip, r3
 8000e9c:	d351      	bcc.n	8000f42 <__udivmoddi4+0x28a>
 8000e9e:	d04e      	beq.n	8000f3e <__udivmoddi4+0x286>
 8000ea0:	b155      	cbz	r5, 8000eb8 <__udivmoddi4+0x200>
 8000ea2:	ebb8 030e 	subs.w	r3, r8, lr
 8000ea6:	eb64 040c 	sbc.w	r4, r4, ip
 8000eaa:	fa04 f606 	lsl.w	r6, r4, r6
 8000eae:	40cb      	lsrs	r3, r1
 8000eb0:	431e      	orrs	r6, r3
 8000eb2:	40cc      	lsrs	r4, r1
 8000eb4:	e9c5 6400 	strd	r6, r4, [r5]
 8000eb8:	2100      	movs	r1, #0
 8000eba:	e750      	b.n	8000d5e <__udivmoddi4+0xa6>
 8000ebc:	f1c2 0320 	rsb	r3, r2, #32
 8000ec0:	fa20 f103 	lsr.w	r1, r0, r3
 8000ec4:	fa0c fc02 	lsl.w	ip, ip, r2
 8000ec8:	fa24 f303 	lsr.w	r3, r4, r3
 8000ecc:	4094      	lsls	r4, r2
 8000ece:	430c      	orrs	r4, r1
 8000ed0:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000ed4:	fa00 fe02 	lsl.w	lr, r0, r2
 8000ed8:	fa1f f78c 	uxth.w	r7, ip
 8000edc:	fbb3 f0f8 	udiv	r0, r3, r8
 8000ee0:	fb08 3110 	mls	r1, r8, r0, r3
 8000ee4:	0c23      	lsrs	r3, r4, #16
 8000ee6:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000eea:	fb00 f107 	mul.w	r1, r0, r7
 8000eee:	4299      	cmp	r1, r3
 8000ef0:	d908      	bls.n	8000f04 <__udivmoddi4+0x24c>
 8000ef2:	eb1c 0303 	adds.w	r3, ip, r3
 8000ef6:	f100 36ff 	add.w	r6, r0, #4294967295
 8000efa:	d22c      	bcs.n	8000f56 <__udivmoddi4+0x29e>
 8000efc:	4299      	cmp	r1, r3
 8000efe:	d92a      	bls.n	8000f56 <__udivmoddi4+0x29e>
 8000f00:	3802      	subs	r0, #2
 8000f02:	4463      	add	r3, ip
 8000f04:	1a5b      	subs	r3, r3, r1
 8000f06:	b2a4      	uxth	r4, r4
 8000f08:	fbb3 f1f8 	udiv	r1, r3, r8
 8000f0c:	fb08 3311 	mls	r3, r8, r1, r3
 8000f10:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000f14:	fb01 f307 	mul.w	r3, r1, r7
 8000f18:	42a3      	cmp	r3, r4
 8000f1a:	d908      	bls.n	8000f2e <__udivmoddi4+0x276>
 8000f1c:	eb1c 0404 	adds.w	r4, ip, r4
 8000f20:	f101 36ff 	add.w	r6, r1, #4294967295
 8000f24:	d213      	bcs.n	8000f4e <__udivmoddi4+0x296>
 8000f26:	42a3      	cmp	r3, r4
 8000f28:	d911      	bls.n	8000f4e <__udivmoddi4+0x296>
 8000f2a:	3902      	subs	r1, #2
 8000f2c:	4464      	add	r4, ip
 8000f2e:	1ae4      	subs	r4, r4, r3
 8000f30:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8000f34:	e739      	b.n	8000daa <__udivmoddi4+0xf2>
 8000f36:	4604      	mov	r4, r0
 8000f38:	e6f0      	b.n	8000d1c <__udivmoddi4+0x64>
 8000f3a:	4608      	mov	r0, r1
 8000f3c:	e706      	b.n	8000d4c <__udivmoddi4+0x94>
 8000f3e:	45c8      	cmp	r8, r9
 8000f40:	d2ae      	bcs.n	8000ea0 <__udivmoddi4+0x1e8>
 8000f42:	ebb9 0e02 	subs.w	lr, r9, r2
 8000f46:	eb63 0c07 	sbc.w	ip, r3, r7
 8000f4a:	3801      	subs	r0, #1
 8000f4c:	e7a8      	b.n	8000ea0 <__udivmoddi4+0x1e8>
 8000f4e:	4631      	mov	r1, r6
 8000f50:	e7ed      	b.n	8000f2e <__udivmoddi4+0x276>
 8000f52:	4603      	mov	r3, r0
 8000f54:	e799      	b.n	8000e8a <__udivmoddi4+0x1d2>
 8000f56:	4630      	mov	r0, r6
 8000f58:	e7d4      	b.n	8000f04 <__udivmoddi4+0x24c>
 8000f5a:	46d6      	mov	lr, sl
 8000f5c:	e77f      	b.n	8000e5e <__udivmoddi4+0x1a6>
 8000f5e:	4463      	add	r3, ip
 8000f60:	3802      	subs	r0, #2
 8000f62:	e74d      	b.n	8000e00 <__udivmoddi4+0x148>
 8000f64:	4606      	mov	r6, r0
 8000f66:	4623      	mov	r3, r4
 8000f68:	4608      	mov	r0, r1
 8000f6a:	e70f      	b.n	8000d8c <__udivmoddi4+0xd4>
 8000f6c:	3e02      	subs	r6, #2
 8000f6e:	4463      	add	r3, ip
 8000f70:	e730      	b.n	8000dd4 <__udivmoddi4+0x11c>
 8000f72:	bf00      	nop

08000f74 <__aeabi_idiv0>:
 8000f74:	4770      	bx	lr
 8000f76:	bf00      	nop

08000f78 <calc_ang>:

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */

// Calculo dos angulos em radianos e graus
void calc_ang(){
 8000f78:	b580      	push	{r7, lr}
 8000f7a:	b082      	sub	sp, #8
 8000f7c:	af00      	add	r7, sp, #0
	for(int i = 0; i < N_AMOSTRAS; i++){
 8000f7e:	2300      	movs	r3, #0
 8000f80:	607b      	str	r3, [r7, #4]
 8000f82:	e056      	b.n	8001032 <calc_ang+0xba>
		angulos_graus[i] = ((medidas[i]-OFFSETS[i])*POT_ANG_MAX)/ADC_BIT_RESOLUTION; // Regra de três para saber o ang conforme a tensão medida do adc
 8000f84:	4a32      	ldr	r2, [pc, #200]	@ (8001050 <calc_ang+0xd8>)
 8000f86:	687b      	ldr	r3, [r7, #4]
 8000f88:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8000f8c:	b29b      	uxth	r3, r3
 8000f8e:	4619      	mov	r1, r3
 8000f90:	4a30      	ldr	r2, [pc, #192]	@ (8001054 <calc_ang+0xdc>)
 8000f92:	687b      	ldr	r3, [r7, #4]
 8000f94:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8000f98:	1acb      	subs	r3, r1, r3
 8000f9a:	f44f 7296 	mov.w	r2, #300	@ 0x12c
 8000f9e:	fb02 f303 	mul.w	r3, r2, r3
 8000fa2:	4a2d      	ldr	r2, [pc, #180]	@ (8001058 <calc_ang+0xe0>)
 8000fa4:	fb82 1203 	smull	r1, r2, r2, r3
 8000fa8:	441a      	add	r2, r3
 8000faa:	12d2      	asrs	r2, r2, #11
 8000fac:	17db      	asrs	r3, r3, #31
 8000fae:	1ad3      	subs	r3, r2, r3
 8000fb0:	ee07 3a90 	vmov	s15, r3
 8000fb4:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8000fb8:	4a28      	ldr	r2, [pc, #160]	@ (800105c <calc_ang+0xe4>)
 8000fba:	687b      	ldr	r3, [r7, #4]
 8000fbc:	009b      	lsls	r3, r3, #2
 8000fbe:	4413      	add	r3, r2
 8000fc0:	edc3 7a00 	vstr	s15, [r3]
		if(i != 0 && i != 3){
 8000fc4:	687b      	ldr	r3, [r7, #4]
 8000fc6:	2b00      	cmp	r3, #0
 8000fc8:	d017      	beq.n	8000ffa <calc_ang+0x82>
 8000fca:	687b      	ldr	r3, [r7, #4]
 8000fcc:	2b03      	cmp	r3, #3
 8000fce:	d014      	beq.n	8000ffa <calc_ang+0x82>
			angulos_graus[i] += angulos_graus[i-1];
 8000fd0:	4a22      	ldr	r2, [pc, #136]	@ (800105c <calc_ang+0xe4>)
 8000fd2:	687b      	ldr	r3, [r7, #4]
 8000fd4:	009b      	lsls	r3, r3, #2
 8000fd6:	4413      	add	r3, r2
 8000fd8:	ed93 7a00 	vldr	s14, [r3]
 8000fdc:	687b      	ldr	r3, [r7, #4]
 8000fde:	3b01      	subs	r3, #1
 8000fe0:	4a1e      	ldr	r2, [pc, #120]	@ (800105c <calc_ang+0xe4>)
 8000fe2:	009b      	lsls	r3, r3, #2
 8000fe4:	4413      	add	r3, r2
 8000fe6:	edd3 7a00 	vldr	s15, [r3]
 8000fea:	ee77 7a27 	vadd.f32	s15, s14, s15
 8000fee:	4a1b      	ldr	r2, [pc, #108]	@ (800105c <calc_ang+0xe4>)
 8000ff0:	687b      	ldr	r3, [r7, #4]
 8000ff2:	009b      	lsls	r3, r3, #2
 8000ff4:	4413      	add	r3, r2
 8000ff6:	edc3 7a00 	vstr	s15, [r3]
		}
		angulos_rad[i] = angulos_graus[i]*(M_PI / 180.0); // Transformando para radianos
 8000ffa:	4a18      	ldr	r2, [pc, #96]	@ (800105c <calc_ang+0xe4>)
 8000ffc:	687b      	ldr	r3, [r7, #4]
 8000ffe:	009b      	lsls	r3, r3, #2
 8001000:	4413      	add	r3, r2
 8001002:	681b      	ldr	r3, [r3, #0]
 8001004:	4618      	mov	r0, r3
 8001006:	f7ff fabf 	bl	8000588 <__aeabi_f2d>
 800100a:	a30f      	add	r3, pc, #60	@ (adr r3, 8001048 <calc_ang+0xd0>)
 800100c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001010:	f7ff fb12 	bl	8000638 <__aeabi_dmul>
 8001014:	4602      	mov	r2, r0
 8001016:	460b      	mov	r3, r1
 8001018:	4610      	mov	r0, r2
 800101a:	4619      	mov	r1, r3
 800101c:	f7ff fde4 	bl	8000be8 <__aeabi_d2f>
 8001020:	4602      	mov	r2, r0
 8001022:	490f      	ldr	r1, [pc, #60]	@ (8001060 <calc_ang+0xe8>)
 8001024:	687b      	ldr	r3, [r7, #4]
 8001026:	009b      	lsls	r3, r3, #2
 8001028:	440b      	add	r3, r1
 800102a:	601a      	str	r2, [r3, #0]
	for(int i = 0; i < N_AMOSTRAS; i++){
 800102c:	687b      	ldr	r3, [r7, #4]
 800102e:	3301      	adds	r3, #1
 8001030:	607b      	str	r3, [r7, #4]
 8001032:	687b      	ldr	r3, [r7, #4]
 8001034:	2b03      	cmp	r3, #3
 8001036:	dda5      	ble.n	8000f84 <calc_ang+0xc>
	}
}
 8001038:	bf00      	nop
 800103a:	bf00      	nop
 800103c:	3708      	adds	r7, #8
 800103e:	46bd      	mov	sp, r7
 8001040:	bd80      	pop	{r7, pc}
 8001042:	bf00      	nop
 8001044:	f3af 8000 	nop.w
 8001048:	a2529d39 	.word	0xa2529d39
 800104c:	3f91df46 	.word	0x3f91df46
 8001050:	200003b8 	.word	0x200003b8
 8001054:	200003c0 	.word	0x200003c0
 8001058:	80080081 	.word	0x80080081
 800105c:	200003e8 	.word	0x200003e8
 8001060:	200003d8 	.word	0x200003d8

08001064 <calc_r>:

// Distância Radial
float calc_r(){
 8001064:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 8001068:	b082      	sub	sp, #8
 800106a:	af00      	add	r7, sp, #0
	float r = 0;
 800106c:	f04f 0300 	mov.w	r3, #0
 8001070:	607b      	str	r3, [r7, #4]
	for(int i = 0; i < N_AMOSTRAS - 1; i++){
 8001072:	2300      	movs	r3, #0
 8001074:	603b      	str	r3, [r7, #0]
 8001076:	e033      	b.n	80010e0 <calc_r+0x7c>
			r += (sin(angulos_rad[i])*segmentos[i]); // Calculo do cateto oposto a soma é o r + um offset
 8001078:	6878      	ldr	r0, [r7, #4]
 800107a:	f7ff fa85 	bl	8000588 <__aeabi_f2d>
 800107e:	4604      	mov	r4, r0
 8001080:	460d      	mov	r5, r1
 8001082:	4a1d      	ldr	r2, [pc, #116]	@ (80010f8 <calc_r+0x94>)
 8001084:	683b      	ldr	r3, [r7, #0]
 8001086:	009b      	lsls	r3, r3, #2
 8001088:	4413      	add	r3, r2
 800108a:	681b      	ldr	r3, [r3, #0]
 800108c:	4618      	mov	r0, r3
 800108e:	f7ff fa7b 	bl	8000588 <__aeabi_f2d>
 8001092:	4602      	mov	r2, r0
 8001094:	460b      	mov	r3, r1
 8001096:	ec43 2b10 	vmov	d0, r2, r3
 800109a:	f008 f8a1 	bl	80091e0 <sin>
 800109e:	ec59 8b10 	vmov	r8, r9, d0
 80010a2:	4a16      	ldr	r2, [pc, #88]	@ (80010fc <calc_r+0x98>)
 80010a4:	683b      	ldr	r3, [r7, #0]
 80010a6:	009b      	lsls	r3, r3, #2
 80010a8:	4413      	add	r3, r2
 80010aa:	681b      	ldr	r3, [r3, #0]
 80010ac:	4618      	mov	r0, r3
 80010ae:	f7ff fa6b 	bl	8000588 <__aeabi_f2d>
 80010b2:	4602      	mov	r2, r0
 80010b4:	460b      	mov	r3, r1
 80010b6:	4640      	mov	r0, r8
 80010b8:	4649      	mov	r1, r9
 80010ba:	f7ff fabd 	bl	8000638 <__aeabi_dmul>
 80010be:	4602      	mov	r2, r0
 80010c0:	460b      	mov	r3, r1
 80010c2:	4620      	mov	r0, r4
 80010c4:	4629      	mov	r1, r5
 80010c6:	f7ff f901 	bl	80002cc <__adddf3>
 80010ca:	4602      	mov	r2, r0
 80010cc:	460b      	mov	r3, r1
 80010ce:	4610      	mov	r0, r2
 80010d0:	4619      	mov	r1, r3
 80010d2:	f7ff fd89 	bl	8000be8 <__aeabi_d2f>
 80010d6:	4603      	mov	r3, r0
 80010d8:	607b      	str	r3, [r7, #4]
	for(int i = 0; i < N_AMOSTRAS - 1; i++){
 80010da:	683b      	ldr	r3, [r7, #0]
 80010dc:	3301      	adds	r3, #1
 80010de:	603b      	str	r3, [r7, #0]
 80010e0:	683b      	ldr	r3, [r7, #0]
 80010e2:	2b02      	cmp	r3, #2
 80010e4:	ddc8      	ble.n	8001078 <calc_r+0x14>
		}
	return r;
 80010e6:	687b      	ldr	r3, [r7, #4]
 80010e8:	ee07 3a90 	vmov	s15, r3
}
 80010ec:	eeb0 0a67 	vmov.f32	s0, s15
 80010f0:	3708      	adds	r7, #8
 80010f2:	46bd      	mov	sp, r7
 80010f4:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 80010f8:	200003d8 	.word	0x200003d8
 80010fc:	0800a30c 	.word	0x0800a30c

08001100 <calc_z>:

// Altura da ponta
float calc_z(){
 8001100:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 8001104:	b082      	sub	sp, #8
 8001106:	af00      	add	r7, sp, #0
	float z = 0;
 8001108:	f04f 0300 	mov.w	r3, #0
 800110c:	607b      	str	r3, [r7, #4]
	for(int i = 0; i < N_AMOSTRAS - 1; i++){
 800110e:	2300      	movs	r3, #0
 8001110:	603b      	str	r3, [r7, #0]
 8001112:	e033      	b.n	800117c <calc_z+0x7c>
			z += (cos(angulos_rad[i])*segmentos[i]);  // Calculo do cateto adjacente a soma é o z + um offset
 8001114:	6878      	ldr	r0, [r7, #4]
 8001116:	f7ff fa37 	bl	8000588 <__aeabi_f2d>
 800111a:	4604      	mov	r4, r0
 800111c:	460d      	mov	r5, r1
 800111e:	4a1f      	ldr	r2, [pc, #124]	@ (800119c <calc_z+0x9c>)
 8001120:	683b      	ldr	r3, [r7, #0]
 8001122:	009b      	lsls	r3, r3, #2
 8001124:	4413      	add	r3, r2
 8001126:	681b      	ldr	r3, [r3, #0]
 8001128:	4618      	mov	r0, r3
 800112a:	f7ff fa2d 	bl	8000588 <__aeabi_f2d>
 800112e:	4602      	mov	r2, r0
 8001130:	460b      	mov	r3, r1
 8001132:	ec43 2b10 	vmov	d0, r2, r3
 8001136:	f007 ffff 	bl	8009138 <cos>
 800113a:	ec59 8b10 	vmov	r8, r9, d0
 800113e:	4a18      	ldr	r2, [pc, #96]	@ (80011a0 <calc_z+0xa0>)
 8001140:	683b      	ldr	r3, [r7, #0]
 8001142:	009b      	lsls	r3, r3, #2
 8001144:	4413      	add	r3, r2
 8001146:	681b      	ldr	r3, [r3, #0]
 8001148:	4618      	mov	r0, r3
 800114a:	f7ff fa1d 	bl	8000588 <__aeabi_f2d>
 800114e:	4602      	mov	r2, r0
 8001150:	460b      	mov	r3, r1
 8001152:	4640      	mov	r0, r8
 8001154:	4649      	mov	r1, r9
 8001156:	f7ff fa6f 	bl	8000638 <__aeabi_dmul>
 800115a:	4602      	mov	r2, r0
 800115c:	460b      	mov	r3, r1
 800115e:	4620      	mov	r0, r4
 8001160:	4629      	mov	r1, r5
 8001162:	f7ff f8b3 	bl	80002cc <__adddf3>
 8001166:	4602      	mov	r2, r0
 8001168:	460b      	mov	r3, r1
 800116a:	4610      	mov	r0, r2
 800116c:	4619      	mov	r1, r3
 800116e:	f7ff fd3b 	bl	8000be8 <__aeabi_d2f>
 8001172:	4603      	mov	r3, r0
 8001174:	607b      	str	r3, [r7, #4]
	for(int i = 0; i < N_AMOSTRAS - 1; i++){
 8001176:	683b      	ldr	r3, [r7, #0]
 8001178:	3301      	adds	r3, #1
 800117a:	603b      	str	r3, [r7, #0]
 800117c:	683b      	ldr	r3, [r7, #0]
 800117e:	2b02      	cmp	r3, #2
 8001180:	ddc8      	ble.n	8001114 <calc_z+0x14>
		}
	return z  + ALTURA_PADRAO;
 8001182:	edd7 7a01 	vldr	s15, [r7, #4]
 8001186:	eeb2 7a02 	vmov.f32	s14, #34	@ 0x41100000  9.0
 800118a:	ee77 7a87 	vadd.f32	s15, s15, s14
}
 800118e:	eeb0 0a67 	vmov.f32	s0, s15
 8001192:	3708      	adds	r7, #8
 8001194:	46bd      	mov	sp, r7
 8001196:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 800119a:	bf00      	nop
 800119c:	200003d8 	.word	0x200003d8
 80011a0:	0800a30c 	.word	0x0800a30c

080011a4 <calc_x>:

// Altura da ponta
float calc_x(float distancia_radial){
 80011a4:	b5b0      	push	{r4, r5, r7, lr}
 80011a6:	b084      	sub	sp, #16
 80011a8:	af00      	add	r7, sp, #0
 80011aa:	ed87 0a01 	vstr	s0, [r7, #4]
	float x = 0;
 80011ae:	f04f 0300 	mov.w	r3, #0
 80011b2:	60fb      	str	r3, [r7, #12]
	x = distancia_radial*cos(angulos_rad[3]);
 80011b4:	6878      	ldr	r0, [r7, #4]
 80011b6:	f7ff f9e7 	bl	8000588 <__aeabi_f2d>
 80011ba:	4604      	mov	r4, r0
 80011bc:	460d      	mov	r5, r1
 80011be:	4b10      	ldr	r3, [pc, #64]	@ (8001200 <calc_x+0x5c>)
 80011c0:	68db      	ldr	r3, [r3, #12]
 80011c2:	4618      	mov	r0, r3
 80011c4:	f7ff f9e0 	bl	8000588 <__aeabi_f2d>
 80011c8:	4602      	mov	r2, r0
 80011ca:	460b      	mov	r3, r1
 80011cc:	ec43 2b10 	vmov	d0, r2, r3
 80011d0:	f007 ffb2 	bl	8009138 <cos>
 80011d4:	ec53 2b10 	vmov	r2, r3, d0
 80011d8:	4620      	mov	r0, r4
 80011da:	4629      	mov	r1, r5
 80011dc:	f7ff fa2c 	bl	8000638 <__aeabi_dmul>
 80011e0:	4602      	mov	r2, r0
 80011e2:	460b      	mov	r3, r1
 80011e4:	4610      	mov	r0, r2
 80011e6:	4619      	mov	r1, r3
 80011e8:	f7ff fcfe 	bl	8000be8 <__aeabi_d2f>
 80011ec:	4603      	mov	r3, r0
 80011ee:	60fb      	str	r3, [r7, #12]

	return x;
 80011f0:	68fb      	ldr	r3, [r7, #12]
 80011f2:	ee07 3a90 	vmov	s15, r3
}
 80011f6:	eeb0 0a67 	vmov.f32	s0, s15
 80011fa:	3710      	adds	r7, #16
 80011fc:	46bd      	mov	sp, r7
 80011fe:	bdb0      	pop	{r4, r5, r7, pc}
 8001200:	200003d8 	.word	0x200003d8

08001204 <calc_y>:

// Altura da ponta
float calc_y(float distancia_radial){
 8001204:	b5b0      	push	{r4, r5, r7, lr}
 8001206:	b084      	sub	sp, #16
 8001208:	af00      	add	r7, sp, #0
 800120a:	ed87 0a01 	vstr	s0, [r7, #4]
	float y = 0;
 800120e:	f04f 0300 	mov.w	r3, #0
 8001212:	60fb      	str	r3, [r7, #12]
	y = distancia_radial*sin(angulos_rad[3]);
 8001214:	6878      	ldr	r0, [r7, #4]
 8001216:	f7ff f9b7 	bl	8000588 <__aeabi_f2d>
 800121a:	4604      	mov	r4, r0
 800121c:	460d      	mov	r5, r1
 800121e:	4b10      	ldr	r3, [pc, #64]	@ (8001260 <calc_y+0x5c>)
 8001220:	68db      	ldr	r3, [r3, #12]
 8001222:	4618      	mov	r0, r3
 8001224:	f7ff f9b0 	bl	8000588 <__aeabi_f2d>
 8001228:	4602      	mov	r2, r0
 800122a:	460b      	mov	r3, r1
 800122c:	ec43 2b10 	vmov	d0, r2, r3
 8001230:	f007 ffd6 	bl	80091e0 <sin>
 8001234:	ec53 2b10 	vmov	r2, r3, d0
 8001238:	4620      	mov	r0, r4
 800123a:	4629      	mov	r1, r5
 800123c:	f7ff f9fc 	bl	8000638 <__aeabi_dmul>
 8001240:	4602      	mov	r2, r0
 8001242:	460b      	mov	r3, r1
 8001244:	4610      	mov	r0, r2
 8001246:	4619      	mov	r1, r3
 8001248:	f7ff fcce 	bl	8000be8 <__aeabi_d2f>
 800124c:	4603      	mov	r3, r0
 800124e:	60fb      	str	r3, [r7, #12]

	return y;
 8001250:	68fb      	ldr	r3, [r7, #12]
 8001252:	ee07 3a90 	vmov	s15, r3
}
 8001256:	eeb0 0a67 	vmov.f32	s0, s15
 800125a:	3710      	adds	r7, #16
 800125c:	46bd      	mov	sp, r7
 800125e:	bdb0      	pop	{r4, r5, r7, pc}
 8001260:	200003d8 	.word	0x200003d8

08001264 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001264:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 8001268:	b088      	sub	sp, #32
 800126a:	af08      	add	r7, sp, #32
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800126c:	f000 ff2e 	bl	80020cc <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001270:	f000 f8b2 	bl	80013d8 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001274:	f000 facc 	bl	8001810 <MX_GPIO_Init>
  MX_DMA_Init();
 8001278:	f000 faaa 	bl	80017d0 <MX_DMA_Init>
  MX_ADC1_Init();
 800127c:	f000 f91a 	bl	80014b4 <MX_ADC1_Init>
  MX_USART2_UART_Init();
 8001280:	f000 fa7c 	bl	800177c <MX_USART2_UART_Init>
  MX_TIM10_Init();
 8001284:	f000 fa32 	bl	80016ec <MX_TIM10_Init>
  MX_TIM11_Init();
 8001288:	f000 fa54 	bl	8001734 <MX_TIM11_Init>
  MX_TIM8_Init();
 800128c:	f000 f98e 	bl	80015ac <MX_TIM8_Init>
  /* USER CODE BEGIN 2 */
  HAL_ADC_Start_DMA(&hadc1, medidas, N_AMOSTRAS);
 8001290:	2204      	movs	r2, #4
 8001292:	4941      	ldr	r1, [pc, #260]	@ (8001398 <main+0x134>)
 8001294:	4841      	ldr	r0, [pc, #260]	@ (800139c <main+0x138>)
 8001296:	f000 ffcf 	bl	8002238 <HAL_ADC_Start_DMA>
  HAL_TIM_Base_Start(&htim11); // Timer para debounce
 800129a:	4841      	ldr	r0, [pc, #260]	@ (80013a0 <main+0x13c>)
 800129c:	f003 f8b2 	bl	8004404 <HAL_TIM_Base_Start>
  HAL_TIM_Base_Start_IT(&htim10); // Timer para envio de msg na serial
 80012a0:	4840      	ldr	r0, [pc, #256]	@ (80013a4 <main+0x140>)
 80012a2:	f003 f917 	bl	80044d4 <HAL_TIM_Base_Start_IT>
  HAL_TIM_OC_Start_IT(&htim8, TIM_CHANNEL_1); // Timer de freq sampling do adc
 80012a6:	2100      	movs	r1, #0
 80012a8:	483f      	ldr	r0, [pc, #252]	@ (80013a8 <main+0x144>)
 80012aa:	f003 f9dd 	bl	8004668 <HAL_TIM_OC_Start_IT>

  strncpy(msg, "COORDENADAS X Y Z \n\r", msgSIZE); //Iniciando serial
 80012ae:	f44f 72fa 	mov.w	r2, #500	@ 0x1f4
 80012b2:	493e      	ldr	r1, [pc, #248]	@ (80013ac <main+0x148>)
 80012b4:	483e      	ldr	r0, [pc, #248]	@ (80013b0 <main+0x14c>)
 80012b6:	f005 fe6a 	bl	8006f8e <strncpy>
  HAL_UART_Transmit_IT(&huart2, msg, strlen(msg));
 80012ba:	483d      	ldr	r0, [pc, #244]	@ (80013b0 <main+0x14c>)
 80012bc:	f7fe fff8 	bl	80002b0 <strlen>
 80012c0:	4603      	mov	r3, r0
 80012c2:	b29b      	uxth	r3, r3
 80012c4:	461a      	mov	r2, r3
 80012c6:	493a      	ldr	r1, [pc, #232]	@ (80013b0 <main+0x14c>)
 80012c8:	483a      	ldr	r0, [pc, #232]	@ (80013b4 <main+0x150>)
 80012ca:	f004 f96d 	bl	80055a8 <HAL_UART_Transmit_IT>
  HAL_UART_Receive_IT(&huart2, &set_offset, 1);
 80012ce:	2201      	movs	r2, #1
 80012d0:	4939      	ldr	r1, [pc, #228]	@ (80013b8 <main+0x154>)
 80012d2:	4838      	ldr	r0, [pc, #224]	@ (80013b4 <main+0x150>)
 80012d4:	f004 f99e 	bl	8005614 <HAL_UART_Receive_IT>
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	  // Debounce
	  if(__HAL_TIM_GET_FLAG(&htim11, TIM_FLAG_UPDATE)){
 80012d8:	4b31      	ldr	r3, [pc, #196]	@ (80013a0 <main+0x13c>)
 80012da:	681b      	ldr	r3, [r3, #0]
 80012dc:	691b      	ldr	r3, [r3, #16]
 80012de:	f003 0301 	and.w	r3, r3, #1
 80012e2:	2b01      	cmp	r3, #1
 80012e4:	d14c      	bne.n	8001380 <main+0x11c>
		 __HAL_TIM_CLEAR_FLAG(&htim11, TIM_FLAG_UPDATE);
 80012e6:	4b2e      	ldr	r3, [pc, #184]	@ (80013a0 <main+0x13c>)
 80012e8:	681b      	ldr	r3, [r3, #0]
 80012ea:	f06f 0201 	mvn.w	r2, #1
 80012ee:	611a      	str	r2, [r3, #16]

		 if(HAL_GPIO_ReadPin(BOTAO_GPIO_Port, BOTAO_Pin) == 0 && soltou == 0){
 80012f0:	2101      	movs	r1, #1
 80012f2:	4832      	ldr	r0, [pc, #200]	@ (80013bc <main+0x158>)
 80012f4:	f002 fa1c 	bl	8003730 <HAL_GPIO_ReadPin>
 80012f8:	4603      	mov	r3, r0
 80012fa:	2b00      	cmp	r3, #0
 80012fc:	d140      	bne.n	8001380 <main+0x11c>
 80012fe:	4b30      	ldr	r3, [pc, #192]	@ (80013c0 <main+0x15c>)
 8001300:	781b      	ldrb	r3, [r3, #0]
 8001302:	2b00      	cmp	r3, #0
 8001304:	d13c      	bne.n	8001380 <main+0x11c>
		  	soltou = 1;
 8001306:	4b2e      	ldr	r3, [pc, #184]	@ (80013c0 <main+0x15c>)
 8001308:	2201      	movs	r2, #1
 800130a:	701a      	strb	r2, [r3, #0]
		  	coordenadas_xyz[0] = x;
 800130c:	4b2d      	ldr	r3, [pc, #180]	@ (80013c4 <main+0x160>)
 800130e:	681b      	ldr	r3, [r3, #0]
 8001310:	4a2d      	ldr	r2, [pc, #180]	@ (80013c8 <main+0x164>)
 8001312:	6013      	str	r3, [r2, #0]
		  	coordenadas_xyz[1] = y;
 8001314:	4b2d      	ldr	r3, [pc, #180]	@ (80013cc <main+0x168>)
 8001316:	681b      	ldr	r3, [r3, #0]
 8001318:	4a2b      	ldr	r2, [pc, #172]	@ (80013c8 <main+0x164>)
 800131a:	6053      	str	r3, [r2, #4]
		  	coordenadas_xyz[2] = z;
 800131c:	4b2c      	ldr	r3, [pc, #176]	@ (80013d0 <main+0x16c>)
 800131e:	681b      	ldr	r3, [r3, #0]
 8001320:	4a29      	ldr	r2, [pc, #164]	@ (80013c8 <main+0x164>)
 8001322:	6093      	str	r3, [r2, #8]
		  	snprintf(msg, msgSIZE, "{\"X\": %.2f, \"Y\": %.2f, \"Z\": %.2f,  \"guardar\": %i}\n",
		  			 coordenadas_xyz[0], coordenadas_xyz[1], coordenadas_xyz[2], soltou);
 8001324:	4b28      	ldr	r3, [pc, #160]	@ (80013c8 <main+0x164>)
 8001326:	681b      	ldr	r3, [r3, #0]
		  	snprintf(msg, msgSIZE, "{\"X\": %.2f, \"Y\": %.2f, \"Z\": %.2f,  \"guardar\": %i}\n",
 8001328:	4618      	mov	r0, r3
 800132a:	f7ff f92d 	bl	8000588 <__aeabi_f2d>
 800132e:	4604      	mov	r4, r0
 8001330:	460d      	mov	r5, r1
		  			 coordenadas_xyz[0], coordenadas_xyz[1], coordenadas_xyz[2], soltou);
 8001332:	4b25      	ldr	r3, [pc, #148]	@ (80013c8 <main+0x164>)
 8001334:	685b      	ldr	r3, [r3, #4]
		  	snprintf(msg, msgSIZE, "{\"X\": %.2f, \"Y\": %.2f, \"Z\": %.2f,  \"guardar\": %i}\n",
 8001336:	4618      	mov	r0, r3
 8001338:	f7ff f926 	bl	8000588 <__aeabi_f2d>
 800133c:	4680      	mov	r8, r0
 800133e:	4689      	mov	r9, r1
		  			 coordenadas_xyz[0], coordenadas_xyz[1], coordenadas_xyz[2], soltou);
 8001340:	4b21      	ldr	r3, [pc, #132]	@ (80013c8 <main+0x164>)
 8001342:	689b      	ldr	r3, [r3, #8]
		  	snprintf(msg, msgSIZE, "{\"X\": %.2f, \"Y\": %.2f, \"Z\": %.2f,  \"guardar\": %i}\n",
 8001344:	4618      	mov	r0, r3
 8001346:	f7ff f91f 	bl	8000588 <__aeabi_f2d>
 800134a:	4602      	mov	r2, r0
 800134c:	460b      	mov	r3, r1
 800134e:	491c      	ldr	r1, [pc, #112]	@ (80013c0 <main+0x15c>)
 8001350:	7809      	ldrb	r1, [r1, #0]
 8001352:	9106      	str	r1, [sp, #24]
 8001354:	e9cd 2304 	strd	r2, r3, [sp, #16]
 8001358:	e9cd 8902 	strd	r8, r9, [sp, #8]
 800135c:	e9cd 4500 	strd	r4, r5, [sp]
 8001360:	4a1c      	ldr	r2, [pc, #112]	@ (80013d4 <main+0x170>)
 8001362:	f44f 71fa 	mov.w	r1, #500	@ 0x1f4
 8001366:	4812      	ldr	r0, [pc, #72]	@ (80013b0 <main+0x14c>)
 8001368:	f005 fd92 	bl	8006e90 <sniprintf>
		  	HAL_UART_Transmit_IT(&huart2, msg, strlen(msg));
 800136c:	4810      	ldr	r0, [pc, #64]	@ (80013b0 <main+0x14c>)
 800136e:	f7fe ff9f 	bl	80002b0 <strlen>
 8001372:	4603      	mov	r3, r0
 8001374:	b29b      	uxth	r3, r3
 8001376:	461a      	mov	r2, r3
 8001378:	490d      	ldr	r1, [pc, #52]	@ (80013b0 <main+0x14c>)
 800137a:	480e      	ldr	r0, [pc, #56]	@ (80013b4 <main+0x150>)
 800137c:	f004 f914 	bl	80055a8 <HAL_UART_Transmit_IT>
		 }
	  }

	  if(HAL_GPIO_ReadPin(BOTAO_GPIO_Port, BOTAO_Pin) == 1){
 8001380:	2101      	movs	r1, #1
 8001382:	480e      	ldr	r0, [pc, #56]	@ (80013bc <main+0x158>)
 8001384:	f002 f9d4 	bl	8003730 <HAL_GPIO_ReadPin>
 8001388:	4603      	mov	r3, r0
 800138a:	2b01      	cmp	r3, #1
 800138c:	d1a4      	bne.n	80012d8 <main+0x74>
		  soltou = 0;
 800138e:	4b0c      	ldr	r3, [pc, #48]	@ (80013c0 <main+0x15c>)
 8001390:	2200      	movs	r2, #0
 8001392:	701a      	strb	r2, [r3, #0]
	  if(__HAL_TIM_GET_FLAG(&htim11, TIM_FLAG_UPDATE)){
 8001394:	e7a0      	b.n	80012d8 <main+0x74>
 8001396:	bf00      	nop
 8001398:	200003b8 	.word	0x200003b8
 800139c:	200001f0 	.word	0x200001f0
 80013a0:	20000328 	.word	0x20000328
 80013a4:	200002e0 	.word	0x200002e0
 80013a8:	20000298 	.word	0x20000298
 80013ac:	0800a258 	.word	0x0800a258
 80013b0:	20000408 	.word	0x20000408
 80013b4:	20000370 	.word	0x20000370
 80013b8:	200003c9 	.word	0x200003c9
 80013bc:	40020800 	.word	0x40020800
 80013c0:	200003c8 	.word	0x200003c8
 80013c4:	20000400 	.word	0x20000400
 80013c8:	200003cc 	.word	0x200003cc
 80013cc:	20000404 	.word	0x20000404
 80013d0:	200003fc 	.word	0x200003fc
 80013d4:	0800a270 	.word	0x0800a270

080013d8 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80013d8:	b580      	push	{r7, lr}
 80013da:	b094      	sub	sp, #80	@ 0x50
 80013dc:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80013de:	f107 031c 	add.w	r3, r7, #28
 80013e2:	2234      	movs	r2, #52	@ 0x34
 80013e4:	2100      	movs	r1, #0
 80013e6:	4618      	mov	r0, r3
 80013e8:	f005 fdc9 	bl	8006f7e <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80013ec:	f107 0308 	add.w	r3, r7, #8
 80013f0:	2200      	movs	r2, #0
 80013f2:	601a      	str	r2, [r3, #0]
 80013f4:	605a      	str	r2, [r3, #4]
 80013f6:	609a      	str	r2, [r3, #8]
 80013f8:	60da      	str	r2, [r3, #12]
 80013fa:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 80013fc:	2300      	movs	r3, #0
 80013fe:	607b      	str	r3, [r7, #4]
 8001400:	4b2a      	ldr	r3, [pc, #168]	@ (80014ac <SystemClock_Config+0xd4>)
 8001402:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001404:	4a29      	ldr	r2, [pc, #164]	@ (80014ac <SystemClock_Config+0xd4>)
 8001406:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800140a:	6413      	str	r3, [r2, #64]	@ 0x40
 800140c:	4b27      	ldr	r3, [pc, #156]	@ (80014ac <SystemClock_Config+0xd4>)
 800140e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001410:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001414:	607b      	str	r3, [r7, #4]
 8001416:	687b      	ldr	r3, [r7, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 8001418:	2300      	movs	r3, #0
 800141a:	603b      	str	r3, [r7, #0]
 800141c:	4b24      	ldr	r3, [pc, #144]	@ (80014b0 <SystemClock_Config+0xd8>)
 800141e:	681b      	ldr	r3, [r3, #0]
 8001420:	f423 4340 	bic.w	r3, r3, #49152	@ 0xc000
 8001424:	4a22      	ldr	r2, [pc, #136]	@ (80014b0 <SystemClock_Config+0xd8>)
 8001426:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 800142a:	6013      	str	r3, [r2, #0]
 800142c:	4b20      	ldr	r3, [pc, #128]	@ (80014b0 <SystemClock_Config+0xd8>)
 800142e:	681b      	ldr	r3, [r3, #0]
 8001430:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 8001434:	603b      	str	r3, [r7, #0]
 8001436:	683b      	ldr	r3, [r7, #0]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8001438:	2302      	movs	r3, #2
 800143a:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 800143c:	2301      	movs	r3, #1
 800143e:	62bb      	str	r3, [r7, #40]	@ 0x28
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8001440:	2310      	movs	r3, #16
 8001442:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001444:	2302      	movs	r3, #2
 8001446:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8001448:	2300      	movs	r3, #0
 800144a:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLM = 16;
 800144c:	2310      	movs	r3, #16
 800144e:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLN = 336;
 8001450:	f44f 73a8 	mov.w	r3, #336	@ 0x150
 8001454:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV4;
 8001456:	2304      	movs	r3, #4
 8001458:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLQ = 2;
 800145a:	2302      	movs	r3, #2
 800145c:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLR = 2;
 800145e:	2302      	movs	r3, #2
 8001460:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001462:	f107 031c 	add.w	r3, r7, #28
 8001466:	4618      	mov	r0, r3
 8001468:	f002 fcde 	bl	8003e28 <HAL_RCC_OscConfig>
 800146c:	4603      	mov	r3, r0
 800146e:	2b00      	cmp	r3, #0
 8001470:	d001      	beq.n	8001476 <SystemClock_Config+0x9e>
  {
    Error_Handler();
 8001472:	f000 fb35 	bl	8001ae0 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001476:	230f      	movs	r3, #15
 8001478:	60bb      	str	r3, [r7, #8]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800147a:	2302      	movs	r3, #2
 800147c:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800147e:	2300      	movs	r3, #0
 8001480:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8001482:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8001486:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8001488:	2300      	movs	r3, #0
 800148a:	61bb      	str	r3, [r7, #24]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 800148c:	f107 0308 	add.w	r3, r7, #8
 8001490:	2102      	movs	r1, #2
 8001492:	4618      	mov	r0, r3
 8001494:	f002 f97e 	bl	8003794 <HAL_RCC_ClockConfig>
 8001498:	4603      	mov	r3, r0
 800149a:	2b00      	cmp	r3, #0
 800149c:	d001      	beq.n	80014a2 <SystemClock_Config+0xca>
  {
    Error_Handler();
 800149e:	f000 fb1f 	bl	8001ae0 <Error_Handler>
  }
}
 80014a2:	bf00      	nop
 80014a4:	3750      	adds	r7, #80	@ 0x50
 80014a6:	46bd      	mov	sp, r7
 80014a8:	bd80      	pop	{r7, pc}
 80014aa:	bf00      	nop
 80014ac:	40023800 	.word	0x40023800
 80014b0:	40007000 	.word	0x40007000

080014b4 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 80014b4:	b580      	push	{r7, lr}
 80014b6:	b084      	sub	sp, #16
 80014b8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 80014ba:	463b      	mov	r3, r7
 80014bc:	2200      	movs	r2, #0
 80014be:	601a      	str	r2, [r3, #0]
 80014c0:	605a      	str	r2, [r3, #4]
 80014c2:	609a      	str	r2, [r3, #8]
 80014c4:	60da      	str	r2, [r3, #12]

  /* USER CODE END ADC1_Init 1 */

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc1.Instance = ADC1;
 80014c6:	4b37      	ldr	r3, [pc, #220]	@ (80015a4 <MX_ADC1_Init+0xf0>)
 80014c8:	4a37      	ldr	r2, [pc, #220]	@ (80015a8 <MX_ADC1_Init+0xf4>)
 80014ca:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 80014cc:	4b35      	ldr	r3, [pc, #212]	@ (80015a4 <MX_ADC1_Init+0xf0>)
 80014ce:	f44f 3280 	mov.w	r2, #65536	@ 0x10000
 80014d2:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 80014d4:	4b33      	ldr	r3, [pc, #204]	@ (80015a4 <MX_ADC1_Init+0xf0>)
 80014d6:	2200      	movs	r2, #0
 80014d8:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = ENABLE;
 80014da:	4b32      	ldr	r3, [pc, #200]	@ (80015a4 <MX_ADC1_Init+0xf0>)
 80014dc:	2201      	movs	r2, #1
 80014de:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = DISABLE;
 80014e0:	4b30      	ldr	r3, [pc, #192]	@ (80015a4 <MX_ADC1_Init+0xf0>)
 80014e2:	2200      	movs	r2, #0
 80014e4:	761a      	strb	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 80014e6:	4b2f      	ldr	r3, [pc, #188]	@ (80015a4 <MX_ADC1_Init+0xf0>)
 80014e8:	2200      	movs	r2, #0
 80014ea:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_RISING;
 80014ee:	4b2d      	ldr	r3, [pc, #180]	@ (80015a4 <MX_ADC1_Init+0xf0>)
 80014f0:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80014f4:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc1.Init.ExternalTrigConv = ADC_EXTERNALTRIGCONV_T8_TRGO;
 80014f6:	4b2b      	ldr	r3, [pc, #172]	@ (80015a4 <MX_ADC1_Init+0xf0>)
 80014f8:	f04f 6260 	mov.w	r2, #234881024	@ 0xe000000
 80014fc:	629a      	str	r2, [r3, #40]	@ 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 80014fe:	4b29      	ldr	r3, [pc, #164]	@ (80015a4 <MX_ADC1_Init+0xf0>)
 8001500:	2200      	movs	r2, #0
 8001502:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 4;
 8001504:	4b27      	ldr	r3, [pc, #156]	@ (80015a4 <MX_ADC1_Init+0xf0>)
 8001506:	2204      	movs	r2, #4
 8001508:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = DISABLE;
 800150a:	4b26      	ldr	r3, [pc, #152]	@ (80015a4 <MX_ADC1_Init+0xf0>)
 800150c:	2200      	movs	r2, #0
 800150e:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8001512:	4b24      	ldr	r3, [pc, #144]	@ (80015a4 <MX_ADC1_Init+0xf0>)
 8001514:	2201      	movs	r2, #1
 8001516:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8001518:	4822      	ldr	r0, [pc, #136]	@ (80015a4 <MX_ADC1_Init+0xf0>)
 800151a:	f000 fe49 	bl	80021b0 <HAL_ADC_Init>
 800151e:	4603      	mov	r3, r0
 8001520:	2b00      	cmp	r3, #0
 8001522:	d001      	beq.n	8001528 <MX_ADC1_Init+0x74>
  {
    Error_Handler();
 8001524:	f000 fadc 	bl	8001ae0 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_0;
 8001528:	2300      	movs	r3, #0
 800152a:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 1;
 800152c:	2301      	movs	r3, #1
 800152e:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_15CYCLES;
 8001530:	2301      	movs	r3, #1
 8001532:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8001534:	463b      	mov	r3, r7
 8001536:	4619      	mov	r1, r3
 8001538:	481a      	ldr	r0, [pc, #104]	@ (80015a4 <MX_ADC1_Init+0xf0>)
 800153a:	f000 ffa1 	bl	8002480 <HAL_ADC_ConfigChannel>
 800153e:	4603      	mov	r3, r0
 8001540:	2b00      	cmp	r3, #0
 8001542:	d001      	beq.n	8001548 <MX_ADC1_Init+0x94>
  {
    Error_Handler();
 8001544:	f000 facc 	bl	8001ae0 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_1;
 8001548:	2301      	movs	r3, #1
 800154a:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 2;
 800154c:	2302      	movs	r3, #2
 800154e:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8001550:	463b      	mov	r3, r7
 8001552:	4619      	mov	r1, r3
 8001554:	4813      	ldr	r0, [pc, #76]	@ (80015a4 <MX_ADC1_Init+0xf0>)
 8001556:	f000 ff93 	bl	8002480 <HAL_ADC_ConfigChannel>
 800155a:	4603      	mov	r3, r0
 800155c:	2b00      	cmp	r3, #0
 800155e:	d001      	beq.n	8001564 <MX_ADC1_Init+0xb0>
  {
    Error_Handler();
 8001560:	f000 fabe 	bl	8001ae0 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_4;
 8001564:	2304      	movs	r3, #4
 8001566:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 3;
 8001568:	2303      	movs	r3, #3
 800156a:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 800156c:	463b      	mov	r3, r7
 800156e:	4619      	mov	r1, r3
 8001570:	480c      	ldr	r0, [pc, #48]	@ (80015a4 <MX_ADC1_Init+0xf0>)
 8001572:	f000 ff85 	bl	8002480 <HAL_ADC_ConfigChannel>
 8001576:	4603      	mov	r3, r0
 8001578:	2b00      	cmp	r3, #0
 800157a:	d001      	beq.n	8001580 <MX_ADC1_Init+0xcc>
  {
    Error_Handler();
 800157c:	f000 fab0 	bl	8001ae0 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_6;
 8001580:	2306      	movs	r3, #6
 8001582:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 4;
 8001584:	2304      	movs	r3, #4
 8001586:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8001588:	463b      	mov	r3, r7
 800158a:	4619      	mov	r1, r3
 800158c:	4805      	ldr	r0, [pc, #20]	@ (80015a4 <MX_ADC1_Init+0xf0>)
 800158e:	f000 ff77 	bl	8002480 <HAL_ADC_ConfigChannel>
 8001592:	4603      	mov	r3, r0
 8001594:	2b00      	cmp	r3, #0
 8001596:	d001      	beq.n	800159c <MX_ADC1_Init+0xe8>
  {
    Error_Handler();
 8001598:	f000 faa2 	bl	8001ae0 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 800159c:	bf00      	nop
 800159e:	3710      	adds	r7, #16
 80015a0:	46bd      	mov	sp, r7
 80015a2:	bd80      	pop	{r7, pc}
 80015a4:	200001f0 	.word	0x200001f0
 80015a8:	40012000 	.word	0x40012000

080015ac <MX_TIM8_Init>:
  * @brief TIM8 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM8_Init(void)
{
 80015ac:	b580      	push	{r7, lr}
 80015ae:	b096      	sub	sp, #88	@ 0x58
 80015b0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM8_Init 0 */

  /* USER CODE END TIM8_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80015b2:	f107 0348 	add.w	r3, r7, #72	@ 0x48
 80015b6:	2200      	movs	r2, #0
 80015b8:	601a      	str	r2, [r3, #0]
 80015ba:	605a      	str	r2, [r3, #4]
 80015bc:	609a      	str	r2, [r3, #8]
 80015be:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80015c0:	f107 0340 	add.w	r3, r7, #64	@ 0x40
 80015c4:	2200      	movs	r2, #0
 80015c6:	601a      	str	r2, [r3, #0]
 80015c8:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 80015ca:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80015ce:	2200      	movs	r2, #0
 80015d0:	601a      	str	r2, [r3, #0]
 80015d2:	605a      	str	r2, [r3, #4]
 80015d4:	609a      	str	r2, [r3, #8]
 80015d6:	60da      	str	r2, [r3, #12]
 80015d8:	611a      	str	r2, [r3, #16]
 80015da:	615a      	str	r2, [r3, #20]
 80015dc:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 80015de:	1d3b      	adds	r3, r7, #4
 80015e0:	2220      	movs	r2, #32
 80015e2:	2100      	movs	r1, #0
 80015e4:	4618      	mov	r0, r3
 80015e6:	f005 fcca 	bl	8006f7e <memset>

  /* USER CODE BEGIN TIM8_Init 1 */

  /* USER CODE END TIM8_Init 1 */
  htim8.Instance = TIM8;
 80015ea:	4b3e      	ldr	r3, [pc, #248]	@ (80016e4 <MX_TIM8_Init+0x138>)
 80015ec:	4a3e      	ldr	r2, [pc, #248]	@ (80016e8 <MX_TIM8_Init+0x13c>)
 80015ee:	601a      	str	r2, [r3, #0]
  htim8.Init.Prescaler = 99;
 80015f0:	4b3c      	ldr	r3, [pc, #240]	@ (80016e4 <MX_TIM8_Init+0x138>)
 80015f2:	2263      	movs	r2, #99	@ 0x63
 80015f4:	605a      	str	r2, [r3, #4]
  htim8.Init.CounterMode = TIM_COUNTERMODE_UP;
 80015f6:	4b3b      	ldr	r3, [pc, #236]	@ (80016e4 <MX_TIM8_Init+0x138>)
 80015f8:	2200      	movs	r2, #0
 80015fa:	609a      	str	r2, [r3, #8]
  htim8.Init.Period = 839;
 80015fc:	4b39      	ldr	r3, [pc, #228]	@ (80016e4 <MX_TIM8_Init+0x138>)
 80015fe:	f240 3247 	movw	r2, #839	@ 0x347
 8001602:	60da      	str	r2, [r3, #12]
  htim8.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001604:	4b37      	ldr	r3, [pc, #220]	@ (80016e4 <MX_TIM8_Init+0x138>)
 8001606:	2200      	movs	r2, #0
 8001608:	611a      	str	r2, [r3, #16]
  htim8.Init.RepetitionCounter = 0;
 800160a:	4b36      	ldr	r3, [pc, #216]	@ (80016e4 <MX_TIM8_Init+0x138>)
 800160c:	2200      	movs	r2, #0
 800160e:	615a      	str	r2, [r3, #20]
  htim8.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001610:	4b34      	ldr	r3, [pc, #208]	@ (80016e4 <MX_TIM8_Init+0x138>)
 8001612:	2200      	movs	r2, #0
 8001614:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim8) != HAL_OK)
 8001616:	4833      	ldr	r0, [pc, #204]	@ (80016e4 <MX_TIM8_Init+0x138>)
 8001618:	f002 fea4 	bl	8004364 <HAL_TIM_Base_Init>
 800161c:	4603      	mov	r3, r0
 800161e:	2b00      	cmp	r3, #0
 8001620:	d001      	beq.n	8001626 <MX_TIM8_Init+0x7a>
  {
    Error_Handler();
 8001622:	f000 fa5d 	bl	8001ae0 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001626:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800162a:	64bb      	str	r3, [r7, #72]	@ 0x48
  if (HAL_TIM_ConfigClockSource(&htim8, &sClockSourceConfig) != HAL_OK)
 800162c:	f107 0348 	add.w	r3, r7, #72	@ 0x48
 8001630:	4619      	mov	r1, r3
 8001632:	482c      	ldr	r0, [pc, #176]	@ (80016e4 <MX_TIM8_Init+0x138>)
 8001634:	f003 fa7a 	bl	8004b2c <HAL_TIM_ConfigClockSource>
 8001638:	4603      	mov	r3, r0
 800163a:	2b00      	cmp	r3, #0
 800163c:	d001      	beq.n	8001642 <MX_TIM8_Init+0x96>
  {
    Error_Handler();
 800163e:	f000 fa4f 	bl	8001ae0 <Error_Handler>
  }
  if (HAL_TIM_OC_Init(&htim8) != HAL_OK)
 8001642:	4828      	ldr	r0, [pc, #160]	@ (80016e4 <MX_TIM8_Init+0x138>)
 8001644:	f002 ffb6 	bl	80045b4 <HAL_TIM_OC_Init>
 8001648:	4603      	mov	r3, r0
 800164a:	2b00      	cmp	r3, #0
 800164c:	d001      	beq.n	8001652 <MX_TIM8_Init+0xa6>
  {
    Error_Handler();
 800164e:	f000 fa47 	bl	8001ae0 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_UPDATE;
 8001652:	2320      	movs	r3, #32
 8001654:	643b      	str	r3, [r7, #64]	@ 0x40
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001656:	2300      	movs	r3, #0
 8001658:	647b      	str	r3, [r7, #68]	@ 0x44
  if (HAL_TIMEx_MasterConfigSynchronization(&htim8, &sMasterConfig) != HAL_OK)
 800165a:	f107 0340 	add.w	r3, r7, #64	@ 0x40
 800165e:	4619      	mov	r1, r3
 8001660:	4820      	ldr	r0, [pc, #128]	@ (80016e4 <MX_TIM8_Init+0x138>)
 8001662:	f003 fe6f 	bl	8005344 <HAL_TIMEx_MasterConfigSynchronization>
 8001666:	4603      	mov	r3, r0
 8001668:	2b00      	cmp	r3, #0
 800166a:	d001      	beq.n	8001670 <MX_TIM8_Init+0xc4>
  {
    Error_Handler();
 800166c:	f000 fa38 	bl	8001ae0 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_TOGGLE;
 8001670:	2330      	movs	r3, #48	@ 0x30
 8001672:	627b      	str	r3, [r7, #36]	@ 0x24
  sConfigOC.Pulse = 10;
 8001674:	230a      	movs	r3, #10
 8001676:	62bb      	str	r3, [r7, #40]	@ 0x28
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001678:	2300      	movs	r3, #0
 800167a:	62fb      	str	r3, [r7, #44]	@ 0x2c
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 800167c:	2300      	movs	r3, #0
 800167e:	633b      	str	r3, [r7, #48]	@ 0x30
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001680:	2300      	movs	r3, #0
 8001682:	637b      	str	r3, [r7, #52]	@ 0x34
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8001684:	2300      	movs	r3, #0
 8001686:	63bb      	str	r3, [r7, #56]	@ 0x38
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8001688:	2300      	movs	r3, #0
 800168a:	63fb      	str	r3, [r7, #60]	@ 0x3c
  if (HAL_TIM_OC_ConfigChannel(&htim8, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 800168c:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8001690:	2200      	movs	r2, #0
 8001692:	4619      	mov	r1, r3
 8001694:	4813      	ldr	r0, [pc, #76]	@ (80016e4 <MX_TIM8_Init+0x138>)
 8001696:	f003 f9ed 	bl	8004a74 <HAL_TIM_OC_ConfigChannel>
 800169a:	4603      	mov	r3, r0
 800169c:	2b00      	cmp	r3, #0
 800169e:	d001      	beq.n	80016a4 <MX_TIM8_Init+0xf8>
  {
    Error_Handler();
 80016a0:	f000 fa1e 	bl	8001ae0 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 80016a4:	2300      	movs	r3, #0
 80016a6:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 80016a8:	2300      	movs	r3, #0
 80016aa:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 80016ac:	2300      	movs	r3, #0
 80016ae:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 80016b0:	2300      	movs	r3, #0
 80016b2:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 80016b4:	2300      	movs	r3, #0
 80016b6:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 80016b8:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 80016bc:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 80016be:	2300      	movs	r3, #0
 80016c0:	623b      	str	r3, [r7, #32]
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim8, &sBreakDeadTimeConfig) != HAL_OK)
 80016c2:	1d3b      	adds	r3, r7, #4
 80016c4:	4619      	mov	r1, r3
 80016c6:	4807      	ldr	r0, [pc, #28]	@ (80016e4 <MX_TIM8_Init+0x138>)
 80016c8:	f003 feb8 	bl	800543c <HAL_TIMEx_ConfigBreakDeadTime>
 80016cc:	4603      	mov	r3, r0
 80016ce:	2b00      	cmp	r3, #0
 80016d0:	d001      	beq.n	80016d6 <MX_TIM8_Init+0x12a>
  {
    Error_Handler();
 80016d2:	f000 fa05 	bl	8001ae0 <Error_Handler>
  }
  /* USER CODE BEGIN TIM8_Init 2 */

  /* USER CODE END TIM8_Init 2 */
  HAL_TIM_MspPostInit(&htim8);
 80016d6:	4803      	ldr	r0, [pc, #12]	@ (80016e4 <MX_TIM8_Init+0x138>)
 80016d8:	f000 fb0a 	bl	8001cf0 <HAL_TIM_MspPostInit>

}
 80016dc:	bf00      	nop
 80016de:	3758      	adds	r7, #88	@ 0x58
 80016e0:	46bd      	mov	sp, r7
 80016e2:	bd80      	pop	{r7, pc}
 80016e4:	20000298 	.word	0x20000298
 80016e8:	40010400 	.word	0x40010400

080016ec <MX_TIM10_Init>:
  * @brief TIM10 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM10_Init(void)
{
 80016ec:	b580      	push	{r7, lr}
 80016ee:	af00      	add	r7, sp, #0
  /* USER CODE END TIM10_Init 0 */

  /* USER CODE BEGIN TIM10_Init 1 */

  /* USER CODE END TIM10_Init 1 */
  htim10.Instance = TIM10;
 80016f0:	4b0e      	ldr	r3, [pc, #56]	@ (800172c <MX_TIM10_Init+0x40>)
 80016f2:	4a0f      	ldr	r2, [pc, #60]	@ (8001730 <MX_TIM10_Init+0x44>)
 80016f4:	601a      	str	r2, [r3, #0]
  htim10.Init.Prescaler = 8399;
 80016f6:	4b0d      	ldr	r3, [pc, #52]	@ (800172c <MX_TIM10_Init+0x40>)
 80016f8:	f242 02cf 	movw	r2, #8399	@ 0x20cf
 80016fc:	605a      	str	r2, [r3, #4]
  htim10.Init.CounterMode = TIM_COUNTERMODE_UP;
 80016fe:	4b0b      	ldr	r3, [pc, #44]	@ (800172c <MX_TIM10_Init+0x40>)
 8001700:	2200      	movs	r2, #0
 8001702:	609a      	str	r2, [r3, #8]
  htim10.Init.Period = 9999;
 8001704:	4b09      	ldr	r3, [pc, #36]	@ (800172c <MX_TIM10_Init+0x40>)
 8001706:	f242 720f 	movw	r2, #9999	@ 0x270f
 800170a:	60da      	str	r2, [r3, #12]
  htim10.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800170c:	4b07      	ldr	r3, [pc, #28]	@ (800172c <MX_TIM10_Init+0x40>)
 800170e:	2200      	movs	r2, #0
 8001710:	611a      	str	r2, [r3, #16]
  htim10.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001712:	4b06      	ldr	r3, [pc, #24]	@ (800172c <MX_TIM10_Init+0x40>)
 8001714:	2200      	movs	r2, #0
 8001716:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim10) != HAL_OK)
 8001718:	4804      	ldr	r0, [pc, #16]	@ (800172c <MX_TIM10_Init+0x40>)
 800171a:	f002 fe23 	bl	8004364 <HAL_TIM_Base_Init>
 800171e:	4603      	mov	r3, r0
 8001720:	2b00      	cmp	r3, #0
 8001722:	d001      	beq.n	8001728 <MX_TIM10_Init+0x3c>
  {
    Error_Handler();
 8001724:	f000 f9dc 	bl	8001ae0 <Error_Handler>
  }
  /* USER CODE BEGIN TIM10_Init 2 */

  /* USER CODE END TIM10_Init 2 */

}
 8001728:	bf00      	nop
 800172a:	bd80      	pop	{r7, pc}
 800172c:	200002e0 	.word	0x200002e0
 8001730:	40014400 	.word	0x40014400

08001734 <MX_TIM11_Init>:
  * @brief TIM11 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM11_Init(void)
{
 8001734:	b580      	push	{r7, lr}
 8001736:	af00      	add	r7, sp, #0
  /* USER CODE END TIM11_Init 0 */

  /* USER CODE BEGIN TIM11_Init 1 */

  /* USER CODE END TIM11_Init 1 */
  htim11.Instance = TIM11;
 8001738:	4b0e      	ldr	r3, [pc, #56]	@ (8001774 <MX_TIM11_Init+0x40>)
 800173a:	4a0f      	ldr	r2, [pc, #60]	@ (8001778 <MX_TIM11_Init+0x44>)
 800173c:	601a      	str	r2, [r3, #0]
  htim11.Init.Prescaler = 99;
 800173e:	4b0d      	ldr	r3, [pc, #52]	@ (8001774 <MX_TIM11_Init+0x40>)
 8001740:	2263      	movs	r2, #99	@ 0x63
 8001742:	605a      	str	r2, [r3, #4]
  htim11.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001744:	4b0b      	ldr	r3, [pc, #44]	@ (8001774 <MX_TIM11_Init+0x40>)
 8001746:	2200      	movs	r2, #0
 8001748:	609a      	str	r2, [r3, #8]
  htim11.Init.Period = 839;
 800174a:	4b0a      	ldr	r3, [pc, #40]	@ (8001774 <MX_TIM11_Init+0x40>)
 800174c:	f240 3247 	movw	r2, #839	@ 0x347
 8001750:	60da      	str	r2, [r3, #12]
  htim11.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001752:	4b08      	ldr	r3, [pc, #32]	@ (8001774 <MX_TIM11_Init+0x40>)
 8001754:	2200      	movs	r2, #0
 8001756:	611a      	str	r2, [r3, #16]
  htim11.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001758:	4b06      	ldr	r3, [pc, #24]	@ (8001774 <MX_TIM11_Init+0x40>)
 800175a:	2200      	movs	r2, #0
 800175c:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim11) != HAL_OK)
 800175e:	4805      	ldr	r0, [pc, #20]	@ (8001774 <MX_TIM11_Init+0x40>)
 8001760:	f002 fe00 	bl	8004364 <HAL_TIM_Base_Init>
 8001764:	4603      	mov	r3, r0
 8001766:	2b00      	cmp	r3, #0
 8001768:	d001      	beq.n	800176e <MX_TIM11_Init+0x3a>
  {
    Error_Handler();
 800176a:	f000 f9b9 	bl	8001ae0 <Error_Handler>
  }
  /* USER CODE BEGIN TIM11_Init 2 */

  /* USER CODE END TIM11_Init 2 */

}
 800176e:	bf00      	nop
 8001770:	bd80      	pop	{r7, pc}
 8001772:	bf00      	nop
 8001774:	20000328 	.word	0x20000328
 8001778:	40014800 	.word	0x40014800

0800177c <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 800177c:	b580      	push	{r7, lr}
 800177e:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8001780:	4b11      	ldr	r3, [pc, #68]	@ (80017c8 <MX_USART2_UART_Init+0x4c>)
 8001782:	4a12      	ldr	r2, [pc, #72]	@ (80017cc <MX_USART2_UART_Init+0x50>)
 8001784:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8001786:	4b10      	ldr	r3, [pc, #64]	@ (80017c8 <MX_USART2_UART_Init+0x4c>)
 8001788:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 800178c:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 800178e:	4b0e      	ldr	r3, [pc, #56]	@ (80017c8 <MX_USART2_UART_Init+0x4c>)
 8001790:	2200      	movs	r2, #0
 8001792:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8001794:	4b0c      	ldr	r3, [pc, #48]	@ (80017c8 <MX_USART2_UART_Init+0x4c>)
 8001796:	2200      	movs	r2, #0
 8001798:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 800179a:	4b0b      	ldr	r3, [pc, #44]	@ (80017c8 <MX_USART2_UART_Init+0x4c>)
 800179c:	2200      	movs	r2, #0
 800179e:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 80017a0:	4b09      	ldr	r3, [pc, #36]	@ (80017c8 <MX_USART2_UART_Init+0x4c>)
 80017a2:	220c      	movs	r2, #12
 80017a4:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80017a6:	4b08      	ldr	r3, [pc, #32]	@ (80017c8 <MX_USART2_UART_Init+0x4c>)
 80017a8:	2200      	movs	r2, #0
 80017aa:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 80017ac:	4b06      	ldr	r3, [pc, #24]	@ (80017c8 <MX_USART2_UART_Init+0x4c>)
 80017ae:	2200      	movs	r2, #0
 80017b0:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 80017b2:	4805      	ldr	r0, [pc, #20]	@ (80017c8 <MX_USART2_UART_Init+0x4c>)
 80017b4:	f003 fea8 	bl	8005508 <HAL_UART_Init>
 80017b8:	4603      	mov	r3, r0
 80017ba:	2b00      	cmp	r3, #0
 80017bc:	d001      	beq.n	80017c2 <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 80017be:	f000 f98f 	bl	8001ae0 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 80017c2:	bf00      	nop
 80017c4:	bd80      	pop	{r7, pc}
 80017c6:	bf00      	nop
 80017c8:	20000370 	.word	0x20000370
 80017cc:	40004400 	.word	0x40004400

080017d0 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 80017d0:	b580      	push	{r7, lr}
 80017d2:	b082      	sub	sp, #8
 80017d4:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA2_CLK_ENABLE();
 80017d6:	2300      	movs	r3, #0
 80017d8:	607b      	str	r3, [r7, #4]
 80017da:	4b0c      	ldr	r3, [pc, #48]	@ (800180c <MX_DMA_Init+0x3c>)
 80017dc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80017de:	4a0b      	ldr	r2, [pc, #44]	@ (800180c <MX_DMA_Init+0x3c>)
 80017e0:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 80017e4:	6313      	str	r3, [r2, #48]	@ 0x30
 80017e6:	4b09      	ldr	r3, [pc, #36]	@ (800180c <MX_DMA_Init+0x3c>)
 80017e8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80017ea:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80017ee:	607b      	str	r3, [r7, #4]
 80017f0:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA2_Stream0_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream0_IRQn, 0, 0);
 80017f2:	2200      	movs	r2, #0
 80017f4:	2100      	movs	r1, #0
 80017f6:	2038      	movs	r0, #56	@ 0x38
 80017f8:	f001 f9cd 	bl	8002b96 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream0_IRQn);
 80017fc:	2038      	movs	r0, #56	@ 0x38
 80017fe:	f001 f9e6 	bl	8002bce <HAL_NVIC_EnableIRQ>

}
 8001802:	bf00      	nop
 8001804:	3708      	adds	r7, #8
 8001806:	46bd      	mov	sp, r7
 8001808:	bd80      	pop	{r7, pc}
 800180a:	bf00      	nop
 800180c:	40023800 	.word	0x40023800

08001810 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001810:	b580      	push	{r7, lr}
 8001812:	b08a      	sub	sp, #40	@ 0x28
 8001814:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001816:	f107 0314 	add.w	r3, r7, #20
 800181a:	2200      	movs	r2, #0
 800181c:	601a      	str	r2, [r3, #0]
 800181e:	605a      	str	r2, [r3, #4]
 8001820:	609a      	str	r2, [r3, #8]
 8001822:	60da      	str	r2, [r3, #12]
 8001824:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001826:	2300      	movs	r3, #0
 8001828:	613b      	str	r3, [r7, #16]
 800182a:	4b33      	ldr	r3, [pc, #204]	@ (80018f8 <MX_GPIO_Init+0xe8>)
 800182c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800182e:	4a32      	ldr	r2, [pc, #200]	@ (80018f8 <MX_GPIO_Init+0xe8>)
 8001830:	f043 0304 	orr.w	r3, r3, #4
 8001834:	6313      	str	r3, [r2, #48]	@ 0x30
 8001836:	4b30      	ldr	r3, [pc, #192]	@ (80018f8 <MX_GPIO_Init+0xe8>)
 8001838:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800183a:	f003 0304 	and.w	r3, r3, #4
 800183e:	613b      	str	r3, [r7, #16]
 8001840:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8001842:	2300      	movs	r3, #0
 8001844:	60fb      	str	r3, [r7, #12]
 8001846:	4b2c      	ldr	r3, [pc, #176]	@ (80018f8 <MX_GPIO_Init+0xe8>)
 8001848:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800184a:	4a2b      	ldr	r2, [pc, #172]	@ (80018f8 <MX_GPIO_Init+0xe8>)
 800184c:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8001850:	6313      	str	r3, [r2, #48]	@ 0x30
 8001852:	4b29      	ldr	r3, [pc, #164]	@ (80018f8 <MX_GPIO_Init+0xe8>)
 8001854:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001856:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800185a:	60fb      	str	r3, [r7, #12]
 800185c:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800185e:	2300      	movs	r3, #0
 8001860:	60bb      	str	r3, [r7, #8]
 8001862:	4b25      	ldr	r3, [pc, #148]	@ (80018f8 <MX_GPIO_Init+0xe8>)
 8001864:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001866:	4a24      	ldr	r2, [pc, #144]	@ (80018f8 <MX_GPIO_Init+0xe8>)
 8001868:	f043 0301 	orr.w	r3, r3, #1
 800186c:	6313      	str	r3, [r2, #48]	@ 0x30
 800186e:	4b22      	ldr	r3, [pc, #136]	@ (80018f8 <MX_GPIO_Init+0xe8>)
 8001870:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001872:	f003 0301 	and.w	r3, r3, #1
 8001876:	60bb      	str	r3, [r7, #8]
 8001878:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800187a:	2300      	movs	r3, #0
 800187c:	607b      	str	r3, [r7, #4]
 800187e:	4b1e      	ldr	r3, [pc, #120]	@ (80018f8 <MX_GPIO_Init+0xe8>)
 8001880:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001882:	4a1d      	ldr	r2, [pc, #116]	@ (80018f8 <MX_GPIO_Init+0xe8>)
 8001884:	f043 0302 	orr.w	r3, r3, #2
 8001888:	6313      	str	r3, [r2, #48]	@ 0x30
 800188a:	4b1b      	ldr	r3, [pc, #108]	@ (80018f8 <MX_GPIO_Init+0xe8>)
 800188c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800188e:	f003 0302 	and.w	r3, r3, #2
 8001892:	607b      	str	r3, [r7, #4]
 8001894:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 8001896:	2200      	movs	r2, #0
 8001898:	2120      	movs	r1, #32
 800189a:	4818      	ldr	r0, [pc, #96]	@ (80018fc <MX_GPIO_Init+0xec>)
 800189c:	f001 ff60 	bl	8003760 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 80018a0:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 80018a4:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 80018a6:	f44f 1304 	mov.w	r3, #2162688	@ 0x210000
 80018aa:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80018ac:	2300      	movs	r3, #0
 80018ae:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 80018b0:	f107 0314 	add.w	r3, r7, #20
 80018b4:	4619      	mov	r1, r3
 80018b6:	4812      	ldr	r0, [pc, #72]	@ (8001900 <MX_GPIO_Init+0xf0>)
 80018b8:	f001 fda6 	bl	8003408 <HAL_GPIO_Init>

  /*Configure GPIO pins : BOTAO_Pin BOTAO_OFFSET_Pin */
  GPIO_InitStruct.Pin = BOTAO_Pin|BOTAO_OFFSET_Pin;
 80018bc:	2303      	movs	r3, #3
 80018be:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80018c0:	2300      	movs	r3, #0
 80018c2:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80018c4:	2300      	movs	r3, #0
 80018c6:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80018c8:	f107 0314 	add.w	r3, r7, #20
 80018cc:	4619      	mov	r1, r3
 80018ce:	480c      	ldr	r0, [pc, #48]	@ (8001900 <MX_GPIO_Init+0xf0>)
 80018d0:	f001 fd9a 	bl	8003408 <HAL_GPIO_Init>

  /*Configure GPIO pin : LD2_Pin */
  GPIO_InitStruct.Pin = LD2_Pin;
 80018d4:	2320      	movs	r3, #32
 80018d6:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80018d8:	2301      	movs	r3, #1
 80018da:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80018dc:	2300      	movs	r3, #0
 80018de:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80018e0:	2300      	movs	r3, #0
 80018e2:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 80018e4:	f107 0314 	add.w	r3, r7, #20
 80018e8:	4619      	mov	r1, r3
 80018ea:	4804      	ldr	r0, [pc, #16]	@ (80018fc <MX_GPIO_Init+0xec>)
 80018ec:	f001 fd8c 	bl	8003408 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 80018f0:	bf00      	nop
 80018f2:	3728      	adds	r7, #40	@ 0x28
 80018f4:	46bd      	mov	sp, r7
 80018f6:	bd80      	pop	{r7, pc}
 80018f8:	40023800 	.word	0x40023800
 80018fc:	40020000 	.word	0x40020000
 8001900:	40020800 	.word	0x40020800

08001904 <HAL_TIM_PeriodElapsedCallback>:

/* USER CODE BEGIN 4 */

void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8001904:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8001908:	b096      	sub	sp, #88	@ 0x58
 800190a:	af0e      	add	r7, sp, #56	@ 0x38
 800190c:	61f8      	str	r0, [r7, #28]
	if (htim->Instance==TIM10)
 800190e:	69fb      	ldr	r3, [r7, #28]
 8001910:	681b      	ldr	r3, [r3, #0]
 8001912:	4a35      	ldr	r2, [pc, #212]	@ (80019e8 <HAL_TIM_PeriodElapsedCallback+0xe4>)
 8001914:	4293      	cmp	r3, r2
 8001916:	d162      	bne.n	80019de <HAL_TIM_PeriodElapsedCallback+0xda>
	{
		snprintf(msg, msgSIZE, "{\"x\": %.2f ,\"y\": %.2f, \"z\": %.2f, \"angulo1\": %.2f, \"angulo2\": %.2f, \"angulo3\": %.2f, \"angulo4\": %.2f}\n",
 8001918:	4b34      	ldr	r3, [pc, #208]	@ (80019ec <HAL_TIM_PeriodElapsedCallback+0xe8>)
 800191a:	681b      	ldr	r3, [r3, #0]
 800191c:	4618      	mov	r0, r3
 800191e:	f7fe fe33 	bl	8000588 <__aeabi_f2d>
 8001922:	4680      	mov	r8, r0
 8001924:	4689      	mov	r9, r1
 8001926:	4b32      	ldr	r3, [pc, #200]	@ (80019f0 <HAL_TIM_PeriodElapsedCallback+0xec>)
 8001928:	681b      	ldr	r3, [r3, #0]
 800192a:	4618      	mov	r0, r3
 800192c:	f7fe fe2c 	bl	8000588 <__aeabi_f2d>
 8001930:	4682      	mov	sl, r0
 8001932:	468b      	mov	fp, r1
 8001934:	4b2f      	ldr	r3, [pc, #188]	@ (80019f4 <HAL_TIM_PeriodElapsedCallback+0xf0>)
 8001936:	681b      	ldr	r3, [r3, #0]
 8001938:	4618      	mov	r0, r3
 800193a:	f7fe fe25 	bl	8000588 <__aeabi_f2d>
 800193e:	e9c7 0104 	strd	r0, r1, [r7, #16]
				x, y, z, angulos_graus[0], angulos_graus[1] - angulos_graus[0], angulos_graus[2] - angulos_graus[1], angulos_graus[3]);
 8001942:	4b2d      	ldr	r3, [pc, #180]	@ (80019f8 <HAL_TIM_PeriodElapsedCallback+0xf4>)
 8001944:	681b      	ldr	r3, [r3, #0]
		snprintf(msg, msgSIZE, "{\"x\": %.2f ,\"y\": %.2f, \"z\": %.2f, \"angulo1\": %.2f, \"angulo2\": %.2f, \"angulo3\": %.2f, \"angulo4\": %.2f}\n",
 8001946:	4618      	mov	r0, r3
 8001948:	f7fe fe1e 	bl	8000588 <__aeabi_f2d>
 800194c:	e9c7 0102 	strd	r0, r1, [r7, #8]
				x, y, z, angulos_graus[0], angulos_graus[1] - angulos_graus[0], angulos_graus[2] - angulos_graus[1], angulos_graus[3]);
 8001950:	4b29      	ldr	r3, [pc, #164]	@ (80019f8 <HAL_TIM_PeriodElapsedCallback+0xf4>)
 8001952:	ed93 7a01 	vldr	s14, [r3, #4]
 8001956:	4b28      	ldr	r3, [pc, #160]	@ (80019f8 <HAL_TIM_PeriodElapsedCallback+0xf4>)
 8001958:	edd3 7a00 	vldr	s15, [r3]
 800195c:	ee77 7a67 	vsub.f32	s15, s14, s15
		snprintf(msg, msgSIZE, "{\"x\": %.2f ,\"y\": %.2f, \"z\": %.2f, \"angulo1\": %.2f, \"angulo2\": %.2f, \"angulo3\": %.2f, \"angulo4\": %.2f}\n",
 8001960:	ee17 0a90 	vmov	r0, s15
 8001964:	f7fe fe10 	bl	8000588 <__aeabi_f2d>
 8001968:	e9c7 0100 	strd	r0, r1, [r7]
				x, y, z, angulos_graus[0], angulos_graus[1] - angulos_graus[0], angulos_graus[2] - angulos_graus[1], angulos_graus[3]);
 800196c:	4b22      	ldr	r3, [pc, #136]	@ (80019f8 <HAL_TIM_PeriodElapsedCallback+0xf4>)
 800196e:	ed93 7a02 	vldr	s14, [r3, #8]
 8001972:	4b21      	ldr	r3, [pc, #132]	@ (80019f8 <HAL_TIM_PeriodElapsedCallback+0xf4>)
 8001974:	edd3 7a01 	vldr	s15, [r3, #4]
 8001978:	ee77 7a67 	vsub.f32	s15, s14, s15
		snprintf(msg, msgSIZE, "{\"x\": %.2f ,\"y\": %.2f, \"z\": %.2f, \"angulo1\": %.2f, \"angulo2\": %.2f, \"angulo3\": %.2f, \"angulo4\": %.2f}\n",
 800197c:	ee17 0a90 	vmov	r0, s15
 8001980:	f7fe fe02 	bl	8000588 <__aeabi_f2d>
 8001984:	4604      	mov	r4, r0
 8001986:	460d      	mov	r5, r1
				x, y, z, angulos_graus[0], angulos_graus[1] - angulos_graus[0], angulos_graus[2] - angulos_graus[1], angulos_graus[3]);
 8001988:	4b1b      	ldr	r3, [pc, #108]	@ (80019f8 <HAL_TIM_PeriodElapsedCallback+0xf4>)
 800198a:	68db      	ldr	r3, [r3, #12]
		snprintf(msg, msgSIZE, "{\"x\": %.2f ,\"y\": %.2f, \"z\": %.2f, \"angulo1\": %.2f, \"angulo2\": %.2f, \"angulo3\": %.2f, \"angulo4\": %.2f}\n",
 800198c:	4618      	mov	r0, r3
 800198e:	f7fe fdfb 	bl	8000588 <__aeabi_f2d>
 8001992:	4602      	mov	r2, r0
 8001994:	460b      	mov	r3, r1
 8001996:	e9cd 230c 	strd	r2, r3, [sp, #48]	@ 0x30
 800199a:	e9cd 450a 	strd	r4, r5, [sp, #40]	@ 0x28
 800199e:	ed97 7b00 	vldr	d7, [r7]
 80019a2:	ed8d 7b08 	vstr	d7, [sp, #32]
 80019a6:	ed97 7b02 	vldr	d7, [r7, #8]
 80019aa:	ed8d 7b06 	vstr	d7, [sp, #24]
 80019ae:	ed97 7b04 	vldr	d7, [r7, #16]
 80019b2:	ed8d 7b04 	vstr	d7, [sp, #16]
 80019b6:	e9cd ab02 	strd	sl, fp, [sp, #8]
 80019ba:	e9cd 8900 	strd	r8, r9, [sp]
 80019be:	4a0f      	ldr	r2, [pc, #60]	@ (80019fc <HAL_TIM_PeriodElapsedCallback+0xf8>)
 80019c0:	f44f 71fa 	mov.w	r1, #500	@ 0x1f4
 80019c4:	480e      	ldr	r0, [pc, #56]	@ (8001a00 <HAL_TIM_PeriodElapsedCallback+0xfc>)
 80019c6:	f005 fa63 	bl	8006e90 <sniprintf>
		HAL_UART_Transmit_IT(&huart2, msg, strlen(msg));
 80019ca:	480d      	ldr	r0, [pc, #52]	@ (8001a00 <HAL_TIM_PeriodElapsedCallback+0xfc>)
 80019cc:	f7fe fc70 	bl	80002b0 <strlen>
 80019d0:	4603      	mov	r3, r0
 80019d2:	b29b      	uxth	r3, r3
 80019d4:	461a      	mov	r2, r3
 80019d6:	490a      	ldr	r1, [pc, #40]	@ (8001a00 <HAL_TIM_PeriodElapsedCallback+0xfc>)
 80019d8:	480a      	ldr	r0, [pc, #40]	@ (8001a04 <HAL_TIM_PeriodElapsedCallback+0x100>)
 80019da:	f003 fde5 	bl	80055a8 <HAL_UART_Transmit_IT>
	}
}
 80019de:	bf00      	nop
 80019e0:	3720      	adds	r7, #32
 80019e2:	46bd      	mov	sp, r7
 80019e4:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80019e8:	40014400 	.word	0x40014400
 80019ec:	20000400 	.word	0x20000400
 80019f0:	20000404 	.word	0x20000404
 80019f4:	200003fc 	.word	0x200003fc
 80019f8:	200003e8 	.word	0x200003e8
 80019fc:	0800a2a4 	.word	0x0800a2a4
 8001a00:	20000408 	.word	0x20000408
 8001a04:	20000370 	.word	0x20000370

08001a08 <HAL_UART_RxCpltCallback>:

void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8001a08:	b580      	push	{r7, lr}
 8001a0a:	b084      	sub	sp, #16
 8001a0c:	af00      	add	r7, sp, #0
 8001a0e:	6078      	str	r0, [r7, #4]
	for(int u = 0; u < N_AMOSTRAS; u++){
 8001a10:	2300      	movs	r3, #0
 8001a12:	60fb      	str	r3, [r7, #12]
 8001a14:	e00b      	b.n	8001a2e <HAL_UART_RxCpltCallback+0x26>
		OFFSETS[u] = medidas[u];
 8001a16:	4a0d      	ldr	r2, [pc, #52]	@ (8001a4c <HAL_UART_RxCpltCallback+0x44>)
 8001a18:	68fb      	ldr	r3, [r7, #12]
 8001a1a:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8001a1e:	b299      	uxth	r1, r3
 8001a20:	4a0b      	ldr	r2, [pc, #44]	@ (8001a50 <HAL_UART_RxCpltCallback+0x48>)
 8001a22:	68fb      	ldr	r3, [r7, #12]
 8001a24:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
	for(int u = 0; u < N_AMOSTRAS; u++){
 8001a28:	68fb      	ldr	r3, [r7, #12]
 8001a2a:	3301      	adds	r3, #1
 8001a2c:	60fb      	str	r3, [r7, #12]
 8001a2e:	68fb      	ldr	r3, [r7, #12]
 8001a30:	2b03      	cmp	r3, #3
 8001a32:	ddf0      	ble.n	8001a16 <HAL_UART_RxCpltCallback+0xe>
	}
	HAL_UART_Receive_IT(&huart2, set_offset ,1);
 8001a34:	4b07      	ldr	r3, [pc, #28]	@ (8001a54 <HAL_UART_RxCpltCallback+0x4c>)
 8001a36:	781b      	ldrb	r3, [r3, #0]
 8001a38:	2201      	movs	r2, #1
 8001a3a:	4619      	mov	r1, r3
 8001a3c:	4806      	ldr	r0, [pc, #24]	@ (8001a58 <HAL_UART_RxCpltCallback+0x50>)
 8001a3e:	f003 fde9 	bl	8005614 <HAL_UART_Receive_IT>
}
 8001a42:	bf00      	nop
 8001a44:	3710      	adds	r7, #16
 8001a46:	46bd      	mov	sp, r7
 8001a48:	bd80      	pop	{r7, pc}
 8001a4a:	bf00      	nop
 8001a4c:	200003b8 	.word	0x200003b8
 8001a50:	200003c0 	.word	0x200003c0
 8001a54:	200003c9 	.word	0x200003c9
 8001a58:	20000370 	.word	0x20000370

08001a5c <HAL_ADC_ConvCpltCallback>:

void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef* hadc){
 8001a5c:	b580      	push	{r7, lr}
 8001a5e:	b082      	sub	sp, #8
 8001a60:	af00      	add	r7, sp, #0
 8001a62:	6078      	str	r0, [r7, #4]

	calc_ang();
 8001a64:	f7ff fa88 	bl	8000f78 <calc_ang>

	r = calc_r(); // Distancia radial
 8001a68:	f7ff fafc 	bl	8001064 <calc_r>
 8001a6c:	eef0 7a40 	vmov.f32	s15, s0
 8001a70:	4b15      	ldr	r3, [pc, #84]	@ (8001ac8 <HAL_ADC_ConvCpltCallback+0x6c>)
 8001a72:	edc3 7a00 	vstr	s15, [r3]
	z = calc_z();
 8001a76:	f7ff fb43 	bl	8001100 <calc_z>
 8001a7a:	eef0 7a40 	vmov.f32	s15, s0
 8001a7e:	4b13      	ldr	r3, [pc, #76]	@ (8001acc <HAL_ADC_ConvCpltCallback+0x70>)
 8001a80:	edc3 7a00 	vstr	s15, [r3]
	x = calc_x(r);
 8001a84:	4b10      	ldr	r3, [pc, #64]	@ (8001ac8 <HAL_ADC_ConvCpltCallback+0x6c>)
 8001a86:	edd3 7a00 	vldr	s15, [r3]
 8001a8a:	eeb0 0a67 	vmov.f32	s0, s15
 8001a8e:	f7ff fb89 	bl	80011a4 <calc_x>
 8001a92:	eef0 7a40 	vmov.f32	s15, s0
 8001a96:	4b0e      	ldr	r3, [pc, #56]	@ (8001ad0 <HAL_ADC_ConvCpltCallback+0x74>)
 8001a98:	edc3 7a00 	vstr	s15, [r3]
	y = calc_y(r);
 8001a9c:	4b0a      	ldr	r3, [pc, #40]	@ (8001ac8 <HAL_ADC_ConvCpltCallback+0x6c>)
 8001a9e:	edd3 7a00 	vldr	s15, [r3]
 8001aa2:	eeb0 0a67 	vmov.f32	s0, s15
 8001aa6:	f7ff fbad 	bl	8001204 <calc_y>
 8001aaa:	eef0 7a40 	vmov.f32	s15, s0
 8001aae:	4b09      	ldr	r3, [pc, #36]	@ (8001ad4 <HAL_ADC_ConvCpltCallback+0x78>)
 8001ab0:	edc3 7a00 	vstr	s15, [r3]


	//snprintf(msg, msgSIZE, "{\"x\": %.2f ,\"y\": %.2f, \"z\": %.2f, \"angulo1\": %i, \"angulo2\": %.2f, \"angulo3\": %.2f, \"angulo4\": %.2f}\n",x, y, z, angulos_graus[0], angulos_graus[1], angulos_graus[2], angulos_graus[3]);
	HAL_ADC_Start_DMA(&hadc1, medidas, N_AMOSTRAS);
 8001ab4:	2204      	movs	r2, #4
 8001ab6:	4908      	ldr	r1, [pc, #32]	@ (8001ad8 <HAL_ADC_ConvCpltCallback+0x7c>)
 8001ab8:	4808      	ldr	r0, [pc, #32]	@ (8001adc <HAL_ADC_ConvCpltCallback+0x80>)
 8001aba:	f000 fbbd 	bl	8002238 <HAL_ADC_Start_DMA>

}
 8001abe:	bf00      	nop
 8001ac0:	3708      	adds	r7, #8
 8001ac2:	46bd      	mov	sp, r7
 8001ac4:	bd80      	pop	{r7, pc}
 8001ac6:	bf00      	nop
 8001ac8:	200003f8 	.word	0x200003f8
 8001acc:	200003fc 	.word	0x200003fc
 8001ad0:	20000400 	.word	0x20000400
 8001ad4:	20000404 	.word	0x20000404
 8001ad8:	200003b8 	.word	0x200003b8
 8001adc:	200001f0 	.word	0x200001f0

08001ae0 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001ae0:	b480      	push	{r7}
 8001ae2:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001ae4:	b672      	cpsid	i
}
 8001ae6:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001ae8:	bf00      	nop
 8001aea:	e7fd      	b.n	8001ae8 <Error_Handler+0x8>

08001aec <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001aec:	b580      	push	{r7, lr}
 8001aee:	b082      	sub	sp, #8
 8001af0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001af2:	2300      	movs	r3, #0
 8001af4:	607b      	str	r3, [r7, #4]
 8001af6:	4b10      	ldr	r3, [pc, #64]	@ (8001b38 <HAL_MspInit+0x4c>)
 8001af8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001afa:	4a0f      	ldr	r2, [pc, #60]	@ (8001b38 <HAL_MspInit+0x4c>)
 8001afc:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8001b00:	6453      	str	r3, [r2, #68]	@ 0x44
 8001b02:	4b0d      	ldr	r3, [pc, #52]	@ (8001b38 <HAL_MspInit+0x4c>)
 8001b04:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001b06:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8001b0a:	607b      	str	r3, [r7, #4]
 8001b0c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001b0e:	2300      	movs	r3, #0
 8001b10:	603b      	str	r3, [r7, #0]
 8001b12:	4b09      	ldr	r3, [pc, #36]	@ (8001b38 <HAL_MspInit+0x4c>)
 8001b14:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001b16:	4a08      	ldr	r2, [pc, #32]	@ (8001b38 <HAL_MspInit+0x4c>)
 8001b18:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001b1c:	6413      	str	r3, [r2, #64]	@ 0x40
 8001b1e:	4b06      	ldr	r3, [pc, #24]	@ (8001b38 <HAL_MspInit+0x4c>)
 8001b20:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001b22:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001b26:	603b      	str	r3, [r7, #0]
 8001b28:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 8001b2a:	2007      	movs	r0, #7
 8001b2c:	f001 f828 	bl	8002b80 <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001b30:	bf00      	nop
 8001b32:	3708      	adds	r7, #8
 8001b34:	46bd      	mov	sp, r7
 8001b36:	bd80      	pop	{r7, pc}
 8001b38:	40023800 	.word	0x40023800

08001b3c <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8001b3c:	b580      	push	{r7, lr}
 8001b3e:	b08a      	sub	sp, #40	@ 0x28
 8001b40:	af00      	add	r7, sp, #0
 8001b42:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001b44:	f107 0314 	add.w	r3, r7, #20
 8001b48:	2200      	movs	r2, #0
 8001b4a:	601a      	str	r2, [r3, #0]
 8001b4c:	605a      	str	r2, [r3, #4]
 8001b4e:	609a      	str	r2, [r3, #8]
 8001b50:	60da      	str	r2, [r3, #12]
 8001b52:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC1)
 8001b54:	687b      	ldr	r3, [r7, #4]
 8001b56:	681b      	ldr	r3, [r3, #0]
 8001b58:	4a2e      	ldr	r2, [pc, #184]	@ (8001c14 <HAL_ADC_MspInit+0xd8>)
 8001b5a:	4293      	cmp	r3, r2
 8001b5c:	d156      	bne.n	8001c0c <HAL_ADC_MspInit+0xd0>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 8001b5e:	2300      	movs	r3, #0
 8001b60:	613b      	str	r3, [r7, #16]
 8001b62:	4b2d      	ldr	r3, [pc, #180]	@ (8001c18 <HAL_ADC_MspInit+0xdc>)
 8001b64:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001b66:	4a2c      	ldr	r2, [pc, #176]	@ (8001c18 <HAL_ADC_MspInit+0xdc>)
 8001b68:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8001b6c:	6453      	str	r3, [r2, #68]	@ 0x44
 8001b6e:	4b2a      	ldr	r3, [pc, #168]	@ (8001c18 <HAL_ADC_MspInit+0xdc>)
 8001b70:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001b72:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001b76:	613b      	str	r3, [r7, #16]
 8001b78:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001b7a:	2300      	movs	r3, #0
 8001b7c:	60fb      	str	r3, [r7, #12]
 8001b7e:	4b26      	ldr	r3, [pc, #152]	@ (8001c18 <HAL_ADC_MspInit+0xdc>)
 8001b80:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001b82:	4a25      	ldr	r2, [pc, #148]	@ (8001c18 <HAL_ADC_MspInit+0xdc>)
 8001b84:	f043 0301 	orr.w	r3, r3, #1
 8001b88:	6313      	str	r3, [r2, #48]	@ 0x30
 8001b8a:	4b23      	ldr	r3, [pc, #140]	@ (8001c18 <HAL_ADC_MspInit+0xdc>)
 8001b8c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001b8e:	f003 0301 	and.w	r3, r3, #1
 8001b92:	60fb      	str	r3, [r7, #12]
 8001b94:	68fb      	ldr	r3, [r7, #12]
    PA0-WKUP     ------> ADC1_IN0
    PA1     ------> ADC1_IN1
    PA4     ------> ADC1_IN4
    PA6     ------> ADC1_IN6
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_4|GPIO_PIN_6;
 8001b96:	2353      	movs	r3, #83	@ 0x53
 8001b98:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001b9a:	2303      	movs	r3, #3
 8001b9c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001b9e:	2300      	movs	r3, #0
 8001ba0:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001ba2:	f107 0314 	add.w	r3, r7, #20
 8001ba6:	4619      	mov	r1, r3
 8001ba8:	481c      	ldr	r0, [pc, #112]	@ (8001c1c <HAL_ADC_MspInit+0xe0>)
 8001baa:	f001 fc2d 	bl	8003408 <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC1 Init */
    hdma_adc1.Instance = DMA2_Stream0;
 8001bae:	4b1c      	ldr	r3, [pc, #112]	@ (8001c20 <HAL_ADC_MspInit+0xe4>)
 8001bb0:	4a1c      	ldr	r2, [pc, #112]	@ (8001c24 <HAL_ADC_MspInit+0xe8>)
 8001bb2:	601a      	str	r2, [r3, #0]
    hdma_adc1.Init.Channel = DMA_CHANNEL_0;
 8001bb4:	4b1a      	ldr	r3, [pc, #104]	@ (8001c20 <HAL_ADC_MspInit+0xe4>)
 8001bb6:	2200      	movs	r2, #0
 8001bb8:	605a      	str	r2, [r3, #4]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8001bba:	4b19      	ldr	r3, [pc, #100]	@ (8001c20 <HAL_ADC_MspInit+0xe4>)
 8001bbc:	2200      	movs	r2, #0
 8001bbe:	609a      	str	r2, [r3, #8]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 8001bc0:	4b17      	ldr	r3, [pc, #92]	@ (8001c20 <HAL_ADC_MspInit+0xe4>)
 8001bc2:	2200      	movs	r2, #0
 8001bc4:	60da      	str	r2, [r3, #12]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 8001bc6:	4b16      	ldr	r3, [pc, #88]	@ (8001c20 <HAL_ADC_MspInit+0xe4>)
 8001bc8:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8001bcc:	611a      	str	r2, [r3, #16]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8001bce:	4b14      	ldr	r3, [pc, #80]	@ (8001c20 <HAL_ADC_MspInit+0xe4>)
 8001bd0:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8001bd4:	615a      	str	r2, [r3, #20]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8001bd6:	4b12      	ldr	r3, [pc, #72]	@ (8001c20 <HAL_ADC_MspInit+0xe4>)
 8001bd8:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8001bdc:	619a      	str	r2, [r3, #24]
    hdma_adc1.Init.Mode = DMA_NORMAL;
 8001bde:	4b10      	ldr	r3, [pc, #64]	@ (8001c20 <HAL_ADC_MspInit+0xe4>)
 8001be0:	2200      	movs	r2, #0
 8001be2:	61da      	str	r2, [r3, #28]
    hdma_adc1.Init.Priority = DMA_PRIORITY_LOW;
 8001be4:	4b0e      	ldr	r3, [pc, #56]	@ (8001c20 <HAL_ADC_MspInit+0xe4>)
 8001be6:	2200      	movs	r2, #0
 8001be8:	621a      	str	r2, [r3, #32]
    hdma_adc1.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8001bea:	4b0d      	ldr	r3, [pc, #52]	@ (8001c20 <HAL_ADC_MspInit+0xe4>)
 8001bec:	2200      	movs	r2, #0
 8001bee:	625a      	str	r2, [r3, #36]	@ 0x24
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 8001bf0:	480b      	ldr	r0, [pc, #44]	@ (8001c20 <HAL_ADC_MspInit+0xe4>)
 8001bf2:	f001 f807 	bl	8002c04 <HAL_DMA_Init>
 8001bf6:	4603      	mov	r3, r0
 8001bf8:	2b00      	cmp	r3, #0
 8001bfa:	d001      	beq.n	8001c00 <HAL_ADC_MspInit+0xc4>
    {
      Error_Handler();
 8001bfc:	f7ff ff70 	bl	8001ae0 <Error_Handler>
    }

    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc1);
 8001c00:	687b      	ldr	r3, [r7, #4]
 8001c02:	4a07      	ldr	r2, [pc, #28]	@ (8001c20 <HAL_ADC_MspInit+0xe4>)
 8001c04:	639a      	str	r2, [r3, #56]	@ 0x38
 8001c06:	4a06      	ldr	r2, [pc, #24]	@ (8001c20 <HAL_ADC_MspInit+0xe4>)
 8001c08:	687b      	ldr	r3, [r7, #4]
 8001c0a:	6393      	str	r3, [r2, #56]	@ 0x38

  /* USER CODE END ADC1_MspInit 1 */

  }

}
 8001c0c:	bf00      	nop
 8001c0e:	3728      	adds	r7, #40	@ 0x28
 8001c10:	46bd      	mov	sp, r7
 8001c12:	bd80      	pop	{r7, pc}
 8001c14:	40012000 	.word	0x40012000
 8001c18:	40023800 	.word	0x40023800
 8001c1c:	40020000 	.word	0x40020000
 8001c20:	20000238 	.word	0x20000238
 8001c24:	40026410 	.word	0x40026410

08001c28 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8001c28:	b580      	push	{r7, lr}
 8001c2a:	b086      	sub	sp, #24
 8001c2c:	af00      	add	r7, sp, #0
 8001c2e:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM8)
 8001c30:	687b      	ldr	r3, [r7, #4]
 8001c32:	681b      	ldr	r3, [r3, #0]
 8001c34:	4a2a      	ldr	r2, [pc, #168]	@ (8001ce0 <HAL_TIM_Base_MspInit+0xb8>)
 8001c36:	4293      	cmp	r3, r2
 8001c38:	d11e      	bne.n	8001c78 <HAL_TIM_Base_MspInit+0x50>
  {
  /* USER CODE BEGIN TIM8_MspInit 0 */

  /* USER CODE END TIM8_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM8_CLK_ENABLE();
 8001c3a:	2300      	movs	r3, #0
 8001c3c:	617b      	str	r3, [r7, #20]
 8001c3e:	4b29      	ldr	r3, [pc, #164]	@ (8001ce4 <HAL_TIM_Base_MspInit+0xbc>)
 8001c40:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001c42:	4a28      	ldr	r2, [pc, #160]	@ (8001ce4 <HAL_TIM_Base_MspInit+0xbc>)
 8001c44:	f043 0302 	orr.w	r3, r3, #2
 8001c48:	6453      	str	r3, [r2, #68]	@ 0x44
 8001c4a:	4b26      	ldr	r3, [pc, #152]	@ (8001ce4 <HAL_TIM_Base_MspInit+0xbc>)
 8001c4c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001c4e:	f003 0302 	and.w	r3, r3, #2
 8001c52:	617b      	str	r3, [r7, #20]
 8001c54:	697b      	ldr	r3, [r7, #20]
    /* TIM8 interrupt Init */
    HAL_NVIC_SetPriority(TIM8_UP_TIM13_IRQn, 0, 0);
 8001c56:	2200      	movs	r2, #0
 8001c58:	2100      	movs	r1, #0
 8001c5a:	202c      	movs	r0, #44	@ 0x2c
 8001c5c:	f000 ff9b 	bl	8002b96 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM8_UP_TIM13_IRQn);
 8001c60:	202c      	movs	r0, #44	@ 0x2c
 8001c62:	f000 ffb4 	bl	8002bce <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(TIM8_CC_IRQn, 0, 0);
 8001c66:	2200      	movs	r2, #0
 8001c68:	2100      	movs	r1, #0
 8001c6a:	202e      	movs	r0, #46	@ 0x2e
 8001c6c:	f000 ff93 	bl	8002b96 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM8_CC_IRQn);
 8001c70:	202e      	movs	r0, #46	@ 0x2e
 8001c72:	f000 ffac 	bl	8002bce <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM11_MspInit 1 */

  /* USER CODE END TIM11_MspInit 1 */
  }

}
 8001c76:	e02e      	b.n	8001cd6 <HAL_TIM_Base_MspInit+0xae>
  else if(htim_base->Instance==TIM10)
 8001c78:	687b      	ldr	r3, [r7, #4]
 8001c7a:	681b      	ldr	r3, [r3, #0]
 8001c7c:	4a1a      	ldr	r2, [pc, #104]	@ (8001ce8 <HAL_TIM_Base_MspInit+0xc0>)
 8001c7e:	4293      	cmp	r3, r2
 8001c80:	d116      	bne.n	8001cb0 <HAL_TIM_Base_MspInit+0x88>
    __HAL_RCC_TIM10_CLK_ENABLE();
 8001c82:	2300      	movs	r3, #0
 8001c84:	613b      	str	r3, [r7, #16]
 8001c86:	4b17      	ldr	r3, [pc, #92]	@ (8001ce4 <HAL_TIM_Base_MspInit+0xbc>)
 8001c88:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001c8a:	4a16      	ldr	r2, [pc, #88]	@ (8001ce4 <HAL_TIM_Base_MspInit+0xbc>)
 8001c8c:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8001c90:	6453      	str	r3, [r2, #68]	@ 0x44
 8001c92:	4b14      	ldr	r3, [pc, #80]	@ (8001ce4 <HAL_TIM_Base_MspInit+0xbc>)
 8001c94:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001c96:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001c9a:	613b      	str	r3, [r7, #16]
 8001c9c:	693b      	ldr	r3, [r7, #16]
    HAL_NVIC_SetPriority(TIM1_UP_TIM10_IRQn, 0, 0);
 8001c9e:	2200      	movs	r2, #0
 8001ca0:	2100      	movs	r1, #0
 8001ca2:	2019      	movs	r0, #25
 8001ca4:	f000 ff77 	bl	8002b96 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_UP_TIM10_IRQn);
 8001ca8:	2019      	movs	r0, #25
 8001caa:	f000 ff90 	bl	8002bce <HAL_NVIC_EnableIRQ>
}
 8001cae:	e012      	b.n	8001cd6 <HAL_TIM_Base_MspInit+0xae>
  else if(htim_base->Instance==TIM11)
 8001cb0:	687b      	ldr	r3, [r7, #4]
 8001cb2:	681b      	ldr	r3, [r3, #0]
 8001cb4:	4a0d      	ldr	r2, [pc, #52]	@ (8001cec <HAL_TIM_Base_MspInit+0xc4>)
 8001cb6:	4293      	cmp	r3, r2
 8001cb8:	d10d      	bne.n	8001cd6 <HAL_TIM_Base_MspInit+0xae>
    __HAL_RCC_TIM11_CLK_ENABLE();
 8001cba:	2300      	movs	r3, #0
 8001cbc:	60fb      	str	r3, [r7, #12]
 8001cbe:	4b09      	ldr	r3, [pc, #36]	@ (8001ce4 <HAL_TIM_Base_MspInit+0xbc>)
 8001cc0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001cc2:	4a08      	ldr	r2, [pc, #32]	@ (8001ce4 <HAL_TIM_Base_MspInit+0xbc>)
 8001cc4:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8001cc8:	6453      	str	r3, [r2, #68]	@ 0x44
 8001cca:	4b06      	ldr	r3, [pc, #24]	@ (8001ce4 <HAL_TIM_Base_MspInit+0xbc>)
 8001ccc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001cce:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8001cd2:	60fb      	str	r3, [r7, #12]
 8001cd4:	68fb      	ldr	r3, [r7, #12]
}
 8001cd6:	bf00      	nop
 8001cd8:	3718      	adds	r7, #24
 8001cda:	46bd      	mov	sp, r7
 8001cdc:	bd80      	pop	{r7, pc}
 8001cde:	bf00      	nop
 8001ce0:	40010400 	.word	0x40010400
 8001ce4:	40023800 	.word	0x40023800
 8001ce8:	40014400 	.word	0x40014400
 8001cec:	40014800 	.word	0x40014800

08001cf0 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8001cf0:	b580      	push	{r7, lr}
 8001cf2:	b088      	sub	sp, #32
 8001cf4:	af00      	add	r7, sp, #0
 8001cf6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001cf8:	f107 030c 	add.w	r3, r7, #12
 8001cfc:	2200      	movs	r2, #0
 8001cfe:	601a      	str	r2, [r3, #0]
 8001d00:	605a      	str	r2, [r3, #4]
 8001d02:	609a      	str	r2, [r3, #8]
 8001d04:	60da      	str	r2, [r3, #12]
 8001d06:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM8)
 8001d08:	687b      	ldr	r3, [r7, #4]
 8001d0a:	681b      	ldr	r3, [r3, #0]
 8001d0c:	4a12      	ldr	r2, [pc, #72]	@ (8001d58 <HAL_TIM_MspPostInit+0x68>)
 8001d0e:	4293      	cmp	r3, r2
 8001d10:	d11d      	bne.n	8001d4e <HAL_TIM_MspPostInit+0x5e>
  {
  /* USER CODE BEGIN TIM8_MspPostInit 0 */

  /* USER CODE END TIM8_MspPostInit 0 */

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001d12:	2300      	movs	r3, #0
 8001d14:	60bb      	str	r3, [r7, #8]
 8001d16:	4b11      	ldr	r3, [pc, #68]	@ (8001d5c <HAL_TIM_MspPostInit+0x6c>)
 8001d18:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001d1a:	4a10      	ldr	r2, [pc, #64]	@ (8001d5c <HAL_TIM_MspPostInit+0x6c>)
 8001d1c:	f043 0304 	orr.w	r3, r3, #4
 8001d20:	6313      	str	r3, [r2, #48]	@ 0x30
 8001d22:	4b0e      	ldr	r3, [pc, #56]	@ (8001d5c <HAL_TIM_MspPostInit+0x6c>)
 8001d24:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001d26:	f003 0304 	and.w	r3, r3, #4
 8001d2a:	60bb      	str	r3, [r7, #8]
 8001d2c:	68bb      	ldr	r3, [r7, #8]
    /**TIM8 GPIO Configuration
    PC6     ------> TIM8_CH1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6;
 8001d2e:	2340      	movs	r3, #64	@ 0x40
 8001d30:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001d32:	2302      	movs	r3, #2
 8001d34:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001d36:	2300      	movs	r3, #0
 8001d38:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001d3a:	2300      	movs	r3, #0
 8001d3c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF3_TIM8;
 8001d3e:	2303      	movs	r3, #3
 8001d40:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001d42:	f107 030c 	add.w	r3, r7, #12
 8001d46:	4619      	mov	r1, r3
 8001d48:	4805      	ldr	r0, [pc, #20]	@ (8001d60 <HAL_TIM_MspPostInit+0x70>)
 8001d4a:	f001 fb5d 	bl	8003408 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM8_MspPostInit 1 */

  /* USER CODE END TIM8_MspPostInit 1 */
  }

}
 8001d4e:	bf00      	nop
 8001d50:	3720      	adds	r7, #32
 8001d52:	46bd      	mov	sp, r7
 8001d54:	bd80      	pop	{r7, pc}
 8001d56:	bf00      	nop
 8001d58:	40010400 	.word	0x40010400
 8001d5c:	40023800 	.word	0x40023800
 8001d60:	40020800 	.word	0x40020800

08001d64 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001d64:	b580      	push	{r7, lr}
 8001d66:	b08a      	sub	sp, #40	@ 0x28
 8001d68:	af00      	add	r7, sp, #0
 8001d6a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001d6c:	f107 0314 	add.w	r3, r7, #20
 8001d70:	2200      	movs	r2, #0
 8001d72:	601a      	str	r2, [r3, #0]
 8001d74:	605a      	str	r2, [r3, #4]
 8001d76:	609a      	str	r2, [r3, #8]
 8001d78:	60da      	str	r2, [r3, #12]
 8001d7a:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 8001d7c:	687b      	ldr	r3, [r7, #4]
 8001d7e:	681b      	ldr	r3, [r3, #0]
 8001d80:	4a1d      	ldr	r2, [pc, #116]	@ (8001df8 <HAL_UART_MspInit+0x94>)
 8001d82:	4293      	cmp	r3, r2
 8001d84:	d133      	bne.n	8001dee <HAL_UART_MspInit+0x8a>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8001d86:	2300      	movs	r3, #0
 8001d88:	613b      	str	r3, [r7, #16]
 8001d8a:	4b1c      	ldr	r3, [pc, #112]	@ (8001dfc <HAL_UART_MspInit+0x98>)
 8001d8c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001d8e:	4a1b      	ldr	r2, [pc, #108]	@ (8001dfc <HAL_UART_MspInit+0x98>)
 8001d90:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8001d94:	6413      	str	r3, [r2, #64]	@ 0x40
 8001d96:	4b19      	ldr	r3, [pc, #100]	@ (8001dfc <HAL_UART_MspInit+0x98>)
 8001d98:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001d9a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001d9e:	613b      	str	r3, [r7, #16]
 8001da0:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001da2:	2300      	movs	r3, #0
 8001da4:	60fb      	str	r3, [r7, #12]
 8001da6:	4b15      	ldr	r3, [pc, #84]	@ (8001dfc <HAL_UART_MspInit+0x98>)
 8001da8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001daa:	4a14      	ldr	r2, [pc, #80]	@ (8001dfc <HAL_UART_MspInit+0x98>)
 8001dac:	f043 0301 	orr.w	r3, r3, #1
 8001db0:	6313      	str	r3, [r2, #48]	@ 0x30
 8001db2:	4b12      	ldr	r3, [pc, #72]	@ (8001dfc <HAL_UART_MspInit+0x98>)
 8001db4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001db6:	f003 0301 	and.w	r3, r3, #1
 8001dba:	60fb      	str	r3, [r7, #12]
 8001dbc:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 8001dbe:	230c      	movs	r3, #12
 8001dc0:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001dc2:	2302      	movs	r3, #2
 8001dc4:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001dc6:	2300      	movs	r3, #0
 8001dc8:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001dca:	2303      	movs	r3, #3
 8001dcc:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8001dce:	2307      	movs	r3, #7
 8001dd0:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001dd2:	f107 0314 	add.w	r3, r7, #20
 8001dd6:	4619      	mov	r1, r3
 8001dd8:	4809      	ldr	r0, [pc, #36]	@ (8001e00 <HAL_UART_MspInit+0x9c>)
 8001dda:	f001 fb15 	bl	8003408 <HAL_GPIO_Init>

    /* USART2 interrupt Init */
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 8001dde:	2200      	movs	r2, #0
 8001de0:	2100      	movs	r1, #0
 8001de2:	2026      	movs	r0, #38	@ 0x26
 8001de4:	f000 fed7 	bl	8002b96 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 8001de8:	2026      	movs	r0, #38	@ 0x26
 8001dea:	f000 fef0 	bl	8002bce <HAL_NVIC_EnableIRQ>

  /* USER CODE END USART2_MspInit 1 */

  }

}
 8001dee:	bf00      	nop
 8001df0:	3728      	adds	r7, #40	@ 0x28
 8001df2:	46bd      	mov	sp, r7
 8001df4:	bd80      	pop	{r7, pc}
 8001df6:	bf00      	nop
 8001df8:	40004400 	.word	0x40004400
 8001dfc:	40023800 	.word	0x40023800
 8001e00:	40020000 	.word	0x40020000

08001e04 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001e04:	b480      	push	{r7}
 8001e06:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8001e08:	bf00      	nop
 8001e0a:	e7fd      	b.n	8001e08 <NMI_Handler+0x4>

08001e0c <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001e0c:	b480      	push	{r7}
 8001e0e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001e10:	bf00      	nop
 8001e12:	e7fd      	b.n	8001e10 <HardFault_Handler+0x4>

08001e14 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001e14:	b480      	push	{r7}
 8001e16:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001e18:	bf00      	nop
 8001e1a:	e7fd      	b.n	8001e18 <MemManage_Handler+0x4>

08001e1c <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001e1c:	b480      	push	{r7}
 8001e1e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001e20:	bf00      	nop
 8001e22:	e7fd      	b.n	8001e20 <BusFault_Handler+0x4>

08001e24 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001e24:	b480      	push	{r7}
 8001e26:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001e28:	bf00      	nop
 8001e2a:	e7fd      	b.n	8001e28 <UsageFault_Handler+0x4>

08001e2c <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001e2c:	b480      	push	{r7}
 8001e2e:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001e30:	bf00      	nop
 8001e32:	46bd      	mov	sp, r7
 8001e34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e38:	4770      	bx	lr

08001e3a <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001e3a:	b480      	push	{r7}
 8001e3c:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001e3e:	bf00      	nop
 8001e40:	46bd      	mov	sp, r7
 8001e42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e46:	4770      	bx	lr

08001e48 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001e48:	b480      	push	{r7}
 8001e4a:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001e4c:	bf00      	nop
 8001e4e:	46bd      	mov	sp, r7
 8001e50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e54:	4770      	bx	lr

08001e56 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001e56:	b580      	push	{r7, lr}
 8001e58:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001e5a:	f000 f989 	bl	8002170 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001e5e:	bf00      	nop
 8001e60:	bd80      	pop	{r7, pc}
	...

08001e64 <TIM1_UP_TIM10_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt and TIM10 global interrupt.
  */
void TIM1_UP_TIM10_IRQHandler(void)
{
 8001e64:	b580      	push	{r7, lr}
 8001e66:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 0 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 0 */
  HAL_TIM_IRQHandler(&htim10);
 8001e68:	4802      	ldr	r0, [pc, #8]	@ (8001e74 <TIM1_UP_TIM10_IRQHandler+0x10>)
 8001e6a:	f002 fd13 	bl	8004894 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 1 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 1 */
}
 8001e6e:	bf00      	nop
 8001e70:	bd80      	pop	{r7, pc}
 8001e72:	bf00      	nop
 8001e74:	200002e0 	.word	0x200002e0

08001e78 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 8001e78:	b580      	push	{r7, lr}
 8001e7a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 8001e7c:	4802      	ldr	r0, [pc, #8]	@ (8001e88 <USART2_IRQHandler+0x10>)
 8001e7e:	f003 fbef 	bl	8005660 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 8001e82:	bf00      	nop
 8001e84:	bd80      	pop	{r7, pc}
 8001e86:	bf00      	nop
 8001e88:	20000370 	.word	0x20000370

08001e8c <TIM8_UP_TIM13_IRQHandler>:

/**
  * @brief This function handles TIM8 update interrupt and TIM13 global interrupt.
  */
void TIM8_UP_TIM13_IRQHandler(void)
{
 8001e8c:	b580      	push	{r7, lr}
 8001e8e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM8_UP_TIM13_IRQn 0 */

  /* USER CODE END TIM8_UP_TIM13_IRQn 0 */
  HAL_TIM_IRQHandler(&htim8);
 8001e90:	4802      	ldr	r0, [pc, #8]	@ (8001e9c <TIM8_UP_TIM13_IRQHandler+0x10>)
 8001e92:	f002 fcff 	bl	8004894 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM8_UP_TIM13_IRQn 1 */

  /* USER CODE END TIM8_UP_TIM13_IRQn 1 */
}
 8001e96:	bf00      	nop
 8001e98:	bd80      	pop	{r7, pc}
 8001e9a:	bf00      	nop
 8001e9c:	20000298 	.word	0x20000298

08001ea0 <TIM8_CC_IRQHandler>:

/**
  * @brief This function handles TIM8 capture compare interrupt.
  */
void TIM8_CC_IRQHandler(void)
{
 8001ea0:	b580      	push	{r7, lr}
 8001ea2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM8_CC_IRQn 0 */

  /* USER CODE END TIM8_CC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim8);
 8001ea4:	4802      	ldr	r0, [pc, #8]	@ (8001eb0 <TIM8_CC_IRQHandler+0x10>)
 8001ea6:	f002 fcf5 	bl	8004894 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM8_CC_IRQn 1 */

  /* USER CODE END TIM8_CC_IRQn 1 */
}
 8001eaa:	bf00      	nop
 8001eac:	bd80      	pop	{r7, pc}
 8001eae:	bf00      	nop
 8001eb0:	20000298 	.word	0x20000298

08001eb4 <DMA2_Stream0_IRQHandler>:

/**
  * @brief This function handles DMA2 stream0 global interrupt.
  */
void DMA2_Stream0_IRQHandler(void)
{
 8001eb4:	b580      	push	{r7, lr}
 8001eb6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream0_IRQn 0 */

  /* USER CODE END DMA2_Stream0_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 8001eb8:	4802      	ldr	r0, [pc, #8]	@ (8001ec4 <DMA2_Stream0_IRQHandler+0x10>)
 8001eba:	f001 f83b 	bl	8002f34 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream0_IRQn 1 */

  /* USER CODE END DMA2_Stream0_IRQn 1 */
}
 8001ebe:	bf00      	nop
 8001ec0:	bd80      	pop	{r7, pc}
 8001ec2:	bf00      	nop
 8001ec4:	20000238 	.word	0x20000238

08001ec8 <_getpid>:
 8001ec8:	b480      	push	{r7}
 8001eca:	af00      	add	r7, sp, #0
 8001ecc:	2301      	movs	r3, #1
 8001ece:	4618      	mov	r0, r3
 8001ed0:	46bd      	mov	sp, r7
 8001ed2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ed6:	4770      	bx	lr

08001ed8 <_kill>:
 8001ed8:	b580      	push	{r7, lr}
 8001eda:	b082      	sub	sp, #8
 8001edc:	af00      	add	r7, sp, #0
 8001ede:	6078      	str	r0, [r7, #4]
 8001ee0:	6039      	str	r1, [r7, #0]
 8001ee2:	f005 f8b1 	bl	8007048 <__errno>
 8001ee6:	4603      	mov	r3, r0
 8001ee8:	2216      	movs	r2, #22
 8001eea:	601a      	str	r2, [r3, #0]
 8001eec:	f04f 33ff 	mov.w	r3, #4294967295
 8001ef0:	4618      	mov	r0, r3
 8001ef2:	3708      	adds	r7, #8
 8001ef4:	46bd      	mov	sp, r7
 8001ef6:	bd80      	pop	{r7, pc}

08001ef8 <_exit>:
 8001ef8:	b580      	push	{r7, lr}
 8001efa:	b082      	sub	sp, #8
 8001efc:	af00      	add	r7, sp, #0
 8001efe:	6078      	str	r0, [r7, #4]
 8001f00:	f04f 31ff 	mov.w	r1, #4294967295
 8001f04:	6878      	ldr	r0, [r7, #4]
 8001f06:	f7ff ffe7 	bl	8001ed8 <_kill>
 8001f0a:	bf00      	nop
 8001f0c:	e7fd      	b.n	8001f0a <_exit+0x12>

08001f0e <_read>:
 8001f0e:	b580      	push	{r7, lr}
 8001f10:	b086      	sub	sp, #24
 8001f12:	af00      	add	r7, sp, #0
 8001f14:	60f8      	str	r0, [r7, #12]
 8001f16:	60b9      	str	r1, [r7, #8]
 8001f18:	607a      	str	r2, [r7, #4]
 8001f1a:	2300      	movs	r3, #0
 8001f1c:	617b      	str	r3, [r7, #20]
 8001f1e:	e00a      	b.n	8001f36 <_read+0x28>
 8001f20:	f3af 8000 	nop.w
 8001f24:	4601      	mov	r1, r0
 8001f26:	68bb      	ldr	r3, [r7, #8]
 8001f28:	1c5a      	adds	r2, r3, #1
 8001f2a:	60ba      	str	r2, [r7, #8]
 8001f2c:	b2ca      	uxtb	r2, r1
 8001f2e:	701a      	strb	r2, [r3, #0]
 8001f30:	697b      	ldr	r3, [r7, #20]
 8001f32:	3301      	adds	r3, #1
 8001f34:	617b      	str	r3, [r7, #20]
 8001f36:	697a      	ldr	r2, [r7, #20]
 8001f38:	687b      	ldr	r3, [r7, #4]
 8001f3a:	429a      	cmp	r2, r3
 8001f3c:	dbf0      	blt.n	8001f20 <_read+0x12>
 8001f3e:	687b      	ldr	r3, [r7, #4]
 8001f40:	4618      	mov	r0, r3
 8001f42:	3718      	adds	r7, #24
 8001f44:	46bd      	mov	sp, r7
 8001f46:	bd80      	pop	{r7, pc}

08001f48 <_write>:
 8001f48:	b580      	push	{r7, lr}
 8001f4a:	b086      	sub	sp, #24
 8001f4c:	af00      	add	r7, sp, #0
 8001f4e:	60f8      	str	r0, [r7, #12]
 8001f50:	60b9      	str	r1, [r7, #8]
 8001f52:	607a      	str	r2, [r7, #4]
 8001f54:	2300      	movs	r3, #0
 8001f56:	617b      	str	r3, [r7, #20]
 8001f58:	e009      	b.n	8001f6e <_write+0x26>
 8001f5a:	68bb      	ldr	r3, [r7, #8]
 8001f5c:	1c5a      	adds	r2, r3, #1
 8001f5e:	60ba      	str	r2, [r7, #8]
 8001f60:	781b      	ldrb	r3, [r3, #0]
 8001f62:	4618      	mov	r0, r3
 8001f64:	f3af 8000 	nop.w
 8001f68:	697b      	ldr	r3, [r7, #20]
 8001f6a:	3301      	adds	r3, #1
 8001f6c:	617b      	str	r3, [r7, #20]
 8001f6e:	697a      	ldr	r2, [r7, #20]
 8001f70:	687b      	ldr	r3, [r7, #4]
 8001f72:	429a      	cmp	r2, r3
 8001f74:	dbf1      	blt.n	8001f5a <_write+0x12>
 8001f76:	687b      	ldr	r3, [r7, #4]
 8001f78:	4618      	mov	r0, r3
 8001f7a:	3718      	adds	r7, #24
 8001f7c:	46bd      	mov	sp, r7
 8001f7e:	bd80      	pop	{r7, pc}

08001f80 <_close>:
 8001f80:	b480      	push	{r7}
 8001f82:	b083      	sub	sp, #12
 8001f84:	af00      	add	r7, sp, #0
 8001f86:	6078      	str	r0, [r7, #4]
 8001f88:	f04f 33ff 	mov.w	r3, #4294967295
 8001f8c:	4618      	mov	r0, r3
 8001f8e:	370c      	adds	r7, #12
 8001f90:	46bd      	mov	sp, r7
 8001f92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f96:	4770      	bx	lr

08001f98 <_fstat>:
 8001f98:	b480      	push	{r7}
 8001f9a:	b083      	sub	sp, #12
 8001f9c:	af00      	add	r7, sp, #0
 8001f9e:	6078      	str	r0, [r7, #4]
 8001fa0:	6039      	str	r1, [r7, #0]
 8001fa2:	683b      	ldr	r3, [r7, #0]
 8001fa4:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8001fa8:	605a      	str	r2, [r3, #4]
 8001faa:	2300      	movs	r3, #0
 8001fac:	4618      	mov	r0, r3
 8001fae:	370c      	adds	r7, #12
 8001fb0:	46bd      	mov	sp, r7
 8001fb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fb6:	4770      	bx	lr

08001fb8 <_isatty>:
 8001fb8:	b480      	push	{r7}
 8001fba:	b083      	sub	sp, #12
 8001fbc:	af00      	add	r7, sp, #0
 8001fbe:	6078      	str	r0, [r7, #4]
 8001fc0:	2301      	movs	r3, #1
 8001fc2:	4618      	mov	r0, r3
 8001fc4:	370c      	adds	r7, #12
 8001fc6:	46bd      	mov	sp, r7
 8001fc8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fcc:	4770      	bx	lr

08001fce <_lseek>:
 8001fce:	b480      	push	{r7}
 8001fd0:	b085      	sub	sp, #20
 8001fd2:	af00      	add	r7, sp, #0
 8001fd4:	60f8      	str	r0, [r7, #12]
 8001fd6:	60b9      	str	r1, [r7, #8]
 8001fd8:	607a      	str	r2, [r7, #4]
 8001fda:	2300      	movs	r3, #0
 8001fdc:	4618      	mov	r0, r3
 8001fde:	3714      	adds	r7, #20
 8001fe0:	46bd      	mov	sp, r7
 8001fe2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fe6:	4770      	bx	lr

08001fe8 <_sbrk>:
 8001fe8:	b580      	push	{r7, lr}
 8001fea:	b086      	sub	sp, #24
 8001fec:	af00      	add	r7, sp, #0
 8001fee:	6078      	str	r0, [r7, #4]
 8001ff0:	4a14      	ldr	r2, [pc, #80]	@ (8002044 <_sbrk+0x5c>)
 8001ff2:	4b15      	ldr	r3, [pc, #84]	@ (8002048 <_sbrk+0x60>)
 8001ff4:	1ad3      	subs	r3, r2, r3
 8001ff6:	617b      	str	r3, [r7, #20]
 8001ff8:	697b      	ldr	r3, [r7, #20]
 8001ffa:	613b      	str	r3, [r7, #16]
 8001ffc:	4b13      	ldr	r3, [pc, #76]	@ (800204c <_sbrk+0x64>)
 8001ffe:	681b      	ldr	r3, [r3, #0]
 8002000:	2b00      	cmp	r3, #0
 8002002:	d102      	bne.n	800200a <_sbrk+0x22>
 8002004:	4b11      	ldr	r3, [pc, #68]	@ (800204c <_sbrk+0x64>)
 8002006:	4a12      	ldr	r2, [pc, #72]	@ (8002050 <_sbrk+0x68>)
 8002008:	601a      	str	r2, [r3, #0]
 800200a:	4b10      	ldr	r3, [pc, #64]	@ (800204c <_sbrk+0x64>)
 800200c:	681a      	ldr	r2, [r3, #0]
 800200e:	687b      	ldr	r3, [r7, #4]
 8002010:	4413      	add	r3, r2
 8002012:	693a      	ldr	r2, [r7, #16]
 8002014:	429a      	cmp	r2, r3
 8002016:	d207      	bcs.n	8002028 <_sbrk+0x40>
 8002018:	f005 f816 	bl	8007048 <__errno>
 800201c:	4603      	mov	r3, r0
 800201e:	220c      	movs	r2, #12
 8002020:	601a      	str	r2, [r3, #0]
 8002022:	f04f 33ff 	mov.w	r3, #4294967295
 8002026:	e009      	b.n	800203c <_sbrk+0x54>
 8002028:	4b08      	ldr	r3, [pc, #32]	@ (800204c <_sbrk+0x64>)
 800202a:	681b      	ldr	r3, [r3, #0]
 800202c:	60fb      	str	r3, [r7, #12]
 800202e:	4b07      	ldr	r3, [pc, #28]	@ (800204c <_sbrk+0x64>)
 8002030:	681a      	ldr	r2, [r3, #0]
 8002032:	687b      	ldr	r3, [r7, #4]
 8002034:	4413      	add	r3, r2
 8002036:	4a05      	ldr	r2, [pc, #20]	@ (800204c <_sbrk+0x64>)
 8002038:	6013      	str	r3, [r2, #0]
 800203a:	68fb      	ldr	r3, [r7, #12]
 800203c:	4618      	mov	r0, r3
 800203e:	3718      	adds	r7, #24
 8002040:	46bd      	mov	sp, r7
 8002042:	bd80      	pop	{r7, pc}
 8002044:	20020000 	.word	0x20020000
 8002048:	00000400 	.word	0x00000400
 800204c:	200005fc 	.word	0x200005fc
 8002050:	20000750 	.word	0x20000750

08002054 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8002054:	b480      	push	{r7}
 8002056:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8002058:	4b06      	ldr	r3, [pc, #24]	@ (8002074 <SystemInit+0x20>)
 800205a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800205e:	4a05      	ldr	r2, [pc, #20]	@ (8002074 <SystemInit+0x20>)
 8002060:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8002064:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8002068:	bf00      	nop
 800206a:	46bd      	mov	sp, r7
 800206c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002070:	4770      	bx	lr
 8002072:	bf00      	nop
 8002074:	e000ed00 	.word	0xe000ed00

08002078 <Reset_Handler>:
 8002078:	f8df d034 	ldr.w	sp, [pc, #52]	@ 80020b0 <LoopFillZerobss+0xe>
 800207c:	f7ff ffea 	bl	8002054 <SystemInit>
 8002080:	480c      	ldr	r0, [pc, #48]	@ (80020b4 <LoopFillZerobss+0x12>)
 8002082:	490d      	ldr	r1, [pc, #52]	@ (80020b8 <LoopFillZerobss+0x16>)
 8002084:	4a0d      	ldr	r2, [pc, #52]	@ (80020bc <LoopFillZerobss+0x1a>)
 8002086:	2300      	movs	r3, #0
 8002088:	e002      	b.n	8002090 <LoopCopyDataInit>

0800208a <CopyDataInit>:
 800208a:	58d4      	ldr	r4, [r2, r3]
 800208c:	50c4      	str	r4, [r0, r3]
 800208e:	3304      	adds	r3, #4

08002090 <LoopCopyDataInit>:
 8002090:	18c4      	adds	r4, r0, r3
 8002092:	428c      	cmp	r4, r1
 8002094:	d3f9      	bcc.n	800208a <CopyDataInit>
 8002096:	4a0a      	ldr	r2, [pc, #40]	@ (80020c0 <LoopFillZerobss+0x1e>)
 8002098:	4c0a      	ldr	r4, [pc, #40]	@ (80020c4 <LoopFillZerobss+0x22>)
 800209a:	2300      	movs	r3, #0
 800209c:	e001      	b.n	80020a2 <LoopFillZerobss>

0800209e <FillZerobss>:
 800209e:	6013      	str	r3, [r2, #0]
 80020a0:	3204      	adds	r2, #4

080020a2 <LoopFillZerobss>:
 80020a2:	42a2      	cmp	r2, r4
 80020a4:	d3fb      	bcc.n	800209e <FillZerobss>
 80020a6:	f004 ffd5 	bl	8007054 <__libc_init_array>
 80020aa:	f7ff f8db 	bl	8001264 <main>
 80020ae:	4770      	bx	lr
 80020b0:	20020000 	.word	0x20020000
 80020b4:	20000000 	.word	0x20000000
 80020b8:	200001d4 	.word	0x200001d4
 80020bc:	0800a890 	.word	0x0800a890
 80020c0:	200001d4 	.word	0x200001d4
 80020c4:	20000750 	.word	0x20000750

080020c8 <ADC_IRQHandler>:
 80020c8:	e7fe      	b.n	80020c8 <ADC_IRQHandler>
	...

080020cc <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80020cc:	b580      	push	{r7, lr}
 80020ce:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 80020d0:	4b0e      	ldr	r3, [pc, #56]	@ (800210c <HAL_Init+0x40>)
 80020d2:	681b      	ldr	r3, [r3, #0]
 80020d4:	4a0d      	ldr	r2, [pc, #52]	@ (800210c <HAL_Init+0x40>)
 80020d6:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 80020da:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 80020dc:	4b0b      	ldr	r3, [pc, #44]	@ (800210c <HAL_Init+0x40>)
 80020de:	681b      	ldr	r3, [r3, #0]
 80020e0:	4a0a      	ldr	r2, [pc, #40]	@ (800210c <HAL_Init+0x40>)
 80020e2:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 80020e6:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80020e8:	4b08      	ldr	r3, [pc, #32]	@ (800210c <HAL_Init+0x40>)
 80020ea:	681b      	ldr	r3, [r3, #0]
 80020ec:	4a07      	ldr	r2, [pc, #28]	@ (800210c <HAL_Init+0x40>)
 80020ee:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80020f2:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80020f4:	2003      	movs	r0, #3
 80020f6:	f000 fd43 	bl	8002b80 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80020fa:	2000      	movs	r0, #0
 80020fc:	f000 f808 	bl	8002110 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8002100:	f7ff fcf4 	bl	8001aec <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8002104:	2300      	movs	r3, #0
}
 8002106:	4618      	mov	r0, r3
 8002108:	bd80      	pop	{r7, pc}
 800210a:	bf00      	nop
 800210c:	40023c00 	.word	0x40023c00

08002110 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002110:	b580      	push	{r7, lr}
 8002112:	b082      	sub	sp, #8
 8002114:	af00      	add	r7, sp, #0
 8002116:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8002118:	4b12      	ldr	r3, [pc, #72]	@ (8002164 <HAL_InitTick+0x54>)
 800211a:	681a      	ldr	r2, [r3, #0]
 800211c:	4b12      	ldr	r3, [pc, #72]	@ (8002168 <HAL_InitTick+0x58>)
 800211e:	781b      	ldrb	r3, [r3, #0]
 8002120:	4619      	mov	r1, r3
 8002122:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8002126:	fbb3 f3f1 	udiv	r3, r3, r1
 800212a:	fbb2 f3f3 	udiv	r3, r2, r3
 800212e:	4618      	mov	r0, r3
 8002130:	f000 fd5b 	bl	8002bea <HAL_SYSTICK_Config>
 8002134:	4603      	mov	r3, r0
 8002136:	2b00      	cmp	r3, #0
 8002138:	d001      	beq.n	800213e <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 800213a:	2301      	movs	r3, #1
 800213c:	e00e      	b.n	800215c <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800213e:	687b      	ldr	r3, [r7, #4]
 8002140:	2b0f      	cmp	r3, #15
 8002142:	d80a      	bhi.n	800215a <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8002144:	2200      	movs	r2, #0
 8002146:	6879      	ldr	r1, [r7, #4]
 8002148:	f04f 30ff 	mov.w	r0, #4294967295
 800214c:	f000 fd23 	bl	8002b96 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8002150:	4a06      	ldr	r2, [pc, #24]	@ (800216c <HAL_InitTick+0x5c>)
 8002152:	687b      	ldr	r3, [r7, #4]
 8002154:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8002156:	2300      	movs	r3, #0
 8002158:	e000      	b.n	800215c <HAL_InitTick+0x4c>
    return HAL_ERROR;
 800215a:	2301      	movs	r3, #1
}
 800215c:	4618      	mov	r0, r3
 800215e:	3708      	adds	r7, #8
 8002160:	46bd      	mov	sp, r7
 8002162:	bd80      	pop	{r7, pc}
 8002164:	20000000 	.word	0x20000000
 8002168:	20000008 	.word	0x20000008
 800216c:	20000004 	.word	0x20000004

08002170 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8002170:	b480      	push	{r7}
 8002172:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8002174:	4b06      	ldr	r3, [pc, #24]	@ (8002190 <HAL_IncTick+0x20>)
 8002176:	781b      	ldrb	r3, [r3, #0]
 8002178:	461a      	mov	r2, r3
 800217a:	4b06      	ldr	r3, [pc, #24]	@ (8002194 <HAL_IncTick+0x24>)
 800217c:	681b      	ldr	r3, [r3, #0]
 800217e:	4413      	add	r3, r2
 8002180:	4a04      	ldr	r2, [pc, #16]	@ (8002194 <HAL_IncTick+0x24>)
 8002182:	6013      	str	r3, [r2, #0]
}
 8002184:	bf00      	nop
 8002186:	46bd      	mov	sp, r7
 8002188:	f85d 7b04 	ldr.w	r7, [sp], #4
 800218c:	4770      	bx	lr
 800218e:	bf00      	nop
 8002190:	20000008 	.word	0x20000008
 8002194:	20000600 	.word	0x20000600

08002198 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002198:	b480      	push	{r7}
 800219a:	af00      	add	r7, sp, #0
  return uwTick;
 800219c:	4b03      	ldr	r3, [pc, #12]	@ (80021ac <HAL_GetTick+0x14>)
 800219e:	681b      	ldr	r3, [r3, #0]
}
 80021a0:	4618      	mov	r0, r3
 80021a2:	46bd      	mov	sp, r7
 80021a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021a8:	4770      	bx	lr
 80021aa:	bf00      	nop
 80021ac:	20000600 	.word	0x20000600

080021b0 <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 80021b0:	b580      	push	{r7, lr}
 80021b2:	b084      	sub	sp, #16
 80021b4:	af00      	add	r7, sp, #0
 80021b6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80021b8:	2300      	movs	r3, #0
 80021ba:	73fb      	strb	r3, [r7, #15]

  /* Check ADC handle */
  if (hadc == NULL)
 80021bc:	687b      	ldr	r3, [r7, #4]
 80021be:	2b00      	cmp	r3, #0
 80021c0:	d101      	bne.n	80021c6 <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 80021c2:	2301      	movs	r3, #1
 80021c4:	e033      	b.n	800222e <HAL_ADC_Init+0x7e>
  if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }

  if (hadc->State == HAL_ADC_STATE_RESET)
 80021c6:	687b      	ldr	r3, [r7, #4]
 80021c8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80021ca:	2b00      	cmp	r3, #0
 80021cc:	d109      	bne.n	80021e2 <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 80021ce:	6878      	ldr	r0, [r7, #4]
 80021d0:	f7ff fcb4 	bl	8001b3c <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 80021d4:	687b      	ldr	r3, [r7, #4]
 80021d6:	2200      	movs	r2, #0
 80021d8:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 80021da:	687b      	ldr	r3, [r7, #4]
 80021dc:	2200      	movs	r2, #0
 80021de:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
  }

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 80021e2:	687b      	ldr	r3, [r7, #4]
 80021e4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80021e6:	f003 0310 	and.w	r3, r3, #16
 80021ea:	2b00      	cmp	r3, #0
 80021ec:	d118      	bne.n	8002220 <HAL_ADC_Init+0x70>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80021ee:	687b      	ldr	r3, [r7, #4]
 80021f0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80021f2:	f423 5388 	bic.w	r3, r3, #4352	@ 0x1100
 80021f6:	f023 0302 	bic.w	r3, r3, #2
 80021fa:	f043 0202 	orr.w	r2, r3, #2
 80021fe:	687b      	ldr	r3, [r7, #4]
 8002200:	641a      	str	r2, [r3, #64]	@ 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);

    /* Set ADC parameters */
    ADC_Init(hadc);
 8002202:	6878      	ldr	r0, [r7, #4]
 8002204:	f000 fa6e 	bl	80026e4 <ADC_Init>

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8002208:	687b      	ldr	r3, [r7, #4]
 800220a:	2200      	movs	r2, #0
 800220c:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 800220e:	687b      	ldr	r3, [r7, #4]
 8002210:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002212:	f023 0303 	bic.w	r3, r3, #3
 8002216:	f043 0201 	orr.w	r2, r3, #1
 800221a:	687b      	ldr	r3, [r7, #4]
 800221c:	641a      	str	r2, [r3, #64]	@ 0x40
 800221e:	e001      	b.n	8002224 <HAL_ADC_Init+0x74>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 8002220:	2301      	movs	r3, #1
 8002222:	73fb      	strb	r3, [r7, #15]
  }

  /* Release Lock */
  __HAL_UNLOCK(hadc);
 8002224:	687b      	ldr	r3, [r7, #4]
 8002226:	2200      	movs	r2, #0
 8002228:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Return function status */
  return tmp_hal_status;
 800222c:	7bfb      	ldrb	r3, [r7, #15]
}
 800222e:	4618      	mov	r0, r3
 8002230:	3710      	adds	r7, #16
 8002232:	46bd      	mov	sp, r7
 8002234:	bd80      	pop	{r7, pc}
	...

08002238 <HAL_ADC_Start_DMA>:
  * @param  pData The destination Buffer address.
  * @param  Length The length of data to be transferred from ADC peripheral to memory.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start_DMA(ADC_HandleTypeDef *hadc, uint32_t *pData, uint32_t Length)
{
 8002238:	b580      	push	{r7, lr}
 800223a:	b086      	sub	sp, #24
 800223c:	af00      	add	r7, sp, #0
 800223e:	60f8      	str	r0, [r7, #12]
 8002240:	60b9      	str	r1, [r7, #8]
 8002242:	607a      	str	r2, [r7, #4]
  __IO uint32_t counter = 0U;
 8002244:	2300      	movs	r3, #0
 8002246:	613b      	str	r3, [r7, #16]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));

  /* Process locked */
  __HAL_LOCK(hadc);
 8002248:	68fb      	ldr	r3, [r7, #12]
 800224a:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800224e:	2b01      	cmp	r3, #1
 8002250:	d101      	bne.n	8002256 <HAL_ADC_Start_DMA+0x1e>
 8002252:	2302      	movs	r3, #2
 8002254:	e0e9      	b.n	800242a <HAL_ADC_Start_DMA+0x1f2>
 8002256:	68fb      	ldr	r3, [r7, #12]
 8002258:	2201      	movs	r2, #1
 800225a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Enable the ADC peripheral */
  /* Check if ADC peripheral is disabled in order to enable it and wait during
  Tstab time the ADC's stabilization */
  if ((hadc->Instance->CR2 & ADC_CR2_ADON) != ADC_CR2_ADON)
 800225e:	68fb      	ldr	r3, [r7, #12]
 8002260:	681b      	ldr	r3, [r3, #0]
 8002262:	689b      	ldr	r3, [r3, #8]
 8002264:	f003 0301 	and.w	r3, r3, #1
 8002268:	2b01      	cmp	r3, #1
 800226a:	d018      	beq.n	800229e <HAL_ADC_Start_DMA+0x66>
  {
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 800226c:	68fb      	ldr	r3, [r7, #12]
 800226e:	681b      	ldr	r3, [r3, #0]
 8002270:	689a      	ldr	r2, [r3, #8]
 8002272:	68fb      	ldr	r3, [r7, #12]
 8002274:	681b      	ldr	r3, [r3, #0]
 8002276:	f042 0201 	orr.w	r2, r2, #1
 800227a:	609a      	str	r2, [r3, #8]

    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    counter = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 800227c:	4b6d      	ldr	r3, [pc, #436]	@ (8002434 <HAL_ADC_Start_DMA+0x1fc>)
 800227e:	681b      	ldr	r3, [r3, #0]
 8002280:	4a6d      	ldr	r2, [pc, #436]	@ (8002438 <HAL_ADC_Start_DMA+0x200>)
 8002282:	fba2 2303 	umull	r2, r3, r2, r3
 8002286:	0c9a      	lsrs	r2, r3, #18
 8002288:	4613      	mov	r3, r2
 800228a:	005b      	lsls	r3, r3, #1
 800228c:	4413      	add	r3, r2
 800228e:	613b      	str	r3, [r7, #16]
    while (counter != 0U)
 8002290:	e002      	b.n	8002298 <HAL_ADC_Start_DMA+0x60>
    {
      counter--;
 8002292:	693b      	ldr	r3, [r7, #16]
 8002294:	3b01      	subs	r3, #1
 8002296:	613b      	str	r3, [r7, #16]
    while (counter != 0U)
 8002298:	693b      	ldr	r3, [r7, #16]
 800229a:	2b00      	cmp	r3, #0
 800229c:	d1f9      	bne.n	8002292 <HAL_ADC_Start_DMA+0x5a>
    }
  }

  /* Check ADC DMA Mode                                                     */
  /* - disable the DMA Mode if it is already enabled                        */
  if ((hadc->Instance->CR2 & ADC_CR2_DMA) == ADC_CR2_DMA)
 800229e:	68fb      	ldr	r3, [r7, #12]
 80022a0:	681b      	ldr	r3, [r3, #0]
 80022a2:	689b      	ldr	r3, [r3, #8]
 80022a4:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80022a8:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80022ac:	d107      	bne.n	80022be <HAL_ADC_Start_DMA+0x86>
  {
    CLEAR_BIT(hadc->Instance->CR2, ADC_CR2_DMA);
 80022ae:	68fb      	ldr	r3, [r7, #12]
 80022b0:	681b      	ldr	r3, [r3, #0]
 80022b2:	689a      	ldr	r2, [r3, #8]
 80022b4:	68fb      	ldr	r3, [r7, #12]
 80022b6:	681b      	ldr	r3, [r3, #0]
 80022b8:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 80022bc:	609a      	str	r2, [r3, #8]
  }

  /* Start conversion if ADC is effectively enabled */
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_ADON))
 80022be:	68fb      	ldr	r3, [r7, #12]
 80022c0:	681b      	ldr	r3, [r3, #0]
 80022c2:	689b      	ldr	r3, [r3, #8]
 80022c4:	f003 0301 	and.w	r3, r3, #1
 80022c8:	2b01      	cmp	r3, #1
 80022ca:	f040 80a1 	bne.w	8002410 <HAL_ADC_Start_DMA+0x1d8>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular group operation                */
    ADC_STATE_CLR_SET(hadc->State,
 80022ce:	68fb      	ldr	r3, [r7, #12]
 80022d0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80022d2:	f423 63e0 	bic.w	r3, r3, #1792	@ 0x700
 80022d6:	f023 0301 	bic.w	r3, r3, #1
 80022da:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 80022de:	68fb      	ldr	r3, [r7, #12]
 80022e0:	641a      	str	r2, [r3, #64]	@ 0x40
                      HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR,
                      HAL_ADC_STATE_REG_BUSY);

    /* If conversions on group regular are also triggering group injected,    */
    /* update ADC state.                                                      */
    if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 80022e2:	68fb      	ldr	r3, [r7, #12]
 80022e4:	681b      	ldr	r3, [r3, #0]
 80022e6:	685b      	ldr	r3, [r3, #4]
 80022e8:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80022ec:	2b00      	cmp	r3, #0
 80022ee:	d007      	beq.n	8002300 <HAL_ADC_Start_DMA+0xc8>
    {
      ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 80022f0:	68fb      	ldr	r3, [r7, #12]
 80022f2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80022f4:	f423 5340 	bic.w	r3, r3, #12288	@ 0x3000
 80022f8:	f443 5280 	orr.w	r2, r3, #4096	@ 0x1000
 80022fc:	68fb      	ldr	r3, [r7, #12]
 80022fe:	641a      	str	r2, [r3, #64]	@ 0x40
    }

    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8002300:	68fb      	ldr	r3, [r7, #12]
 8002302:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002304:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8002308:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800230c:	d106      	bne.n	800231c <HAL_ADC_Start_DMA+0xe4>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));
 800230e:	68fb      	ldr	r3, [r7, #12]
 8002310:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002312:	f023 0206 	bic.w	r2, r3, #6
 8002316:	68fb      	ldr	r3, [r7, #12]
 8002318:	645a      	str	r2, [r3, #68]	@ 0x44
 800231a:	e002      	b.n	8002322 <HAL_ADC_Start_DMA+0xea>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 800231c:	68fb      	ldr	r3, [r7, #12]
 800231e:	2200      	movs	r2, #0
 8002320:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);
 8002322:	68fb      	ldr	r3, [r7, #12]
 8002324:	2200      	movs	r2, #0
 8002326:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 800232a:	4b44      	ldr	r3, [pc, #272]	@ (800243c <HAL_ADC_Start_DMA+0x204>)
 800232c:	617b      	str	r3, [r7, #20]

    /* Set the DMA transfer complete callback */
    hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 800232e:	68fb      	ldr	r3, [r7, #12]
 8002330:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002332:	4a43      	ldr	r2, [pc, #268]	@ (8002440 <HAL_ADC_Start_DMA+0x208>)
 8002334:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Set the DMA half transfer complete callback */
    hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 8002336:	68fb      	ldr	r3, [r7, #12]
 8002338:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800233a:	4a42      	ldr	r2, [pc, #264]	@ (8002444 <HAL_ADC_Start_DMA+0x20c>)
 800233c:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Set the DMA error callback */
    hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 800233e:	68fb      	ldr	r3, [r7, #12]
 8002340:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002342:	4a41      	ldr	r2, [pc, #260]	@ (8002448 <HAL_ADC_Start_DMA+0x210>)
 8002344:	64da      	str	r2, [r3, #76]	@ 0x4c
    /* Manage ADC and DMA start: ADC overrun interruption, DMA start, ADC     */
    /* start (in case of SW start):                                           */

    /* Clear regular group conversion flag and overrun flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC | ADC_FLAG_OVR);
 8002346:	68fb      	ldr	r3, [r7, #12]
 8002348:	681b      	ldr	r3, [r3, #0]
 800234a:	f06f 0222 	mvn.w	r2, #34	@ 0x22
 800234e:	601a      	str	r2, [r3, #0]

    /* Enable ADC overrun interrupt */
    __HAL_ADC_ENABLE_IT(hadc, ADC_IT_OVR);
 8002350:	68fb      	ldr	r3, [r7, #12]
 8002352:	681b      	ldr	r3, [r3, #0]
 8002354:	685a      	ldr	r2, [r3, #4]
 8002356:	68fb      	ldr	r3, [r7, #12]
 8002358:	681b      	ldr	r3, [r3, #0]
 800235a:	f042 6280 	orr.w	r2, r2, #67108864	@ 0x4000000
 800235e:	605a      	str	r2, [r3, #4]

    /* Enable ADC DMA mode */
    hadc->Instance->CR2 |= ADC_CR2_DMA;
 8002360:	68fb      	ldr	r3, [r7, #12]
 8002362:	681b      	ldr	r3, [r3, #0]
 8002364:	689a      	ldr	r2, [r3, #8]
 8002366:	68fb      	ldr	r3, [r7, #12]
 8002368:	681b      	ldr	r3, [r3, #0]
 800236a:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 800236e:	609a      	str	r2, [r3, #8]

    /* Start the DMA channel */
    HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 8002370:	68fb      	ldr	r3, [r7, #12]
 8002372:	6b98      	ldr	r0, [r3, #56]	@ 0x38
 8002374:	68fb      	ldr	r3, [r7, #12]
 8002376:	681b      	ldr	r3, [r3, #0]
 8002378:	334c      	adds	r3, #76	@ 0x4c
 800237a:	4619      	mov	r1, r3
 800237c:	68ba      	ldr	r2, [r7, #8]
 800237e:	687b      	ldr	r3, [r7, #4]
 8002380:	f000 fcee 	bl	8002d60 <HAL_DMA_Start_IT>

    /* Check if Multimode enabled */
    if (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_MULTI))
 8002384:	697b      	ldr	r3, [r7, #20]
 8002386:	685b      	ldr	r3, [r3, #4]
 8002388:	f003 031f 	and.w	r3, r3, #31
 800238c:	2b00      	cmp	r3, #0
 800238e:	d12a      	bne.n	80023e6 <HAL_ADC_Start_DMA+0x1ae>
    {
#if defined(ADC2) && defined(ADC3)
      if ((hadc->Instance == ADC1) || ((hadc->Instance == ADC2) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_0)) \
 8002390:	68fb      	ldr	r3, [r7, #12]
 8002392:	681b      	ldr	r3, [r3, #0]
 8002394:	4a2d      	ldr	r2, [pc, #180]	@ (800244c <HAL_ADC_Start_DMA+0x214>)
 8002396:	4293      	cmp	r3, r2
 8002398:	d015      	beq.n	80023c6 <HAL_ADC_Start_DMA+0x18e>
 800239a:	68fb      	ldr	r3, [r7, #12]
 800239c:	681b      	ldr	r3, [r3, #0]
 800239e:	4a2c      	ldr	r2, [pc, #176]	@ (8002450 <HAL_ADC_Start_DMA+0x218>)
 80023a0:	4293      	cmp	r3, r2
 80023a2:	d105      	bne.n	80023b0 <HAL_ADC_Start_DMA+0x178>
 80023a4:	4b25      	ldr	r3, [pc, #148]	@ (800243c <HAL_ADC_Start_DMA+0x204>)
 80023a6:	685b      	ldr	r3, [r3, #4]
 80023a8:	f003 031f 	and.w	r3, r3, #31
 80023ac:	2b00      	cmp	r3, #0
 80023ae:	d00a      	beq.n	80023c6 <HAL_ADC_Start_DMA+0x18e>
          || ((hadc->Instance == ADC3) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_4)))
 80023b0:	68fb      	ldr	r3, [r7, #12]
 80023b2:	681b      	ldr	r3, [r3, #0]
 80023b4:	4a27      	ldr	r2, [pc, #156]	@ (8002454 <HAL_ADC_Start_DMA+0x21c>)
 80023b6:	4293      	cmp	r3, r2
 80023b8:	d136      	bne.n	8002428 <HAL_ADC_Start_DMA+0x1f0>
 80023ba:	4b20      	ldr	r3, [pc, #128]	@ (800243c <HAL_ADC_Start_DMA+0x204>)
 80023bc:	685b      	ldr	r3, [r3, #4]
 80023be:	f003 0310 	and.w	r3, r3, #16
 80023c2:	2b00      	cmp	r3, #0
 80023c4:	d130      	bne.n	8002428 <HAL_ADC_Start_DMA+0x1f0>
      {
#endif /* ADC2 || ADC3 */
        /* if no external trigger present enable software conversion of regular channels */
        if ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET)
 80023c6:	68fb      	ldr	r3, [r7, #12]
 80023c8:	681b      	ldr	r3, [r3, #0]
 80023ca:	689b      	ldr	r3, [r3, #8]
 80023cc:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 80023d0:	2b00      	cmp	r3, #0
 80023d2:	d129      	bne.n	8002428 <HAL_ADC_Start_DMA+0x1f0>
        {
          /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 80023d4:	68fb      	ldr	r3, [r7, #12]
 80023d6:	681b      	ldr	r3, [r3, #0]
 80023d8:	689a      	ldr	r2, [r3, #8]
 80023da:	68fb      	ldr	r3, [r7, #12]
 80023dc:	681b      	ldr	r3, [r3, #0]
 80023de:	f042 4280 	orr.w	r2, r2, #1073741824	@ 0x40000000
 80023e2:	609a      	str	r2, [r3, #8]
 80023e4:	e020      	b.n	8002428 <HAL_ADC_Start_DMA+0x1f0>
#endif /* ADC2 || ADC3 */
    }
    else
    {
      /* if instance of handle correspond to ADC1 and  no external trigger present enable software conversion of regular channels */
      if ((hadc->Instance == ADC1) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 80023e6:	68fb      	ldr	r3, [r7, #12]
 80023e8:	681b      	ldr	r3, [r3, #0]
 80023ea:	4a18      	ldr	r2, [pc, #96]	@ (800244c <HAL_ADC_Start_DMA+0x214>)
 80023ec:	4293      	cmp	r3, r2
 80023ee:	d11b      	bne.n	8002428 <HAL_ADC_Start_DMA+0x1f0>
 80023f0:	68fb      	ldr	r3, [r7, #12]
 80023f2:	681b      	ldr	r3, [r3, #0]
 80023f4:	689b      	ldr	r3, [r3, #8]
 80023f6:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 80023fa:	2b00      	cmp	r3, #0
 80023fc:	d114      	bne.n	8002428 <HAL_ADC_Start_DMA+0x1f0>
      {
        /* Enable the selected ADC software conversion for regular group */
        hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 80023fe:	68fb      	ldr	r3, [r7, #12]
 8002400:	681b      	ldr	r3, [r3, #0]
 8002402:	689a      	ldr	r2, [r3, #8]
 8002404:	68fb      	ldr	r3, [r7, #12]
 8002406:	681b      	ldr	r3, [r3, #0]
 8002408:	f042 4280 	orr.w	r2, r2, #1073741824	@ 0x40000000
 800240c:	609a      	str	r2, [r3, #8]
 800240e:	e00b      	b.n	8002428 <HAL_ADC_Start_DMA+0x1f0>
    }
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002410:	68fb      	ldr	r3, [r7, #12]
 8002412:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002414:	f043 0210 	orr.w	r2, r3, #16
 8002418:	68fb      	ldr	r3, [r7, #12]
 800241a:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Set ADC error code to ADC IP internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800241c:	68fb      	ldr	r3, [r7, #12]
 800241e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002420:	f043 0201 	orr.w	r2, r3, #1
 8002424:	68fb      	ldr	r3, [r7, #12]
 8002426:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Return function status */
  return HAL_OK;
 8002428:	2300      	movs	r3, #0
}
 800242a:	4618      	mov	r0, r3
 800242c:	3718      	adds	r7, #24
 800242e:	46bd      	mov	sp, r7
 8002430:	bd80      	pop	{r7, pc}
 8002432:	bf00      	nop
 8002434:	20000000 	.word	0x20000000
 8002438:	431bde83 	.word	0x431bde83
 800243c:	40012300 	.word	0x40012300
 8002440:	080028dd 	.word	0x080028dd
 8002444:	08002997 	.word	0x08002997
 8002448:	080029b3 	.word	0x080029b3
 800244c:	40012000 	.word	0x40012000
 8002450:	40012100 	.word	0x40012100
 8002454:	40012200 	.word	0x40012200

08002458 <HAL_ADC_ConvHalfCpltCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ConvHalfCpltCallback(ADC_HandleTypeDef *hadc)
{
 8002458:	b480      	push	{r7}
 800245a:	b083      	sub	sp, #12
 800245c:	af00      	add	r7, sp, #0
 800245e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ConvHalfCpltCallback could be implemented in the user file
   */
}
 8002460:	bf00      	nop
 8002462:	370c      	adds	r7, #12
 8002464:	46bd      	mov	sp, r7
 8002466:	f85d 7b04 	ldr.w	r7, [sp], #4
 800246a:	4770      	bx	lr

0800246c <HAL_ADC_ErrorCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 800246c:	b480      	push	{r7}
 800246e:	b083      	sub	sp, #12
 8002470:	af00      	add	r7, sp, #0
 8002472:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ErrorCallback could be implemented in the user file
   */
}
 8002474:	bf00      	nop
 8002476:	370c      	adds	r7, #12
 8002478:	46bd      	mov	sp, r7
 800247a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800247e:	4770      	bx	lr

08002480 <HAL_ADC_ConfigChannel>:
*         the configuration information for the specified ADC.
* @param  sConfig ADC configuration structure.
* @retval HAL status
*/
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, ADC_ChannelConfTypeDef *sConfig)
{
 8002480:	b480      	push	{r7}
 8002482:	b085      	sub	sp, #20
 8002484:	af00      	add	r7, sp, #0
 8002486:	6078      	str	r0, [r7, #4]
 8002488:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0U;
 800248a:	2300      	movs	r3, #0
 800248c:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));

  /* Process locked */
  __HAL_LOCK(hadc);
 800248e:	687b      	ldr	r3, [r7, #4]
 8002490:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8002494:	2b01      	cmp	r3, #1
 8002496:	d101      	bne.n	800249c <HAL_ADC_ConfigChannel+0x1c>
 8002498:	2302      	movs	r3, #2
 800249a:	e113      	b.n	80026c4 <HAL_ADC_ConfigChannel+0x244>
 800249c:	687b      	ldr	r3, [r7, #4]
 800249e:	2201      	movs	r2, #1
 80024a0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if (sConfig->Channel > ADC_CHANNEL_9)
 80024a4:	683b      	ldr	r3, [r7, #0]
 80024a6:	681b      	ldr	r3, [r3, #0]
 80024a8:	2b09      	cmp	r3, #9
 80024aa:	d925      	bls.n	80024f8 <HAL_ADC_ConfigChannel+0x78>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 80024ac:	687b      	ldr	r3, [r7, #4]
 80024ae:	681b      	ldr	r3, [r3, #0]
 80024b0:	68d9      	ldr	r1, [r3, #12]
 80024b2:	683b      	ldr	r3, [r7, #0]
 80024b4:	681b      	ldr	r3, [r3, #0]
 80024b6:	b29b      	uxth	r3, r3
 80024b8:	461a      	mov	r2, r3
 80024ba:	4613      	mov	r3, r2
 80024bc:	005b      	lsls	r3, r3, #1
 80024be:	4413      	add	r3, r2
 80024c0:	3b1e      	subs	r3, #30
 80024c2:	2207      	movs	r2, #7
 80024c4:	fa02 f303 	lsl.w	r3, r2, r3
 80024c8:	43da      	mvns	r2, r3
 80024ca:	687b      	ldr	r3, [r7, #4]
 80024cc:	681b      	ldr	r3, [r3, #0]
 80024ce:	400a      	ands	r2, r1
 80024d0:	60da      	str	r2, [r3, #12]

    /* Set the new sample time */
    hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 80024d2:	687b      	ldr	r3, [r7, #4]
 80024d4:	681b      	ldr	r3, [r3, #0]
 80024d6:	68d9      	ldr	r1, [r3, #12]
 80024d8:	683b      	ldr	r3, [r7, #0]
 80024da:	689a      	ldr	r2, [r3, #8]
 80024dc:	683b      	ldr	r3, [r7, #0]
 80024de:	681b      	ldr	r3, [r3, #0]
 80024e0:	b29b      	uxth	r3, r3
 80024e2:	4618      	mov	r0, r3
 80024e4:	4603      	mov	r3, r0
 80024e6:	005b      	lsls	r3, r3, #1
 80024e8:	4403      	add	r3, r0
 80024ea:	3b1e      	subs	r3, #30
 80024ec:	409a      	lsls	r2, r3
 80024ee:	687b      	ldr	r3, [r7, #4]
 80024f0:	681b      	ldr	r3, [r3, #0]
 80024f2:	430a      	orrs	r2, r1
 80024f4:	60da      	str	r2, [r3, #12]
 80024f6:	e022      	b.n	800253e <HAL_ADC_ConfigChannel+0xbe>
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 80024f8:	687b      	ldr	r3, [r7, #4]
 80024fa:	681b      	ldr	r3, [r3, #0]
 80024fc:	6919      	ldr	r1, [r3, #16]
 80024fe:	683b      	ldr	r3, [r7, #0]
 8002500:	681b      	ldr	r3, [r3, #0]
 8002502:	b29b      	uxth	r3, r3
 8002504:	461a      	mov	r2, r3
 8002506:	4613      	mov	r3, r2
 8002508:	005b      	lsls	r3, r3, #1
 800250a:	4413      	add	r3, r2
 800250c:	2207      	movs	r2, #7
 800250e:	fa02 f303 	lsl.w	r3, r2, r3
 8002512:	43da      	mvns	r2, r3
 8002514:	687b      	ldr	r3, [r7, #4]
 8002516:	681b      	ldr	r3, [r3, #0]
 8002518:	400a      	ands	r2, r1
 800251a:	611a      	str	r2, [r3, #16]

    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 800251c:	687b      	ldr	r3, [r7, #4]
 800251e:	681b      	ldr	r3, [r3, #0]
 8002520:	6919      	ldr	r1, [r3, #16]
 8002522:	683b      	ldr	r3, [r7, #0]
 8002524:	689a      	ldr	r2, [r3, #8]
 8002526:	683b      	ldr	r3, [r7, #0]
 8002528:	681b      	ldr	r3, [r3, #0]
 800252a:	b29b      	uxth	r3, r3
 800252c:	4618      	mov	r0, r3
 800252e:	4603      	mov	r3, r0
 8002530:	005b      	lsls	r3, r3, #1
 8002532:	4403      	add	r3, r0
 8002534:	409a      	lsls	r2, r3
 8002536:	687b      	ldr	r3, [r7, #4]
 8002538:	681b      	ldr	r3, [r3, #0]
 800253a:	430a      	orrs	r2, r1
 800253c:	611a      	str	r2, [r3, #16]
  }

  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 800253e:	683b      	ldr	r3, [r7, #0]
 8002540:	685b      	ldr	r3, [r3, #4]
 8002542:	2b06      	cmp	r3, #6
 8002544:	d824      	bhi.n	8002590 <HAL_ADC_ConfigChannel+0x110>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 8002546:	687b      	ldr	r3, [r7, #4]
 8002548:	681b      	ldr	r3, [r3, #0]
 800254a:	6b59      	ldr	r1, [r3, #52]	@ 0x34
 800254c:	683b      	ldr	r3, [r7, #0]
 800254e:	685a      	ldr	r2, [r3, #4]
 8002550:	4613      	mov	r3, r2
 8002552:	009b      	lsls	r3, r3, #2
 8002554:	4413      	add	r3, r2
 8002556:	3b05      	subs	r3, #5
 8002558:	221f      	movs	r2, #31
 800255a:	fa02 f303 	lsl.w	r3, r2, r3
 800255e:	43da      	mvns	r2, r3
 8002560:	687b      	ldr	r3, [r7, #4]
 8002562:	681b      	ldr	r3, [r3, #0]
 8002564:	400a      	ands	r2, r1
 8002566:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 8002568:	687b      	ldr	r3, [r7, #4]
 800256a:	681b      	ldr	r3, [r3, #0]
 800256c:	6b59      	ldr	r1, [r3, #52]	@ 0x34
 800256e:	683b      	ldr	r3, [r7, #0]
 8002570:	681b      	ldr	r3, [r3, #0]
 8002572:	b29b      	uxth	r3, r3
 8002574:	4618      	mov	r0, r3
 8002576:	683b      	ldr	r3, [r7, #0]
 8002578:	685a      	ldr	r2, [r3, #4]
 800257a:	4613      	mov	r3, r2
 800257c:	009b      	lsls	r3, r3, #2
 800257e:	4413      	add	r3, r2
 8002580:	3b05      	subs	r3, #5
 8002582:	fa00 f203 	lsl.w	r2, r0, r3
 8002586:	687b      	ldr	r3, [r7, #4]
 8002588:	681b      	ldr	r3, [r3, #0]
 800258a:	430a      	orrs	r2, r1
 800258c:	635a      	str	r2, [r3, #52]	@ 0x34
 800258e:	e04c      	b.n	800262a <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 8002590:	683b      	ldr	r3, [r7, #0]
 8002592:	685b      	ldr	r3, [r3, #4]
 8002594:	2b0c      	cmp	r3, #12
 8002596:	d824      	bhi.n	80025e2 <HAL_ADC_ConfigChannel+0x162>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 8002598:	687b      	ldr	r3, [r7, #4]
 800259a:	681b      	ldr	r3, [r3, #0]
 800259c:	6b19      	ldr	r1, [r3, #48]	@ 0x30
 800259e:	683b      	ldr	r3, [r7, #0]
 80025a0:	685a      	ldr	r2, [r3, #4]
 80025a2:	4613      	mov	r3, r2
 80025a4:	009b      	lsls	r3, r3, #2
 80025a6:	4413      	add	r3, r2
 80025a8:	3b23      	subs	r3, #35	@ 0x23
 80025aa:	221f      	movs	r2, #31
 80025ac:	fa02 f303 	lsl.w	r3, r2, r3
 80025b0:	43da      	mvns	r2, r3
 80025b2:	687b      	ldr	r3, [r7, #4]
 80025b4:	681b      	ldr	r3, [r3, #0]
 80025b6:	400a      	ands	r2, r1
 80025b8:	631a      	str	r2, [r3, #48]	@ 0x30

    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 80025ba:	687b      	ldr	r3, [r7, #4]
 80025bc:	681b      	ldr	r3, [r3, #0]
 80025be:	6b19      	ldr	r1, [r3, #48]	@ 0x30
 80025c0:	683b      	ldr	r3, [r7, #0]
 80025c2:	681b      	ldr	r3, [r3, #0]
 80025c4:	b29b      	uxth	r3, r3
 80025c6:	4618      	mov	r0, r3
 80025c8:	683b      	ldr	r3, [r7, #0]
 80025ca:	685a      	ldr	r2, [r3, #4]
 80025cc:	4613      	mov	r3, r2
 80025ce:	009b      	lsls	r3, r3, #2
 80025d0:	4413      	add	r3, r2
 80025d2:	3b23      	subs	r3, #35	@ 0x23
 80025d4:	fa00 f203 	lsl.w	r2, r0, r3
 80025d8:	687b      	ldr	r3, [r7, #4]
 80025da:	681b      	ldr	r3, [r3, #0]
 80025dc:	430a      	orrs	r2, r1
 80025de:	631a      	str	r2, [r3, #48]	@ 0x30
 80025e0:	e023      	b.n	800262a <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 80025e2:	687b      	ldr	r3, [r7, #4]
 80025e4:	681b      	ldr	r3, [r3, #0]
 80025e6:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 80025e8:	683b      	ldr	r3, [r7, #0]
 80025ea:	685a      	ldr	r2, [r3, #4]
 80025ec:	4613      	mov	r3, r2
 80025ee:	009b      	lsls	r3, r3, #2
 80025f0:	4413      	add	r3, r2
 80025f2:	3b41      	subs	r3, #65	@ 0x41
 80025f4:	221f      	movs	r2, #31
 80025f6:	fa02 f303 	lsl.w	r3, r2, r3
 80025fa:	43da      	mvns	r2, r3
 80025fc:	687b      	ldr	r3, [r7, #4]
 80025fe:	681b      	ldr	r3, [r3, #0]
 8002600:	400a      	ands	r2, r1
 8002602:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 8002604:	687b      	ldr	r3, [r7, #4]
 8002606:	681b      	ldr	r3, [r3, #0]
 8002608:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 800260a:	683b      	ldr	r3, [r7, #0]
 800260c:	681b      	ldr	r3, [r3, #0]
 800260e:	b29b      	uxth	r3, r3
 8002610:	4618      	mov	r0, r3
 8002612:	683b      	ldr	r3, [r7, #0]
 8002614:	685a      	ldr	r2, [r3, #4]
 8002616:	4613      	mov	r3, r2
 8002618:	009b      	lsls	r3, r3, #2
 800261a:	4413      	add	r3, r2
 800261c:	3b41      	subs	r3, #65	@ 0x41
 800261e:	fa00 f203 	lsl.w	r2, r0, r3
 8002622:	687b      	ldr	r3, [r7, #4]
 8002624:	681b      	ldr	r3, [r3, #0]
 8002626:	430a      	orrs	r2, r1
 8002628:	62da      	str	r2, [r3, #44]	@ 0x2c
  }

  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 800262a:	4b29      	ldr	r3, [pc, #164]	@ (80026d0 <HAL_ADC_ConfigChannel+0x250>)
 800262c:	60fb      	str	r3, [r7, #12]

  /* if ADC1 Channel_18 is selected for VBAT Channel ennable VBATE */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 800262e:	687b      	ldr	r3, [r7, #4]
 8002630:	681b      	ldr	r3, [r3, #0]
 8002632:	4a28      	ldr	r2, [pc, #160]	@ (80026d4 <HAL_ADC_ConfigChannel+0x254>)
 8002634:	4293      	cmp	r3, r2
 8002636:	d10f      	bne.n	8002658 <HAL_ADC_ConfigChannel+0x1d8>
 8002638:	683b      	ldr	r3, [r7, #0]
 800263a:	681b      	ldr	r3, [r3, #0]
 800263c:	2b12      	cmp	r3, #18
 800263e:	d10b      	bne.n	8002658 <HAL_ADC_ConfigChannel+0x1d8>
  {
    /* Disable the TEMPSENSOR channel in case of using board with multiplixed ADC_CHANNEL_VBAT & ADC_CHANNEL_TEMPSENSOR*/
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_TSVREFE;
 8002640:	68fb      	ldr	r3, [r7, #12]
 8002642:	685b      	ldr	r3, [r3, #4]
 8002644:	f423 0200 	bic.w	r2, r3, #8388608	@ 0x800000
 8002648:	68fb      	ldr	r3, [r7, #12]
 800264a:	605a      	str	r2, [r3, #4]
    }
    /* Enable the VBAT channel*/
    tmpADC_Common->CCR |= ADC_CCR_VBATE;
 800264c:	68fb      	ldr	r3, [r7, #12]
 800264e:	685b      	ldr	r3, [r3, #4]
 8002650:	f443 0280 	orr.w	r2, r3, #4194304	@ 0x400000
 8002654:	68fb      	ldr	r3, [r7, #12]
 8002656:	605a      	str	r2, [r3, #4]
  }

  /* if ADC1 Channel_16 or Channel_18 is selected for Temperature sensor or
     Channel_17 is selected for VREFINT enable TSVREFE */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 8002658:	687b      	ldr	r3, [r7, #4]
 800265a:	681b      	ldr	r3, [r3, #0]
 800265c:	4a1d      	ldr	r2, [pc, #116]	@ (80026d4 <HAL_ADC_ConfigChannel+0x254>)
 800265e:	4293      	cmp	r3, r2
 8002660:	d12b      	bne.n	80026ba <HAL_ADC_ConfigChannel+0x23a>
 8002662:	683b      	ldr	r3, [r7, #0]
 8002664:	681b      	ldr	r3, [r3, #0]
 8002666:	4a1c      	ldr	r2, [pc, #112]	@ (80026d8 <HAL_ADC_ConfigChannel+0x258>)
 8002668:	4293      	cmp	r3, r2
 800266a:	d003      	beq.n	8002674 <HAL_ADC_ConfigChannel+0x1f4>
 800266c:	683b      	ldr	r3, [r7, #0]
 800266e:	681b      	ldr	r3, [r3, #0]
 8002670:	2b11      	cmp	r3, #17
 8002672:	d122      	bne.n	80026ba <HAL_ADC_ConfigChannel+0x23a>
  {
    /* Disable the VBAT channel in case of using board with multiplixed ADC_CHANNEL_VBAT & ADC_CHANNEL_TEMPSENSOR*/
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_VBATE;
 8002674:	68fb      	ldr	r3, [r7, #12]
 8002676:	685b      	ldr	r3, [r3, #4]
 8002678:	f423 0280 	bic.w	r2, r3, #4194304	@ 0x400000
 800267c:	68fb      	ldr	r3, [r7, #12]
 800267e:	605a      	str	r2, [r3, #4]
    }
    /* Enable the Temperature sensor and VREFINT channel*/
    tmpADC_Common->CCR |= ADC_CCR_TSVREFE;
 8002680:	68fb      	ldr	r3, [r7, #12]
 8002682:	685b      	ldr	r3, [r3, #4]
 8002684:	f443 0200 	orr.w	r2, r3, #8388608	@ 0x800000
 8002688:	68fb      	ldr	r3, [r7, #12]
 800268a:	605a      	str	r2, [r3, #4]

    if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 800268c:	683b      	ldr	r3, [r7, #0]
 800268e:	681b      	ldr	r3, [r3, #0]
 8002690:	4a11      	ldr	r2, [pc, #68]	@ (80026d8 <HAL_ADC_ConfigChannel+0x258>)
 8002692:	4293      	cmp	r3, r2
 8002694:	d111      	bne.n	80026ba <HAL_ADC_ConfigChannel+0x23a>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 8002696:	4b11      	ldr	r3, [pc, #68]	@ (80026dc <HAL_ADC_ConfigChannel+0x25c>)
 8002698:	681b      	ldr	r3, [r3, #0]
 800269a:	4a11      	ldr	r2, [pc, #68]	@ (80026e0 <HAL_ADC_ConfigChannel+0x260>)
 800269c:	fba2 2303 	umull	r2, r3, r2, r3
 80026a0:	0c9a      	lsrs	r2, r3, #18
 80026a2:	4613      	mov	r3, r2
 80026a4:	009b      	lsls	r3, r3, #2
 80026a6:	4413      	add	r3, r2
 80026a8:	005b      	lsls	r3, r3, #1
 80026aa:	60bb      	str	r3, [r7, #8]
      while (counter != 0U)
 80026ac:	e002      	b.n	80026b4 <HAL_ADC_ConfigChannel+0x234>
      {
        counter--;
 80026ae:	68bb      	ldr	r3, [r7, #8]
 80026b0:	3b01      	subs	r3, #1
 80026b2:	60bb      	str	r3, [r7, #8]
      while (counter != 0U)
 80026b4:	68bb      	ldr	r3, [r7, #8]
 80026b6:	2b00      	cmp	r3, #0
 80026b8:	d1f9      	bne.n	80026ae <HAL_ADC_ConfigChannel+0x22e>
      }
    }
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80026ba:	687b      	ldr	r3, [r7, #4]
 80026bc:	2200      	movs	r2, #0
 80026be:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Return function status */
  return HAL_OK;
 80026c2:	2300      	movs	r3, #0
}
 80026c4:	4618      	mov	r0, r3
 80026c6:	3714      	adds	r7, #20
 80026c8:	46bd      	mov	sp, r7
 80026ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026ce:	4770      	bx	lr
 80026d0:	40012300 	.word	0x40012300
 80026d4:	40012000 	.word	0x40012000
 80026d8:	10000012 	.word	0x10000012
 80026dc:	20000000 	.word	0x20000000
 80026e0:	431bde83 	.word	0x431bde83

080026e4 <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef *hadc)
{
 80026e4:	b480      	push	{r7}
 80026e6:	b085      	sub	sp, #20
 80026e8:	af00      	add	r7, sp, #0
 80026ea:	6078      	str	r0, [r7, #4]

  /* Set ADC parameters */
  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 80026ec:	4b79      	ldr	r3, [pc, #484]	@ (80028d4 <ADC_Init+0x1f0>)
 80026ee:	60fb      	str	r3, [r7, #12]

  /* Set the ADC clock prescaler */
  tmpADC_Common->CCR &= ~(ADC_CCR_ADCPRE);
 80026f0:	68fb      	ldr	r3, [r7, #12]
 80026f2:	685b      	ldr	r3, [r3, #4]
 80026f4:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 80026f8:	68fb      	ldr	r3, [r7, #12]
 80026fa:	605a      	str	r2, [r3, #4]
  tmpADC_Common->CCR |=  hadc->Init.ClockPrescaler;
 80026fc:	68fb      	ldr	r3, [r7, #12]
 80026fe:	685a      	ldr	r2, [r3, #4]
 8002700:	687b      	ldr	r3, [r7, #4]
 8002702:	685b      	ldr	r3, [r3, #4]
 8002704:	431a      	orrs	r2, r3
 8002706:	68fb      	ldr	r3, [r7, #12]
 8002708:	605a      	str	r2, [r3, #4]

  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 800270a:	687b      	ldr	r3, [r7, #4]
 800270c:	681b      	ldr	r3, [r3, #0]
 800270e:	685a      	ldr	r2, [r3, #4]
 8002710:	687b      	ldr	r3, [r7, #4]
 8002712:	681b      	ldr	r3, [r3, #0]
 8002714:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8002718:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 800271a:	687b      	ldr	r3, [r7, #4]
 800271c:	681b      	ldr	r3, [r3, #0]
 800271e:	6859      	ldr	r1, [r3, #4]
 8002720:	687b      	ldr	r3, [r7, #4]
 8002722:	691b      	ldr	r3, [r3, #16]
 8002724:	021a      	lsls	r2, r3, #8
 8002726:	687b      	ldr	r3, [r7, #4]
 8002728:	681b      	ldr	r3, [r3, #0]
 800272a:	430a      	orrs	r2, r1
 800272c:	605a      	str	r2, [r3, #4]

  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 800272e:	687b      	ldr	r3, [r7, #4]
 8002730:	681b      	ldr	r3, [r3, #0]
 8002732:	685a      	ldr	r2, [r3, #4]
 8002734:	687b      	ldr	r3, [r7, #4]
 8002736:	681b      	ldr	r3, [r3, #0]
 8002738:	f022 7240 	bic.w	r2, r2, #50331648	@ 0x3000000
 800273c:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 800273e:	687b      	ldr	r3, [r7, #4]
 8002740:	681b      	ldr	r3, [r3, #0]
 8002742:	6859      	ldr	r1, [r3, #4]
 8002744:	687b      	ldr	r3, [r7, #4]
 8002746:	689a      	ldr	r2, [r3, #8]
 8002748:	687b      	ldr	r3, [r7, #4]
 800274a:	681b      	ldr	r3, [r3, #0]
 800274c:	430a      	orrs	r2, r1
 800274e:	605a      	str	r2, [r3, #4]

  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 8002750:	687b      	ldr	r3, [r7, #4]
 8002752:	681b      	ldr	r3, [r3, #0]
 8002754:	689a      	ldr	r2, [r3, #8]
 8002756:	687b      	ldr	r3, [r7, #4]
 8002758:	681b      	ldr	r3, [r3, #0]
 800275a:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 800275e:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 8002760:	687b      	ldr	r3, [r7, #4]
 8002762:	681b      	ldr	r3, [r3, #0]
 8002764:	6899      	ldr	r1, [r3, #8]
 8002766:	687b      	ldr	r3, [r7, #4]
 8002768:	68da      	ldr	r2, [r3, #12]
 800276a:	687b      	ldr	r3, [r7, #4]
 800276c:	681b      	ldr	r3, [r3, #0]
 800276e:	430a      	orrs	r2, r1
 8002770:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8002772:	687b      	ldr	r3, [r7, #4]
 8002774:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002776:	4a58      	ldr	r2, [pc, #352]	@ (80028d8 <ADC_Init+0x1f4>)
 8002778:	4293      	cmp	r3, r2
 800277a:	d022      	beq.n	80027c2 <ADC_Init+0xde>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 800277c:	687b      	ldr	r3, [r7, #4]
 800277e:	681b      	ldr	r3, [r3, #0]
 8002780:	689a      	ldr	r2, [r3, #8]
 8002782:	687b      	ldr	r3, [r7, #4]
 8002784:	681b      	ldr	r3, [r3, #0]
 8002786:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 800278a:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 800278c:	687b      	ldr	r3, [r7, #4]
 800278e:	681b      	ldr	r3, [r3, #0]
 8002790:	6899      	ldr	r1, [r3, #8]
 8002792:	687b      	ldr	r3, [r7, #4]
 8002794:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8002796:	687b      	ldr	r3, [r7, #4]
 8002798:	681b      	ldr	r3, [r3, #0]
 800279a:	430a      	orrs	r2, r1
 800279c:	609a      	str	r2, [r3, #8]

    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 800279e:	687b      	ldr	r3, [r7, #4]
 80027a0:	681b      	ldr	r3, [r3, #0]
 80027a2:	689a      	ldr	r2, [r3, #8]
 80027a4:	687b      	ldr	r3, [r7, #4]
 80027a6:	681b      	ldr	r3, [r3, #0]
 80027a8:	f022 5240 	bic.w	r2, r2, #805306368	@ 0x30000000
 80027ac:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 80027ae:	687b      	ldr	r3, [r7, #4]
 80027b0:	681b      	ldr	r3, [r3, #0]
 80027b2:	6899      	ldr	r1, [r3, #8]
 80027b4:	687b      	ldr	r3, [r7, #4]
 80027b6:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80027b8:	687b      	ldr	r3, [r7, #4]
 80027ba:	681b      	ldr	r3, [r3, #0]
 80027bc:	430a      	orrs	r2, r1
 80027be:	609a      	str	r2, [r3, #8]
 80027c0:	e00f      	b.n	80027e2 <ADC_Init+0xfe>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 80027c2:	687b      	ldr	r3, [r7, #4]
 80027c4:	681b      	ldr	r3, [r3, #0]
 80027c6:	689a      	ldr	r2, [r3, #8]
 80027c8:	687b      	ldr	r3, [r7, #4]
 80027ca:	681b      	ldr	r3, [r3, #0]
 80027cc:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 80027d0:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 80027d2:	687b      	ldr	r3, [r7, #4]
 80027d4:	681b      	ldr	r3, [r3, #0]
 80027d6:	689a      	ldr	r2, [r3, #8]
 80027d8:	687b      	ldr	r3, [r7, #4]
 80027da:	681b      	ldr	r3, [r3, #0]
 80027dc:	f022 5240 	bic.w	r2, r2, #805306368	@ 0x30000000
 80027e0:	609a      	str	r2, [r3, #8]
  }

  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 80027e2:	687b      	ldr	r3, [r7, #4]
 80027e4:	681b      	ldr	r3, [r3, #0]
 80027e6:	689a      	ldr	r2, [r3, #8]
 80027e8:	687b      	ldr	r3, [r7, #4]
 80027ea:	681b      	ldr	r3, [r3, #0]
 80027ec:	f022 0202 	bic.w	r2, r2, #2
 80027f0:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 80027f2:	687b      	ldr	r3, [r7, #4]
 80027f4:	681b      	ldr	r3, [r3, #0]
 80027f6:	6899      	ldr	r1, [r3, #8]
 80027f8:	687b      	ldr	r3, [r7, #4]
 80027fa:	7e1b      	ldrb	r3, [r3, #24]
 80027fc:	005a      	lsls	r2, r3, #1
 80027fe:	687b      	ldr	r3, [r7, #4]
 8002800:	681b      	ldr	r3, [r3, #0]
 8002802:	430a      	orrs	r2, r1
 8002804:	609a      	str	r2, [r3, #8]

  if (hadc->Init.DiscontinuousConvMode != DISABLE)
 8002806:	687b      	ldr	r3, [r7, #4]
 8002808:	f893 3020 	ldrb.w	r3, [r3, #32]
 800280c:	2b00      	cmp	r3, #0
 800280e:	d01b      	beq.n	8002848 <ADC_Init+0x164>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));

    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 8002810:	687b      	ldr	r3, [r7, #4]
 8002812:	681b      	ldr	r3, [r3, #0]
 8002814:	685a      	ldr	r2, [r3, #4]
 8002816:	687b      	ldr	r3, [r7, #4]
 8002818:	681b      	ldr	r3, [r3, #0]
 800281a:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 800281e:	605a      	str	r2, [r3, #4]

    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 8002820:	687b      	ldr	r3, [r7, #4]
 8002822:	681b      	ldr	r3, [r3, #0]
 8002824:	685a      	ldr	r2, [r3, #4]
 8002826:	687b      	ldr	r3, [r7, #4]
 8002828:	681b      	ldr	r3, [r3, #0]
 800282a:	f422 4260 	bic.w	r2, r2, #57344	@ 0xe000
 800282e:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 8002830:	687b      	ldr	r3, [r7, #4]
 8002832:	681b      	ldr	r3, [r3, #0]
 8002834:	6859      	ldr	r1, [r3, #4]
 8002836:	687b      	ldr	r3, [r7, #4]
 8002838:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800283a:	3b01      	subs	r3, #1
 800283c:	035a      	lsls	r2, r3, #13
 800283e:	687b      	ldr	r3, [r7, #4]
 8002840:	681b      	ldr	r3, [r3, #0]
 8002842:	430a      	orrs	r2, r1
 8002844:	605a      	str	r2, [r3, #4]
 8002846:	e007      	b.n	8002858 <ADC_Init+0x174>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 8002848:	687b      	ldr	r3, [r7, #4]
 800284a:	681b      	ldr	r3, [r3, #0]
 800284c:	685a      	ldr	r2, [r3, #4]
 800284e:	687b      	ldr	r3, [r7, #4]
 8002850:	681b      	ldr	r3, [r3, #0]
 8002852:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8002856:	605a      	str	r2, [r3, #4]
  }

  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 8002858:	687b      	ldr	r3, [r7, #4]
 800285a:	681b      	ldr	r3, [r3, #0]
 800285c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800285e:	687b      	ldr	r3, [r7, #4]
 8002860:	681b      	ldr	r3, [r3, #0]
 8002862:	f422 0270 	bic.w	r2, r2, #15728640	@ 0xf00000
 8002866:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 8002868:	687b      	ldr	r3, [r7, #4]
 800286a:	681b      	ldr	r3, [r3, #0]
 800286c:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 800286e:	687b      	ldr	r3, [r7, #4]
 8002870:	69db      	ldr	r3, [r3, #28]
 8002872:	3b01      	subs	r3, #1
 8002874:	051a      	lsls	r2, r3, #20
 8002876:	687b      	ldr	r3, [r7, #4]
 8002878:	681b      	ldr	r3, [r3, #0]
 800287a:	430a      	orrs	r2, r1
 800287c:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 800287e:	687b      	ldr	r3, [r7, #4]
 8002880:	681b      	ldr	r3, [r3, #0]
 8002882:	689a      	ldr	r2, [r3, #8]
 8002884:	687b      	ldr	r3, [r7, #4]
 8002886:	681b      	ldr	r3, [r3, #0]
 8002888:	f422 7200 	bic.w	r2, r2, #512	@ 0x200
 800288c:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 800288e:	687b      	ldr	r3, [r7, #4]
 8002890:	681b      	ldr	r3, [r3, #0]
 8002892:	6899      	ldr	r1, [r3, #8]
 8002894:	687b      	ldr	r3, [r7, #4]
 8002896:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 800289a:	025a      	lsls	r2, r3, #9
 800289c:	687b      	ldr	r3, [r7, #4]
 800289e:	681b      	ldr	r3, [r3, #0]
 80028a0:	430a      	orrs	r2, r1
 80028a2:	609a      	str	r2, [r3, #8]

  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 80028a4:	687b      	ldr	r3, [r7, #4]
 80028a6:	681b      	ldr	r3, [r3, #0]
 80028a8:	689a      	ldr	r2, [r3, #8]
 80028aa:	687b      	ldr	r3, [r7, #4]
 80028ac:	681b      	ldr	r3, [r3, #0]
 80028ae:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80028b2:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 80028b4:	687b      	ldr	r3, [r7, #4]
 80028b6:	681b      	ldr	r3, [r3, #0]
 80028b8:	6899      	ldr	r1, [r3, #8]
 80028ba:	687b      	ldr	r3, [r7, #4]
 80028bc:	695b      	ldr	r3, [r3, #20]
 80028be:	029a      	lsls	r2, r3, #10
 80028c0:	687b      	ldr	r3, [r7, #4]
 80028c2:	681b      	ldr	r3, [r3, #0]
 80028c4:	430a      	orrs	r2, r1
 80028c6:	609a      	str	r2, [r3, #8]
}
 80028c8:	bf00      	nop
 80028ca:	3714      	adds	r7, #20
 80028cc:	46bd      	mov	sp, r7
 80028ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028d2:	4770      	bx	lr
 80028d4:	40012300 	.word	0x40012300
 80028d8:	0f000001 	.word	0x0f000001

080028dc <ADC_DMAConvCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAConvCplt(DMA_HandleTypeDef *hdma)
{
 80028dc:	b580      	push	{r7, lr}
 80028de:	b084      	sub	sp, #16
 80028e0:	af00      	add	r7, sp, #0
 80028e2:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80028e4:	687b      	ldr	r3, [r7, #4]
 80028e6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80028e8:	60fb      	str	r3, [r7, #12]

  /* Update state machine on conversion status if not in error state */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA))
 80028ea:	68fb      	ldr	r3, [r7, #12]
 80028ec:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80028ee:	f003 0350 	and.w	r3, r3, #80	@ 0x50
 80028f2:	2b00      	cmp	r3, #0
 80028f4:	d13c      	bne.n	8002970 <ADC_DMAConvCplt+0x94>
  {
    /* Update ADC state machine */
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 80028f6:	68fb      	ldr	r3, [r7, #12]
 80028f8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80028fa:	f443 7200 	orr.w	r2, r3, #512	@ 0x200
 80028fe:	68fb      	ldr	r3, [r7, #12]
 8002900:	641a      	str	r2, [r3, #64]	@ 0x40
    /* by external trigger, continuous mode or scan sequence on going.      */
    /* Note: On STM32F4, there is no independent flag of end of sequence.   */
    /*       The test of scan sequence on going is done either with scan    */
    /*       sequence disabled or with end of conversion flag set to        */
    /*       of end of sequence.                                            */
    if (ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8002902:	68fb      	ldr	r3, [r7, #12]
 8002904:	681b      	ldr	r3, [r3, #0]
 8002906:	689b      	ldr	r3, [r3, #8]
 8002908:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 800290c:	2b00      	cmp	r3, #0
 800290e:	d12b      	bne.n	8002968 <ADC_DMAConvCplt+0x8c>
        (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8002910:	68fb      	ldr	r3, [r7, #12]
 8002912:	7e1b      	ldrb	r3, [r3, #24]
    if (ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8002914:	2b00      	cmp	r3, #0
 8002916:	d127      	bne.n	8002968 <ADC_DMAConvCplt+0x8c>
        (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 8002918:	68fb      	ldr	r3, [r7, #12]
 800291a:	681b      	ldr	r3, [r3, #0]
 800291c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800291e:	f403 0370 	and.w	r3, r3, #15728640	@ 0xf00000
        (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8002922:	2b00      	cmp	r3, #0
 8002924:	d006      	beq.n	8002934 <ADC_DMAConvCplt+0x58>
         HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)))
 8002926:	68fb      	ldr	r3, [r7, #12]
 8002928:	681b      	ldr	r3, [r3, #0]
 800292a:	689b      	ldr	r3, [r3, #8]
 800292c:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
        (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 8002930:	2b00      	cmp	r3, #0
 8002932:	d119      	bne.n	8002968 <ADC_DMAConvCplt+0x8c>
    {
      /* Disable ADC end of single conversion interrupt on group regular */
      /* Note: Overrun interrupt was enabled with EOC interrupt in          */
      /* HAL_ADC_Start_IT(), but is not disabled here because can be used   */
      /* by overrun IRQ process below.                                      */
      __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC);
 8002934:	68fb      	ldr	r3, [r7, #12]
 8002936:	681b      	ldr	r3, [r3, #0]
 8002938:	685a      	ldr	r2, [r3, #4]
 800293a:	68fb      	ldr	r3, [r7, #12]
 800293c:	681b      	ldr	r3, [r3, #0]
 800293e:	f022 0220 	bic.w	r2, r2, #32
 8002942:	605a      	str	r2, [r3, #4]

      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 8002944:	68fb      	ldr	r3, [r7, #12]
 8002946:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002948:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 800294c:	68fb      	ldr	r3, [r7, #12]
 800294e:	641a      	str	r2, [r3, #64]	@ 0x40

      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8002950:	68fb      	ldr	r3, [r7, #12]
 8002952:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002954:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8002958:	2b00      	cmp	r3, #0
 800295a:	d105      	bne.n	8002968 <ADC_DMAConvCplt+0x8c>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 800295c:	68fb      	ldr	r3, [r7, #12]
 800295e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002960:	f043 0201 	orr.w	r2, r3, #1
 8002964:	68fb      	ldr	r3, [r7, #12]
 8002966:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 8002968:	68f8      	ldr	r0, [r7, #12]
 800296a:	f7ff f877 	bl	8001a5c <HAL_ADC_ConvCpltCallback>
    {
      /* Call DMA error callback */
      hadc->DMA_Handle->XferErrorCallback(hdma);
    }
  }
}
 800296e:	e00e      	b.n	800298e <ADC_DMAConvCplt+0xb2>
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) != 0UL)
 8002970:	68fb      	ldr	r3, [r7, #12]
 8002972:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002974:	f003 0310 	and.w	r3, r3, #16
 8002978:	2b00      	cmp	r3, #0
 800297a:	d003      	beq.n	8002984 <ADC_DMAConvCplt+0xa8>
      HAL_ADC_ErrorCallback(hadc);
 800297c:	68f8      	ldr	r0, [r7, #12]
 800297e:	f7ff fd75 	bl	800246c <HAL_ADC_ErrorCallback>
}
 8002982:	e004      	b.n	800298e <ADC_DMAConvCplt+0xb2>
      hadc->DMA_Handle->XferErrorCallback(hdma);
 8002984:	68fb      	ldr	r3, [r7, #12]
 8002986:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002988:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800298a:	6878      	ldr	r0, [r7, #4]
 800298c:	4798      	blx	r3
}
 800298e:	bf00      	nop
 8002990:	3710      	adds	r7, #16
 8002992:	46bd      	mov	sp, r7
 8002994:	bd80      	pop	{r7, pc}

08002996 <ADC_DMAHalfConvCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)
{
 8002996:	b580      	push	{r7, lr}
 8002998:	b084      	sub	sp, #16
 800299a:	af00      	add	r7, sp, #0
 800299c:	6078      	str	r0, [r7, #4]
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800299e:	687b      	ldr	r3, [r7, #4]
 80029a0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80029a2:	60fb      	str	r3, [r7, #12]
  /* Half conversion callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ConvHalfCpltCallback(hadc);
#else
  HAL_ADC_ConvHalfCpltCallback(hadc);
 80029a4:	68f8      	ldr	r0, [r7, #12]
 80029a6:	f7ff fd57 	bl	8002458 <HAL_ADC_ConvHalfCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 80029aa:	bf00      	nop
 80029ac:	3710      	adds	r7, #16
 80029ae:	46bd      	mov	sp, r7
 80029b0:	bd80      	pop	{r7, pc}

080029b2 <ADC_DMAError>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAError(DMA_HandleTypeDef *hdma)
{
 80029b2:	b580      	push	{r7, lr}
 80029b4:	b084      	sub	sp, #16
 80029b6:	af00      	add	r7, sp, #0
 80029b8:	6078      	str	r0, [r7, #4]
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80029ba:	687b      	ldr	r3, [r7, #4]
 80029bc:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80029be:	60fb      	str	r3, [r7, #12]
  hadc->State = HAL_ADC_STATE_ERROR_DMA;
 80029c0:	68fb      	ldr	r3, [r7, #12]
 80029c2:	2240      	movs	r2, #64	@ 0x40
 80029c4:	641a      	str	r2, [r3, #64]	@ 0x40
  /* Set ADC error code to DMA error */
  hadc->ErrorCode |= HAL_ADC_ERROR_DMA;
 80029c6:	68fb      	ldr	r3, [r7, #12]
 80029c8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80029ca:	f043 0204 	orr.w	r2, r3, #4
 80029ce:	68fb      	ldr	r3, [r7, #12]
 80029d0:	645a      	str	r2, [r3, #68]	@ 0x44
  /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ErrorCallback(hadc);
#else
  HAL_ADC_ErrorCallback(hadc);
 80029d2:	68f8      	ldr	r0, [r7, #12]
 80029d4:	f7ff fd4a 	bl	800246c <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 80029d8:	bf00      	nop
 80029da:	3710      	adds	r7, #16
 80029dc:	46bd      	mov	sp, r7
 80029de:	bd80      	pop	{r7, pc}

080029e0 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80029e0:	b480      	push	{r7}
 80029e2:	b085      	sub	sp, #20
 80029e4:	af00      	add	r7, sp, #0
 80029e6:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80029e8:	687b      	ldr	r3, [r7, #4]
 80029ea:	f003 0307 	and.w	r3, r3, #7
 80029ee:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80029f0:	4b0c      	ldr	r3, [pc, #48]	@ (8002a24 <__NVIC_SetPriorityGrouping+0x44>)
 80029f2:	68db      	ldr	r3, [r3, #12]
 80029f4:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80029f6:	68ba      	ldr	r2, [r7, #8]
 80029f8:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 80029fc:	4013      	ands	r3, r2
 80029fe:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8002a00:	68fb      	ldr	r3, [r7, #12]
 8002a02:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002a04:	68bb      	ldr	r3, [r7, #8]
 8002a06:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8002a08:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8002a0c:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8002a10:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8002a12:	4a04      	ldr	r2, [pc, #16]	@ (8002a24 <__NVIC_SetPriorityGrouping+0x44>)
 8002a14:	68bb      	ldr	r3, [r7, #8]
 8002a16:	60d3      	str	r3, [r2, #12]
}
 8002a18:	bf00      	nop
 8002a1a:	3714      	adds	r7, #20
 8002a1c:	46bd      	mov	sp, r7
 8002a1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a22:	4770      	bx	lr
 8002a24:	e000ed00 	.word	0xe000ed00

08002a28 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8002a28:	b480      	push	{r7}
 8002a2a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002a2c:	4b04      	ldr	r3, [pc, #16]	@ (8002a40 <__NVIC_GetPriorityGrouping+0x18>)
 8002a2e:	68db      	ldr	r3, [r3, #12]
 8002a30:	0a1b      	lsrs	r3, r3, #8
 8002a32:	f003 0307 	and.w	r3, r3, #7
}
 8002a36:	4618      	mov	r0, r3
 8002a38:	46bd      	mov	sp, r7
 8002a3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a3e:	4770      	bx	lr
 8002a40:	e000ed00 	.word	0xe000ed00

08002a44 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002a44:	b480      	push	{r7}
 8002a46:	b083      	sub	sp, #12
 8002a48:	af00      	add	r7, sp, #0
 8002a4a:	4603      	mov	r3, r0
 8002a4c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002a4e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002a52:	2b00      	cmp	r3, #0
 8002a54:	db0b      	blt.n	8002a6e <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002a56:	79fb      	ldrb	r3, [r7, #7]
 8002a58:	f003 021f 	and.w	r2, r3, #31
 8002a5c:	4907      	ldr	r1, [pc, #28]	@ (8002a7c <__NVIC_EnableIRQ+0x38>)
 8002a5e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002a62:	095b      	lsrs	r3, r3, #5
 8002a64:	2001      	movs	r0, #1
 8002a66:	fa00 f202 	lsl.w	r2, r0, r2
 8002a6a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8002a6e:	bf00      	nop
 8002a70:	370c      	adds	r7, #12
 8002a72:	46bd      	mov	sp, r7
 8002a74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a78:	4770      	bx	lr
 8002a7a:	bf00      	nop
 8002a7c:	e000e100 	.word	0xe000e100

08002a80 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002a80:	b480      	push	{r7}
 8002a82:	b083      	sub	sp, #12
 8002a84:	af00      	add	r7, sp, #0
 8002a86:	4603      	mov	r3, r0
 8002a88:	6039      	str	r1, [r7, #0]
 8002a8a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002a8c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002a90:	2b00      	cmp	r3, #0
 8002a92:	db0a      	blt.n	8002aaa <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002a94:	683b      	ldr	r3, [r7, #0]
 8002a96:	b2da      	uxtb	r2, r3
 8002a98:	490c      	ldr	r1, [pc, #48]	@ (8002acc <__NVIC_SetPriority+0x4c>)
 8002a9a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002a9e:	0112      	lsls	r2, r2, #4
 8002aa0:	b2d2      	uxtb	r2, r2
 8002aa2:	440b      	add	r3, r1
 8002aa4:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002aa8:	e00a      	b.n	8002ac0 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002aaa:	683b      	ldr	r3, [r7, #0]
 8002aac:	b2da      	uxtb	r2, r3
 8002aae:	4908      	ldr	r1, [pc, #32]	@ (8002ad0 <__NVIC_SetPriority+0x50>)
 8002ab0:	79fb      	ldrb	r3, [r7, #7]
 8002ab2:	f003 030f 	and.w	r3, r3, #15
 8002ab6:	3b04      	subs	r3, #4
 8002ab8:	0112      	lsls	r2, r2, #4
 8002aba:	b2d2      	uxtb	r2, r2
 8002abc:	440b      	add	r3, r1
 8002abe:	761a      	strb	r2, [r3, #24]
}
 8002ac0:	bf00      	nop
 8002ac2:	370c      	adds	r7, #12
 8002ac4:	46bd      	mov	sp, r7
 8002ac6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002aca:	4770      	bx	lr
 8002acc:	e000e100 	.word	0xe000e100
 8002ad0:	e000ed00 	.word	0xe000ed00

08002ad4 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002ad4:	b480      	push	{r7}
 8002ad6:	b089      	sub	sp, #36	@ 0x24
 8002ad8:	af00      	add	r7, sp, #0
 8002ada:	60f8      	str	r0, [r7, #12]
 8002adc:	60b9      	str	r1, [r7, #8]
 8002ade:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002ae0:	68fb      	ldr	r3, [r7, #12]
 8002ae2:	f003 0307 	and.w	r3, r3, #7
 8002ae6:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002ae8:	69fb      	ldr	r3, [r7, #28]
 8002aea:	f1c3 0307 	rsb	r3, r3, #7
 8002aee:	2b04      	cmp	r3, #4
 8002af0:	bf28      	it	cs
 8002af2:	2304      	movcs	r3, #4
 8002af4:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002af6:	69fb      	ldr	r3, [r7, #28]
 8002af8:	3304      	adds	r3, #4
 8002afa:	2b06      	cmp	r3, #6
 8002afc:	d902      	bls.n	8002b04 <NVIC_EncodePriority+0x30>
 8002afe:	69fb      	ldr	r3, [r7, #28]
 8002b00:	3b03      	subs	r3, #3
 8002b02:	e000      	b.n	8002b06 <NVIC_EncodePriority+0x32>
 8002b04:	2300      	movs	r3, #0
 8002b06:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002b08:	f04f 32ff 	mov.w	r2, #4294967295
 8002b0c:	69bb      	ldr	r3, [r7, #24]
 8002b0e:	fa02 f303 	lsl.w	r3, r2, r3
 8002b12:	43da      	mvns	r2, r3
 8002b14:	68bb      	ldr	r3, [r7, #8]
 8002b16:	401a      	ands	r2, r3
 8002b18:	697b      	ldr	r3, [r7, #20]
 8002b1a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002b1c:	f04f 31ff 	mov.w	r1, #4294967295
 8002b20:	697b      	ldr	r3, [r7, #20]
 8002b22:	fa01 f303 	lsl.w	r3, r1, r3
 8002b26:	43d9      	mvns	r1, r3
 8002b28:	687b      	ldr	r3, [r7, #4]
 8002b2a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002b2c:	4313      	orrs	r3, r2
         );
}
 8002b2e:	4618      	mov	r0, r3
 8002b30:	3724      	adds	r7, #36	@ 0x24
 8002b32:	46bd      	mov	sp, r7
 8002b34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b38:	4770      	bx	lr
	...

08002b3c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8002b3c:	b580      	push	{r7, lr}
 8002b3e:	b082      	sub	sp, #8
 8002b40:	af00      	add	r7, sp, #0
 8002b42:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002b44:	687b      	ldr	r3, [r7, #4]
 8002b46:	3b01      	subs	r3, #1
 8002b48:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8002b4c:	d301      	bcc.n	8002b52 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8002b4e:	2301      	movs	r3, #1
 8002b50:	e00f      	b.n	8002b72 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8002b52:	4a0a      	ldr	r2, [pc, #40]	@ (8002b7c <SysTick_Config+0x40>)
 8002b54:	687b      	ldr	r3, [r7, #4]
 8002b56:	3b01      	subs	r3, #1
 8002b58:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8002b5a:	210f      	movs	r1, #15
 8002b5c:	f04f 30ff 	mov.w	r0, #4294967295
 8002b60:	f7ff ff8e 	bl	8002a80 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002b64:	4b05      	ldr	r3, [pc, #20]	@ (8002b7c <SysTick_Config+0x40>)
 8002b66:	2200      	movs	r2, #0
 8002b68:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8002b6a:	4b04      	ldr	r3, [pc, #16]	@ (8002b7c <SysTick_Config+0x40>)
 8002b6c:	2207      	movs	r2, #7
 8002b6e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8002b70:	2300      	movs	r3, #0
}
 8002b72:	4618      	mov	r0, r3
 8002b74:	3708      	adds	r7, #8
 8002b76:	46bd      	mov	sp, r7
 8002b78:	bd80      	pop	{r7, pc}
 8002b7a:	bf00      	nop
 8002b7c:	e000e010 	.word	0xe000e010

08002b80 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002b80:	b580      	push	{r7, lr}
 8002b82:	b082      	sub	sp, #8
 8002b84:	af00      	add	r7, sp, #0
 8002b86:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002b88:	6878      	ldr	r0, [r7, #4]
 8002b8a:	f7ff ff29 	bl	80029e0 <__NVIC_SetPriorityGrouping>
}
 8002b8e:	bf00      	nop
 8002b90:	3708      	adds	r7, #8
 8002b92:	46bd      	mov	sp, r7
 8002b94:	bd80      	pop	{r7, pc}

08002b96 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8002b96:	b580      	push	{r7, lr}
 8002b98:	b086      	sub	sp, #24
 8002b9a:	af00      	add	r7, sp, #0
 8002b9c:	4603      	mov	r3, r0
 8002b9e:	60b9      	str	r1, [r7, #8]
 8002ba0:	607a      	str	r2, [r7, #4]
 8002ba2:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8002ba4:	2300      	movs	r3, #0
 8002ba6:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8002ba8:	f7ff ff3e 	bl	8002a28 <__NVIC_GetPriorityGrouping>
 8002bac:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8002bae:	687a      	ldr	r2, [r7, #4]
 8002bb0:	68b9      	ldr	r1, [r7, #8]
 8002bb2:	6978      	ldr	r0, [r7, #20]
 8002bb4:	f7ff ff8e 	bl	8002ad4 <NVIC_EncodePriority>
 8002bb8:	4602      	mov	r2, r0
 8002bba:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002bbe:	4611      	mov	r1, r2
 8002bc0:	4618      	mov	r0, r3
 8002bc2:	f7ff ff5d 	bl	8002a80 <__NVIC_SetPriority>
}
 8002bc6:	bf00      	nop
 8002bc8:	3718      	adds	r7, #24
 8002bca:	46bd      	mov	sp, r7
 8002bcc:	bd80      	pop	{r7, pc}

08002bce <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002bce:	b580      	push	{r7, lr}
 8002bd0:	b082      	sub	sp, #8
 8002bd2:	af00      	add	r7, sp, #0
 8002bd4:	4603      	mov	r3, r0
 8002bd6:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002bd8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002bdc:	4618      	mov	r0, r3
 8002bde:	f7ff ff31 	bl	8002a44 <__NVIC_EnableIRQ>
}
 8002be2:	bf00      	nop
 8002be4:	3708      	adds	r7, #8
 8002be6:	46bd      	mov	sp, r7
 8002be8:	bd80      	pop	{r7, pc}

08002bea <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8002bea:	b580      	push	{r7, lr}
 8002bec:	b082      	sub	sp, #8
 8002bee:	af00      	add	r7, sp, #0
 8002bf0:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8002bf2:	6878      	ldr	r0, [r7, #4]
 8002bf4:	f7ff ffa2 	bl	8002b3c <SysTick_Config>
 8002bf8:	4603      	mov	r3, r0
}
 8002bfa:	4618      	mov	r0, r3
 8002bfc:	3708      	adds	r7, #8
 8002bfe:	46bd      	mov	sp, r7
 8002c00:	bd80      	pop	{r7, pc}
	...

08002c04 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8002c04:	b580      	push	{r7, lr}
 8002c06:	b086      	sub	sp, #24
 8002c08:	af00      	add	r7, sp, #0
 8002c0a:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8002c0c:	2300      	movs	r3, #0
 8002c0e:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 8002c10:	f7ff fac2 	bl	8002198 <HAL_GetTick>
 8002c14:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 8002c16:	687b      	ldr	r3, [r7, #4]
 8002c18:	2b00      	cmp	r3, #0
 8002c1a:	d101      	bne.n	8002c20 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 8002c1c:	2301      	movs	r3, #1
 8002c1e:	e099      	b.n	8002d54 <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8002c20:	687b      	ldr	r3, [r7, #4]
 8002c22:	2202      	movs	r2, #2
 8002c24:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 8002c28:	687b      	ldr	r3, [r7, #4]
 8002c2a:	2200      	movs	r2, #0
 8002c2c:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 8002c30:	687b      	ldr	r3, [r7, #4]
 8002c32:	681b      	ldr	r3, [r3, #0]
 8002c34:	681a      	ldr	r2, [r3, #0]
 8002c36:	687b      	ldr	r3, [r7, #4]
 8002c38:	681b      	ldr	r3, [r3, #0]
 8002c3a:	f022 0201 	bic.w	r2, r2, #1
 8002c3e:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8002c40:	e00f      	b.n	8002c62 <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8002c42:	f7ff faa9 	bl	8002198 <HAL_GetTick>
 8002c46:	4602      	mov	r2, r0
 8002c48:	693b      	ldr	r3, [r7, #16]
 8002c4a:	1ad3      	subs	r3, r2, r3
 8002c4c:	2b05      	cmp	r3, #5
 8002c4e:	d908      	bls.n	8002c62 <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8002c50:	687b      	ldr	r3, [r7, #4]
 8002c52:	2220      	movs	r2, #32
 8002c54:	655a      	str	r2, [r3, #84]	@ 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 8002c56:	687b      	ldr	r3, [r7, #4]
 8002c58:	2203      	movs	r2, #3
 8002c5a:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
      
      return HAL_TIMEOUT;
 8002c5e:	2303      	movs	r3, #3
 8002c60:	e078      	b.n	8002d54 <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8002c62:	687b      	ldr	r3, [r7, #4]
 8002c64:	681b      	ldr	r3, [r3, #0]
 8002c66:	681b      	ldr	r3, [r3, #0]
 8002c68:	f003 0301 	and.w	r3, r3, #1
 8002c6c:	2b00      	cmp	r3, #0
 8002c6e:	d1e8      	bne.n	8002c42 <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 8002c70:	687b      	ldr	r3, [r7, #4]
 8002c72:	681b      	ldr	r3, [r3, #0]
 8002c74:	681b      	ldr	r3, [r3, #0]
 8002c76:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8002c78:	697a      	ldr	r2, [r7, #20]
 8002c7a:	4b38      	ldr	r3, [pc, #224]	@ (8002d5c <HAL_DMA_Init+0x158>)
 8002c7c:	4013      	ands	r3, r2
 8002c7e:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8002c80:	687b      	ldr	r3, [r7, #4]
 8002c82:	685a      	ldr	r2, [r3, #4]
 8002c84:	687b      	ldr	r3, [r7, #4]
 8002c86:	689b      	ldr	r3, [r3, #8]
 8002c88:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002c8a:	687b      	ldr	r3, [r7, #4]
 8002c8c:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8002c8e:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002c90:	687b      	ldr	r3, [r7, #4]
 8002c92:	691b      	ldr	r3, [r3, #16]
 8002c94:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002c96:	687b      	ldr	r3, [r7, #4]
 8002c98:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002c9a:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002c9c:	687b      	ldr	r3, [r7, #4]
 8002c9e:	699b      	ldr	r3, [r3, #24]
 8002ca0:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8002ca2:	687b      	ldr	r3, [r7, #4]
 8002ca4:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002ca6:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8002ca8:	687b      	ldr	r3, [r7, #4]
 8002caa:	6a1b      	ldr	r3, [r3, #32]
 8002cac:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8002cae:	697a      	ldr	r2, [r7, #20]
 8002cb0:	4313      	orrs	r3, r2
 8002cb2:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8002cb4:	687b      	ldr	r3, [r7, #4]
 8002cb6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002cb8:	2b04      	cmp	r3, #4
 8002cba:	d107      	bne.n	8002ccc <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8002cbc:	687b      	ldr	r3, [r7, #4]
 8002cbe:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8002cc0:	687b      	ldr	r3, [r7, #4]
 8002cc2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002cc4:	4313      	orrs	r3, r2
 8002cc6:	697a      	ldr	r2, [r7, #20]
 8002cc8:	4313      	orrs	r3, r2
 8002cca:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 8002ccc:	687b      	ldr	r3, [r7, #4]
 8002cce:	681b      	ldr	r3, [r3, #0]
 8002cd0:	697a      	ldr	r2, [r7, #20]
 8002cd2:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 8002cd4:	687b      	ldr	r3, [r7, #4]
 8002cd6:	681b      	ldr	r3, [r3, #0]
 8002cd8:	695b      	ldr	r3, [r3, #20]
 8002cda:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8002cdc:	697b      	ldr	r3, [r7, #20]
 8002cde:	f023 0307 	bic.w	r3, r3, #7
 8002ce2:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 8002ce4:	687b      	ldr	r3, [r7, #4]
 8002ce6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002ce8:	697a      	ldr	r2, [r7, #20]
 8002cea:	4313      	orrs	r3, r2
 8002cec:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8002cee:	687b      	ldr	r3, [r7, #4]
 8002cf0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002cf2:	2b04      	cmp	r3, #4
 8002cf4:	d117      	bne.n	8002d26 <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 8002cf6:	687b      	ldr	r3, [r7, #4]
 8002cf8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002cfa:	697a      	ldr	r2, [r7, #20]
 8002cfc:	4313      	orrs	r3, r2
 8002cfe:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8002d00:	687b      	ldr	r3, [r7, #4]
 8002d02:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002d04:	2b00      	cmp	r3, #0
 8002d06:	d00e      	beq.n	8002d26 <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8002d08:	6878      	ldr	r0, [r7, #4]
 8002d0a:	f000 fb01 	bl	8003310 <DMA_CheckFifoParam>
 8002d0e:	4603      	mov	r3, r0
 8002d10:	2b00      	cmp	r3, #0
 8002d12:	d008      	beq.n	8002d26 <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8002d14:	687b      	ldr	r3, [r7, #4]
 8002d16:	2240      	movs	r2, #64	@ 0x40
 8002d18:	655a      	str	r2, [r3, #84]	@ 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8002d1a:	687b      	ldr	r3, [r7, #4]
 8002d1c:	2201      	movs	r2, #1
 8002d1e:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
        
        return HAL_ERROR; 
 8002d22:	2301      	movs	r3, #1
 8002d24:	e016      	b.n	8002d54 <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 8002d26:	687b      	ldr	r3, [r7, #4]
 8002d28:	681b      	ldr	r3, [r3, #0]
 8002d2a:	697a      	ldr	r2, [r7, #20]
 8002d2c:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8002d2e:	6878      	ldr	r0, [r7, #4]
 8002d30:	f000 fab8 	bl	80032a4 <DMA_CalcBaseAndBitshift>
 8002d34:	4603      	mov	r3, r0
 8002d36:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8002d38:	687b      	ldr	r3, [r7, #4]
 8002d3a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002d3c:	223f      	movs	r2, #63	@ 0x3f
 8002d3e:	409a      	lsls	r2, r3
 8002d40:	68fb      	ldr	r3, [r7, #12]
 8002d42:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8002d44:	687b      	ldr	r3, [r7, #4]
 8002d46:	2200      	movs	r2, #0
 8002d48:	655a      	str	r2, [r3, #84]	@ 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8002d4a:	687b      	ldr	r3, [r7, #4]
 8002d4c:	2201      	movs	r2, #1
 8002d4e:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

  return HAL_OK;
 8002d52:	2300      	movs	r3, #0
}
 8002d54:	4618      	mov	r0, r3
 8002d56:	3718      	adds	r7, #24
 8002d58:	46bd      	mov	sp, r7
 8002d5a:	bd80      	pop	{r7, pc}
 8002d5c:	f010803f 	.word	0xf010803f

08002d60 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8002d60:	b580      	push	{r7, lr}
 8002d62:	b086      	sub	sp, #24
 8002d64:	af00      	add	r7, sp, #0
 8002d66:	60f8      	str	r0, [r7, #12]
 8002d68:	60b9      	str	r1, [r7, #8]
 8002d6a:	607a      	str	r2, [r7, #4]
 8002d6c:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8002d6e:	2300      	movs	r3, #0
 8002d70:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8002d72:	68fb      	ldr	r3, [r7, #12]
 8002d74:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002d76:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 8002d78:	68fb      	ldr	r3, [r7, #12]
 8002d7a:	f893 3034 	ldrb.w	r3, [r3, #52]	@ 0x34
 8002d7e:	2b01      	cmp	r3, #1
 8002d80:	d101      	bne.n	8002d86 <HAL_DMA_Start_IT+0x26>
 8002d82:	2302      	movs	r3, #2
 8002d84:	e040      	b.n	8002e08 <HAL_DMA_Start_IT+0xa8>
 8002d86:	68fb      	ldr	r3, [r7, #12]
 8002d88:	2201      	movs	r2, #1
 8002d8a:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 8002d8e:	68fb      	ldr	r3, [r7, #12]
 8002d90:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8002d94:	b2db      	uxtb	r3, r3
 8002d96:	2b01      	cmp	r3, #1
 8002d98:	d12f      	bne.n	8002dfa <HAL_DMA_Start_IT+0x9a>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8002d9a:	68fb      	ldr	r3, [r7, #12]
 8002d9c:	2202      	movs	r2, #2
 8002d9e:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8002da2:	68fb      	ldr	r3, [r7, #12]
 8002da4:	2200      	movs	r2, #0
 8002da6:	655a      	str	r2, [r3, #84]	@ 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8002da8:	683b      	ldr	r3, [r7, #0]
 8002daa:	687a      	ldr	r2, [r7, #4]
 8002dac:	68b9      	ldr	r1, [r7, #8]
 8002dae:	68f8      	ldr	r0, [r7, #12]
 8002db0:	f000 fa4a 	bl	8003248 <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8002db4:	68fb      	ldr	r3, [r7, #12]
 8002db6:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002db8:	223f      	movs	r2, #63	@ 0x3f
 8002dba:	409a      	lsls	r2, r3
 8002dbc:	693b      	ldr	r3, [r7, #16]
 8002dbe:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 8002dc0:	68fb      	ldr	r3, [r7, #12]
 8002dc2:	681b      	ldr	r3, [r3, #0]
 8002dc4:	681a      	ldr	r2, [r3, #0]
 8002dc6:	68fb      	ldr	r3, [r7, #12]
 8002dc8:	681b      	ldr	r3, [r3, #0]
 8002dca:	f042 0216 	orr.w	r2, r2, #22
 8002dce:	601a      	str	r2, [r3, #0]
    
    if(hdma->XferHalfCpltCallback != NULL)
 8002dd0:	68fb      	ldr	r3, [r7, #12]
 8002dd2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002dd4:	2b00      	cmp	r3, #0
 8002dd6:	d007      	beq.n	8002de8 <HAL_DMA_Start_IT+0x88>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 8002dd8:	68fb      	ldr	r3, [r7, #12]
 8002dda:	681b      	ldr	r3, [r3, #0]
 8002ddc:	681a      	ldr	r2, [r3, #0]
 8002dde:	68fb      	ldr	r3, [r7, #12]
 8002de0:	681b      	ldr	r3, [r3, #0]
 8002de2:	f042 0208 	orr.w	r2, r2, #8
 8002de6:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8002de8:	68fb      	ldr	r3, [r7, #12]
 8002dea:	681b      	ldr	r3, [r3, #0]
 8002dec:	681a      	ldr	r2, [r3, #0]
 8002dee:	68fb      	ldr	r3, [r7, #12]
 8002df0:	681b      	ldr	r3, [r3, #0]
 8002df2:	f042 0201 	orr.w	r2, r2, #1
 8002df6:	601a      	str	r2, [r3, #0]
 8002df8:	e005      	b.n	8002e06 <HAL_DMA_Start_IT+0xa6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 8002dfa:	68fb      	ldr	r3, [r7, #12]
 8002dfc:	2200      	movs	r2, #0
 8002dfe:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 8002e02:	2302      	movs	r3, #2
 8002e04:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 8002e06:	7dfb      	ldrb	r3, [r7, #23]
}
 8002e08:	4618      	mov	r0, r3
 8002e0a:	3718      	adds	r7, #24
 8002e0c:	46bd      	mov	sp, r7
 8002e0e:	bd80      	pop	{r7, pc}

08002e10 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8002e10:	b580      	push	{r7, lr}
 8002e12:	b084      	sub	sp, #16
 8002e14:	af00      	add	r7, sp, #0
 8002e16:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8002e18:	687b      	ldr	r3, [r7, #4]
 8002e1a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002e1c:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 8002e1e:	f7ff f9bb 	bl	8002198 <HAL_GetTick>
 8002e22:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8002e24:	687b      	ldr	r3, [r7, #4]
 8002e26:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8002e2a:	b2db      	uxtb	r3, r3
 8002e2c:	2b02      	cmp	r3, #2
 8002e2e:	d008      	beq.n	8002e42 <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8002e30:	687b      	ldr	r3, [r7, #4]
 8002e32:	2280      	movs	r2, #128	@ 0x80
 8002e34:	655a      	str	r2, [r3, #84]	@ 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002e36:	687b      	ldr	r3, [r7, #4]
 8002e38:	2200      	movs	r2, #0
 8002e3a:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    
    return HAL_ERROR;
 8002e3e:	2301      	movs	r3, #1
 8002e40:	e052      	b.n	8002ee8 <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8002e42:	687b      	ldr	r3, [r7, #4]
 8002e44:	681b      	ldr	r3, [r3, #0]
 8002e46:	681a      	ldr	r2, [r3, #0]
 8002e48:	687b      	ldr	r3, [r7, #4]
 8002e4a:	681b      	ldr	r3, [r3, #0]
 8002e4c:	f022 0216 	bic.w	r2, r2, #22
 8002e50:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 8002e52:	687b      	ldr	r3, [r7, #4]
 8002e54:	681b      	ldr	r3, [r3, #0]
 8002e56:	695a      	ldr	r2, [r3, #20]
 8002e58:	687b      	ldr	r3, [r7, #4]
 8002e5a:	681b      	ldr	r3, [r3, #0]
 8002e5c:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8002e60:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8002e62:	687b      	ldr	r3, [r7, #4]
 8002e64:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002e66:	2b00      	cmp	r3, #0
 8002e68:	d103      	bne.n	8002e72 <HAL_DMA_Abort+0x62>
 8002e6a:	687b      	ldr	r3, [r7, #4]
 8002e6c:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8002e6e:	2b00      	cmp	r3, #0
 8002e70:	d007      	beq.n	8002e82 <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 8002e72:	687b      	ldr	r3, [r7, #4]
 8002e74:	681b      	ldr	r3, [r3, #0]
 8002e76:	681a      	ldr	r2, [r3, #0]
 8002e78:	687b      	ldr	r3, [r7, #4]
 8002e7a:	681b      	ldr	r3, [r3, #0]
 8002e7c:	f022 0208 	bic.w	r2, r2, #8
 8002e80:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8002e82:	687b      	ldr	r3, [r7, #4]
 8002e84:	681b      	ldr	r3, [r3, #0]
 8002e86:	681a      	ldr	r2, [r3, #0]
 8002e88:	687b      	ldr	r3, [r7, #4]
 8002e8a:	681b      	ldr	r3, [r3, #0]
 8002e8c:	f022 0201 	bic.w	r2, r2, #1
 8002e90:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8002e92:	e013      	b.n	8002ebc <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8002e94:	f7ff f980 	bl	8002198 <HAL_GetTick>
 8002e98:	4602      	mov	r2, r0
 8002e9a:	68bb      	ldr	r3, [r7, #8]
 8002e9c:	1ad3      	subs	r3, r2, r3
 8002e9e:	2b05      	cmp	r3, #5
 8002ea0:	d90c      	bls.n	8002ebc <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8002ea2:	687b      	ldr	r3, [r7, #4]
 8002ea4:	2220      	movs	r2, #32
 8002ea6:	655a      	str	r2, [r3, #84]	@ 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 8002ea8:	687b      	ldr	r3, [r7, #4]
 8002eaa:	2203      	movs	r2, #3
 8002eac:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8002eb0:	687b      	ldr	r3, [r7, #4]
 8002eb2:	2200      	movs	r2, #0
 8002eb4:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
        
        return HAL_TIMEOUT;
 8002eb8:	2303      	movs	r3, #3
 8002eba:	e015      	b.n	8002ee8 <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8002ebc:	687b      	ldr	r3, [r7, #4]
 8002ebe:	681b      	ldr	r3, [r3, #0]
 8002ec0:	681b      	ldr	r3, [r3, #0]
 8002ec2:	f003 0301 	and.w	r3, r3, #1
 8002ec6:	2b00      	cmp	r3, #0
 8002ec8:	d1e4      	bne.n	8002e94 <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8002eca:	687b      	ldr	r3, [r7, #4]
 8002ecc:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002ece:	223f      	movs	r2, #63	@ 0x3f
 8002ed0:	409a      	lsls	r2, r3
 8002ed2:	68fb      	ldr	r3, [r7, #12]
 8002ed4:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 8002ed6:	687b      	ldr	r3, [r7, #4]
 8002ed8:	2201      	movs	r2, #1
 8002eda:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002ede:	687b      	ldr	r3, [r7, #4]
 8002ee0:	2200      	movs	r2, #0
 8002ee2:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  }
  return HAL_OK;
 8002ee6:	2300      	movs	r3, #0
}
 8002ee8:	4618      	mov	r0, r3
 8002eea:	3710      	adds	r7, #16
 8002eec:	46bd      	mov	sp, r7
 8002eee:	bd80      	pop	{r7, pc}

08002ef0 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8002ef0:	b480      	push	{r7}
 8002ef2:	b083      	sub	sp, #12
 8002ef4:	af00      	add	r7, sp, #0
 8002ef6:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8002ef8:	687b      	ldr	r3, [r7, #4]
 8002efa:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8002efe:	b2db      	uxtb	r3, r3
 8002f00:	2b02      	cmp	r3, #2
 8002f02:	d004      	beq.n	8002f0e <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8002f04:	687b      	ldr	r3, [r7, #4]
 8002f06:	2280      	movs	r2, #128	@ 0x80
 8002f08:	655a      	str	r2, [r3, #84]	@ 0x54
    return HAL_ERROR;
 8002f0a:	2301      	movs	r3, #1
 8002f0c:	e00c      	b.n	8002f28 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 8002f0e:	687b      	ldr	r3, [r7, #4]
 8002f10:	2205      	movs	r2, #5
 8002f12:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8002f16:	687b      	ldr	r3, [r7, #4]
 8002f18:	681b      	ldr	r3, [r3, #0]
 8002f1a:	681a      	ldr	r2, [r3, #0]
 8002f1c:	687b      	ldr	r3, [r7, #4]
 8002f1e:	681b      	ldr	r3, [r3, #0]
 8002f20:	f022 0201 	bic.w	r2, r2, #1
 8002f24:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 8002f26:	2300      	movs	r3, #0
}
 8002f28:	4618      	mov	r0, r3
 8002f2a:	370c      	adds	r7, #12
 8002f2c:	46bd      	mov	sp, r7
 8002f2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f32:	4770      	bx	lr

08002f34 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8002f34:	b580      	push	{r7, lr}
 8002f36:	b086      	sub	sp, #24
 8002f38:	af00      	add	r7, sp, #0
 8002f3a:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 8002f3c:	2300      	movs	r3, #0
 8002f3e:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 8002f40:	4b8e      	ldr	r3, [pc, #568]	@ (800317c <HAL_DMA_IRQHandler+0x248>)
 8002f42:	681b      	ldr	r3, [r3, #0]
 8002f44:	4a8e      	ldr	r2, [pc, #568]	@ (8003180 <HAL_DMA_IRQHandler+0x24c>)
 8002f46:	fba2 2303 	umull	r2, r3, r2, r3
 8002f4a:	0a9b      	lsrs	r3, r3, #10
 8002f4c:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8002f4e:	687b      	ldr	r3, [r7, #4]
 8002f50:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002f52:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 8002f54:	693b      	ldr	r3, [r7, #16]
 8002f56:	681b      	ldr	r3, [r3, #0]
 8002f58:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 8002f5a:	687b      	ldr	r3, [r7, #4]
 8002f5c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002f5e:	2208      	movs	r2, #8
 8002f60:	409a      	lsls	r2, r3
 8002f62:	68fb      	ldr	r3, [r7, #12]
 8002f64:	4013      	ands	r3, r2
 8002f66:	2b00      	cmp	r3, #0
 8002f68:	d01a      	beq.n	8002fa0 <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 8002f6a:	687b      	ldr	r3, [r7, #4]
 8002f6c:	681b      	ldr	r3, [r3, #0]
 8002f6e:	681b      	ldr	r3, [r3, #0]
 8002f70:	f003 0304 	and.w	r3, r3, #4
 8002f74:	2b00      	cmp	r3, #0
 8002f76:	d013      	beq.n	8002fa0 <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 8002f78:	687b      	ldr	r3, [r7, #4]
 8002f7a:	681b      	ldr	r3, [r3, #0]
 8002f7c:	681a      	ldr	r2, [r3, #0]
 8002f7e:	687b      	ldr	r3, [r7, #4]
 8002f80:	681b      	ldr	r3, [r3, #0]
 8002f82:	f022 0204 	bic.w	r2, r2, #4
 8002f86:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 8002f88:	687b      	ldr	r3, [r7, #4]
 8002f8a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002f8c:	2208      	movs	r2, #8
 8002f8e:	409a      	lsls	r2, r3
 8002f90:	693b      	ldr	r3, [r7, #16]
 8002f92:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8002f94:	687b      	ldr	r3, [r7, #4]
 8002f96:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002f98:	f043 0201 	orr.w	r2, r3, #1
 8002f9c:	687b      	ldr	r3, [r7, #4]
 8002f9e:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 8002fa0:	687b      	ldr	r3, [r7, #4]
 8002fa2:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002fa4:	2201      	movs	r2, #1
 8002fa6:	409a      	lsls	r2, r3
 8002fa8:	68fb      	ldr	r3, [r7, #12]
 8002faa:	4013      	ands	r3, r2
 8002fac:	2b00      	cmp	r3, #0
 8002fae:	d012      	beq.n	8002fd6 <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 8002fb0:	687b      	ldr	r3, [r7, #4]
 8002fb2:	681b      	ldr	r3, [r3, #0]
 8002fb4:	695b      	ldr	r3, [r3, #20]
 8002fb6:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002fba:	2b00      	cmp	r3, #0
 8002fbc:	d00b      	beq.n	8002fd6 <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 8002fbe:	687b      	ldr	r3, [r7, #4]
 8002fc0:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002fc2:	2201      	movs	r2, #1
 8002fc4:	409a      	lsls	r2, r3
 8002fc6:	693b      	ldr	r3, [r7, #16]
 8002fc8:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 8002fca:	687b      	ldr	r3, [r7, #4]
 8002fcc:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002fce:	f043 0202 	orr.w	r2, r3, #2
 8002fd2:	687b      	ldr	r3, [r7, #4]
 8002fd4:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 8002fd6:	687b      	ldr	r3, [r7, #4]
 8002fd8:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002fda:	2204      	movs	r2, #4
 8002fdc:	409a      	lsls	r2, r3
 8002fde:	68fb      	ldr	r3, [r7, #12]
 8002fe0:	4013      	ands	r3, r2
 8002fe2:	2b00      	cmp	r3, #0
 8002fe4:	d012      	beq.n	800300c <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 8002fe6:	687b      	ldr	r3, [r7, #4]
 8002fe8:	681b      	ldr	r3, [r3, #0]
 8002fea:	681b      	ldr	r3, [r3, #0]
 8002fec:	f003 0302 	and.w	r3, r3, #2
 8002ff0:	2b00      	cmp	r3, #0
 8002ff2:	d00b      	beq.n	800300c <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 8002ff4:	687b      	ldr	r3, [r7, #4]
 8002ff6:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002ff8:	2204      	movs	r2, #4
 8002ffa:	409a      	lsls	r2, r3
 8002ffc:	693b      	ldr	r3, [r7, #16]
 8002ffe:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8003000:	687b      	ldr	r3, [r7, #4]
 8003002:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003004:	f043 0204 	orr.w	r2, r3, #4
 8003008:	687b      	ldr	r3, [r7, #4]
 800300a:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 800300c:	687b      	ldr	r3, [r7, #4]
 800300e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003010:	2210      	movs	r2, #16
 8003012:	409a      	lsls	r2, r3
 8003014:	68fb      	ldr	r3, [r7, #12]
 8003016:	4013      	ands	r3, r2
 8003018:	2b00      	cmp	r3, #0
 800301a:	d043      	beq.n	80030a4 <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 800301c:	687b      	ldr	r3, [r7, #4]
 800301e:	681b      	ldr	r3, [r3, #0]
 8003020:	681b      	ldr	r3, [r3, #0]
 8003022:	f003 0308 	and.w	r3, r3, #8
 8003026:	2b00      	cmp	r3, #0
 8003028:	d03c      	beq.n	80030a4 <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 800302a:	687b      	ldr	r3, [r7, #4]
 800302c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800302e:	2210      	movs	r2, #16
 8003030:	409a      	lsls	r2, r3
 8003032:	693b      	ldr	r3, [r7, #16]
 8003034:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8003036:	687b      	ldr	r3, [r7, #4]
 8003038:	681b      	ldr	r3, [r3, #0]
 800303a:	681b      	ldr	r3, [r3, #0]
 800303c:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8003040:	2b00      	cmp	r3, #0
 8003042:	d018      	beq.n	8003076 <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8003044:	687b      	ldr	r3, [r7, #4]
 8003046:	681b      	ldr	r3, [r3, #0]
 8003048:	681b      	ldr	r3, [r3, #0]
 800304a:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 800304e:	2b00      	cmp	r3, #0
 8003050:	d108      	bne.n	8003064 <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 8003052:	687b      	ldr	r3, [r7, #4]
 8003054:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003056:	2b00      	cmp	r3, #0
 8003058:	d024      	beq.n	80030a4 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 800305a:	687b      	ldr	r3, [r7, #4]
 800305c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800305e:	6878      	ldr	r0, [r7, #4]
 8003060:	4798      	blx	r3
 8003062:	e01f      	b.n	80030a4 <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 8003064:	687b      	ldr	r3, [r7, #4]
 8003066:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8003068:	2b00      	cmp	r3, #0
 800306a:	d01b      	beq.n	80030a4 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 800306c:	687b      	ldr	r3, [r7, #4]
 800306e:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8003070:	6878      	ldr	r0, [r7, #4]
 8003072:	4798      	blx	r3
 8003074:	e016      	b.n	80030a4 <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8003076:	687b      	ldr	r3, [r7, #4]
 8003078:	681b      	ldr	r3, [r3, #0]
 800307a:	681b      	ldr	r3, [r3, #0]
 800307c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003080:	2b00      	cmp	r3, #0
 8003082:	d107      	bne.n	8003094 <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8003084:	687b      	ldr	r3, [r7, #4]
 8003086:	681b      	ldr	r3, [r3, #0]
 8003088:	681a      	ldr	r2, [r3, #0]
 800308a:	687b      	ldr	r3, [r7, #4]
 800308c:	681b      	ldr	r3, [r3, #0]
 800308e:	f022 0208 	bic.w	r2, r2, #8
 8003092:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 8003094:	687b      	ldr	r3, [r7, #4]
 8003096:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003098:	2b00      	cmp	r3, #0
 800309a:	d003      	beq.n	80030a4 <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 800309c:	687b      	ldr	r3, [r7, #4]
 800309e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80030a0:	6878      	ldr	r0, [r7, #4]
 80030a2:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 80030a4:	687b      	ldr	r3, [r7, #4]
 80030a6:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80030a8:	2220      	movs	r2, #32
 80030aa:	409a      	lsls	r2, r3
 80030ac:	68fb      	ldr	r3, [r7, #12]
 80030ae:	4013      	ands	r3, r2
 80030b0:	2b00      	cmp	r3, #0
 80030b2:	f000 808f 	beq.w	80031d4 <HAL_DMA_IRQHandler+0x2a0>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 80030b6:	687b      	ldr	r3, [r7, #4]
 80030b8:	681b      	ldr	r3, [r3, #0]
 80030ba:	681b      	ldr	r3, [r3, #0]
 80030bc:	f003 0310 	and.w	r3, r3, #16
 80030c0:	2b00      	cmp	r3, #0
 80030c2:	f000 8087 	beq.w	80031d4 <HAL_DMA_IRQHandler+0x2a0>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 80030c6:	687b      	ldr	r3, [r7, #4]
 80030c8:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80030ca:	2220      	movs	r2, #32
 80030cc:	409a      	lsls	r2, r3
 80030ce:	693b      	ldr	r3, [r7, #16]
 80030d0:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 80030d2:	687b      	ldr	r3, [r7, #4]
 80030d4:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 80030d8:	b2db      	uxtb	r3, r3
 80030da:	2b05      	cmp	r3, #5
 80030dc:	d136      	bne.n	800314c <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 80030de:	687b      	ldr	r3, [r7, #4]
 80030e0:	681b      	ldr	r3, [r3, #0]
 80030e2:	681a      	ldr	r2, [r3, #0]
 80030e4:	687b      	ldr	r3, [r7, #4]
 80030e6:	681b      	ldr	r3, [r3, #0]
 80030e8:	f022 0216 	bic.w	r2, r2, #22
 80030ec:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 80030ee:	687b      	ldr	r3, [r7, #4]
 80030f0:	681b      	ldr	r3, [r3, #0]
 80030f2:	695a      	ldr	r2, [r3, #20]
 80030f4:	687b      	ldr	r3, [r7, #4]
 80030f6:	681b      	ldr	r3, [r3, #0]
 80030f8:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 80030fc:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 80030fe:	687b      	ldr	r3, [r7, #4]
 8003100:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003102:	2b00      	cmp	r3, #0
 8003104:	d103      	bne.n	800310e <HAL_DMA_IRQHandler+0x1da>
 8003106:	687b      	ldr	r3, [r7, #4]
 8003108:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800310a:	2b00      	cmp	r3, #0
 800310c:	d007      	beq.n	800311e <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 800310e:	687b      	ldr	r3, [r7, #4]
 8003110:	681b      	ldr	r3, [r3, #0]
 8003112:	681a      	ldr	r2, [r3, #0]
 8003114:	687b      	ldr	r3, [r7, #4]
 8003116:	681b      	ldr	r3, [r3, #0]
 8003118:	f022 0208 	bic.w	r2, r2, #8
 800311c:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 800311e:	687b      	ldr	r3, [r7, #4]
 8003120:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003122:	223f      	movs	r2, #63	@ 0x3f
 8003124:	409a      	lsls	r2, r3
 8003126:	693b      	ldr	r3, [r7, #16]
 8003128:	609a      	str	r2, [r3, #8]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 800312a:	687b      	ldr	r3, [r7, #4]
 800312c:	2201      	movs	r2, #1
 800312e:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8003132:	687b      	ldr	r3, [r7, #4]
 8003134:	2200      	movs	r2, #0
 8003136:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

        if(hdma->XferAbortCallback != NULL)
 800313a:	687b      	ldr	r3, [r7, #4]
 800313c:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800313e:	2b00      	cmp	r3, #0
 8003140:	d07e      	beq.n	8003240 <HAL_DMA_IRQHandler+0x30c>
        {
          hdma->XferAbortCallback(hdma);
 8003142:	687b      	ldr	r3, [r7, #4]
 8003144:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8003146:	6878      	ldr	r0, [r7, #4]
 8003148:	4798      	blx	r3
        }
        return;
 800314a:	e079      	b.n	8003240 <HAL_DMA_IRQHandler+0x30c>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 800314c:	687b      	ldr	r3, [r7, #4]
 800314e:	681b      	ldr	r3, [r3, #0]
 8003150:	681b      	ldr	r3, [r3, #0]
 8003152:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8003156:	2b00      	cmp	r3, #0
 8003158:	d01d      	beq.n	8003196 <HAL_DMA_IRQHandler+0x262>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 800315a:	687b      	ldr	r3, [r7, #4]
 800315c:	681b      	ldr	r3, [r3, #0]
 800315e:	681b      	ldr	r3, [r3, #0]
 8003160:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8003164:	2b00      	cmp	r3, #0
 8003166:	d10d      	bne.n	8003184 <HAL_DMA_IRQHandler+0x250>
        {
          if(hdma->XferM1CpltCallback != NULL)
 8003168:	687b      	ldr	r3, [r7, #4]
 800316a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800316c:	2b00      	cmp	r3, #0
 800316e:	d031      	beq.n	80031d4 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 8003170:	687b      	ldr	r3, [r7, #4]
 8003172:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003174:	6878      	ldr	r0, [r7, #4]
 8003176:	4798      	blx	r3
 8003178:	e02c      	b.n	80031d4 <HAL_DMA_IRQHandler+0x2a0>
 800317a:	bf00      	nop
 800317c:	20000000 	.word	0x20000000
 8003180:	1b4e81b5 	.word	0x1b4e81b5
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 8003184:	687b      	ldr	r3, [r7, #4]
 8003186:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003188:	2b00      	cmp	r3, #0
 800318a:	d023      	beq.n	80031d4 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 800318c:	687b      	ldr	r3, [r7, #4]
 800318e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003190:	6878      	ldr	r0, [r7, #4]
 8003192:	4798      	blx	r3
 8003194:	e01e      	b.n	80031d4 <HAL_DMA_IRQHandler+0x2a0>
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8003196:	687b      	ldr	r3, [r7, #4]
 8003198:	681b      	ldr	r3, [r3, #0]
 800319a:	681b      	ldr	r3, [r3, #0]
 800319c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80031a0:	2b00      	cmp	r3, #0
 80031a2:	d10f      	bne.n	80031c4 <HAL_DMA_IRQHandler+0x290>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 80031a4:	687b      	ldr	r3, [r7, #4]
 80031a6:	681b      	ldr	r3, [r3, #0]
 80031a8:	681a      	ldr	r2, [r3, #0]
 80031aa:	687b      	ldr	r3, [r7, #4]
 80031ac:	681b      	ldr	r3, [r3, #0]
 80031ae:	f022 0210 	bic.w	r2, r2, #16
 80031b2:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 80031b4:	687b      	ldr	r3, [r7, #4]
 80031b6:	2201      	movs	r2, #1
 80031b8:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 80031bc:	687b      	ldr	r3, [r7, #4]
 80031be:	2200      	movs	r2, #0
 80031c0:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 80031c4:	687b      	ldr	r3, [r7, #4]
 80031c6:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80031c8:	2b00      	cmp	r3, #0
 80031ca:	d003      	beq.n	80031d4 <HAL_DMA_IRQHandler+0x2a0>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 80031cc:	687b      	ldr	r3, [r7, #4]
 80031ce:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80031d0:	6878      	ldr	r0, [r7, #4]
 80031d2:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 80031d4:	687b      	ldr	r3, [r7, #4]
 80031d6:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80031d8:	2b00      	cmp	r3, #0
 80031da:	d032      	beq.n	8003242 <HAL_DMA_IRQHandler+0x30e>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 80031dc:	687b      	ldr	r3, [r7, #4]
 80031de:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80031e0:	f003 0301 	and.w	r3, r3, #1
 80031e4:	2b00      	cmp	r3, #0
 80031e6:	d022      	beq.n	800322e <HAL_DMA_IRQHandler+0x2fa>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 80031e8:	687b      	ldr	r3, [r7, #4]
 80031ea:	2205      	movs	r2, #5
 80031ec:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 80031f0:	687b      	ldr	r3, [r7, #4]
 80031f2:	681b      	ldr	r3, [r3, #0]
 80031f4:	681a      	ldr	r2, [r3, #0]
 80031f6:	687b      	ldr	r3, [r7, #4]
 80031f8:	681b      	ldr	r3, [r3, #0]
 80031fa:	f022 0201 	bic.w	r2, r2, #1
 80031fe:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 8003200:	68bb      	ldr	r3, [r7, #8]
 8003202:	3301      	adds	r3, #1
 8003204:	60bb      	str	r3, [r7, #8]
 8003206:	697a      	ldr	r2, [r7, #20]
 8003208:	429a      	cmp	r2, r3
 800320a:	d307      	bcc.n	800321c <HAL_DMA_IRQHandler+0x2e8>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 800320c:	687b      	ldr	r3, [r7, #4]
 800320e:	681b      	ldr	r3, [r3, #0]
 8003210:	681b      	ldr	r3, [r3, #0]
 8003212:	f003 0301 	and.w	r3, r3, #1
 8003216:	2b00      	cmp	r3, #0
 8003218:	d1f2      	bne.n	8003200 <HAL_DMA_IRQHandler+0x2cc>
 800321a:	e000      	b.n	800321e <HAL_DMA_IRQHandler+0x2ea>
          break;
 800321c:	bf00      	nop

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 800321e:	687b      	ldr	r3, [r7, #4]
 8003220:	2201      	movs	r2, #1
 8003222:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8003226:	687b      	ldr	r3, [r7, #4]
 8003228:	2200      	movs	r2, #0
 800322a:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    }

    if(hdma->XferErrorCallback != NULL)
 800322e:	687b      	ldr	r3, [r7, #4]
 8003230:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003232:	2b00      	cmp	r3, #0
 8003234:	d005      	beq.n	8003242 <HAL_DMA_IRQHandler+0x30e>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8003236:	687b      	ldr	r3, [r7, #4]
 8003238:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800323a:	6878      	ldr	r0, [r7, #4]
 800323c:	4798      	blx	r3
 800323e:	e000      	b.n	8003242 <HAL_DMA_IRQHandler+0x30e>
        return;
 8003240:	bf00      	nop
    }
  }
}
 8003242:	3718      	adds	r7, #24
 8003244:	46bd      	mov	sp, r7
 8003246:	bd80      	pop	{r7, pc}

08003248 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8003248:	b480      	push	{r7}
 800324a:	b085      	sub	sp, #20
 800324c:	af00      	add	r7, sp, #0
 800324e:	60f8      	str	r0, [r7, #12]
 8003250:	60b9      	str	r1, [r7, #8]
 8003252:	607a      	str	r2, [r7, #4]
 8003254:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 8003256:	68fb      	ldr	r3, [r7, #12]
 8003258:	681b      	ldr	r3, [r3, #0]
 800325a:	681a      	ldr	r2, [r3, #0]
 800325c:	68fb      	ldr	r3, [r7, #12]
 800325e:	681b      	ldr	r3, [r3, #0]
 8003260:	f422 2280 	bic.w	r2, r2, #262144	@ 0x40000
 8003264:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 8003266:	68fb      	ldr	r3, [r7, #12]
 8003268:	681b      	ldr	r3, [r3, #0]
 800326a:	683a      	ldr	r2, [r7, #0]
 800326c:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 800326e:	68fb      	ldr	r3, [r7, #12]
 8003270:	689b      	ldr	r3, [r3, #8]
 8003272:	2b40      	cmp	r3, #64	@ 0x40
 8003274:	d108      	bne.n	8003288 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 8003276:	68fb      	ldr	r3, [r7, #12]
 8003278:	681b      	ldr	r3, [r3, #0]
 800327a:	687a      	ldr	r2, [r7, #4]
 800327c:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 800327e:	68fb      	ldr	r3, [r7, #12]
 8003280:	681b      	ldr	r3, [r3, #0]
 8003282:	68ba      	ldr	r2, [r7, #8]
 8003284:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 8003286:	e007      	b.n	8003298 <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 8003288:	68fb      	ldr	r3, [r7, #12]
 800328a:	681b      	ldr	r3, [r3, #0]
 800328c:	68ba      	ldr	r2, [r7, #8]
 800328e:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 8003290:	68fb      	ldr	r3, [r7, #12]
 8003292:	681b      	ldr	r3, [r3, #0]
 8003294:	687a      	ldr	r2, [r7, #4]
 8003296:	60da      	str	r2, [r3, #12]
}
 8003298:	bf00      	nop
 800329a:	3714      	adds	r7, #20
 800329c:	46bd      	mov	sp, r7
 800329e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032a2:	4770      	bx	lr

080032a4 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 80032a4:	b480      	push	{r7}
 80032a6:	b085      	sub	sp, #20
 80032a8:	af00      	add	r7, sp, #0
 80032aa:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 80032ac:	687b      	ldr	r3, [r7, #4]
 80032ae:	681b      	ldr	r3, [r3, #0]
 80032b0:	b2db      	uxtb	r3, r3
 80032b2:	3b10      	subs	r3, #16
 80032b4:	4a14      	ldr	r2, [pc, #80]	@ (8003308 <DMA_CalcBaseAndBitshift+0x64>)
 80032b6:	fba2 2303 	umull	r2, r3, r2, r3
 80032ba:	091b      	lsrs	r3, r3, #4
 80032bc:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 80032be:	4a13      	ldr	r2, [pc, #76]	@ (800330c <DMA_CalcBaseAndBitshift+0x68>)
 80032c0:	68fb      	ldr	r3, [r7, #12]
 80032c2:	4413      	add	r3, r2
 80032c4:	781b      	ldrb	r3, [r3, #0]
 80032c6:	461a      	mov	r2, r3
 80032c8:	687b      	ldr	r3, [r7, #4]
 80032ca:	65da      	str	r2, [r3, #92]	@ 0x5c
  
  if (stream_number > 3U)
 80032cc:	68fb      	ldr	r3, [r7, #12]
 80032ce:	2b03      	cmp	r3, #3
 80032d0:	d909      	bls.n	80032e6 <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 80032d2:	687b      	ldr	r3, [r7, #4]
 80032d4:	681b      	ldr	r3, [r3, #0]
 80032d6:	f423 737f 	bic.w	r3, r3, #1020	@ 0x3fc
 80032da:	f023 0303 	bic.w	r3, r3, #3
 80032de:	1d1a      	adds	r2, r3, #4
 80032e0:	687b      	ldr	r3, [r7, #4]
 80032e2:	659a      	str	r2, [r3, #88]	@ 0x58
 80032e4:	e007      	b.n	80032f6 <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 80032e6:	687b      	ldr	r3, [r7, #4]
 80032e8:	681b      	ldr	r3, [r3, #0]
 80032ea:	f423 737f 	bic.w	r3, r3, #1020	@ 0x3fc
 80032ee:	f023 0303 	bic.w	r3, r3, #3
 80032f2:	687a      	ldr	r2, [r7, #4]
 80032f4:	6593      	str	r3, [r2, #88]	@ 0x58
  }
  
  return hdma->StreamBaseAddress;
 80032f6:	687b      	ldr	r3, [r7, #4]
 80032f8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
}
 80032fa:	4618      	mov	r0, r3
 80032fc:	3714      	adds	r7, #20
 80032fe:	46bd      	mov	sp, r7
 8003300:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003304:	4770      	bx	lr
 8003306:	bf00      	nop
 8003308:	aaaaaaab 	.word	0xaaaaaaab
 800330c:	0800a330 	.word	0x0800a330

08003310 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8003310:	b480      	push	{r7}
 8003312:	b085      	sub	sp, #20
 8003314:	af00      	add	r7, sp, #0
 8003316:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8003318:	2300      	movs	r3, #0
 800331a:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 800331c:	687b      	ldr	r3, [r7, #4]
 800331e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003320:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 8003322:	687b      	ldr	r3, [r7, #4]
 8003324:	699b      	ldr	r3, [r3, #24]
 8003326:	2b00      	cmp	r3, #0
 8003328:	d11f      	bne.n	800336a <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 800332a:	68bb      	ldr	r3, [r7, #8]
 800332c:	2b03      	cmp	r3, #3
 800332e:	d856      	bhi.n	80033de <DMA_CheckFifoParam+0xce>
 8003330:	a201      	add	r2, pc, #4	@ (adr r2, 8003338 <DMA_CheckFifoParam+0x28>)
 8003332:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003336:	bf00      	nop
 8003338:	08003349 	.word	0x08003349
 800333c:	0800335b 	.word	0x0800335b
 8003340:	08003349 	.word	0x08003349
 8003344:	080033df 	.word	0x080033df
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8003348:	687b      	ldr	r3, [r7, #4]
 800334a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800334c:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8003350:	2b00      	cmp	r3, #0
 8003352:	d046      	beq.n	80033e2 <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 8003354:	2301      	movs	r3, #1
 8003356:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8003358:	e043      	b.n	80033e2 <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 800335a:	687b      	ldr	r3, [r7, #4]
 800335c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800335e:	f1b3 7fc0 	cmp.w	r3, #25165824	@ 0x1800000
 8003362:	d140      	bne.n	80033e6 <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 8003364:	2301      	movs	r3, #1
 8003366:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8003368:	e03d      	b.n	80033e6 <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 800336a:	687b      	ldr	r3, [r7, #4]
 800336c:	699b      	ldr	r3, [r3, #24]
 800336e:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8003372:	d121      	bne.n	80033b8 <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 8003374:	68bb      	ldr	r3, [r7, #8]
 8003376:	2b03      	cmp	r3, #3
 8003378:	d837      	bhi.n	80033ea <DMA_CheckFifoParam+0xda>
 800337a:	a201      	add	r2, pc, #4	@ (adr r2, 8003380 <DMA_CheckFifoParam+0x70>)
 800337c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003380:	08003391 	.word	0x08003391
 8003384:	08003397 	.word	0x08003397
 8003388:	08003391 	.word	0x08003391
 800338c:	080033a9 	.word	0x080033a9
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 8003390:	2301      	movs	r3, #1
 8003392:	73fb      	strb	r3, [r7, #15]
      break;
 8003394:	e030      	b.n	80033f8 <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8003396:	687b      	ldr	r3, [r7, #4]
 8003398:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800339a:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 800339e:	2b00      	cmp	r3, #0
 80033a0:	d025      	beq.n	80033ee <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 80033a2:	2301      	movs	r3, #1
 80033a4:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80033a6:	e022      	b.n	80033ee <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 80033a8:	687b      	ldr	r3, [r7, #4]
 80033aa:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80033ac:	f1b3 7fc0 	cmp.w	r3, #25165824	@ 0x1800000
 80033b0:	d11f      	bne.n	80033f2 <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 80033b2:	2301      	movs	r3, #1
 80033b4:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 80033b6:	e01c      	b.n	80033f2 <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 80033b8:	68bb      	ldr	r3, [r7, #8]
 80033ba:	2b02      	cmp	r3, #2
 80033bc:	d903      	bls.n	80033c6 <DMA_CheckFifoParam+0xb6>
 80033be:	68bb      	ldr	r3, [r7, #8]
 80033c0:	2b03      	cmp	r3, #3
 80033c2:	d003      	beq.n	80033cc <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 80033c4:	e018      	b.n	80033f8 <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 80033c6:	2301      	movs	r3, #1
 80033c8:	73fb      	strb	r3, [r7, #15]
      break;
 80033ca:	e015      	b.n	80033f8 <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80033cc:	687b      	ldr	r3, [r7, #4]
 80033ce:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80033d0:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 80033d4:	2b00      	cmp	r3, #0
 80033d6:	d00e      	beq.n	80033f6 <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 80033d8:	2301      	movs	r3, #1
 80033da:	73fb      	strb	r3, [r7, #15]
      break;
 80033dc:	e00b      	b.n	80033f6 <DMA_CheckFifoParam+0xe6>
      break;
 80033de:	bf00      	nop
 80033e0:	e00a      	b.n	80033f8 <DMA_CheckFifoParam+0xe8>
      break;
 80033e2:	bf00      	nop
 80033e4:	e008      	b.n	80033f8 <DMA_CheckFifoParam+0xe8>
      break;
 80033e6:	bf00      	nop
 80033e8:	e006      	b.n	80033f8 <DMA_CheckFifoParam+0xe8>
      break;
 80033ea:	bf00      	nop
 80033ec:	e004      	b.n	80033f8 <DMA_CheckFifoParam+0xe8>
      break;
 80033ee:	bf00      	nop
 80033f0:	e002      	b.n	80033f8 <DMA_CheckFifoParam+0xe8>
      break;   
 80033f2:	bf00      	nop
 80033f4:	e000      	b.n	80033f8 <DMA_CheckFifoParam+0xe8>
      break;
 80033f6:	bf00      	nop
    }
  } 
  
  return status; 
 80033f8:	7bfb      	ldrb	r3, [r7, #15]
}
 80033fa:	4618      	mov	r0, r3
 80033fc:	3714      	adds	r7, #20
 80033fe:	46bd      	mov	sp, r7
 8003400:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003404:	4770      	bx	lr
 8003406:	bf00      	nop

08003408 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8003408:	b480      	push	{r7}
 800340a:	b089      	sub	sp, #36	@ 0x24
 800340c:	af00      	add	r7, sp, #0
 800340e:	6078      	str	r0, [r7, #4]
 8003410:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8003412:	2300      	movs	r3, #0
 8003414:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8003416:	2300      	movs	r3, #0
 8003418:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 800341a:	2300      	movs	r3, #0
 800341c:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 800341e:	2300      	movs	r3, #0
 8003420:	61fb      	str	r3, [r7, #28]
 8003422:	e165      	b.n	80036f0 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8003424:	2201      	movs	r2, #1
 8003426:	69fb      	ldr	r3, [r7, #28]
 8003428:	fa02 f303 	lsl.w	r3, r2, r3
 800342c:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800342e:	683b      	ldr	r3, [r7, #0]
 8003430:	681b      	ldr	r3, [r3, #0]
 8003432:	697a      	ldr	r2, [r7, #20]
 8003434:	4013      	ands	r3, r2
 8003436:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8003438:	693a      	ldr	r2, [r7, #16]
 800343a:	697b      	ldr	r3, [r7, #20]
 800343c:	429a      	cmp	r2, r3
 800343e:	f040 8154 	bne.w	80036ea <HAL_GPIO_Init+0x2e2>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8003442:	683b      	ldr	r3, [r7, #0]
 8003444:	685b      	ldr	r3, [r3, #4]
 8003446:	f003 0303 	and.w	r3, r3, #3
 800344a:	2b01      	cmp	r3, #1
 800344c:	d005      	beq.n	800345a <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800344e:	683b      	ldr	r3, [r7, #0]
 8003450:	685b      	ldr	r3, [r3, #4]
 8003452:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8003456:	2b02      	cmp	r3, #2
 8003458:	d130      	bne.n	80034bc <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 800345a:	687b      	ldr	r3, [r7, #4]
 800345c:	689b      	ldr	r3, [r3, #8]
 800345e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8003460:	69fb      	ldr	r3, [r7, #28]
 8003462:	005b      	lsls	r3, r3, #1
 8003464:	2203      	movs	r2, #3
 8003466:	fa02 f303 	lsl.w	r3, r2, r3
 800346a:	43db      	mvns	r3, r3
 800346c:	69ba      	ldr	r2, [r7, #24]
 800346e:	4013      	ands	r3, r2
 8003470:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8003472:	683b      	ldr	r3, [r7, #0]
 8003474:	68da      	ldr	r2, [r3, #12]
 8003476:	69fb      	ldr	r3, [r7, #28]
 8003478:	005b      	lsls	r3, r3, #1
 800347a:	fa02 f303 	lsl.w	r3, r2, r3
 800347e:	69ba      	ldr	r2, [r7, #24]
 8003480:	4313      	orrs	r3, r2
 8003482:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8003484:	687b      	ldr	r3, [r7, #4]
 8003486:	69ba      	ldr	r2, [r7, #24]
 8003488:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800348a:	687b      	ldr	r3, [r7, #4]
 800348c:	685b      	ldr	r3, [r3, #4]
 800348e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8003490:	2201      	movs	r2, #1
 8003492:	69fb      	ldr	r3, [r7, #28]
 8003494:	fa02 f303 	lsl.w	r3, r2, r3
 8003498:	43db      	mvns	r3, r3
 800349a:	69ba      	ldr	r2, [r7, #24]
 800349c:	4013      	ands	r3, r2
 800349e:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80034a0:	683b      	ldr	r3, [r7, #0]
 80034a2:	685b      	ldr	r3, [r3, #4]
 80034a4:	091b      	lsrs	r3, r3, #4
 80034a6:	f003 0201 	and.w	r2, r3, #1
 80034aa:	69fb      	ldr	r3, [r7, #28]
 80034ac:	fa02 f303 	lsl.w	r3, r2, r3
 80034b0:	69ba      	ldr	r2, [r7, #24]
 80034b2:	4313      	orrs	r3, r2
 80034b4:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80034b6:	687b      	ldr	r3, [r7, #4]
 80034b8:	69ba      	ldr	r2, [r7, #24]
 80034ba:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80034bc:	683b      	ldr	r3, [r7, #0]
 80034be:	685b      	ldr	r3, [r3, #4]
 80034c0:	f003 0303 	and.w	r3, r3, #3
 80034c4:	2b03      	cmp	r3, #3
 80034c6:	d017      	beq.n	80034f8 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80034c8:	687b      	ldr	r3, [r7, #4]
 80034ca:	68db      	ldr	r3, [r3, #12]
 80034cc:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 80034ce:	69fb      	ldr	r3, [r7, #28]
 80034d0:	005b      	lsls	r3, r3, #1
 80034d2:	2203      	movs	r2, #3
 80034d4:	fa02 f303 	lsl.w	r3, r2, r3
 80034d8:	43db      	mvns	r3, r3
 80034da:	69ba      	ldr	r2, [r7, #24]
 80034dc:	4013      	ands	r3, r2
 80034de:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80034e0:	683b      	ldr	r3, [r7, #0]
 80034e2:	689a      	ldr	r2, [r3, #8]
 80034e4:	69fb      	ldr	r3, [r7, #28]
 80034e6:	005b      	lsls	r3, r3, #1
 80034e8:	fa02 f303 	lsl.w	r3, r2, r3
 80034ec:	69ba      	ldr	r2, [r7, #24]
 80034ee:	4313      	orrs	r3, r2
 80034f0:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 80034f2:	687b      	ldr	r3, [r7, #4]
 80034f4:	69ba      	ldr	r2, [r7, #24]
 80034f6:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80034f8:	683b      	ldr	r3, [r7, #0]
 80034fa:	685b      	ldr	r3, [r3, #4]
 80034fc:	f003 0303 	and.w	r3, r3, #3
 8003500:	2b02      	cmp	r3, #2
 8003502:	d123      	bne.n	800354c <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8003504:	69fb      	ldr	r3, [r7, #28]
 8003506:	08da      	lsrs	r2, r3, #3
 8003508:	687b      	ldr	r3, [r7, #4]
 800350a:	3208      	adds	r2, #8
 800350c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8003510:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8003512:	69fb      	ldr	r3, [r7, #28]
 8003514:	f003 0307 	and.w	r3, r3, #7
 8003518:	009b      	lsls	r3, r3, #2
 800351a:	220f      	movs	r2, #15
 800351c:	fa02 f303 	lsl.w	r3, r2, r3
 8003520:	43db      	mvns	r3, r3
 8003522:	69ba      	ldr	r2, [r7, #24]
 8003524:	4013      	ands	r3, r2
 8003526:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8003528:	683b      	ldr	r3, [r7, #0]
 800352a:	691a      	ldr	r2, [r3, #16]
 800352c:	69fb      	ldr	r3, [r7, #28]
 800352e:	f003 0307 	and.w	r3, r3, #7
 8003532:	009b      	lsls	r3, r3, #2
 8003534:	fa02 f303 	lsl.w	r3, r2, r3
 8003538:	69ba      	ldr	r2, [r7, #24]
 800353a:	4313      	orrs	r3, r2
 800353c:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 800353e:	69fb      	ldr	r3, [r7, #28]
 8003540:	08da      	lsrs	r2, r3, #3
 8003542:	687b      	ldr	r3, [r7, #4]
 8003544:	3208      	adds	r2, #8
 8003546:	69b9      	ldr	r1, [r7, #24]
 8003548:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800354c:	687b      	ldr	r3, [r7, #4]
 800354e:	681b      	ldr	r3, [r3, #0]
 8003550:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8003552:	69fb      	ldr	r3, [r7, #28]
 8003554:	005b      	lsls	r3, r3, #1
 8003556:	2203      	movs	r2, #3
 8003558:	fa02 f303 	lsl.w	r3, r2, r3
 800355c:	43db      	mvns	r3, r3
 800355e:	69ba      	ldr	r2, [r7, #24]
 8003560:	4013      	ands	r3, r2
 8003562:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8003564:	683b      	ldr	r3, [r7, #0]
 8003566:	685b      	ldr	r3, [r3, #4]
 8003568:	f003 0203 	and.w	r2, r3, #3
 800356c:	69fb      	ldr	r3, [r7, #28]
 800356e:	005b      	lsls	r3, r3, #1
 8003570:	fa02 f303 	lsl.w	r3, r2, r3
 8003574:	69ba      	ldr	r2, [r7, #24]
 8003576:	4313      	orrs	r3, r2
 8003578:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 800357a:	687b      	ldr	r3, [r7, #4]
 800357c:	69ba      	ldr	r2, [r7, #24]
 800357e:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8003580:	683b      	ldr	r3, [r7, #0]
 8003582:	685b      	ldr	r3, [r3, #4]
 8003584:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8003588:	2b00      	cmp	r3, #0
 800358a:	f000 80ae 	beq.w	80036ea <HAL_GPIO_Init+0x2e2>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800358e:	2300      	movs	r3, #0
 8003590:	60fb      	str	r3, [r7, #12]
 8003592:	4b5d      	ldr	r3, [pc, #372]	@ (8003708 <HAL_GPIO_Init+0x300>)
 8003594:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003596:	4a5c      	ldr	r2, [pc, #368]	@ (8003708 <HAL_GPIO_Init+0x300>)
 8003598:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 800359c:	6453      	str	r3, [r2, #68]	@ 0x44
 800359e:	4b5a      	ldr	r3, [pc, #360]	@ (8003708 <HAL_GPIO_Init+0x300>)
 80035a0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80035a2:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80035a6:	60fb      	str	r3, [r7, #12]
 80035a8:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 80035aa:	4a58      	ldr	r2, [pc, #352]	@ (800370c <HAL_GPIO_Init+0x304>)
 80035ac:	69fb      	ldr	r3, [r7, #28]
 80035ae:	089b      	lsrs	r3, r3, #2
 80035b0:	3302      	adds	r3, #2
 80035b2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80035b6:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 80035b8:	69fb      	ldr	r3, [r7, #28]
 80035ba:	f003 0303 	and.w	r3, r3, #3
 80035be:	009b      	lsls	r3, r3, #2
 80035c0:	220f      	movs	r2, #15
 80035c2:	fa02 f303 	lsl.w	r3, r2, r3
 80035c6:	43db      	mvns	r3, r3
 80035c8:	69ba      	ldr	r2, [r7, #24]
 80035ca:	4013      	ands	r3, r2
 80035cc:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 80035ce:	687b      	ldr	r3, [r7, #4]
 80035d0:	4a4f      	ldr	r2, [pc, #316]	@ (8003710 <HAL_GPIO_Init+0x308>)
 80035d2:	4293      	cmp	r3, r2
 80035d4:	d025      	beq.n	8003622 <HAL_GPIO_Init+0x21a>
 80035d6:	687b      	ldr	r3, [r7, #4]
 80035d8:	4a4e      	ldr	r2, [pc, #312]	@ (8003714 <HAL_GPIO_Init+0x30c>)
 80035da:	4293      	cmp	r3, r2
 80035dc:	d01f      	beq.n	800361e <HAL_GPIO_Init+0x216>
 80035de:	687b      	ldr	r3, [r7, #4]
 80035e0:	4a4d      	ldr	r2, [pc, #308]	@ (8003718 <HAL_GPIO_Init+0x310>)
 80035e2:	4293      	cmp	r3, r2
 80035e4:	d019      	beq.n	800361a <HAL_GPIO_Init+0x212>
 80035e6:	687b      	ldr	r3, [r7, #4]
 80035e8:	4a4c      	ldr	r2, [pc, #304]	@ (800371c <HAL_GPIO_Init+0x314>)
 80035ea:	4293      	cmp	r3, r2
 80035ec:	d013      	beq.n	8003616 <HAL_GPIO_Init+0x20e>
 80035ee:	687b      	ldr	r3, [r7, #4]
 80035f0:	4a4b      	ldr	r2, [pc, #300]	@ (8003720 <HAL_GPIO_Init+0x318>)
 80035f2:	4293      	cmp	r3, r2
 80035f4:	d00d      	beq.n	8003612 <HAL_GPIO_Init+0x20a>
 80035f6:	687b      	ldr	r3, [r7, #4]
 80035f8:	4a4a      	ldr	r2, [pc, #296]	@ (8003724 <HAL_GPIO_Init+0x31c>)
 80035fa:	4293      	cmp	r3, r2
 80035fc:	d007      	beq.n	800360e <HAL_GPIO_Init+0x206>
 80035fe:	687b      	ldr	r3, [r7, #4]
 8003600:	4a49      	ldr	r2, [pc, #292]	@ (8003728 <HAL_GPIO_Init+0x320>)
 8003602:	4293      	cmp	r3, r2
 8003604:	d101      	bne.n	800360a <HAL_GPIO_Init+0x202>
 8003606:	2306      	movs	r3, #6
 8003608:	e00c      	b.n	8003624 <HAL_GPIO_Init+0x21c>
 800360a:	2307      	movs	r3, #7
 800360c:	e00a      	b.n	8003624 <HAL_GPIO_Init+0x21c>
 800360e:	2305      	movs	r3, #5
 8003610:	e008      	b.n	8003624 <HAL_GPIO_Init+0x21c>
 8003612:	2304      	movs	r3, #4
 8003614:	e006      	b.n	8003624 <HAL_GPIO_Init+0x21c>
 8003616:	2303      	movs	r3, #3
 8003618:	e004      	b.n	8003624 <HAL_GPIO_Init+0x21c>
 800361a:	2302      	movs	r3, #2
 800361c:	e002      	b.n	8003624 <HAL_GPIO_Init+0x21c>
 800361e:	2301      	movs	r3, #1
 8003620:	e000      	b.n	8003624 <HAL_GPIO_Init+0x21c>
 8003622:	2300      	movs	r3, #0
 8003624:	69fa      	ldr	r2, [r7, #28]
 8003626:	f002 0203 	and.w	r2, r2, #3
 800362a:	0092      	lsls	r2, r2, #2
 800362c:	4093      	lsls	r3, r2
 800362e:	69ba      	ldr	r2, [r7, #24]
 8003630:	4313      	orrs	r3, r2
 8003632:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8003634:	4935      	ldr	r1, [pc, #212]	@ (800370c <HAL_GPIO_Init+0x304>)
 8003636:	69fb      	ldr	r3, [r7, #28]
 8003638:	089b      	lsrs	r3, r3, #2
 800363a:	3302      	adds	r3, #2
 800363c:	69ba      	ldr	r2, [r7, #24]
 800363e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8003642:	4b3a      	ldr	r3, [pc, #232]	@ (800372c <HAL_GPIO_Init+0x324>)
 8003644:	689b      	ldr	r3, [r3, #8]
 8003646:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003648:	693b      	ldr	r3, [r7, #16]
 800364a:	43db      	mvns	r3, r3
 800364c:	69ba      	ldr	r2, [r7, #24]
 800364e:	4013      	ands	r3, r2
 8003650:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8003652:	683b      	ldr	r3, [r7, #0]
 8003654:	685b      	ldr	r3, [r3, #4]
 8003656:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 800365a:	2b00      	cmp	r3, #0
 800365c:	d003      	beq.n	8003666 <HAL_GPIO_Init+0x25e>
        {
          temp |= iocurrent;
 800365e:	69ba      	ldr	r2, [r7, #24]
 8003660:	693b      	ldr	r3, [r7, #16]
 8003662:	4313      	orrs	r3, r2
 8003664:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8003666:	4a31      	ldr	r2, [pc, #196]	@ (800372c <HAL_GPIO_Init+0x324>)
 8003668:	69bb      	ldr	r3, [r7, #24]
 800366a:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 800366c:	4b2f      	ldr	r3, [pc, #188]	@ (800372c <HAL_GPIO_Init+0x324>)
 800366e:	68db      	ldr	r3, [r3, #12]
 8003670:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003672:	693b      	ldr	r3, [r7, #16]
 8003674:	43db      	mvns	r3, r3
 8003676:	69ba      	ldr	r2, [r7, #24]
 8003678:	4013      	ands	r3, r2
 800367a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 800367c:	683b      	ldr	r3, [r7, #0]
 800367e:	685b      	ldr	r3, [r3, #4]
 8003680:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8003684:	2b00      	cmp	r3, #0
 8003686:	d003      	beq.n	8003690 <HAL_GPIO_Init+0x288>
        {
          temp |= iocurrent;
 8003688:	69ba      	ldr	r2, [r7, #24]
 800368a:	693b      	ldr	r3, [r7, #16]
 800368c:	4313      	orrs	r3, r2
 800368e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8003690:	4a26      	ldr	r2, [pc, #152]	@ (800372c <HAL_GPIO_Init+0x324>)
 8003692:	69bb      	ldr	r3, [r7, #24]
 8003694:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8003696:	4b25      	ldr	r3, [pc, #148]	@ (800372c <HAL_GPIO_Init+0x324>)
 8003698:	685b      	ldr	r3, [r3, #4]
 800369a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800369c:	693b      	ldr	r3, [r7, #16]
 800369e:	43db      	mvns	r3, r3
 80036a0:	69ba      	ldr	r2, [r7, #24]
 80036a2:	4013      	ands	r3, r2
 80036a4:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 80036a6:	683b      	ldr	r3, [r7, #0]
 80036a8:	685b      	ldr	r3, [r3, #4]
 80036aa:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80036ae:	2b00      	cmp	r3, #0
 80036b0:	d003      	beq.n	80036ba <HAL_GPIO_Init+0x2b2>
        {
          temp |= iocurrent;
 80036b2:	69ba      	ldr	r2, [r7, #24]
 80036b4:	693b      	ldr	r3, [r7, #16]
 80036b6:	4313      	orrs	r3, r2
 80036b8:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 80036ba:	4a1c      	ldr	r2, [pc, #112]	@ (800372c <HAL_GPIO_Init+0x324>)
 80036bc:	69bb      	ldr	r3, [r7, #24]
 80036be:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80036c0:	4b1a      	ldr	r3, [pc, #104]	@ (800372c <HAL_GPIO_Init+0x324>)
 80036c2:	681b      	ldr	r3, [r3, #0]
 80036c4:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80036c6:	693b      	ldr	r3, [r7, #16]
 80036c8:	43db      	mvns	r3, r3
 80036ca:	69ba      	ldr	r2, [r7, #24]
 80036cc:	4013      	ands	r3, r2
 80036ce:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 80036d0:	683b      	ldr	r3, [r7, #0]
 80036d2:	685b      	ldr	r3, [r3, #4]
 80036d4:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80036d8:	2b00      	cmp	r3, #0
 80036da:	d003      	beq.n	80036e4 <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 80036dc:	69ba      	ldr	r2, [r7, #24]
 80036de:	693b      	ldr	r3, [r7, #16]
 80036e0:	4313      	orrs	r3, r2
 80036e2:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 80036e4:	4a11      	ldr	r2, [pc, #68]	@ (800372c <HAL_GPIO_Init+0x324>)
 80036e6:	69bb      	ldr	r3, [r7, #24]
 80036e8:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 80036ea:	69fb      	ldr	r3, [r7, #28]
 80036ec:	3301      	adds	r3, #1
 80036ee:	61fb      	str	r3, [r7, #28]
 80036f0:	69fb      	ldr	r3, [r7, #28]
 80036f2:	2b0f      	cmp	r3, #15
 80036f4:	f67f ae96 	bls.w	8003424 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 80036f8:	bf00      	nop
 80036fa:	bf00      	nop
 80036fc:	3724      	adds	r7, #36	@ 0x24
 80036fe:	46bd      	mov	sp, r7
 8003700:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003704:	4770      	bx	lr
 8003706:	bf00      	nop
 8003708:	40023800 	.word	0x40023800
 800370c:	40013800 	.word	0x40013800
 8003710:	40020000 	.word	0x40020000
 8003714:	40020400 	.word	0x40020400
 8003718:	40020800 	.word	0x40020800
 800371c:	40020c00 	.word	0x40020c00
 8003720:	40021000 	.word	0x40021000
 8003724:	40021400 	.word	0x40021400
 8003728:	40021800 	.word	0x40021800
 800372c:	40013c00 	.word	0x40013c00

08003730 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8003730:	b480      	push	{r7}
 8003732:	b085      	sub	sp, #20
 8003734:	af00      	add	r7, sp, #0
 8003736:	6078      	str	r0, [r7, #4]
 8003738:	460b      	mov	r3, r1
 800373a:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 800373c:	687b      	ldr	r3, [r7, #4]
 800373e:	691a      	ldr	r2, [r3, #16]
 8003740:	887b      	ldrh	r3, [r7, #2]
 8003742:	4013      	ands	r3, r2
 8003744:	2b00      	cmp	r3, #0
 8003746:	d002      	beq.n	800374e <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8003748:	2301      	movs	r3, #1
 800374a:	73fb      	strb	r3, [r7, #15]
 800374c:	e001      	b.n	8003752 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 800374e:	2300      	movs	r3, #0
 8003750:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8003752:	7bfb      	ldrb	r3, [r7, #15]
}
 8003754:	4618      	mov	r0, r3
 8003756:	3714      	adds	r7, #20
 8003758:	46bd      	mov	sp, r7
 800375a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800375e:	4770      	bx	lr

08003760 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8003760:	b480      	push	{r7}
 8003762:	b083      	sub	sp, #12
 8003764:	af00      	add	r7, sp, #0
 8003766:	6078      	str	r0, [r7, #4]
 8003768:	460b      	mov	r3, r1
 800376a:	807b      	strh	r3, [r7, #2]
 800376c:	4613      	mov	r3, r2
 800376e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8003770:	787b      	ldrb	r3, [r7, #1]
 8003772:	2b00      	cmp	r3, #0
 8003774:	d003      	beq.n	800377e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8003776:	887a      	ldrh	r2, [r7, #2]
 8003778:	687b      	ldr	r3, [r7, #4]
 800377a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 800377c:	e003      	b.n	8003786 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 800377e:	887b      	ldrh	r3, [r7, #2]
 8003780:	041a      	lsls	r2, r3, #16
 8003782:	687b      	ldr	r3, [r7, #4]
 8003784:	619a      	str	r2, [r3, #24]
}
 8003786:	bf00      	nop
 8003788:	370c      	adds	r7, #12
 800378a:	46bd      	mov	sp, r7
 800378c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003790:	4770      	bx	lr
	...

08003794 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003794:	b580      	push	{r7, lr}
 8003796:	b084      	sub	sp, #16
 8003798:	af00      	add	r7, sp, #0
 800379a:	6078      	str	r0, [r7, #4]
 800379c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800379e:	687b      	ldr	r3, [r7, #4]
 80037a0:	2b00      	cmp	r3, #0
 80037a2:	d101      	bne.n	80037a8 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80037a4:	2301      	movs	r3, #1
 80037a6:	e0cc      	b.n	8003942 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80037a8:	4b68      	ldr	r3, [pc, #416]	@ (800394c <HAL_RCC_ClockConfig+0x1b8>)
 80037aa:	681b      	ldr	r3, [r3, #0]
 80037ac:	f003 030f 	and.w	r3, r3, #15
 80037b0:	683a      	ldr	r2, [r7, #0]
 80037b2:	429a      	cmp	r2, r3
 80037b4:	d90c      	bls.n	80037d0 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80037b6:	4b65      	ldr	r3, [pc, #404]	@ (800394c <HAL_RCC_ClockConfig+0x1b8>)
 80037b8:	683a      	ldr	r2, [r7, #0]
 80037ba:	b2d2      	uxtb	r2, r2
 80037bc:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80037be:	4b63      	ldr	r3, [pc, #396]	@ (800394c <HAL_RCC_ClockConfig+0x1b8>)
 80037c0:	681b      	ldr	r3, [r3, #0]
 80037c2:	f003 030f 	and.w	r3, r3, #15
 80037c6:	683a      	ldr	r2, [r7, #0]
 80037c8:	429a      	cmp	r2, r3
 80037ca:	d001      	beq.n	80037d0 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 80037cc:	2301      	movs	r3, #1
 80037ce:	e0b8      	b.n	8003942 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80037d0:	687b      	ldr	r3, [r7, #4]
 80037d2:	681b      	ldr	r3, [r3, #0]
 80037d4:	f003 0302 	and.w	r3, r3, #2
 80037d8:	2b00      	cmp	r3, #0
 80037da:	d020      	beq.n	800381e <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80037dc:	687b      	ldr	r3, [r7, #4]
 80037de:	681b      	ldr	r3, [r3, #0]
 80037e0:	f003 0304 	and.w	r3, r3, #4
 80037e4:	2b00      	cmp	r3, #0
 80037e6:	d005      	beq.n	80037f4 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80037e8:	4b59      	ldr	r3, [pc, #356]	@ (8003950 <HAL_RCC_ClockConfig+0x1bc>)
 80037ea:	689b      	ldr	r3, [r3, #8]
 80037ec:	4a58      	ldr	r2, [pc, #352]	@ (8003950 <HAL_RCC_ClockConfig+0x1bc>)
 80037ee:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 80037f2:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80037f4:	687b      	ldr	r3, [r7, #4]
 80037f6:	681b      	ldr	r3, [r3, #0]
 80037f8:	f003 0308 	and.w	r3, r3, #8
 80037fc:	2b00      	cmp	r3, #0
 80037fe:	d005      	beq.n	800380c <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8003800:	4b53      	ldr	r3, [pc, #332]	@ (8003950 <HAL_RCC_ClockConfig+0x1bc>)
 8003802:	689b      	ldr	r3, [r3, #8]
 8003804:	4a52      	ldr	r2, [pc, #328]	@ (8003950 <HAL_RCC_ClockConfig+0x1bc>)
 8003806:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 800380a:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800380c:	4b50      	ldr	r3, [pc, #320]	@ (8003950 <HAL_RCC_ClockConfig+0x1bc>)
 800380e:	689b      	ldr	r3, [r3, #8]
 8003810:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8003814:	687b      	ldr	r3, [r7, #4]
 8003816:	689b      	ldr	r3, [r3, #8]
 8003818:	494d      	ldr	r1, [pc, #308]	@ (8003950 <HAL_RCC_ClockConfig+0x1bc>)
 800381a:	4313      	orrs	r3, r2
 800381c:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800381e:	687b      	ldr	r3, [r7, #4]
 8003820:	681b      	ldr	r3, [r3, #0]
 8003822:	f003 0301 	and.w	r3, r3, #1
 8003826:	2b00      	cmp	r3, #0
 8003828:	d044      	beq.n	80038b4 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800382a:	687b      	ldr	r3, [r7, #4]
 800382c:	685b      	ldr	r3, [r3, #4]
 800382e:	2b01      	cmp	r3, #1
 8003830:	d107      	bne.n	8003842 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003832:	4b47      	ldr	r3, [pc, #284]	@ (8003950 <HAL_RCC_ClockConfig+0x1bc>)
 8003834:	681b      	ldr	r3, [r3, #0]
 8003836:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800383a:	2b00      	cmp	r3, #0
 800383c:	d119      	bne.n	8003872 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800383e:	2301      	movs	r3, #1
 8003840:	e07f      	b.n	8003942 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8003842:	687b      	ldr	r3, [r7, #4]
 8003844:	685b      	ldr	r3, [r3, #4]
 8003846:	2b02      	cmp	r3, #2
 8003848:	d003      	beq.n	8003852 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 800384a:	687b      	ldr	r3, [r7, #4]
 800384c:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800384e:	2b03      	cmp	r3, #3
 8003850:	d107      	bne.n	8003862 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003852:	4b3f      	ldr	r3, [pc, #252]	@ (8003950 <HAL_RCC_ClockConfig+0x1bc>)
 8003854:	681b      	ldr	r3, [r3, #0]
 8003856:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800385a:	2b00      	cmp	r3, #0
 800385c:	d109      	bne.n	8003872 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800385e:	2301      	movs	r3, #1
 8003860:	e06f      	b.n	8003942 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003862:	4b3b      	ldr	r3, [pc, #236]	@ (8003950 <HAL_RCC_ClockConfig+0x1bc>)
 8003864:	681b      	ldr	r3, [r3, #0]
 8003866:	f003 0302 	and.w	r3, r3, #2
 800386a:	2b00      	cmp	r3, #0
 800386c:	d101      	bne.n	8003872 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800386e:	2301      	movs	r3, #1
 8003870:	e067      	b.n	8003942 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8003872:	4b37      	ldr	r3, [pc, #220]	@ (8003950 <HAL_RCC_ClockConfig+0x1bc>)
 8003874:	689b      	ldr	r3, [r3, #8]
 8003876:	f023 0203 	bic.w	r2, r3, #3
 800387a:	687b      	ldr	r3, [r7, #4]
 800387c:	685b      	ldr	r3, [r3, #4]
 800387e:	4934      	ldr	r1, [pc, #208]	@ (8003950 <HAL_RCC_ClockConfig+0x1bc>)
 8003880:	4313      	orrs	r3, r2
 8003882:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8003884:	f7fe fc88 	bl	8002198 <HAL_GetTick>
 8003888:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800388a:	e00a      	b.n	80038a2 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800388c:	f7fe fc84 	bl	8002198 <HAL_GetTick>
 8003890:	4602      	mov	r2, r0
 8003892:	68fb      	ldr	r3, [r7, #12]
 8003894:	1ad3      	subs	r3, r2, r3
 8003896:	f241 3288 	movw	r2, #5000	@ 0x1388
 800389a:	4293      	cmp	r3, r2
 800389c:	d901      	bls.n	80038a2 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800389e:	2303      	movs	r3, #3
 80038a0:	e04f      	b.n	8003942 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80038a2:	4b2b      	ldr	r3, [pc, #172]	@ (8003950 <HAL_RCC_ClockConfig+0x1bc>)
 80038a4:	689b      	ldr	r3, [r3, #8]
 80038a6:	f003 020c 	and.w	r2, r3, #12
 80038aa:	687b      	ldr	r3, [r7, #4]
 80038ac:	685b      	ldr	r3, [r3, #4]
 80038ae:	009b      	lsls	r3, r3, #2
 80038b0:	429a      	cmp	r2, r3
 80038b2:	d1eb      	bne.n	800388c <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80038b4:	4b25      	ldr	r3, [pc, #148]	@ (800394c <HAL_RCC_ClockConfig+0x1b8>)
 80038b6:	681b      	ldr	r3, [r3, #0]
 80038b8:	f003 030f 	and.w	r3, r3, #15
 80038bc:	683a      	ldr	r2, [r7, #0]
 80038be:	429a      	cmp	r2, r3
 80038c0:	d20c      	bcs.n	80038dc <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80038c2:	4b22      	ldr	r3, [pc, #136]	@ (800394c <HAL_RCC_ClockConfig+0x1b8>)
 80038c4:	683a      	ldr	r2, [r7, #0]
 80038c6:	b2d2      	uxtb	r2, r2
 80038c8:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80038ca:	4b20      	ldr	r3, [pc, #128]	@ (800394c <HAL_RCC_ClockConfig+0x1b8>)
 80038cc:	681b      	ldr	r3, [r3, #0]
 80038ce:	f003 030f 	and.w	r3, r3, #15
 80038d2:	683a      	ldr	r2, [r7, #0]
 80038d4:	429a      	cmp	r2, r3
 80038d6:	d001      	beq.n	80038dc <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 80038d8:	2301      	movs	r3, #1
 80038da:	e032      	b.n	8003942 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80038dc:	687b      	ldr	r3, [r7, #4]
 80038de:	681b      	ldr	r3, [r3, #0]
 80038e0:	f003 0304 	and.w	r3, r3, #4
 80038e4:	2b00      	cmp	r3, #0
 80038e6:	d008      	beq.n	80038fa <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80038e8:	4b19      	ldr	r3, [pc, #100]	@ (8003950 <HAL_RCC_ClockConfig+0x1bc>)
 80038ea:	689b      	ldr	r3, [r3, #8]
 80038ec:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 80038f0:	687b      	ldr	r3, [r7, #4]
 80038f2:	68db      	ldr	r3, [r3, #12]
 80038f4:	4916      	ldr	r1, [pc, #88]	@ (8003950 <HAL_RCC_ClockConfig+0x1bc>)
 80038f6:	4313      	orrs	r3, r2
 80038f8:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80038fa:	687b      	ldr	r3, [r7, #4]
 80038fc:	681b      	ldr	r3, [r3, #0]
 80038fe:	f003 0308 	and.w	r3, r3, #8
 8003902:	2b00      	cmp	r3, #0
 8003904:	d009      	beq.n	800391a <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8003906:	4b12      	ldr	r3, [pc, #72]	@ (8003950 <HAL_RCC_ClockConfig+0x1bc>)
 8003908:	689b      	ldr	r3, [r3, #8]
 800390a:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 800390e:	687b      	ldr	r3, [r7, #4]
 8003910:	691b      	ldr	r3, [r3, #16]
 8003912:	00db      	lsls	r3, r3, #3
 8003914:	490e      	ldr	r1, [pc, #56]	@ (8003950 <HAL_RCC_ClockConfig+0x1bc>)
 8003916:	4313      	orrs	r3, r2
 8003918:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 800391a:	f000 f855 	bl	80039c8 <HAL_RCC_GetSysClockFreq>
 800391e:	4602      	mov	r2, r0
 8003920:	4b0b      	ldr	r3, [pc, #44]	@ (8003950 <HAL_RCC_ClockConfig+0x1bc>)
 8003922:	689b      	ldr	r3, [r3, #8]
 8003924:	091b      	lsrs	r3, r3, #4
 8003926:	f003 030f 	and.w	r3, r3, #15
 800392a:	490a      	ldr	r1, [pc, #40]	@ (8003954 <HAL_RCC_ClockConfig+0x1c0>)
 800392c:	5ccb      	ldrb	r3, [r1, r3]
 800392e:	fa22 f303 	lsr.w	r3, r2, r3
 8003932:	4a09      	ldr	r2, [pc, #36]	@ (8003958 <HAL_RCC_ClockConfig+0x1c4>)
 8003934:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8003936:	4b09      	ldr	r3, [pc, #36]	@ (800395c <HAL_RCC_ClockConfig+0x1c8>)
 8003938:	681b      	ldr	r3, [r3, #0]
 800393a:	4618      	mov	r0, r3
 800393c:	f7fe fbe8 	bl	8002110 <HAL_InitTick>

  return HAL_OK;
 8003940:	2300      	movs	r3, #0
}
 8003942:	4618      	mov	r0, r3
 8003944:	3710      	adds	r7, #16
 8003946:	46bd      	mov	sp, r7
 8003948:	bd80      	pop	{r7, pc}
 800394a:	bf00      	nop
 800394c:	40023c00 	.word	0x40023c00
 8003950:	40023800 	.word	0x40023800
 8003954:	0800a318 	.word	0x0800a318
 8003958:	20000000 	.word	0x20000000
 800395c:	20000004 	.word	0x20000004

08003960 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003960:	b480      	push	{r7}
 8003962:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8003964:	4b03      	ldr	r3, [pc, #12]	@ (8003974 <HAL_RCC_GetHCLKFreq+0x14>)
 8003966:	681b      	ldr	r3, [r3, #0]
}
 8003968:	4618      	mov	r0, r3
 800396a:	46bd      	mov	sp, r7
 800396c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003970:	4770      	bx	lr
 8003972:	bf00      	nop
 8003974:	20000000 	.word	0x20000000

08003978 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8003978:	b580      	push	{r7, lr}
 800397a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 800397c:	f7ff fff0 	bl	8003960 <HAL_RCC_GetHCLKFreq>
 8003980:	4602      	mov	r2, r0
 8003982:	4b05      	ldr	r3, [pc, #20]	@ (8003998 <HAL_RCC_GetPCLK1Freq+0x20>)
 8003984:	689b      	ldr	r3, [r3, #8]
 8003986:	0a9b      	lsrs	r3, r3, #10
 8003988:	f003 0307 	and.w	r3, r3, #7
 800398c:	4903      	ldr	r1, [pc, #12]	@ (800399c <HAL_RCC_GetPCLK1Freq+0x24>)
 800398e:	5ccb      	ldrb	r3, [r1, r3]
 8003990:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003994:	4618      	mov	r0, r3
 8003996:	bd80      	pop	{r7, pc}
 8003998:	40023800 	.word	0x40023800
 800399c:	0800a328 	.word	0x0800a328

080039a0 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80039a0:	b580      	push	{r7, lr}
 80039a2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 80039a4:	f7ff ffdc 	bl	8003960 <HAL_RCC_GetHCLKFreq>
 80039a8:	4602      	mov	r2, r0
 80039aa:	4b05      	ldr	r3, [pc, #20]	@ (80039c0 <HAL_RCC_GetPCLK2Freq+0x20>)
 80039ac:	689b      	ldr	r3, [r3, #8]
 80039ae:	0b5b      	lsrs	r3, r3, #13
 80039b0:	f003 0307 	and.w	r3, r3, #7
 80039b4:	4903      	ldr	r1, [pc, #12]	@ (80039c4 <HAL_RCC_GetPCLK2Freq+0x24>)
 80039b6:	5ccb      	ldrb	r3, [r1, r3]
 80039b8:	fa22 f303 	lsr.w	r3, r2, r3
}
 80039bc:	4618      	mov	r0, r3
 80039be:	bd80      	pop	{r7, pc}
 80039c0:	40023800 	.word	0x40023800
 80039c4:	0800a328 	.word	0x0800a328

080039c8 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80039c8:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80039cc:	b0ae      	sub	sp, #184	@ 0xb8
 80039ce:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 80039d0:	2300      	movs	r3, #0
 80039d2:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
  uint32_t pllvco = 0U;
 80039d6:	2300      	movs	r3, #0
 80039d8:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
  uint32_t pllp = 0U;
 80039dc:	2300      	movs	r3, #0
 80039de:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
  uint32_t pllr = 0U;
 80039e2:	2300      	movs	r3, #0
 80039e4:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
  uint32_t sysclockfreq = 0U;
 80039e8:	2300      	movs	r3, #0
 80039ea:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80039ee:	4bcb      	ldr	r3, [pc, #812]	@ (8003d1c <HAL_RCC_GetSysClockFreq+0x354>)
 80039f0:	689b      	ldr	r3, [r3, #8]
 80039f2:	f003 030c 	and.w	r3, r3, #12
 80039f6:	2b0c      	cmp	r3, #12
 80039f8:	f200 8206 	bhi.w	8003e08 <HAL_RCC_GetSysClockFreq+0x440>
 80039fc:	a201      	add	r2, pc, #4	@ (adr r2, 8003a04 <HAL_RCC_GetSysClockFreq+0x3c>)
 80039fe:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003a02:	bf00      	nop
 8003a04:	08003a39 	.word	0x08003a39
 8003a08:	08003e09 	.word	0x08003e09
 8003a0c:	08003e09 	.word	0x08003e09
 8003a10:	08003e09 	.word	0x08003e09
 8003a14:	08003a41 	.word	0x08003a41
 8003a18:	08003e09 	.word	0x08003e09
 8003a1c:	08003e09 	.word	0x08003e09
 8003a20:	08003e09 	.word	0x08003e09
 8003a24:	08003a49 	.word	0x08003a49
 8003a28:	08003e09 	.word	0x08003e09
 8003a2c:	08003e09 	.word	0x08003e09
 8003a30:	08003e09 	.word	0x08003e09
 8003a34:	08003c39 	.word	0x08003c39
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8003a38:	4bb9      	ldr	r3, [pc, #740]	@ (8003d20 <HAL_RCC_GetSysClockFreq+0x358>)
 8003a3a:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
       break;
 8003a3e:	e1e7      	b.n	8003e10 <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8003a40:	4bb8      	ldr	r3, [pc, #736]	@ (8003d24 <HAL_RCC_GetSysClockFreq+0x35c>)
 8003a42:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
      break;
 8003a46:	e1e3      	b.n	8003e10 <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL/PLLP used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8003a48:	4bb4      	ldr	r3, [pc, #720]	@ (8003d1c <HAL_RCC_GetSysClockFreq+0x354>)
 8003a4a:	685b      	ldr	r3, [r3, #4]
 8003a4c:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8003a50:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8003a54:	4bb1      	ldr	r3, [pc, #708]	@ (8003d1c <HAL_RCC_GetSysClockFreq+0x354>)
 8003a56:	685b      	ldr	r3, [r3, #4]
 8003a58:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8003a5c:	2b00      	cmp	r3, #0
 8003a5e:	d071      	beq.n	8003b44 <HAL_RCC_GetSysClockFreq+0x17c>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003a60:	4bae      	ldr	r3, [pc, #696]	@ (8003d1c <HAL_RCC_GetSysClockFreq+0x354>)
 8003a62:	685b      	ldr	r3, [r3, #4]
 8003a64:	099b      	lsrs	r3, r3, #6
 8003a66:	2200      	movs	r2, #0
 8003a68:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 8003a6c:	f8c7 209c 	str.w	r2, [r7, #156]	@ 0x9c
 8003a70:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8003a74:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003a78:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 8003a7c:	2300      	movs	r3, #0
 8003a7e:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 8003a82:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	@ 0x90
 8003a86:	4622      	mov	r2, r4
 8003a88:	462b      	mov	r3, r5
 8003a8a:	f04f 0000 	mov.w	r0, #0
 8003a8e:	f04f 0100 	mov.w	r1, #0
 8003a92:	0159      	lsls	r1, r3, #5
 8003a94:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8003a98:	0150      	lsls	r0, r2, #5
 8003a9a:	4602      	mov	r2, r0
 8003a9c:	460b      	mov	r3, r1
 8003a9e:	4621      	mov	r1, r4
 8003aa0:	1a51      	subs	r1, r2, r1
 8003aa2:	6439      	str	r1, [r7, #64]	@ 0x40
 8003aa4:	4629      	mov	r1, r5
 8003aa6:	eb63 0301 	sbc.w	r3, r3, r1
 8003aaa:	647b      	str	r3, [r7, #68]	@ 0x44
 8003aac:	f04f 0200 	mov.w	r2, #0
 8003ab0:	f04f 0300 	mov.w	r3, #0
 8003ab4:	e9d7 8910 	ldrd	r8, r9, [r7, #64]	@ 0x40
 8003ab8:	4649      	mov	r1, r9
 8003aba:	018b      	lsls	r3, r1, #6
 8003abc:	4641      	mov	r1, r8
 8003abe:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8003ac2:	4641      	mov	r1, r8
 8003ac4:	018a      	lsls	r2, r1, #6
 8003ac6:	4641      	mov	r1, r8
 8003ac8:	1a51      	subs	r1, r2, r1
 8003aca:	63b9      	str	r1, [r7, #56]	@ 0x38
 8003acc:	4649      	mov	r1, r9
 8003ace:	eb63 0301 	sbc.w	r3, r3, r1
 8003ad2:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8003ad4:	f04f 0200 	mov.w	r2, #0
 8003ad8:	f04f 0300 	mov.w	r3, #0
 8003adc:	e9d7 890e 	ldrd	r8, r9, [r7, #56]	@ 0x38
 8003ae0:	4649      	mov	r1, r9
 8003ae2:	00cb      	lsls	r3, r1, #3
 8003ae4:	4641      	mov	r1, r8
 8003ae6:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8003aea:	4641      	mov	r1, r8
 8003aec:	00ca      	lsls	r2, r1, #3
 8003aee:	4610      	mov	r0, r2
 8003af0:	4619      	mov	r1, r3
 8003af2:	4603      	mov	r3, r0
 8003af4:	4622      	mov	r2, r4
 8003af6:	189b      	adds	r3, r3, r2
 8003af8:	633b      	str	r3, [r7, #48]	@ 0x30
 8003afa:	462b      	mov	r3, r5
 8003afc:	460a      	mov	r2, r1
 8003afe:	eb42 0303 	adc.w	r3, r2, r3
 8003b02:	637b      	str	r3, [r7, #52]	@ 0x34
 8003b04:	f04f 0200 	mov.w	r2, #0
 8003b08:	f04f 0300 	mov.w	r3, #0
 8003b0c:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	@ 0x30
 8003b10:	4629      	mov	r1, r5
 8003b12:	024b      	lsls	r3, r1, #9
 8003b14:	4621      	mov	r1, r4
 8003b16:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8003b1a:	4621      	mov	r1, r4
 8003b1c:	024a      	lsls	r2, r1, #9
 8003b1e:	4610      	mov	r0, r2
 8003b20:	4619      	mov	r1, r3
 8003b22:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8003b26:	2200      	movs	r2, #0
 8003b28:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 8003b2c:	f8c7 208c 	str.w	r2, [r7, #140]	@ 0x8c
 8003b30:	e9d7 2322 	ldrd	r2, r3, [r7, #136]	@ 0x88
 8003b34:	f7fd f8a8 	bl	8000c88 <__aeabi_uldivmod>
 8003b38:	4602      	mov	r2, r0
 8003b3a:	460b      	mov	r3, r1
 8003b3c:	4613      	mov	r3, r2
 8003b3e:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8003b42:	e067      	b.n	8003c14 <HAL_RCC_GetSysClockFreq+0x24c>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003b44:	4b75      	ldr	r3, [pc, #468]	@ (8003d1c <HAL_RCC_GetSysClockFreq+0x354>)
 8003b46:	685b      	ldr	r3, [r3, #4]
 8003b48:	099b      	lsrs	r3, r3, #6
 8003b4a:	2200      	movs	r2, #0
 8003b4c:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8003b50:	f8c7 2084 	str.w	r2, [r7, #132]	@ 0x84
 8003b54:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 8003b58:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003b5c:	67bb      	str	r3, [r7, #120]	@ 0x78
 8003b5e:	2300      	movs	r3, #0
 8003b60:	67fb      	str	r3, [r7, #124]	@ 0x7c
 8003b62:	e9d7 451e 	ldrd	r4, r5, [r7, #120]	@ 0x78
 8003b66:	4622      	mov	r2, r4
 8003b68:	462b      	mov	r3, r5
 8003b6a:	f04f 0000 	mov.w	r0, #0
 8003b6e:	f04f 0100 	mov.w	r1, #0
 8003b72:	0159      	lsls	r1, r3, #5
 8003b74:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8003b78:	0150      	lsls	r0, r2, #5
 8003b7a:	4602      	mov	r2, r0
 8003b7c:	460b      	mov	r3, r1
 8003b7e:	4621      	mov	r1, r4
 8003b80:	1a51      	subs	r1, r2, r1
 8003b82:	62b9      	str	r1, [r7, #40]	@ 0x28
 8003b84:	4629      	mov	r1, r5
 8003b86:	eb63 0301 	sbc.w	r3, r3, r1
 8003b8a:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8003b8c:	f04f 0200 	mov.w	r2, #0
 8003b90:	f04f 0300 	mov.w	r3, #0
 8003b94:	e9d7 890a 	ldrd	r8, r9, [r7, #40]	@ 0x28
 8003b98:	4649      	mov	r1, r9
 8003b9a:	018b      	lsls	r3, r1, #6
 8003b9c:	4641      	mov	r1, r8
 8003b9e:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8003ba2:	4641      	mov	r1, r8
 8003ba4:	018a      	lsls	r2, r1, #6
 8003ba6:	4641      	mov	r1, r8
 8003ba8:	ebb2 0a01 	subs.w	sl, r2, r1
 8003bac:	4649      	mov	r1, r9
 8003bae:	eb63 0b01 	sbc.w	fp, r3, r1
 8003bb2:	f04f 0200 	mov.w	r2, #0
 8003bb6:	f04f 0300 	mov.w	r3, #0
 8003bba:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8003bbe:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8003bc2:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8003bc6:	4692      	mov	sl, r2
 8003bc8:	469b      	mov	fp, r3
 8003bca:	4623      	mov	r3, r4
 8003bcc:	eb1a 0303 	adds.w	r3, sl, r3
 8003bd0:	623b      	str	r3, [r7, #32]
 8003bd2:	462b      	mov	r3, r5
 8003bd4:	eb4b 0303 	adc.w	r3, fp, r3
 8003bd8:	627b      	str	r3, [r7, #36]	@ 0x24
 8003bda:	f04f 0200 	mov.w	r2, #0
 8003bde:	f04f 0300 	mov.w	r3, #0
 8003be2:	e9d7 4508 	ldrd	r4, r5, [r7, #32]
 8003be6:	4629      	mov	r1, r5
 8003be8:	028b      	lsls	r3, r1, #10
 8003bea:	4621      	mov	r1, r4
 8003bec:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8003bf0:	4621      	mov	r1, r4
 8003bf2:	028a      	lsls	r2, r1, #10
 8003bf4:	4610      	mov	r0, r2
 8003bf6:	4619      	mov	r1, r3
 8003bf8:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8003bfc:	2200      	movs	r2, #0
 8003bfe:	673b      	str	r3, [r7, #112]	@ 0x70
 8003c00:	677a      	str	r2, [r7, #116]	@ 0x74
 8003c02:	e9d7 231c 	ldrd	r2, r3, [r7, #112]	@ 0x70
 8003c06:	f7fd f83f 	bl	8000c88 <__aeabi_uldivmod>
 8003c0a:	4602      	mov	r2, r0
 8003c0c:	460b      	mov	r3, r1
 8003c0e:	4613      	mov	r3, r2
 8003c10:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8003c14:	4b41      	ldr	r3, [pc, #260]	@ (8003d1c <HAL_RCC_GetSysClockFreq+0x354>)
 8003c16:	685b      	ldr	r3, [r3, #4]
 8003c18:	0c1b      	lsrs	r3, r3, #16
 8003c1a:	f003 0303 	and.w	r3, r3, #3
 8003c1e:	3301      	adds	r3, #1
 8003c20:	005b      	lsls	r3, r3, #1
 8003c22:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8

      sysclockfreq = pllvco/pllp;
 8003c26:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 8003c2a:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 8003c2e:	fbb2 f3f3 	udiv	r3, r2, r3
 8003c32:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
      break;
 8003c36:	e0eb      	b.n	8003e10 <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_PLLR:  /* PLL/PLLR used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8003c38:	4b38      	ldr	r3, [pc, #224]	@ (8003d1c <HAL_RCC_GetSysClockFreq+0x354>)
 8003c3a:	685b      	ldr	r3, [r3, #4]
 8003c3c:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8003c40:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8003c44:	4b35      	ldr	r3, [pc, #212]	@ (8003d1c <HAL_RCC_GetSysClockFreq+0x354>)
 8003c46:	685b      	ldr	r3, [r3, #4]
 8003c48:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8003c4c:	2b00      	cmp	r3, #0
 8003c4e:	d06b      	beq.n	8003d28 <HAL_RCC_GetSysClockFreq+0x360>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003c50:	4b32      	ldr	r3, [pc, #200]	@ (8003d1c <HAL_RCC_GetSysClockFreq+0x354>)
 8003c52:	685b      	ldr	r3, [r3, #4]
 8003c54:	099b      	lsrs	r3, r3, #6
 8003c56:	2200      	movs	r2, #0
 8003c58:	66bb      	str	r3, [r7, #104]	@ 0x68
 8003c5a:	66fa      	str	r2, [r7, #108]	@ 0x6c
 8003c5c:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8003c5e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003c62:	663b      	str	r3, [r7, #96]	@ 0x60
 8003c64:	2300      	movs	r3, #0
 8003c66:	667b      	str	r3, [r7, #100]	@ 0x64
 8003c68:	e9d7 4518 	ldrd	r4, r5, [r7, #96]	@ 0x60
 8003c6c:	4622      	mov	r2, r4
 8003c6e:	462b      	mov	r3, r5
 8003c70:	f04f 0000 	mov.w	r0, #0
 8003c74:	f04f 0100 	mov.w	r1, #0
 8003c78:	0159      	lsls	r1, r3, #5
 8003c7a:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8003c7e:	0150      	lsls	r0, r2, #5
 8003c80:	4602      	mov	r2, r0
 8003c82:	460b      	mov	r3, r1
 8003c84:	4621      	mov	r1, r4
 8003c86:	1a51      	subs	r1, r2, r1
 8003c88:	61b9      	str	r1, [r7, #24]
 8003c8a:	4629      	mov	r1, r5
 8003c8c:	eb63 0301 	sbc.w	r3, r3, r1
 8003c90:	61fb      	str	r3, [r7, #28]
 8003c92:	f04f 0200 	mov.w	r2, #0
 8003c96:	f04f 0300 	mov.w	r3, #0
 8003c9a:	e9d7 ab06 	ldrd	sl, fp, [r7, #24]
 8003c9e:	4659      	mov	r1, fp
 8003ca0:	018b      	lsls	r3, r1, #6
 8003ca2:	4651      	mov	r1, sl
 8003ca4:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8003ca8:	4651      	mov	r1, sl
 8003caa:	018a      	lsls	r2, r1, #6
 8003cac:	4651      	mov	r1, sl
 8003cae:	ebb2 0801 	subs.w	r8, r2, r1
 8003cb2:	4659      	mov	r1, fp
 8003cb4:	eb63 0901 	sbc.w	r9, r3, r1
 8003cb8:	f04f 0200 	mov.w	r2, #0
 8003cbc:	f04f 0300 	mov.w	r3, #0
 8003cc0:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8003cc4:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8003cc8:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8003ccc:	4690      	mov	r8, r2
 8003cce:	4699      	mov	r9, r3
 8003cd0:	4623      	mov	r3, r4
 8003cd2:	eb18 0303 	adds.w	r3, r8, r3
 8003cd6:	613b      	str	r3, [r7, #16]
 8003cd8:	462b      	mov	r3, r5
 8003cda:	eb49 0303 	adc.w	r3, r9, r3
 8003cde:	617b      	str	r3, [r7, #20]
 8003ce0:	f04f 0200 	mov.w	r2, #0
 8003ce4:	f04f 0300 	mov.w	r3, #0
 8003ce8:	e9d7 4504 	ldrd	r4, r5, [r7, #16]
 8003cec:	4629      	mov	r1, r5
 8003cee:	024b      	lsls	r3, r1, #9
 8003cf0:	4621      	mov	r1, r4
 8003cf2:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8003cf6:	4621      	mov	r1, r4
 8003cf8:	024a      	lsls	r2, r1, #9
 8003cfa:	4610      	mov	r0, r2
 8003cfc:	4619      	mov	r1, r3
 8003cfe:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8003d02:	2200      	movs	r2, #0
 8003d04:	65bb      	str	r3, [r7, #88]	@ 0x58
 8003d06:	65fa      	str	r2, [r7, #92]	@ 0x5c
 8003d08:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	@ 0x58
 8003d0c:	f7fc ffbc 	bl	8000c88 <__aeabi_uldivmod>
 8003d10:	4602      	mov	r2, r0
 8003d12:	460b      	mov	r3, r1
 8003d14:	4613      	mov	r3, r2
 8003d16:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8003d1a:	e065      	b.n	8003de8 <HAL_RCC_GetSysClockFreq+0x420>
 8003d1c:	40023800 	.word	0x40023800
 8003d20:	00f42400 	.word	0x00f42400
 8003d24:	007a1200 	.word	0x007a1200
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003d28:	4b3d      	ldr	r3, [pc, #244]	@ (8003e20 <HAL_RCC_GetSysClockFreq+0x458>)
 8003d2a:	685b      	ldr	r3, [r3, #4]
 8003d2c:	099b      	lsrs	r3, r3, #6
 8003d2e:	2200      	movs	r2, #0
 8003d30:	4618      	mov	r0, r3
 8003d32:	4611      	mov	r1, r2
 8003d34:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8003d38:	653b      	str	r3, [r7, #80]	@ 0x50
 8003d3a:	2300      	movs	r3, #0
 8003d3c:	657b      	str	r3, [r7, #84]	@ 0x54
 8003d3e:	e9d7 8914 	ldrd	r8, r9, [r7, #80]	@ 0x50
 8003d42:	4642      	mov	r2, r8
 8003d44:	464b      	mov	r3, r9
 8003d46:	f04f 0000 	mov.w	r0, #0
 8003d4a:	f04f 0100 	mov.w	r1, #0
 8003d4e:	0159      	lsls	r1, r3, #5
 8003d50:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8003d54:	0150      	lsls	r0, r2, #5
 8003d56:	4602      	mov	r2, r0
 8003d58:	460b      	mov	r3, r1
 8003d5a:	4641      	mov	r1, r8
 8003d5c:	1a51      	subs	r1, r2, r1
 8003d5e:	60b9      	str	r1, [r7, #8]
 8003d60:	4649      	mov	r1, r9
 8003d62:	eb63 0301 	sbc.w	r3, r3, r1
 8003d66:	60fb      	str	r3, [r7, #12]
 8003d68:	f04f 0200 	mov.w	r2, #0
 8003d6c:	f04f 0300 	mov.w	r3, #0
 8003d70:	e9d7 ab02 	ldrd	sl, fp, [r7, #8]
 8003d74:	4659      	mov	r1, fp
 8003d76:	018b      	lsls	r3, r1, #6
 8003d78:	4651      	mov	r1, sl
 8003d7a:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8003d7e:	4651      	mov	r1, sl
 8003d80:	018a      	lsls	r2, r1, #6
 8003d82:	4651      	mov	r1, sl
 8003d84:	1a54      	subs	r4, r2, r1
 8003d86:	4659      	mov	r1, fp
 8003d88:	eb63 0501 	sbc.w	r5, r3, r1
 8003d8c:	f04f 0200 	mov.w	r2, #0
 8003d90:	f04f 0300 	mov.w	r3, #0
 8003d94:	00eb      	lsls	r3, r5, #3
 8003d96:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8003d9a:	00e2      	lsls	r2, r4, #3
 8003d9c:	4614      	mov	r4, r2
 8003d9e:	461d      	mov	r5, r3
 8003da0:	4643      	mov	r3, r8
 8003da2:	18e3      	adds	r3, r4, r3
 8003da4:	603b      	str	r3, [r7, #0]
 8003da6:	464b      	mov	r3, r9
 8003da8:	eb45 0303 	adc.w	r3, r5, r3
 8003dac:	607b      	str	r3, [r7, #4]
 8003dae:	f04f 0200 	mov.w	r2, #0
 8003db2:	f04f 0300 	mov.w	r3, #0
 8003db6:	e9d7 4500 	ldrd	r4, r5, [r7]
 8003dba:	4629      	mov	r1, r5
 8003dbc:	028b      	lsls	r3, r1, #10
 8003dbe:	4621      	mov	r1, r4
 8003dc0:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8003dc4:	4621      	mov	r1, r4
 8003dc6:	028a      	lsls	r2, r1, #10
 8003dc8:	4610      	mov	r0, r2
 8003dca:	4619      	mov	r1, r3
 8003dcc:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8003dd0:	2200      	movs	r2, #0
 8003dd2:	64bb      	str	r3, [r7, #72]	@ 0x48
 8003dd4:	64fa      	str	r2, [r7, #76]	@ 0x4c
 8003dd6:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	@ 0x48
 8003dda:	f7fc ff55 	bl	8000c88 <__aeabi_uldivmod>
 8003dde:	4602      	mov	r2, r0
 8003de0:	460b      	mov	r3, r1
 8003de2:	4613      	mov	r3, r2
 8003de4:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
      }
      pllr = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos);
 8003de8:	4b0d      	ldr	r3, [pc, #52]	@ (8003e20 <HAL_RCC_GetSysClockFreq+0x458>)
 8003dea:	685b      	ldr	r3, [r3, #4]
 8003dec:	0f1b      	lsrs	r3, r3, #28
 8003dee:	f003 0307 	and.w	r3, r3, #7
 8003df2:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4

      sysclockfreq = pllvco/pllr;
 8003df6:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 8003dfa:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 8003dfe:	fbb2 f3f3 	udiv	r3, r2, r3
 8003e02:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
      break;
 8003e06:	e003      	b.n	8003e10 <HAL_RCC_GetSysClockFreq+0x448>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8003e08:	4b06      	ldr	r3, [pc, #24]	@ (8003e24 <HAL_RCC_GetSysClockFreq+0x45c>)
 8003e0a:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
      break;
 8003e0e:	bf00      	nop
    }
  }
  return sysclockfreq;
 8003e10:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
}
 8003e14:	4618      	mov	r0, r3
 8003e16:	37b8      	adds	r7, #184	@ 0xb8
 8003e18:	46bd      	mov	sp, r7
 8003e1a:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8003e1e:	bf00      	nop
 8003e20:	40023800 	.word	0x40023800
 8003e24:	00f42400 	.word	0x00f42400

08003e28 <HAL_RCC_OscConfig>:
  * @note   This function add the PLL/PLLR factor management during PLL configuration this feature
  *         is only available in STM32F410xx/STM32F446xx/STM32F469xx/STM32F479xx/STM32F412Zx/STM32F412Vx/STM32F412Rx/STM32F412Cx devices
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8003e28:	b580      	push	{r7, lr}
 8003e2a:	b086      	sub	sp, #24
 8003e2c:	af00      	add	r7, sp, #0
 8003e2e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8003e30:	687b      	ldr	r3, [r7, #4]
 8003e32:	2b00      	cmp	r3, #0
 8003e34:	d101      	bne.n	8003e3a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8003e36:	2301      	movs	r3, #1
 8003e38:	e28d      	b.n	8004356 <HAL_RCC_OscConfig+0x52e>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8003e3a:	687b      	ldr	r3, [r7, #4]
 8003e3c:	681b      	ldr	r3, [r3, #0]
 8003e3e:	f003 0301 	and.w	r3, r3, #1
 8003e42:	2b00      	cmp	r3, #0
 8003e44:	f000 8083 	beq.w	8003f4e <HAL_RCC_OscConfig+0x126>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 8003e48:	4b94      	ldr	r3, [pc, #592]	@ (800409c <HAL_RCC_OscConfig+0x274>)
 8003e4a:	689b      	ldr	r3, [r3, #8]
 8003e4c:	f003 030c 	and.w	r3, r3, #12
 8003e50:	2b04      	cmp	r3, #4
 8003e52:	d019      	beq.n	8003e88 <HAL_RCC_OscConfig+0x60>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 8003e54:	4b91      	ldr	r3, [pc, #580]	@ (800409c <HAL_RCC_OscConfig+0x274>)
 8003e56:	689b      	ldr	r3, [r3, #8]
 8003e58:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 8003e5c:	2b08      	cmp	r3, #8
 8003e5e:	d106      	bne.n	8003e6e <HAL_RCC_OscConfig+0x46>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 8003e60:	4b8e      	ldr	r3, [pc, #568]	@ (800409c <HAL_RCC_OscConfig+0x274>)
 8003e62:	685b      	ldr	r3, [r3, #4]
 8003e64:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8003e68:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8003e6c:	d00c      	beq.n	8003e88 <HAL_RCC_OscConfig+0x60>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8003e6e:	4b8b      	ldr	r3, [pc, #556]	@ (800409c <HAL_RCC_OscConfig+0x274>)
 8003e70:	689b      	ldr	r3, [r3, #8]
 8003e72:	f003 030c 	and.w	r3, r3, #12
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 8003e76:	2b0c      	cmp	r3, #12
 8003e78:	d112      	bne.n	8003ea0 <HAL_RCC_OscConfig+0x78>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8003e7a:	4b88      	ldr	r3, [pc, #544]	@ (800409c <HAL_RCC_OscConfig+0x274>)
 8003e7c:	685b      	ldr	r3, [r3, #4]
 8003e7e:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8003e82:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8003e86:	d10b      	bne.n	8003ea0 <HAL_RCC_OscConfig+0x78>
#else
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
#endif /* STM32F446xx */
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003e88:	4b84      	ldr	r3, [pc, #528]	@ (800409c <HAL_RCC_OscConfig+0x274>)
 8003e8a:	681b      	ldr	r3, [r3, #0]
 8003e8c:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003e90:	2b00      	cmp	r3, #0
 8003e92:	d05b      	beq.n	8003f4c <HAL_RCC_OscConfig+0x124>
 8003e94:	687b      	ldr	r3, [r7, #4]
 8003e96:	685b      	ldr	r3, [r3, #4]
 8003e98:	2b00      	cmp	r3, #0
 8003e9a:	d157      	bne.n	8003f4c <HAL_RCC_OscConfig+0x124>
      {
        return HAL_ERROR;
 8003e9c:	2301      	movs	r3, #1
 8003e9e:	e25a      	b.n	8004356 <HAL_RCC_OscConfig+0x52e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003ea0:	687b      	ldr	r3, [r7, #4]
 8003ea2:	685b      	ldr	r3, [r3, #4]
 8003ea4:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8003ea8:	d106      	bne.n	8003eb8 <HAL_RCC_OscConfig+0x90>
 8003eaa:	4b7c      	ldr	r3, [pc, #496]	@ (800409c <HAL_RCC_OscConfig+0x274>)
 8003eac:	681b      	ldr	r3, [r3, #0]
 8003eae:	4a7b      	ldr	r2, [pc, #492]	@ (800409c <HAL_RCC_OscConfig+0x274>)
 8003eb0:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8003eb4:	6013      	str	r3, [r2, #0]
 8003eb6:	e01d      	b.n	8003ef4 <HAL_RCC_OscConfig+0xcc>
 8003eb8:	687b      	ldr	r3, [r7, #4]
 8003eba:	685b      	ldr	r3, [r3, #4]
 8003ebc:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8003ec0:	d10c      	bne.n	8003edc <HAL_RCC_OscConfig+0xb4>
 8003ec2:	4b76      	ldr	r3, [pc, #472]	@ (800409c <HAL_RCC_OscConfig+0x274>)
 8003ec4:	681b      	ldr	r3, [r3, #0]
 8003ec6:	4a75      	ldr	r2, [pc, #468]	@ (800409c <HAL_RCC_OscConfig+0x274>)
 8003ec8:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8003ecc:	6013      	str	r3, [r2, #0]
 8003ece:	4b73      	ldr	r3, [pc, #460]	@ (800409c <HAL_RCC_OscConfig+0x274>)
 8003ed0:	681b      	ldr	r3, [r3, #0]
 8003ed2:	4a72      	ldr	r2, [pc, #456]	@ (800409c <HAL_RCC_OscConfig+0x274>)
 8003ed4:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8003ed8:	6013      	str	r3, [r2, #0]
 8003eda:	e00b      	b.n	8003ef4 <HAL_RCC_OscConfig+0xcc>
 8003edc:	4b6f      	ldr	r3, [pc, #444]	@ (800409c <HAL_RCC_OscConfig+0x274>)
 8003ede:	681b      	ldr	r3, [r3, #0]
 8003ee0:	4a6e      	ldr	r2, [pc, #440]	@ (800409c <HAL_RCC_OscConfig+0x274>)
 8003ee2:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8003ee6:	6013      	str	r3, [r2, #0]
 8003ee8:	4b6c      	ldr	r3, [pc, #432]	@ (800409c <HAL_RCC_OscConfig+0x274>)
 8003eea:	681b      	ldr	r3, [r3, #0]
 8003eec:	4a6b      	ldr	r2, [pc, #428]	@ (800409c <HAL_RCC_OscConfig+0x274>)
 8003eee:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8003ef2:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8003ef4:	687b      	ldr	r3, [r7, #4]
 8003ef6:	685b      	ldr	r3, [r3, #4]
 8003ef8:	2b00      	cmp	r3, #0
 8003efa:	d013      	beq.n	8003f24 <HAL_RCC_OscConfig+0xfc>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003efc:	f7fe f94c 	bl	8002198 <HAL_GetTick>
 8003f00:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003f02:	e008      	b.n	8003f16 <HAL_RCC_OscConfig+0xee>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8003f04:	f7fe f948 	bl	8002198 <HAL_GetTick>
 8003f08:	4602      	mov	r2, r0
 8003f0a:	693b      	ldr	r3, [r7, #16]
 8003f0c:	1ad3      	subs	r3, r2, r3
 8003f0e:	2b64      	cmp	r3, #100	@ 0x64
 8003f10:	d901      	bls.n	8003f16 <HAL_RCC_OscConfig+0xee>
          {
            return HAL_TIMEOUT;
 8003f12:	2303      	movs	r3, #3
 8003f14:	e21f      	b.n	8004356 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003f16:	4b61      	ldr	r3, [pc, #388]	@ (800409c <HAL_RCC_OscConfig+0x274>)
 8003f18:	681b      	ldr	r3, [r3, #0]
 8003f1a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003f1e:	2b00      	cmp	r3, #0
 8003f20:	d0f0      	beq.n	8003f04 <HAL_RCC_OscConfig+0xdc>
 8003f22:	e014      	b.n	8003f4e <HAL_RCC_OscConfig+0x126>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003f24:	f7fe f938 	bl	8002198 <HAL_GetTick>
 8003f28:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003f2a:	e008      	b.n	8003f3e <HAL_RCC_OscConfig+0x116>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8003f2c:	f7fe f934 	bl	8002198 <HAL_GetTick>
 8003f30:	4602      	mov	r2, r0
 8003f32:	693b      	ldr	r3, [r7, #16]
 8003f34:	1ad3      	subs	r3, r2, r3
 8003f36:	2b64      	cmp	r3, #100	@ 0x64
 8003f38:	d901      	bls.n	8003f3e <HAL_RCC_OscConfig+0x116>
          {
            return HAL_TIMEOUT;
 8003f3a:	2303      	movs	r3, #3
 8003f3c:	e20b      	b.n	8004356 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003f3e:	4b57      	ldr	r3, [pc, #348]	@ (800409c <HAL_RCC_OscConfig+0x274>)
 8003f40:	681b      	ldr	r3, [r3, #0]
 8003f42:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003f46:	2b00      	cmp	r3, #0
 8003f48:	d1f0      	bne.n	8003f2c <HAL_RCC_OscConfig+0x104>
 8003f4a:	e000      	b.n	8003f4e <HAL_RCC_OscConfig+0x126>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003f4c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8003f4e:	687b      	ldr	r3, [r7, #4]
 8003f50:	681b      	ldr	r3, [r3, #0]
 8003f52:	f003 0302 	and.w	r3, r3, #2
 8003f56:	2b00      	cmp	r3, #0
 8003f58:	d06f      	beq.n	800403a <HAL_RCC_OscConfig+0x212>
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 8003f5a:	4b50      	ldr	r3, [pc, #320]	@ (800409c <HAL_RCC_OscConfig+0x274>)
 8003f5c:	689b      	ldr	r3, [r3, #8]
 8003f5e:	f003 030c 	and.w	r3, r3, #12
 8003f62:	2b00      	cmp	r3, #0
 8003f64:	d017      	beq.n	8003f96 <HAL_RCC_OscConfig+0x16e>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 8003f66:	4b4d      	ldr	r3, [pc, #308]	@ (800409c <HAL_RCC_OscConfig+0x274>)
 8003f68:	689b      	ldr	r3, [r3, #8]
 8003f6a:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 8003f6e:	2b08      	cmp	r3, #8
 8003f70:	d105      	bne.n	8003f7e <HAL_RCC_OscConfig+0x156>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 8003f72:	4b4a      	ldr	r3, [pc, #296]	@ (800409c <HAL_RCC_OscConfig+0x274>)
 8003f74:	685b      	ldr	r3, [r3, #4]
 8003f76:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8003f7a:	2b00      	cmp	r3, #0
 8003f7c:	d00b      	beq.n	8003f96 <HAL_RCC_OscConfig+0x16e>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8003f7e:	4b47      	ldr	r3, [pc, #284]	@ (800409c <HAL_RCC_OscConfig+0x274>)
 8003f80:	689b      	ldr	r3, [r3, #8]
 8003f82:	f003 030c 	and.w	r3, r3, #12
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 8003f86:	2b0c      	cmp	r3, #12
 8003f88:	d11c      	bne.n	8003fc4 <HAL_RCC_OscConfig+0x19c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8003f8a:	4b44      	ldr	r3, [pc, #272]	@ (800409c <HAL_RCC_OscConfig+0x274>)
 8003f8c:	685b      	ldr	r3, [r3, #4]
 8003f8e:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8003f92:	2b00      	cmp	r3, #0
 8003f94:	d116      	bne.n	8003fc4 <HAL_RCC_OscConfig+0x19c>
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
#endif /* STM32F446xx */
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003f96:	4b41      	ldr	r3, [pc, #260]	@ (800409c <HAL_RCC_OscConfig+0x274>)
 8003f98:	681b      	ldr	r3, [r3, #0]
 8003f9a:	f003 0302 	and.w	r3, r3, #2
 8003f9e:	2b00      	cmp	r3, #0
 8003fa0:	d005      	beq.n	8003fae <HAL_RCC_OscConfig+0x186>
 8003fa2:	687b      	ldr	r3, [r7, #4]
 8003fa4:	68db      	ldr	r3, [r3, #12]
 8003fa6:	2b01      	cmp	r3, #1
 8003fa8:	d001      	beq.n	8003fae <HAL_RCC_OscConfig+0x186>
      {
        return HAL_ERROR;
 8003faa:	2301      	movs	r3, #1
 8003fac:	e1d3      	b.n	8004356 <HAL_RCC_OscConfig+0x52e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003fae:	4b3b      	ldr	r3, [pc, #236]	@ (800409c <HAL_RCC_OscConfig+0x274>)
 8003fb0:	681b      	ldr	r3, [r3, #0]
 8003fb2:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8003fb6:	687b      	ldr	r3, [r7, #4]
 8003fb8:	691b      	ldr	r3, [r3, #16]
 8003fba:	00db      	lsls	r3, r3, #3
 8003fbc:	4937      	ldr	r1, [pc, #220]	@ (800409c <HAL_RCC_OscConfig+0x274>)
 8003fbe:	4313      	orrs	r3, r2
 8003fc0:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003fc2:	e03a      	b.n	800403a <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8003fc4:	687b      	ldr	r3, [r7, #4]
 8003fc6:	68db      	ldr	r3, [r3, #12]
 8003fc8:	2b00      	cmp	r3, #0
 8003fca:	d020      	beq.n	800400e <HAL_RCC_OscConfig+0x1e6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8003fcc:	4b34      	ldr	r3, [pc, #208]	@ (80040a0 <HAL_RCC_OscConfig+0x278>)
 8003fce:	2201      	movs	r2, #1
 8003fd0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003fd2:	f7fe f8e1 	bl	8002198 <HAL_GetTick>
 8003fd6:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003fd8:	e008      	b.n	8003fec <HAL_RCC_OscConfig+0x1c4>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8003fda:	f7fe f8dd 	bl	8002198 <HAL_GetTick>
 8003fde:	4602      	mov	r2, r0
 8003fe0:	693b      	ldr	r3, [r7, #16]
 8003fe2:	1ad3      	subs	r3, r2, r3
 8003fe4:	2b02      	cmp	r3, #2
 8003fe6:	d901      	bls.n	8003fec <HAL_RCC_OscConfig+0x1c4>
          {
            return HAL_TIMEOUT;
 8003fe8:	2303      	movs	r3, #3
 8003fea:	e1b4      	b.n	8004356 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003fec:	4b2b      	ldr	r3, [pc, #172]	@ (800409c <HAL_RCC_OscConfig+0x274>)
 8003fee:	681b      	ldr	r3, [r3, #0]
 8003ff0:	f003 0302 	and.w	r3, r3, #2
 8003ff4:	2b00      	cmp	r3, #0
 8003ff6:	d0f0      	beq.n	8003fda <HAL_RCC_OscConfig+0x1b2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003ff8:	4b28      	ldr	r3, [pc, #160]	@ (800409c <HAL_RCC_OscConfig+0x274>)
 8003ffa:	681b      	ldr	r3, [r3, #0]
 8003ffc:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8004000:	687b      	ldr	r3, [r7, #4]
 8004002:	691b      	ldr	r3, [r3, #16]
 8004004:	00db      	lsls	r3, r3, #3
 8004006:	4925      	ldr	r1, [pc, #148]	@ (800409c <HAL_RCC_OscConfig+0x274>)
 8004008:	4313      	orrs	r3, r2
 800400a:	600b      	str	r3, [r1, #0]
 800400c:	e015      	b.n	800403a <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800400e:	4b24      	ldr	r3, [pc, #144]	@ (80040a0 <HAL_RCC_OscConfig+0x278>)
 8004010:	2200      	movs	r2, #0
 8004012:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004014:	f7fe f8c0 	bl	8002198 <HAL_GetTick>
 8004018:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800401a:	e008      	b.n	800402e <HAL_RCC_OscConfig+0x206>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800401c:	f7fe f8bc 	bl	8002198 <HAL_GetTick>
 8004020:	4602      	mov	r2, r0
 8004022:	693b      	ldr	r3, [r7, #16]
 8004024:	1ad3      	subs	r3, r2, r3
 8004026:	2b02      	cmp	r3, #2
 8004028:	d901      	bls.n	800402e <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 800402a:	2303      	movs	r3, #3
 800402c:	e193      	b.n	8004356 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800402e:	4b1b      	ldr	r3, [pc, #108]	@ (800409c <HAL_RCC_OscConfig+0x274>)
 8004030:	681b      	ldr	r3, [r3, #0]
 8004032:	f003 0302 	and.w	r3, r3, #2
 8004036:	2b00      	cmp	r3, #0
 8004038:	d1f0      	bne.n	800401c <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800403a:	687b      	ldr	r3, [r7, #4]
 800403c:	681b      	ldr	r3, [r3, #0]
 800403e:	f003 0308 	and.w	r3, r3, #8
 8004042:	2b00      	cmp	r3, #0
 8004044:	d036      	beq.n	80040b4 <HAL_RCC_OscConfig+0x28c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8004046:	687b      	ldr	r3, [r7, #4]
 8004048:	695b      	ldr	r3, [r3, #20]
 800404a:	2b00      	cmp	r3, #0
 800404c:	d016      	beq.n	800407c <HAL_RCC_OscConfig+0x254>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800404e:	4b15      	ldr	r3, [pc, #84]	@ (80040a4 <HAL_RCC_OscConfig+0x27c>)
 8004050:	2201      	movs	r2, #1
 8004052:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004054:	f7fe f8a0 	bl	8002198 <HAL_GetTick>
 8004058:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800405a:	e008      	b.n	800406e <HAL_RCC_OscConfig+0x246>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800405c:	f7fe f89c 	bl	8002198 <HAL_GetTick>
 8004060:	4602      	mov	r2, r0
 8004062:	693b      	ldr	r3, [r7, #16]
 8004064:	1ad3      	subs	r3, r2, r3
 8004066:	2b02      	cmp	r3, #2
 8004068:	d901      	bls.n	800406e <HAL_RCC_OscConfig+0x246>
        {
          return HAL_TIMEOUT;
 800406a:	2303      	movs	r3, #3
 800406c:	e173      	b.n	8004356 <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800406e:	4b0b      	ldr	r3, [pc, #44]	@ (800409c <HAL_RCC_OscConfig+0x274>)
 8004070:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8004072:	f003 0302 	and.w	r3, r3, #2
 8004076:	2b00      	cmp	r3, #0
 8004078:	d0f0      	beq.n	800405c <HAL_RCC_OscConfig+0x234>
 800407a:	e01b      	b.n	80040b4 <HAL_RCC_OscConfig+0x28c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800407c:	4b09      	ldr	r3, [pc, #36]	@ (80040a4 <HAL_RCC_OscConfig+0x27c>)
 800407e:	2200      	movs	r2, #0
 8004080:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004082:	f7fe f889 	bl	8002198 <HAL_GetTick>
 8004086:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8004088:	e00e      	b.n	80040a8 <HAL_RCC_OscConfig+0x280>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800408a:	f7fe f885 	bl	8002198 <HAL_GetTick>
 800408e:	4602      	mov	r2, r0
 8004090:	693b      	ldr	r3, [r7, #16]
 8004092:	1ad3      	subs	r3, r2, r3
 8004094:	2b02      	cmp	r3, #2
 8004096:	d907      	bls.n	80040a8 <HAL_RCC_OscConfig+0x280>
        {
          return HAL_TIMEOUT;
 8004098:	2303      	movs	r3, #3
 800409a:	e15c      	b.n	8004356 <HAL_RCC_OscConfig+0x52e>
 800409c:	40023800 	.word	0x40023800
 80040a0:	42470000 	.word	0x42470000
 80040a4:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80040a8:	4b8a      	ldr	r3, [pc, #552]	@ (80042d4 <HAL_RCC_OscConfig+0x4ac>)
 80040aa:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80040ac:	f003 0302 	and.w	r3, r3, #2
 80040b0:	2b00      	cmp	r3, #0
 80040b2:	d1ea      	bne.n	800408a <HAL_RCC_OscConfig+0x262>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80040b4:	687b      	ldr	r3, [r7, #4]
 80040b6:	681b      	ldr	r3, [r3, #0]
 80040b8:	f003 0304 	and.w	r3, r3, #4
 80040bc:	2b00      	cmp	r3, #0
 80040be:	f000 8097 	beq.w	80041f0 <HAL_RCC_OscConfig+0x3c8>
  {
    FlagStatus       pwrclkchanged = RESET;
 80040c2:	2300      	movs	r3, #0
 80040c4:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80040c6:	4b83      	ldr	r3, [pc, #524]	@ (80042d4 <HAL_RCC_OscConfig+0x4ac>)
 80040c8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80040ca:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80040ce:	2b00      	cmp	r3, #0
 80040d0:	d10f      	bne.n	80040f2 <HAL_RCC_OscConfig+0x2ca>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80040d2:	2300      	movs	r3, #0
 80040d4:	60bb      	str	r3, [r7, #8]
 80040d6:	4b7f      	ldr	r3, [pc, #508]	@ (80042d4 <HAL_RCC_OscConfig+0x4ac>)
 80040d8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80040da:	4a7e      	ldr	r2, [pc, #504]	@ (80042d4 <HAL_RCC_OscConfig+0x4ac>)
 80040dc:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80040e0:	6413      	str	r3, [r2, #64]	@ 0x40
 80040e2:	4b7c      	ldr	r3, [pc, #496]	@ (80042d4 <HAL_RCC_OscConfig+0x4ac>)
 80040e4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80040e6:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80040ea:	60bb      	str	r3, [r7, #8]
 80040ec:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80040ee:	2301      	movs	r3, #1
 80040f0:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80040f2:	4b79      	ldr	r3, [pc, #484]	@ (80042d8 <HAL_RCC_OscConfig+0x4b0>)
 80040f4:	681b      	ldr	r3, [r3, #0]
 80040f6:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80040fa:	2b00      	cmp	r3, #0
 80040fc:	d118      	bne.n	8004130 <HAL_RCC_OscConfig+0x308>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80040fe:	4b76      	ldr	r3, [pc, #472]	@ (80042d8 <HAL_RCC_OscConfig+0x4b0>)
 8004100:	681b      	ldr	r3, [r3, #0]
 8004102:	4a75      	ldr	r2, [pc, #468]	@ (80042d8 <HAL_RCC_OscConfig+0x4b0>)
 8004104:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8004108:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800410a:	f7fe f845 	bl	8002198 <HAL_GetTick>
 800410e:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004110:	e008      	b.n	8004124 <HAL_RCC_OscConfig+0x2fc>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004112:	f7fe f841 	bl	8002198 <HAL_GetTick>
 8004116:	4602      	mov	r2, r0
 8004118:	693b      	ldr	r3, [r7, #16]
 800411a:	1ad3      	subs	r3, r2, r3
 800411c:	2b02      	cmp	r3, #2
 800411e:	d901      	bls.n	8004124 <HAL_RCC_OscConfig+0x2fc>
        {
          return HAL_TIMEOUT;
 8004120:	2303      	movs	r3, #3
 8004122:	e118      	b.n	8004356 <HAL_RCC_OscConfig+0x52e>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004124:	4b6c      	ldr	r3, [pc, #432]	@ (80042d8 <HAL_RCC_OscConfig+0x4b0>)
 8004126:	681b      	ldr	r3, [r3, #0]
 8004128:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800412c:	2b00      	cmp	r3, #0
 800412e:	d0f0      	beq.n	8004112 <HAL_RCC_OscConfig+0x2ea>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8004130:	687b      	ldr	r3, [r7, #4]
 8004132:	689b      	ldr	r3, [r3, #8]
 8004134:	2b01      	cmp	r3, #1
 8004136:	d106      	bne.n	8004146 <HAL_RCC_OscConfig+0x31e>
 8004138:	4b66      	ldr	r3, [pc, #408]	@ (80042d4 <HAL_RCC_OscConfig+0x4ac>)
 800413a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800413c:	4a65      	ldr	r2, [pc, #404]	@ (80042d4 <HAL_RCC_OscConfig+0x4ac>)
 800413e:	f043 0301 	orr.w	r3, r3, #1
 8004142:	6713      	str	r3, [r2, #112]	@ 0x70
 8004144:	e01c      	b.n	8004180 <HAL_RCC_OscConfig+0x358>
 8004146:	687b      	ldr	r3, [r7, #4]
 8004148:	689b      	ldr	r3, [r3, #8]
 800414a:	2b05      	cmp	r3, #5
 800414c:	d10c      	bne.n	8004168 <HAL_RCC_OscConfig+0x340>
 800414e:	4b61      	ldr	r3, [pc, #388]	@ (80042d4 <HAL_RCC_OscConfig+0x4ac>)
 8004150:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004152:	4a60      	ldr	r2, [pc, #384]	@ (80042d4 <HAL_RCC_OscConfig+0x4ac>)
 8004154:	f043 0304 	orr.w	r3, r3, #4
 8004158:	6713      	str	r3, [r2, #112]	@ 0x70
 800415a:	4b5e      	ldr	r3, [pc, #376]	@ (80042d4 <HAL_RCC_OscConfig+0x4ac>)
 800415c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800415e:	4a5d      	ldr	r2, [pc, #372]	@ (80042d4 <HAL_RCC_OscConfig+0x4ac>)
 8004160:	f043 0301 	orr.w	r3, r3, #1
 8004164:	6713      	str	r3, [r2, #112]	@ 0x70
 8004166:	e00b      	b.n	8004180 <HAL_RCC_OscConfig+0x358>
 8004168:	4b5a      	ldr	r3, [pc, #360]	@ (80042d4 <HAL_RCC_OscConfig+0x4ac>)
 800416a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800416c:	4a59      	ldr	r2, [pc, #356]	@ (80042d4 <HAL_RCC_OscConfig+0x4ac>)
 800416e:	f023 0301 	bic.w	r3, r3, #1
 8004172:	6713      	str	r3, [r2, #112]	@ 0x70
 8004174:	4b57      	ldr	r3, [pc, #348]	@ (80042d4 <HAL_RCC_OscConfig+0x4ac>)
 8004176:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004178:	4a56      	ldr	r2, [pc, #344]	@ (80042d4 <HAL_RCC_OscConfig+0x4ac>)
 800417a:	f023 0304 	bic.w	r3, r3, #4
 800417e:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8004180:	687b      	ldr	r3, [r7, #4]
 8004182:	689b      	ldr	r3, [r3, #8]
 8004184:	2b00      	cmp	r3, #0
 8004186:	d015      	beq.n	80041b4 <HAL_RCC_OscConfig+0x38c>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004188:	f7fe f806 	bl	8002198 <HAL_GetTick>
 800418c:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800418e:	e00a      	b.n	80041a6 <HAL_RCC_OscConfig+0x37e>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8004190:	f7fe f802 	bl	8002198 <HAL_GetTick>
 8004194:	4602      	mov	r2, r0
 8004196:	693b      	ldr	r3, [r7, #16]
 8004198:	1ad3      	subs	r3, r2, r3
 800419a:	f241 3288 	movw	r2, #5000	@ 0x1388
 800419e:	4293      	cmp	r3, r2
 80041a0:	d901      	bls.n	80041a6 <HAL_RCC_OscConfig+0x37e>
        {
          return HAL_TIMEOUT;
 80041a2:	2303      	movs	r3, #3
 80041a4:	e0d7      	b.n	8004356 <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80041a6:	4b4b      	ldr	r3, [pc, #300]	@ (80042d4 <HAL_RCC_OscConfig+0x4ac>)
 80041a8:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80041aa:	f003 0302 	and.w	r3, r3, #2
 80041ae:	2b00      	cmp	r3, #0
 80041b0:	d0ee      	beq.n	8004190 <HAL_RCC_OscConfig+0x368>
 80041b2:	e014      	b.n	80041de <HAL_RCC_OscConfig+0x3b6>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80041b4:	f7fd fff0 	bl	8002198 <HAL_GetTick>
 80041b8:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80041ba:	e00a      	b.n	80041d2 <HAL_RCC_OscConfig+0x3aa>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80041bc:	f7fd ffec 	bl	8002198 <HAL_GetTick>
 80041c0:	4602      	mov	r2, r0
 80041c2:	693b      	ldr	r3, [r7, #16]
 80041c4:	1ad3      	subs	r3, r2, r3
 80041c6:	f241 3288 	movw	r2, #5000	@ 0x1388
 80041ca:	4293      	cmp	r3, r2
 80041cc:	d901      	bls.n	80041d2 <HAL_RCC_OscConfig+0x3aa>
        {
          return HAL_TIMEOUT;
 80041ce:	2303      	movs	r3, #3
 80041d0:	e0c1      	b.n	8004356 <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80041d2:	4b40      	ldr	r3, [pc, #256]	@ (80042d4 <HAL_RCC_OscConfig+0x4ac>)
 80041d4:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80041d6:	f003 0302 	and.w	r3, r3, #2
 80041da:	2b00      	cmp	r3, #0
 80041dc:	d1ee      	bne.n	80041bc <HAL_RCC_OscConfig+0x394>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80041de:	7dfb      	ldrb	r3, [r7, #23]
 80041e0:	2b01      	cmp	r3, #1
 80041e2:	d105      	bne.n	80041f0 <HAL_RCC_OscConfig+0x3c8>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80041e4:	4b3b      	ldr	r3, [pc, #236]	@ (80042d4 <HAL_RCC_OscConfig+0x4ac>)
 80041e6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80041e8:	4a3a      	ldr	r2, [pc, #232]	@ (80042d4 <HAL_RCC_OscConfig+0x4ac>)
 80041ea:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80041ee:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80041f0:	687b      	ldr	r3, [r7, #4]
 80041f2:	699b      	ldr	r3, [r3, #24]
 80041f4:	2b00      	cmp	r3, #0
 80041f6:	f000 80ad 	beq.w	8004354 <HAL_RCC_OscConfig+0x52c>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 80041fa:	4b36      	ldr	r3, [pc, #216]	@ (80042d4 <HAL_RCC_OscConfig+0x4ac>)
 80041fc:	689b      	ldr	r3, [r3, #8]
 80041fe:	f003 030c 	and.w	r3, r3, #12
 8004202:	2b08      	cmp	r3, #8
 8004204:	d060      	beq.n	80042c8 <HAL_RCC_OscConfig+0x4a0>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8004206:	687b      	ldr	r3, [r7, #4]
 8004208:	699b      	ldr	r3, [r3, #24]
 800420a:	2b02      	cmp	r3, #2
 800420c:	d145      	bne.n	800429a <HAL_RCC_OscConfig+0x472>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800420e:	4b33      	ldr	r3, [pc, #204]	@ (80042dc <HAL_RCC_OscConfig+0x4b4>)
 8004210:	2200      	movs	r2, #0
 8004212:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004214:	f7fd ffc0 	bl	8002198 <HAL_GetTick>
 8004218:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800421a:	e008      	b.n	800422e <HAL_RCC_OscConfig+0x406>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800421c:	f7fd ffbc 	bl	8002198 <HAL_GetTick>
 8004220:	4602      	mov	r2, r0
 8004222:	693b      	ldr	r3, [r7, #16]
 8004224:	1ad3      	subs	r3, r2, r3
 8004226:	2b02      	cmp	r3, #2
 8004228:	d901      	bls.n	800422e <HAL_RCC_OscConfig+0x406>
          {
            return HAL_TIMEOUT;
 800422a:	2303      	movs	r3, #3
 800422c:	e093      	b.n	8004356 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800422e:	4b29      	ldr	r3, [pc, #164]	@ (80042d4 <HAL_RCC_OscConfig+0x4ac>)
 8004230:	681b      	ldr	r3, [r3, #0]
 8004232:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004236:	2b00      	cmp	r3, #0
 8004238:	d1f0      	bne.n	800421c <HAL_RCC_OscConfig+0x3f4>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 800423a:	687b      	ldr	r3, [r7, #4]
 800423c:	69da      	ldr	r2, [r3, #28]
 800423e:	687b      	ldr	r3, [r7, #4]
 8004240:	6a1b      	ldr	r3, [r3, #32]
 8004242:	431a      	orrs	r2, r3
 8004244:	687b      	ldr	r3, [r7, #4]
 8004246:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004248:	019b      	lsls	r3, r3, #6
 800424a:	431a      	orrs	r2, r3
 800424c:	687b      	ldr	r3, [r7, #4]
 800424e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004250:	085b      	lsrs	r3, r3, #1
 8004252:	3b01      	subs	r3, #1
 8004254:	041b      	lsls	r3, r3, #16
 8004256:	431a      	orrs	r2, r3
 8004258:	687b      	ldr	r3, [r7, #4]
 800425a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800425c:	061b      	lsls	r3, r3, #24
 800425e:	431a      	orrs	r2, r3
 8004260:	687b      	ldr	r3, [r7, #4]
 8004262:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004264:	071b      	lsls	r3, r3, #28
 8004266:	491b      	ldr	r1, [pc, #108]	@ (80042d4 <HAL_RCC_OscConfig+0x4ac>)
 8004268:	4313      	orrs	r3, r2
 800426a:	604b      	str	r3, [r1, #4]
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)                       | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)        | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)                       | \
                                 (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800426c:	4b1b      	ldr	r3, [pc, #108]	@ (80042dc <HAL_RCC_OscConfig+0x4b4>)
 800426e:	2201      	movs	r2, #1
 8004270:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004272:	f7fd ff91 	bl	8002198 <HAL_GetTick>
 8004276:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004278:	e008      	b.n	800428c <HAL_RCC_OscConfig+0x464>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800427a:	f7fd ff8d 	bl	8002198 <HAL_GetTick>
 800427e:	4602      	mov	r2, r0
 8004280:	693b      	ldr	r3, [r7, #16]
 8004282:	1ad3      	subs	r3, r2, r3
 8004284:	2b02      	cmp	r3, #2
 8004286:	d901      	bls.n	800428c <HAL_RCC_OscConfig+0x464>
          {
            return HAL_TIMEOUT;
 8004288:	2303      	movs	r3, #3
 800428a:	e064      	b.n	8004356 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800428c:	4b11      	ldr	r3, [pc, #68]	@ (80042d4 <HAL_RCC_OscConfig+0x4ac>)
 800428e:	681b      	ldr	r3, [r3, #0]
 8004290:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004294:	2b00      	cmp	r3, #0
 8004296:	d0f0      	beq.n	800427a <HAL_RCC_OscConfig+0x452>
 8004298:	e05c      	b.n	8004354 <HAL_RCC_OscConfig+0x52c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800429a:	4b10      	ldr	r3, [pc, #64]	@ (80042dc <HAL_RCC_OscConfig+0x4b4>)
 800429c:	2200      	movs	r2, #0
 800429e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80042a0:	f7fd ff7a 	bl	8002198 <HAL_GetTick>
 80042a4:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80042a6:	e008      	b.n	80042ba <HAL_RCC_OscConfig+0x492>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80042a8:	f7fd ff76 	bl	8002198 <HAL_GetTick>
 80042ac:	4602      	mov	r2, r0
 80042ae:	693b      	ldr	r3, [r7, #16]
 80042b0:	1ad3      	subs	r3, r2, r3
 80042b2:	2b02      	cmp	r3, #2
 80042b4:	d901      	bls.n	80042ba <HAL_RCC_OscConfig+0x492>
          {
            return HAL_TIMEOUT;
 80042b6:	2303      	movs	r3, #3
 80042b8:	e04d      	b.n	8004356 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80042ba:	4b06      	ldr	r3, [pc, #24]	@ (80042d4 <HAL_RCC_OscConfig+0x4ac>)
 80042bc:	681b      	ldr	r3, [r3, #0]
 80042be:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80042c2:	2b00      	cmp	r3, #0
 80042c4:	d1f0      	bne.n	80042a8 <HAL_RCC_OscConfig+0x480>
 80042c6:	e045      	b.n	8004354 <HAL_RCC_OscConfig+0x52c>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80042c8:	687b      	ldr	r3, [r7, #4]
 80042ca:	699b      	ldr	r3, [r3, #24]
 80042cc:	2b01      	cmp	r3, #1
 80042ce:	d107      	bne.n	80042e0 <HAL_RCC_OscConfig+0x4b8>
      {
        return HAL_ERROR;
 80042d0:	2301      	movs	r3, #1
 80042d2:	e040      	b.n	8004356 <HAL_RCC_OscConfig+0x52e>
 80042d4:	40023800 	.word	0x40023800
 80042d8:	40007000 	.word	0x40007000
 80042dc:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 80042e0:	4b1f      	ldr	r3, [pc, #124]	@ (8004360 <HAL_RCC_OscConfig+0x538>)
 80042e2:	685b      	ldr	r3, [r3, #4]
 80042e4:	60fb      	str	r3, [r7, #12]
#if defined (RCC_PLLCFGR_PLLR)
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80042e6:	687b      	ldr	r3, [r7, #4]
 80042e8:	699b      	ldr	r3, [r3, #24]
 80042ea:	2b01      	cmp	r3, #1
 80042ec:	d030      	beq.n	8004350 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80042ee:	68fb      	ldr	r3, [r7, #12]
 80042f0:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 80042f4:	687b      	ldr	r3, [r7, #4]
 80042f6:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80042f8:	429a      	cmp	r2, r3
 80042fa:	d129      	bne.n	8004350 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80042fc:	68fb      	ldr	r3, [r7, #12]
 80042fe:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 8004302:	687b      	ldr	r3, [r7, #4]
 8004304:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004306:	429a      	cmp	r2, r3
 8004308:	d122      	bne.n	8004350 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 800430a:	68fa      	ldr	r2, [r7, #12]
 800430c:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 8004310:	4013      	ands	r3, r2
 8004312:	687a      	ldr	r2, [r7, #4]
 8004314:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 8004316:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8004318:	4293      	cmp	r3, r2
 800431a:	d119      	bne.n	8004350 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 800431c:	68fb      	ldr	r3, [r7, #12]
 800431e:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 8004322:	687b      	ldr	r3, [r7, #4]
 8004324:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004326:	085b      	lsrs	r3, r3, #1
 8004328:	3b01      	subs	r3, #1
 800432a:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 800432c:	429a      	cmp	r2, r3
 800432e:	d10f      	bne.n	8004350 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8004330:	68fb      	ldr	r3, [r7, #12]
 8004332:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 8004336:	687b      	ldr	r3, [r7, #4]
 8004338:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800433a:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 800433c:	429a      	cmp	r2, r3
 800433e:	d107      	bne.n	8004350 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
 8004340:	68fb      	ldr	r3, [r7, #12]
 8004342:	f003 42e0 	and.w	r2, r3, #1879048192	@ 0x70000000
 8004346:	687b      	ldr	r3, [r7, #4]
 8004348:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800434a:	071b      	lsls	r3, r3, #28
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 800434c:	429a      	cmp	r2, r3
 800434e:	d001      	beq.n	8004354 <HAL_RCC_OscConfig+0x52c>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
#endif
        {
          return HAL_ERROR;
 8004350:	2301      	movs	r3, #1
 8004352:	e000      	b.n	8004356 <HAL_RCC_OscConfig+0x52e>
        }
      }
    }
  }
  return HAL_OK;
 8004354:	2300      	movs	r3, #0
}
 8004356:	4618      	mov	r0, r3
 8004358:	3718      	adds	r7, #24
 800435a:	46bd      	mov	sp, r7
 800435c:	bd80      	pop	{r7, pc}
 800435e:	bf00      	nop
 8004360:	40023800 	.word	0x40023800

08004364 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8004364:	b580      	push	{r7, lr}
 8004366:	b082      	sub	sp, #8
 8004368:	af00      	add	r7, sp, #0
 800436a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800436c:	687b      	ldr	r3, [r7, #4]
 800436e:	2b00      	cmp	r3, #0
 8004370:	d101      	bne.n	8004376 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8004372:	2301      	movs	r3, #1
 8004374:	e041      	b.n	80043fa <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8004376:	687b      	ldr	r3, [r7, #4]
 8004378:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800437c:	b2db      	uxtb	r3, r3
 800437e:	2b00      	cmp	r3, #0
 8004380:	d106      	bne.n	8004390 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8004382:	687b      	ldr	r3, [r7, #4]
 8004384:	2200      	movs	r2, #0
 8004386:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800438a:	6878      	ldr	r0, [r7, #4]
 800438c:	f7fd fc4c 	bl	8001c28 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004390:	687b      	ldr	r3, [r7, #4]
 8004392:	2202      	movs	r2, #2
 8004394:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8004398:	687b      	ldr	r3, [r7, #4]
 800439a:	681a      	ldr	r2, [r3, #0]
 800439c:	687b      	ldr	r3, [r7, #4]
 800439e:	3304      	adds	r3, #4
 80043a0:	4619      	mov	r1, r3
 80043a2:	4610      	mov	r0, r2
 80043a4:	f000 fcb2 	bl	8004d0c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80043a8:	687b      	ldr	r3, [r7, #4]
 80043aa:	2201      	movs	r2, #1
 80043ac:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80043b0:	687b      	ldr	r3, [r7, #4]
 80043b2:	2201      	movs	r2, #1
 80043b4:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 80043b8:	687b      	ldr	r3, [r7, #4]
 80043ba:	2201      	movs	r2, #1
 80043bc:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 80043c0:	687b      	ldr	r3, [r7, #4]
 80043c2:	2201      	movs	r2, #1
 80043c4:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 80043c8:	687b      	ldr	r3, [r7, #4]
 80043ca:	2201      	movs	r2, #1
 80043cc:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80043d0:	687b      	ldr	r3, [r7, #4]
 80043d2:	2201      	movs	r2, #1
 80043d4:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 80043d8:	687b      	ldr	r3, [r7, #4]
 80043da:	2201      	movs	r2, #1
 80043dc:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 80043e0:	687b      	ldr	r3, [r7, #4]
 80043e2:	2201      	movs	r2, #1
 80043e4:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 80043e8:	687b      	ldr	r3, [r7, #4]
 80043ea:	2201      	movs	r2, #1
 80043ec:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80043f0:	687b      	ldr	r3, [r7, #4]
 80043f2:	2201      	movs	r2, #1
 80043f4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 80043f8:	2300      	movs	r3, #0
}
 80043fa:	4618      	mov	r0, r3
 80043fc:	3708      	adds	r7, #8
 80043fe:	46bd      	mov	sp, r7
 8004400:	bd80      	pop	{r7, pc}
	...

08004404 <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 8004404:	b480      	push	{r7}
 8004406:	b085      	sub	sp, #20
 8004408:	af00      	add	r7, sp, #0
 800440a:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 800440c:	687b      	ldr	r3, [r7, #4]
 800440e:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8004412:	b2db      	uxtb	r3, r3
 8004414:	2b01      	cmp	r3, #1
 8004416:	d001      	beq.n	800441c <HAL_TIM_Base_Start+0x18>
  {
    return HAL_ERROR;
 8004418:	2301      	movs	r3, #1
 800441a:	e046      	b.n	80044aa <HAL_TIM_Base_Start+0xa6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800441c:	687b      	ldr	r3, [r7, #4]
 800441e:	2202      	movs	r2, #2
 8004420:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004424:	687b      	ldr	r3, [r7, #4]
 8004426:	681b      	ldr	r3, [r3, #0]
 8004428:	4a23      	ldr	r2, [pc, #140]	@ (80044b8 <HAL_TIM_Base_Start+0xb4>)
 800442a:	4293      	cmp	r3, r2
 800442c:	d022      	beq.n	8004474 <HAL_TIM_Base_Start+0x70>
 800442e:	687b      	ldr	r3, [r7, #4]
 8004430:	681b      	ldr	r3, [r3, #0]
 8004432:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8004436:	d01d      	beq.n	8004474 <HAL_TIM_Base_Start+0x70>
 8004438:	687b      	ldr	r3, [r7, #4]
 800443a:	681b      	ldr	r3, [r3, #0]
 800443c:	4a1f      	ldr	r2, [pc, #124]	@ (80044bc <HAL_TIM_Base_Start+0xb8>)
 800443e:	4293      	cmp	r3, r2
 8004440:	d018      	beq.n	8004474 <HAL_TIM_Base_Start+0x70>
 8004442:	687b      	ldr	r3, [r7, #4]
 8004444:	681b      	ldr	r3, [r3, #0]
 8004446:	4a1e      	ldr	r2, [pc, #120]	@ (80044c0 <HAL_TIM_Base_Start+0xbc>)
 8004448:	4293      	cmp	r3, r2
 800444a:	d013      	beq.n	8004474 <HAL_TIM_Base_Start+0x70>
 800444c:	687b      	ldr	r3, [r7, #4]
 800444e:	681b      	ldr	r3, [r3, #0]
 8004450:	4a1c      	ldr	r2, [pc, #112]	@ (80044c4 <HAL_TIM_Base_Start+0xc0>)
 8004452:	4293      	cmp	r3, r2
 8004454:	d00e      	beq.n	8004474 <HAL_TIM_Base_Start+0x70>
 8004456:	687b      	ldr	r3, [r7, #4]
 8004458:	681b      	ldr	r3, [r3, #0]
 800445a:	4a1b      	ldr	r2, [pc, #108]	@ (80044c8 <HAL_TIM_Base_Start+0xc4>)
 800445c:	4293      	cmp	r3, r2
 800445e:	d009      	beq.n	8004474 <HAL_TIM_Base_Start+0x70>
 8004460:	687b      	ldr	r3, [r7, #4]
 8004462:	681b      	ldr	r3, [r3, #0]
 8004464:	4a19      	ldr	r2, [pc, #100]	@ (80044cc <HAL_TIM_Base_Start+0xc8>)
 8004466:	4293      	cmp	r3, r2
 8004468:	d004      	beq.n	8004474 <HAL_TIM_Base_Start+0x70>
 800446a:	687b      	ldr	r3, [r7, #4]
 800446c:	681b      	ldr	r3, [r3, #0]
 800446e:	4a18      	ldr	r2, [pc, #96]	@ (80044d0 <HAL_TIM_Base_Start+0xcc>)
 8004470:	4293      	cmp	r3, r2
 8004472:	d111      	bne.n	8004498 <HAL_TIM_Base_Start+0x94>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8004474:	687b      	ldr	r3, [r7, #4]
 8004476:	681b      	ldr	r3, [r3, #0]
 8004478:	689b      	ldr	r3, [r3, #8]
 800447a:	f003 0307 	and.w	r3, r3, #7
 800447e:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004480:	68fb      	ldr	r3, [r7, #12]
 8004482:	2b06      	cmp	r3, #6
 8004484:	d010      	beq.n	80044a8 <HAL_TIM_Base_Start+0xa4>
    {
      __HAL_TIM_ENABLE(htim);
 8004486:	687b      	ldr	r3, [r7, #4]
 8004488:	681b      	ldr	r3, [r3, #0]
 800448a:	681a      	ldr	r2, [r3, #0]
 800448c:	687b      	ldr	r3, [r7, #4]
 800448e:	681b      	ldr	r3, [r3, #0]
 8004490:	f042 0201 	orr.w	r2, r2, #1
 8004494:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004496:	e007      	b.n	80044a8 <HAL_TIM_Base_Start+0xa4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8004498:	687b      	ldr	r3, [r7, #4]
 800449a:	681b      	ldr	r3, [r3, #0]
 800449c:	681a      	ldr	r2, [r3, #0]
 800449e:	687b      	ldr	r3, [r7, #4]
 80044a0:	681b      	ldr	r3, [r3, #0]
 80044a2:	f042 0201 	orr.w	r2, r2, #1
 80044a6:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80044a8:	2300      	movs	r3, #0
}
 80044aa:	4618      	mov	r0, r3
 80044ac:	3714      	adds	r7, #20
 80044ae:	46bd      	mov	sp, r7
 80044b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044b4:	4770      	bx	lr
 80044b6:	bf00      	nop
 80044b8:	40010000 	.word	0x40010000
 80044bc:	40000400 	.word	0x40000400
 80044c0:	40000800 	.word	0x40000800
 80044c4:	40000c00 	.word	0x40000c00
 80044c8:	40010400 	.word	0x40010400
 80044cc:	40014000 	.word	0x40014000
 80044d0:	40001800 	.word	0x40001800

080044d4 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 80044d4:	b480      	push	{r7}
 80044d6:	b085      	sub	sp, #20
 80044d8:	af00      	add	r7, sp, #0
 80044da:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 80044dc:	687b      	ldr	r3, [r7, #4]
 80044de:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80044e2:	b2db      	uxtb	r3, r3
 80044e4:	2b01      	cmp	r3, #1
 80044e6:	d001      	beq.n	80044ec <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 80044e8:	2301      	movs	r3, #1
 80044ea:	e04e      	b.n	800458a <HAL_TIM_Base_Start_IT+0xb6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80044ec:	687b      	ldr	r3, [r7, #4]
 80044ee:	2202      	movs	r2, #2
 80044f0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 80044f4:	687b      	ldr	r3, [r7, #4]
 80044f6:	681b      	ldr	r3, [r3, #0]
 80044f8:	68da      	ldr	r2, [r3, #12]
 80044fa:	687b      	ldr	r3, [r7, #4]
 80044fc:	681b      	ldr	r3, [r3, #0]
 80044fe:	f042 0201 	orr.w	r2, r2, #1
 8004502:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004504:	687b      	ldr	r3, [r7, #4]
 8004506:	681b      	ldr	r3, [r3, #0]
 8004508:	4a23      	ldr	r2, [pc, #140]	@ (8004598 <HAL_TIM_Base_Start_IT+0xc4>)
 800450a:	4293      	cmp	r3, r2
 800450c:	d022      	beq.n	8004554 <HAL_TIM_Base_Start_IT+0x80>
 800450e:	687b      	ldr	r3, [r7, #4]
 8004510:	681b      	ldr	r3, [r3, #0]
 8004512:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8004516:	d01d      	beq.n	8004554 <HAL_TIM_Base_Start_IT+0x80>
 8004518:	687b      	ldr	r3, [r7, #4]
 800451a:	681b      	ldr	r3, [r3, #0]
 800451c:	4a1f      	ldr	r2, [pc, #124]	@ (800459c <HAL_TIM_Base_Start_IT+0xc8>)
 800451e:	4293      	cmp	r3, r2
 8004520:	d018      	beq.n	8004554 <HAL_TIM_Base_Start_IT+0x80>
 8004522:	687b      	ldr	r3, [r7, #4]
 8004524:	681b      	ldr	r3, [r3, #0]
 8004526:	4a1e      	ldr	r2, [pc, #120]	@ (80045a0 <HAL_TIM_Base_Start_IT+0xcc>)
 8004528:	4293      	cmp	r3, r2
 800452a:	d013      	beq.n	8004554 <HAL_TIM_Base_Start_IT+0x80>
 800452c:	687b      	ldr	r3, [r7, #4]
 800452e:	681b      	ldr	r3, [r3, #0]
 8004530:	4a1c      	ldr	r2, [pc, #112]	@ (80045a4 <HAL_TIM_Base_Start_IT+0xd0>)
 8004532:	4293      	cmp	r3, r2
 8004534:	d00e      	beq.n	8004554 <HAL_TIM_Base_Start_IT+0x80>
 8004536:	687b      	ldr	r3, [r7, #4]
 8004538:	681b      	ldr	r3, [r3, #0]
 800453a:	4a1b      	ldr	r2, [pc, #108]	@ (80045a8 <HAL_TIM_Base_Start_IT+0xd4>)
 800453c:	4293      	cmp	r3, r2
 800453e:	d009      	beq.n	8004554 <HAL_TIM_Base_Start_IT+0x80>
 8004540:	687b      	ldr	r3, [r7, #4]
 8004542:	681b      	ldr	r3, [r3, #0]
 8004544:	4a19      	ldr	r2, [pc, #100]	@ (80045ac <HAL_TIM_Base_Start_IT+0xd8>)
 8004546:	4293      	cmp	r3, r2
 8004548:	d004      	beq.n	8004554 <HAL_TIM_Base_Start_IT+0x80>
 800454a:	687b      	ldr	r3, [r7, #4]
 800454c:	681b      	ldr	r3, [r3, #0]
 800454e:	4a18      	ldr	r2, [pc, #96]	@ (80045b0 <HAL_TIM_Base_Start_IT+0xdc>)
 8004550:	4293      	cmp	r3, r2
 8004552:	d111      	bne.n	8004578 <HAL_TIM_Base_Start_IT+0xa4>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8004554:	687b      	ldr	r3, [r7, #4]
 8004556:	681b      	ldr	r3, [r3, #0]
 8004558:	689b      	ldr	r3, [r3, #8]
 800455a:	f003 0307 	and.w	r3, r3, #7
 800455e:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004560:	68fb      	ldr	r3, [r7, #12]
 8004562:	2b06      	cmp	r3, #6
 8004564:	d010      	beq.n	8004588 <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 8004566:	687b      	ldr	r3, [r7, #4]
 8004568:	681b      	ldr	r3, [r3, #0]
 800456a:	681a      	ldr	r2, [r3, #0]
 800456c:	687b      	ldr	r3, [r7, #4]
 800456e:	681b      	ldr	r3, [r3, #0]
 8004570:	f042 0201 	orr.w	r2, r2, #1
 8004574:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004576:	e007      	b.n	8004588 <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8004578:	687b      	ldr	r3, [r7, #4]
 800457a:	681b      	ldr	r3, [r3, #0]
 800457c:	681a      	ldr	r2, [r3, #0]
 800457e:	687b      	ldr	r3, [r7, #4]
 8004580:	681b      	ldr	r3, [r3, #0]
 8004582:	f042 0201 	orr.w	r2, r2, #1
 8004586:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8004588:	2300      	movs	r3, #0
}
 800458a:	4618      	mov	r0, r3
 800458c:	3714      	adds	r7, #20
 800458e:	46bd      	mov	sp, r7
 8004590:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004594:	4770      	bx	lr
 8004596:	bf00      	nop
 8004598:	40010000 	.word	0x40010000
 800459c:	40000400 	.word	0x40000400
 80045a0:	40000800 	.word	0x40000800
 80045a4:	40000c00 	.word	0x40000c00
 80045a8:	40010400 	.word	0x40010400
 80045ac:	40014000 	.word	0x40014000
 80045b0:	40001800 	.word	0x40001800

080045b4 <HAL_TIM_OC_Init>:
  *         Ex: call @ref HAL_TIM_OC_DeInit() before HAL_TIM_OC_Init()
  * @param  htim TIM Output Compare handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OC_Init(TIM_HandleTypeDef *htim)
{
 80045b4:	b580      	push	{r7, lr}
 80045b6:	b082      	sub	sp, #8
 80045b8:	af00      	add	r7, sp, #0
 80045ba:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80045bc:	687b      	ldr	r3, [r7, #4]
 80045be:	2b00      	cmp	r3, #0
 80045c0:	d101      	bne.n	80045c6 <HAL_TIM_OC_Init+0x12>
  {
    return HAL_ERROR;
 80045c2:	2301      	movs	r3, #1
 80045c4:	e041      	b.n	800464a <HAL_TIM_OC_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80045c6:	687b      	ldr	r3, [r7, #4]
 80045c8:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80045cc:	b2db      	uxtb	r3, r3
 80045ce:	2b00      	cmp	r3, #0
 80045d0:	d106      	bne.n	80045e0 <HAL_TIM_OC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80045d2:	687b      	ldr	r3, [r7, #4]
 80045d4:	2200      	movs	r2, #0
 80045d6:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->OC_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_OC_MspInit(htim);
 80045da:	6878      	ldr	r0, [r7, #4]
 80045dc:	f000 f839 	bl	8004652 <HAL_TIM_OC_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80045e0:	687b      	ldr	r3, [r7, #4]
 80045e2:	2202      	movs	r2, #2
 80045e4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Init the base time for the Output Compare */
  TIM_Base_SetConfig(htim->Instance,  &htim->Init);
 80045e8:	687b      	ldr	r3, [r7, #4]
 80045ea:	681a      	ldr	r2, [r3, #0]
 80045ec:	687b      	ldr	r3, [r7, #4]
 80045ee:	3304      	adds	r3, #4
 80045f0:	4619      	mov	r1, r3
 80045f2:	4610      	mov	r0, r2
 80045f4:	f000 fb8a 	bl	8004d0c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80045f8:	687b      	ldr	r3, [r7, #4]
 80045fa:	2201      	movs	r2, #1
 80045fc:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004600:	687b      	ldr	r3, [r7, #4]
 8004602:	2201      	movs	r2, #1
 8004604:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8004608:	687b      	ldr	r3, [r7, #4]
 800460a:	2201      	movs	r2, #1
 800460c:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8004610:	687b      	ldr	r3, [r7, #4]
 8004612:	2201      	movs	r2, #1
 8004614:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8004618:	687b      	ldr	r3, [r7, #4]
 800461a:	2201      	movs	r2, #1
 800461c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004620:	687b      	ldr	r3, [r7, #4]
 8004622:	2201      	movs	r2, #1
 8004624:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8004628:	687b      	ldr	r3, [r7, #4]
 800462a:	2201      	movs	r2, #1
 800462c:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8004630:	687b      	ldr	r3, [r7, #4]
 8004632:	2201      	movs	r2, #1
 8004634:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8004638:	687b      	ldr	r3, [r7, #4]
 800463a:	2201      	movs	r2, #1
 800463c:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8004640:	687b      	ldr	r3, [r7, #4]
 8004642:	2201      	movs	r2, #1
 8004644:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8004648:	2300      	movs	r3, #0
}
 800464a:	4618      	mov	r0, r3
 800464c:	3708      	adds	r7, #8
 800464e:	46bd      	mov	sp, r7
 8004650:	bd80      	pop	{r7, pc}

08004652 <HAL_TIM_OC_MspInit>:
  * @brief  Initializes the TIM Output Compare MSP.
  * @param  htim TIM Output Compare handle
  * @retval None
  */
__weak void HAL_TIM_OC_MspInit(TIM_HandleTypeDef *htim)
{
 8004652:	b480      	push	{r7}
 8004654:	b083      	sub	sp, #12
 8004656:	af00      	add	r7, sp, #0
 8004658:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_MspInit could be implemented in the user file
   */
}
 800465a:	bf00      	nop
 800465c:	370c      	adds	r7, #12
 800465e:	46bd      	mov	sp, r7
 8004660:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004664:	4770      	bx	lr
	...

08004668 <HAL_TIM_OC_Start_IT>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OC_Start_IT(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8004668:	b580      	push	{r7, lr}
 800466a:	b084      	sub	sp, #16
 800466c:	af00      	add	r7, sp, #0
 800466e:	6078      	str	r0, [r7, #4]
 8004670:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8004672:	2300      	movs	r3, #0
 8004674:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8004676:	683b      	ldr	r3, [r7, #0]
 8004678:	2b00      	cmp	r3, #0
 800467a:	d109      	bne.n	8004690 <HAL_TIM_OC_Start_IT+0x28>
 800467c:	687b      	ldr	r3, [r7, #4]
 800467e:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8004682:	b2db      	uxtb	r3, r3
 8004684:	2b01      	cmp	r3, #1
 8004686:	bf14      	ite	ne
 8004688:	2301      	movne	r3, #1
 800468a:	2300      	moveq	r3, #0
 800468c:	b2db      	uxtb	r3, r3
 800468e:	e022      	b.n	80046d6 <HAL_TIM_OC_Start_IT+0x6e>
 8004690:	683b      	ldr	r3, [r7, #0]
 8004692:	2b04      	cmp	r3, #4
 8004694:	d109      	bne.n	80046aa <HAL_TIM_OC_Start_IT+0x42>
 8004696:	687b      	ldr	r3, [r7, #4]
 8004698:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 800469c:	b2db      	uxtb	r3, r3
 800469e:	2b01      	cmp	r3, #1
 80046a0:	bf14      	ite	ne
 80046a2:	2301      	movne	r3, #1
 80046a4:	2300      	moveq	r3, #0
 80046a6:	b2db      	uxtb	r3, r3
 80046a8:	e015      	b.n	80046d6 <HAL_TIM_OC_Start_IT+0x6e>
 80046aa:	683b      	ldr	r3, [r7, #0]
 80046ac:	2b08      	cmp	r3, #8
 80046ae:	d109      	bne.n	80046c4 <HAL_TIM_OC_Start_IT+0x5c>
 80046b0:	687b      	ldr	r3, [r7, #4]
 80046b2:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 80046b6:	b2db      	uxtb	r3, r3
 80046b8:	2b01      	cmp	r3, #1
 80046ba:	bf14      	ite	ne
 80046bc:	2301      	movne	r3, #1
 80046be:	2300      	moveq	r3, #0
 80046c0:	b2db      	uxtb	r3, r3
 80046c2:	e008      	b.n	80046d6 <HAL_TIM_OC_Start_IT+0x6e>
 80046c4:	687b      	ldr	r3, [r7, #4]
 80046c6:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80046ca:	b2db      	uxtb	r3, r3
 80046cc:	2b01      	cmp	r3, #1
 80046ce:	bf14      	ite	ne
 80046d0:	2301      	movne	r3, #1
 80046d2:	2300      	moveq	r3, #0
 80046d4:	b2db      	uxtb	r3, r3
 80046d6:	2b00      	cmp	r3, #0
 80046d8:	d001      	beq.n	80046de <HAL_TIM_OC_Start_IT+0x76>
  {
    return HAL_ERROR;
 80046da:	2301      	movs	r3, #1
 80046dc:	e0c7      	b.n	800486e <HAL_TIM_OC_Start_IT+0x206>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 80046de:	683b      	ldr	r3, [r7, #0]
 80046e0:	2b00      	cmp	r3, #0
 80046e2:	d104      	bne.n	80046ee <HAL_TIM_OC_Start_IT+0x86>
 80046e4:	687b      	ldr	r3, [r7, #4]
 80046e6:	2202      	movs	r2, #2
 80046e8:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 80046ec:	e013      	b.n	8004716 <HAL_TIM_OC_Start_IT+0xae>
 80046ee:	683b      	ldr	r3, [r7, #0]
 80046f0:	2b04      	cmp	r3, #4
 80046f2:	d104      	bne.n	80046fe <HAL_TIM_OC_Start_IT+0x96>
 80046f4:	687b      	ldr	r3, [r7, #4]
 80046f6:	2202      	movs	r2, #2
 80046f8:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 80046fc:	e00b      	b.n	8004716 <HAL_TIM_OC_Start_IT+0xae>
 80046fe:	683b      	ldr	r3, [r7, #0]
 8004700:	2b08      	cmp	r3, #8
 8004702:	d104      	bne.n	800470e <HAL_TIM_OC_Start_IT+0xa6>
 8004704:	687b      	ldr	r3, [r7, #4]
 8004706:	2202      	movs	r2, #2
 8004708:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 800470c:	e003      	b.n	8004716 <HAL_TIM_OC_Start_IT+0xae>
 800470e:	687b      	ldr	r3, [r7, #4]
 8004710:	2202      	movs	r2, #2
 8004712:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  switch (Channel)
 8004716:	683b      	ldr	r3, [r7, #0]
 8004718:	2b0c      	cmp	r3, #12
 800471a:	d841      	bhi.n	80047a0 <HAL_TIM_OC_Start_IT+0x138>
 800471c:	a201      	add	r2, pc, #4	@ (adr r2, 8004724 <HAL_TIM_OC_Start_IT+0xbc>)
 800471e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004722:	bf00      	nop
 8004724:	08004759 	.word	0x08004759
 8004728:	080047a1 	.word	0x080047a1
 800472c:	080047a1 	.word	0x080047a1
 8004730:	080047a1 	.word	0x080047a1
 8004734:	0800476b 	.word	0x0800476b
 8004738:	080047a1 	.word	0x080047a1
 800473c:	080047a1 	.word	0x080047a1
 8004740:	080047a1 	.word	0x080047a1
 8004744:	0800477d 	.word	0x0800477d
 8004748:	080047a1 	.word	0x080047a1
 800474c:	080047a1 	.word	0x080047a1
 8004750:	080047a1 	.word	0x080047a1
 8004754:	0800478f 	.word	0x0800478f
  {
    case TIM_CHANNEL_1:
    {
      /* Enable the TIM Capture/Compare 1 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC1);
 8004758:	687b      	ldr	r3, [r7, #4]
 800475a:	681b      	ldr	r3, [r3, #0]
 800475c:	68da      	ldr	r2, [r3, #12]
 800475e:	687b      	ldr	r3, [r7, #4]
 8004760:	681b      	ldr	r3, [r3, #0]
 8004762:	f042 0202 	orr.w	r2, r2, #2
 8004766:	60da      	str	r2, [r3, #12]
      break;
 8004768:	e01d      	b.n	80047a6 <HAL_TIM_OC_Start_IT+0x13e>
    }

    case TIM_CHANNEL_2:
    {
      /* Enable the TIM Capture/Compare 2 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC2);
 800476a:	687b      	ldr	r3, [r7, #4]
 800476c:	681b      	ldr	r3, [r3, #0]
 800476e:	68da      	ldr	r2, [r3, #12]
 8004770:	687b      	ldr	r3, [r7, #4]
 8004772:	681b      	ldr	r3, [r3, #0]
 8004774:	f042 0204 	orr.w	r2, r2, #4
 8004778:	60da      	str	r2, [r3, #12]
      break;
 800477a:	e014      	b.n	80047a6 <HAL_TIM_OC_Start_IT+0x13e>
    }

    case TIM_CHANNEL_3:
    {
      /* Enable the TIM Capture/Compare 3 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC3);
 800477c:	687b      	ldr	r3, [r7, #4]
 800477e:	681b      	ldr	r3, [r3, #0]
 8004780:	68da      	ldr	r2, [r3, #12]
 8004782:	687b      	ldr	r3, [r7, #4]
 8004784:	681b      	ldr	r3, [r3, #0]
 8004786:	f042 0208 	orr.w	r2, r2, #8
 800478a:	60da      	str	r2, [r3, #12]
      break;
 800478c:	e00b      	b.n	80047a6 <HAL_TIM_OC_Start_IT+0x13e>
    }

    case TIM_CHANNEL_4:
    {
      /* Enable the TIM Capture/Compare 4 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC4);
 800478e:	687b      	ldr	r3, [r7, #4]
 8004790:	681b      	ldr	r3, [r3, #0]
 8004792:	68da      	ldr	r2, [r3, #12]
 8004794:	687b      	ldr	r3, [r7, #4]
 8004796:	681b      	ldr	r3, [r3, #0]
 8004798:	f042 0210 	orr.w	r2, r2, #16
 800479c:	60da      	str	r2, [r3, #12]
      break;
 800479e:	e002      	b.n	80047a6 <HAL_TIM_OC_Start_IT+0x13e>
    }

    default:
      status = HAL_ERROR;
 80047a0:	2301      	movs	r3, #1
 80047a2:	73fb      	strb	r3, [r7, #15]
      break;
 80047a4:	bf00      	nop
  }

  if (status == HAL_OK)
 80047a6:	7bfb      	ldrb	r3, [r7, #15]
 80047a8:	2b00      	cmp	r3, #0
 80047aa:	d15f      	bne.n	800486c <HAL_TIM_OC_Start_IT+0x204>
  {
    /* Enable the Output compare channel */
    TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 80047ac:	687b      	ldr	r3, [r7, #4]
 80047ae:	681b      	ldr	r3, [r3, #0]
 80047b0:	2201      	movs	r2, #1
 80047b2:	6839      	ldr	r1, [r7, #0]
 80047b4:	4618      	mov	r0, r3
 80047b6:	f000 fd9f 	bl	80052f8 <TIM_CCxChannelCmd>

    if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 80047ba:	687b      	ldr	r3, [r7, #4]
 80047bc:	681b      	ldr	r3, [r3, #0]
 80047be:	4a2e      	ldr	r2, [pc, #184]	@ (8004878 <HAL_TIM_OC_Start_IT+0x210>)
 80047c0:	4293      	cmp	r3, r2
 80047c2:	d004      	beq.n	80047ce <HAL_TIM_OC_Start_IT+0x166>
 80047c4:	687b      	ldr	r3, [r7, #4]
 80047c6:	681b      	ldr	r3, [r3, #0]
 80047c8:	4a2c      	ldr	r2, [pc, #176]	@ (800487c <HAL_TIM_OC_Start_IT+0x214>)
 80047ca:	4293      	cmp	r3, r2
 80047cc:	d101      	bne.n	80047d2 <HAL_TIM_OC_Start_IT+0x16a>
 80047ce:	2301      	movs	r3, #1
 80047d0:	e000      	b.n	80047d4 <HAL_TIM_OC_Start_IT+0x16c>
 80047d2:	2300      	movs	r3, #0
 80047d4:	2b00      	cmp	r3, #0
 80047d6:	d007      	beq.n	80047e8 <HAL_TIM_OC_Start_IT+0x180>
    {
      /* Enable the main output */
      __HAL_TIM_MOE_ENABLE(htim);
 80047d8:	687b      	ldr	r3, [r7, #4]
 80047da:	681b      	ldr	r3, [r3, #0]
 80047dc:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 80047de:	687b      	ldr	r3, [r7, #4]
 80047e0:	681b      	ldr	r3, [r3, #0]
 80047e2:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 80047e6:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
    if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80047e8:	687b      	ldr	r3, [r7, #4]
 80047ea:	681b      	ldr	r3, [r3, #0]
 80047ec:	4a22      	ldr	r2, [pc, #136]	@ (8004878 <HAL_TIM_OC_Start_IT+0x210>)
 80047ee:	4293      	cmp	r3, r2
 80047f0:	d022      	beq.n	8004838 <HAL_TIM_OC_Start_IT+0x1d0>
 80047f2:	687b      	ldr	r3, [r7, #4]
 80047f4:	681b      	ldr	r3, [r3, #0]
 80047f6:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80047fa:	d01d      	beq.n	8004838 <HAL_TIM_OC_Start_IT+0x1d0>
 80047fc:	687b      	ldr	r3, [r7, #4]
 80047fe:	681b      	ldr	r3, [r3, #0]
 8004800:	4a1f      	ldr	r2, [pc, #124]	@ (8004880 <HAL_TIM_OC_Start_IT+0x218>)
 8004802:	4293      	cmp	r3, r2
 8004804:	d018      	beq.n	8004838 <HAL_TIM_OC_Start_IT+0x1d0>
 8004806:	687b      	ldr	r3, [r7, #4]
 8004808:	681b      	ldr	r3, [r3, #0]
 800480a:	4a1e      	ldr	r2, [pc, #120]	@ (8004884 <HAL_TIM_OC_Start_IT+0x21c>)
 800480c:	4293      	cmp	r3, r2
 800480e:	d013      	beq.n	8004838 <HAL_TIM_OC_Start_IT+0x1d0>
 8004810:	687b      	ldr	r3, [r7, #4]
 8004812:	681b      	ldr	r3, [r3, #0]
 8004814:	4a1c      	ldr	r2, [pc, #112]	@ (8004888 <HAL_TIM_OC_Start_IT+0x220>)
 8004816:	4293      	cmp	r3, r2
 8004818:	d00e      	beq.n	8004838 <HAL_TIM_OC_Start_IT+0x1d0>
 800481a:	687b      	ldr	r3, [r7, #4]
 800481c:	681b      	ldr	r3, [r3, #0]
 800481e:	4a17      	ldr	r2, [pc, #92]	@ (800487c <HAL_TIM_OC_Start_IT+0x214>)
 8004820:	4293      	cmp	r3, r2
 8004822:	d009      	beq.n	8004838 <HAL_TIM_OC_Start_IT+0x1d0>
 8004824:	687b      	ldr	r3, [r7, #4]
 8004826:	681b      	ldr	r3, [r3, #0]
 8004828:	4a18      	ldr	r2, [pc, #96]	@ (800488c <HAL_TIM_OC_Start_IT+0x224>)
 800482a:	4293      	cmp	r3, r2
 800482c:	d004      	beq.n	8004838 <HAL_TIM_OC_Start_IT+0x1d0>
 800482e:	687b      	ldr	r3, [r7, #4]
 8004830:	681b      	ldr	r3, [r3, #0]
 8004832:	4a17      	ldr	r2, [pc, #92]	@ (8004890 <HAL_TIM_OC_Start_IT+0x228>)
 8004834:	4293      	cmp	r3, r2
 8004836:	d111      	bne.n	800485c <HAL_TIM_OC_Start_IT+0x1f4>
    {
      tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8004838:	687b      	ldr	r3, [r7, #4]
 800483a:	681b      	ldr	r3, [r3, #0]
 800483c:	689b      	ldr	r3, [r3, #8]
 800483e:	f003 0307 	and.w	r3, r3, #7
 8004842:	60bb      	str	r3, [r7, #8]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004844:	68bb      	ldr	r3, [r7, #8]
 8004846:	2b06      	cmp	r3, #6
 8004848:	d010      	beq.n	800486c <HAL_TIM_OC_Start_IT+0x204>
      {
        __HAL_TIM_ENABLE(htim);
 800484a:	687b      	ldr	r3, [r7, #4]
 800484c:	681b      	ldr	r3, [r3, #0]
 800484e:	681a      	ldr	r2, [r3, #0]
 8004850:	687b      	ldr	r3, [r7, #4]
 8004852:	681b      	ldr	r3, [r3, #0]
 8004854:	f042 0201 	orr.w	r2, r2, #1
 8004858:	601a      	str	r2, [r3, #0]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800485a:	e007      	b.n	800486c <HAL_TIM_OC_Start_IT+0x204>
      }
    }
    else
    {
      __HAL_TIM_ENABLE(htim);
 800485c:	687b      	ldr	r3, [r7, #4]
 800485e:	681b      	ldr	r3, [r3, #0]
 8004860:	681a      	ldr	r2, [r3, #0]
 8004862:	687b      	ldr	r3, [r7, #4]
 8004864:	681b      	ldr	r3, [r3, #0]
 8004866:	f042 0201 	orr.w	r2, r2, #1
 800486a:	601a      	str	r2, [r3, #0]
    }
  }

  /* Return function status */
  return status;
 800486c:	7bfb      	ldrb	r3, [r7, #15]
}
 800486e:	4618      	mov	r0, r3
 8004870:	3710      	adds	r7, #16
 8004872:	46bd      	mov	sp, r7
 8004874:	bd80      	pop	{r7, pc}
 8004876:	bf00      	nop
 8004878:	40010000 	.word	0x40010000
 800487c:	40010400 	.word	0x40010400
 8004880:	40000400 	.word	0x40000400
 8004884:	40000800 	.word	0x40000800
 8004888:	40000c00 	.word	0x40000c00
 800488c:	40014000 	.word	0x40014000
 8004890:	40001800 	.word	0x40001800

08004894 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8004894:	b580      	push	{r7, lr}
 8004896:	b084      	sub	sp, #16
 8004898:	af00      	add	r7, sp, #0
 800489a:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 800489c:	687b      	ldr	r3, [r7, #4]
 800489e:	681b      	ldr	r3, [r3, #0]
 80048a0:	68db      	ldr	r3, [r3, #12]
 80048a2:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 80048a4:	687b      	ldr	r3, [r7, #4]
 80048a6:	681b      	ldr	r3, [r3, #0]
 80048a8:	691b      	ldr	r3, [r3, #16]
 80048aa:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 80048ac:	68bb      	ldr	r3, [r7, #8]
 80048ae:	f003 0302 	and.w	r3, r3, #2
 80048b2:	2b00      	cmp	r3, #0
 80048b4:	d020      	beq.n	80048f8 <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 80048b6:	68fb      	ldr	r3, [r7, #12]
 80048b8:	f003 0302 	and.w	r3, r3, #2
 80048bc:	2b00      	cmp	r3, #0
 80048be:	d01b      	beq.n	80048f8 <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 80048c0:	687b      	ldr	r3, [r7, #4]
 80048c2:	681b      	ldr	r3, [r3, #0]
 80048c4:	f06f 0202 	mvn.w	r2, #2
 80048c8:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80048ca:	687b      	ldr	r3, [r7, #4]
 80048cc:	2201      	movs	r2, #1
 80048ce:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80048d0:	687b      	ldr	r3, [r7, #4]
 80048d2:	681b      	ldr	r3, [r3, #0]
 80048d4:	699b      	ldr	r3, [r3, #24]
 80048d6:	f003 0303 	and.w	r3, r3, #3
 80048da:	2b00      	cmp	r3, #0
 80048dc:	d003      	beq.n	80048e6 <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 80048de:	6878      	ldr	r0, [r7, #4]
 80048e0:	f000 f9f5 	bl	8004cce <HAL_TIM_IC_CaptureCallback>
 80048e4:	e005      	b.n	80048f2 <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 80048e6:	6878      	ldr	r0, [r7, #4]
 80048e8:	f000 f9e7 	bl	8004cba <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 80048ec:	6878      	ldr	r0, [r7, #4]
 80048ee:	f000 f9f8 	bl	8004ce2 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80048f2:	687b      	ldr	r3, [r7, #4]
 80048f4:	2200      	movs	r2, #0
 80048f6:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 80048f8:	68bb      	ldr	r3, [r7, #8]
 80048fa:	f003 0304 	and.w	r3, r3, #4
 80048fe:	2b00      	cmp	r3, #0
 8004900:	d020      	beq.n	8004944 <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 8004902:	68fb      	ldr	r3, [r7, #12]
 8004904:	f003 0304 	and.w	r3, r3, #4
 8004908:	2b00      	cmp	r3, #0
 800490a:	d01b      	beq.n	8004944 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 800490c:	687b      	ldr	r3, [r7, #4]
 800490e:	681b      	ldr	r3, [r3, #0]
 8004910:	f06f 0204 	mvn.w	r2, #4
 8004914:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8004916:	687b      	ldr	r3, [r7, #4]
 8004918:	2202      	movs	r2, #2
 800491a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 800491c:	687b      	ldr	r3, [r7, #4]
 800491e:	681b      	ldr	r3, [r3, #0]
 8004920:	699b      	ldr	r3, [r3, #24]
 8004922:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8004926:	2b00      	cmp	r3, #0
 8004928:	d003      	beq.n	8004932 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800492a:	6878      	ldr	r0, [r7, #4]
 800492c:	f000 f9cf 	bl	8004cce <HAL_TIM_IC_CaptureCallback>
 8004930:	e005      	b.n	800493e <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004932:	6878      	ldr	r0, [r7, #4]
 8004934:	f000 f9c1 	bl	8004cba <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004938:	6878      	ldr	r0, [r7, #4]
 800493a:	f000 f9d2 	bl	8004ce2 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800493e:	687b      	ldr	r3, [r7, #4]
 8004940:	2200      	movs	r2, #0
 8004942:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 8004944:	68bb      	ldr	r3, [r7, #8]
 8004946:	f003 0308 	and.w	r3, r3, #8
 800494a:	2b00      	cmp	r3, #0
 800494c:	d020      	beq.n	8004990 <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 800494e:	68fb      	ldr	r3, [r7, #12]
 8004950:	f003 0308 	and.w	r3, r3, #8
 8004954:	2b00      	cmp	r3, #0
 8004956:	d01b      	beq.n	8004990 <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 8004958:	687b      	ldr	r3, [r7, #4]
 800495a:	681b      	ldr	r3, [r3, #0]
 800495c:	f06f 0208 	mvn.w	r2, #8
 8004960:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8004962:	687b      	ldr	r3, [r7, #4]
 8004964:	2204      	movs	r2, #4
 8004966:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8004968:	687b      	ldr	r3, [r7, #4]
 800496a:	681b      	ldr	r3, [r3, #0]
 800496c:	69db      	ldr	r3, [r3, #28]
 800496e:	f003 0303 	and.w	r3, r3, #3
 8004972:	2b00      	cmp	r3, #0
 8004974:	d003      	beq.n	800497e <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004976:	6878      	ldr	r0, [r7, #4]
 8004978:	f000 f9a9 	bl	8004cce <HAL_TIM_IC_CaptureCallback>
 800497c:	e005      	b.n	800498a <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800497e:	6878      	ldr	r0, [r7, #4]
 8004980:	f000 f99b 	bl	8004cba <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004984:	6878      	ldr	r0, [r7, #4]
 8004986:	f000 f9ac 	bl	8004ce2 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800498a:	687b      	ldr	r3, [r7, #4]
 800498c:	2200      	movs	r2, #0
 800498e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 8004990:	68bb      	ldr	r3, [r7, #8]
 8004992:	f003 0310 	and.w	r3, r3, #16
 8004996:	2b00      	cmp	r3, #0
 8004998:	d020      	beq.n	80049dc <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 800499a:	68fb      	ldr	r3, [r7, #12]
 800499c:	f003 0310 	and.w	r3, r3, #16
 80049a0:	2b00      	cmp	r3, #0
 80049a2:	d01b      	beq.n	80049dc <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 80049a4:	687b      	ldr	r3, [r7, #4]
 80049a6:	681b      	ldr	r3, [r3, #0]
 80049a8:	f06f 0210 	mvn.w	r2, #16
 80049ac:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80049ae:	687b      	ldr	r3, [r7, #4]
 80049b0:	2208      	movs	r2, #8
 80049b2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80049b4:	687b      	ldr	r3, [r7, #4]
 80049b6:	681b      	ldr	r3, [r3, #0]
 80049b8:	69db      	ldr	r3, [r3, #28]
 80049ba:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80049be:	2b00      	cmp	r3, #0
 80049c0:	d003      	beq.n	80049ca <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80049c2:	6878      	ldr	r0, [r7, #4]
 80049c4:	f000 f983 	bl	8004cce <HAL_TIM_IC_CaptureCallback>
 80049c8:	e005      	b.n	80049d6 <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80049ca:	6878      	ldr	r0, [r7, #4]
 80049cc:	f000 f975 	bl	8004cba <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80049d0:	6878      	ldr	r0, [r7, #4]
 80049d2:	f000 f986 	bl	8004ce2 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80049d6:	687b      	ldr	r3, [r7, #4]
 80049d8:	2200      	movs	r2, #0
 80049da:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 80049dc:	68bb      	ldr	r3, [r7, #8]
 80049de:	f003 0301 	and.w	r3, r3, #1
 80049e2:	2b00      	cmp	r3, #0
 80049e4:	d00c      	beq.n	8004a00 <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 80049e6:	68fb      	ldr	r3, [r7, #12]
 80049e8:	f003 0301 	and.w	r3, r3, #1
 80049ec:	2b00      	cmp	r3, #0
 80049ee:	d007      	beq.n	8004a00 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 80049f0:	687b      	ldr	r3, [r7, #4]
 80049f2:	681b      	ldr	r3, [r3, #0]
 80049f4:	f06f 0201 	mvn.w	r2, #1
 80049f8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 80049fa:	6878      	ldr	r0, [r7, #4]
 80049fc:	f7fc ff82 	bl	8001904 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if ((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK))
 8004a00:	68bb      	ldr	r3, [r7, #8]
 8004a02:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004a06:	2b00      	cmp	r3, #0
 8004a08:	d00c      	beq.n	8004a24 <HAL_TIM_IRQHandler+0x190>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8004a0a:	68fb      	ldr	r3, [r7, #12]
 8004a0c:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004a10:	2b00      	cmp	r3, #0
 8004a12:	d007      	beq.n	8004a24 <HAL_TIM_IRQHandler+0x190>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK);
 8004a14:	687b      	ldr	r3, [r7, #4]
 8004a16:	681b      	ldr	r3, [r3, #0]
 8004a18:	f06f 0280 	mvn.w	r2, #128	@ 0x80
 8004a1c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8004a1e:	6878      	ldr	r0, [r7, #4]
 8004a20:	f000 fd68 	bl	80054f4 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 8004a24:	68bb      	ldr	r3, [r7, #8]
 8004a26:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004a2a:	2b00      	cmp	r3, #0
 8004a2c:	d00c      	beq.n	8004a48 <HAL_TIM_IRQHandler+0x1b4>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 8004a2e:	68fb      	ldr	r3, [r7, #12]
 8004a30:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004a34:	2b00      	cmp	r3, #0
 8004a36:	d007      	beq.n	8004a48 <HAL_TIM_IRQHandler+0x1b4>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 8004a38:	687b      	ldr	r3, [r7, #4]
 8004a3a:	681b      	ldr	r3, [r3, #0]
 8004a3c:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 8004a40:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8004a42:	6878      	ldr	r0, [r7, #4]
 8004a44:	f000 f957 	bl	8004cf6 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 8004a48:	68bb      	ldr	r3, [r7, #8]
 8004a4a:	f003 0320 	and.w	r3, r3, #32
 8004a4e:	2b00      	cmp	r3, #0
 8004a50:	d00c      	beq.n	8004a6c <HAL_TIM_IRQHandler+0x1d8>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 8004a52:	68fb      	ldr	r3, [r7, #12]
 8004a54:	f003 0320 	and.w	r3, r3, #32
 8004a58:	2b00      	cmp	r3, #0
 8004a5a:	d007      	beq.n	8004a6c <HAL_TIM_IRQHandler+0x1d8>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 8004a5c:	687b      	ldr	r3, [r7, #4]
 8004a5e:	681b      	ldr	r3, [r3, #0]
 8004a60:	f06f 0220 	mvn.w	r2, #32
 8004a64:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8004a66:	6878      	ldr	r0, [r7, #4]
 8004a68:	f000 fd3a 	bl	80054e0 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8004a6c:	bf00      	nop
 8004a6e:	3710      	adds	r7, #16
 8004a70:	46bd      	mov	sp, r7
 8004a72:	bd80      	pop	{r7, pc}

08004a74 <HAL_TIM_OC_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OC_ConfigChannel(TIM_HandleTypeDef *htim,
                                           const TIM_OC_InitTypeDef *sConfig,
                                           uint32_t Channel)
{
 8004a74:	b580      	push	{r7, lr}
 8004a76:	b086      	sub	sp, #24
 8004a78:	af00      	add	r7, sp, #0
 8004a7a:	60f8      	str	r0, [r7, #12]
 8004a7c:	60b9      	str	r1, [r7, #8]
 8004a7e:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8004a80:	2300      	movs	r3, #0
 8004a82:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_CHANNELS(Channel));
  assert_param(IS_TIM_OC_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));

  /* Process Locked */
  __HAL_LOCK(htim);
 8004a84:	68fb      	ldr	r3, [r7, #12]
 8004a86:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8004a8a:	2b01      	cmp	r3, #1
 8004a8c:	d101      	bne.n	8004a92 <HAL_TIM_OC_ConfigChannel+0x1e>
 8004a8e:	2302      	movs	r3, #2
 8004a90:	e048      	b.n	8004b24 <HAL_TIM_OC_ConfigChannel+0xb0>
 8004a92:	68fb      	ldr	r3, [r7, #12]
 8004a94:	2201      	movs	r2, #1
 8004a96:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  switch (Channel)
 8004a9a:	687b      	ldr	r3, [r7, #4]
 8004a9c:	2b0c      	cmp	r3, #12
 8004a9e:	d839      	bhi.n	8004b14 <HAL_TIM_OC_ConfigChannel+0xa0>
 8004aa0:	a201      	add	r2, pc, #4	@ (adr r2, 8004aa8 <HAL_TIM_OC_ConfigChannel+0x34>)
 8004aa2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004aa6:	bf00      	nop
 8004aa8:	08004add 	.word	0x08004add
 8004aac:	08004b15 	.word	0x08004b15
 8004ab0:	08004b15 	.word	0x08004b15
 8004ab4:	08004b15 	.word	0x08004b15
 8004ab8:	08004aeb 	.word	0x08004aeb
 8004abc:	08004b15 	.word	0x08004b15
 8004ac0:	08004b15 	.word	0x08004b15
 8004ac4:	08004b15 	.word	0x08004b15
 8004ac8:	08004af9 	.word	0x08004af9
 8004acc:	08004b15 	.word	0x08004b15
 8004ad0:	08004b15 	.word	0x08004b15
 8004ad4:	08004b15 	.word	0x08004b15
 8004ad8:	08004b07 	.word	0x08004b07
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 1 in Output Compare */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8004adc:	68fb      	ldr	r3, [r7, #12]
 8004ade:	681b      	ldr	r3, [r3, #0]
 8004ae0:	68b9      	ldr	r1, [r7, #8]
 8004ae2:	4618      	mov	r0, r3
 8004ae4:	f000 f9be 	bl	8004e64 <TIM_OC1_SetConfig>
      break;
 8004ae8:	e017      	b.n	8004b1a <HAL_TIM_OC_ConfigChannel+0xa6>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 2 in Output Compare */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8004aea:	68fb      	ldr	r3, [r7, #12]
 8004aec:	681b      	ldr	r3, [r3, #0]
 8004aee:	68b9      	ldr	r1, [r7, #8]
 8004af0:	4618      	mov	r0, r3
 8004af2:	f000 fa27 	bl	8004f44 <TIM_OC2_SetConfig>
      break;
 8004af6:	e010      	b.n	8004b1a <HAL_TIM_OC_ConfigChannel+0xa6>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 3 in Output Compare */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8004af8:	68fb      	ldr	r3, [r7, #12]
 8004afa:	681b      	ldr	r3, [r3, #0]
 8004afc:	68b9      	ldr	r1, [r7, #8]
 8004afe:	4618      	mov	r0, r3
 8004b00:	f000 fa96 	bl	8005030 <TIM_OC3_SetConfig>
      break;
 8004b04:	e009      	b.n	8004b1a <HAL_TIM_OC_ConfigChannel+0xa6>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 4 in Output Compare */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8004b06:	68fb      	ldr	r3, [r7, #12]
 8004b08:	681b      	ldr	r3, [r3, #0]
 8004b0a:	68b9      	ldr	r1, [r7, #8]
 8004b0c:	4618      	mov	r0, r3
 8004b0e:	f000 fb03 	bl	8005118 <TIM_OC4_SetConfig>
      break;
 8004b12:	e002      	b.n	8004b1a <HAL_TIM_OC_ConfigChannel+0xa6>
    }

    default:
      status = HAL_ERROR;
 8004b14:	2301      	movs	r3, #1
 8004b16:	75fb      	strb	r3, [r7, #23]
      break;
 8004b18:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8004b1a:	68fb      	ldr	r3, [r7, #12]
 8004b1c:	2200      	movs	r2, #0
 8004b1e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8004b22:	7dfb      	ldrb	r3, [r7, #23]
}
 8004b24:	4618      	mov	r0, r3
 8004b26:	3718      	adds	r7, #24
 8004b28:	46bd      	mov	sp, r7
 8004b2a:	bd80      	pop	{r7, pc}

08004b2c <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8004b2c:	b580      	push	{r7, lr}
 8004b2e:	b084      	sub	sp, #16
 8004b30:	af00      	add	r7, sp, #0
 8004b32:	6078      	str	r0, [r7, #4]
 8004b34:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8004b36:	2300      	movs	r3, #0
 8004b38:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8004b3a:	687b      	ldr	r3, [r7, #4]
 8004b3c:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8004b40:	2b01      	cmp	r3, #1
 8004b42:	d101      	bne.n	8004b48 <HAL_TIM_ConfigClockSource+0x1c>
 8004b44:	2302      	movs	r3, #2
 8004b46:	e0b4      	b.n	8004cb2 <HAL_TIM_ConfigClockSource+0x186>
 8004b48:	687b      	ldr	r3, [r7, #4]
 8004b4a:	2201      	movs	r2, #1
 8004b4c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8004b50:	687b      	ldr	r3, [r7, #4]
 8004b52:	2202      	movs	r2, #2
 8004b54:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8004b58:	687b      	ldr	r3, [r7, #4]
 8004b5a:	681b      	ldr	r3, [r3, #0]
 8004b5c:	689b      	ldr	r3, [r3, #8]
 8004b5e:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8004b60:	68bb      	ldr	r3, [r7, #8]
 8004b62:	f023 0377 	bic.w	r3, r3, #119	@ 0x77
 8004b66:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8004b68:	68bb      	ldr	r3, [r7, #8]
 8004b6a:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8004b6e:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8004b70:	687b      	ldr	r3, [r7, #4]
 8004b72:	681b      	ldr	r3, [r3, #0]
 8004b74:	68ba      	ldr	r2, [r7, #8]
 8004b76:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8004b78:	683b      	ldr	r3, [r7, #0]
 8004b7a:	681b      	ldr	r3, [r3, #0]
 8004b7c:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8004b80:	d03e      	beq.n	8004c00 <HAL_TIM_ConfigClockSource+0xd4>
 8004b82:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8004b86:	f200 8087 	bhi.w	8004c98 <HAL_TIM_ConfigClockSource+0x16c>
 8004b8a:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8004b8e:	f000 8086 	beq.w	8004c9e <HAL_TIM_ConfigClockSource+0x172>
 8004b92:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8004b96:	d87f      	bhi.n	8004c98 <HAL_TIM_ConfigClockSource+0x16c>
 8004b98:	2b70      	cmp	r3, #112	@ 0x70
 8004b9a:	d01a      	beq.n	8004bd2 <HAL_TIM_ConfigClockSource+0xa6>
 8004b9c:	2b70      	cmp	r3, #112	@ 0x70
 8004b9e:	d87b      	bhi.n	8004c98 <HAL_TIM_ConfigClockSource+0x16c>
 8004ba0:	2b60      	cmp	r3, #96	@ 0x60
 8004ba2:	d050      	beq.n	8004c46 <HAL_TIM_ConfigClockSource+0x11a>
 8004ba4:	2b60      	cmp	r3, #96	@ 0x60
 8004ba6:	d877      	bhi.n	8004c98 <HAL_TIM_ConfigClockSource+0x16c>
 8004ba8:	2b50      	cmp	r3, #80	@ 0x50
 8004baa:	d03c      	beq.n	8004c26 <HAL_TIM_ConfigClockSource+0xfa>
 8004bac:	2b50      	cmp	r3, #80	@ 0x50
 8004bae:	d873      	bhi.n	8004c98 <HAL_TIM_ConfigClockSource+0x16c>
 8004bb0:	2b40      	cmp	r3, #64	@ 0x40
 8004bb2:	d058      	beq.n	8004c66 <HAL_TIM_ConfigClockSource+0x13a>
 8004bb4:	2b40      	cmp	r3, #64	@ 0x40
 8004bb6:	d86f      	bhi.n	8004c98 <HAL_TIM_ConfigClockSource+0x16c>
 8004bb8:	2b30      	cmp	r3, #48	@ 0x30
 8004bba:	d064      	beq.n	8004c86 <HAL_TIM_ConfigClockSource+0x15a>
 8004bbc:	2b30      	cmp	r3, #48	@ 0x30
 8004bbe:	d86b      	bhi.n	8004c98 <HAL_TIM_ConfigClockSource+0x16c>
 8004bc0:	2b20      	cmp	r3, #32
 8004bc2:	d060      	beq.n	8004c86 <HAL_TIM_ConfigClockSource+0x15a>
 8004bc4:	2b20      	cmp	r3, #32
 8004bc6:	d867      	bhi.n	8004c98 <HAL_TIM_ConfigClockSource+0x16c>
 8004bc8:	2b00      	cmp	r3, #0
 8004bca:	d05c      	beq.n	8004c86 <HAL_TIM_ConfigClockSource+0x15a>
 8004bcc:	2b10      	cmp	r3, #16
 8004bce:	d05a      	beq.n	8004c86 <HAL_TIM_ConfigClockSource+0x15a>
 8004bd0:	e062      	b.n	8004c98 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8004bd2:	687b      	ldr	r3, [r7, #4]
 8004bd4:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8004bd6:	683b      	ldr	r3, [r7, #0]
 8004bd8:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8004bda:	683b      	ldr	r3, [r7, #0]
 8004bdc:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8004bde:	683b      	ldr	r3, [r7, #0]
 8004be0:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8004be2:	f000 fb69 	bl	80052b8 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8004be6:	687b      	ldr	r3, [r7, #4]
 8004be8:	681b      	ldr	r3, [r3, #0]
 8004bea:	689b      	ldr	r3, [r3, #8]
 8004bec:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8004bee:	68bb      	ldr	r3, [r7, #8]
 8004bf0:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 8004bf4:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8004bf6:	687b      	ldr	r3, [r7, #4]
 8004bf8:	681b      	ldr	r3, [r3, #0]
 8004bfa:	68ba      	ldr	r2, [r7, #8]
 8004bfc:	609a      	str	r2, [r3, #8]
      break;
 8004bfe:	e04f      	b.n	8004ca0 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8004c00:	687b      	ldr	r3, [r7, #4]
 8004c02:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8004c04:	683b      	ldr	r3, [r7, #0]
 8004c06:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8004c08:	683b      	ldr	r3, [r7, #0]
 8004c0a:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8004c0c:	683b      	ldr	r3, [r7, #0]
 8004c0e:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8004c10:	f000 fb52 	bl	80052b8 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8004c14:	687b      	ldr	r3, [r7, #4]
 8004c16:	681b      	ldr	r3, [r3, #0]
 8004c18:	689a      	ldr	r2, [r3, #8]
 8004c1a:	687b      	ldr	r3, [r7, #4]
 8004c1c:	681b      	ldr	r3, [r3, #0]
 8004c1e:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8004c22:	609a      	str	r2, [r3, #8]
      break;
 8004c24:	e03c      	b.n	8004ca0 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8004c26:	687b      	ldr	r3, [r7, #4]
 8004c28:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8004c2a:	683b      	ldr	r3, [r7, #0]
 8004c2c:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8004c2e:	683b      	ldr	r3, [r7, #0]
 8004c30:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8004c32:	461a      	mov	r2, r3
 8004c34:	f000 fac6 	bl	80051c4 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8004c38:	687b      	ldr	r3, [r7, #4]
 8004c3a:	681b      	ldr	r3, [r3, #0]
 8004c3c:	2150      	movs	r1, #80	@ 0x50
 8004c3e:	4618      	mov	r0, r3
 8004c40:	f000 fb1f 	bl	8005282 <TIM_ITRx_SetConfig>
      break;
 8004c44:	e02c      	b.n	8004ca0 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8004c46:	687b      	ldr	r3, [r7, #4]
 8004c48:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8004c4a:	683b      	ldr	r3, [r7, #0]
 8004c4c:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8004c4e:	683b      	ldr	r3, [r7, #0]
 8004c50:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 8004c52:	461a      	mov	r2, r3
 8004c54:	f000 fae5 	bl	8005222 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8004c58:	687b      	ldr	r3, [r7, #4]
 8004c5a:	681b      	ldr	r3, [r3, #0]
 8004c5c:	2160      	movs	r1, #96	@ 0x60
 8004c5e:	4618      	mov	r0, r3
 8004c60:	f000 fb0f 	bl	8005282 <TIM_ITRx_SetConfig>
      break;
 8004c64:	e01c      	b.n	8004ca0 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8004c66:	687b      	ldr	r3, [r7, #4]
 8004c68:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8004c6a:	683b      	ldr	r3, [r7, #0]
 8004c6c:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8004c6e:	683b      	ldr	r3, [r7, #0]
 8004c70:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8004c72:	461a      	mov	r2, r3
 8004c74:	f000 faa6 	bl	80051c4 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8004c78:	687b      	ldr	r3, [r7, #4]
 8004c7a:	681b      	ldr	r3, [r3, #0]
 8004c7c:	2140      	movs	r1, #64	@ 0x40
 8004c7e:	4618      	mov	r0, r3
 8004c80:	f000 faff 	bl	8005282 <TIM_ITRx_SetConfig>
      break;
 8004c84:	e00c      	b.n	8004ca0 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8004c86:	687b      	ldr	r3, [r7, #4]
 8004c88:	681a      	ldr	r2, [r3, #0]
 8004c8a:	683b      	ldr	r3, [r7, #0]
 8004c8c:	681b      	ldr	r3, [r3, #0]
 8004c8e:	4619      	mov	r1, r3
 8004c90:	4610      	mov	r0, r2
 8004c92:	f000 faf6 	bl	8005282 <TIM_ITRx_SetConfig>
      break;
 8004c96:	e003      	b.n	8004ca0 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 8004c98:	2301      	movs	r3, #1
 8004c9a:	73fb      	strb	r3, [r7, #15]
      break;
 8004c9c:	e000      	b.n	8004ca0 <HAL_TIM_ConfigClockSource+0x174>
      break;
 8004c9e:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8004ca0:	687b      	ldr	r3, [r7, #4]
 8004ca2:	2201      	movs	r2, #1
 8004ca4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8004ca8:	687b      	ldr	r3, [r7, #4]
 8004caa:	2200      	movs	r2, #0
 8004cac:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8004cb0:	7bfb      	ldrb	r3, [r7, #15]
}
 8004cb2:	4618      	mov	r0, r3
 8004cb4:	3710      	adds	r7, #16
 8004cb6:	46bd      	mov	sp, r7
 8004cb8:	bd80      	pop	{r7, pc}

08004cba <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8004cba:	b480      	push	{r7}
 8004cbc:	b083      	sub	sp, #12
 8004cbe:	af00      	add	r7, sp, #0
 8004cc0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8004cc2:	bf00      	nop
 8004cc4:	370c      	adds	r7, #12
 8004cc6:	46bd      	mov	sp, r7
 8004cc8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ccc:	4770      	bx	lr

08004cce <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8004cce:	b480      	push	{r7}
 8004cd0:	b083      	sub	sp, #12
 8004cd2:	af00      	add	r7, sp, #0
 8004cd4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8004cd6:	bf00      	nop
 8004cd8:	370c      	adds	r7, #12
 8004cda:	46bd      	mov	sp, r7
 8004cdc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ce0:	4770      	bx	lr

08004ce2 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8004ce2:	b480      	push	{r7}
 8004ce4:	b083      	sub	sp, #12
 8004ce6:	af00      	add	r7, sp, #0
 8004ce8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8004cea:	bf00      	nop
 8004cec:	370c      	adds	r7, #12
 8004cee:	46bd      	mov	sp, r7
 8004cf0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004cf4:	4770      	bx	lr

08004cf6 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8004cf6:	b480      	push	{r7}
 8004cf8:	b083      	sub	sp, #12
 8004cfa:	af00      	add	r7, sp, #0
 8004cfc:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8004cfe:	bf00      	nop
 8004d00:	370c      	adds	r7, #12
 8004d02:	46bd      	mov	sp, r7
 8004d04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d08:	4770      	bx	lr
	...

08004d0c <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8004d0c:	b480      	push	{r7}
 8004d0e:	b085      	sub	sp, #20
 8004d10:	af00      	add	r7, sp, #0
 8004d12:	6078      	str	r0, [r7, #4]
 8004d14:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8004d16:	687b      	ldr	r3, [r7, #4]
 8004d18:	681b      	ldr	r3, [r3, #0]
 8004d1a:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8004d1c:	687b      	ldr	r3, [r7, #4]
 8004d1e:	4a46      	ldr	r2, [pc, #280]	@ (8004e38 <TIM_Base_SetConfig+0x12c>)
 8004d20:	4293      	cmp	r3, r2
 8004d22:	d013      	beq.n	8004d4c <TIM_Base_SetConfig+0x40>
 8004d24:	687b      	ldr	r3, [r7, #4]
 8004d26:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8004d2a:	d00f      	beq.n	8004d4c <TIM_Base_SetConfig+0x40>
 8004d2c:	687b      	ldr	r3, [r7, #4]
 8004d2e:	4a43      	ldr	r2, [pc, #268]	@ (8004e3c <TIM_Base_SetConfig+0x130>)
 8004d30:	4293      	cmp	r3, r2
 8004d32:	d00b      	beq.n	8004d4c <TIM_Base_SetConfig+0x40>
 8004d34:	687b      	ldr	r3, [r7, #4]
 8004d36:	4a42      	ldr	r2, [pc, #264]	@ (8004e40 <TIM_Base_SetConfig+0x134>)
 8004d38:	4293      	cmp	r3, r2
 8004d3a:	d007      	beq.n	8004d4c <TIM_Base_SetConfig+0x40>
 8004d3c:	687b      	ldr	r3, [r7, #4]
 8004d3e:	4a41      	ldr	r2, [pc, #260]	@ (8004e44 <TIM_Base_SetConfig+0x138>)
 8004d40:	4293      	cmp	r3, r2
 8004d42:	d003      	beq.n	8004d4c <TIM_Base_SetConfig+0x40>
 8004d44:	687b      	ldr	r3, [r7, #4]
 8004d46:	4a40      	ldr	r2, [pc, #256]	@ (8004e48 <TIM_Base_SetConfig+0x13c>)
 8004d48:	4293      	cmp	r3, r2
 8004d4a:	d108      	bne.n	8004d5e <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8004d4c:	68fb      	ldr	r3, [r7, #12]
 8004d4e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8004d52:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8004d54:	683b      	ldr	r3, [r7, #0]
 8004d56:	685b      	ldr	r3, [r3, #4]
 8004d58:	68fa      	ldr	r2, [r7, #12]
 8004d5a:	4313      	orrs	r3, r2
 8004d5c:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8004d5e:	687b      	ldr	r3, [r7, #4]
 8004d60:	4a35      	ldr	r2, [pc, #212]	@ (8004e38 <TIM_Base_SetConfig+0x12c>)
 8004d62:	4293      	cmp	r3, r2
 8004d64:	d02b      	beq.n	8004dbe <TIM_Base_SetConfig+0xb2>
 8004d66:	687b      	ldr	r3, [r7, #4]
 8004d68:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8004d6c:	d027      	beq.n	8004dbe <TIM_Base_SetConfig+0xb2>
 8004d6e:	687b      	ldr	r3, [r7, #4]
 8004d70:	4a32      	ldr	r2, [pc, #200]	@ (8004e3c <TIM_Base_SetConfig+0x130>)
 8004d72:	4293      	cmp	r3, r2
 8004d74:	d023      	beq.n	8004dbe <TIM_Base_SetConfig+0xb2>
 8004d76:	687b      	ldr	r3, [r7, #4]
 8004d78:	4a31      	ldr	r2, [pc, #196]	@ (8004e40 <TIM_Base_SetConfig+0x134>)
 8004d7a:	4293      	cmp	r3, r2
 8004d7c:	d01f      	beq.n	8004dbe <TIM_Base_SetConfig+0xb2>
 8004d7e:	687b      	ldr	r3, [r7, #4]
 8004d80:	4a30      	ldr	r2, [pc, #192]	@ (8004e44 <TIM_Base_SetConfig+0x138>)
 8004d82:	4293      	cmp	r3, r2
 8004d84:	d01b      	beq.n	8004dbe <TIM_Base_SetConfig+0xb2>
 8004d86:	687b      	ldr	r3, [r7, #4]
 8004d88:	4a2f      	ldr	r2, [pc, #188]	@ (8004e48 <TIM_Base_SetConfig+0x13c>)
 8004d8a:	4293      	cmp	r3, r2
 8004d8c:	d017      	beq.n	8004dbe <TIM_Base_SetConfig+0xb2>
 8004d8e:	687b      	ldr	r3, [r7, #4]
 8004d90:	4a2e      	ldr	r2, [pc, #184]	@ (8004e4c <TIM_Base_SetConfig+0x140>)
 8004d92:	4293      	cmp	r3, r2
 8004d94:	d013      	beq.n	8004dbe <TIM_Base_SetConfig+0xb2>
 8004d96:	687b      	ldr	r3, [r7, #4]
 8004d98:	4a2d      	ldr	r2, [pc, #180]	@ (8004e50 <TIM_Base_SetConfig+0x144>)
 8004d9a:	4293      	cmp	r3, r2
 8004d9c:	d00f      	beq.n	8004dbe <TIM_Base_SetConfig+0xb2>
 8004d9e:	687b      	ldr	r3, [r7, #4]
 8004da0:	4a2c      	ldr	r2, [pc, #176]	@ (8004e54 <TIM_Base_SetConfig+0x148>)
 8004da2:	4293      	cmp	r3, r2
 8004da4:	d00b      	beq.n	8004dbe <TIM_Base_SetConfig+0xb2>
 8004da6:	687b      	ldr	r3, [r7, #4]
 8004da8:	4a2b      	ldr	r2, [pc, #172]	@ (8004e58 <TIM_Base_SetConfig+0x14c>)
 8004daa:	4293      	cmp	r3, r2
 8004dac:	d007      	beq.n	8004dbe <TIM_Base_SetConfig+0xb2>
 8004dae:	687b      	ldr	r3, [r7, #4]
 8004db0:	4a2a      	ldr	r2, [pc, #168]	@ (8004e5c <TIM_Base_SetConfig+0x150>)
 8004db2:	4293      	cmp	r3, r2
 8004db4:	d003      	beq.n	8004dbe <TIM_Base_SetConfig+0xb2>
 8004db6:	687b      	ldr	r3, [r7, #4]
 8004db8:	4a29      	ldr	r2, [pc, #164]	@ (8004e60 <TIM_Base_SetConfig+0x154>)
 8004dba:	4293      	cmp	r3, r2
 8004dbc:	d108      	bne.n	8004dd0 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8004dbe:	68fb      	ldr	r3, [r7, #12]
 8004dc0:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8004dc4:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8004dc6:	683b      	ldr	r3, [r7, #0]
 8004dc8:	68db      	ldr	r3, [r3, #12]
 8004dca:	68fa      	ldr	r2, [r7, #12]
 8004dcc:	4313      	orrs	r3, r2
 8004dce:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8004dd0:	68fb      	ldr	r3, [r7, #12]
 8004dd2:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 8004dd6:	683b      	ldr	r3, [r7, #0]
 8004dd8:	695b      	ldr	r3, [r3, #20]
 8004dda:	4313      	orrs	r3, r2
 8004ddc:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8004dde:	687b      	ldr	r3, [r7, #4]
 8004de0:	68fa      	ldr	r2, [r7, #12]
 8004de2:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8004de4:	683b      	ldr	r3, [r7, #0]
 8004de6:	689a      	ldr	r2, [r3, #8]
 8004de8:	687b      	ldr	r3, [r7, #4]
 8004dea:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8004dec:	683b      	ldr	r3, [r7, #0]
 8004dee:	681a      	ldr	r2, [r3, #0]
 8004df0:	687b      	ldr	r3, [r7, #4]
 8004df2:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8004df4:	687b      	ldr	r3, [r7, #4]
 8004df6:	4a10      	ldr	r2, [pc, #64]	@ (8004e38 <TIM_Base_SetConfig+0x12c>)
 8004df8:	4293      	cmp	r3, r2
 8004dfa:	d003      	beq.n	8004e04 <TIM_Base_SetConfig+0xf8>
 8004dfc:	687b      	ldr	r3, [r7, #4]
 8004dfe:	4a12      	ldr	r2, [pc, #72]	@ (8004e48 <TIM_Base_SetConfig+0x13c>)
 8004e00:	4293      	cmp	r3, r2
 8004e02:	d103      	bne.n	8004e0c <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8004e04:	683b      	ldr	r3, [r7, #0]
 8004e06:	691a      	ldr	r2, [r3, #16]
 8004e08:	687b      	ldr	r3, [r7, #4]
 8004e0a:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8004e0c:	687b      	ldr	r3, [r7, #4]
 8004e0e:	2201      	movs	r2, #1
 8004e10:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 8004e12:	687b      	ldr	r3, [r7, #4]
 8004e14:	691b      	ldr	r3, [r3, #16]
 8004e16:	f003 0301 	and.w	r3, r3, #1
 8004e1a:	2b01      	cmp	r3, #1
 8004e1c:	d105      	bne.n	8004e2a <TIM_Base_SetConfig+0x11e>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 8004e1e:	687b      	ldr	r3, [r7, #4]
 8004e20:	691b      	ldr	r3, [r3, #16]
 8004e22:	f023 0201 	bic.w	r2, r3, #1
 8004e26:	687b      	ldr	r3, [r7, #4]
 8004e28:	611a      	str	r2, [r3, #16]
  }
}
 8004e2a:	bf00      	nop
 8004e2c:	3714      	adds	r7, #20
 8004e2e:	46bd      	mov	sp, r7
 8004e30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e34:	4770      	bx	lr
 8004e36:	bf00      	nop
 8004e38:	40010000 	.word	0x40010000
 8004e3c:	40000400 	.word	0x40000400
 8004e40:	40000800 	.word	0x40000800
 8004e44:	40000c00 	.word	0x40000c00
 8004e48:	40010400 	.word	0x40010400
 8004e4c:	40014000 	.word	0x40014000
 8004e50:	40014400 	.word	0x40014400
 8004e54:	40014800 	.word	0x40014800
 8004e58:	40001800 	.word	0x40001800
 8004e5c:	40001c00 	.word	0x40001c00
 8004e60:	40002000 	.word	0x40002000

08004e64 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8004e64:	b480      	push	{r7}
 8004e66:	b087      	sub	sp, #28
 8004e68:	af00      	add	r7, sp, #0
 8004e6a:	6078      	str	r0, [r7, #4]
 8004e6c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004e6e:	687b      	ldr	r3, [r7, #4]
 8004e70:	6a1b      	ldr	r3, [r3, #32]
 8004e72:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8004e74:	687b      	ldr	r3, [r7, #4]
 8004e76:	6a1b      	ldr	r3, [r3, #32]
 8004e78:	f023 0201 	bic.w	r2, r3, #1
 8004e7c:	687b      	ldr	r3, [r7, #4]
 8004e7e:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004e80:	687b      	ldr	r3, [r7, #4]
 8004e82:	685b      	ldr	r3, [r3, #4]
 8004e84:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8004e86:	687b      	ldr	r3, [r7, #4]
 8004e88:	699b      	ldr	r3, [r3, #24]
 8004e8a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8004e8c:	68fb      	ldr	r3, [r7, #12]
 8004e8e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8004e92:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8004e94:	68fb      	ldr	r3, [r7, #12]
 8004e96:	f023 0303 	bic.w	r3, r3, #3
 8004e9a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8004e9c:	683b      	ldr	r3, [r7, #0]
 8004e9e:	681b      	ldr	r3, [r3, #0]
 8004ea0:	68fa      	ldr	r2, [r7, #12]
 8004ea2:	4313      	orrs	r3, r2
 8004ea4:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8004ea6:	697b      	ldr	r3, [r7, #20]
 8004ea8:	f023 0302 	bic.w	r3, r3, #2
 8004eac:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8004eae:	683b      	ldr	r3, [r7, #0]
 8004eb0:	689b      	ldr	r3, [r3, #8]
 8004eb2:	697a      	ldr	r2, [r7, #20]
 8004eb4:	4313      	orrs	r3, r2
 8004eb6:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8004eb8:	687b      	ldr	r3, [r7, #4]
 8004eba:	4a20      	ldr	r2, [pc, #128]	@ (8004f3c <TIM_OC1_SetConfig+0xd8>)
 8004ebc:	4293      	cmp	r3, r2
 8004ebe:	d003      	beq.n	8004ec8 <TIM_OC1_SetConfig+0x64>
 8004ec0:	687b      	ldr	r3, [r7, #4]
 8004ec2:	4a1f      	ldr	r2, [pc, #124]	@ (8004f40 <TIM_OC1_SetConfig+0xdc>)
 8004ec4:	4293      	cmp	r3, r2
 8004ec6:	d10c      	bne.n	8004ee2 <TIM_OC1_SetConfig+0x7e>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8004ec8:	697b      	ldr	r3, [r7, #20]
 8004eca:	f023 0308 	bic.w	r3, r3, #8
 8004ece:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8004ed0:	683b      	ldr	r3, [r7, #0]
 8004ed2:	68db      	ldr	r3, [r3, #12]
 8004ed4:	697a      	ldr	r2, [r7, #20]
 8004ed6:	4313      	orrs	r3, r2
 8004ed8:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8004eda:	697b      	ldr	r3, [r7, #20]
 8004edc:	f023 0304 	bic.w	r3, r3, #4
 8004ee0:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004ee2:	687b      	ldr	r3, [r7, #4]
 8004ee4:	4a15      	ldr	r2, [pc, #84]	@ (8004f3c <TIM_OC1_SetConfig+0xd8>)
 8004ee6:	4293      	cmp	r3, r2
 8004ee8:	d003      	beq.n	8004ef2 <TIM_OC1_SetConfig+0x8e>
 8004eea:	687b      	ldr	r3, [r7, #4]
 8004eec:	4a14      	ldr	r2, [pc, #80]	@ (8004f40 <TIM_OC1_SetConfig+0xdc>)
 8004eee:	4293      	cmp	r3, r2
 8004ef0:	d111      	bne.n	8004f16 <TIM_OC1_SetConfig+0xb2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8004ef2:	693b      	ldr	r3, [r7, #16]
 8004ef4:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8004ef8:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8004efa:	693b      	ldr	r3, [r7, #16]
 8004efc:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8004f00:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8004f02:	683b      	ldr	r3, [r7, #0]
 8004f04:	695b      	ldr	r3, [r3, #20]
 8004f06:	693a      	ldr	r2, [r7, #16]
 8004f08:	4313      	orrs	r3, r2
 8004f0a:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8004f0c:	683b      	ldr	r3, [r7, #0]
 8004f0e:	699b      	ldr	r3, [r3, #24]
 8004f10:	693a      	ldr	r2, [r7, #16]
 8004f12:	4313      	orrs	r3, r2
 8004f14:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004f16:	687b      	ldr	r3, [r7, #4]
 8004f18:	693a      	ldr	r2, [r7, #16]
 8004f1a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8004f1c:	687b      	ldr	r3, [r7, #4]
 8004f1e:	68fa      	ldr	r2, [r7, #12]
 8004f20:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8004f22:	683b      	ldr	r3, [r7, #0]
 8004f24:	685a      	ldr	r2, [r3, #4]
 8004f26:	687b      	ldr	r3, [r7, #4]
 8004f28:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004f2a:	687b      	ldr	r3, [r7, #4]
 8004f2c:	697a      	ldr	r2, [r7, #20]
 8004f2e:	621a      	str	r2, [r3, #32]
}
 8004f30:	bf00      	nop
 8004f32:	371c      	adds	r7, #28
 8004f34:	46bd      	mov	sp, r7
 8004f36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f3a:	4770      	bx	lr
 8004f3c:	40010000 	.word	0x40010000
 8004f40:	40010400 	.word	0x40010400

08004f44 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8004f44:	b480      	push	{r7}
 8004f46:	b087      	sub	sp, #28
 8004f48:	af00      	add	r7, sp, #0
 8004f4a:	6078      	str	r0, [r7, #4]
 8004f4c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004f4e:	687b      	ldr	r3, [r7, #4]
 8004f50:	6a1b      	ldr	r3, [r3, #32]
 8004f52:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8004f54:	687b      	ldr	r3, [r7, #4]
 8004f56:	6a1b      	ldr	r3, [r3, #32]
 8004f58:	f023 0210 	bic.w	r2, r3, #16
 8004f5c:	687b      	ldr	r3, [r7, #4]
 8004f5e:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004f60:	687b      	ldr	r3, [r7, #4]
 8004f62:	685b      	ldr	r3, [r3, #4]
 8004f64:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8004f66:	687b      	ldr	r3, [r7, #4]
 8004f68:	699b      	ldr	r3, [r3, #24]
 8004f6a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8004f6c:	68fb      	ldr	r3, [r7, #12]
 8004f6e:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8004f72:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8004f74:	68fb      	ldr	r3, [r7, #12]
 8004f76:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8004f7a:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8004f7c:	683b      	ldr	r3, [r7, #0]
 8004f7e:	681b      	ldr	r3, [r3, #0]
 8004f80:	021b      	lsls	r3, r3, #8
 8004f82:	68fa      	ldr	r2, [r7, #12]
 8004f84:	4313      	orrs	r3, r2
 8004f86:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8004f88:	697b      	ldr	r3, [r7, #20]
 8004f8a:	f023 0320 	bic.w	r3, r3, #32
 8004f8e:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8004f90:	683b      	ldr	r3, [r7, #0]
 8004f92:	689b      	ldr	r3, [r3, #8]
 8004f94:	011b      	lsls	r3, r3, #4
 8004f96:	697a      	ldr	r2, [r7, #20]
 8004f98:	4313      	orrs	r3, r2
 8004f9a:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8004f9c:	687b      	ldr	r3, [r7, #4]
 8004f9e:	4a22      	ldr	r2, [pc, #136]	@ (8005028 <TIM_OC2_SetConfig+0xe4>)
 8004fa0:	4293      	cmp	r3, r2
 8004fa2:	d003      	beq.n	8004fac <TIM_OC2_SetConfig+0x68>
 8004fa4:	687b      	ldr	r3, [r7, #4]
 8004fa6:	4a21      	ldr	r2, [pc, #132]	@ (800502c <TIM_OC2_SetConfig+0xe8>)
 8004fa8:	4293      	cmp	r3, r2
 8004faa:	d10d      	bne.n	8004fc8 <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8004fac:	697b      	ldr	r3, [r7, #20]
 8004fae:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8004fb2:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8004fb4:	683b      	ldr	r3, [r7, #0]
 8004fb6:	68db      	ldr	r3, [r3, #12]
 8004fb8:	011b      	lsls	r3, r3, #4
 8004fba:	697a      	ldr	r2, [r7, #20]
 8004fbc:	4313      	orrs	r3, r2
 8004fbe:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8004fc0:	697b      	ldr	r3, [r7, #20]
 8004fc2:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8004fc6:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004fc8:	687b      	ldr	r3, [r7, #4]
 8004fca:	4a17      	ldr	r2, [pc, #92]	@ (8005028 <TIM_OC2_SetConfig+0xe4>)
 8004fcc:	4293      	cmp	r3, r2
 8004fce:	d003      	beq.n	8004fd8 <TIM_OC2_SetConfig+0x94>
 8004fd0:	687b      	ldr	r3, [r7, #4]
 8004fd2:	4a16      	ldr	r2, [pc, #88]	@ (800502c <TIM_OC2_SetConfig+0xe8>)
 8004fd4:	4293      	cmp	r3, r2
 8004fd6:	d113      	bne.n	8005000 <TIM_OC2_SetConfig+0xbc>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8004fd8:	693b      	ldr	r3, [r7, #16]
 8004fda:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8004fde:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8004fe0:	693b      	ldr	r3, [r7, #16]
 8004fe2:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8004fe6:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8004fe8:	683b      	ldr	r3, [r7, #0]
 8004fea:	695b      	ldr	r3, [r3, #20]
 8004fec:	009b      	lsls	r3, r3, #2
 8004fee:	693a      	ldr	r2, [r7, #16]
 8004ff0:	4313      	orrs	r3, r2
 8004ff2:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8004ff4:	683b      	ldr	r3, [r7, #0]
 8004ff6:	699b      	ldr	r3, [r3, #24]
 8004ff8:	009b      	lsls	r3, r3, #2
 8004ffa:	693a      	ldr	r2, [r7, #16]
 8004ffc:	4313      	orrs	r3, r2
 8004ffe:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005000:	687b      	ldr	r3, [r7, #4]
 8005002:	693a      	ldr	r2, [r7, #16]
 8005004:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8005006:	687b      	ldr	r3, [r7, #4]
 8005008:	68fa      	ldr	r2, [r7, #12]
 800500a:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 800500c:	683b      	ldr	r3, [r7, #0]
 800500e:	685a      	ldr	r2, [r3, #4]
 8005010:	687b      	ldr	r3, [r7, #4]
 8005012:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005014:	687b      	ldr	r3, [r7, #4]
 8005016:	697a      	ldr	r2, [r7, #20]
 8005018:	621a      	str	r2, [r3, #32]
}
 800501a:	bf00      	nop
 800501c:	371c      	adds	r7, #28
 800501e:	46bd      	mov	sp, r7
 8005020:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005024:	4770      	bx	lr
 8005026:	bf00      	nop
 8005028:	40010000 	.word	0x40010000
 800502c:	40010400 	.word	0x40010400

08005030 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8005030:	b480      	push	{r7}
 8005032:	b087      	sub	sp, #28
 8005034:	af00      	add	r7, sp, #0
 8005036:	6078      	str	r0, [r7, #4]
 8005038:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800503a:	687b      	ldr	r3, [r7, #4]
 800503c:	6a1b      	ldr	r3, [r3, #32]
 800503e:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8005040:	687b      	ldr	r3, [r7, #4]
 8005042:	6a1b      	ldr	r3, [r3, #32]
 8005044:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8005048:	687b      	ldr	r3, [r7, #4]
 800504a:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800504c:	687b      	ldr	r3, [r7, #4]
 800504e:	685b      	ldr	r3, [r3, #4]
 8005050:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8005052:	687b      	ldr	r3, [r7, #4]
 8005054:	69db      	ldr	r3, [r3, #28]
 8005056:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8005058:	68fb      	ldr	r3, [r7, #12]
 800505a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800505e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8005060:	68fb      	ldr	r3, [r7, #12]
 8005062:	f023 0303 	bic.w	r3, r3, #3
 8005066:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8005068:	683b      	ldr	r3, [r7, #0]
 800506a:	681b      	ldr	r3, [r3, #0]
 800506c:	68fa      	ldr	r2, [r7, #12]
 800506e:	4313      	orrs	r3, r2
 8005070:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8005072:	697b      	ldr	r3, [r7, #20]
 8005074:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8005078:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 800507a:	683b      	ldr	r3, [r7, #0]
 800507c:	689b      	ldr	r3, [r3, #8]
 800507e:	021b      	lsls	r3, r3, #8
 8005080:	697a      	ldr	r2, [r7, #20]
 8005082:	4313      	orrs	r3, r2
 8005084:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8005086:	687b      	ldr	r3, [r7, #4]
 8005088:	4a21      	ldr	r2, [pc, #132]	@ (8005110 <TIM_OC3_SetConfig+0xe0>)
 800508a:	4293      	cmp	r3, r2
 800508c:	d003      	beq.n	8005096 <TIM_OC3_SetConfig+0x66>
 800508e:	687b      	ldr	r3, [r7, #4]
 8005090:	4a20      	ldr	r2, [pc, #128]	@ (8005114 <TIM_OC3_SetConfig+0xe4>)
 8005092:	4293      	cmp	r3, r2
 8005094:	d10d      	bne.n	80050b2 <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8005096:	697b      	ldr	r3, [r7, #20]
 8005098:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 800509c:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 800509e:	683b      	ldr	r3, [r7, #0]
 80050a0:	68db      	ldr	r3, [r3, #12]
 80050a2:	021b      	lsls	r3, r3, #8
 80050a4:	697a      	ldr	r2, [r7, #20]
 80050a6:	4313      	orrs	r3, r2
 80050a8:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 80050aa:	697b      	ldr	r3, [r7, #20]
 80050ac:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 80050b0:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80050b2:	687b      	ldr	r3, [r7, #4]
 80050b4:	4a16      	ldr	r2, [pc, #88]	@ (8005110 <TIM_OC3_SetConfig+0xe0>)
 80050b6:	4293      	cmp	r3, r2
 80050b8:	d003      	beq.n	80050c2 <TIM_OC3_SetConfig+0x92>
 80050ba:	687b      	ldr	r3, [r7, #4]
 80050bc:	4a15      	ldr	r2, [pc, #84]	@ (8005114 <TIM_OC3_SetConfig+0xe4>)
 80050be:	4293      	cmp	r3, r2
 80050c0:	d113      	bne.n	80050ea <TIM_OC3_SetConfig+0xba>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 80050c2:	693b      	ldr	r3, [r7, #16]
 80050c4:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 80050c8:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 80050ca:	693b      	ldr	r3, [r7, #16]
 80050cc:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 80050d0:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 80050d2:	683b      	ldr	r3, [r7, #0]
 80050d4:	695b      	ldr	r3, [r3, #20]
 80050d6:	011b      	lsls	r3, r3, #4
 80050d8:	693a      	ldr	r2, [r7, #16]
 80050da:	4313      	orrs	r3, r2
 80050dc:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 80050de:	683b      	ldr	r3, [r7, #0]
 80050e0:	699b      	ldr	r3, [r3, #24]
 80050e2:	011b      	lsls	r3, r3, #4
 80050e4:	693a      	ldr	r2, [r7, #16]
 80050e6:	4313      	orrs	r3, r2
 80050e8:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80050ea:	687b      	ldr	r3, [r7, #4]
 80050ec:	693a      	ldr	r2, [r7, #16]
 80050ee:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80050f0:	687b      	ldr	r3, [r7, #4]
 80050f2:	68fa      	ldr	r2, [r7, #12]
 80050f4:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 80050f6:	683b      	ldr	r3, [r7, #0]
 80050f8:	685a      	ldr	r2, [r3, #4]
 80050fa:	687b      	ldr	r3, [r7, #4]
 80050fc:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80050fe:	687b      	ldr	r3, [r7, #4]
 8005100:	697a      	ldr	r2, [r7, #20]
 8005102:	621a      	str	r2, [r3, #32]
}
 8005104:	bf00      	nop
 8005106:	371c      	adds	r7, #28
 8005108:	46bd      	mov	sp, r7
 800510a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800510e:	4770      	bx	lr
 8005110:	40010000 	.word	0x40010000
 8005114:	40010400 	.word	0x40010400

08005118 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8005118:	b480      	push	{r7}
 800511a:	b087      	sub	sp, #28
 800511c:	af00      	add	r7, sp, #0
 800511e:	6078      	str	r0, [r7, #4]
 8005120:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005122:	687b      	ldr	r3, [r7, #4]
 8005124:	6a1b      	ldr	r3, [r3, #32]
 8005126:	613b      	str	r3, [r7, #16]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8005128:	687b      	ldr	r3, [r7, #4]
 800512a:	6a1b      	ldr	r3, [r3, #32]
 800512c:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 8005130:	687b      	ldr	r3, [r7, #4]
 8005132:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005134:	687b      	ldr	r3, [r7, #4]
 8005136:	685b      	ldr	r3, [r3, #4]
 8005138:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800513a:	687b      	ldr	r3, [r7, #4]
 800513c:	69db      	ldr	r3, [r3, #28]
 800513e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8005140:	68fb      	ldr	r3, [r7, #12]
 8005142:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8005146:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8005148:	68fb      	ldr	r3, [r7, #12]
 800514a:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800514e:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8005150:	683b      	ldr	r3, [r7, #0]
 8005152:	681b      	ldr	r3, [r3, #0]
 8005154:	021b      	lsls	r3, r3, #8
 8005156:	68fa      	ldr	r2, [r7, #12]
 8005158:	4313      	orrs	r3, r2
 800515a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 800515c:	693b      	ldr	r3, [r7, #16]
 800515e:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 8005162:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8005164:	683b      	ldr	r3, [r7, #0]
 8005166:	689b      	ldr	r3, [r3, #8]
 8005168:	031b      	lsls	r3, r3, #12
 800516a:	693a      	ldr	r2, [r7, #16]
 800516c:	4313      	orrs	r3, r2
 800516e:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005170:	687b      	ldr	r3, [r7, #4]
 8005172:	4a12      	ldr	r2, [pc, #72]	@ (80051bc <TIM_OC4_SetConfig+0xa4>)
 8005174:	4293      	cmp	r3, r2
 8005176:	d003      	beq.n	8005180 <TIM_OC4_SetConfig+0x68>
 8005178:	687b      	ldr	r3, [r7, #4]
 800517a:	4a11      	ldr	r2, [pc, #68]	@ (80051c0 <TIM_OC4_SetConfig+0xa8>)
 800517c:	4293      	cmp	r3, r2
 800517e:	d109      	bne.n	8005194 <TIM_OC4_SetConfig+0x7c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8005180:	697b      	ldr	r3, [r7, #20]
 8005182:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8005186:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8005188:	683b      	ldr	r3, [r7, #0]
 800518a:	695b      	ldr	r3, [r3, #20]
 800518c:	019b      	lsls	r3, r3, #6
 800518e:	697a      	ldr	r2, [r7, #20]
 8005190:	4313      	orrs	r3, r2
 8005192:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005194:	687b      	ldr	r3, [r7, #4]
 8005196:	697a      	ldr	r2, [r7, #20]
 8005198:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800519a:	687b      	ldr	r3, [r7, #4]
 800519c:	68fa      	ldr	r2, [r7, #12]
 800519e:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 80051a0:	683b      	ldr	r3, [r7, #0]
 80051a2:	685a      	ldr	r2, [r3, #4]
 80051a4:	687b      	ldr	r3, [r7, #4]
 80051a6:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80051a8:	687b      	ldr	r3, [r7, #4]
 80051aa:	693a      	ldr	r2, [r7, #16]
 80051ac:	621a      	str	r2, [r3, #32]
}
 80051ae:	bf00      	nop
 80051b0:	371c      	adds	r7, #28
 80051b2:	46bd      	mov	sp, r7
 80051b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80051b8:	4770      	bx	lr
 80051ba:	bf00      	nop
 80051bc:	40010000 	.word	0x40010000
 80051c0:	40010400 	.word	0x40010400

080051c4 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80051c4:	b480      	push	{r7}
 80051c6:	b087      	sub	sp, #28
 80051c8:	af00      	add	r7, sp, #0
 80051ca:	60f8      	str	r0, [r7, #12]
 80051cc:	60b9      	str	r1, [r7, #8]
 80051ce:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 80051d0:	68fb      	ldr	r3, [r7, #12]
 80051d2:	6a1b      	ldr	r3, [r3, #32]
 80051d4:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80051d6:	68fb      	ldr	r3, [r7, #12]
 80051d8:	6a1b      	ldr	r3, [r3, #32]
 80051da:	f023 0201 	bic.w	r2, r3, #1
 80051de:	68fb      	ldr	r3, [r7, #12]
 80051e0:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80051e2:	68fb      	ldr	r3, [r7, #12]
 80051e4:	699b      	ldr	r3, [r3, #24]
 80051e6:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80051e8:	693b      	ldr	r3, [r7, #16]
 80051ea:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 80051ee:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 80051f0:	687b      	ldr	r3, [r7, #4]
 80051f2:	011b      	lsls	r3, r3, #4
 80051f4:	693a      	ldr	r2, [r7, #16]
 80051f6:	4313      	orrs	r3, r2
 80051f8:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 80051fa:	697b      	ldr	r3, [r7, #20]
 80051fc:	f023 030a 	bic.w	r3, r3, #10
 8005200:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8005202:	697a      	ldr	r2, [r7, #20]
 8005204:	68bb      	ldr	r3, [r7, #8]
 8005206:	4313      	orrs	r3, r2
 8005208:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800520a:	68fb      	ldr	r3, [r7, #12]
 800520c:	693a      	ldr	r2, [r7, #16]
 800520e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8005210:	68fb      	ldr	r3, [r7, #12]
 8005212:	697a      	ldr	r2, [r7, #20]
 8005214:	621a      	str	r2, [r3, #32]
}
 8005216:	bf00      	nop
 8005218:	371c      	adds	r7, #28
 800521a:	46bd      	mov	sp, r7
 800521c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005220:	4770      	bx	lr

08005222 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8005222:	b480      	push	{r7}
 8005224:	b087      	sub	sp, #28
 8005226:	af00      	add	r7, sp, #0
 8005228:	60f8      	str	r0, [r7, #12]
 800522a:	60b9      	str	r1, [r7, #8]
 800522c:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 800522e:	68fb      	ldr	r3, [r7, #12]
 8005230:	6a1b      	ldr	r3, [r3, #32]
 8005232:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8005234:	68fb      	ldr	r3, [r7, #12]
 8005236:	6a1b      	ldr	r3, [r3, #32]
 8005238:	f023 0210 	bic.w	r2, r3, #16
 800523c:	68fb      	ldr	r3, [r7, #12]
 800523e:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8005240:	68fb      	ldr	r3, [r7, #12]
 8005242:	699b      	ldr	r3, [r3, #24]
 8005244:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8005246:	693b      	ldr	r3, [r7, #16]
 8005248:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 800524c:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 800524e:	687b      	ldr	r3, [r7, #4]
 8005250:	031b      	lsls	r3, r3, #12
 8005252:	693a      	ldr	r2, [r7, #16]
 8005254:	4313      	orrs	r3, r2
 8005256:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8005258:	697b      	ldr	r3, [r7, #20]
 800525a:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 800525e:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 8005260:	68bb      	ldr	r3, [r7, #8]
 8005262:	011b      	lsls	r3, r3, #4
 8005264:	697a      	ldr	r2, [r7, #20]
 8005266:	4313      	orrs	r3, r2
 8005268:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800526a:	68fb      	ldr	r3, [r7, #12]
 800526c:	693a      	ldr	r2, [r7, #16]
 800526e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8005270:	68fb      	ldr	r3, [r7, #12]
 8005272:	697a      	ldr	r2, [r7, #20]
 8005274:	621a      	str	r2, [r3, #32]
}
 8005276:	bf00      	nop
 8005278:	371c      	adds	r7, #28
 800527a:	46bd      	mov	sp, r7
 800527c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005280:	4770      	bx	lr

08005282 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8005282:	b480      	push	{r7}
 8005284:	b085      	sub	sp, #20
 8005286:	af00      	add	r7, sp, #0
 8005288:	6078      	str	r0, [r7, #4]
 800528a:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 800528c:	687b      	ldr	r3, [r7, #4]
 800528e:	689b      	ldr	r3, [r3, #8]
 8005290:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8005292:	68fb      	ldr	r3, [r7, #12]
 8005294:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8005298:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800529a:	683a      	ldr	r2, [r7, #0]
 800529c:	68fb      	ldr	r3, [r7, #12]
 800529e:	4313      	orrs	r3, r2
 80052a0:	f043 0307 	orr.w	r3, r3, #7
 80052a4:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80052a6:	687b      	ldr	r3, [r7, #4]
 80052a8:	68fa      	ldr	r2, [r7, #12]
 80052aa:	609a      	str	r2, [r3, #8]
}
 80052ac:	bf00      	nop
 80052ae:	3714      	adds	r7, #20
 80052b0:	46bd      	mov	sp, r7
 80052b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80052b6:	4770      	bx	lr

080052b8 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 80052b8:	b480      	push	{r7}
 80052ba:	b087      	sub	sp, #28
 80052bc:	af00      	add	r7, sp, #0
 80052be:	60f8      	str	r0, [r7, #12]
 80052c0:	60b9      	str	r1, [r7, #8]
 80052c2:	607a      	str	r2, [r7, #4]
 80052c4:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 80052c6:	68fb      	ldr	r3, [r7, #12]
 80052c8:	689b      	ldr	r3, [r3, #8]
 80052ca:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80052cc:	697b      	ldr	r3, [r7, #20]
 80052ce:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 80052d2:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 80052d4:	683b      	ldr	r3, [r7, #0]
 80052d6:	021a      	lsls	r2, r3, #8
 80052d8:	687b      	ldr	r3, [r7, #4]
 80052da:	431a      	orrs	r2, r3
 80052dc:	68bb      	ldr	r3, [r7, #8]
 80052de:	4313      	orrs	r3, r2
 80052e0:	697a      	ldr	r2, [r7, #20]
 80052e2:	4313      	orrs	r3, r2
 80052e4:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80052e6:	68fb      	ldr	r3, [r7, #12]
 80052e8:	697a      	ldr	r2, [r7, #20]
 80052ea:	609a      	str	r2, [r3, #8]
}
 80052ec:	bf00      	nop
 80052ee:	371c      	adds	r7, #28
 80052f0:	46bd      	mov	sp, r7
 80052f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80052f6:	4770      	bx	lr

080052f8 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 80052f8:	b480      	push	{r7}
 80052fa:	b087      	sub	sp, #28
 80052fc:	af00      	add	r7, sp, #0
 80052fe:	60f8      	str	r0, [r7, #12]
 8005300:	60b9      	str	r1, [r7, #8]
 8005302:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8005304:	68bb      	ldr	r3, [r7, #8]
 8005306:	f003 031f 	and.w	r3, r3, #31
 800530a:	2201      	movs	r2, #1
 800530c:	fa02 f303 	lsl.w	r3, r2, r3
 8005310:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8005312:	68fb      	ldr	r3, [r7, #12]
 8005314:	6a1a      	ldr	r2, [r3, #32]
 8005316:	697b      	ldr	r3, [r7, #20]
 8005318:	43db      	mvns	r3, r3
 800531a:	401a      	ands	r2, r3
 800531c:	68fb      	ldr	r3, [r7, #12]
 800531e:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8005320:	68fb      	ldr	r3, [r7, #12]
 8005322:	6a1a      	ldr	r2, [r3, #32]
 8005324:	68bb      	ldr	r3, [r7, #8]
 8005326:	f003 031f 	and.w	r3, r3, #31
 800532a:	6879      	ldr	r1, [r7, #4]
 800532c:	fa01 f303 	lsl.w	r3, r1, r3
 8005330:	431a      	orrs	r2, r3
 8005332:	68fb      	ldr	r3, [r7, #12]
 8005334:	621a      	str	r2, [r3, #32]
}
 8005336:	bf00      	nop
 8005338:	371c      	adds	r7, #28
 800533a:	46bd      	mov	sp, r7
 800533c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005340:	4770      	bx	lr
	...

08005344 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8005344:	b480      	push	{r7}
 8005346:	b085      	sub	sp, #20
 8005348:	af00      	add	r7, sp, #0
 800534a:	6078      	str	r0, [r7, #4]
 800534c:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800534e:	687b      	ldr	r3, [r7, #4]
 8005350:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8005354:	2b01      	cmp	r3, #1
 8005356:	d101      	bne.n	800535c <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8005358:	2302      	movs	r3, #2
 800535a:	e05a      	b.n	8005412 <HAL_TIMEx_MasterConfigSynchronization+0xce>
 800535c:	687b      	ldr	r3, [r7, #4]
 800535e:	2201      	movs	r2, #1
 8005360:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005364:	687b      	ldr	r3, [r7, #4]
 8005366:	2202      	movs	r2, #2
 8005368:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 800536c:	687b      	ldr	r3, [r7, #4]
 800536e:	681b      	ldr	r3, [r3, #0]
 8005370:	685b      	ldr	r3, [r3, #4]
 8005372:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8005374:	687b      	ldr	r3, [r7, #4]
 8005376:	681b      	ldr	r3, [r3, #0]
 8005378:	689b      	ldr	r3, [r3, #8]
 800537a:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800537c:	68fb      	ldr	r3, [r7, #12]
 800537e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8005382:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8005384:	683b      	ldr	r3, [r7, #0]
 8005386:	681b      	ldr	r3, [r3, #0]
 8005388:	68fa      	ldr	r2, [r7, #12]
 800538a:	4313      	orrs	r3, r2
 800538c:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800538e:	687b      	ldr	r3, [r7, #4]
 8005390:	681b      	ldr	r3, [r3, #0]
 8005392:	68fa      	ldr	r2, [r7, #12]
 8005394:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005396:	687b      	ldr	r3, [r7, #4]
 8005398:	681b      	ldr	r3, [r3, #0]
 800539a:	4a21      	ldr	r2, [pc, #132]	@ (8005420 <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 800539c:	4293      	cmp	r3, r2
 800539e:	d022      	beq.n	80053e6 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80053a0:	687b      	ldr	r3, [r7, #4]
 80053a2:	681b      	ldr	r3, [r3, #0]
 80053a4:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80053a8:	d01d      	beq.n	80053e6 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80053aa:	687b      	ldr	r3, [r7, #4]
 80053ac:	681b      	ldr	r3, [r3, #0]
 80053ae:	4a1d      	ldr	r2, [pc, #116]	@ (8005424 <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 80053b0:	4293      	cmp	r3, r2
 80053b2:	d018      	beq.n	80053e6 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80053b4:	687b      	ldr	r3, [r7, #4]
 80053b6:	681b      	ldr	r3, [r3, #0]
 80053b8:	4a1b      	ldr	r2, [pc, #108]	@ (8005428 <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 80053ba:	4293      	cmp	r3, r2
 80053bc:	d013      	beq.n	80053e6 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80053be:	687b      	ldr	r3, [r7, #4]
 80053c0:	681b      	ldr	r3, [r3, #0]
 80053c2:	4a1a      	ldr	r2, [pc, #104]	@ (800542c <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 80053c4:	4293      	cmp	r3, r2
 80053c6:	d00e      	beq.n	80053e6 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80053c8:	687b      	ldr	r3, [r7, #4]
 80053ca:	681b      	ldr	r3, [r3, #0]
 80053cc:	4a18      	ldr	r2, [pc, #96]	@ (8005430 <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 80053ce:	4293      	cmp	r3, r2
 80053d0:	d009      	beq.n	80053e6 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80053d2:	687b      	ldr	r3, [r7, #4]
 80053d4:	681b      	ldr	r3, [r3, #0]
 80053d6:	4a17      	ldr	r2, [pc, #92]	@ (8005434 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 80053d8:	4293      	cmp	r3, r2
 80053da:	d004      	beq.n	80053e6 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80053dc:	687b      	ldr	r3, [r7, #4]
 80053de:	681b      	ldr	r3, [r3, #0]
 80053e0:	4a15      	ldr	r2, [pc, #84]	@ (8005438 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 80053e2:	4293      	cmp	r3, r2
 80053e4:	d10c      	bne.n	8005400 <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 80053e6:	68bb      	ldr	r3, [r7, #8]
 80053e8:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 80053ec:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80053ee:	683b      	ldr	r3, [r7, #0]
 80053f0:	685b      	ldr	r3, [r3, #4]
 80053f2:	68ba      	ldr	r2, [r7, #8]
 80053f4:	4313      	orrs	r3, r2
 80053f6:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 80053f8:	687b      	ldr	r3, [r7, #4]
 80053fa:	681b      	ldr	r3, [r3, #0]
 80053fc:	68ba      	ldr	r2, [r7, #8]
 80053fe:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8005400:	687b      	ldr	r3, [r7, #4]
 8005402:	2201      	movs	r2, #1
 8005404:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8005408:	687b      	ldr	r3, [r7, #4]
 800540a:	2200      	movs	r2, #0
 800540c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 8005410:	2300      	movs	r3, #0
}
 8005412:	4618      	mov	r0, r3
 8005414:	3714      	adds	r7, #20
 8005416:	46bd      	mov	sp, r7
 8005418:	f85d 7b04 	ldr.w	r7, [sp], #4
 800541c:	4770      	bx	lr
 800541e:	bf00      	nop
 8005420:	40010000 	.word	0x40010000
 8005424:	40000400 	.word	0x40000400
 8005428:	40000800 	.word	0x40000800
 800542c:	40000c00 	.word	0x40000c00
 8005430:	40010400 	.word	0x40010400
 8005434:	40014000 	.word	0x40014000
 8005438:	40001800 	.word	0x40001800

0800543c <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                const TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 800543c:	b480      	push	{r7}
 800543e:	b085      	sub	sp, #20
 8005440:	af00      	add	r7, sp, #0
 8005442:	6078      	str	r0, [r7, #4]
 8005444:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 8005446:	2300      	movs	r3, #0
 8005448:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_STATE(sBreakDeadTimeConfig->BreakState));
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 800544a:	687b      	ldr	r3, [r7, #4]
 800544c:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8005450:	2b01      	cmp	r3, #1
 8005452:	d101      	bne.n	8005458 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 8005454:	2302      	movs	r3, #2
 8005456:	e03d      	b.n	80054d4 <HAL_TIMEx_ConfigBreakDeadTime+0x98>
 8005458:	687b      	ldr	r3, [r7, #4]
 800545a:	2201      	movs	r2, #1
 800545c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 8005460:	68fb      	ldr	r3, [r7, #12]
 8005462:	f023 02ff 	bic.w	r2, r3, #255	@ 0xff
 8005466:	683b      	ldr	r3, [r7, #0]
 8005468:	68db      	ldr	r3, [r3, #12]
 800546a:	4313      	orrs	r3, r2
 800546c:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 800546e:	68fb      	ldr	r3, [r7, #12]
 8005470:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8005474:	683b      	ldr	r3, [r7, #0]
 8005476:	689b      	ldr	r3, [r3, #8]
 8005478:	4313      	orrs	r3, r2
 800547a:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 800547c:	68fb      	ldr	r3, [r7, #12]
 800547e:	f423 6280 	bic.w	r2, r3, #1024	@ 0x400
 8005482:	683b      	ldr	r3, [r7, #0]
 8005484:	685b      	ldr	r3, [r3, #4]
 8005486:	4313      	orrs	r3, r2
 8005488:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 800548a:	68fb      	ldr	r3, [r7, #12]
 800548c:	f423 6200 	bic.w	r2, r3, #2048	@ 0x800
 8005490:	683b      	ldr	r3, [r7, #0]
 8005492:	681b      	ldr	r3, [r3, #0]
 8005494:	4313      	orrs	r3, r2
 8005496:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 8005498:	68fb      	ldr	r3, [r7, #12]
 800549a:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 800549e:	683b      	ldr	r3, [r7, #0]
 80054a0:	691b      	ldr	r3, [r3, #16]
 80054a2:	4313      	orrs	r3, r2
 80054a4:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 80054a6:	68fb      	ldr	r3, [r7, #12]
 80054a8:	f423 5200 	bic.w	r2, r3, #8192	@ 0x2000
 80054ac:	683b      	ldr	r3, [r7, #0]
 80054ae:	695b      	ldr	r3, [r3, #20]
 80054b0:	4313      	orrs	r3, r2
 80054b2:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 80054b4:	68fb      	ldr	r3, [r7, #12]
 80054b6:	f423 4280 	bic.w	r2, r3, #16384	@ 0x4000
 80054ba:	683b      	ldr	r3, [r7, #0]
 80054bc:	69db      	ldr	r3, [r3, #28]
 80054be:	4313      	orrs	r3, r2
 80054c0:	60fb      	str	r3, [r7, #12]


  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 80054c2:	687b      	ldr	r3, [r7, #4]
 80054c4:	681b      	ldr	r3, [r3, #0]
 80054c6:	68fa      	ldr	r2, [r7, #12]
 80054c8:	645a      	str	r2, [r3, #68]	@ 0x44

  __HAL_UNLOCK(htim);
 80054ca:	687b      	ldr	r3, [r7, #4]
 80054cc:	2200      	movs	r2, #0
 80054ce:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 80054d2:	2300      	movs	r3, #0
}
 80054d4:	4618      	mov	r0, r3
 80054d6:	3714      	adds	r7, #20
 80054d8:	46bd      	mov	sp, r7
 80054da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80054de:	4770      	bx	lr

080054e0 <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 80054e0:	b480      	push	{r7}
 80054e2:	b083      	sub	sp, #12
 80054e4:	af00      	add	r7, sp, #0
 80054e6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 80054e8:	bf00      	nop
 80054ea:	370c      	adds	r7, #12
 80054ec:	46bd      	mov	sp, r7
 80054ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80054f2:	4770      	bx	lr

080054f4 <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 80054f4:	b480      	push	{r7}
 80054f6:	b083      	sub	sp, #12
 80054f8:	af00      	add	r7, sp, #0
 80054fa:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 80054fc:	bf00      	nop
 80054fe:	370c      	adds	r7, #12
 8005500:	46bd      	mov	sp, r7
 8005502:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005506:	4770      	bx	lr

08005508 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8005508:	b580      	push	{r7, lr}
 800550a:	b082      	sub	sp, #8
 800550c:	af00      	add	r7, sp, #0
 800550e:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8005510:	687b      	ldr	r3, [r7, #4]
 8005512:	2b00      	cmp	r3, #0
 8005514:	d101      	bne.n	800551a <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8005516:	2301      	movs	r3, #1
 8005518:	e042      	b.n	80055a0 <HAL_UART_Init+0x98>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 800551a:	687b      	ldr	r3, [r7, #4]
 800551c:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8005520:	b2db      	uxtb	r3, r3
 8005522:	2b00      	cmp	r3, #0
 8005524:	d106      	bne.n	8005534 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8005526:	687b      	ldr	r3, [r7, #4]
 8005528:	2200      	movs	r2, #0
 800552a:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800552e:	6878      	ldr	r0, [r7, #4]
 8005530:	f7fc fc18 	bl	8001d64 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8005534:	687b      	ldr	r3, [r7, #4]
 8005536:	2224      	movs	r2, #36	@ 0x24
 8005538:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 800553c:	687b      	ldr	r3, [r7, #4]
 800553e:	681b      	ldr	r3, [r3, #0]
 8005540:	68da      	ldr	r2, [r3, #12]
 8005542:	687b      	ldr	r3, [r7, #4]
 8005544:	681b      	ldr	r3, [r3, #0]
 8005546:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 800554a:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 800554c:	6878      	ldr	r0, [r7, #4]
 800554e:	f000 fd11 	bl	8005f74 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8005552:	687b      	ldr	r3, [r7, #4]
 8005554:	681b      	ldr	r3, [r3, #0]
 8005556:	691a      	ldr	r2, [r3, #16]
 8005558:	687b      	ldr	r3, [r7, #4]
 800555a:	681b      	ldr	r3, [r3, #0]
 800555c:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8005560:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8005562:	687b      	ldr	r3, [r7, #4]
 8005564:	681b      	ldr	r3, [r3, #0]
 8005566:	695a      	ldr	r2, [r3, #20]
 8005568:	687b      	ldr	r3, [r7, #4]
 800556a:	681b      	ldr	r3, [r3, #0]
 800556c:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8005570:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8005572:	687b      	ldr	r3, [r7, #4]
 8005574:	681b      	ldr	r3, [r3, #0]
 8005576:	68da      	ldr	r2, [r3, #12]
 8005578:	687b      	ldr	r3, [r7, #4]
 800557a:	681b      	ldr	r3, [r3, #0]
 800557c:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8005580:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005582:	687b      	ldr	r3, [r7, #4]
 8005584:	2200      	movs	r2, #0
 8005586:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->gState = HAL_UART_STATE_READY;
 8005588:	687b      	ldr	r3, [r7, #4]
 800558a:	2220      	movs	r2, #32
 800558c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  huart->RxState = HAL_UART_STATE_READY;
 8005590:	687b      	ldr	r3, [r7, #4]
 8005592:	2220      	movs	r2, #32
 8005594:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8005598:	687b      	ldr	r3, [r7, #4]
 800559a:	2200      	movs	r2, #0
 800559c:	635a      	str	r2, [r3, #52]	@ 0x34

  return HAL_OK;
 800559e:	2300      	movs	r3, #0
}
 80055a0:	4618      	mov	r0, r3
 80055a2:	3708      	adds	r7, #8
 80055a4:	46bd      	mov	sp, r7
 80055a6:	bd80      	pop	{r7, pc}

080055a8 <HAL_UART_Transmit_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit_IT(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size)
{
 80055a8:	b480      	push	{r7}
 80055aa:	b085      	sub	sp, #20
 80055ac:	af00      	add	r7, sp, #0
 80055ae:	60f8      	str	r0, [r7, #12]
 80055b0:	60b9      	str	r1, [r7, #8]
 80055b2:	4613      	mov	r3, r2
 80055b4:	80fb      	strh	r3, [r7, #6]
  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80055b6:	68fb      	ldr	r3, [r7, #12]
 80055b8:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80055bc:	b2db      	uxtb	r3, r3
 80055be:	2b20      	cmp	r3, #32
 80055c0:	d121      	bne.n	8005606 <HAL_UART_Transmit_IT+0x5e>
  {
    if ((pData == NULL) || (Size == 0U))
 80055c2:	68bb      	ldr	r3, [r7, #8]
 80055c4:	2b00      	cmp	r3, #0
 80055c6:	d002      	beq.n	80055ce <HAL_UART_Transmit_IT+0x26>
 80055c8:	88fb      	ldrh	r3, [r7, #6]
 80055ca:	2b00      	cmp	r3, #0
 80055cc:	d101      	bne.n	80055d2 <HAL_UART_Transmit_IT+0x2a>
    {
      return HAL_ERROR;
 80055ce:	2301      	movs	r3, #1
 80055d0:	e01a      	b.n	8005608 <HAL_UART_Transmit_IT+0x60>
    }

    huart->pTxBuffPtr = pData;
 80055d2:	68fb      	ldr	r3, [r7, #12]
 80055d4:	68ba      	ldr	r2, [r7, #8]
 80055d6:	621a      	str	r2, [r3, #32]
    huart->TxXferSize = Size;
 80055d8:	68fb      	ldr	r3, [r7, #12]
 80055da:	88fa      	ldrh	r2, [r7, #6]
 80055dc:	849a      	strh	r2, [r3, #36]	@ 0x24
    huart->TxXferCount = Size;
 80055de:	68fb      	ldr	r3, [r7, #12]
 80055e0:	88fa      	ldrh	r2, [r7, #6]
 80055e2:	84da      	strh	r2, [r3, #38]	@ 0x26

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80055e4:	68fb      	ldr	r3, [r7, #12]
 80055e6:	2200      	movs	r2, #0
 80055e8:	645a      	str	r2, [r3, #68]	@ 0x44
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80055ea:	68fb      	ldr	r3, [r7, #12]
 80055ec:	2221      	movs	r2, #33	@ 0x21
 80055ee:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Enable the UART Transmit data register empty Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_TXE);
 80055f2:	68fb      	ldr	r3, [r7, #12]
 80055f4:	681b      	ldr	r3, [r3, #0]
 80055f6:	68da      	ldr	r2, [r3, #12]
 80055f8:	68fb      	ldr	r3, [r7, #12]
 80055fa:	681b      	ldr	r3, [r3, #0]
 80055fc:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
 8005600:	60da      	str	r2, [r3, #12]

    return HAL_OK;
 8005602:	2300      	movs	r3, #0
 8005604:	e000      	b.n	8005608 <HAL_UART_Transmit_IT+0x60>
  }
  else
  {
    return HAL_BUSY;
 8005606:	2302      	movs	r3, #2
  }
}
 8005608:	4618      	mov	r0, r3
 800560a:	3714      	adds	r7, #20
 800560c:	46bd      	mov	sp, r7
 800560e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005612:	4770      	bx	lr

08005614 <HAL_UART_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8005614:	b580      	push	{r7, lr}
 8005616:	b084      	sub	sp, #16
 8005618:	af00      	add	r7, sp, #0
 800561a:	60f8      	str	r0, [r7, #12]
 800561c:	60b9      	str	r1, [r7, #8]
 800561e:	4613      	mov	r3, r2
 8005620:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8005622:	68fb      	ldr	r3, [r7, #12]
 8005624:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8005628:	b2db      	uxtb	r3, r3
 800562a:	2b20      	cmp	r3, #32
 800562c:	d112      	bne.n	8005654 <HAL_UART_Receive_IT+0x40>
  {
    if ((pData == NULL) || (Size == 0U))
 800562e:	68bb      	ldr	r3, [r7, #8]
 8005630:	2b00      	cmp	r3, #0
 8005632:	d002      	beq.n	800563a <HAL_UART_Receive_IT+0x26>
 8005634:	88fb      	ldrh	r3, [r7, #6]
 8005636:	2b00      	cmp	r3, #0
 8005638:	d101      	bne.n	800563e <HAL_UART_Receive_IT+0x2a>
    {
      return HAL_ERROR;
 800563a:	2301      	movs	r3, #1
 800563c:	e00b      	b.n	8005656 <HAL_UART_Receive_IT+0x42>
    }

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800563e:	68fb      	ldr	r3, [r7, #12]
 8005640:	2200      	movs	r2, #0
 8005642:	631a      	str	r2, [r3, #48]	@ 0x30

    return (UART_Start_Receive_IT(huart, pData, Size));
 8005644:	88fb      	ldrh	r3, [r7, #6]
 8005646:	461a      	mov	r2, r3
 8005648:	68b9      	ldr	r1, [r7, #8]
 800564a:	68f8      	ldr	r0, [r7, #12]
 800564c:	f000 faba 	bl	8005bc4 <UART_Start_Receive_IT>
 8005650:	4603      	mov	r3, r0
 8005652:	e000      	b.n	8005656 <HAL_UART_Receive_IT+0x42>
  }
  else
  {
    return HAL_BUSY;
 8005654:	2302      	movs	r3, #2
  }
}
 8005656:	4618      	mov	r0, r3
 8005658:	3710      	adds	r7, #16
 800565a:	46bd      	mov	sp, r7
 800565c:	bd80      	pop	{r7, pc}
	...

08005660 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8005660:	b580      	push	{r7, lr}
 8005662:	b0ba      	sub	sp, #232	@ 0xe8
 8005664:	af00      	add	r7, sp, #0
 8005666:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8005668:	687b      	ldr	r3, [r7, #4]
 800566a:	681b      	ldr	r3, [r3, #0]
 800566c:	681b      	ldr	r3, [r3, #0]
 800566e:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8005672:	687b      	ldr	r3, [r7, #4]
 8005674:	681b      	ldr	r3, [r3, #0]
 8005676:	68db      	ldr	r3, [r3, #12]
 8005678:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 800567c:	687b      	ldr	r3, [r7, #4]
 800567e:	681b      	ldr	r3, [r3, #0]
 8005680:	695b      	ldr	r3, [r3, #20]
 8005682:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
  uint32_t errorflags = 0x00U;
 8005686:	2300      	movs	r3, #0
 8005688:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  uint32_t dmarequest = 0x00U;
 800568c:	2300      	movs	r3, #0
 800568e:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 8005692:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8005696:	f003 030f 	and.w	r3, r3, #15
 800569a:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  if (errorflags == RESET)
 800569e:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 80056a2:	2b00      	cmp	r3, #0
 80056a4:	d10f      	bne.n	80056c6 <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 80056a6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80056aa:	f003 0320 	and.w	r3, r3, #32
 80056ae:	2b00      	cmp	r3, #0
 80056b0:	d009      	beq.n	80056c6 <HAL_UART_IRQHandler+0x66>
 80056b2:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80056b6:	f003 0320 	and.w	r3, r3, #32
 80056ba:	2b00      	cmp	r3, #0
 80056bc:	d003      	beq.n	80056c6 <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 80056be:	6878      	ldr	r0, [r7, #4]
 80056c0:	f000 fb99 	bl	8005df6 <UART_Receive_IT>
      return;
 80056c4:	e25b      	b.n	8005b7e <HAL_UART_IRQHandler+0x51e>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 80056c6:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 80056ca:	2b00      	cmp	r3, #0
 80056cc:	f000 80de 	beq.w	800588c <HAL_UART_IRQHandler+0x22c>
 80056d0:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 80056d4:	f003 0301 	and.w	r3, r3, #1
 80056d8:	2b00      	cmp	r3, #0
 80056da:	d106      	bne.n	80056ea <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 80056dc:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80056e0:	f403 7390 	and.w	r3, r3, #288	@ 0x120
 80056e4:	2b00      	cmp	r3, #0
 80056e6:	f000 80d1 	beq.w	800588c <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 80056ea:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80056ee:	f003 0301 	and.w	r3, r3, #1
 80056f2:	2b00      	cmp	r3, #0
 80056f4:	d00b      	beq.n	800570e <HAL_UART_IRQHandler+0xae>
 80056f6:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80056fa:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80056fe:	2b00      	cmp	r3, #0
 8005700:	d005      	beq.n	800570e <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8005702:	687b      	ldr	r3, [r7, #4]
 8005704:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005706:	f043 0201 	orr.w	r2, r3, #1
 800570a:	687b      	ldr	r3, [r7, #4]
 800570c:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 800570e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8005712:	f003 0304 	and.w	r3, r3, #4
 8005716:	2b00      	cmp	r3, #0
 8005718:	d00b      	beq.n	8005732 <HAL_UART_IRQHandler+0xd2>
 800571a:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800571e:	f003 0301 	and.w	r3, r3, #1
 8005722:	2b00      	cmp	r3, #0
 8005724:	d005      	beq.n	8005732 <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8005726:	687b      	ldr	r3, [r7, #4]
 8005728:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800572a:	f043 0202 	orr.w	r2, r3, #2
 800572e:	687b      	ldr	r3, [r7, #4]
 8005730:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8005732:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8005736:	f003 0302 	and.w	r3, r3, #2
 800573a:	2b00      	cmp	r3, #0
 800573c:	d00b      	beq.n	8005756 <HAL_UART_IRQHandler+0xf6>
 800573e:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8005742:	f003 0301 	and.w	r3, r3, #1
 8005746:	2b00      	cmp	r3, #0
 8005748:	d005      	beq.n	8005756 <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 800574a:	687b      	ldr	r3, [r7, #4]
 800574c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800574e:	f043 0204 	orr.w	r2, r3, #4
 8005752:	687b      	ldr	r3, [r7, #4]
 8005754:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 8005756:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800575a:	f003 0308 	and.w	r3, r3, #8
 800575e:	2b00      	cmp	r3, #0
 8005760:	d011      	beq.n	8005786 <HAL_UART_IRQHandler+0x126>
 8005762:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8005766:	f003 0320 	and.w	r3, r3, #32
 800576a:	2b00      	cmp	r3, #0
 800576c:	d105      	bne.n	800577a <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 800576e:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8005772:	f003 0301 	and.w	r3, r3, #1
 8005776:	2b00      	cmp	r3, #0
 8005778:	d005      	beq.n	8005786 <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 800577a:	687b      	ldr	r3, [r7, #4]
 800577c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800577e:	f043 0208 	orr.w	r2, r3, #8
 8005782:	687b      	ldr	r3, [r7, #4]
 8005784:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8005786:	687b      	ldr	r3, [r7, #4]
 8005788:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800578a:	2b00      	cmp	r3, #0
 800578c:	f000 81f2 	beq.w	8005b74 <HAL_UART_IRQHandler+0x514>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8005790:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8005794:	f003 0320 	and.w	r3, r3, #32
 8005798:	2b00      	cmp	r3, #0
 800579a:	d008      	beq.n	80057ae <HAL_UART_IRQHandler+0x14e>
 800579c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80057a0:	f003 0320 	and.w	r3, r3, #32
 80057a4:	2b00      	cmp	r3, #0
 80057a6:	d002      	beq.n	80057ae <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 80057a8:	6878      	ldr	r0, [r7, #4]
 80057aa:	f000 fb24 	bl	8005df6 <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 80057ae:	687b      	ldr	r3, [r7, #4]
 80057b0:	681b      	ldr	r3, [r3, #0]
 80057b2:	695b      	ldr	r3, [r3, #20]
 80057b4:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80057b8:	2b40      	cmp	r3, #64	@ 0x40
 80057ba:	bf0c      	ite	eq
 80057bc:	2301      	moveq	r3, #1
 80057be:	2300      	movne	r3, #0
 80057c0:	b2db      	uxtb	r3, r3
 80057c2:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 80057c6:	687b      	ldr	r3, [r7, #4]
 80057c8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80057ca:	f003 0308 	and.w	r3, r3, #8
 80057ce:	2b00      	cmp	r3, #0
 80057d0:	d103      	bne.n	80057da <HAL_UART_IRQHandler+0x17a>
 80057d2:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 80057d6:	2b00      	cmp	r3, #0
 80057d8:	d04f      	beq.n	800587a <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 80057da:	6878      	ldr	r0, [r7, #4]
 80057dc:	f000 fa2c 	bl	8005c38 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80057e0:	687b      	ldr	r3, [r7, #4]
 80057e2:	681b      	ldr	r3, [r3, #0]
 80057e4:	695b      	ldr	r3, [r3, #20]
 80057e6:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80057ea:	2b40      	cmp	r3, #64	@ 0x40
 80057ec:	d141      	bne.n	8005872 <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80057ee:	687b      	ldr	r3, [r7, #4]
 80057f0:	681b      	ldr	r3, [r3, #0]
 80057f2:	3314      	adds	r3, #20
 80057f4:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80057f8:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 80057fc:	e853 3f00 	ldrex	r3, [r3]
 8005800:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
   return(result);
 8005804:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8005808:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800580c:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8005810:	687b      	ldr	r3, [r7, #4]
 8005812:	681b      	ldr	r3, [r3, #0]
 8005814:	3314      	adds	r3, #20
 8005816:	f8d7 20d0 	ldr.w	r2, [r7, #208]	@ 0xd0
 800581a:	f8c7 20a8 	str.w	r2, [r7, #168]	@ 0xa8
 800581e:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005822:	f8d7 10a4 	ldr.w	r1, [r7, #164]	@ 0xa4
 8005826:	f8d7 20a8 	ldr.w	r2, [r7, #168]	@ 0xa8
 800582a:	e841 2300 	strex	r3, r2, [r1]
 800582e:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
   return(result);
 8005832:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 8005836:	2b00      	cmp	r3, #0
 8005838:	d1d9      	bne.n	80057ee <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 800583a:	687b      	ldr	r3, [r7, #4]
 800583c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800583e:	2b00      	cmp	r3, #0
 8005840:	d013      	beq.n	800586a <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8005842:	687b      	ldr	r3, [r7, #4]
 8005844:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005846:	4a7e      	ldr	r2, [pc, #504]	@ (8005a40 <HAL_UART_IRQHandler+0x3e0>)
 8005848:	651a      	str	r2, [r3, #80]	@ 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 800584a:	687b      	ldr	r3, [r7, #4]
 800584c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800584e:	4618      	mov	r0, r3
 8005850:	f7fd fb4e 	bl	8002ef0 <HAL_DMA_Abort_IT>
 8005854:	4603      	mov	r3, r0
 8005856:	2b00      	cmp	r3, #0
 8005858:	d016      	beq.n	8005888 <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 800585a:	687b      	ldr	r3, [r7, #4]
 800585c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800585e:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8005860:	687a      	ldr	r2, [r7, #4]
 8005862:	6bd2      	ldr	r2, [r2, #60]	@ 0x3c
 8005864:	4610      	mov	r0, r2
 8005866:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005868:	e00e      	b.n	8005888 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 800586a:	6878      	ldr	r0, [r7, #4]
 800586c:	f000 f994 	bl	8005b98 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005870:	e00a      	b.n	8005888 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8005872:	6878      	ldr	r0, [r7, #4]
 8005874:	f000 f990 	bl	8005b98 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005878:	e006      	b.n	8005888 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 800587a:	6878      	ldr	r0, [r7, #4]
 800587c:	f000 f98c 	bl	8005b98 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005880:	687b      	ldr	r3, [r7, #4]
 8005882:	2200      	movs	r2, #0
 8005884:	645a      	str	r2, [r3, #68]	@ 0x44
      }
    }
    return;
 8005886:	e175      	b.n	8005b74 <HAL_UART_IRQHandler+0x514>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005888:	bf00      	nop
    return;
 800588a:	e173      	b.n	8005b74 <HAL_UART_IRQHandler+0x514>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800588c:	687b      	ldr	r3, [r7, #4]
 800588e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005890:	2b01      	cmp	r3, #1
 8005892:	f040 814f 	bne.w	8005b34 <HAL_UART_IRQHandler+0x4d4>
      && ((isrflags & USART_SR_IDLE) != 0U)
 8005896:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800589a:	f003 0310 	and.w	r3, r3, #16
 800589e:	2b00      	cmp	r3, #0
 80058a0:	f000 8148 	beq.w	8005b34 <HAL_UART_IRQHandler+0x4d4>
      && ((cr1its & USART_SR_IDLE) != 0U))
 80058a4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80058a8:	f003 0310 	and.w	r3, r3, #16
 80058ac:	2b00      	cmp	r3, #0
 80058ae:	f000 8141 	beq.w	8005b34 <HAL_UART_IRQHandler+0x4d4>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 80058b2:	2300      	movs	r3, #0
 80058b4:	60bb      	str	r3, [r7, #8]
 80058b6:	687b      	ldr	r3, [r7, #4]
 80058b8:	681b      	ldr	r3, [r3, #0]
 80058ba:	681b      	ldr	r3, [r3, #0]
 80058bc:	60bb      	str	r3, [r7, #8]
 80058be:	687b      	ldr	r3, [r7, #4]
 80058c0:	681b      	ldr	r3, [r3, #0]
 80058c2:	685b      	ldr	r3, [r3, #4]
 80058c4:	60bb      	str	r3, [r7, #8]
 80058c6:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80058c8:	687b      	ldr	r3, [r7, #4]
 80058ca:	681b      	ldr	r3, [r3, #0]
 80058cc:	695b      	ldr	r3, [r3, #20]
 80058ce:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80058d2:	2b40      	cmp	r3, #64	@ 0x40
 80058d4:	f040 80b6 	bne.w	8005a44 <HAL_UART_IRQHandler+0x3e4>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 80058d8:	687b      	ldr	r3, [r7, #4]
 80058da:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80058dc:	681b      	ldr	r3, [r3, #0]
 80058de:	685b      	ldr	r3, [r3, #4]
 80058e0:	f8a7 30be 	strh.w	r3, [r7, #190]	@ 0xbe
      if ((nb_remaining_rx_data > 0U)
 80058e4:	f8b7 30be 	ldrh.w	r3, [r7, #190]	@ 0xbe
 80058e8:	2b00      	cmp	r3, #0
 80058ea:	f000 8145 	beq.w	8005b78 <HAL_UART_IRQHandler+0x518>
          && (nb_remaining_rx_data < huart->RxXferSize))
 80058ee:	687b      	ldr	r3, [r7, #4]
 80058f0:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 80058f2:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 80058f6:	429a      	cmp	r2, r3
 80058f8:	f080 813e 	bcs.w	8005b78 <HAL_UART_IRQHandler+0x518>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 80058fc:	687b      	ldr	r3, [r7, #4]
 80058fe:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 8005902:	85da      	strh	r2, [r3, #46]	@ 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8005904:	687b      	ldr	r3, [r7, #4]
 8005906:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005908:	69db      	ldr	r3, [r3, #28]
 800590a:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800590e:	f000 8088 	beq.w	8005a22 <HAL_UART_IRQHandler+0x3c2>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8005912:	687b      	ldr	r3, [r7, #4]
 8005914:	681b      	ldr	r3, [r3, #0]
 8005916:	330c      	adds	r3, #12
 8005918:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800591c:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8005920:	e853 3f00 	ldrex	r3, [r3]
 8005924:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
   return(result);
 8005928:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 800592c:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8005930:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8005934:	687b      	ldr	r3, [r7, #4]
 8005936:	681b      	ldr	r3, [r3, #0]
 8005938:	330c      	adds	r3, #12
 800593a:	f8d7 20b8 	ldr.w	r2, [r7, #184]	@ 0xb8
 800593e:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 8005942:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005946:	f8d7 1090 	ldr.w	r1, [r7, #144]	@ 0x90
 800594a:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 800594e:	e841 2300 	strex	r3, r2, [r1]
 8005952:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
   return(result);
 8005956:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 800595a:	2b00      	cmp	r3, #0
 800595c:	d1d9      	bne.n	8005912 <HAL_UART_IRQHandler+0x2b2>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800595e:	687b      	ldr	r3, [r7, #4]
 8005960:	681b      	ldr	r3, [r3, #0]
 8005962:	3314      	adds	r3, #20
 8005964:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005966:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8005968:	e853 3f00 	ldrex	r3, [r3]
 800596c:	673b      	str	r3, [r7, #112]	@ 0x70
   return(result);
 800596e:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8005970:	f023 0301 	bic.w	r3, r3, #1
 8005974:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8005978:	687b      	ldr	r3, [r7, #4]
 800597a:	681b      	ldr	r3, [r3, #0]
 800597c:	3314      	adds	r3, #20
 800597e:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 8005982:	f8c7 2080 	str.w	r2, [r7, #128]	@ 0x80
 8005986:	67fb      	str	r3, [r7, #124]	@ 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005988:	6ff9      	ldr	r1, [r7, #124]	@ 0x7c
 800598a:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 800598e:	e841 2300 	strex	r3, r2, [r1]
 8005992:	67bb      	str	r3, [r7, #120]	@ 0x78
   return(result);
 8005994:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8005996:	2b00      	cmp	r3, #0
 8005998:	d1e1      	bne.n	800595e <HAL_UART_IRQHandler+0x2fe>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800599a:	687b      	ldr	r3, [r7, #4]
 800599c:	681b      	ldr	r3, [r3, #0]
 800599e:	3314      	adds	r3, #20
 80059a0:	663b      	str	r3, [r7, #96]	@ 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80059a2:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 80059a4:	e853 3f00 	ldrex	r3, [r3]
 80059a8:	65fb      	str	r3, [r7, #92]	@ 0x5c
   return(result);
 80059aa:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 80059ac:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80059b0:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 80059b4:	687b      	ldr	r3, [r7, #4]
 80059b6:	681b      	ldr	r3, [r3, #0]
 80059b8:	3314      	adds	r3, #20
 80059ba:	f8d7 20b0 	ldr.w	r2, [r7, #176]	@ 0xb0
 80059be:	66fa      	str	r2, [r7, #108]	@ 0x6c
 80059c0:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80059c2:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 80059c4:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 80059c6:	e841 2300 	strex	r3, r2, [r1]
 80059ca:	667b      	str	r3, [r7, #100]	@ 0x64
   return(result);
 80059cc:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 80059ce:	2b00      	cmp	r3, #0
 80059d0:	d1e3      	bne.n	800599a <HAL_UART_IRQHandler+0x33a>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 80059d2:	687b      	ldr	r3, [r7, #4]
 80059d4:	2220      	movs	r2, #32
 80059d6:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80059da:	687b      	ldr	r3, [r7, #4]
 80059dc:	2200      	movs	r2, #0
 80059de:	631a      	str	r2, [r3, #48]	@ 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80059e0:	687b      	ldr	r3, [r7, #4]
 80059e2:	681b      	ldr	r3, [r3, #0]
 80059e4:	330c      	adds	r3, #12
 80059e6:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80059e8:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80059ea:	e853 3f00 	ldrex	r3, [r3]
 80059ee:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 80059f0:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80059f2:	f023 0310 	bic.w	r3, r3, #16
 80059f6:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 80059fa:	687b      	ldr	r3, [r7, #4]
 80059fc:	681b      	ldr	r3, [r3, #0]
 80059fe:	330c      	adds	r3, #12
 8005a00:	f8d7 20ac 	ldr.w	r2, [r7, #172]	@ 0xac
 8005a04:	65ba      	str	r2, [r7, #88]	@ 0x58
 8005a06:	657b      	str	r3, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005a08:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 8005a0a:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8005a0c:	e841 2300 	strex	r3, r2, [r1]
 8005a10:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 8005a12:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8005a14:	2b00      	cmp	r3, #0
 8005a16:	d1e3      	bne.n	80059e0 <HAL_UART_IRQHandler+0x380>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8005a18:	687b      	ldr	r3, [r7, #4]
 8005a1a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005a1c:	4618      	mov	r0, r3
 8005a1e:	f7fd f9f7 	bl	8002e10 <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
        In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8005a22:	687b      	ldr	r3, [r7, #4]
 8005a24:	2202      	movs	r2, #2
 8005a26:	635a      	str	r2, [r3, #52]	@ 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8005a28:	687b      	ldr	r3, [r7, #4]
 8005a2a:	8d9a      	ldrh	r2, [r3, #44]	@ 0x2c
 8005a2c:	687b      	ldr	r3, [r7, #4]
 8005a2e:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8005a30:	b29b      	uxth	r3, r3
 8005a32:	1ad3      	subs	r3, r2, r3
 8005a34:	b29b      	uxth	r3, r3
 8005a36:	4619      	mov	r1, r3
 8005a38:	6878      	ldr	r0, [r7, #4]
 8005a3a:	f000 f8b7 	bl	8005bac <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8005a3e:	e09b      	b.n	8005b78 <HAL_UART_IRQHandler+0x518>
 8005a40:	08005cff 	.word	0x08005cff
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8005a44:	687b      	ldr	r3, [r7, #4]
 8005a46:	8d9a      	ldrh	r2, [r3, #44]	@ 0x2c
 8005a48:	687b      	ldr	r3, [r7, #4]
 8005a4a:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8005a4c:	b29b      	uxth	r3, r3
 8005a4e:	1ad3      	subs	r3, r2, r3
 8005a50:	f8a7 30ce 	strh.w	r3, [r7, #206]	@ 0xce
      if ((huart->RxXferCount > 0U)
 8005a54:	687b      	ldr	r3, [r7, #4]
 8005a56:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8005a58:	b29b      	uxth	r3, r3
 8005a5a:	2b00      	cmp	r3, #0
 8005a5c:	f000 808e 	beq.w	8005b7c <HAL_UART_IRQHandler+0x51c>
          && (nb_rx_data > 0U))
 8005a60:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 8005a64:	2b00      	cmp	r3, #0
 8005a66:	f000 8089 	beq.w	8005b7c <HAL_UART_IRQHandler+0x51c>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8005a6a:	687b      	ldr	r3, [r7, #4]
 8005a6c:	681b      	ldr	r3, [r3, #0]
 8005a6e:	330c      	adds	r3, #12
 8005a70:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005a72:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005a74:	e853 3f00 	ldrex	r3, [r3]
 8005a78:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8005a7a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005a7c:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8005a80:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8005a84:	687b      	ldr	r3, [r7, #4]
 8005a86:	681b      	ldr	r3, [r3, #0]
 8005a88:	330c      	adds	r3, #12
 8005a8a:	f8d7 20c8 	ldr.w	r2, [r7, #200]	@ 0xc8
 8005a8e:	647a      	str	r2, [r7, #68]	@ 0x44
 8005a90:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005a92:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8005a94:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8005a96:	e841 2300 	strex	r3, r2, [r1]
 8005a9a:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8005a9c:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8005a9e:	2b00      	cmp	r3, #0
 8005aa0:	d1e3      	bne.n	8005a6a <HAL_UART_IRQHandler+0x40a>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005aa2:	687b      	ldr	r3, [r7, #4]
 8005aa4:	681b      	ldr	r3, [r3, #0]
 8005aa6:	3314      	adds	r3, #20
 8005aa8:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005aaa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005aac:	e853 3f00 	ldrex	r3, [r3]
 8005ab0:	623b      	str	r3, [r7, #32]
   return(result);
 8005ab2:	6a3b      	ldr	r3, [r7, #32]
 8005ab4:	f023 0301 	bic.w	r3, r3, #1
 8005ab8:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 8005abc:	687b      	ldr	r3, [r7, #4]
 8005abe:	681b      	ldr	r3, [r3, #0]
 8005ac0:	3314      	adds	r3, #20
 8005ac2:	f8d7 20c4 	ldr.w	r2, [r7, #196]	@ 0xc4
 8005ac6:	633a      	str	r2, [r7, #48]	@ 0x30
 8005ac8:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005aca:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8005acc:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8005ace:	e841 2300 	strex	r3, r2, [r1]
 8005ad2:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8005ad4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005ad6:	2b00      	cmp	r3, #0
 8005ad8:	d1e3      	bne.n	8005aa2 <HAL_UART_IRQHandler+0x442>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8005ada:	687b      	ldr	r3, [r7, #4]
 8005adc:	2220      	movs	r2, #32
 8005ade:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005ae2:	687b      	ldr	r3, [r7, #4]
 8005ae4:	2200      	movs	r2, #0
 8005ae6:	631a      	str	r2, [r3, #48]	@ 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005ae8:	687b      	ldr	r3, [r7, #4]
 8005aea:	681b      	ldr	r3, [r3, #0]
 8005aec:	330c      	adds	r3, #12
 8005aee:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005af0:	693b      	ldr	r3, [r7, #16]
 8005af2:	e853 3f00 	ldrex	r3, [r3]
 8005af6:	60fb      	str	r3, [r7, #12]
   return(result);
 8005af8:	68fb      	ldr	r3, [r7, #12]
 8005afa:	f023 0310 	bic.w	r3, r3, #16
 8005afe:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8005b02:	687b      	ldr	r3, [r7, #4]
 8005b04:	681b      	ldr	r3, [r3, #0]
 8005b06:	330c      	adds	r3, #12
 8005b08:	f8d7 20c0 	ldr.w	r2, [r7, #192]	@ 0xc0
 8005b0c:	61fa      	str	r2, [r7, #28]
 8005b0e:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005b10:	69b9      	ldr	r1, [r7, #24]
 8005b12:	69fa      	ldr	r2, [r7, #28]
 8005b14:	e841 2300 	strex	r3, r2, [r1]
 8005b18:	617b      	str	r3, [r7, #20]
   return(result);
 8005b1a:	697b      	ldr	r3, [r7, #20]
 8005b1c:	2b00      	cmp	r3, #0
 8005b1e:	d1e3      	bne.n	8005ae8 <HAL_UART_IRQHandler+0x488>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8005b20:	687b      	ldr	r3, [r7, #4]
 8005b22:	2202      	movs	r2, #2
 8005b24:	635a      	str	r2, [r3, #52]	@ 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8005b26:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 8005b2a:	4619      	mov	r1, r3
 8005b2c:	6878      	ldr	r0, [r7, #4]
 8005b2e:	f000 f83d 	bl	8005bac <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8005b32:	e023      	b.n	8005b7c <HAL_UART_IRQHandler+0x51c>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8005b34:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8005b38:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8005b3c:	2b00      	cmp	r3, #0
 8005b3e:	d009      	beq.n	8005b54 <HAL_UART_IRQHandler+0x4f4>
 8005b40:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8005b44:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8005b48:	2b00      	cmp	r3, #0
 8005b4a:	d003      	beq.n	8005b54 <HAL_UART_IRQHandler+0x4f4>
  {
    UART_Transmit_IT(huart);
 8005b4c:	6878      	ldr	r0, [r7, #4]
 8005b4e:	f000 f8ea 	bl	8005d26 <UART_Transmit_IT>
    return;
 8005b52:	e014      	b.n	8005b7e <HAL_UART_IRQHandler+0x51e>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8005b54:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8005b58:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005b5c:	2b00      	cmp	r3, #0
 8005b5e:	d00e      	beq.n	8005b7e <HAL_UART_IRQHandler+0x51e>
 8005b60:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8005b64:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005b68:	2b00      	cmp	r3, #0
 8005b6a:	d008      	beq.n	8005b7e <HAL_UART_IRQHandler+0x51e>
  {
    UART_EndTransmit_IT(huart);
 8005b6c:	6878      	ldr	r0, [r7, #4]
 8005b6e:	f000 f92a 	bl	8005dc6 <UART_EndTransmit_IT>
    return;
 8005b72:	e004      	b.n	8005b7e <HAL_UART_IRQHandler+0x51e>
    return;
 8005b74:	bf00      	nop
 8005b76:	e002      	b.n	8005b7e <HAL_UART_IRQHandler+0x51e>
      return;
 8005b78:	bf00      	nop
 8005b7a:	e000      	b.n	8005b7e <HAL_UART_IRQHandler+0x51e>
      return;
 8005b7c:	bf00      	nop
  }
}
 8005b7e:	37e8      	adds	r7, #232	@ 0xe8
 8005b80:	46bd      	mov	sp, r7
 8005b82:	bd80      	pop	{r7, pc}

08005b84 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8005b84:	b480      	push	{r7}
 8005b86:	b083      	sub	sp, #12
 8005b88:	af00      	add	r7, sp, #0
 8005b8a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 8005b8c:	bf00      	nop
 8005b8e:	370c      	adds	r7, #12
 8005b90:	46bd      	mov	sp, r7
 8005b92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b96:	4770      	bx	lr

08005b98 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8005b98:	b480      	push	{r7}
 8005b9a:	b083      	sub	sp, #12
 8005b9c:	af00      	add	r7, sp, #0
 8005b9e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 8005ba0:	bf00      	nop
 8005ba2:	370c      	adds	r7, #12
 8005ba4:	46bd      	mov	sp, r7
 8005ba6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005baa:	4770      	bx	lr

08005bac <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8005bac:	b480      	push	{r7}
 8005bae:	b083      	sub	sp, #12
 8005bb0:	af00      	add	r7, sp, #0
 8005bb2:	6078      	str	r0, [r7, #4]
 8005bb4:	460b      	mov	r3, r1
 8005bb6:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8005bb8:	bf00      	nop
 8005bba:	370c      	adds	r7, #12
 8005bbc:	46bd      	mov	sp, r7
 8005bbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005bc2:	4770      	bx	lr

08005bc4 <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8005bc4:	b480      	push	{r7}
 8005bc6:	b085      	sub	sp, #20
 8005bc8:	af00      	add	r7, sp, #0
 8005bca:	60f8      	str	r0, [r7, #12]
 8005bcc:	60b9      	str	r1, [r7, #8]
 8005bce:	4613      	mov	r3, r2
 8005bd0:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 8005bd2:	68fb      	ldr	r3, [r7, #12]
 8005bd4:	68ba      	ldr	r2, [r7, #8]
 8005bd6:	629a      	str	r2, [r3, #40]	@ 0x28
  huart->RxXferSize = Size;
 8005bd8:	68fb      	ldr	r3, [r7, #12]
 8005bda:	88fa      	ldrh	r2, [r7, #6]
 8005bdc:	859a      	strh	r2, [r3, #44]	@ 0x2c
  huart->RxXferCount = Size;
 8005bde:	68fb      	ldr	r3, [r7, #12]
 8005be0:	88fa      	ldrh	r2, [r7, #6]
 8005be2:	85da      	strh	r2, [r3, #46]	@ 0x2e

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005be4:	68fb      	ldr	r3, [r7, #12]
 8005be6:	2200      	movs	r2, #0
 8005be8:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8005bea:	68fb      	ldr	r3, [r7, #12]
 8005bec:	2222      	movs	r2, #34	@ 0x22
 8005bee:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

  if (huart->Init.Parity != UART_PARITY_NONE)
 8005bf2:	68fb      	ldr	r3, [r7, #12]
 8005bf4:	691b      	ldr	r3, [r3, #16]
 8005bf6:	2b00      	cmp	r3, #0
 8005bf8:	d007      	beq.n	8005c0a <UART_Start_Receive_IT+0x46>
  {
    /* Enable the UART Parity Error Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_PE);
 8005bfa:	68fb      	ldr	r3, [r7, #12]
 8005bfc:	681b      	ldr	r3, [r3, #0]
 8005bfe:	68da      	ldr	r2, [r3, #12]
 8005c00:	68fb      	ldr	r3, [r7, #12]
 8005c02:	681b      	ldr	r3, [r3, #0]
 8005c04:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8005c08:	60da      	str	r2, [r3, #12]
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  __HAL_UART_ENABLE_IT(huart, UART_IT_ERR);
 8005c0a:	68fb      	ldr	r3, [r7, #12]
 8005c0c:	681b      	ldr	r3, [r3, #0]
 8005c0e:	695a      	ldr	r2, [r3, #20]
 8005c10:	68fb      	ldr	r3, [r7, #12]
 8005c12:	681b      	ldr	r3, [r3, #0]
 8005c14:	f042 0201 	orr.w	r2, r2, #1
 8005c18:	615a      	str	r2, [r3, #20]

  /* Enable the UART Data Register not empty Interrupt */
  __HAL_UART_ENABLE_IT(huart, UART_IT_RXNE);
 8005c1a:	68fb      	ldr	r3, [r7, #12]
 8005c1c:	681b      	ldr	r3, [r3, #0]
 8005c1e:	68da      	ldr	r2, [r3, #12]
 8005c20:	68fb      	ldr	r3, [r7, #12]
 8005c22:	681b      	ldr	r3, [r3, #0]
 8005c24:	f042 0220 	orr.w	r2, r2, #32
 8005c28:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 8005c2a:	2300      	movs	r3, #0
}
 8005c2c:	4618      	mov	r0, r3
 8005c2e:	3714      	adds	r7, #20
 8005c30:	46bd      	mov	sp, r7
 8005c32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c36:	4770      	bx	lr

08005c38 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8005c38:	b480      	push	{r7}
 8005c3a:	b095      	sub	sp, #84	@ 0x54
 8005c3c:	af00      	add	r7, sp, #0
 8005c3e:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8005c40:	687b      	ldr	r3, [r7, #4]
 8005c42:	681b      	ldr	r3, [r3, #0]
 8005c44:	330c      	adds	r3, #12
 8005c46:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005c48:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005c4a:	e853 3f00 	ldrex	r3, [r3]
 8005c4e:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8005c50:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005c52:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8005c56:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8005c58:	687b      	ldr	r3, [r7, #4]
 8005c5a:	681b      	ldr	r3, [r3, #0]
 8005c5c:	330c      	adds	r3, #12
 8005c5e:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8005c60:	643a      	str	r2, [r7, #64]	@ 0x40
 8005c62:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005c64:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8005c66:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8005c68:	e841 2300 	strex	r3, r2, [r1]
 8005c6c:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8005c6e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005c70:	2b00      	cmp	r3, #0
 8005c72:	d1e5      	bne.n	8005c40 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005c74:	687b      	ldr	r3, [r7, #4]
 8005c76:	681b      	ldr	r3, [r3, #0]
 8005c78:	3314      	adds	r3, #20
 8005c7a:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005c7c:	6a3b      	ldr	r3, [r7, #32]
 8005c7e:	e853 3f00 	ldrex	r3, [r3]
 8005c82:	61fb      	str	r3, [r7, #28]
   return(result);
 8005c84:	69fb      	ldr	r3, [r7, #28]
 8005c86:	f023 0301 	bic.w	r3, r3, #1
 8005c8a:	64bb      	str	r3, [r7, #72]	@ 0x48
 8005c8c:	687b      	ldr	r3, [r7, #4]
 8005c8e:	681b      	ldr	r3, [r3, #0]
 8005c90:	3314      	adds	r3, #20
 8005c92:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8005c94:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8005c96:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005c98:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8005c9a:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8005c9c:	e841 2300 	strex	r3, r2, [r1]
 8005ca0:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8005ca2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005ca4:	2b00      	cmp	r3, #0
 8005ca6:	d1e5      	bne.n	8005c74 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005ca8:	687b      	ldr	r3, [r7, #4]
 8005caa:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005cac:	2b01      	cmp	r3, #1
 8005cae:	d119      	bne.n	8005ce4 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005cb0:	687b      	ldr	r3, [r7, #4]
 8005cb2:	681b      	ldr	r3, [r3, #0]
 8005cb4:	330c      	adds	r3, #12
 8005cb6:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005cb8:	68fb      	ldr	r3, [r7, #12]
 8005cba:	e853 3f00 	ldrex	r3, [r3]
 8005cbe:	60bb      	str	r3, [r7, #8]
   return(result);
 8005cc0:	68bb      	ldr	r3, [r7, #8]
 8005cc2:	f023 0310 	bic.w	r3, r3, #16
 8005cc6:	647b      	str	r3, [r7, #68]	@ 0x44
 8005cc8:	687b      	ldr	r3, [r7, #4]
 8005cca:	681b      	ldr	r3, [r3, #0]
 8005ccc:	330c      	adds	r3, #12
 8005cce:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8005cd0:	61ba      	str	r2, [r7, #24]
 8005cd2:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005cd4:	6979      	ldr	r1, [r7, #20]
 8005cd6:	69ba      	ldr	r2, [r7, #24]
 8005cd8:	e841 2300 	strex	r3, r2, [r1]
 8005cdc:	613b      	str	r3, [r7, #16]
   return(result);
 8005cde:	693b      	ldr	r3, [r7, #16]
 8005ce0:	2b00      	cmp	r3, #0
 8005ce2:	d1e5      	bne.n	8005cb0 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8005ce4:	687b      	ldr	r3, [r7, #4]
 8005ce6:	2220      	movs	r2, #32
 8005ce8:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005cec:	687b      	ldr	r3, [r7, #4]
 8005cee:	2200      	movs	r2, #0
 8005cf0:	631a      	str	r2, [r3, #48]	@ 0x30
}
 8005cf2:	bf00      	nop
 8005cf4:	3754      	adds	r7, #84	@ 0x54
 8005cf6:	46bd      	mov	sp, r7
 8005cf8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005cfc:	4770      	bx	lr

08005cfe <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8005cfe:	b580      	push	{r7, lr}
 8005d00:	b084      	sub	sp, #16
 8005d02:	af00      	add	r7, sp, #0
 8005d04:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8005d06:	687b      	ldr	r3, [r7, #4]
 8005d08:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005d0a:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 8005d0c:	68fb      	ldr	r3, [r7, #12]
 8005d0e:	2200      	movs	r2, #0
 8005d10:	85da      	strh	r2, [r3, #46]	@ 0x2e
  huart->TxXferCount = 0x00U;
 8005d12:	68fb      	ldr	r3, [r7, #12]
 8005d14:	2200      	movs	r2, #0
 8005d16:	84da      	strh	r2, [r3, #38]	@ 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8005d18:	68f8      	ldr	r0, [r7, #12]
 8005d1a:	f7ff ff3d 	bl	8005b98 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8005d1e:	bf00      	nop
 8005d20:	3710      	adds	r7, #16
 8005d22:	46bd      	mov	sp, r7
 8005d24:	bd80      	pop	{r7, pc}

08005d26 <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 8005d26:	b480      	push	{r7}
 8005d28:	b085      	sub	sp, #20
 8005d2a:	af00      	add	r7, sp, #0
 8005d2c:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8005d2e:	687b      	ldr	r3, [r7, #4]
 8005d30:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8005d34:	b2db      	uxtb	r3, r3
 8005d36:	2b21      	cmp	r3, #33	@ 0x21
 8005d38:	d13e      	bne.n	8005db8 <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8005d3a:	687b      	ldr	r3, [r7, #4]
 8005d3c:	689b      	ldr	r3, [r3, #8]
 8005d3e:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8005d42:	d114      	bne.n	8005d6e <UART_Transmit_IT+0x48>
 8005d44:	687b      	ldr	r3, [r7, #4]
 8005d46:	691b      	ldr	r3, [r3, #16]
 8005d48:	2b00      	cmp	r3, #0
 8005d4a:	d110      	bne.n	8005d6e <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 8005d4c:	687b      	ldr	r3, [r7, #4]
 8005d4e:	6a1b      	ldr	r3, [r3, #32]
 8005d50:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 8005d52:	68fb      	ldr	r3, [r7, #12]
 8005d54:	881b      	ldrh	r3, [r3, #0]
 8005d56:	461a      	mov	r2, r3
 8005d58:	687b      	ldr	r3, [r7, #4]
 8005d5a:	681b      	ldr	r3, [r3, #0]
 8005d5c:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8005d60:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 8005d62:	687b      	ldr	r3, [r7, #4]
 8005d64:	6a1b      	ldr	r3, [r3, #32]
 8005d66:	1c9a      	adds	r2, r3, #2
 8005d68:	687b      	ldr	r3, [r7, #4]
 8005d6a:	621a      	str	r2, [r3, #32]
 8005d6c:	e008      	b.n	8005d80 <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 8005d6e:	687b      	ldr	r3, [r7, #4]
 8005d70:	6a1b      	ldr	r3, [r3, #32]
 8005d72:	1c59      	adds	r1, r3, #1
 8005d74:	687a      	ldr	r2, [r7, #4]
 8005d76:	6211      	str	r1, [r2, #32]
 8005d78:	781a      	ldrb	r2, [r3, #0]
 8005d7a:	687b      	ldr	r3, [r7, #4]
 8005d7c:	681b      	ldr	r3, [r3, #0]
 8005d7e:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 8005d80:	687b      	ldr	r3, [r7, #4]
 8005d82:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 8005d84:	b29b      	uxth	r3, r3
 8005d86:	3b01      	subs	r3, #1
 8005d88:	b29b      	uxth	r3, r3
 8005d8a:	687a      	ldr	r2, [r7, #4]
 8005d8c:	4619      	mov	r1, r3
 8005d8e:	84d1      	strh	r1, [r2, #38]	@ 0x26
 8005d90:	2b00      	cmp	r3, #0
 8005d92:	d10f      	bne.n	8005db4 <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8005d94:	687b      	ldr	r3, [r7, #4]
 8005d96:	681b      	ldr	r3, [r3, #0]
 8005d98:	68da      	ldr	r2, [r3, #12]
 8005d9a:	687b      	ldr	r3, [r7, #4]
 8005d9c:	681b      	ldr	r3, [r3, #0]
 8005d9e:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8005da2:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 8005da4:	687b      	ldr	r3, [r7, #4]
 8005da6:	681b      	ldr	r3, [r3, #0]
 8005da8:	68da      	ldr	r2, [r3, #12]
 8005daa:	687b      	ldr	r3, [r7, #4]
 8005dac:	681b      	ldr	r3, [r3, #0]
 8005dae:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8005db2:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 8005db4:	2300      	movs	r3, #0
 8005db6:	e000      	b.n	8005dba <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 8005db8:	2302      	movs	r3, #2
  }
}
 8005dba:	4618      	mov	r0, r3
 8005dbc:	3714      	adds	r7, #20
 8005dbe:	46bd      	mov	sp, r7
 8005dc0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005dc4:	4770      	bx	lr

08005dc6 <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8005dc6:	b580      	push	{r7, lr}
 8005dc8:	b082      	sub	sp, #8
 8005dca:	af00      	add	r7, sp, #0
 8005dcc:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 8005dce:	687b      	ldr	r3, [r7, #4]
 8005dd0:	681b      	ldr	r3, [r3, #0]
 8005dd2:	68da      	ldr	r2, [r3, #12]
 8005dd4:	687b      	ldr	r3, [r7, #4]
 8005dd6:	681b      	ldr	r3, [r3, #0]
 8005dd8:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8005ddc:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8005dde:	687b      	ldr	r3, [r7, #4]
 8005de0:	2220      	movs	r2, #32
 8005de2:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8005de6:	6878      	ldr	r0, [r7, #4]
 8005de8:	f7ff fecc 	bl	8005b84 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 8005dec:	2300      	movs	r3, #0
}
 8005dee:	4618      	mov	r0, r3
 8005df0:	3708      	adds	r7, #8
 8005df2:	46bd      	mov	sp, r7
 8005df4:	bd80      	pop	{r7, pc}

08005df6 <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 8005df6:	b580      	push	{r7, lr}
 8005df8:	b08c      	sub	sp, #48	@ 0x30
 8005dfa:	af00      	add	r7, sp, #0
 8005dfc:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8005dfe:	687b      	ldr	r3, [r7, #4]
 8005e00:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8005e04:	b2db      	uxtb	r3, r3
 8005e06:	2b22      	cmp	r3, #34	@ 0x22
 8005e08:	f040 80ae 	bne.w	8005f68 <UART_Receive_IT+0x172>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8005e0c:	687b      	ldr	r3, [r7, #4]
 8005e0e:	689b      	ldr	r3, [r3, #8]
 8005e10:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8005e14:	d117      	bne.n	8005e46 <UART_Receive_IT+0x50>
 8005e16:	687b      	ldr	r3, [r7, #4]
 8005e18:	691b      	ldr	r3, [r3, #16]
 8005e1a:	2b00      	cmp	r3, #0
 8005e1c:	d113      	bne.n	8005e46 <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 8005e1e:	2300      	movs	r3, #0
 8005e20:	62fb      	str	r3, [r7, #44]	@ 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 8005e22:	687b      	ldr	r3, [r7, #4]
 8005e24:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005e26:	62bb      	str	r3, [r7, #40]	@ 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8005e28:	687b      	ldr	r3, [r7, #4]
 8005e2a:	681b      	ldr	r3, [r3, #0]
 8005e2c:	685b      	ldr	r3, [r3, #4]
 8005e2e:	b29b      	uxth	r3, r3
 8005e30:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005e34:	b29a      	uxth	r2, r3
 8005e36:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005e38:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 8005e3a:	687b      	ldr	r3, [r7, #4]
 8005e3c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005e3e:	1c9a      	adds	r2, r3, #2
 8005e40:	687b      	ldr	r3, [r7, #4]
 8005e42:	629a      	str	r2, [r3, #40]	@ 0x28
 8005e44:	e026      	b.n	8005e94 <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 8005e46:	687b      	ldr	r3, [r7, #4]
 8005e48:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005e4a:	62fb      	str	r3, [r7, #44]	@ 0x2c
      pdata16bits  = NULL;
 8005e4c:	2300      	movs	r3, #0
 8005e4e:	62bb      	str	r3, [r7, #40]	@ 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8005e50:	687b      	ldr	r3, [r7, #4]
 8005e52:	689b      	ldr	r3, [r3, #8]
 8005e54:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8005e58:	d007      	beq.n	8005e6a <UART_Receive_IT+0x74>
 8005e5a:	687b      	ldr	r3, [r7, #4]
 8005e5c:	689b      	ldr	r3, [r3, #8]
 8005e5e:	2b00      	cmp	r3, #0
 8005e60:	d10a      	bne.n	8005e78 <UART_Receive_IT+0x82>
 8005e62:	687b      	ldr	r3, [r7, #4]
 8005e64:	691b      	ldr	r3, [r3, #16]
 8005e66:	2b00      	cmp	r3, #0
 8005e68:	d106      	bne.n	8005e78 <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8005e6a:	687b      	ldr	r3, [r7, #4]
 8005e6c:	681b      	ldr	r3, [r3, #0]
 8005e6e:	685b      	ldr	r3, [r3, #4]
 8005e70:	b2da      	uxtb	r2, r3
 8005e72:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005e74:	701a      	strb	r2, [r3, #0]
 8005e76:	e008      	b.n	8005e8a <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8005e78:	687b      	ldr	r3, [r7, #4]
 8005e7a:	681b      	ldr	r3, [r3, #0]
 8005e7c:	685b      	ldr	r3, [r3, #4]
 8005e7e:	b2db      	uxtb	r3, r3
 8005e80:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8005e84:	b2da      	uxtb	r2, r3
 8005e86:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005e88:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 8005e8a:	687b      	ldr	r3, [r7, #4]
 8005e8c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005e8e:	1c5a      	adds	r2, r3, #1
 8005e90:	687b      	ldr	r3, [r7, #4]
 8005e92:	629a      	str	r2, [r3, #40]	@ 0x28
    }

    if (--huart->RxXferCount == 0U)
 8005e94:	687b      	ldr	r3, [r7, #4]
 8005e96:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8005e98:	b29b      	uxth	r3, r3
 8005e9a:	3b01      	subs	r3, #1
 8005e9c:	b29b      	uxth	r3, r3
 8005e9e:	687a      	ldr	r2, [r7, #4]
 8005ea0:	4619      	mov	r1, r3
 8005ea2:	85d1      	strh	r1, [r2, #46]	@ 0x2e
 8005ea4:	2b00      	cmp	r3, #0
 8005ea6:	d15d      	bne.n	8005f64 <UART_Receive_IT+0x16e>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8005ea8:	687b      	ldr	r3, [r7, #4]
 8005eaa:	681b      	ldr	r3, [r3, #0]
 8005eac:	68da      	ldr	r2, [r3, #12]
 8005eae:	687b      	ldr	r3, [r7, #4]
 8005eb0:	681b      	ldr	r3, [r3, #0]
 8005eb2:	f022 0220 	bic.w	r2, r2, #32
 8005eb6:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8005eb8:	687b      	ldr	r3, [r7, #4]
 8005eba:	681b      	ldr	r3, [r3, #0]
 8005ebc:	68da      	ldr	r2, [r3, #12]
 8005ebe:	687b      	ldr	r3, [r7, #4]
 8005ec0:	681b      	ldr	r3, [r3, #0]
 8005ec2:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8005ec6:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8005ec8:	687b      	ldr	r3, [r7, #4]
 8005eca:	681b      	ldr	r3, [r3, #0]
 8005ecc:	695a      	ldr	r2, [r3, #20]
 8005ece:	687b      	ldr	r3, [r7, #4]
 8005ed0:	681b      	ldr	r3, [r3, #0]
 8005ed2:	f022 0201 	bic.w	r2, r2, #1
 8005ed6:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8005ed8:	687b      	ldr	r3, [r7, #4]
 8005eda:	2220      	movs	r2, #32
 8005edc:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 8005ee0:	687b      	ldr	r3, [r7, #4]
 8005ee2:	2200      	movs	r2, #0
 8005ee4:	635a      	str	r2, [r3, #52]	@ 0x34

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005ee6:	687b      	ldr	r3, [r7, #4]
 8005ee8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005eea:	2b01      	cmp	r3, #1
 8005eec:	d135      	bne.n	8005f5a <UART_Receive_IT+0x164>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005eee:	687b      	ldr	r3, [r7, #4]
 8005ef0:	2200      	movs	r2, #0
 8005ef2:	631a      	str	r2, [r3, #48]	@ 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005ef4:	687b      	ldr	r3, [r7, #4]
 8005ef6:	681b      	ldr	r3, [r3, #0]
 8005ef8:	330c      	adds	r3, #12
 8005efa:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005efc:	697b      	ldr	r3, [r7, #20]
 8005efe:	e853 3f00 	ldrex	r3, [r3]
 8005f02:	613b      	str	r3, [r7, #16]
   return(result);
 8005f04:	693b      	ldr	r3, [r7, #16]
 8005f06:	f023 0310 	bic.w	r3, r3, #16
 8005f0a:	627b      	str	r3, [r7, #36]	@ 0x24
 8005f0c:	687b      	ldr	r3, [r7, #4]
 8005f0e:	681b      	ldr	r3, [r3, #0]
 8005f10:	330c      	adds	r3, #12
 8005f12:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8005f14:	623a      	str	r2, [r7, #32]
 8005f16:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005f18:	69f9      	ldr	r1, [r7, #28]
 8005f1a:	6a3a      	ldr	r2, [r7, #32]
 8005f1c:	e841 2300 	strex	r3, r2, [r1]
 8005f20:	61bb      	str	r3, [r7, #24]
   return(result);
 8005f22:	69bb      	ldr	r3, [r7, #24]
 8005f24:	2b00      	cmp	r3, #0
 8005f26:	d1e5      	bne.n	8005ef4 <UART_Receive_IT+0xfe>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 8005f28:	687b      	ldr	r3, [r7, #4]
 8005f2a:	681b      	ldr	r3, [r3, #0]
 8005f2c:	681b      	ldr	r3, [r3, #0]
 8005f2e:	f003 0310 	and.w	r3, r3, #16
 8005f32:	2b10      	cmp	r3, #16
 8005f34:	d10a      	bne.n	8005f4c <UART_Receive_IT+0x156>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 8005f36:	2300      	movs	r3, #0
 8005f38:	60fb      	str	r3, [r7, #12]
 8005f3a:	687b      	ldr	r3, [r7, #4]
 8005f3c:	681b      	ldr	r3, [r3, #0]
 8005f3e:	681b      	ldr	r3, [r3, #0]
 8005f40:	60fb      	str	r3, [r7, #12]
 8005f42:	687b      	ldr	r3, [r7, #4]
 8005f44:	681b      	ldr	r3, [r3, #0]
 8005f46:	685b      	ldr	r3, [r3, #4]
 8005f48:	60fb      	str	r3, [r7, #12]
 8005f4a:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8005f4c:	687b      	ldr	r3, [r7, #4]
 8005f4e:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 8005f50:	4619      	mov	r1, r3
 8005f52:	6878      	ldr	r0, [r7, #4]
 8005f54:	f7ff fe2a 	bl	8005bac <HAL_UARTEx_RxEventCallback>
 8005f58:	e002      	b.n	8005f60 <UART_Receive_IT+0x16a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 8005f5a:	6878      	ldr	r0, [r7, #4]
 8005f5c:	f7fb fd54 	bl	8001a08 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 8005f60:	2300      	movs	r3, #0
 8005f62:	e002      	b.n	8005f6a <UART_Receive_IT+0x174>
    }
    return HAL_OK;
 8005f64:	2300      	movs	r3, #0
 8005f66:	e000      	b.n	8005f6a <UART_Receive_IT+0x174>
  }
  else
  {
    return HAL_BUSY;
 8005f68:	2302      	movs	r3, #2
  }
}
 8005f6a:	4618      	mov	r0, r3
 8005f6c:	3730      	adds	r7, #48	@ 0x30
 8005f6e:	46bd      	mov	sp, r7
 8005f70:	bd80      	pop	{r7, pc}
	...

08005f74 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8005f74:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8005f78:	b0c0      	sub	sp, #256	@ 0x100
 8005f7a:	af00      	add	r7, sp, #0
 8005f7c:	f8c7 00f4 	str.w	r0, [r7, #244]	@ 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8005f80:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005f84:	681b      	ldr	r3, [r3, #0]
 8005f86:	691b      	ldr	r3, [r3, #16]
 8005f88:	f423 5040 	bic.w	r0, r3, #12288	@ 0x3000
 8005f8c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005f90:	68d9      	ldr	r1, [r3, #12]
 8005f92:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005f96:	681a      	ldr	r2, [r3, #0]
 8005f98:	ea40 0301 	orr.w	r3, r0, r1
 8005f9c:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8005f9e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005fa2:	689a      	ldr	r2, [r3, #8]
 8005fa4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005fa8:	691b      	ldr	r3, [r3, #16]
 8005faa:	431a      	orrs	r2, r3
 8005fac:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005fb0:	695b      	ldr	r3, [r3, #20]
 8005fb2:	431a      	orrs	r2, r3
 8005fb4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005fb8:	69db      	ldr	r3, [r3, #28]
 8005fba:	4313      	orrs	r3, r2
 8005fbc:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
  MODIFY_REG(huart->Instance->CR1,
 8005fc0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005fc4:	681b      	ldr	r3, [r3, #0]
 8005fc6:	68db      	ldr	r3, [r3, #12]
 8005fc8:	f423 4116 	bic.w	r1, r3, #38400	@ 0x9600
 8005fcc:	f021 010c 	bic.w	r1, r1, #12
 8005fd0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005fd4:	681a      	ldr	r2, [r3, #0]
 8005fd6:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 8005fda:	430b      	orrs	r3, r1
 8005fdc:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8005fde:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005fe2:	681b      	ldr	r3, [r3, #0]
 8005fe4:	695b      	ldr	r3, [r3, #20]
 8005fe6:	f423 7040 	bic.w	r0, r3, #768	@ 0x300
 8005fea:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005fee:	6999      	ldr	r1, [r3, #24]
 8005ff0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005ff4:	681a      	ldr	r2, [r3, #0]
 8005ff6:	ea40 0301 	orr.w	r3, r0, r1
 8005ffa:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8005ffc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006000:	681a      	ldr	r2, [r3, #0]
 8006002:	4b8f      	ldr	r3, [pc, #572]	@ (8006240 <UART_SetConfig+0x2cc>)
 8006004:	429a      	cmp	r2, r3
 8006006:	d005      	beq.n	8006014 <UART_SetConfig+0xa0>
 8006008:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800600c:	681a      	ldr	r2, [r3, #0]
 800600e:	4b8d      	ldr	r3, [pc, #564]	@ (8006244 <UART_SetConfig+0x2d0>)
 8006010:	429a      	cmp	r2, r3
 8006012:	d104      	bne.n	800601e <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8006014:	f7fd fcc4 	bl	80039a0 <HAL_RCC_GetPCLK2Freq>
 8006018:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
 800601c:	e003      	b.n	8006026 <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 800601e:	f7fd fcab 	bl	8003978 <HAL_RCC_GetPCLK1Freq>
 8006022:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8006026:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800602a:	69db      	ldr	r3, [r3, #28]
 800602c:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8006030:	f040 810c 	bne.w	800624c <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8006034:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8006038:	2200      	movs	r2, #0
 800603a:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 800603e:	f8c7 20ec 	str.w	r2, [r7, #236]	@ 0xec
 8006042:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	@ 0xe8
 8006046:	4622      	mov	r2, r4
 8006048:	462b      	mov	r3, r5
 800604a:	1891      	adds	r1, r2, r2
 800604c:	65b9      	str	r1, [r7, #88]	@ 0x58
 800604e:	415b      	adcs	r3, r3
 8006050:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8006052:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	@ 0x58
 8006056:	4621      	mov	r1, r4
 8006058:	eb12 0801 	adds.w	r8, r2, r1
 800605c:	4629      	mov	r1, r5
 800605e:	eb43 0901 	adc.w	r9, r3, r1
 8006062:	f04f 0200 	mov.w	r2, #0
 8006066:	f04f 0300 	mov.w	r3, #0
 800606a:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 800606e:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8006072:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8006076:	4690      	mov	r8, r2
 8006078:	4699      	mov	r9, r3
 800607a:	4623      	mov	r3, r4
 800607c:	eb18 0303 	adds.w	r3, r8, r3
 8006080:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 8006084:	462b      	mov	r3, r5
 8006086:	eb49 0303 	adc.w	r3, r9, r3
 800608a:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 800608e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006092:	685b      	ldr	r3, [r3, #4]
 8006094:	2200      	movs	r2, #0
 8006096:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 800609a:	f8c7 20dc 	str.w	r2, [r7, #220]	@ 0xdc
 800609e:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	@ 0xd8
 80060a2:	460b      	mov	r3, r1
 80060a4:	18db      	adds	r3, r3, r3
 80060a6:	653b      	str	r3, [r7, #80]	@ 0x50
 80060a8:	4613      	mov	r3, r2
 80060aa:	eb42 0303 	adc.w	r3, r2, r3
 80060ae:	657b      	str	r3, [r7, #84]	@ 0x54
 80060b0:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	@ 0x50
 80060b4:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	@ 0xe0
 80060b8:	f7fa fde6 	bl	8000c88 <__aeabi_uldivmod>
 80060bc:	4602      	mov	r2, r0
 80060be:	460b      	mov	r3, r1
 80060c0:	4b61      	ldr	r3, [pc, #388]	@ (8006248 <UART_SetConfig+0x2d4>)
 80060c2:	fba3 2302 	umull	r2, r3, r3, r2
 80060c6:	095b      	lsrs	r3, r3, #5
 80060c8:	011c      	lsls	r4, r3, #4
 80060ca:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80060ce:	2200      	movs	r2, #0
 80060d0:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 80060d4:	f8c7 20d4 	str.w	r2, [r7, #212]	@ 0xd4
 80060d8:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	@ 0xd0
 80060dc:	4642      	mov	r2, r8
 80060de:	464b      	mov	r3, r9
 80060e0:	1891      	adds	r1, r2, r2
 80060e2:	64b9      	str	r1, [r7, #72]	@ 0x48
 80060e4:	415b      	adcs	r3, r3
 80060e6:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80060e8:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	@ 0x48
 80060ec:	4641      	mov	r1, r8
 80060ee:	eb12 0a01 	adds.w	sl, r2, r1
 80060f2:	4649      	mov	r1, r9
 80060f4:	eb43 0b01 	adc.w	fp, r3, r1
 80060f8:	f04f 0200 	mov.w	r2, #0
 80060fc:	f04f 0300 	mov.w	r3, #0
 8006100:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8006104:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8006108:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 800610c:	4692      	mov	sl, r2
 800610e:	469b      	mov	fp, r3
 8006110:	4643      	mov	r3, r8
 8006112:	eb1a 0303 	adds.w	r3, sl, r3
 8006116:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 800611a:	464b      	mov	r3, r9
 800611c:	eb4b 0303 	adc.w	r3, fp, r3
 8006120:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 8006124:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006128:	685b      	ldr	r3, [r3, #4]
 800612a:	2200      	movs	r2, #0
 800612c:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8006130:	f8c7 20c4 	str.w	r2, [r7, #196]	@ 0xc4
 8006134:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	@ 0xc0
 8006138:	460b      	mov	r3, r1
 800613a:	18db      	adds	r3, r3, r3
 800613c:	643b      	str	r3, [r7, #64]	@ 0x40
 800613e:	4613      	mov	r3, r2
 8006140:	eb42 0303 	adc.w	r3, r2, r3
 8006144:	647b      	str	r3, [r7, #68]	@ 0x44
 8006146:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	@ 0x40
 800614a:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	@ 0xc8
 800614e:	f7fa fd9b 	bl	8000c88 <__aeabi_uldivmod>
 8006152:	4602      	mov	r2, r0
 8006154:	460b      	mov	r3, r1
 8006156:	4611      	mov	r1, r2
 8006158:	4b3b      	ldr	r3, [pc, #236]	@ (8006248 <UART_SetConfig+0x2d4>)
 800615a:	fba3 2301 	umull	r2, r3, r3, r1
 800615e:	095b      	lsrs	r3, r3, #5
 8006160:	2264      	movs	r2, #100	@ 0x64
 8006162:	fb02 f303 	mul.w	r3, r2, r3
 8006166:	1acb      	subs	r3, r1, r3
 8006168:	00db      	lsls	r3, r3, #3
 800616a:	f103 0232 	add.w	r2, r3, #50	@ 0x32
 800616e:	4b36      	ldr	r3, [pc, #216]	@ (8006248 <UART_SetConfig+0x2d4>)
 8006170:	fba3 2302 	umull	r2, r3, r3, r2
 8006174:	095b      	lsrs	r3, r3, #5
 8006176:	005b      	lsls	r3, r3, #1
 8006178:	f403 73f8 	and.w	r3, r3, #496	@ 0x1f0
 800617c:	441c      	add	r4, r3
 800617e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8006182:	2200      	movs	r2, #0
 8006184:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8006188:	f8c7 20bc 	str.w	r2, [r7, #188]	@ 0xbc
 800618c:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	@ 0xb8
 8006190:	4642      	mov	r2, r8
 8006192:	464b      	mov	r3, r9
 8006194:	1891      	adds	r1, r2, r2
 8006196:	63b9      	str	r1, [r7, #56]	@ 0x38
 8006198:	415b      	adcs	r3, r3
 800619a:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800619c:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	@ 0x38
 80061a0:	4641      	mov	r1, r8
 80061a2:	1851      	adds	r1, r2, r1
 80061a4:	6339      	str	r1, [r7, #48]	@ 0x30
 80061a6:	4649      	mov	r1, r9
 80061a8:	414b      	adcs	r3, r1
 80061aa:	637b      	str	r3, [r7, #52]	@ 0x34
 80061ac:	f04f 0200 	mov.w	r2, #0
 80061b0:	f04f 0300 	mov.w	r3, #0
 80061b4:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	@ 0x30
 80061b8:	4659      	mov	r1, fp
 80061ba:	00cb      	lsls	r3, r1, #3
 80061bc:	4651      	mov	r1, sl
 80061be:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80061c2:	4651      	mov	r1, sl
 80061c4:	00ca      	lsls	r2, r1, #3
 80061c6:	4610      	mov	r0, r2
 80061c8:	4619      	mov	r1, r3
 80061ca:	4603      	mov	r3, r0
 80061cc:	4642      	mov	r2, r8
 80061ce:	189b      	adds	r3, r3, r2
 80061d0:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 80061d4:	464b      	mov	r3, r9
 80061d6:	460a      	mov	r2, r1
 80061d8:	eb42 0303 	adc.w	r3, r2, r3
 80061dc:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 80061e0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80061e4:	685b      	ldr	r3, [r3, #4]
 80061e6:	2200      	movs	r2, #0
 80061e8:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 80061ec:	f8c7 20ac 	str.w	r2, [r7, #172]	@ 0xac
 80061f0:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	@ 0xa8
 80061f4:	460b      	mov	r3, r1
 80061f6:	18db      	adds	r3, r3, r3
 80061f8:	62bb      	str	r3, [r7, #40]	@ 0x28
 80061fa:	4613      	mov	r3, r2
 80061fc:	eb42 0303 	adc.w	r3, r2, r3
 8006200:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8006202:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 8006206:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	@ 0xb0
 800620a:	f7fa fd3d 	bl	8000c88 <__aeabi_uldivmod>
 800620e:	4602      	mov	r2, r0
 8006210:	460b      	mov	r3, r1
 8006212:	4b0d      	ldr	r3, [pc, #52]	@ (8006248 <UART_SetConfig+0x2d4>)
 8006214:	fba3 1302 	umull	r1, r3, r3, r2
 8006218:	095b      	lsrs	r3, r3, #5
 800621a:	2164      	movs	r1, #100	@ 0x64
 800621c:	fb01 f303 	mul.w	r3, r1, r3
 8006220:	1ad3      	subs	r3, r2, r3
 8006222:	00db      	lsls	r3, r3, #3
 8006224:	3332      	adds	r3, #50	@ 0x32
 8006226:	4a08      	ldr	r2, [pc, #32]	@ (8006248 <UART_SetConfig+0x2d4>)
 8006228:	fba2 2303 	umull	r2, r3, r2, r3
 800622c:	095b      	lsrs	r3, r3, #5
 800622e:	f003 0207 	and.w	r2, r3, #7
 8006232:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006236:	681b      	ldr	r3, [r3, #0]
 8006238:	4422      	add	r2, r4
 800623a:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 800623c:	e106      	b.n	800644c <UART_SetConfig+0x4d8>
 800623e:	bf00      	nop
 8006240:	40011000 	.word	0x40011000
 8006244:	40011400 	.word	0x40011400
 8006248:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 800624c:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8006250:	2200      	movs	r2, #0
 8006252:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 8006256:	f8c7 20a4 	str.w	r2, [r7, #164]	@ 0xa4
 800625a:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	@ 0xa0
 800625e:	4642      	mov	r2, r8
 8006260:	464b      	mov	r3, r9
 8006262:	1891      	adds	r1, r2, r2
 8006264:	6239      	str	r1, [r7, #32]
 8006266:	415b      	adcs	r3, r3
 8006268:	627b      	str	r3, [r7, #36]	@ 0x24
 800626a:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 800626e:	4641      	mov	r1, r8
 8006270:	1854      	adds	r4, r2, r1
 8006272:	4649      	mov	r1, r9
 8006274:	eb43 0501 	adc.w	r5, r3, r1
 8006278:	f04f 0200 	mov.w	r2, #0
 800627c:	f04f 0300 	mov.w	r3, #0
 8006280:	00eb      	lsls	r3, r5, #3
 8006282:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8006286:	00e2      	lsls	r2, r4, #3
 8006288:	4614      	mov	r4, r2
 800628a:	461d      	mov	r5, r3
 800628c:	4643      	mov	r3, r8
 800628e:	18e3      	adds	r3, r4, r3
 8006290:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 8006294:	464b      	mov	r3, r9
 8006296:	eb45 0303 	adc.w	r3, r5, r3
 800629a:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 800629e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80062a2:	685b      	ldr	r3, [r3, #4]
 80062a4:	2200      	movs	r2, #0
 80062a6:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 80062aa:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 80062ae:	f04f 0200 	mov.w	r2, #0
 80062b2:	f04f 0300 	mov.w	r3, #0
 80062b6:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	@ 0x90
 80062ba:	4629      	mov	r1, r5
 80062bc:	008b      	lsls	r3, r1, #2
 80062be:	4621      	mov	r1, r4
 80062c0:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80062c4:	4621      	mov	r1, r4
 80062c6:	008a      	lsls	r2, r1, #2
 80062c8:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	@ 0x98
 80062cc:	f7fa fcdc 	bl	8000c88 <__aeabi_uldivmod>
 80062d0:	4602      	mov	r2, r0
 80062d2:	460b      	mov	r3, r1
 80062d4:	4b60      	ldr	r3, [pc, #384]	@ (8006458 <UART_SetConfig+0x4e4>)
 80062d6:	fba3 2302 	umull	r2, r3, r3, r2
 80062da:	095b      	lsrs	r3, r3, #5
 80062dc:	011c      	lsls	r4, r3, #4
 80062de:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80062e2:	2200      	movs	r2, #0
 80062e4:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 80062e8:	f8c7 208c 	str.w	r2, [r7, #140]	@ 0x8c
 80062ec:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	@ 0x88
 80062f0:	4642      	mov	r2, r8
 80062f2:	464b      	mov	r3, r9
 80062f4:	1891      	adds	r1, r2, r2
 80062f6:	61b9      	str	r1, [r7, #24]
 80062f8:	415b      	adcs	r3, r3
 80062fa:	61fb      	str	r3, [r7, #28]
 80062fc:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8006300:	4641      	mov	r1, r8
 8006302:	1851      	adds	r1, r2, r1
 8006304:	6139      	str	r1, [r7, #16]
 8006306:	4649      	mov	r1, r9
 8006308:	414b      	adcs	r3, r1
 800630a:	617b      	str	r3, [r7, #20]
 800630c:	f04f 0200 	mov.w	r2, #0
 8006310:	f04f 0300 	mov.w	r3, #0
 8006314:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8006318:	4659      	mov	r1, fp
 800631a:	00cb      	lsls	r3, r1, #3
 800631c:	4651      	mov	r1, sl
 800631e:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8006322:	4651      	mov	r1, sl
 8006324:	00ca      	lsls	r2, r1, #3
 8006326:	4610      	mov	r0, r2
 8006328:	4619      	mov	r1, r3
 800632a:	4603      	mov	r3, r0
 800632c:	4642      	mov	r2, r8
 800632e:	189b      	adds	r3, r3, r2
 8006330:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8006334:	464b      	mov	r3, r9
 8006336:	460a      	mov	r2, r1
 8006338:	eb42 0303 	adc.w	r3, r2, r3
 800633c:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 8006340:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006344:	685b      	ldr	r3, [r3, #4]
 8006346:	2200      	movs	r2, #0
 8006348:	67bb      	str	r3, [r7, #120]	@ 0x78
 800634a:	67fa      	str	r2, [r7, #124]	@ 0x7c
 800634c:	f04f 0200 	mov.w	r2, #0
 8006350:	f04f 0300 	mov.w	r3, #0
 8006354:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	@ 0x78
 8006358:	4649      	mov	r1, r9
 800635a:	008b      	lsls	r3, r1, #2
 800635c:	4641      	mov	r1, r8
 800635e:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8006362:	4641      	mov	r1, r8
 8006364:	008a      	lsls	r2, r1, #2
 8006366:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	@ 0x80
 800636a:	f7fa fc8d 	bl	8000c88 <__aeabi_uldivmod>
 800636e:	4602      	mov	r2, r0
 8006370:	460b      	mov	r3, r1
 8006372:	4611      	mov	r1, r2
 8006374:	4b38      	ldr	r3, [pc, #224]	@ (8006458 <UART_SetConfig+0x4e4>)
 8006376:	fba3 2301 	umull	r2, r3, r3, r1
 800637a:	095b      	lsrs	r3, r3, #5
 800637c:	2264      	movs	r2, #100	@ 0x64
 800637e:	fb02 f303 	mul.w	r3, r2, r3
 8006382:	1acb      	subs	r3, r1, r3
 8006384:	011b      	lsls	r3, r3, #4
 8006386:	3332      	adds	r3, #50	@ 0x32
 8006388:	4a33      	ldr	r2, [pc, #204]	@ (8006458 <UART_SetConfig+0x4e4>)
 800638a:	fba2 2303 	umull	r2, r3, r2, r3
 800638e:	095b      	lsrs	r3, r3, #5
 8006390:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8006394:	441c      	add	r4, r3
 8006396:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800639a:	2200      	movs	r2, #0
 800639c:	673b      	str	r3, [r7, #112]	@ 0x70
 800639e:	677a      	str	r2, [r7, #116]	@ 0x74
 80063a0:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	@ 0x70
 80063a4:	4642      	mov	r2, r8
 80063a6:	464b      	mov	r3, r9
 80063a8:	1891      	adds	r1, r2, r2
 80063aa:	60b9      	str	r1, [r7, #8]
 80063ac:	415b      	adcs	r3, r3
 80063ae:	60fb      	str	r3, [r7, #12]
 80063b0:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 80063b4:	4641      	mov	r1, r8
 80063b6:	1851      	adds	r1, r2, r1
 80063b8:	6039      	str	r1, [r7, #0]
 80063ba:	4649      	mov	r1, r9
 80063bc:	414b      	adcs	r3, r1
 80063be:	607b      	str	r3, [r7, #4]
 80063c0:	f04f 0200 	mov.w	r2, #0
 80063c4:	f04f 0300 	mov.w	r3, #0
 80063c8:	e9d7 ab00 	ldrd	sl, fp, [r7]
 80063cc:	4659      	mov	r1, fp
 80063ce:	00cb      	lsls	r3, r1, #3
 80063d0:	4651      	mov	r1, sl
 80063d2:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80063d6:	4651      	mov	r1, sl
 80063d8:	00ca      	lsls	r2, r1, #3
 80063da:	4610      	mov	r0, r2
 80063dc:	4619      	mov	r1, r3
 80063de:	4603      	mov	r3, r0
 80063e0:	4642      	mov	r2, r8
 80063e2:	189b      	adds	r3, r3, r2
 80063e4:	66bb      	str	r3, [r7, #104]	@ 0x68
 80063e6:	464b      	mov	r3, r9
 80063e8:	460a      	mov	r2, r1
 80063ea:	eb42 0303 	adc.w	r3, r2, r3
 80063ee:	66fb      	str	r3, [r7, #108]	@ 0x6c
 80063f0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80063f4:	685b      	ldr	r3, [r3, #4]
 80063f6:	2200      	movs	r2, #0
 80063f8:	663b      	str	r3, [r7, #96]	@ 0x60
 80063fa:	667a      	str	r2, [r7, #100]	@ 0x64
 80063fc:	f04f 0200 	mov.w	r2, #0
 8006400:	f04f 0300 	mov.w	r3, #0
 8006404:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	@ 0x60
 8006408:	4649      	mov	r1, r9
 800640a:	008b      	lsls	r3, r1, #2
 800640c:	4641      	mov	r1, r8
 800640e:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8006412:	4641      	mov	r1, r8
 8006414:	008a      	lsls	r2, r1, #2
 8006416:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	@ 0x68
 800641a:	f7fa fc35 	bl	8000c88 <__aeabi_uldivmod>
 800641e:	4602      	mov	r2, r0
 8006420:	460b      	mov	r3, r1
 8006422:	4b0d      	ldr	r3, [pc, #52]	@ (8006458 <UART_SetConfig+0x4e4>)
 8006424:	fba3 1302 	umull	r1, r3, r3, r2
 8006428:	095b      	lsrs	r3, r3, #5
 800642a:	2164      	movs	r1, #100	@ 0x64
 800642c:	fb01 f303 	mul.w	r3, r1, r3
 8006430:	1ad3      	subs	r3, r2, r3
 8006432:	011b      	lsls	r3, r3, #4
 8006434:	3332      	adds	r3, #50	@ 0x32
 8006436:	4a08      	ldr	r2, [pc, #32]	@ (8006458 <UART_SetConfig+0x4e4>)
 8006438:	fba2 2303 	umull	r2, r3, r2, r3
 800643c:	095b      	lsrs	r3, r3, #5
 800643e:	f003 020f 	and.w	r2, r3, #15
 8006442:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006446:	681b      	ldr	r3, [r3, #0]
 8006448:	4422      	add	r2, r4
 800644a:	609a      	str	r2, [r3, #8]
}
 800644c:	bf00      	nop
 800644e:	f507 7780 	add.w	r7, r7, #256	@ 0x100
 8006452:	46bd      	mov	sp, r7
 8006454:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8006458:	51eb851f 	.word	0x51eb851f

0800645c <__cvt>:
 800645c:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8006460:	ec57 6b10 	vmov	r6, r7, d0
 8006464:	2f00      	cmp	r7, #0
 8006466:	460c      	mov	r4, r1
 8006468:	4619      	mov	r1, r3
 800646a:	463b      	mov	r3, r7
 800646c:	bfbb      	ittet	lt
 800646e:	f107 4300 	addlt.w	r3, r7, #2147483648	@ 0x80000000
 8006472:	461f      	movlt	r7, r3
 8006474:	2300      	movge	r3, #0
 8006476:	232d      	movlt	r3, #45	@ 0x2d
 8006478:	700b      	strb	r3, [r1, #0]
 800647a:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 800647c:	f8dd a030 	ldr.w	sl, [sp, #48]	@ 0x30
 8006480:	4691      	mov	r9, r2
 8006482:	f023 0820 	bic.w	r8, r3, #32
 8006486:	bfbc      	itt	lt
 8006488:	4632      	movlt	r2, r6
 800648a:	4616      	movlt	r6, r2
 800648c:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 8006490:	d005      	beq.n	800649e <__cvt+0x42>
 8006492:	f1b8 0f45 	cmp.w	r8, #69	@ 0x45
 8006496:	d100      	bne.n	800649a <__cvt+0x3e>
 8006498:	3401      	adds	r4, #1
 800649a:	2102      	movs	r1, #2
 800649c:	e000      	b.n	80064a0 <__cvt+0x44>
 800649e:	2103      	movs	r1, #3
 80064a0:	ab03      	add	r3, sp, #12
 80064a2:	9301      	str	r3, [sp, #4]
 80064a4:	ab02      	add	r3, sp, #8
 80064a6:	9300      	str	r3, [sp, #0]
 80064a8:	ec47 6b10 	vmov	d0, r6, r7
 80064ac:	4653      	mov	r3, sl
 80064ae:	4622      	mov	r2, r4
 80064b0:	f000 fe82 	bl	80071b8 <_dtoa_r>
 80064b4:	f1b8 0f47 	cmp.w	r8, #71	@ 0x47
 80064b8:	4605      	mov	r5, r0
 80064ba:	d119      	bne.n	80064f0 <__cvt+0x94>
 80064bc:	f019 0f01 	tst.w	r9, #1
 80064c0:	d00e      	beq.n	80064e0 <__cvt+0x84>
 80064c2:	eb00 0904 	add.w	r9, r0, r4
 80064c6:	2200      	movs	r2, #0
 80064c8:	2300      	movs	r3, #0
 80064ca:	4630      	mov	r0, r6
 80064cc:	4639      	mov	r1, r7
 80064ce:	f7fa fb1b 	bl	8000b08 <__aeabi_dcmpeq>
 80064d2:	b108      	cbz	r0, 80064d8 <__cvt+0x7c>
 80064d4:	f8cd 900c 	str.w	r9, [sp, #12]
 80064d8:	2230      	movs	r2, #48	@ 0x30
 80064da:	9b03      	ldr	r3, [sp, #12]
 80064dc:	454b      	cmp	r3, r9
 80064de:	d31e      	bcc.n	800651e <__cvt+0xc2>
 80064e0:	9b03      	ldr	r3, [sp, #12]
 80064e2:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 80064e4:	1b5b      	subs	r3, r3, r5
 80064e6:	4628      	mov	r0, r5
 80064e8:	6013      	str	r3, [r2, #0]
 80064ea:	b004      	add	sp, #16
 80064ec:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80064f0:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 80064f4:	eb00 0904 	add.w	r9, r0, r4
 80064f8:	d1e5      	bne.n	80064c6 <__cvt+0x6a>
 80064fa:	7803      	ldrb	r3, [r0, #0]
 80064fc:	2b30      	cmp	r3, #48	@ 0x30
 80064fe:	d10a      	bne.n	8006516 <__cvt+0xba>
 8006500:	2200      	movs	r2, #0
 8006502:	2300      	movs	r3, #0
 8006504:	4630      	mov	r0, r6
 8006506:	4639      	mov	r1, r7
 8006508:	f7fa fafe 	bl	8000b08 <__aeabi_dcmpeq>
 800650c:	b918      	cbnz	r0, 8006516 <__cvt+0xba>
 800650e:	f1c4 0401 	rsb	r4, r4, #1
 8006512:	f8ca 4000 	str.w	r4, [sl]
 8006516:	f8da 3000 	ldr.w	r3, [sl]
 800651a:	4499      	add	r9, r3
 800651c:	e7d3      	b.n	80064c6 <__cvt+0x6a>
 800651e:	1c59      	adds	r1, r3, #1
 8006520:	9103      	str	r1, [sp, #12]
 8006522:	701a      	strb	r2, [r3, #0]
 8006524:	e7d9      	b.n	80064da <__cvt+0x7e>

08006526 <__exponent>:
 8006526:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8006528:	2900      	cmp	r1, #0
 800652a:	bfba      	itte	lt
 800652c:	4249      	neglt	r1, r1
 800652e:	232d      	movlt	r3, #45	@ 0x2d
 8006530:	232b      	movge	r3, #43	@ 0x2b
 8006532:	2909      	cmp	r1, #9
 8006534:	7002      	strb	r2, [r0, #0]
 8006536:	7043      	strb	r3, [r0, #1]
 8006538:	dd29      	ble.n	800658e <__exponent+0x68>
 800653a:	f10d 0307 	add.w	r3, sp, #7
 800653e:	461d      	mov	r5, r3
 8006540:	270a      	movs	r7, #10
 8006542:	461a      	mov	r2, r3
 8006544:	fbb1 f6f7 	udiv	r6, r1, r7
 8006548:	fb07 1416 	mls	r4, r7, r6, r1
 800654c:	3430      	adds	r4, #48	@ 0x30
 800654e:	f802 4c01 	strb.w	r4, [r2, #-1]
 8006552:	460c      	mov	r4, r1
 8006554:	2c63      	cmp	r4, #99	@ 0x63
 8006556:	f103 33ff 	add.w	r3, r3, #4294967295
 800655a:	4631      	mov	r1, r6
 800655c:	dcf1      	bgt.n	8006542 <__exponent+0x1c>
 800655e:	3130      	adds	r1, #48	@ 0x30
 8006560:	1e94      	subs	r4, r2, #2
 8006562:	f803 1c01 	strb.w	r1, [r3, #-1]
 8006566:	1c41      	adds	r1, r0, #1
 8006568:	4623      	mov	r3, r4
 800656a:	42ab      	cmp	r3, r5
 800656c:	d30a      	bcc.n	8006584 <__exponent+0x5e>
 800656e:	f10d 0309 	add.w	r3, sp, #9
 8006572:	1a9b      	subs	r3, r3, r2
 8006574:	42ac      	cmp	r4, r5
 8006576:	bf88      	it	hi
 8006578:	2300      	movhi	r3, #0
 800657a:	3302      	adds	r3, #2
 800657c:	4403      	add	r3, r0
 800657e:	1a18      	subs	r0, r3, r0
 8006580:	b003      	add	sp, #12
 8006582:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8006584:	f813 6b01 	ldrb.w	r6, [r3], #1
 8006588:	f801 6f01 	strb.w	r6, [r1, #1]!
 800658c:	e7ed      	b.n	800656a <__exponent+0x44>
 800658e:	2330      	movs	r3, #48	@ 0x30
 8006590:	3130      	adds	r1, #48	@ 0x30
 8006592:	7083      	strb	r3, [r0, #2]
 8006594:	70c1      	strb	r1, [r0, #3]
 8006596:	1d03      	adds	r3, r0, #4
 8006598:	e7f1      	b.n	800657e <__exponent+0x58>
	...

0800659c <_printf_float>:
 800659c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80065a0:	b08d      	sub	sp, #52	@ 0x34
 80065a2:	460c      	mov	r4, r1
 80065a4:	f8dd 8058 	ldr.w	r8, [sp, #88]	@ 0x58
 80065a8:	4616      	mov	r6, r2
 80065aa:	461f      	mov	r7, r3
 80065ac:	4605      	mov	r5, r0
 80065ae:	f000 fd01 	bl	8006fb4 <_localeconv_r>
 80065b2:	6803      	ldr	r3, [r0, #0]
 80065b4:	9304      	str	r3, [sp, #16]
 80065b6:	4618      	mov	r0, r3
 80065b8:	f7f9 fe7a 	bl	80002b0 <strlen>
 80065bc:	2300      	movs	r3, #0
 80065be:	930a      	str	r3, [sp, #40]	@ 0x28
 80065c0:	f8d8 3000 	ldr.w	r3, [r8]
 80065c4:	9005      	str	r0, [sp, #20]
 80065c6:	3307      	adds	r3, #7
 80065c8:	f023 0307 	bic.w	r3, r3, #7
 80065cc:	f103 0208 	add.w	r2, r3, #8
 80065d0:	f894 a018 	ldrb.w	sl, [r4, #24]
 80065d4:	f8d4 b000 	ldr.w	fp, [r4]
 80065d8:	f8c8 2000 	str.w	r2, [r8]
 80065dc:	e9d3 8900 	ldrd	r8, r9, [r3]
 80065e0:	f029 4300 	bic.w	r3, r9, #2147483648	@ 0x80000000
 80065e4:	9307      	str	r3, [sp, #28]
 80065e6:	f8cd 8018 	str.w	r8, [sp, #24]
 80065ea:	e9c4 8912 	strd	r8, r9, [r4, #72]	@ 0x48
 80065ee:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 80065f2:	4b9c      	ldr	r3, [pc, #624]	@ (8006864 <_printf_float+0x2c8>)
 80065f4:	f04f 32ff 	mov.w	r2, #4294967295
 80065f8:	f7fa fab8 	bl	8000b6c <__aeabi_dcmpun>
 80065fc:	bb70      	cbnz	r0, 800665c <_printf_float+0xc0>
 80065fe:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8006602:	4b98      	ldr	r3, [pc, #608]	@ (8006864 <_printf_float+0x2c8>)
 8006604:	f04f 32ff 	mov.w	r2, #4294967295
 8006608:	f7fa fa92 	bl	8000b30 <__aeabi_dcmple>
 800660c:	bb30      	cbnz	r0, 800665c <_printf_float+0xc0>
 800660e:	2200      	movs	r2, #0
 8006610:	2300      	movs	r3, #0
 8006612:	4640      	mov	r0, r8
 8006614:	4649      	mov	r1, r9
 8006616:	f7fa fa81 	bl	8000b1c <__aeabi_dcmplt>
 800661a:	b110      	cbz	r0, 8006622 <_printf_float+0x86>
 800661c:	232d      	movs	r3, #45	@ 0x2d
 800661e:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8006622:	4a91      	ldr	r2, [pc, #580]	@ (8006868 <_printf_float+0x2cc>)
 8006624:	4b91      	ldr	r3, [pc, #580]	@ (800686c <_printf_float+0x2d0>)
 8006626:	f1ba 0f47 	cmp.w	sl, #71	@ 0x47
 800662a:	bf94      	ite	ls
 800662c:	4690      	movls	r8, r2
 800662e:	4698      	movhi	r8, r3
 8006630:	2303      	movs	r3, #3
 8006632:	6123      	str	r3, [r4, #16]
 8006634:	f02b 0304 	bic.w	r3, fp, #4
 8006638:	6023      	str	r3, [r4, #0]
 800663a:	f04f 0900 	mov.w	r9, #0
 800663e:	9700      	str	r7, [sp, #0]
 8006640:	4633      	mov	r3, r6
 8006642:	aa0b      	add	r2, sp, #44	@ 0x2c
 8006644:	4621      	mov	r1, r4
 8006646:	4628      	mov	r0, r5
 8006648:	f000 f9d2 	bl	80069f0 <_printf_common>
 800664c:	3001      	adds	r0, #1
 800664e:	f040 808d 	bne.w	800676c <_printf_float+0x1d0>
 8006652:	f04f 30ff 	mov.w	r0, #4294967295
 8006656:	b00d      	add	sp, #52	@ 0x34
 8006658:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800665c:	4642      	mov	r2, r8
 800665e:	464b      	mov	r3, r9
 8006660:	4640      	mov	r0, r8
 8006662:	4649      	mov	r1, r9
 8006664:	f7fa fa82 	bl	8000b6c <__aeabi_dcmpun>
 8006668:	b140      	cbz	r0, 800667c <_printf_float+0xe0>
 800666a:	464b      	mov	r3, r9
 800666c:	2b00      	cmp	r3, #0
 800666e:	bfbc      	itt	lt
 8006670:	232d      	movlt	r3, #45	@ 0x2d
 8006672:	f884 3043 	strblt.w	r3, [r4, #67]	@ 0x43
 8006676:	4a7e      	ldr	r2, [pc, #504]	@ (8006870 <_printf_float+0x2d4>)
 8006678:	4b7e      	ldr	r3, [pc, #504]	@ (8006874 <_printf_float+0x2d8>)
 800667a:	e7d4      	b.n	8006626 <_printf_float+0x8a>
 800667c:	6863      	ldr	r3, [r4, #4]
 800667e:	f00a 02df 	and.w	r2, sl, #223	@ 0xdf
 8006682:	9206      	str	r2, [sp, #24]
 8006684:	1c5a      	adds	r2, r3, #1
 8006686:	d13b      	bne.n	8006700 <_printf_float+0x164>
 8006688:	2306      	movs	r3, #6
 800668a:	6063      	str	r3, [r4, #4]
 800668c:	f44b 6280 	orr.w	r2, fp, #1024	@ 0x400
 8006690:	2300      	movs	r3, #0
 8006692:	6022      	str	r2, [r4, #0]
 8006694:	9303      	str	r3, [sp, #12]
 8006696:	ab0a      	add	r3, sp, #40	@ 0x28
 8006698:	e9cd a301 	strd	sl, r3, [sp, #4]
 800669c:	ab09      	add	r3, sp, #36	@ 0x24
 800669e:	9300      	str	r3, [sp, #0]
 80066a0:	6861      	ldr	r1, [r4, #4]
 80066a2:	ec49 8b10 	vmov	d0, r8, r9
 80066a6:	f10d 0323 	add.w	r3, sp, #35	@ 0x23
 80066aa:	4628      	mov	r0, r5
 80066ac:	f7ff fed6 	bl	800645c <__cvt>
 80066b0:	9b06      	ldr	r3, [sp, #24]
 80066b2:	9909      	ldr	r1, [sp, #36]	@ 0x24
 80066b4:	2b47      	cmp	r3, #71	@ 0x47
 80066b6:	4680      	mov	r8, r0
 80066b8:	d129      	bne.n	800670e <_printf_float+0x172>
 80066ba:	1cc8      	adds	r0, r1, #3
 80066bc:	db02      	blt.n	80066c4 <_printf_float+0x128>
 80066be:	6863      	ldr	r3, [r4, #4]
 80066c0:	4299      	cmp	r1, r3
 80066c2:	dd41      	ble.n	8006748 <_printf_float+0x1ac>
 80066c4:	f1aa 0a02 	sub.w	sl, sl, #2
 80066c8:	fa5f fa8a 	uxtb.w	sl, sl
 80066cc:	3901      	subs	r1, #1
 80066ce:	4652      	mov	r2, sl
 80066d0:	f104 0050 	add.w	r0, r4, #80	@ 0x50
 80066d4:	9109      	str	r1, [sp, #36]	@ 0x24
 80066d6:	f7ff ff26 	bl	8006526 <__exponent>
 80066da:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 80066dc:	1813      	adds	r3, r2, r0
 80066de:	2a01      	cmp	r2, #1
 80066e0:	4681      	mov	r9, r0
 80066e2:	6123      	str	r3, [r4, #16]
 80066e4:	dc02      	bgt.n	80066ec <_printf_float+0x150>
 80066e6:	6822      	ldr	r2, [r4, #0]
 80066e8:	07d2      	lsls	r2, r2, #31
 80066ea:	d501      	bpl.n	80066f0 <_printf_float+0x154>
 80066ec:	3301      	adds	r3, #1
 80066ee:	6123      	str	r3, [r4, #16]
 80066f0:	f89d 3023 	ldrb.w	r3, [sp, #35]	@ 0x23
 80066f4:	2b00      	cmp	r3, #0
 80066f6:	d0a2      	beq.n	800663e <_printf_float+0xa2>
 80066f8:	232d      	movs	r3, #45	@ 0x2d
 80066fa:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 80066fe:	e79e      	b.n	800663e <_printf_float+0xa2>
 8006700:	9a06      	ldr	r2, [sp, #24]
 8006702:	2a47      	cmp	r2, #71	@ 0x47
 8006704:	d1c2      	bne.n	800668c <_printf_float+0xf0>
 8006706:	2b00      	cmp	r3, #0
 8006708:	d1c0      	bne.n	800668c <_printf_float+0xf0>
 800670a:	2301      	movs	r3, #1
 800670c:	e7bd      	b.n	800668a <_printf_float+0xee>
 800670e:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 8006712:	d9db      	bls.n	80066cc <_printf_float+0x130>
 8006714:	f1ba 0f66 	cmp.w	sl, #102	@ 0x66
 8006718:	d118      	bne.n	800674c <_printf_float+0x1b0>
 800671a:	2900      	cmp	r1, #0
 800671c:	6863      	ldr	r3, [r4, #4]
 800671e:	dd0b      	ble.n	8006738 <_printf_float+0x19c>
 8006720:	6121      	str	r1, [r4, #16]
 8006722:	b913      	cbnz	r3, 800672a <_printf_float+0x18e>
 8006724:	6822      	ldr	r2, [r4, #0]
 8006726:	07d0      	lsls	r0, r2, #31
 8006728:	d502      	bpl.n	8006730 <_printf_float+0x194>
 800672a:	3301      	adds	r3, #1
 800672c:	440b      	add	r3, r1
 800672e:	6123      	str	r3, [r4, #16]
 8006730:	65a1      	str	r1, [r4, #88]	@ 0x58
 8006732:	f04f 0900 	mov.w	r9, #0
 8006736:	e7db      	b.n	80066f0 <_printf_float+0x154>
 8006738:	b913      	cbnz	r3, 8006740 <_printf_float+0x1a4>
 800673a:	6822      	ldr	r2, [r4, #0]
 800673c:	07d2      	lsls	r2, r2, #31
 800673e:	d501      	bpl.n	8006744 <_printf_float+0x1a8>
 8006740:	3302      	adds	r3, #2
 8006742:	e7f4      	b.n	800672e <_printf_float+0x192>
 8006744:	2301      	movs	r3, #1
 8006746:	e7f2      	b.n	800672e <_printf_float+0x192>
 8006748:	f04f 0a67 	mov.w	sl, #103	@ 0x67
 800674c:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800674e:	4299      	cmp	r1, r3
 8006750:	db05      	blt.n	800675e <_printf_float+0x1c2>
 8006752:	6823      	ldr	r3, [r4, #0]
 8006754:	6121      	str	r1, [r4, #16]
 8006756:	07d8      	lsls	r0, r3, #31
 8006758:	d5ea      	bpl.n	8006730 <_printf_float+0x194>
 800675a:	1c4b      	adds	r3, r1, #1
 800675c:	e7e7      	b.n	800672e <_printf_float+0x192>
 800675e:	2900      	cmp	r1, #0
 8006760:	bfd4      	ite	le
 8006762:	f1c1 0202 	rsble	r2, r1, #2
 8006766:	2201      	movgt	r2, #1
 8006768:	4413      	add	r3, r2
 800676a:	e7e0      	b.n	800672e <_printf_float+0x192>
 800676c:	6823      	ldr	r3, [r4, #0]
 800676e:	055a      	lsls	r2, r3, #21
 8006770:	d407      	bmi.n	8006782 <_printf_float+0x1e6>
 8006772:	6923      	ldr	r3, [r4, #16]
 8006774:	4642      	mov	r2, r8
 8006776:	4631      	mov	r1, r6
 8006778:	4628      	mov	r0, r5
 800677a:	47b8      	blx	r7
 800677c:	3001      	adds	r0, #1
 800677e:	d12b      	bne.n	80067d8 <_printf_float+0x23c>
 8006780:	e767      	b.n	8006652 <_printf_float+0xb6>
 8006782:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 8006786:	f240 80dd 	bls.w	8006944 <_printf_float+0x3a8>
 800678a:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 800678e:	2200      	movs	r2, #0
 8006790:	2300      	movs	r3, #0
 8006792:	f7fa f9b9 	bl	8000b08 <__aeabi_dcmpeq>
 8006796:	2800      	cmp	r0, #0
 8006798:	d033      	beq.n	8006802 <_printf_float+0x266>
 800679a:	4a37      	ldr	r2, [pc, #220]	@ (8006878 <_printf_float+0x2dc>)
 800679c:	2301      	movs	r3, #1
 800679e:	4631      	mov	r1, r6
 80067a0:	4628      	mov	r0, r5
 80067a2:	47b8      	blx	r7
 80067a4:	3001      	adds	r0, #1
 80067a6:	f43f af54 	beq.w	8006652 <_printf_float+0xb6>
 80067aa:	e9dd 3809 	ldrd	r3, r8, [sp, #36]	@ 0x24
 80067ae:	4543      	cmp	r3, r8
 80067b0:	db02      	blt.n	80067b8 <_printf_float+0x21c>
 80067b2:	6823      	ldr	r3, [r4, #0]
 80067b4:	07d8      	lsls	r0, r3, #31
 80067b6:	d50f      	bpl.n	80067d8 <_printf_float+0x23c>
 80067b8:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 80067bc:	4631      	mov	r1, r6
 80067be:	4628      	mov	r0, r5
 80067c0:	47b8      	blx	r7
 80067c2:	3001      	adds	r0, #1
 80067c4:	f43f af45 	beq.w	8006652 <_printf_float+0xb6>
 80067c8:	f04f 0900 	mov.w	r9, #0
 80067cc:	f108 38ff 	add.w	r8, r8, #4294967295
 80067d0:	f104 0a1a 	add.w	sl, r4, #26
 80067d4:	45c8      	cmp	r8, r9
 80067d6:	dc09      	bgt.n	80067ec <_printf_float+0x250>
 80067d8:	6823      	ldr	r3, [r4, #0]
 80067da:	079b      	lsls	r3, r3, #30
 80067dc:	f100 8103 	bmi.w	80069e6 <_printf_float+0x44a>
 80067e0:	68e0      	ldr	r0, [r4, #12]
 80067e2:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 80067e4:	4298      	cmp	r0, r3
 80067e6:	bfb8      	it	lt
 80067e8:	4618      	movlt	r0, r3
 80067ea:	e734      	b.n	8006656 <_printf_float+0xba>
 80067ec:	2301      	movs	r3, #1
 80067ee:	4652      	mov	r2, sl
 80067f0:	4631      	mov	r1, r6
 80067f2:	4628      	mov	r0, r5
 80067f4:	47b8      	blx	r7
 80067f6:	3001      	adds	r0, #1
 80067f8:	f43f af2b 	beq.w	8006652 <_printf_float+0xb6>
 80067fc:	f109 0901 	add.w	r9, r9, #1
 8006800:	e7e8      	b.n	80067d4 <_printf_float+0x238>
 8006802:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8006804:	2b00      	cmp	r3, #0
 8006806:	dc39      	bgt.n	800687c <_printf_float+0x2e0>
 8006808:	4a1b      	ldr	r2, [pc, #108]	@ (8006878 <_printf_float+0x2dc>)
 800680a:	2301      	movs	r3, #1
 800680c:	4631      	mov	r1, r6
 800680e:	4628      	mov	r0, r5
 8006810:	47b8      	blx	r7
 8006812:	3001      	adds	r0, #1
 8006814:	f43f af1d 	beq.w	8006652 <_printf_float+0xb6>
 8006818:	e9dd 3909 	ldrd	r3, r9, [sp, #36]	@ 0x24
 800681c:	ea59 0303 	orrs.w	r3, r9, r3
 8006820:	d102      	bne.n	8006828 <_printf_float+0x28c>
 8006822:	6823      	ldr	r3, [r4, #0]
 8006824:	07d9      	lsls	r1, r3, #31
 8006826:	d5d7      	bpl.n	80067d8 <_printf_float+0x23c>
 8006828:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800682c:	4631      	mov	r1, r6
 800682e:	4628      	mov	r0, r5
 8006830:	47b8      	blx	r7
 8006832:	3001      	adds	r0, #1
 8006834:	f43f af0d 	beq.w	8006652 <_printf_float+0xb6>
 8006838:	f04f 0a00 	mov.w	sl, #0
 800683c:	f104 0b1a 	add.w	fp, r4, #26
 8006840:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8006842:	425b      	negs	r3, r3
 8006844:	4553      	cmp	r3, sl
 8006846:	dc01      	bgt.n	800684c <_printf_float+0x2b0>
 8006848:	464b      	mov	r3, r9
 800684a:	e793      	b.n	8006774 <_printf_float+0x1d8>
 800684c:	2301      	movs	r3, #1
 800684e:	465a      	mov	r2, fp
 8006850:	4631      	mov	r1, r6
 8006852:	4628      	mov	r0, r5
 8006854:	47b8      	blx	r7
 8006856:	3001      	adds	r0, #1
 8006858:	f43f aefb 	beq.w	8006652 <_printf_float+0xb6>
 800685c:	f10a 0a01 	add.w	sl, sl, #1
 8006860:	e7ee      	b.n	8006840 <_printf_float+0x2a4>
 8006862:	bf00      	nop
 8006864:	7fefffff 	.word	0x7fefffff
 8006868:	0800a338 	.word	0x0800a338
 800686c:	0800a33c 	.word	0x0800a33c
 8006870:	0800a340 	.word	0x0800a340
 8006874:	0800a344 	.word	0x0800a344
 8006878:	0800a348 	.word	0x0800a348
 800687c:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 800687e:	f8dd a028 	ldr.w	sl, [sp, #40]	@ 0x28
 8006882:	4553      	cmp	r3, sl
 8006884:	bfa8      	it	ge
 8006886:	4653      	movge	r3, sl
 8006888:	2b00      	cmp	r3, #0
 800688a:	4699      	mov	r9, r3
 800688c:	dc36      	bgt.n	80068fc <_printf_float+0x360>
 800688e:	f04f 0b00 	mov.w	fp, #0
 8006892:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8006896:	f104 021a 	add.w	r2, r4, #26
 800689a:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 800689c:	9306      	str	r3, [sp, #24]
 800689e:	eba3 0309 	sub.w	r3, r3, r9
 80068a2:	455b      	cmp	r3, fp
 80068a4:	dc31      	bgt.n	800690a <_printf_float+0x36e>
 80068a6:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80068a8:	459a      	cmp	sl, r3
 80068aa:	dc3a      	bgt.n	8006922 <_printf_float+0x386>
 80068ac:	6823      	ldr	r3, [r4, #0]
 80068ae:	07da      	lsls	r2, r3, #31
 80068b0:	d437      	bmi.n	8006922 <_printf_float+0x386>
 80068b2:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80068b4:	ebaa 0903 	sub.w	r9, sl, r3
 80068b8:	9b06      	ldr	r3, [sp, #24]
 80068ba:	ebaa 0303 	sub.w	r3, sl, r3
 80068be:	4599      	cmp	r9, r3
 80068c0:	bfa8      	it	ge
 80068c2:	4699      	movge	r9, r3
 80068c4:	f1b9 0f00 	cmp.w	r9, #0
 80068c8:	dc33      	bgt.n	8006932 <_printf_float+0x396>
 80068ca:	f04f 0800 	mov.w	r8, #0
 80068ce:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 80068d2:	f104 0b1a 	add.w	fp, r4, #26
 80068d6:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80068d8:	ebaa 0303 	sub.w	r3, sl, r3
 80068dc:	eba3 0309 	sub.w	r3, r3, r9
 80068e0:	4543      	cmp	r3, r8
 80068e2:	f77f af79 	ble.w	80067d8 <_printf_float+0x23c>
 80068e6:	2301      	movs	r3, #1
 80068e8:	465a      	mov	r2, fp
 80068ea:	4631      	mov	r1, r6
 80068ec:	4628      	mov	r0, r5
 80068ee:	47b8      	blx	r7
 80068f0:	3001      	adds	r0, #1
 80068f2:	f43f aeae 	beq.w	8006652 <_printf_float+0xb6>
 80068f6:	f108 0801 	add.w	r8, r8, #1
 80068fa:	e7ec      	b.n	80068d6 <_printf_float+0x33a>
 80068fc:	4642      	mov	r2, r8
 80068fe:	4631      	mov	r1, r6
 8006900:	4628      	mov	r0, r5
 8006902:	47b8      	blx	r7
 8006904:	3001      	adds	r0, #1
 8006906:	d1c2      	bne.n	800688e <_printf_float+0x2f2>
 8006908:	e6a3      	b.n	8006652 <_printf_float+0xb6>
 800690a:	2301      	movs	r3, #1
 800690c:	4631      	mov	r1, r6
 800690e:	4628      	mov	r0, r5
 8006910:	9206      	str	r2, [sp, #24]
 8006912:	47b8      	blx	r7
 8006914:	3001      	adds	r0, #1
 8006916:	f43f ae9c 	beq.w	8006652 <_printf_float+0xb6>
 800691a:	9a06      	ldr	r2, [sp, #24]
 800691c:	f10b 0b01 	add.w	fp, fp, #1
 8006920:	e7bb      	b.n	800689a <_printf_float+0x2fe>
 8006922:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8006926:	4631      	mov	r1, r6
 8006928:	4628      	mov	r0, r5
 800692a:	47b8      	blx	r7
 800692c:	3001      	adds	r0, #1
 800692e:	d1c0      	bne.n	80068b2 <_printf_float+0x316>
 8006930:	e68f      	b.n	8006652 <_printf_float+0xb6>
 8006932:	9a06      	ldr	r2, [sp, #24]
 8006934:	464b      	mov	r3, r9
 8006936:	4442      	add	r2, r8
 8006938:	4631      	mov	r1, r6
 800693a:	4628      	mov	r0, r5
 800693c:	47b8      	blx	r7
 800693e:	3001      	adds	r0, #1
 8006940:	d1c3      	bne.n	80068ca <_printf_float+0x32e>
 8006942:	e686      	b.n	8006652 <_printf_float+0xb6>
 8006944:	f8dd a028 	ldr.w	sl, [sp, #40]	@ 0x28
 8006948:	f1ba 0f01 	cmp.w	sl, #1
 800694c:	dc01      	bgt.n	8006952 <_printf_float+0x3b6>
 800694e:	07db      	lsls	r3, r3, #31
 8006950:	d536      	bpl.n	80069c0 <_printf_float+0x424>
 8006952:	2301      	movs	r3, #1
 8006954:	4642      	mov	r2, r8
 8006956:	4631      	mov	r1, r6
 8006958:	4628      	mov	r0, r5
 800695a:	47b8      	blx	r7
 800695c:	3001      	adds	r0, #1
 800695e:	f43f ae78 	beq.w	8006652 <_printf_float+0xb6>
 8006962:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8006966:	4631      	mov	r1, r6
 8006968:	4628      	mov	r0, r5
 800696a:	47b8      	blx	r7
 800696c:	3001      	adds	r0, #1
 800696e:	f43f ae70 	beq.w	8006652 <_printf_float+0xb6>
 8006972:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 8006976:	2200      	movs	r2, #0
 8006978:	2300      	movs	r3, #0
 800697a:	f10a 3aff 	add.w	sl, sl, #4294967295
 800697e:	f7fa f8c3 	bl	8000b08 <__aeabi_dcmpeq>
 8006982:	b9c0      	cbnz	r0, 80069b6 <_printf_float+0x41a>
 8006984:	4653      	mov	r3, sl
 8006986:	f108 0201 	add.w	r2, r8, #1
 800698a:	4631      	mov	r1, r6
 800698c:	4628      	mov	r0, r5
 800698e:	47b8      	blx	r7
 8006990:	3001      	adds	r0, #1
 8006992:	d10c      	bne.n	80069ae <_printf_float+0x412>
 8006994:	e65d      	b.n	8006652 <_printf_float+0xb6>
 8006996:	2301      	movs	r3, #1
 8006998:	465a      	mov	r2, fp
 800699a:	4631      	mov	r1, r6
 800699c:	4628      	mov	r0, r5
 800699e:	47b8      	blx	r7
 80069a0:	3001      	adds	r0, #1
 80069a2:	f43f ae56 	beq.w	8006652 <_printf_float+0xb6>
 80069a6:	f108 0801 	add.w	r8, r8, #1
 80069aa:	45d0      	cmp	r8, sl
 80069ac:	dbf3      	blt.n	8006996 <_printf_float+0x3fa>
 80069ae:	464b      	mov	r3, r9
 80069b0:	f104 0250 	add.w	r2, r4, #80	@ 0x50
 80069b4:	e6df      	b.n	8006776 <_printf_float+0x1da>
 80069b6:	f04f 0800 	mov.w	r8, #0
 80069ba:	f104 0b1a 	add.w	fp, r4, #26
 80069be:	e7f4      	b.n	80069aa <_printf_float+0x40e>
 80069c0:	2301      	movs	r3, #1
 80069c2:	4642      	mov	r2, r8
 80069c4:	e7e1      	b.n	800698a <_printf_float+0x3ee>
 80069c6:	2301      	movs	r3, #1
 80069c8:	464a      	mov	r2, r9
 80069ca:	4631      	mov	r1, r6
 80069cc:	4628      	mov	r0, r5
 80069ce:	47b8      	blx	r7
 80069d0:	3001      	adds	r0, #1
 80069d2:	f43f ae3e 	beq.w	8006652 <_printf_float+0xb6>
 80069d6:	f108 0801 	add.w	r8, r8, #1
 80069da:	68e3      	ldr	r3, [r4, #12]
 80069dc:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 80069de:	1a5b      	subs	r3, r3, r1
 80069e0:	4543      	cmp	r3, r8
 80069e2:	dcf0      	bgt.n	80069c6 <_printf_float+0x42a>
 80069e4:	e6fc      	b.n	80067e0 <_printf_float+0x244>
 80069e6:	f04f 0800 	mov.w	r8, #0
 80069ea:	f104 0919 	add.w	r9, r4, #25
 80069ee:	e7f4      	b.n	80069da <_printf_float+0x43e>

080069f0 <_printf_common>:
 80069f0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80069f4:	4616      	mov	r6, r2
 80069f6:	4698      	mov	r8, r3
 80069f8:	688a      	ldr	r2, [r1, #8]
 80069fa:	690b      	ldr	r3, [r1, #16]
 80069fc:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8006a00:	4293      	cmp	r3, r2
 8006a02:	bfb8      	it	lt
 8006a04:	4613      	movlt	r3, r2
 8006a06:	6033      	str	r3, [r6, #0]
 8006a08:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 8006a0c:	4607      	mov	r7, r0
 8006a0e:	460c      	mov	r4, r1
 8006a10:	b10a      	cbz	r2, 8006a16 <_printf_common+0x26>
 8006a12:	3301      	adds	r3, #1
 8006a14:	6033      	str	r3, [r6, #0]
 8006a16:	6823      	ldr	r3, [r4, #0]
 8006a18:	0699      	lsls	r1, r3, #26
 8006a1a:	bf42      	ittt	mi
 8006a1c:	6833      	ldrmi	r3, [r6, #0]
 8006a1e:	3302      	addmi	r3, #2
 8006a20:	6033      	strmi	r3, [r6, #0]
 8006a22:	6825      	ldr	r5, [r4, #0]
 8006a24:	f015 0506 	ands.w	r5, r5, #6
 8006a28:	d106      	bne.n	8006a38 <_printf_common+0x48>
 8006a2a:	f104 0a19 	add.w	sl, r4, #25
 8006a2e:	68e3      	ldr	r3, [r4, #12]
 8006a30:	6832      	ldr	r2, [r6, #0]
 8006a32:	1a9b      	subs	r3, r3, r2
 8006a34:	42ab      	cmp	r3, r5
 8006a36:	dc26      	bgt.n	8006a86 <_printf_common+0x96>
 8006a38:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 8006a3c:	6822      	ldr	r2, [r4, #0]
 8006a3e:	3b00      	subs	r3, #0
 8006a40:	bf18      	it	ne
 8006a42:	2301      	movne	r3, #1
 8006a44:	0692      	lsls	r2, r2, #26
 8006a46:	d42b      	bmi.n	8006aa0 <_printf_common+0xb0>
 8006a48:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 8006a4c:	4641      	mov	r1, r8
 8006a4e:	4638      	mov	r0, r7
 8006a50:	47c8      	blx	r9
 8006a52:	3001      	adds	r0, #1
 8006a54:	d01e      	beq.n	8006a94 <_printf_common+0xa4>
 8006a56:	6823      	ldr	r3, [r4, #0]
 8006a58:	6922      	ldr	r2, [r4, #16]
 8006a5a:	f003 0306 	and.w	r3, r3, #6
 8006a5e:	2b04      	cmp	r3, #4
 8006a60:	bf02      	ittt	eq
 8006a62:	68e5      	ldreq	r5, [r4, #12]
 8006a64:	6833      	ldreq	r3, [r6, #0]
 8006a66:	1aed      	subeq	r5, r5, r3
 8006a68:	68a3      	ldr	r3, [r4, #8]
 8006a6a:	bf0c      	ite	eq
 8006a6c:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8006a70:	2500      	movne	r5, #0
 8006a72:	4293      	cmp	r3, r2
 8006a74:	bfc4      	itt	gt
 8006a76:	1a9b      	subgt	r3, r3, r2
 8006a78:	18ed      	addgt	r5, r5, r3
 8006a7a:	2600      	movs	r6, #0
 8006a7c:	341a      	adds	r4, #26
 8006a7e:	42b5      	cmp	r5, r6
 8006a80:	d11a      	bne.n	8006ab8 <_printf_common+0xc8>
 8006a82:	2000      	movs	r0, #0
 8006a84:	e008      	b.n	8006a98 <_printf_common+0xa8>
 8006a86:	2301      	movs	r3, #1
 8006a88:	4652      	mov	r2, sl
 8006a8a:	4641      	mov	r1, r8
 8006a8c:	4638      	mov	r0, r7
 8006a8e:	47c8      	blx	r9
 8006a90:	3001      	adds	r0, #1
 8006a92:	d103      	bne.n	8006a9c <_printf_common+0xac>
 8006a94:	f04f 30ff 	mov.w	r0, #4294967295
 8006a98:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006a9c:	3501      	adds	r5, #1
 8006a9e:	e7c6      	b.n	8006a2e <_printf_common+0x3e>
 8006aa0:	18e1      	adds	r1, r4, r3
 8006aa2:	1c5a      	adds	r2, r3, #1
 8006aa4:	2030      	movs	r0, #48	@ 0x30
 8006aa6:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 8006aaa:	4422      	add	r2, r4
 8006aac:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 8006ab0:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 8006ab4:	3302      	adds	r3, #2
 8006ab6:	e7c7      	b.n	8006a48 <_printf_common+0x58>
 8006ab8:	2301      	movs	r3, #1
 8006aba:	4622      	mov	r2, r4
 8006abc:	4641      	mov	r1, r8
 8006abe:	4638      	mov	r0, r7
 8006ac0:	47c8      	blx	r9
 8006ac2:	3001      	adds	r0, #1
 8006ac4:	d0e6      	beq.n	8006a94 <_printf_common+0xa4>
 8006ac6:	3601      	adds	r6, #1
 8006ac8:	e7d9      	b.n	8006a7e <_printf_common+0x8e>
	...

08006acc <_printf_i>:
 8006acc:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8006ad0:	7e0f      	ldrb	r7, [r1, #24]
 8006ad2:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 8006ad4:	2f78      	cmp	r7, #120	@ 0x78
 8006ad6:	4691      	mov	r9, r2
 8006ad8:	4680      	mov	r8, r0
 8006ada:	460c      	mov	r4, r1
 8006adc:	469a      	mov	sl, r3
 8006ade:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 8006ae2:	d807      	bhi.n	8006af4 <_printf_i+0x28>
 8006ae4:	2f62      	cmp	r7, #98	@ 0x62
 8006ae6:	d80a      	bhi.n	8006afe <_printf_i+0x32>
 8006ae8:	2f00      	cmp	r7, #0
 8006aea:	f000 80d2 	beq.w	8006c92 <_printf_i+0x1c6>
 8006aee:	2f58      	cmp	r7, #88	@ 0x58
 8006af0:	f000 80b9 	beq.w	8006c66 <_printf_i+0x19a>
 8006af4:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8006af8:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 8006afc:	e03a      	b.n	8006b74 <_printf_i+0xa8>
 8006afe:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 8006b02:	2b15      	cmp	r3, #21
 8006b04:	d8f6      	bhi.n	8006af4 <_printf_i+0x28>
 8006b06:	a101      	add	r1, pc, #4	@ (adr r1, 8006b0c <_printf_i+0x40>)
 8006b08:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8006b0c:	08006b65 	.word	0x08006b65
 8006b10:	08006b79 	.word	0x08006b79
 8006b14:	08006af5 	.word	0x08006af5
 8006b18:	08006af5 	.word	0x08006af5
 8006b1c:	08006af5 	.word	0x08006af5
 8006b20:	08006af5 	.word	0x08006af5
 8006b24:	08006b79 	.word	0x08006b79
 8006b28:	08006af5 	.word	0x08006af5
 8006b2c:	08006af5 	.word	0x08006af5
 8006b30:	08006af5 	.word	0x08006af5
 8006b34:	08006af5 	.word	0x08006af5
 8006b38:	08006c79 	.word	0x08006c79
 8006b3c:	08006ba3 	.word	0x08006ba3
 8006b40:	08006c33 	.word	0x08006c33
 8006b44:	08006af5 	.word	0x08006af5
 8006b48:	08006af5 	.word	0x08006af5
 8006b4c:	08006c9b 	.word	0x08006c9b
 8006b50:	08006af5 	.word	0x08006af5
 8006b54:	08006ba3 	.word	0x08006ba3
 8006b58:	08006af5 	.word	0x08006af5
 8006b5c:	08006af5 	.word	0x08006af5
 8006b60:	08006c3b 	.word	0x08006c3b
 8006b64:	6833      	ldr	r3, [r6, #0]
 8006b66:	1d1a      	adds	r2, r3, #4
 8006b68:	681b      	ldr	r3, [r3, #0]
 8006b6a:	6032      	str	r2, [r6, #0]
 8006b6c:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8006b70:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 8006b74:	2301      	movs	r3, #1
 8006b76:	e09d      	b.n	8006cb4 <_printf_i+0x1e8>
 8006b78:	6833      	ldr	r3, [r6, #0]
 8006b7a:	6820      	ldr	r0, [r4, #0]
 8006b7c:	1d19      	adds	r1, r3, #4
 8006b7e:	6031      	str	r1, [r6, #0]
 8006b80:	0606      	lsls	r6, r0, #24
 8006b82:	d501      	bpl.n	8006b88 <_printf_i+0xbc>
 8006b84:	681d      	ldr	r5, [r3, #0]
 8006b86:	e003      	b.n	8006b90 <_printf_i+0xc4>
 8006b88:	0645      	lsls	r5, r0, #25
 8006b8a:	d5fb      	bpl.n	8006b84 <_printf_i+0xb8>
 8006b8c:	f9b3 5000 	ldrsh.w	r5, [r3]
 8006b90:	2d00      	cmp	r5, #0
 8006b92:	da03      	bge.n	8006b9c <_printf_i+0xd0>
 8006b94:	232d      	movs	r3, #45	@ 0x2d
 8006b96:	426d      	negs	r5, r5
 8006b98:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8006b9c:	4859      	ldr	r0, [pc, #356]	@ (8006d04 <_printf_i+0x238>)
 8006b9e:	230a      	movs	r3, #10
 8006ba0:	e011      	b.n	8006bc6 <_printf_i+0xfa>
 8006ba2:	6821      	ldr	r1, [r4, #0]
 8006ba4:	6833      	ldr	r3, [r6, #0]
 8006ba6:	0608      	lsls	r0, r1, #24
 8006ba8:	f853 5b04 	ldr.w	r5, [r3], #4
 8006bac:	d402      	bmi.n	8006bb4 <_printf_i+0xe8>
 8006bae:	0649      	lsls	r1, r1, #25
 8006bb0:	bf48      	it	mi
 8006bb2:	b2ad      	uxthmi	r5, r5
 8006bb4:	2f6f      	cmp	r7, #111	@ 0x6f
 8006bb6:	4853      	ldr	r0, [pc, #332]	@ (8006d04 <_printf_i+0x238>)
 8006bb8:	6033      	str	r3, [r6, #0]
 8006bba:	bf14      	ite	ne
 8006bbc:	230a      	movne	r3, #10
 8006bbe:	2308      	moveq	r3, #8
 8006bc0:	2100      	movs	r1, #0
 8006bc2:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 8006bc6:	6866      	ldr	r6, [r4, #4]
 8006bc8:	60a6      	str	r6, [r4, #8]
 8006bca:	2e00      	cmp	r6, #0
 8006bcc:	bfa2      	ittt	ge
 8006bce:	6821      	ldrge	r1, [r4, #0]
 8006bd0:	f021 0104 	bicge.w	r1, r1, #4
 8006bd4:	6021      	strge	r1, [r4, #0]
 8006bd6:	b90d      	cbnz	r5, 8006bdc <_printf_i+0x110>
 8006bd8:	2e00      	cmp	r6, #0
 8006bda:	d04b      	beq.n	8006c74 <_printf_i+0x1a8>
 8006bdc:	4616      	mov	r6, r2
 8006bde:	fbb5 f1f3 	udiv	r1, r5, r3
 8006be2:	fb03 5711 	mls	r7, r3, r1, r5
 8006be6:	5dc7      	ldrb	r7, [r0, r7]
 8006be8:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8006bec:	462f      	mov	r7, r5
 8006bee:	42bb      	cmp	r3, r7
 8006bf0:	460d      	mov	r5, r1
 8006bf2:	d9f4      	bls.n	8006bde <_printf_i+0x112>
 8006bf4:	2b08      	cmp	r3, #8
 8006bf6:	d10b      	bne.n	8006c10 <_printf_i+0x144>
 8006bf8:	6823      	ldr	r3, [r4, #0]
 8006bfa:	07df      	lsls	r7, r3, #31
 8006bfc:	d508      	bpl.n	8006c10 <_printf_i+0x144>
 8006bfe:	6923      	ldr	r3, [r4, #16]
 8006c00:	6861      	ldr	r1, [r4, #4]
 8006c02:	4299      	cmp	r1, r3
 8006c04:	bfde      	ittt	le
 8006c06:	2330      	movle	r3, #48	@ 0x30
 8006c08:	f806 3c01 	strble.w	r3, [r6, #-1]
 8006c0c:	f106 36ff 	addle.w	r6, r6, #4294967295
 8006c10:	1b92      	subs	r2, r2, r6
 8006c12:	6122      	str	r2, [r4, #16]
 8006c14:	f8cd a000 	str.w	sl, [sp]
 8006c18:	464b      	mov	r3, r9
 8006c1a:	aa03      	add	r2, sp, #12
 8006c1c:	4621      	mov	r1, r4
 8006c1e:	4640      	mov	r0, r8
 8006c20:	f7ff fee6 	bl	80069f0 <_printf_common>
 8006c24:	3001      	adds	r0, #1
 8006c26:	d14a      	bne.n	8006cbe <_printf_i+0x1f2>
 8006c28:	f04f 30ff 	mov.w	r0, #4294967295
 8006c2c:	b004      	add	sp, #16
 8006c2e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006c32:	6823      	ldr	r3, [r4, #0]
 8006c34:	f043 0320 	orr.w	r3, r3, #32
 8006c38:	6023      	str	r3, [r4, #0]
 8006c3a:	4833      	ldr	r0, [pc, #204]	@ (8006d08 <_printf_i+0x23c>)
 8006c3c:	2778      	movs	r7, #120	@ 0x78
 8006c3e:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 8006c42:	6823      	ldr	r3, [r4, #0]
 8006c44:	6831      	ldr	r1, [r6, #0]
 8006c46:	061f      	lsls	r7, r3, #24
 8006c48:	f851 5b04 	ldr.w	r5, [r1], #4
 8006c4c:	d402      	bmi.n	8006c54 <_printf_i+0x188>
 8006c4e:	065f      	lsls	r7, r3, #25
 8006c50:	bf48      	it	mi
 8006c52:	b2ad      	uxthmi	r5, r5
 8006c54:	6031      	str	r1, [r6, #0]
 8006c56:	07d9      	lsls	r1, r3, #31
 8006c58:	bf44      	itt	mi
 8006c5a:	f043 0320 	orrmi.w	r3, r3, #32
 8006c5e:	6023      	strmi	r3, [r4, #0]
 8006c60:	b11d      	cbz	r5, 8006c6a <_printf_i+0x19e>
 8006c62:	2310      	movs	r3, #16
 8006c64:	e7ac      	b.n	8006bc0 <_printf_i+0xf4>
 8006c66:	4827      	ldr	r0, [pc, #156]	@ (8006d04 <_printf_i+0x238>)
 8006c68:	e7e9      	b.n	8006c3e <_printf_i+0x172>
 8006c6a:	6823      	ldr	r3, [r4, #0]
 8006c6c:	f023 0320 	bic.w	r3, r3, #32
 8006c70:	6023      	str	r3, [r4, #0]
 8006c72:	e7f6      	b.n	8006c62 <_printf_i+0x196>
 8006c74:	4616      	mov	r6, r2
 8006c76:	e7bd      	b.n	8006bf4 <_printf_i+0x128>
 8006c78:	6833      	ldr	r3, [r6, #0]
 8006c7a:	6825      	ldr	r5, [r4, #0]
 8006c7c:	6961      	ldr	r1, [r4, #20]
 8006c7e:	1d18      	adds	r0, r3, #4
 8006c80:	6030      	str	r0, [r6, #0]
 8006c82:	062e      	lsls	r6, r5, #24
 8006c84:	681b      	ldr	r3, [r3, #0]
 8006c86:	d501      	bpl.n	8006c8c <_printf_i+0x1c0>
 8006c88:	6019      	str	r1, [r3, #0]
 8006c8a:	e002      	b.n	8006c92 <_printf_i+0x1c6>
 8006c8c:	0668      	lsls	r0, r5, #25
 8006c8e:	d5fb      	bpl.n	8006c88 <_printf_i+0x1bc>
 8006c90:	8019      	strh	r1, [r3, #0]
 8006c92:	2300      	movs	r3, #0
 8006c94:	6123      	str	r3, [r4, #16]
 8006c96:	4616      	mov	r6, r2
 8006c98:	e7bc      	b.n	8006c14 <_printf_i+0x148>
 8006c9a:	6833      	ldr	r3, [r6, #0]
 8006c9c:	1d1a      	adds	r2, r3, #4
 8006c9e:	6032      	str	r2, [r6, #0]
 8006ca0:	681e      	ldr	r6, [r3, #0]
 8006ca2:	6862      	ldr	r2, [r4, #4]
 8006ca4:	2100      	movs	r1, #0
 8006ca6:	4630      	mov	r0, r6
 8006ca8:	f7f9 fab2 	bl	8000210 <memchr>
 8006cac:	b108      	cbz	r0, 8006cb2 <_printf_i+0x1e6>
 8006cae:	1b80      	subs	r0, r0, r6
 8006cb0:	6060      	str	r0, [r4, #4]
 8006cb2:	6863      	ldr	r3, [r4, #4]
 8006cb4:	6123      	str	r3, [r4, #16]
 8006cb6:	2300      	movs	r3, #0
 8006cb8:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8006cbc:	e7aa      	b.n	8006c14 <_printf_i+0x148>
 8006cbe:	6923      	ldr	r3, [r4, #16]
 8006cc0:	4632      	mov	r2, r6
 8006cc2:	4649      	mov	r1, r9
 8006cc4:	4640      	mov	r0, r8
 8006cc6:	47d0      	blx	sl
 8006cc8:	3001      	adds	r0, #1
 8006cca:	d0ad      	beq.n	8006c28 <_printf_i+0x15c>
 8006ccc:	6823      	ldr	r3, [r4, #0]
 8006cce:	079b      	lsls	r3, r3, #30
 8006cd0:	d413      	bmi.n	8006cfa <_printf_i+0x22e>
 8006cd2:	68e0      	ldr	r0, [r4, #12]
 8006cd4:	9b03      	ldr	r3, [sp, #12]
 8006cd6:	4298      	cmp	r0, r3
 8006cd8:	bfb8      	it	lt
 8006cda:	4618      	movlt	r0, r3
 8006cdc:	e7a6      	b.n	8006c2c <_printf_i+0x160>
 8006cde:	2301      	movs	r3, #1
 8006ce0:	4632      	mov	r2, r6
 8006ce2:	4649      	mov	r1, r9
 8006ce4:	4640      	mov	r0, r8
 8006ce6:	47d0      	blx	sl
 8006ce8:	3001      	adds	r0, #1
 8006cea:	d09d      	beq.n	8006c28 <_printf_i+0x15c>
 8006cec:	3501      	adds	r5, #1
 8006cee:	68e3      	ldr	r3, [r4, #12]
 8006cf0:	9903      	ldr	r1, [sp, #12]
 8006cf2:	1a5b      	subs	r3, r3, r1
 8006cf4:	42ab      	cmp	r3, r5
 8006cf6:	dcf2      	bgt.n	8006cde <_printf_i+0x212>
 8006cf8:	e7eb      	b.n	8006cd2 <_printf_i+0x206>
 8006cfa:	2500      	movs	r5, #0
 8006cfc:	f104 0619 	add.w	r6, r4, #25
 8006d00:	e7f5      	b.n	8006cee <_printf_i+0x222>
 8006d02:	bf00      	nop
 8006d04:	0800a34a 	.word	0x0800a34a
 8006d08:	0800a35b 	.word	0x0800a35b

08006d0c <std>:
 8006d0c:	2300      	movs	r3, #0
 8006d0e:	b510      	push	{r4, lr}
 8006d10:	4604      	mov	r4, r0
 8006d12:	e9c0 3300 	strd	r3, r3, [r0]
 8006d16:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8006d1a:	6083      	str	r3, [r0, #8]
 8006d1c:	8181      	strh	r1, [r0, #12]
 8006d1e:	6643      	str	r3, [r0, #100]	@ 0x64
 8006d20:	81c2      	strh	r2, [r0, #14]
 8006d22:	6183      	str	r3, [r0, #24]
 8006d24:	4619      	mov	r1, r3
 8006d26:	2208      	movs	r2, #8
 8006d28:	305c      	adds	r0, #92	@ 0x5c
 8006d2a:	f000 f928 	bl	8006f7e <memset>
 8006d2e:	4b0d      	ldr	r3, [pc, #52]	@ (8006d64 <std+0x58>)
 8006d30:	6263      	str	r3, [r4, #36]	@ 0x24
 8006d32:	4b0d      	ldr	r3, [pc, #52]	@ (8006d68 <std+0x5c>)
 8006d34:	62a3      	str	r3, [r4, #40]	@ 0x28
 8006d36:	4b0d      	ldr	r3, [pc, #52]	@ (8006d6c <std+0x60>)
 8006d38:	62e3      	str	r3, [r4, #44]	@ 0x2c
 8006d3a:	4b0d      	ldr	r3, [pc, #52]	@ (8006d70 <std+0x64>)
 8006d3c:	6323      	str	r3, [r4, #48]	@ 0x30
 8006d3e:	4b0d      	ldr	r3, [pc, #52]	@ (8006d74 <std+0x68>)
 8006d40:	6224      	str	r4, [r4, #32]
 8006d42:	429c      	cmp	r4, r3
 8006d44:	d006      	beq.n	8006d54 <std+0x48>
 8006d46:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 8006d4a:	4294      	cmp	r4, r2
 8006d4c:	d002      	beq.n	8006d54 <std+0x48>
 8006d4e:	33d0      	adds	r3, #208	@ 0xd0
 8006d50:	429c      	cmp	r4, r3
 8006d52:	d105      	bne.n	8006d60 <std+0x54>
 8006d54:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 8006d58:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8006d5c:	f000 b99e 	b.w	800709c <__retarget_lock_init_recursive>
 8006d60:	bd10      	pop	{r4, pc}
 8006d62:	bf00      	nop
 8006d64:	08006ef9 	.word	0x08006ef9
 8006d68:	08006f1b 	.word	0x08006f1b
 8006d6c:	08006f53 	.word	0x08006f53
 8006d70:	08006f77 	.word	0x08006f77
 8006d74:	20000604 	.word	0x20000604

08006d78 <stdio_exit_handler>:
 8006d78:	4a02      	ldr	r2, [pc, #8]	@ (8006d84 <stdio_exit_handler+0xc>)
 8006d7a:	4903      	ldr	r1, [pc, #12]	@ (8006d88 <stdio_exit_handler+0x10>)
 8006d7c:	4803      	ldr	r0, [pc, #12]	@ (8006d8c <stdio_exit_handler+0x14>)
 8006d7e:	f000 b869 	b.w	8006e54 <_fwalk_sglue>
 8006d82:	bf00      	nop
 8006d84:	2000000c 	.word	0x2000000c
 8006d88:	080089fd 	.word	0x080089fd
 8006d8c:	2000001c 	.word	0x2000001c

08006d90 <cleanup_stdio>:
 8006d90:	6841      	ldr	r1, [r0, #4]
 8006d92:	4b0c      	ldr	r3, [pc, #48]	@ (8006dc4 <cleanup_stdio+0x34>)
 8006d94:	4299      	cmp	r1, r3
 8006d96:	b510      	push	{r4, lr}
 8006d98:	4604      	mov	r4, r0
 8006d9a:	d001      	beq.n	8006da0 <cleanup_stdio+0x10>
 8006d9c:	f001 fe2e 	bl	80089fc <_fflush_r>
 8006da0:	68a1      	ldr	r1, [r4, #8]
 8006da2:	4b09      	ldr	r3, [pc, #36]	@ (8006dc8 <cleanup_stdio+0x38>)
 8006da4:	4299      	cmp	r1, r3
 8006da6:	d002      	beq.n	8006dae <cleanup_stdio+0x1e>
 8006da8:	4620      	mov	r0, r4
 8006daa:	f001 fe27 	bl	80089fc <_fflush_r>
 8006dae:	68e1      	ldr	r1, [r4, #12]
 8006db0:	4b06      	ldr	r3, [pc, #24]	@ (8006dcc <cleanup_stdio+0x3c>)
 8006db2:	4299      	cmp	r1, r3
 8006db4:	d004      	beq.n	8006dc0 <cleanup_stdio+0x30>
 8006db6:	4620      	mov	r0, r4
 8006db8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8006dbc:	f001 be1e 	b.w	80089fc <_fflush_r>
 8006dc0:	bd10      	pop	{r4, pc}
 8006dc2:	bf00      	nop
 8006dc4:	20000604 	.word	0x20000604
 8006dc8:	2000066c 	.word	0x2000066c
 8006dcc:	200006d4 	.word	0x200006d4

08006dd0 <global_stdio_init.part.0>:
 8006dd0:	b510      	push	{r4, lr}
 8006dd2:	4b0b      	ldr	r3, [pc, #44]	@ (8006e00 <global_stdio_init.part.0+0x30>)
 8006dd4:	4c0b      	ldr	r4, [pc, #44]	@ (8006e04 <global_stdio_init.part.0+0x34>)
 8006dd6:	4a0c      	ldr	r2, [pc, #48]	@ (8006e08 <global_stdio_init.part.0+0x38>)
 8006dd8:	601a      	str	r2, [r3, #0]
 8006dda:	4620      	mov	r0, r4
 8006ddc:	2200      	movs	r2, #0
 8006dde:	2104      	movs	r1, #4
 8006de0:	f7ff ff94 	bl	8006d0c <std>
 8006de4:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 8006de8:	2201      	movs	r2, #1
 8006dea:	2109      	movs	r1, #9
 8006dec:	f7ff ff8e 	bl	8006d0c <std>
 8006df0:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 8006df4:	2202      	movs	r2, #2
 8006df6:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8006dfa:	2112      	movs	r1, #18
 8006dfc:	f7ff bf86 	b.w	8006d0c <std>
 8006e00:	2000073c 	.word	0x2000073c
 8006e04:	20000604 	.word	0x20000604
 8006e08:	08006d79 	.word	0x08006d79

08006e0c <__sfp_lock_acquire>:
 8006e0c:	4801      	ldr	r0, [pc, #4]	@ (8006e14 <__sfp_lock_acquire+0x8>)
 8006e0e:	f000 b946 	b.w	800709e <__retarget_lock_acquire_recursive>
 8006e12:	bf00      	nop
 8006e14:	20000745 	.word	0x20000745

08006e18 <__sfp_lock_release>:
 8006e18:	4801      	ldr	r0, [pc, #4]	@ (8006e20 <__sfp_lock_release+0x8>)
 8006e1a:	f000 b941 	b.w	80070a0 <__retarget_lock_release_recursive>
 8006e1e:	bf00      	nop
 8006e20:	20000745 	.word	0x20000745

08006e24 <__sinit>:
 8006e24:	b510      	push	{r4, lr}
 8006e26:	4604      	mov	r4, r0
 8006e28:	f7ff fff0 	bl	8006e0c <__sfp_lock_acquire>
 8006e2c:	6a23      	ldr	r3, [r4, #32]
 8006e2e:	b11b      	cbz	r3, 8006e38 <__sinit+0x14>
 8006e30:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8006e34:	f7ff bff0 	b.w	8006e18 <__sfp_lock_release>
 8006e38:	4b04      	ldr	r3, [pc, #16]	@ (8006e4c <__sinit+0x28>)
 8006e3a:	6223      	str	r3, [r4, #32]
 8006e3c:	4b04      	ldr	r3, [pc, #16]	@ (8006e50 <__sinit+0x2c>)
 8006e3e:	681b      	ldr	r3, [r3, #0]
 8006e40:	2b00      	cmp	r3, #0
 8006e42:	d1f5      	bne.n	8006e30 <__sinit+0xc>
 8006e44:	f7ff ffc4 	bl	8006dd0 <global_stdio_init.part.0>
 8006e48:	e7f2      	b.n	8006e30 <__sinit+0xc>
 8006e4a:	bf00      	nop
 8006e4c:	08006d91 	.word	0x08006d91
 8006e50:	2000073c 	.word	0x2000073c

08006e54 <_fwalk_sglue>:
 8006e54:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8006e58:	4607      	mov	r7, r0
 8006e5a:	4688      	mov	r8, r1
 8006e5c:	4614      	mov	r4, r2
 8006e5e:	2600      	movs	r6, #0
 8006e60:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8006e64:	f1b9 0901 	subs.w	r9, r9, #1
 8006e68:	d505      	bpl.n	8006e76 <_fwalk_sglue+0x22>
 8006e6a:	6824      	ldr	r4, [r4, #0]
 8006e6c:	2c00      	cmp	r4, #0
 8006e6e:	d1f7      	bne.n	8006e60 <_fwalk_sglue+0xc>
 8006e70:	4630      	mov	r0, r6
 8006e72:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8006e76:	89ab      	ldrh	r3, [r5, #12]
 8006e78:	2b01      	cmp	r3, #1
 8006e7a:	d907      	bls.n	8006e8c <_fwalk_sglue+0x38>
 8006e7c:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8006e80:	3301      	adds	r3, #1
 8006e82:	d003      	beq.n	8006e8c <_fwalk_sglue+0x38>
 8006e84:	4629      	mov	r1, r5
 8006e86:	4638      	mov	r0, r7
 8006e88:	47c0      	blx	r8
 8006e8a:	4306      	orrs	r6, r0
 8006e8c:	3568      	adds	r5, #104	@ 0x68
 8006e8e:	e7e9      	b.n	8006e64 <_fwalk_sglue+0x10>

08006e90 <sniprintf>:
 8006e90:	b40c      	push	{r2, r3}
 8006e92:	b530      	push	{r4, r5, lr}
 8006e94:	4b17      	ldr	r3, [pc, #92]	@ (8006ef4 <sniprintf+0x64>)
 8006e96:	1e0c      	subs	r4, r1, #0
 8006e98:	681d      	ldr	r5, [r3, #0]
 8006e9a:	b09d      	sub	sp, #116	@ 0x74
 8006e9c:	da08      	bge.n	8006eb0 <sniprintf+0x20>
 8006e9e:	238b      	movs	r3, #139	@ 0x8b
 8006ea0:	602b      	str	r3, [r5, #0]
 8006ea2:	f04f 30ff 	mov.w	r0, #4294967295
 8006ea6:	b01d      	add	sp, #116	@ 0x74
 8006ea8:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8006eac:	b002      	add	sp, #8
 8006eae:	4770      	bx	lr
 8006eb0:	f44f 7302 	mov.w	r3, #520	@ 0x208
 8006eb4:	f8ad 3014 	strh.w	r3, [sp, #20]
 8006eb8:	bf14      	ite	ne
 8006eba:	f104 33ff 	addne.w	r3, r4, #4294967295
 8006ebe:	4623      	moveq	r3, r4
 8006ec0:	9304      	str	r3, [sp, #16]
 8006ec2:	9307      	str	r3, [sp, #28]
 8006ec4:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8006ec8:	9002      	str	r0, [sp, #8]
 8006eca:	9006      	str	r0, [sp, #24]
 8006ecc:	f8ad 3016 	strh.w	r3, [sp, #22]
 8006ed0:	9a20      	ldr	r2, [sp, #128]	@ 0x80
 8006ed2:	ab21      	add	r3, sp, #132	@ 0x84
 8006ed4:	a902      	add	r1, sp, #8
 8006ed6:	4628      	mov	r0, r5
 8006ed8:	9301      	str	r3, [sp, #4]
 8006eda:	f001 fc0f 	bl	80086fc <_svfiprintf_r>
 8006ede:	1c43      	adds	r3, r0, #1
 8006ee0:	bfbc      	itt	lt
 8006ee2:	238b      	movlt	r3, #139	@ 0x8b
 8006ee4:	602b      	strlt	r3, [r5, #0]
 8006ee6:	2c00      	cmp	r4, #0
 8006ee8:	d0dd      	beq.n	8006ea6 <sniprintf+0x16>
 8006eea:	9b02      	ldr	r3, [sp, #8]
 8006eec:	2200      	movs	r2, #0
 8006eee:	701a      	strb	r2, [r3, #0]
 8006ef0:	e7d9      	b.n	8006ea6 <sniprintf+0x16>
 8006ef2:	bf00      	nop
 8006ef4:	20000018 	.word	0x20000018

08006ef8 <__sread>:
 8006ef8:	b510      	push	{r4, lr}
 8006efa:	460c      	mov	r4, r1
 8006efc:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8006f00:	f000 f87e 	bl	8007000 <_read_r>
 8006f04:	2800      	cmp	r0, #0
 8006f06:	bfab      	itete	ge
 8006f08:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 8006f0a:	89a3      	ldrhlt	r3, [r4, #12]
 8006f0c:	181b      	addge	r3, r3, r0
 8006f0e:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 8006f12:	bfac      	ite	ge
 8006f14:	6563      	strge	r3, [r4, #84]	@ 0x54
 8006f16:	81a3      	strhlt	r3, [r4, #12]
 8006f18:	bd10      	pop	{r4, pc}

08006f1a <__swrite>:
 8006f1a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8006f1e:	461f      	mov	r7, r3
 8006f20:	898b      	ldrh	r3, [r1, #12]
 8006f22:	05db      	lsls	r3, r3, #23
 8006f24:	4605      	mov	r5, r0
 8006f26:	460c      	mov	r4, r1
 8006f28:	4616      	mov	r6, r2
 8006f2a:	d505      	bpl.n	8006f38 <__swrite+0x1e>
 8006f2c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8006f30:	2302      	movs	r3, #2
 8006f32:	2200      	movs	r2, #0
 8006f34:	f000 f852 	bl	8006fdc <_lseek_r>
 8006f38:	89a3      	ldrh	r3, [r4, #12]
 8006f3a:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8006f3e:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8006f42:	81a3      	strh	r3, [r4, #12]
 8006f44:	4632      	mov	r2, r6
 8006f46:	463b      	mov	r3, r7
 8006f48:	4628      	mov	r0, r5
 8006f4a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8006f4e:	f000 b869 	b.w	8007024 <_write_r>

08006f52 <__sseek>:
 8006f52:	b510      	push	{r4, lr}
 8006f54:	460c      	mov	r4, r1
 8006f56:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8006f5a:	f000 f83f 	bl	8006fdc <_lseek_r>
 8006f5e:	1c43      	adds	r3, r0, #1
 8006f60:	89a3      	ldrh	r3, [r4, #12]
 8006f62:	bf15      	itete	ne
 8006f64:	6560      	strne	r0, [r4, #84]	@ 0x54
 8006f66:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 8006f6a:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 8006f6e:	81a3      	strheq	r3, [r4, #12]
 8006f70:	bf18      	it	ne
 8006f72:	81a3      	strhne	r3, [r4, #12]
 8006f74:	bd10      	pop	{r4, pc}

08006f76 <__sclose>:
 8006f76:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8006f7a:	f000 b81f 	b.w	8006fbc <_close_r>

08006f7e <memset>:
 8006f7e:	4402      	add	r2, r0
 8006f80:	4603      	mov	r3, r0
 8006f82:	4293      	cmp	r3, r2
 8006f84:	d100      	bne.n	8006f88 <memset+0xa>
 8006f86:	4770      	bx	lr
 8006f88:	f803 1b01 	strb.w	r1, [r3], #1
 8006f8c:	e7f9      	b.n	8006f82 <memset+0x4>

08006f8e <strncpy>:
 8006f8e:	b510      	push	{r4, lr}
 8006f90:	3901      	subs	r1, #1
 8006f92:	4603      	mov	r3, r0
 8006f94:	b132      	cbz	r2, 8006fa4 <strncpy+0x16>
 8006f96:	f811 4f01 	ldrb.w	r4, [r1, #1]!
 8006f9a:	f803 4b01 	strb.w	r4, [r3], #1
 8006f9e:	3a01      	subs	r2, #1
 8006fa0:	2c00      	cmp	r4, #0
 8006fa2:	d1f7      	bne.n	8006f94 <strncpy+0x6>
 8006fa4:	441a      	add	r2, r3
 8006fa6:	2100      	movs	r1, #0
 8006fa8:	4293      	cmp	r3, r2
 8006faa:	d100      	bne.n	8006fae <strncpy+0x20>
 8006fac:	bd10      	pop	{r4, pc}
 8006fae:	f803 1b01 	strb.w	r1, [r3], #1
 8006fb2:	e7f9      	b.n	8006fa8 <strncpy+0x1a>

08006fb4 <_localeconv_r>:
 8006fb4:	4800      	ldr	r0, [pc, #0]	@ (8006fb8 <_localeconv_r+0x4>)
 8006fb6:	4770      	bx	lr
 8006fb8:	20000158 	.word	0x20000158

08006fbc <_close_r>:
 8006fbc:	b538      	push	{r3, r4, r5, lr}
 8006fbe:	4d06      	ldr	r5, [pc, #24]	@ (8006fd8 <_close_r+0x1c>)
 8006fc0:	2300      	movs	r3, #0
 8006fc2:	4604      	mov	r4, r0
 8006fc4:	4608      	mov	r0, r1
 8006fc6:	602b      	str	r3, [r5, #0]
 8006fc8:	f7fa ffda 	bl	8001f80 <_close>
 8006fcc:	1c43      	adds	r3, r0, #1
 8006fce:	d102      	bne.n	8006fd6 <_close_r+0x1a>
 8006fd0:	682b      	ldr	r3, [r5, #0]
 8006fd2:	b103      	cbz	r3, 8006fd6 <_close_r+0x1a>
 8006fd4:	6023      	str	r3, [r4, #0]
 8006fd6:	bd38      	pop	{r3, r4, r5, pc}
 8006fd8:	20000740 	.word	0x20000740

08006fdc <_lseek_r>:
 8006fdc:	b538      	push	{r3, r4, r5, lr}
 8006fde:	4d07      	ldr	r5, [pc, #28]	@ (8006ffc <_lseek_r+0x20>)
 8006fe0:	4604      	mov	r4, r0
 8006fe2:	4608      	mov	r0, r1
 8006fe4:	4611      	mov	r1, r2
 8006fe6:	2200      	movs	r2, #0
 8006fe8:	602a      	str	r2, [r5, #0]
 8006fea:	461a      	mov	r2, r3
 8006fec:	f7fa ffef 	bl	8001fce <_lseek>
 8006ff0:	1c43      	adds	r3, r0, #1
 8006ff2:	d102      	bne.n	8006ffa <_lseek_r+0x1e>
 8006ff4:	682b      	ldr	r3, [r5, #0]
 8006ff6:	b103      	cbz	r3, 8006ffa <_lseek_r+0x1e>
 8006ff8:	6023      	str	r3, [r4, #0]
 8006ffa:	bd38      	pop	{r3, r4, r5, pc}
 8006ffc:	20000740 	.word	0x20000740

08007000 <_read_r>:
 8007000:	b538      	push	{r3, r4, r5, lr}
 8007002:	4d07      	ldr	r5, [pc, #28]	@ (8007020 <_read_r+0x20>)
 8007004:	4604      	mov	r4, r0
 8007006:	4608      	mov	r0, r1
 8007008:	4611      	mov	r1, r2
 800700a:	2200      	movs	r2, #0
 800700c:	602a      	str	r2, [r5, #0]
 800700e:	461a      	mov	r2, r3
 8007010:	f7fa ff7d 	bl	8001f0e <_read>
 8007014:	1c43      	adds	r3, r0, #1
 8007016:	d102      	bne.n	800701e <_read_r+0x1e>
 8007018:	682b      	ldr	r3, [r5, #0]
 800701a:	b103      	cbz	r3, 800701e <_read_r+0x1e>
 800701c:	6023      	str	r3, [r4, #0]
 800701e:	bd38      	pop	{r3, r4, r5, pc}
 8007020:	20000740 	.word	0x20000740

08007024 <_write_r>:
 8007024:	b538      	push	{r3, r4, r5, lr}
 8007026:	4d07      	ldr	r5, [pc, #28]	@ (8007044 <_write_r+0x20>)
 8007028:	4604      	mov	r4, r0
 800702a:	4608      	mov	r0, r1
 800702c:	4611      	mov	r1, r2
 800702e:	2200      	movs	r2, #0
 8007030:	602a      	str	r2, [r5, #0]
 8007032:	461a      	mov	r2, r3
 8007034:	f7fa ff88 	bl	8001f48 <_write>
 8007038:	1c43      	adds	r3, r0, #1
 800703a:	d102      	bne.n	8007042 <_write_r+0x1e>
 800703c:	682b      	ldr	r3, [r5, #0]
 800703e:	b103      	cbz	r3, 8007042 <_write_r+0x1e>
 8007040:	6023      	str	r3, [r4, #0]
 8007042:	bd38      	pop	{r3, r4, r5, pc}
 8007044:	20000740 	.word	0x20000740

08007048 <__errno>:
 8007048:	4b01      	ldr	r3, [pc, #4]	@ (8007050 <__errno+0x8>)
 800704a:	6818      	ldr	r0, [r3, #0]
 800704c:	4770      	bx	lr
 800704e:	bf00      	nop
 8007050:	20000018 	.word	0x20000018

08007054 <__libc_init_array>:
 8007054:	b570      	push	{r4, r5, r6, lr}
 8007056:	4d0d      	ldr	r5, [pc, #52]	@ (800708c <__libc_init_array+0x38>)
 8007058:	4c0d      	ldr	r4, [pc, #52]	@ (8007090 <__libc_init_array+0x3c>)
 800705a:	1b64      	subs	r4, r4, r5
 800705c:	10a4      	asrs	r4, r4, #2
 800705e:	2600      	movs	r6, #0
 8007060:	42a6      	cmp	r6, r4
 8007062:	d109      	bne.n	8007078 <__libc_init_array+0x24>
 8007064:	4d0b      	ldr	r5, [pc, #44]	@ (8007094 <__libc_init_array+0x40>)
 8007066:	4c0c      	ldr	r4, [pc, #48]	@ (8007098 <__libc_init_array+0x44>)
 8007068:	f003 f8ea 	bl	800a240 <_init>
 800706c:	1b64      	subs	r4, r4, r5
 800706e:	10a4      	asrs	r4, r4, #2
 8007070:	2600      	movs	r6, #0
 8007072:	42a6      	cmp	r6, r4
 8007074:	d105      	bne.n	8007082 <__libc_init_array+0x2e>
 8007076:	bd70      	pop	{r4, r5, r6, pc}
 8007078:	f855 3b04 	ldr.w	r3, [r5], #4
 800707c:	4798      	blx	r3
 800707e:	3601      	adds	r6, #1
 8007080:	e7ee      	b.n	8007060 <__libc_init_array+0xc>
 8007082:	f855 3b04 	ldr.w	r3, [r5], #4
 8007086:	4798      	blx	r3
 8007088:	3601      	adds	r6, #1
 800708a:	e7f2      	b.n	8007072 <__libc_init_array+0x1e>
 800708c:	0800a888 	.word	0x0800a888
 8007090:	0800a888 	.word	0x0800a888
 8007094:	0800a888 	.word	0x0800a888
 8007098:	0800a88c 	.word	0x0800a88c

0800709c <__retarget_lock_init_recursive>:
 800709c:	4770      	bx	lr

0800709e <__retarget_lock_acquire_recursive>:
 800709e:	4770      	bx	lr

080070a0 <__retarget_lock_release_recursive>:
 80070a0:	4770      	bx	lr

080070a2 <quorem>:
 80070a2:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80070a6:	6903      	ldr	r3, [r0, #16]
 80070a8:	690c      	ldr	r4, [r1, #16]
 80070aa:	42a3      	cmp	r3, r4
 80070ac:	4607      	mov	r7, r0
 80070ae:	db7e      	blt.n	80071ae <quorem+0x10c>
 80070b0:	3c01      	subs	r4, #1
 80070b2:	f101 0814 	add.w	r8, r1, #20
 80070b6:	00a3      	lsls	r3, r4, #2
 80070b8:	f100 0514 	add.w	r5, r0, #20
 80070bc:	9300      	str	r3, [sp, #0]
 80070be:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 80070c2:	9301      	str	r3, [sp, #4]
 80070c4:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 80070c8:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 80070cc:	3301      	adds	r3, #1
 80070ce:	429a      	cmp	r2, r3
 80070d0:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 80070d4:	fbb2 f6f3 	udiv	r6, r2, r3
 80070d8:	d32e      	bcc.n	8007138 <quorem+0x96>
 80070da:	f04f 0a00 	mov.w	sl, #0
 80070de:	46c4      	mov	ip, r8
 80070e0:	46ae      	mov	lr, r5
 80070e2:	46d3      	mov	fp, sl
 80070e4:	f85c 3b04 	ldr.w	r3, [ip], #4
 80070e8:	b298      	uxth	r0, r3
 80070ea:	fb06 a000 	mla	r0, r6, r0, sl
 80070ee:	0c02      	lsrs	r2, r0, #16
 80070f0:	0c1b      	lsrs	r3, r3, #16
 80070f2:	fb06 2303 	mla	r3, r6, r3, r2
 80070f6:	f8de 2000 	ldr.w	r2, [lr]
 80070fa:	b280      	uxth	r0, r0
 80070fc:	b292      	uxth	r2, r2
 80070fe:	1a12      	subs	r2, r2, r0
 8007100:	445a      	add	r2, fp
 8007102:	f8de 0000 	ldr.w	r0, [lr]
 8007106:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 800710a:	b29b      	uxth	r3, r3
 800710c:	ebc3 4322 	rsb	r3, r3, r2, asr #16
 8007110:	eb03 4310 	add.w	r3, r3, r0, lsr #16
 8007114:	b292      	uxth	r2, r2
 8007116:	ea42 4203 	orr.w	r2, r2, r3, lsl #16
 800711a:	45e1      	cmp	r9, ip
 800711c:	f84e 2b04 	str.w	r2, [lr], #4
 8007120:	ea4f 4b23 	mov.w	fp, r3, asr #16
 8007124:	d2de      	bcs.n	80070e4 <quorem+0x42>
 8007126:	9b00      	ldr	r3, [sp, #0]
 8007128:	58eb      	ldr	r3, [r5, r3]
 800712a:	b92b      	cbnz	r3, 8007138 <quorem+0x96>
 800712c:	9b01      	ldr	r3, [sp, #4]
 800712e:	3b04      	subs	r3, #4
 8007130:	429d      	cmp	r5, r3
 8007132:	461a      	mov	r2, r3
 8007134:	d32f      	bcc.n	8007196 <quorem+0xf4>
 8007136:	613c      	str	r4, [r7, #16]
 8007138:	4638      	mov	r0, r7
 800713a:	f001 f97b 	bl	8008434 <__mcmp>
 800713e:	2800      	cmp	r0, #0
 8007140:	db25      	blt.n	800718e <quorem+0xec>
 8007142:	4629      	mov	r1, r5
 8007144:	2000      	movs	r0, #0
 8007146:	f858 2b04 	ldr.w	r2, [r8], #4
 800714a:	f8d1 c000 	ldr.w	ip, [r1]
 800714e:	fa1f fe82 	uxth.w	lr, r2
 8007152:	fa1f f38c 	uxth.w	r3, ip
 8007156:	eba3 030e 	sub.w	r3, r3, lr
 800715a:	4403      	add	r3, r0
 800715c:	0c12      	lsrs	r2, r2, #16
 800715e:	ebc2 4223 	rsb	r2, r2, r3, asr #16
 8007162:	eb02 421c 	add.w	r2, r2, ip, lsr #16
 8007166:	b29b      	uxth	r3, r3
 8007168:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800716c:	45c1      	cmp	r9, r8
 800716e:	f841 3b04 	str.w	r3, [r1], #4
 8007172:	ea4f 4022 	mov.w	r0, r2, asr #16
 8007176:	d2e6      	bcs.n	8007146 <quorem+0xa4>
 8007178:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800717c:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8007180:	b922      	cbnz	r2, 800718c <quorem+0xea>
 8007182:	3b04      	subs	r3, #4
 8007184:	429d      	cmp	r5, r3
 8007186:	461a      	mov	r2, r3
 8007188:	d30b      	bcc.n	80071a2 <quorem+0x100>
 800718a:	613c      	str	r4, [r7, #16]
 800718c:	3601      	adds	r6, #1
 800718e:	4630      	mov	r0, r6
 8007190:	b003      	add	sp, #12
 8007192:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007196:	6812      	ldr	r2, [r2, #0]
 8007198:	3b04      	subs	r3, #4
 800719a:	2a00      	cmp	r2, #0
 800719c:	d1cb      	bne.n	8007136 <quorem+0x94>
 800719e:	3c01      	subs	r4, #1
 80071a0:	e7c6      	b.n	8007130 <quorem+0x8e>
 80071a2:	6812      	ldr	r2, [r2, #0]
 80071a4:	3b04      	subs	r3, #4
 80071a6:	2a00      	cmp	r2, #0
 80071a8:	d1ef      	bne.n	800718a <quorem+0xe8>
 80071aa:	3c01      	subs	r4, #1
 80071ac:	e7ea      	b.n	8007184 <quorem+0xe2>
 80071ae:	2000      	movs	r0, #0
 80071b0:	e7ee      	b.n	8007190 <quorem+0xee>
 80071b2:	0000      	movs	r0, r0
 80071b4:	0000      	movs	r0, r0
	...

080071b8 <_dtoa_r>:
 80071b8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80071bc:	69c7      	ldr	r7, [r0, #28]
 80071be:	b099      	sub	sp, #100	@ 0x64
 80071c0:	ed8d 0b02 	vstr	d0, [sp, #8]
 80071c4:	ec55 4b10 	vmov	r4, r5, d0
 80071c8:	9e22      	ldr	r6, [sp, #136]	@ 0x88
 80071ca:	9109      	str	r1, [sp, #36]	@ 0x24
 80071cc:	4683      	mov	fp, r0
 80071ce:	920e      	str	r2, [sp, #56]	@ 0x38
 80071d0:	9313      	str	r3, [sp, #76]	@ 0x4c
 80071d2:	b97f      	cbnz	r7, 80071f4 <_dtoa_r+0x3c>
 80071d4:	2010      	movs	r0, #16
 80071d6:	f000 fdfd 	bl	8007dd4 <malloc>
 80071da:	4602      	mov	r2, r0
 80071dc:	f8cb 001c 	str.w	r0, [fp, #28]
 80071e0:	b920      	cbnz	r0, 80071ec <_dtoa_r+0x34>
 80071e2:	4ba7      	ldr	r3, [pc, #668]	@ (8007480 <_dtoa_r+0x2c8>)
 80071e4:	21ef      	movs	r1, #239	@ 0xef
 80071e6:	48a7      	ldr	r0, [pc, #668]	@ (8007484 <_dtoa_r+0x2cc>)
 80071e8:	f001 fc68 	bl	8008abc <__assert_func>
 80071ec:	e9c0 7701 	strd	r7, r7, [r0, #4]
 80071f0:	6007      	str	r7, [r0, #0]
 80071f2:	60c7      	str	r7, [r0, #12]
 80071f4:	f8db 301c 	ldr.w	r3, [fp, #28]
 80071f8:	6819      	ldr	r1, [r3, #0]
 80071fa:	b159      	cbz	r1, 8007214 <_dtoa_r+0x5c>
 80071fc:	685a      	ldr	r2, [r3, #4]
 80071fe:	604a      	str	r2, [r1, #4]
 8007200:	2301      	movs	r3, #1
 8007202:	4093      	lsls	r3, r2
 8007204:	608b      	str	r3, [r1, #8]
 8007206:	4658      	mov	r0, fp
 8007208:	f000 feda 	bl	8007fc0 <_Bfree>
 800720c:	f8db 301c 	ldr.w	r3, [fp, #28]
 8007210:	2200      	movs	r2, #0
 8007212:	601a      	str	r2, [r3, #0]
 8007214:	1e2b      	subs	r3, r5, #0
 8007216:	bfb9      	ittee	lt
 8007218:	f023 4300 	biclt.w	r3, r3, #2147483648	@ 0x80000000
 800721c:	9303      	strlt	r3, [sp, #12]
 800721e:	2300      	movge	r3, #0
 8007220:	6033      	strge	r3, [r6, #0]
 8007222:	9f03      	ldr	r7, [sp, #12]
 8007224:	4b98      	ldr	r3, [pc, #608]	@ (8007488 <_dtoa_r+0x2d0>)
 8007226:	bfbc      	itt	lt
 8007228:	2201      	movlt	r2, #1
 800722a:	6032      	strlt	r2, [r6, #0]
 800722c:	43bb      	bics	r3, r7
 800722e:	d112      	bne.n	8007256 <_dtoa_r+0x9e>
 8007230:	9a13      	ldr	r2, [sp, #76]	@ 0x4c
 8007232:	f242 730f 	movw	r3, #9999	@ 0x270f
 8007236:	6013      	str	r3, [r2, #0]
 8007238:	f3c7 0313 	ubfx	r3, r7, #0, #20
 800723c:	4323      	orrs	r3, r4
 800723e:	f000 854d 	beq.w	8007cdc <_dtoa_r+0xb24>
 8007242:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 8007244:	f8df a254 	ldr.w	sl, [pc, #596]	@ 800749c <_dtoa_r+0x2e4>
 8007248:	2b00      	cmp	r3, #0
 800724a:	f000 854f 	beq.w	8007cec <_dtoa_r+0xb34>
 800724e:	f10a 0303 	add.w	r3, sl, #3
 8007252:	f000 bd49 	b.w	8007ce8 <_dtoa_r+0xb30>
 8007256:	ed9d 7b02 	vldr	d7, [sp, #8]
 800725a:	2200      	movs	r2, #0
 800725c:	ec51 0b17 	vmov	r0, r1, d7
 8007260:	2300      	movs	r3, #0
 8007262:	ed8d 7b0c 	vstr	d7, [sp, #48]	@ 0x30
 8007266:	f7f9 fc4f 	bl	8000b08 <__aeabi_dcmpeq>
 800726a:	4680      	mov	r8, r0
 800726c:	b158      	cbz	r0, 8007286 <_dtoa_r+0xce>
 800726e:	9a13      	ldr	r2, [sp, #76]	@ 0x4c
 8007270:	2301      	movs	r3, #1
 8007272:	6013      	str	r3, [r2, #0]
 8007274:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 8007276:	b113      	cbz	r3, 800727e <_dtoa_r+0xc6>
 8007278:	9a23      	ldr	r2, [sp, #140]	@ 0x8c
 800727a:	4b84      	ldr	r3, [pc, #528]	@ (800748c <_dtoa_r+0x2d4>)
 800727c:	6013      	str	r3, [r2, #0]
 800727e:	f8df a220 	ldr.w	sl, [pc, #544]	@ 80074a0 <_dtoa_r+0x2e8>
 8007282:	f000 bd33 	b.w	8007cec <_dtoa_r+0xb34>
 8007286:	ed9d 0b0c 	vldr	d0, [sp, #48]	@ 0x30
 800728a:	aa16      	add	r2, sp, #88	@ 0x58
 800728c:	a917      	add	r1, sp, #92	@ 0x5c
 800728e:	4658      	mov	r0, fp
 8007290:	f001 f980 	bl	8008594 <__d2b>
 8007294:	f3c7 560a 	ubfx	r6, r7, #20, #11
 8007298:	4681      	mov	r9, r0
 800729a:	2e00      	cmp	r6, #0
 800729c:	d077      	beq.n	800738e <_dtoa_r+0x1d6>
 800729e:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 80072a0:	f8cd 8050 	str.w	r8, [sp, #80]	@ 0x50
 80072a4:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80072a8:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 80072ac:	f043 537f 	orr.w	r3, r3, #1069547520	@ 0x3fc00000
 80072b0:	f443 1340 	orr.w	r3, r3, #3145728	@ 0x300000
 80072b4:	f2a6 36ff 	subw	r6, r6, #1023	@ 0x3ff
 80072b8:	4619      	mov	r1, r3
 80072ba:	2200      	movs	r2, #0
 80072bc:	4b74      	ldr	r3, [pc, #464]	@ (8007490 <_dtoa_r+0x2d8>)
 80072be:	f7f9 f803 	bl	80002c8 <__aeabi_dsub>
 80072c2:	a369      	add	r3, pc, #420	@ (adr r3, 8007468 <_dtoa_r+0x2b0>)
 80072c4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80072c8:	f7f9 f9b6 	bl	8000638 <__aeabi_dmul>
 80072cc:	a368      	add	r3, pc, #416	@ (adr r3, 8007470 <_dtoa_r+0x2b8>)
 80072ce:	e9d3 2300 	ldrd	r2, r3, [r3]
 80072d2:	f7f8 fffb 	bl	80002cc <__adddf3>
 80072d6:	4604      	mov	r4, r0
 80072d8:	4630      	mov	r0, r6
 80072da:	460d      	mov	r5, r1
 80072dc:	f7f9 f942 	bl	8000564 <__aeabi_i2d>
 80072e0:	a365      	add	r3, pc, #404	@ (adr r3, 8007478 <_dtoa_r+0x2c0>)
 80072e2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80072e6:	f7f9 f9a7 	bl	8000638 <__aeabi_dmul>
 80072ea:	4602      	mov	r2, r0
 80072ec:	460b      	mov	r3, r1
 80072ee:	4620      	mov	r0, r4
 80072f0:	4629      	mov	r1, r5
 80072f2:	f7f8 ffeb 	bl	80002cc <__adddf3>
 80072f6:	4604      	mov	r4, r0
 80072f8:	460d      	mov	r5, r1
 80072fa:	f7f9 fc4d 	bl	8000b98 <__aeabi_d2iz>
 80072fe:	2200      	movs	r2, #0
 8007300:	4607      	mov	r7, r0
 8007302:	2300      	movs	r3, #0
 8007304:	4620      	mov	r0, r4
 8007306:	4629      	mov	r1, r5
 8007308:	f7f9 fc08 	bl	8000b1c <__aeabi_dcmplt>
 800730c:	b140      	cbz	r0, 8007320 <_dtoa_r+0x168>
 800730e:	4638      	mov	r0, r7
 8007310:	f7f9 f928 	bl	8000564 <__aeabi_i2d>
 8007314:	4622      	mov	r2, r4
 8007316:	462b      	mov	r3, r5
 8007318:	f7f9 fbf6 	bl	8000b08 <__aeabi_dcmpeq>
 800731c:	b900      	cbnz	r0, 8007320 <_dtoa_r+0x168>
 800731e:	3f01      	subs	r7, #1
 8007320:	2f16      	cmp	r7, #22
 8007322:	d851      	bhi.n	80073c8 <_dtoa_r+0x210>
 8007324:	4b5b      	ldr	r3, [pc, #364]	@ (8007494 <_dtoa_r+0x2dc>)
 8007326:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 800732a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800732e:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8007332:	f7f9 fbf3 	bl	8000b1c <__aeabi_dcmplt>
 8007336:	2800      	cmp	r0, #0
 8007338:	d048      	beq.n	80073cc <_dtoa_r+0x214>
 800733a:	3f01      	subs	r7, #1
 800733c:	2300      	movs	r3, #0
 800733e:	9312      	str	r3, [sp, #72]	@ 0x48
 8007340:	9b16      	ldr	r3, [sp, #88]	@ 0x58
 8007342:	1b9b      	subs	r3, r3, r6
 8007344:	1e5a      	subs	r2, r3, #1
 8007346:	bf44      	itt	mi
 8007348:	f1c3 0801 	rsbmi	r8, r3, #1
 800734c:	2300      	movmi	r3, #0
 800734e:	9208      	str	r2, [sp, #32]
 8007350:	bf54      	ite	pl
 8007352:	f04f 0800 	movpl.w	r8, #0
 8007356:	9308      	strmi	r3, [sp, #32]
 8007358:	2f00      	cmp	r7, #0
 800735a:	db39      	blt.n	80073d0 <_dtoa_r+0x218>
 800735c:	9b08      	ldr	r3, [sp, #32]
 800735e:	970f      	str	r7, [sp, #60]	@ 0x3c
 8007360:	443b      	add	r3, r7
 8007362:	9308      	str	r3, [sp, #32]
 8007364:	2300      	movs	r3, #0
 8007366:	930a      	str	r3, [sp, #40]	@ 0x28
 8007368:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800736a:	2b09      	cmp	r3, #9
 800736c:	d864      	bhi.n	8007438 <_dtoa_r+0x280>
 800736e:	2b05      	cmp	r3, #5
 8007370:	bfc4      	itt	gt
 8007372:	3b04      	subgt	r3, #4
 8007374:	9309      	strgt	r3, [sp, #36]	@ 0x24
 8007376:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8007378:	f1a3 0302 	sub.w	r3, r3, #2
 800737c:	bfcc      	ite	gt
 800737e:	2400      	movgt	r4, #0
 8007380:	2401      	movle	r4, #1
 8007382:	2b03      	cmp	r3, #3
 8007384:	d863      	bhi.n	800744e <_dtoa_r+0x296>
 8007386:	e8df f003 	tbb	[pc, r3]
 800738a:	372a      	.short	0x372a
 800738c:	5535      	.short	0x5535
 800738e:	e9dd 6316 	ldrd	r6, r3, [sp, #88]	@ 0x58
 8007392:	441e      	add	r6, r3
 8007394:	f206 4332 	addw	r3, r6, #1074	@ 0x432
 8007398:	2b20      	cmp	r3, #32
 800739a:	bfc1      	itttt	gt
 800739c:	f1c3 0340 	rsbgt	r3, r3, #64	@ 0x40
 80073a0:	409f      	lslgt	r7, r3
 80073a2:	f206 4312 	addwgt	r3, r6, #1042	@ 0x412
 80073a6:	fa24 f303 	lsrgt.w	r3, r4, r3
 80073aa:	bfd6      	itet	le
 80073ac:	f1c3 0320 	rsble	r3, r3, #32
 80073b0:	ea47 0003 	orrgt.w	r0, r7, r3
 80073b4:	fa04 f003 	lslle.w	r0, r4, r3
 80073b8:	f7f9 f8c4 	bl	8000544 <__aeabi_ui2d>
 80073bc:	2201      	movs	r2, #1
 80073be:	f1a1 73f8 	sub.w	r3, r1, #32505856	@ 0x1f00000
 80073c2:	3e01      	subs	r6, #1
 80073c4:	9214      	str	r2, [sp, #80]	@ 0x50
 80073c6:	e777      	b.n	80072b8 <_dtoa_r+0x100>
 80073c8:	2301      	movs	r3, #1
 80073ca:	e7b8      	b.n	800733e <_dtoa_r+0x186>
 80073cc:	9012      	str	r0, [sp, #72]	@ 0x48
 80073ce:	e7b7      	b.n	8007340 <_dtoa_r+0x188>
 80073d0:	427b      	negs	r3, r7
 80073d2:	930a      	str	r3, [sp, #40]	@ 0x28
 80073d4:	2300      	movs	r3, #0
 80073d6:	eba8 0807 	sub.w	r8, r8, r7
 80073da:	930f      	str	r3, [sp, #60]	@ 0x3c
 80073dc:	e7c4      	b.n	8007368 <_dtoa_r+0x1b0>
 80073de:	2300      	movs	r3, #0
 80073e0:	930b      	str	r3, [sp, #44]	@ 0x2c
 80073e2:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 80073e4:	2b00      	cmp	r3, #0
 80073e6:	dc35      	bgt.n	8007454 <_dtoa_r+0x29c>
 80073e8:	2301      	movs	r3, #1
 80073ea:	9300      	str	r3, [sp, #0]
 80073ec:	9307      	str	r3, [sp, #28]
 80073ee:	461a      	mov	r2, r3
 80073f0:	920e      	str	r2, [sp, #56]	@ 0x38
 80073f2:	e00b      	b.n	800740c <_dtoa_r+0x254>
 80073f4:	2301      	movs	r3, #1
 80073f6:	e7f3      	b.n	80073e0 <_dtoa_r+0x228>
 80073f8:	2300      	movs	r3, #0
 80073fa:	930b      	str	r3, [sp, #44]	@ 0x2c
 80073fc:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 80073fe:	18fb      	adds	r3, r7, r3
 8007400:	9300      	str	r3, [sp, #0]
 8007402:	3301      	adds	r3, #1
 8007404:	2b01      	cmp	r3, #1
 8007406:	9307      	str	r3, [sp, #28]
 8007408:	bfb8      	it	lt
 800740a:	2301      	movlt	r3, #1
 800740c:	f8db 001c 	ldr.w	r0, [fp, #28]
 8007410:	2100      	movs	r1, #0
 8007412:	2204      	movs	r2, #4
 8007414:	f102 0514 	add.w	r5, r2, #20
 8007418:	429d      	cmp	r5, r3
 800741a:	d91f      	bls.n	800745c <_dtoa_r+0x2a4>
 800741c:	6041      	str	r1, [r0, #4]
 800741e:	4658      	mov	r0, fp
 8007420:	f000 fd8e 	bl	8007f40 <_Balloc>
 8007424:	4682      	mov	sl, r0
 8007426:	2800      	cmp	r0, #0
 8007428:	d13c      	bne.n	80074a4 <_dtoa_r+0x2ec>
 800742a:	4b1b      	ldr	r3, [pc, #108]	@ (8007498 <_dtoa_r+0x2e0>)
 800742c:	4602      	mov	r2, r0
 800742e:	f240 11af 	movw	r1, #431	@ 0x1af
 8007432:	e6d8      	b.n	80071e6 <_dtoa_r+0x2e>
 8007434:	2301      	movs	r3, #1
 8007436:	e7e0      	b.n	80073fa <_dtoa_r+0x242>
 8007438:	2401      	movs	r4, #1
 800743a:	2300      	movs	r3, #0
 800743c:	9309      	str	r3, [sp, #36]	@ 0x24
 800743e:	940b      	str	r4, [sp, #44]	@ 0x2c
 8007440:	f04f 33ff 	mov.w	r3, #4294967295
 8007444:	9300      	str	r3, [sp, #0]
 8007446:	9307      	str	r3, [sp, #28]
 8007448:	2200      	movs	r2, #0
 800744a:	2312      	movs	r3, #18
 800744c:	e7d0      	b.n	80073f0 <_dtoa_r+0x238>
 800744e:	2301      	movs	r3, #1
 8007450:	930b      	str	r3, [sp, #44]	@ 0x2c
 8007452:	e7f5      	b.n	8007440 <_dtoa_r+0x288>
 8007454:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8007456:	9300      	str	r3, [sp, #0]
 8007458:	9307      	str	r3, [sp, #28]
 800745a:	e7d7      	b.n	800740c <_dtoa_r+0x254>
 800745c:	3101      	adds	r1, #1
 800745e:	0052      	lsls	r2, r2, #1
 8007460:	e7d8      	b.n	8007414 <_dtoa_r+0x25c>
 8007462:	bf00      	nop
 8007464:	f3af 8000 	nop.w
 8007468:	636f4361 	.word	0x636f4361
 800746c:	3fd287a7 	.word	0x3fd287a7
 8007470:	8b60c8b3 	.word	0x8b60c8b3
 8007474:	3fc68a28 	.word	0x3fc68a28
 8007478:	509f79fb 	.word	0x509f79fb
 800747c:	3fd34413 	.word	0x3fd34413
 8007480:	0800a379 	.word	0x0800a379
 8007484:	0800a390 	.word	0x0800a390
 8007488:	7ff00000 	.word	0x7ff00000
 800748c:	0800a349 	.word	0x0800a349
 8007490:	3ff80000 	.word	0x3ff80000
 8007494:	0800a488 	.word	0x0800a488
 8007498:	0800a3e8 	.word	0x0800a3e8
 800749c:	0800a375 	.word	0x0800a375
 80074a0:	0800a348 	.word	0x0800a348
 80074a4:	f8db 301c 	ldr.w	r3, [fp, #28]
 80074a8:	6018      	str	r0, [r3, #0]
 80074aa:	9b07      	ldr	r3, [sp, #28]
 80074ac:	2b0e      	cmp	r3, #14
 80074ae:	f200 80a4 	bhi.w	80075fa <_dtoa_r+0x442>
 80074b2:	2c00      	cmp	r4, #0
 80074b4:	f000 80a1 	beq.w	80075fa <_dtoa_r+0x442>
 80074b8:	2f00      	cmp	r7, #0
 80074ba:	dd33      	ble.n	8007524 <_dtoa_r+0x36c>
 80074bc:	4bad      	ldr	r3, [pc, #692]	@ (8007774 <_dtoa_r+0x5bc>)
 80074be:	f007 020f 	and.w	r2, r7, #15
 80074c2:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 80074c6:	ed93 7b00 	vldr	d7, [r3]
 80074ca:	05f8      	lsls	r0, r7, #23
 80074cc:	ed8d 7b04 	vstr	d7, [sp, #16]
 80074d0:	ea4f 1427 	mov.w	r4, r7, asr #4
 80074d4:	d516      	bpl.n	8007504 <_dtoa_r+0x34c>
 80074d6:	4ba8      	ldr	r3, [pc, #672]	@ (8007778 <_dtoa_r+0x5c0>)
 80074d8:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 80074dc:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 80074e0:	f7f9 f9d4 	bl	800088c <__aeabi_ddiv>
 80074e4:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80074e8:	f004 040f 	and.w	r4, r4, #15
 80074ec:	2603      	movs	r6, #3
 80074ee:	4da2      	ldr	r5, [pc, #648]	@ (8007778 <_dtoa_r+0x5c0>)
 80074f0:	b954      	cbnz	r4, 8007508 <_dtoa_r+0x350>
 80074f2:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 80074f6:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80074fa:	f7f9 f9c7 	bl	800088c <__aeabi_ddiv>
 80074fe:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8007502:	e028      	b.n	8007556 <_dtoa_r+0x39e>
 8007504:	2602      	movs	r6, #2
 8007506:	e7f2      	b.n	80074ee <_dtoa_r+0x336>
 8007508:	07e1      	lsls	r1, r4, #31
 800750a:	d508      	bpl.n	800751e <_dtoa_r+0x366>
 800750c:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8007510:	e9d5 2300 	ldrd	r2, r3, [r5]
 8007514:	f7f9 f890 	bl	8000638 <__aeabi_dmul>
 8007518:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800751c:	3601      	adds	r6, #1
 800751e:	1064      	asrs	r4, r4, #1
 8007520:	3508      	adds	r5, #8
 8007522:	e7e5      	b.n	80074f0 <_dtoa_r+0x338>
 8007524:	f000 80d2 	beq.w	80076cc <_dtoa_r+0x514>
 8007528:	427c      	negs	r4, r7
 800752a:	4b92      	ldr	r3, [pc, #584]	@ (8007774 <_dtoa_r+0x5bc>)
 800752c:	4d92      	ldr	r5, [pc, #584]	@ (8007778 <_dtoa_r+0x5c0>)
 800752e:	f004 020f 	and.w	r2, r4, #15
 8007532:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8007536:	e9d3 2300 	ldrd	r2, r3, [r3]
 800753a:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800753e:	f7f9 f87b 	bl	8000638 <__aeabi_dmul>
 8007542:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8007546:	1124      	asrs	r4, r4, #4
 8007548:	2300      	movs	r3, #0
 800754a:	2602      	movs	r6, #2
 800754c:	2c00      	cmp	r4, #0
 800754e:	f040 80b2 	bne.w	80076b6 <_dtoa_r+0x4fe>
 8007552:	2b00      	cmp	r3, #0
 8007554:	d1d3      	bne.n	80074fe <_dtoa_r+0x346>
 8007556:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 8007558:	e9dd 4502 	ldrd	r4, r5, [sp, #8]
 800755c:	2b00      	cmp	r3, #0
 800755e:	f000 80b7 	beq.w	80076d0 <_dtoa_r+0x518>
 8007562:	4b86      	ldr	r3, [pc, #536]	@ (800777c <_dtoa_r+0x5c4>)
 8007564:	2200      	movs	r2, #0
 8007566:	4620      	mov	r0, r4
 8007568:	4629      	mov	r1, r5
 800756a:	f7f9 fad7 	bl	8000b1c <__aeabi_dcmplt>
 800756e:	2800      	cmp	r0, #0
 8007570:	f000 80ae 	beq.w	80076d0 <_dtoa_r+0x518>
 8007574:	9b07      	ldr	r3, [sp, #28]
 8007576:	2b00      	cmp	r3, #0
 8007578:	f000 80aa 	beq.w	80076d0 <_dtoa_r+0x518>
 800757c:	9b00      	ldr	r3, [sp, #0]
 800757e:	2b00      	cmp	r3, #0
 8007580:	dd37      	ble.n	80075f2 <_dtoa_r+0x43a>
 8007582:	1e7b      	subs	r3, r7, #1
 8007584:	9304      	str	r3, [sp, #16]
 8007586:	4620      	mov	r0, r4
 8007588:	4b7d      	ldr	r3, [pc, #500]	@ (8007780 <_dtoa_r+0x5c8>)
 800758a:	2200      	movs	r2, #0
 800758c:	4629      	mov	r1, r5
 800758e:	f7f9 f853 	bl	8000638 <__aeabi_dmul>
 8007592:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8007596:	9c00      	ldr	r4, [sp, #0]
 8007598:	3601      	adds	r6, #1
 800759a:	4630      	mov	r0, r6
 800759c:	f7f8 ffe2 	bl	8000564 <__aeabi_i2d>
 80075a0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80075a4:	f7f9 f848 	bl	8000638 <__aeabi_dmul>
 80075a8:	4b76      	ldr	r3, [pc, #472]	@ (8007784 <_dtoa_r+0x5cc>)
 80075aa:	2200      	movs	r2, #0
 80075ac:	f7f8 fe8e 	bl	80002cc <__adddf3>
 80075b0:	4605      	mov	r5, r0
 80075b2:	f1a1 7650 	sub.w	r6, r1, #54525952	@ 0x3400000
 80075b6:	2c00      	cmp	r4, #0
 80075b8:	f040 808d 	bne.w	80076d6 <_dtoa_r+0x51e>
 80075bc:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80075c0:	4b71      	ldr	r3, [pc, #452]	@ (8007788 <_dtoa_r+0x5d0>)
 80075c2:	2200      	movs	r2, #0
 80075c4:	f7f8 fe80 	bl	80002c8 <__aeabi_dsub>
 80075c8:	4602      	mov	r2, r0
 80075ca:	460b      	mov	r3, r1
 80075cc:	e9cd 2302 	strd	r2, r3, [sp, #8]
 80075d0:	462a      	mov	r2, r5
 80075d2:	4633      	mov	r3, r6
 80075d4:	f7f9 fac0 	bl	8000b58 <__aeabi_dcmpgt>
 80075d8:	2800      	cmp	r0, #0
 80075da:	f040 828b 	bne.w	8007af4 <_dtoa_r+0x93c>
 80075de:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80075e2:	462a      	mov	r2, r5
 80075e4:	f106 4300 	add.w	r3, r6, #2147483648	@ 0x80000000
 80075e8:	f7f9 fa98 	bl	8000b1c <__aeabi_dcmplt>
 80075ec:	2800      	cmp	r0, #0
 80075ee:	f040 8128 	bne.w	8007842 <_dtoa_r+0x68a>
 80075f2:	e9dd 340c 	ldrd	r3, r4, [sp, #48]	@ 0x30
 80075f6:	e9cd 3402 	strd	r3, r4, [sp, #8]
 80075fa:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 80075fc:	2b00      	cmp	r3, #0
 80075fe:	f2c0 815a 	blt.w	80078b6 <_dtoa_r+0x6fe>
 8007602:	2f0e      	cmp	r7, #14
 8007604:	f300 8157 	bgt.w	80078b6 <_dtoa_r+0x6fe>
 8007608:	4b5a      	ldr	r3, [pc, #360]	@ (8007774 <_dtoa_r+0x5bc>)
 800760a:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 800760e:	ed93 7b00 	vldr	d7, [r3]
 8007612:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8007614:	2b00      	cmp	r3, #0
 8007616:	ed8d 7b00 	vstr	d7, [sp]
 800761a:	da03      	bge.n	8007624 <_dtoa_r+0x46c>
 800761c:	9b07      	ldr	r3, [sp, #28]
 800761e:	2b00      	cmp	r3, #0
 8007620:	f340 8101 	ble.w	8007826 <_dtoa_r+0x66e>
 8007624:	e9dd 4502 	ldrd	r4, r5, [sp, #8]
 8007628:	4656      	mov	r6, sl
 800762a:	e9dd 2300 	ldrd	r2, r3, [sp]
 800762e:	4620      	mov	r0, r4
 8007630:	4629      	mov	r1, r5
 8007632:	f7f9 f92b 	bl	800088c <__aeabi_ddiv>
 8007636:	f7f9 faaf 	bl	8000b98 <__aeabi_d2iz>
 800763a:	4680      	mov	r8, r0
 800763c:	f7f8 ff92 	bl	8000564 <__aeabi_i2d>
 8007640:	e9dd 2300 	ldrd	r2, r3, [sp]
 8007644:	f7f8 fff8 	bl	8000638 <__aeabi_dmul>
 8007648:	4602      	mov	r2, r0
 800764a:	460b      	mov	r3, r1
 800764c:	4620      	mov	r0, r4
 800764e:	4629      	mov	r1, r5
 8007650:	f108 0430 	add.w	r4, r8, #48	@ 0x30
 8007654:	f7f8 fe38 	bl	80002c8 <__aeabi_dsub>
 8007658:	f806 4b01 	strb.w	r4, [r6], #1
 800765c:	9d07      	ldr	r5, [sp, #28]
 800765e:	eba6 040a 	sub.w	r4, r6, sl
 8007662:	42a5      	cmp	r5, r4
 8007664:	4602      	mov	r2, r0
 8007666:	460b      	mov	r3, r1
 8007668:	f040 8117 	bne.w	800789a <_dtoa_r+0x6e2>
 800766c:	f7f8 fe2e 	bl	80002cc <__adddf3>
 8007670:	e9dd 2300 	ldrd	r2, r3, [sp]
 8007674:	4604      	mov	r4, r0
 8007676:	460d      	mov	r5, r1
 8007678:	f7f9 fa6e 	bl	8000b58 <__aeabi_dcmpgt>
 800767c:	2800      	cmp	r0, #0
 800767e:	f040 80f9 	bne.w	8007874 <_dtoa_r+0x6bc>
 8007682:	e9dd 2300 	ldrd	r2, r3, [sp]
 8007686:	4620      	mov	r0, r4
 8007688:	4629      	mov	r1, r5
 800768a:	f7f9 fa3d 	bl	8000b08 <__aeabi_dcmpeq>
 800768e:	b118      	cbz	r0, 8007698 <_dtoa_r+0x4e0>
 8007690:	f018 0f01 	tst.w	r8, #1
 8007694:	f040 80ee 	bne.w	8007874 <_dtoa_r+0x6bc>
 8007698:	4649      	mov	r1, r9
 800769a:	4658      	mov	r0, fp
 800769c:	f000 fc90 	bl	8007fc0 <_Bfree>
 80076a0:	2300      	movs	r3, #0
 80076a2:	7033      	strb	r3, [r6, #0]
 80076a4:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 80076a6:	3701      	adds	r7, #1
 80076a8:	601f      	str	r7, [r3, #0]
 80076aa:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 80076ac:	2b00      	cmp	r3, #0
 80076ae:	f000 831d 	beq.w	8007cec <_dtoa_r+0xb34>
 80076b2:	601e      	str	r6, [r3, #0]
 80076b4:	e31a      	b.n	8007cec <_dtoa_r+0xb34>
 80076b6:	07e2      	lsls	r2, r4, #31
 80076b8:	d505      	bpl.n	80076c6 <_dtoa_r+0x50e>
 80076ba:	e9d5 2300 	ldrd	r2, r3, [r5]
 80076be:	f7f8 ffbb 	bl	8000638 <__aeabi_dmul>
 80076c2:	3601      	adds	r6, #1
 80076c4:	2301      	movs	r3, #1
 80076c6:	1064      	asrs	r4, r4, #1
 80076c8:	3508      	adds	r5, #8
 80076ca:	e73f      	b.n	800754c <_dtoa_r+0x394>
 80076cc:	2602      	movs	r6, #2
 80076ce:	e742      	b.n	8007556 <_dtoa_r+0x39e>
 80076d0:	9c07      	ldr	r4, [sp, #28]
 80076d2:	9704      	str	r7, [sp, #16]
 80076d4:	e761      	b.n	800759a <_dtoa_r+0x3e2>
 80076d6:	4b27      	ldr	r3, [pc, #156]	@ (8007774 <_dtoa_r+0x5bc>)
 80076d8:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 80076da:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 80076de:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 80076e2:	4454      	add	r4, sl
 80076e4:	2900      	cmp	r1, #0
 80076e6:	d053      	beq.n	8007790 <_dtoa_r+0x5d8>
 80076e8:	4928      	ldr	r1, [pc, #160]	@ (800778c <_dtoa_r+0x5d4>)
 80076ea:	2000      	movs	r0, #0
 80076ec:	f7f9 f8ce 	bl	800088c <__aeabi_ddiv>
 80076f0:	4633      	mov	r3, r6
 80076f2:	462a      	mov	r2, r5
 80076f4:	f7f8 fde8 	bl	80002c8 <__aeabi_dsub>
 80076f8:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 80076fc:	4656      	mov	r6, sl
 80076fe:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8007702:	f7f9 fa49 	bl	8000b98 <__aeabi_d2iz>
 8007706:	4605      	mov	r5, r0
 8007708:	f7f8 ff2c 	bl	8000564 <__aeabi_i2d>
 800770c:	4602      	mov	r2, r0
 800770e:	460b      	mov	r3, r1
 8007710:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8007714:	f7f8 fdd8 	bl	80002c8 <__aeabi_dsub>
 8007718:	3530      	adds	r5, #48	@ 0x30
 800771a:	4602      	mov	r2, r0
 800771c:	460b      	mov	r3, r1
 800771e:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8007722:	f806 5b01 	strb.w	r5, [r6], #1
 8007726:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 800772a:	f7f9 f9f7 	bl	8000b1c <__aeabi_dcmplt>
 800772e:	2800      	cmp	r0, #0
 8007730:	d171      	bne.n	8007816 <_dtoa_r+0x65e>
 8007732:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8007736:	4911      	ldr	r1, [pc, #68]	@ (800777c <_dtoa_r+0x5c4>)
 8007738:	2000      	movs	r0, #0
 800773a:	f7f8 fdc5 	bl	80002c8 <__aeabi_dsub>
 800773e:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 8007742:	f7f9 f9eb 	bl	8000b1c <__aeabi_dcmplt>
 8007746:	2800      	cmp	r0, #0
 8007748:	f040 8095 	bne.w	8007876 <_dtoa_r+0x6be>
 800774c:	42a6      	cmp	r6, r4
 800774e:	f43f af50 	beq.w	80075f2 <_dtoa_r+0x43a>
 8007752:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	@ 0x40
 8007756:	4b0a      	ldr	r3, [pc, #40]	@ (8007780 <_dtoa_r+0x5c8>)
 8007758:	2200      	movs	r2, #0
 800775a:	f7f8 ff6d 	bl	8000638 <__aeabi_dmul>
 800775e:	4b08      	ldr	r3, [pc, #32]	@ (8007780 <_dtoa_r+0x5c8>)
 8007760:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 8007764:	2200      	movs	r2, #0
 8007766:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800776a:	f7f8 ff65 	bl	8000638 <__aeabi_dmul>
 800776e:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8007772:	e7c4      	b.n	80076fe <_dtoa_r+0x546>
 8007774:	0800a488 	.word	0x0800a488
 8007778:	0800a460 	.word	0x0800a460
 800777c:	3ff00000 	.word	0x3ff00000
 8007780:	40240000 	.word	0x40240000
 8007784:	401c0000 	.word	0x401c0000
 8007788:	40140000 	.word	0x40140000
 800778c:	3fe00000 	.word	0x3fe00000
 8007790:	4631      	mov	r1, r6
 8007792:	4628      	mov	r0, r5
 8007794:	f7f8 ff50 	bl	8000638 <__aeabi_dmul>
 8007798:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 800779c:	9415      	str	r4, [sp, #84]	@ 0x54
 800779e:	4656      	mov	r6, sl
 80077a0:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80077a4:	f7f9 f9f8 	bl	8000b98 <__aeabi_d2iz>
 80077a8:	4605      	mov	r5, r0
 80077aa:	f7f8 fedb 	bl	8000564 <__aeabi_i2d>
 80077ae:	4602      	mov	r2, r0
 80077b0:	460b      	mov	r3, r1
 80077b2:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80077b6:	f7f8 fd87 	bl	80002c8 <__aeabi_dsub>
 80077ba:	3530      	adds	r5, #48	@ 0x30
 80077bc:	f806 5b01 	strb.w	r5, [r6], #1
 80077c0:	4602      	mov	r2, r0
 80077c2:	460b      	mov	r3, r1
 80077c4:	42a6      	cmp	r6, r4
 80077c6:	e9cd 2302 	strd	r2, r3, [sp, #8]
 80077ca:	f04f 0200 	mov.w	r2, #0
 80077ce:	d124      	bne.n	800781a <_dtoa_r+0x662>
 80077d0:	4bac      	ldr	r3, [pc, #688]	@ (8007a84 <_dtoa_r+0x8cc>)
 80077d2:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	@ 0x40
 80077d6:	f7f8 fd79 	bl	80002cc <__adddf3>
 80077da:	4602      	mov	r2, r0
 80077dc:	460b      	mov	r3, r1
 80077de:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80077e2:	f7f9 f9b9 	bl	8000b58 <__aeabi_dcmpgt>
 80077e6:	2800      	cmp	r0, #0
 80077e8:	d145      	bne.n	8007876 <_dtoa_r+0x6be>
 80077ea:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 80077ee:	49a5      	ldr	r1, [pc, #660]	@ (8007a84 <_dtoa_r+0x8cc>)
 80077f0:	2000      	movs	r0, #0
 80077f2:	f7f8 fd69 	bl	80002c8 <__aeabi_dsub>
 80077f6:	4602      	mov	r2, r0
 80077f8:	460b      	mov	r3, r1
 80077fa:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80077fe:	f7f9 f98d 	bl	8000b1c <__aeabi_dcmplt>
 8007802:	2800      	cmp	r0, #0
 8007804:	f43f aef5 	beq.w	80075f2 <_dtoa_r+0x43a>
 8007808:	9e15      	ldr	r6, [sp, #84]	@ 0x54
 800780a:	1e73      	subs	r3, r6, #1
 800780c:	9315      	str	r3, [sp, #84]	@ 0x54
 800780e:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 8007812:	2b30      	cmp	r3, #48	@ 0x30
 8007814:	d0f8      	beq.n	8007808 <_dtoa_r+0x650>
 8007816:	9f04      	ldr	r7, [sp, #16]
 8007818:	e73e      	b.n	8007698 <_dtoa_r+0x4e0>
 800781a:	4b9b      	ldr	r3, [pc, #620]	@ (8007a88 <_dtoa_r+0x8d0>)
 800781c:	f7f8 ff0c 	bl	8000638 <__aeabi_dmul>
 8007820:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8007824:	e7bc      	b.n	80077a0 <_dtoa_r+0x5e8>
 8007826:	d10c      	bne.n	8007842 <_dtoa_r+0x68a>
 8007828:	4b98      	ldr	r3, [pc, #608]	@ (8007a8c <_dtoa_r+0x8d4>)
 800782a:	2200      	movs	r2, #0
 800782c:	e9dd 0100 	ldrd	r0, r1, [sp]
 8007830:	f7f8 ff02 	bl	8000638 <__aeabi_dmul>
 8007834:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8007838:	f7f9 f984 	bl	8000b44 <__aeabi_dcmpge>
 800783c:	2800      	cmp	r0, #0
 800783e:	f000 8157 	beq.w	8007af0 <_dtoa_r+0x938>
 8007842:	2400      	movs	r4, #0
 8007844:	4625      	mov	r5, r4
 8007846:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8007848:	43db      	mvns	r3, r3
 800784a:	9304      	str	r3, [sp, #16]
 800784c:	4656      	mov	r6, sl
 800784e:	2700      	movs	r7, #0
 8007850:	4621      	mov	r1, r4
 8007852:	4658      	mov	r0, fp
 8007854:	f000 fbb4 	bl	8007fc0 <_Bfree>
 8007858:	2d00      	cmp	r5, #0
 800785a:	d0dc      	beq.n	8007816 <_dtoa_r+0x65e>
 800785c:	b12f      	cbz	r7, 800786a <_dtoa_r+0x6b2>
 800785e:	42af      	cmp	r7, r5
 8007860:	d003      	beq.n	800786a <_dtoa_r+0x6b2>
 8007862:	4639      	mov	r1, r7
 8007864:	4658      	mov	r0, fp
 8007866:	f000 fbab 	bl	8007fc0 <_Bfree>
 800786a:	4629      	mov	r1, r5
 800786c:	4658      	mov	r0, fp
 800786e:	f000 fba7 	bl	8007fc0 <_Bfree>
 8007872:	e7d0      	b.n	8007816 <_dtoa_r+0x65e>
 8007874:	9704      	str	r7, [sp, #16]
 8007876:	4633      	mov	r3, r6
 8007878:	461e      	mov	r6, r3
 800787a:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800787e:	2a39      	cmp	r2, #57	@ 0x39
 8007880:	d107      	bne.n	8007892 <_dtoa_r+0x6da>
 8007882:	459a      	cmp	sl, r3
 8007884:	d1f8      	bne.n	8007878 <_dtoa_r+0x6c0>
 8007886:	9a04      	ldr	r2, [sp, #16]
 8007888:	3201      	adds	r2, #1
 800788a:	9204      	str	r2, [sp, #16]
 800788c:	2230      	movs	r2, #48	@ 0x30
 800788e:	f88a 2000 	strb.w	r2, [sl]
 8007892:	781a      	ldrb	r2, [r3, #0]
 8007894:	3201      	adds	r2, #1
 8007896:	701a      	strb	r2, [r3, #0]
 8007898:	e7bd      	b.n	8007816 <_dtoa_r+0x65e>
 800789a:	4b7b      	ldr	r3, [pc, #492]	@ (8007a88 <_dtoa_r+0x8d0>)
 800789c:	2200      	movs	r2, #0
 800789e:	f7f8 fecb 	bl	8000638 <__aeabi_dmul>
 80078a2:	2200      	movs	r2, #0
 80078a4:	2300      	movs	r3, #0
 80078a6:	4604      	mov	r4, r0
 80078a8:	460d      	mov	r5, r1
 80078aa:	f7f9 f92d 	bl	8000b08 <__aeabi_dcmpeq>
 80078ae:	2800      	cmp	r0, #0
 80078b0:	f43f aebb 	beq.w	800762a <_dtoa_r+0x472>
 80078b4:	e6f0      	b.n	8007698 <_dtoa_r+0x4e0>
 80078b6:	9a0b      	ldr	r2, [sp, #44]	@ 0x2c
 80078b8:	2a00      	cmp	r2, #0
 80078ba:	f000 80db 	beq.w	8007a74 <_dtoa_r+0x8bc>
 80078be:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 80078c0:	2a01      	cmp	r2, #1
 80078c2:	f300 80bf 	bgt.w	8007a44 <_dtoa_r+0x88c>
 80078c6:	9a14      	ldr	r2, [sp, #80]	@ 0x50
 80078c8:	2a00      	cmp	r2, #0
 80078ca:	f000 80b7 	beq.w	8007a3c <_dtoa_r+0x884>
 80078ce:	f203 4333 	addw	r3, r3, #1075	@ 0x433
 80078d2:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
 80078d4:	4646      	mov	r6, r8
 80078d6:	9a08      	ldr	r2, [sp, #32]
 80078d8:	2101      	movs	r1, #1
 80078da:	441a      	add	r2, r3
 80078dc:	4658      	mov	r0, fp
 80078de:	4498      	add	r8, r3
 80078e0:	9208      	str	r2, [sp, #32]
 80078e2:	f000 fc21 	bl	8008128 <__i2b>
 80078e6:	4605      	mov	r5, r0
 80078e8:	b15e      	cbz	r6, 8007902 <_dtoa_r+0x74a>
 80078ea:	9b08      	ldr	r3, [sp, #32]
 80078ec:	2b00      	cmp	r3, #0
 80078ee:	dd08      	ble.n	8007902 <_dtoa_r+0x74a>
 80078f0:	42b3      	cmp	r3, r6
 80078f2:	9a08      	ldr	r2, [sp, #32]
 80078f4:	bfa8      	it	ge
 80078f6:	4633      	movge	r3, r6
 80078f8:	eba8 0803 	sub.w	r8, r8, r3
 80078fc:	1af6      	subs	r6, r6, r3
 80078fe:	1ad3      	subs	r3, r2, r3
 8007900:	9308      	str	r3, [sp, #32]
 8007902:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8007904:	b1f3      	cbz	r3, 8007944 <_dtoa_r+0x78c>
 8007906:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8007908:	2b00      	cmp	r3, #0
 800790a:	f000 80b7 	beq.w	8007a7c <_dtoa_r+0x8c4>
 800790e:	b18c      	cbz	r4, 8007934 <_dtoa_r+0x77c>
 8007910:	4629      	mov	r1, r5
 8007912:	4622      	mov	r2, r4
 8007914:	4658      	mov	r0, fp
 8007916:	f000 fcc7 	bl	80082a8 <__pow5mult>
 800791a:	464a      	mov	r2, r9
 800791c:	4601      	mov	r1, r0
 800791e:	4605      	mov	r5, r0
 8007920:	4658      	mov	r0, fp
 8007922:	f000 fc17 	bl	8008154 <__multiply>
 8007926:	4649      	mov	r1, r9
 8007928:	9004      	str	r0, [sp, #16]
 800792a:	4658      	mov	r0, fp
 800792c:	f000 fb48 	bl	8007fc0 <_Bfree>
 8007930:	9b04      	ldr	r3, [sp, #16]
 8007932:	4699      	mov	r9, r3
 8007934:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8007936:	1b1a      	subs	r2, r3, r4
 8007938:	d004      	beq.n	8007944 <_dtoa_r+0x78c>
 800793a:	4649      	mov	r1, r9
 800793c:	4658      	mov	r0, fp
 800793e:	f000 fcb3 	bl	80082a8 <__pow5mult>
 8007942:	4681      	mov	r9, r0
 8007944:	2101      	movs	r1, #1
 8007946:	4658      	mov	r0, fp
 8007948:	f000 fbee 	bl	8008128 <__i2b>
 800794c:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800794e:	4604      	mov	r4, r0
 8007950:	2b00      	cmp	r3, #0
 8007952:	f000 81cf 	beq.w	8007cf4 <_dtoa_r+0xb3c>
 8007956:	461a      	mov	r2, r3
 8007958:	4601      	mov	r1, r0
 800795a:	4658      	mov	r0, fp
 800795c:	f000 fca4 	bl	80082a8 <__pow5mult>
 8007960:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8007962:	2b01      	cmp	r3, #1
 8007964:	4604      	mov	r4, r0
 8007966:	f300 8095 	bgt.w	8007a94 <_dtoa_r+0x8dc>
 800796a:	9b02      	ldr	r3, [sp, #8]
 800796c:	2b00      	cmp	r3, #0
 800796e:	f040 8087 	bne.w	8007a80 <_dtoa_r+0x8c8>
 8007972:	9b03      	ldr	r3, [sp, #12]
 8007974:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8007978:	2b00      	cmp	r3, #0
 800797a:	f040 8089 	bne.w	8007a90 <_dtoa_r+0x8d8>
 800797e:	9b03      	ldr	r3, [sp, #12]
 8007980:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8007984:	0d1b      	lsrs	r3, r3, #20
 8007986:	051b      	lsls	r3, r3, #20
 8007988:	b12b      	cbz	r3, 8007996 <_dtoa_r+0x7de>
 800798a:	9b08      	ldr	r3, [sp, #32]
 800798c:	3301      	adds	r3, #1
 800798e:	9308      	str	r3, [sp, #32]
 8007990:	f108 0801 	add.w	r8, r8, #1
 8007994:	2301      	movs	r3, #1
 8007996:	930a      	str	r3, [sp, #40]	@ 0x28
 8007998:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800799a:	2b00      	cmp	r3, #0
 800799c:	f000 81b0 	beq.w	8007d00 <_dtoa_r+0xb48>
 80079a0:	6923      	ldr	r3, [r4, #16]
 80079a2:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 80079a6:	6918      	ldr	r0, [r3, #16]
 80079a8:	f000 fb72 	bl	8008090 <__hi0bits>
 80079ac:	f1c0 0020 	rsb	r0, r0, #32
 80079b0:	9b08      	ldr	r3, [sp, #32]
 80079b2:	4418      	add	r0, r3
 80079b4:	f010 001f 	ands.w	r0, r0, #31
 80079b8:	d077      	beq.n	8007aaa <_dtoa_r+0x8f2>
 80079ba:	f1c0 0320 	rsb	r3, r0, #32
 80079be:	2b04      	cmp	r3, #4
 80079c0:	dd6b      	ble.n	8007a9a <_dtoa_r+0x8e2>
 80079c2:	9b08      	ldr	r3, [sp, #32]
 80079c4:	f1c0 001c 	rsb	r0, r0, #28
 80079c8:	4403      	add	r3, r0
 80079ca:	4480      	add	r8, r0
 80079cc:	4406      	add	r6, r0
 80079ce:	9308      	str	r3, [sp, #32]
 80079d0:	f1b8 0f00 	cmp.w	r8, #0
 80079d4:	dd05      	ble.n	80079e2 <_dtoa_r+0x82a>
 80079d6:	4649      	mov	r1, r9
 80079d8:	4642      	mov	r2, r8
 80079da:	4658      	mov	r0, fp
 80079dc:	f000 fcbe 	bl	800835c <__lshift>
 80079e0:	4681      	mov	r9, r0
 80079e2:	9b08      	ldr	r3, [sp, #32]
 80079e4:	2b00      	cmp	r3, #0
 80079e6:	dd05      	ble.n	80079f4 <_dtoa_r+0x83c>
 80079e8:	4621      	mov	r1, r4
 80079ea:	461a      	mov	r2, r3
 80079ec:	4658      	mov	r0, fp
 80079ee:	f000 fcb5 	bl	800835c <__lshift>
 80079f2:	4604      	mov	r4, r0
 80079f4:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 80079f6:	2b00      	cmp	r3, #0
 80079f8:	d059      	beq.n	8007aae <_dtoa_r+0x8f6>
 80079fa:	4621      	mov	r1, r4
 80079fc:	4648      	mov	r0, r9
 80079fe:	f000 fd19 	bl	8008434 <__mcmp>
 8007a02:	2800      	cmp	r0, #0
 8007a04:	da53      	bge.n	8007aae <_dtoa_r+0x8f6>
 8007a06:	1e7b      	subs	r3, r7, #1
 8007a08:	9304      	str	r3, [sp, #16]
 8007a0a:	4649      	mov	r1, r9
 8007a0c:	2300      	movs	r3, #0
 8007a0e:	220a      	movs	r2, #10
 8007a10:	4658      	mov	r0, fp
 8007a12:	f000 faf7 	bl	8008004 <__multadd>
 8007a16:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8007a18:	4681      	mov	r9, r0
 8007a1a:	2b00      	cmp	r3, #0
 8007a1c:	f000 8172 	beq.w	8007d04 <_dtoa_r+0xb4c>
 8007a20:	2300      	movs	r3, #0
 8007a22:	4629      	mov	r1, r5
 8007a24:	220a      	movs	r2, #10
 8007a26:	4658      	mov	r0, fp
 8007a28:	f000 faec 	bl	8008004 <__multadd>
 8007a2c:	9b00      	ldr	r3, [sp, #0]
 8007a2e:	2b00      	cmp	r3, #0
 8007a30:	4605      	mov	r5, r0
 8007a32:	dc67      	bgt.n	8007b04 <_dtoa_r+0x94c>
 8007a34:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8007a36:	2b02      	cmp	r3, #2
 8007a38:	dc41      	bgt.n	8007abe <_dtoa_r+0x906>
 8007a3a:	e063      	b.n	8007b04 <_dtoa_r+0x94c>
 8007a3c:	9b16      	ldr	r3, [sp, #88]	@ 0x58
 8007a3e:	f1c3 0336 	rsb	r3, r3, #54	@ 0x36
 8007a42:	e746      	b.n	80078d2 <_dtoa_r+0x71a>
 8007a44:	9b07      	ldr	r3, [sp, #28]
 8007a46:	1e5c      	subs	r4, r3, #1
 8007a48:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8007a4a:	42a3      	cmp	r3, r4
 8007a4c:	bfbf      	itttt	lt
 8007a4e:	9b0a      	ldrlt	r3, [sp, #40]	@ 0x28
 8007a50:	9a0f      	ldrlt	r2, [sp, #60]	@ 0x3c
 8007a52:	940a      	strlt	r4, [sp, #40]	@ 0x28
 8007a54:	1ae3      	sublt	r3, r4, r3
 8007a56:	bfb4      	ite	lt
 8007a58:	18d2      	addlt	r2, r2, r3
 8007a5a:	1b1c      	subge	r4, r3, r4
 8007a5c:	9b07      	ldr	r3, [sp, #28]
 8007a5e:	bfbc      	itt	lt
 8007a60:	920f      	strlt	r2, [sp, #60]	@ 0x3c
 8007a62:	2400      	movlt	r4, #0
 8007a64:	2b00      	cmp	r3, #0
 8007a66:	bfb5      	itete	lt
 8007a68:	eba8 0603 	sublt.w	r6, r8, r3
 8007a6c:	9b07      	ldrge	r3, [sp, #28]
 8007a6e:	2300      	movlt	r3, #0
 8007a70:	4646      	movge	r6, r8
 8007a72:	e730      	b.n	80078d6 <_dtoa_r+0x71e>
 8007a74:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
 8007a76:	9d0b      	ldr	r5, [sp, #44]	@ 0x2c
 8007a78:	4646      	mov	r6, r8
 8007a7a:	e735      	b.n	80078e8 <_dtoa_r+0x730>
 8007a7c:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 8007a7e:	e75c      	b.n	800793a <_dtoa_r+0x782>
 8007a80:	2300      	movs	r3, #0
 8007a82:	e788      	b.n	8007996 <_dtoa_r+0x7de>
 8007a84:	3fe00000 	.word	0x3fe00000
 8007a88:	40240000 	.word	0x40240000
 8007a8c:	40140000 	.word	0x40140000
 8007a90:	9b02      	ldr	r3, [sp, #8]
 8007a92:	e780      	b.n	8007996 <_dtoa_r+0x7de>
 8007a94:	2300      	movs	r3, #0
 8007a96:	930a      	str	r3, [sp, #40]	@ 0x28
 8007a98:	e782      	b.n	80079a0 <_dtoa_r+0x7e8>
 8007a9a:	d099      	beq.n	80079d0 <_dtoa_r+0x818>
 8007a9c:	9a08      	ldr	r2, [sp, #32]
 8007a9e:	331c      	adds	r3, #28
 8007aa0:	441a      	add	r2, r3
 8007aa2:	4498      	add	r8, r3
 8007aa4:	441e      	add	r6, r3
 8007aa6:	9208      	str	r2, [sp, #32]
 8007aa8:	e792      	b.n	80079d0 <_dtoa_r+0x818>
 8007aaa:	4603      	mov	r3, r0
 8007aac:	e7f6      	b.n	8007a9c <_dtoa_r+0x8e4>
 8007aae:	9b07      	ldr	r3, [sp, #28]
 8007ab0:	9704      	str	r7, [sp, #16]
 8007ab2:	2b00      	cmp	r3, #0
 8007ab4:	dc20      	bgt.n	8007af8 <_dtoa_r+0x940>
 8007ab6:	9300      	str	r3, [sp, #0]
 8007ab8:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8007aba:	2b02      	cmp	r3, #2
 8007abc:	dd1e      	ble.n	8007afc <_dtoa_r+0x944>
 8007abe:	9b00      	ldr	r3, [sp, #0]
 8007ac0:	2b00      	cmp	r3, #0
 8007ac2:	f47f aec0 	bne.w	8007846 <_dtoa_r+0x68e>
 8007ac6:	4621      	mov	r1, r4
 8007ac8:	2205      	movs	r2, #5
 8007aca:	4658      	mov	r0, fp
 8007acc:	f000 fa9a 	bl	8008004 <__multadd>
 8007ad0:	4601      	mov	r1, r0
 8007ad2:	4604      	mov	r4, r0
 8007ad4:	4648      	mov	r0, r9
 8007ad6:	f000 fcad 	bl	8008434 <__mcmp>
 8007ada:	2800      	cmp	r0, #0
 8007adc:	f77f aeb3 	ble.w	8007846 <_dtoa_r+0x68e>
 8007ae0:	4656      	mov	r6, sl
 8007ae2:	2331      	movs	r3, #49	@ 0x31
 8007ae4:	f806 3b01 	strb.w	r3, [r6], #1
 8007ae8:	9b04      	ldr	r3, [sp, #16]
 8007aea:	3301      	adds	r3, #1
 8007aec:	9304      	str	r3, [sp, #16]
 8007aee:	e6ae      	b.n	800784e <_dtoa_r+0x696>
 8007af0:	9c07      	ldr	r4, [sp, #28]
 8007af2:	9704      	str	r7, [sp, #16]
 8007af4:	4625      	mov	r5, r4
 8007af6:	e7f3      	b.n	8007ae0 <_dtoa_r+0x928>
 8007af8:	9b07      	ldr	r3, [sp, #28]
 8007afa:	9300      	str	r3, [sp, #0]
 8007afc:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8007afe:	2b00      	cmp	r3, #0
 8007b00:	f000 8104 	beq.w	8007d0c <_dtoa_r+0xb54>
 8007b04:	2e00      	cmp	r6, #0
 8007b06:	dd05      	ble.n	8007b14 <_dtoa_r+0x95c>
 8007b08:	4629      	mov	r1, r5
 8007b0a:	4632      	mov	r2, r6
 8007b0c:	4658      	mov	r0, fp
 8007b0e:	f000 fc25 	bl	800835c <__lshift>
 8007b12:	4605      	mov	r5, r0
 8007b14:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8007b16:	2b00      	cmp	r3, #0
 8007b18:	d05a      	beq.n	8007bd0 <_dtoa_r+0xa18>
 8007b1a:	6869      	ldr	r1, [r5, #4]
 8007b1c:	4658      	mov	r0, fp
 8007b1e:	f000 fa0f 	bl	8007f40 <_Balloc>
 8007b22:	4606      	mov	r6, r0
 8007b24:	b928      	cbnz	r0, 8007b32 <_dtoa_r+0x97a>
 8007b26:	4b84      	ldr	r3, [pc, #528]	@ (8007d38 <_dtoa_r+0xb80>)
 8007b28:	4602      	mov	r2, r0
 8007b2a:	f240 21ef 	movw	r1, #751	@ 0x2ef
 8007b2e:	f7ff bb5a 	b.w	80071e6 <_dtoa_r+0x2e>
 8007b32:	692a      	ldr	r2, [r5, #16]
 8007b34:	3202      	adds	r2, #2
 8007b36:	0092      	lsls	r2, r2, #2
 8007b38:	f105 010c 	add.w	r1, r5, #12
 8007b3c:	300c      	adds	r0, #12
 8007b3e:	f000 ffaf 	bl	8008aa0 <memcpy>
 8007b42:	2201      	movs	r2, #1
 8007b44:	4631      	mov	r1, r6
 8007b46:	4658      	mov	r0, fp
 8007b48:	f000 fc08 	bl	800835c <__lshift>
 8007b4c:	f10a 0301 	add.w	r3, sl, #1
 8007b50:	9307      	str	r3, [sp, #28]
 8007b52:	9b00      	ldr	r3, [sp, #0]
 8007b54:	4453      	add	r3, sl
 8007b56:	930b      	str	r3, [sp, #44]	@ 0x2c
 8007b58:	9b02      	ldr	r3, [sp, #8]
 8007b5a:	f003 0301 	and.w	r3, r3, #1
 8007b5e:	462f      	mov	r7, r5
 8007b60:	930a      	str	r3, [sp, #40]	@ 0x28
 8007b62:	4605      	mov	r5, r0
 8007b64:	9b07      	ldr	r3, [sp, #28]
 8007b66:	4621      	mov	r1, r4
 8007b68:	3b01      	subs	r3, #1
 8007b6a:	4648      	mov	r0, r9
 8007b6c:	9300      	str	r3, [sp, #0]
 8007b6e:	f7ff fa98 	bl	80070a2 <quorem>
 8007b72:	4639      	mov	r1, r7
 8007b74:	9002      	str	r0, [sp, #8]
 8007b76:	f100 0830 	add.w	r8, r0, #48	@ 0x30
 8007b7a:	4648      	mov	r0, r9
 8007b7c:	f000 fc5a 	bl	8008434 <__mcmp>
 8007b80:	462a      	mov	r2, r5
 8007b82:	9008      	str	r0, [sp, #32]
 8007b84:	4621      	mov	r1, r4
 8007b86:	4658      	mov	r0, fp
 8007b88:	f000 fc70 	bl	800846c <__mdiff>
 8007b8c:	68c2      	ldr	r2, [r0, #12]
 8007b8e:	4606      	mov	r6, r0
 8007b90:	bb02      	cbnz	r2, 8007bd4 <_dtoa_r+0xa1c>
 8007b92:	4601      	mov	r1, r0
 8007b94:	4648      	mov	r0, r9
 8007b96:	f000 fc4d 	bl	8008434 <__mcmp>
 8007b9a:	4602      	mov	r2, r0
 8007b9c:	4631      	mov	r1, r6
 8007b9e:	4658      	mov	r0, fp
 8007ba0:	920e      	str	r2, [sp, #56]	@ 0x38
 8007ba2:	f000 fa0d 	bl	8007fc0 <_Bfree>
 8007ba6:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8007ba8:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8007baa:	9e07      	ldr	r6, [sp, #28]
 8007bac:	ea43 0102 	orr.w	r1, r3, r2
 8007bb0:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8007bb2:	4319      	orrs	r1, r3
 8007bb4:	d110      	bne.n	8007bd8 <_dtoa_r+0xa20>
 8007bb6:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 8007bba:	d029      	beq.n	8007c10 <_dtoa_r+0xa58>
 8007bbc:	9b08      	ldr	r3, [sp, #32]
 8007bbe:	2b00      	cmp	r3, #0
 8007bc0:	dd02      	ble.n	8007bc8 <_dtoa_r+0xa10>
 8007bc2:	9b02      	ldr	r3, [sp, #8]
 8007bc4:	f103 0831 	add.w	r8, r3, #49	@ 0x31
 8007bc8:	9b00      	ldr	r3, [sp, #0]
 8007bca:	f883 8000 	strb.w	r8, [r3]
 8007bce:	e63f      	b.n	8007850 <_dtoa_r+0x698>
 8007bd0:	4628      	mov	r0, r5
 8007bd2:	e7bb      	b.n	8007b4c <_dtoa_r+0x994>
 8007bd4:	2201      	movs	r2, #1
 8007bd6:	e7e1      	b.n	8007b9c <_dtoa_r+0x9e4>
 8007bd8:	9b08      	ldr	r3, [sp, #32]
 8007bda:	2b00      	cmp	r3, #0
 8007bdc:	db04      	blt.n	8007be8 <_dtoa_r+0xa30>
 8007bde:	9909      	ldr	r1, [sp, #36]	@ 0x24
 8007be0:	430b      	orrs	r3, r1
 8007be2:	990a      	ldr	r1, [sp, #40]	@ 0x28
 8007be4:	430b      	orrs	r3, r1
 8007be6:	d120      	bne.n	8007c2a <_dtoa_r+0xa72>
 8007be8:	2a00      	cmp	r2, #0
 8007bea:	dded      	ble.n	8007bc8 <_dtoa_r+0xa10>
 8007bec:	4649      	mov	r1, r9
 8007bee:	2201      	movs	r2, #1
 8007bf0:	4658      	mov	r0, fp
 8007bf2:	f000 fbb3 	bl	800835c <__lshift>
 8007bf6:	4621      	mov	r1, r4
 8007bf8:	4681      	mov	r9, r0
 8007bfa:	f000 fc1b 	bl	8008434 <__mcmp>
 8007bfe:	2800      	cmp	r0, #0
 8007c00:	dc03      	bgt.n	8007c0a <_dtoa_r+0xa52>
 8007c02:	d1e1      	bne.n	8007bc8 <_dtoa_r+0xa10>
 8007c04:	f018 0f01 	tst.w	r8, #1
 8007c08:	d0de      	beq.n	8007bc8 <_dtoa_r+0xa10>
 8007c0a:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 8007c0e:	d1d8      	bne.n	8007bc2 <_dtoa_r+0xa0a>
 8007c10:	9a00      	ldr	r2, [sp, #0]
 8007c12:	2339      	movs	r3, #57	@ 0x39
 8007c14:	7013      	strb	r3, [r2, #0]
 8007c16:	4633      	mov	r3, r6
 8007c18:	461e      	mov	r6, r3
 8007c1a:	3b01      	subs	r3, #1
 8007c1c:	f816 2c01 	ldrb.w	r2, [r6, #-1]
 8007c20:	2a39      	cmp	r2, #57	@ 0x39
 8007c22:	d052      	beq.n	8007cca <_dtoa_r+0xb12>
 8007c24:	3201      	adds	r2, #1
 8007c26:	701a      	strb	r2, [r3, #0]
 8007c28:	e612      	b.n	8007850 <_dtoa_r+0x698>
 8007c2a:	2a00      	cmp	r2, #0
 8007c2c:	dd07      	ble.n	8007c3e <_dtoa_r+0xa86>
 8007c2e:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 8007c32:	d0ed      	beq.n	8007c10 <_dtoa_r+0xa58>
 8007c34:	9a00      	ldr	r2, [sp, #0]
 8007c36:	f108 0301 	add.w	r3, r8, #1
 8007c3a:	7013      	strb	r3, [r2, #0]
 8007c3c:	e608      	b.n	8007850 <_dtoa_r+0x698>
 8007c3e:	9b07      	ldr	r3, [sp, #28]
 8007c40:	9a07      	ldr	r2, [sp, #28]
 8007c42:	f803 8c01 	strb.w	r8, [r3, #-1]
 8007c46:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8007c48:	4293      	cmp	r3, r2
 8007c4a:	d028      	beq.n	8007c9e <_dtoa_r+0xae6>
 8007c4c:	4649      	mov	r1, r9
 8007c4e:	2300      	movs	r3, #0
 8007c50:	220a      	movs	r2, #10
 8007c52:	4658      	mov	r0, fp
 8007c54:	f000 f9d6 	bl	8008004 <__multadd>
 8007c58:	42af      	cmp	r7, r5
 8007c5a:	4681      	mov	r9, r0
 8007c5c:	f04f 0300 	mov.w	r3, #0
 8007c60:	f04f 020a 	mov.w	r2, #10
 8007c64:	4639      	mov	r1, r7
 8007c66:	4658      	mov	r0, fp
 8007c68:	d107      	bne.n	8007c7a <_dtoa_r+0xac2>
 8007c6a:	f000 f9cb 	bl	8008004 <__multadd>
 8007c6e:	4607      	mov	r7, r0
 8007c70:	4605      	mov	r5, r0
 8007c72:	9b07      	ldr	r3, [sp, #28]
 8007c74:	3301      	adds	r3, #1
 8007c76:	9307      	str	r3, [sp, #28]
 8007c78:	e774      	b.n	8007b64 <_dtoa_r+0x9ac>
 8007c7a:	f000 f9c3 	bl	8008004 <__multadd>
 8007c7e:	4629      	mov	r1, r5
 8007c80:	4607      	mov	r7, r0
 8007c82:	2300      	movs	r3, #0
 8007c84:	220a      	movs	r2, #10
 8007c86:	4658      	mov	r0, fp
 8007c88:	f000 f9bc 	bl	8008004 <__multadd>
 8007c8c:	4605      	mov	r5, r0
 8007c8e:	e7f0      	b.n	8007c72 <_dtoa_r+0xaba>
 8007c90:	9b00      	ldr	r3, [sp, #0]
 8007c92:	2b00      	cmp	r3, #0
 8007c94:	bfcc      	ite	gt
 8007c96:	461e      	movgt	r6, r3
 8007c98:	2601      	movle	r6, #1
 8007c9a:	4456      	add	r6, sl
 8007c9c:	2700      	movs	r7, #0
 8007c9e:	4649      	mov	r1, r9
 8007ca0:	2201      	movs	r2, #1
 8007ca2:	4658      	mov	r0, fp
 8007ca4:	f000 fb5a 	bl	800835c <__lshift>
 8007ca8:	4621      	mov	r1, r4
 8007caa:	4681      	mov	r9, r0
 8007cac:	f000 fbc2 	bl	8008434 <__mcmp>
 8007cb0:	2800      	cmp	r0, #0
 8007cb2:	dcb0      	bgt.n	8007c16 <_dtoa_r+0xa5e>
 8007cb4:	d102      	bne.n	8007cbc <_dtoa_r+0xb04>
 8007cb6:	f018 0f01 	tst.w	r8, #1
 8007cba:	d1ac      	bne.n	8007c16 <_dtoa_r+0xa5e>
 8007cbc:	4633      	mov	r3, r6
 8007cbe:	461e      	mov	r6, r3
 8007cc0:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8007cc4:	2a30      	cmp	r2, #48	@ 0x30
 8007cc6:	d0fa      	beq.n	8007cbe <_dtoa_r+0xb06>
 8007cc8:	e5c2      	b.n	8007850 <_dtoa_r+0x698>
 8007cca:	459a      	cmp	sl, r3
 8007ccc:	d1a4      	bne.n	8007c18 <_dtoa_r+0xa60>
 8007cce:	9b04      	ldr	r3, [sp, #16]
 8007cd0:	3301      	adds	r3, #1
 8007cd2:	9304      	str	r3, [sp, #16]
 8007cd4:	2331      	movs	r3, #49	@ 0x31
 8007cd6:	f88a 3000 	strb.w	r3, [sl]
 8007cda:	e5b9      	b.n	8007850 <_dtoa_r+0x698>
 8007cdc:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 8007cde:	f8df a05c 	ldr.w	sl, [pc, #92]	@ 8007d3c <_dtoa_r+0xb84>
 8007ce2:	b11b      	cbz	r3, 8007cec <_dtoa_r+0xb34>
 8007ce4:	f10a 0308 	add.w	r3, sl, #8
 8007ce8:	9a23      	ldr	r2, [sp, #140]	@ 0x8c
 8007cea:	6013      	str	r3, [r2, #0]
 8007cec:	4650      	mov	r0, sl
 8007cee:	b019      	add	sp, #100	@ 0x64
 8007cf0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007cf4:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8007cf6:	2b01      	cmp	r3, #1
 8007cf8:	f77f ae37 	ble.w	800796a <_dtoa_r+0x7b2>
 8007cfc:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8007cfe:	930a      	str	r3, [sp, #40]	@ 0x28
 8007d00:	2001      	movs	r0, #1
 8007d02:	e655      	b.n	80079b0 <_dtoa_r+0x7f8>
 8007d04:	9b00      	ldr	r3, [sp, #0]
 8007d06:	2b00      	cmp	r3, #0
 8007d08:	f77f aed6 	ble.w	8007ab8 <_dtoa_r+0x900>
 8007d0c:	4656      	mov	r6, sl
 8007d0e:	4621      	mov	r1, r4
 8007d10:	4648      	mov	r0, r9
 8007d12:	f7ff f9c6 	bl	80070a2 <quorem>
 8007d16:	f100 0830 	add.w	r8, r0, #48	@ 0x30
 8007d1a:	f806 8b01 	strb.w	r8, [r6], #1
 8007d1e:	9b00      	ldr	r3, [sp, #0]
 8007d20:	eba6 020a 	sub.w	r2, r6, sl
 8007d24:	4293      	cmp	r3, r2
 8007d26:	ddb3      	ble.n	8007c90 <_dtoa_r+0xad8>
 8007d28:	4649      	mov	r1, r9
 8007d2a:	2300      	movs	r3, #0
 8007d2c:	220a      	movs	r2, #10
 8007d2e:	4658      	mov	r0, fp
 8007d30:	f000 f968 	bl	8008004 <__multadd>
 8007d34:	4681      	mov	r9, r0
 8007d36:	e7ea      	b.n	8007d0e <_dtoa_r+0xb56>
 8007d38:	0800a3e8 	.word	0x0800a3e8
 8007d3c:	0800a36c 	.word	0x0800a36c

08007d40 <_free_r>:
 8007d40:	b538      	push	{r3, r4, r5, lr}
 8007d42:	4605      	mov	r5, r0
 8007d44:	2900      	cmp	r1, #0
 8007d46:	d041      	beq.n	8007dcc <_free_r+0x8c>
 8007d48:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8007d4c:	1f0c      	subs	r4, r1, #4
 8007d4e:	2b00      	cmp	r3, #0
 8007d50:	bfb8      	it	lt
 8007d52:	18e4      	addlt	r4, r4, r3
 8007d54:	f000 f8e8 	bl	8007f28 <__malloc_lock>
 8007d58:	4a1d      	ldr	r2, [pc, #116]	@ (8007dd0 <_free_r+0x90>)
 8007d5a:	6813      	ldr	r3, [r2, #0]
 8007d5c:	b933      	cbnz	r3, 8007d6c <_free_r+0x2c>
 8007d5e:	6063      	str	r3, [r4, #4]
 8007d60:	6014      	str	r4, [r2, #0]
 8007d62:	4628      	mov	r0, r5
 8007d64:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8007d68:	f000 b8e4 	b.w	8007f34 <__malloc_unlock>
 8007d6c:	42a3      	cmp	r3, r4
 8007d6e:	d908      	bls.n	8007d82 <_free_r+0x42>
 8007d70:	6820      	ldr	r0, [r4, #0]
 8007d72:	1821      	adds	r1, r4, r0
 8007d74:	428b      	cmp	r3, r1
 8007d76:	bf01      	itttt	eq
 8007d78:	6819      	ldreq	r1, [r3, #0]
 8007d7a:	685b      	ldreq	r3, [r3, #4]
 8007d7c:	1809      	addeq	r1, r1, r0
 8007d7e:	6021      	streq	r1, [r4, #0]
 8007d80:	e7ed      	b.n	8007d5e <_free_r+0x1e>
 8007d82:	461a      	mov	r2, r3
 8007d84:	685b      	ldr	r3, [r3, #4]
 8007d86:	b10b      	cbz	r3, 8007d8c <_free_r+0x4c>
 8007d88:	42a3      	cmp	r3, r4
 8007d8a:	d9fa      	bls.n	8007d82 <_free_r+0x42>
 8007d8c:	6811      	ldr	r1, [r2, #0]
 8007d8e:	1850      	adds	r0, r2, r1
 8007d90:	42a0      	cmp	r0, r4
 8007d92:	d10b      	bne.n	8007dac <_free_r+0x6c>
 8007d94:	6820      	ldr	r0, [r4, #0]
 8007d96:	4401      	add	r1, r0
 8007d98:	1850      	adds	r0, r2, r1
 8007d9a:	4283      	cmp	r3, r0
 8007d9c:	6011      	str	r1, [r2, #0]
 8007d9e:	d1e0      	bne.n	8007d62 <_free_r+0x22>
 8007da0:	6818      	ldr	r0, [r3, #0]
 8007da2:	685b      	ldr	r3, [r3, #4]
 8007da4:	6053      	str	r3, [r2, #4]
 8007da6:	4408      	add	r0, r1
 8007da8:	6010      	str	r0, [r2, #0]
 8007daa:	e7da      	b.n	8007d62 <_free_r+0x22>
 8007dac:	d902      	bls.n	8007db4 <_free_r+0x74>
 8007dae:	230c      	movs	r3, #12
 8007db0:	602b      	str	r3, [r5, #0]
 8007db2:	e7d6      	b.n	8007d62 <_free_r+0x22>
 8007db4:	6820      	ldr	r0, [r4, #0]
 8007db6:	1821      	adds	r1, r4, r0
 8007db8:	428b      	cmp	r3, r1
 8007dba:	bf04      	itt	eq
 8007dbc:	6819      	ldreq	r1, [r3, #0]
 8007dbe:	685b      	ldreq	r3, [r3, #4]
 8007dc0:	6063      	str	r3, [r4, #4]
 8007dc2:	bf04      	itt	eq
 8007dc4:	1809      	addeq	r1, r1, r0
 8007dc6:	6021      	streq	r1, [r4, #0]
 8007dc8:	6054      	str	r4, [r2, #4]
 8007dca:	e7ca      	b.n	8007d62 <_free_r+0x22>
 8007dcc:	bd38      	pop	{r3, r4, r5, pc}
 8007dce:	bf00      	nop
 8007dd0:	2000074c 	.word	0x2000074c

08007dd4 <malloc>:
 8007dd4:	4b02      	ldr	r3, [pc, #8]	@ (8007de0 <malloc+0xc>)
 8007dd6:	4601      	mov	r1, r0
 8007dd8:	6818      	ldr	r0, [r3, #0]
 8007dda:	f000 b825 	b.w	8007e28 <_malloc_r>
 8007dde:	bf00      	nop
 8007de0:	20000018 	.word	0x20000018

08007de4 <sbrk_aligned>:
 8007de4:	b570      	push	{r4, r5, r6, lr}
 8007de6:	4e0f      	ldr	r6, [pc, #60]	@ (8007e24 <sbrk_aligned+0x40>)
 8007de8:	460c      	mov	r4, r1
 8007dea:	6831      	ldr	r1, [r6, #0]
 8007dec:	4605      	mov	r5, r0
 8007dee:	b911      	cbnz	r1, 8007df6 <sbrk_aligned+0x12>
 8007df0:	f000 fe46 	bl	8008a80 <_sbrk_r>
 8007df4:	6030      	str	r0, [r6, #0]
 8007df6:	4621      	mov	r1, r4
 8007df8:	4628      	mov	r0, r5
 8007dfa:	f000 fe41 	bl	8008a80 <_sbrk_r>
 8007dfe:	1c43      	adds	r3, r0, #1
 8007e00:	d103      	bne.n	8007e0a <sbrk_aligned+0x26>
 8007e02:	f04f 34ff 	mov.w	r4, #4294967295
 8007e06:	4620      	mov	r0, r4
 8007e08:	bd70      	pop	{r4, r5, r6, pc}
 8007e0a:	1cc4      	adds	r4, r0, #3
 8007e0c:	f024 0403 	bic.w	r4, r4, #3
 8007e10:	42a0      	cmp	r0, r4
 8007e12:	d0f8      	beq.n	8007e06 <sbrk_aligned+0x22>
 8007e14:	1a21      	subs	r1, r4, r0
 8007e16:	4628      	mov	r0, r5
 8007e18:	f000 fe32 	bl	8008a80 <_sbrk_r>
 8007e1c:	3001      	adds	r0, #1
 8007e1e:	d1f2      	bne.n	8007e06 <sbrk_aligned+0x22>
 8007e20:	e7ef      	b.n	8007e02 <sbrk_aligned+0x1e>
 8007e22:	bf00      	nop
 8007e24:	20000748 	.word	0x20000748

08007e28 <_malloc_r>:
 8007e28:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8007e2c:	1ccd      	adds	r5, r1, #3
 8007e2e:	f025 0503 	bic.w	r5, r5, #3
 8007e32:	3508      	adds	r5, #8
 8007e34:	2d0c      	cmp	r5, #12
 8007e36:	bf38      	it	cc
 8007e38:	250c      	movcc	r5, #12
 8007e3a:	2d00      	cmp	r5, #0
 8007e3c:	4606      	mov	r6, r0
 8007e3e:	db01      	blt.n	8007e44 <_malloc_r+0x1c>
 8007e40:	42a9      	cmp	r1, r5
 8007e42:	d904      	bls.n	8007e4e <_malloc_r+0x26>
 8007e44:	230c      	movs	r3, #12
 8007e46:	6033      	str	r3, [r6, #0]
 8007e48:	2000      	movs	r0, #0
 8007e4a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8007e4e:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 8007f24 <_malloc_r+0xfc>
 8007e52:	f000 f869 	bl	8007f28 <__malloc_lock>
 8007e56:	f8d8 3000 	ldr.w	r3, [r8]
 8007e5a:	461c      	mov	r4, r3
 8007e5c:	bb44      	cbnz	r4, 8007eb0 <_malloc_r+0x88>
 8007e5e:	4629      	mov	r1, r5
 8007e60:	4630      	mov	r0, r6
 8007e62:	f7ff ffbf 	bl	8007de4 <sbrk_aligned>
 8007e66:	1c43      	adds	r3, r0, #1
 8007e68:	4604      	mov	r4, r0
 8007e6a:	d158      	bne.n	8007f1e <_malloc_r+0xf6>
 8007e6c:	f8d8 4000 	ldr.w	r4, [r8]
 8007e70:	4627      	mov	r7, r4
 8007e72:	2f00      	cmp	r7, #0
 8007e74:	d143      	bne.n	8007efe <_malloc_r+0xd6>
 8007e76:	2c00      	cmp	r4, #0
 8007e78:	d04b      	beq.n	8007f12 <_malloc_r+0xea>
 8007e7a:	6823      	ldr	r3, [r4, #0]
 8007e7c:	4639      	mov	r1, r7
 8007e7e:	4630      	mov	r0, r6
 8007e80:	eb04 0903 	add.w	r9, r4, r3
 8007e84:	f000 fdfc 	bl	8008a80 <_sbrk_r>
 8007e88:	4581      	cmp	r9, r0
 8007e8a:	d142      	bne.n	8007f12 <_malloc_r+0xea>
 8007e8c:	6821      	ldr	r1, [r4, #0]
 8007e8e:	1a6d      	subs	r5, r5, r1
 8007e90:	4629      	mov	r1, r5
 8007e92:	4630      	mov	r0, r6
 8007e94:	f7ff ffa6 	bl	8007de4 <sbrk_aligned>
 8007e98:	3001      	adds	r0, #1
 8007e9a:	d03a      	beq.n	8007f12 <_malloc_r+0xea>
 8007e9c:	6823      	ldr	r3, [r4, #0]
 8007e9e:	442b      	add	r3, r5
 8007ea0:	6023      	str	r3, [r4, #0]
 8007ea2:	f8d8 3000 	ldr.w	r3, [r8]
 8007ea6:	685a      	ldr	r2, [r3, #4]
 8007ea8:	bb62      	cbnz	r2, 8007f04 <_malloc_r+0xdc>
 8007eaa:	f8c8 7000 	str.w	r7, [r8]
 8007eae:	e00f      	b.n	8007ed0 <_malloc_r+0xa8>
 8007eb0:	6822      	ldr	r2, [r4, #0]
 8007eb2:	1b52      	subs	r2, r2, r5
 8007eb4:	d420      	bmi.n	8007ef8 <_malloc_r+0xd0>
 8007eb6:	2a0b      	cmp	r2, #11
 8007eb8:	d917      	bls.n	8007eea <_malloc_r+0xc2>
 8007eba:	1961      	adds	r1, r4, r5
 8007ebc:	42a3      	cmp	r3, r4
 8007ebe:	6025      	str	r5, [r4, #0]
 8007ec0:	bf18      	it	ne
 8007ec2:	6059      	strne	r1, [r3, #4]
 8007ec4:	6863      	ldr	r3, [r4, #4]
 8007ec6:	bf08      	it	eq
 8007ec8:	f8c8 1000 	streq.w	r1, [r8]
 8007ecc:	5162      	str	r2, [r4, r5]
 8007ece:	604b      	str	r3, [r1, #4]
 8007ed0:	4630      	mov	r0, r6
 8007ed2:	f000 f82f 	bl	8007f34 <__malloc_unlock>
 8007ed6:	f104 000b 	add.w	r0, r4, #11
 8007eda:	1d23      	adds	r3, r4, #4
 8007edc:	f020 0007 	bic.w	r0, r0, #7
 8007ee0:	1ac2      	subs	r2, r0, r3
 8007ee2:	bf1c      	itt	ne
 8007ee4:	1a1b      	subne	r3, r3, r0
 8007ee6:	50a3      	strne	r3, [r4, r2]
 8007ee8:	e7af      	b.n	8007e4a <_malloc_r+0x22>
 8007eea:	6862      	ldr	r2, [r4, #4]
 8007eec:	42a3      	cmp	r3, r4
 8007eee:	bf0c      	ite	eq
 8007ef0:	f8c8 2000 	streq.w	r2, [r8]
 8007ef4:	605a      	strne	r2, [r3, #4]
 8007ef6:	e7eb      	b.n	8007ed0 <_malloc_r+0xa8>
 8007ef8:	4623      	mov	r3, r4
 8007efa:	6864      	ldr	r4, [r4, #4]
 8007efc:	e7ae      	b.n	8007e5c <_malloc_r+0x34>
 8007efe:	463c      	mov	r4, r7
 8007f00:	687f      	ldr	r7, [r7, #4]
 8007f02:	e7b6      	b.n	8007e72 <_malloc_r+0x4a>
 8007f04:	461a      	mov	r2, r3
 8007f06:	685b      	ldr	r3, [r3, #4]
 8007f08:	42a3      	cmp	r3, r4
 8007f0a:	d1fb      	bne.n	8007f04 <_malloc_r+0xdc>
 8007f0c:	2300      	movs	r3, #0
 8007f0e:	6053      	str	r3, [r2, #4]
 8007f10:	e7de      	b.n	8007ed0 <_malloc_r+0xa8>
 8007f12:	230c      	movs	r3, #12
 8007f14:	6033      	str	r3, [r6, #0]
 8007f16:	4630      	mov	r0, r6
 8007f18:	f000 f80c 	bl	8007f34 <__malloc_unlock>
 8007f1c:	e794      	b.n	8007e48 <_malloc_r+0x20>
 8007f1e:	6005      	str	r5, [r0, #0]
 8007f20:	e7d6      	b.n	8007ed0 <_malloc_r+0xa8>
 8007f22:	bf00      	nop
 8007f24:	2000074c 	.word	0x2000074c

08007f28 <__malloc_lock>:
 8007f28:	4801      	ldr	r0, [pc, #4]	@ (8007f30 <__malloc_lock+0x8>)
 8007f2a:	f7ff b8b8 	b.w	800709e <__retarget_lock_acquire_recursive>
 8007f2e:	bf00      	nop
 8007f30:	20000744 	.word	0x20000744

08007f34 <__malloc_unlock>:
 8007f34:	4801      	ldr	r0, [pc, #4]	@ (8007f3c <__malloc_unlock+0x8>)
 8007f36:	f7ff b8b3 	b.w	80070a0 <__retarget_lock_release_recursive>
 8007f3a:	bf00      	nop
 8007f3c:	20000744 	.word	0x20000744

08007f40 <_Balloc>:
 8007f40:	b570      	push	{r4, r5, r6, lr}
 8007f42:	69c6      	ldr	r6, [r0, #28]
 8007f44:	4604      	mov	r4, r0
 8007f46:	460d      	mov	r5, r1
 8007f48:	b976      	cbnz	r6, 8007f68 <_Balloc+0x28>
 8007f4a:	2010      	movs	r0, #16
 8007f4c:	f7ff ff42 	bl	8007dd4 <malloc>
 8007f50:	4602      	mov	r2, r0
 8007f52:	61e0      	str	r0, [r4, #28]
 8007f54:	b920      	cbnz	r0, 8007f60 <_Balloc+0x20>
 8007f56:	4b18      	ldr	r3, [pc, #96]	@ (8007fb8 <_Balloc+0x78>)
 8007f58:	4818      	ldr	r0, [pc, #96]	@ (8007fbc <_Balloc+0x7c>)
 8007f5a:	216b      	movs	r1, #107	@ 0x6b
 8007f5c:	f000 fdae 	bl	8008abc <__assert_func>
 8007f60:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8007f64:	6006      	str	r6, [r0, #0]
 8007f66:	60c6      	str	r6, [r0, #12]
 8007f68:	69e6      	ldr	r6, [r4, #28]
 8007f6a:	68f3      	ldr	r3, [r6, #12]
 8007f6c:	b183      	cbz	r3, 8007f90 <_Balloc+0x50>
 8007f6e:	69e3      	ldr	r3, [r4, #28]
 8007f70:	68db      	ldr	r3, [r3, #12]
 8007f72:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 8007f76:	b9b8      	cbnz	r0, 8007fa8 <_Balloc+0x68>
 8007f78:	2101      	movs	r1, #1
 8007f7a:	fa01 f605 	lsl.w	r6, r1, r5
 8007f7e:	1d72      	adds	r2, r6, #5
 8007f80:	0092      	lsls	r2, r2, #2
 8007f82:	4620      	mov	r0, r4
 8007f84:	f000 fdb8 	bl	8008af8 <_calloc_r>
 8007f88:	b160      	cbz	r0, 8007fa4 <_Balloc+0x64>
 8007f8a:	e9c0 5601 	strd	r5, r6, [r0, #4]
 8007f8e:	e00e      	b.n	8007fae <_Balloc+0x6e>
 8007f90:	2221      	movs	r2, #33	@ 0x21
 8007f92:	2104      	movs	r1, #4
 8007f94:	4620      	mov	r0, r4
 8007f96:	f000 fdaf 	bl	8008af8 <_calloc_r>
 8007f9a:	69e3      	ldr	r3, [r4, #28]
 8007f9c:	60f0      	str	r0, [r6, #12]
 8007f9e:	68db      	ldr	r3, [r3, #12]
 8007fa0:	2b00      	cmp	r3, #0
 8007fa2:	d1e4      	bne.n	8007f6e <_Balloc+0x2e>
 8007fa4:	2000      	movs	r0, #0
 8007fa6:	bd70      	pop	{r4, r5, r6, pc}
 8007fa8:	6802      	ldr	r2, [r0, #0]
 8007faa:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 8007fae:	2300      	movs	r3, #0
 8007fb0:	e9c0 3303 	strd	r3, r3, [r0, #12]
 8007fb4:	e7f7      	b.n	8007fa6 <_Balloc+0x66>
 8007fb6:	bf00      	nop
 8007fb8:	0800a379 	.word	0x0800a379
 8007fbc:	0800a3f9 	.word	0x0800a3f9

08007fc0 <_Bfree>:
 8007fc0:	b570      	push	{r4, r5, r6, lr}
 8007fc2:	69c6      	ldr	r6, [r0, #28]
 8007fc4:	4605      	mov	r5, r0
 8007fc6:	460c      	mov	r4, r1
 8007fc8:	b976      	cbnz	r6, 8007fe8 <_Bfree+0x28>
 8007fca:	2010      	movs	r0, #16
 8007fcc:	f7ff ff02 	bl	8007dd4 <malloc>
 8007fd0:	4602      	mov	r2, r0
 8007fd2:	61e8      	str	r0, [r5, #28]
 8007fd4:	b920      	cbnz	r0, 8007fe0 <_Bfree+0x20>
 8007fd6:	4b09      	ldr	r3, [pc, #36]	@ (8007ffc <_Bfree+0x3c>)
 8007fd8:	4809      	ldr	r0, [pc, #36]	@ (8008000 <_Bfree+0x40>)
 8007fda:	218f      	movs	r1, #143	@ 0x8f
 8007fdc:	f000 fd6e 	bl	8008abc <__assert_func>
 8007fe0:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8007fe4:	6006      	str	r6, [r0, #0]
 8007fe6:	60c6      	str	r6, [r0, #12]
 8007fe8:	b13c      	cbz	r4, 8007ffa <_Bfree+0x3a>
 8007fea:	69eb      	ldr	r3, [r5, #28]
 8007fec:	6862      	ldr	r2, [r4, #4]
 8007fee:	68db      	ldr	r3, [r3, #12]
 8007ff0:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8007ff4:	6021      	str	r1, [r4, #0]
 8007ff6:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 8007ffa:	bd70      	pop	{r4, r5, r6, pc}
 8007ffc:	0800a379 	.word	0x0800a379
 8008000:	0800a3f9 	.word	0x0800a3f9

08008004 <__multadd>:
 8008004:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8008008:	690d      	ldr	r5, [r1, #16]
 800800a:	4607      	mov	r7, r0
 800800c:	460c      	mov	r4, r1
 800800e:	461e      	mov	r6, r3
 8008010:	f101 0c14 	add.w	ip, r1, #20
 8008014:	2000      	movs	r0, #0
 8008016:	f8dc 3000 	ldr.w	r3, [ip]
 800801a:	b299      	uxth	r1, r3
 800801c:	fb02 6101 	mla	r1, r2, r1, r6
 8008020:	0c1e      	lsrs	r6, r3, #16
 8008022:	0c0b      	lsrs	r3, r1, #16
 8008024:	fb02 3306 	mla	r3, r2, r6, r3
 8008028:	b289      	uxth	r1, r1
 800802a:	3001      	adds	r0, #1
 800802c:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 8008030:	4285      	cmp	r5, r0
 8008032:	f84c 1b04 	str.w	r1, [ip], #4
 8008036:	ea4f 4613 	mov.w	r6, r3, lsr #16
 800803a:	dcec      	bgt.n	8008016 <__multadd+0x12>
 800803c:	b30e      	cbz	r6, 8008082 <__multadd+0x7e>
 800803e:	68a3      	ldr	r3, [r4, #8]
 8008040:	42ab      	cmp	r3, r5
 8008042:	dc19      	bgt.n	8008078 <__multadd+0x74>
 8008044:	6861      	ldr	r1, [r4, #4]
 8008046:	4638      	mov	r0, r7
 8008048:	3101      	adds	r1, #1
 800804a:	f7ff ff79 	bl	8007f40 <_Balloc>
 800804e:	4680      	mov	r8, r0
 8008050:	b928      	cbnz	r0, 800805e <__multadd+0x5a>
 8008052:	4602      	mov	r2, r0
 8008054:	4b0c      	ldr	r3, [pc, #48]	@ (8008088 <__multadd+0x84>)
 8008056:	480d      	ldr	r0, [pc, #52]	@ (800808c <__multadd+0x88>)
 8008058:	21ba      	movs	r1, #186	@ 0xba
 800805a:	f000 fd2f 	bl	8008abc <__assert_func>
 800805e:	6922      	ldr	r2, [r4, #16]
 8008060:	3202      	adds	r2, #2
 8008062:	f104 010c 	add.w	r1, r4, #12
 8008066:	0092      	lsls	r2, r2, #2
 8008068:	300c      	adds	r0, #12
 800806a:	f000 fd19 	bl	8008aa0 <memcpy>
 800806e:	4621      	mov	r1, r4
 8008070:	4638      	mov	r0, r7
 8008072:	f7ff ffa5 	bl	8007fc0 <_Bfree>
 8008076:	4644      	mov	r4, r8
 8008078:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 800807c:	3501      	adds	r5, #1
 800807e:	615e      	str	r6, [r3, #20]
 8008080:	6125      	str	r5, [r4, #16]
 8008082:	4620      	mov	r0, r4
 8008084:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8008088:	0800a3e8 	.word	0x0800a3e8
 800808c:	0800a3f9 	.word	0x0800a3f9

08008090 <__hi0bits>:
 8008090:	f5b0 3f80 	cmp.w	r0, #65536	@ 0x10000
 8008094:	4603      	mov	r3, r0
 8008096:	bf36      	itet	cc
 8008098:	0403      	lslcc	r3, r0, #16
 800809a:	2000      	movcs	r0, #0
 800809c:	2010      	movcc	r0, #16
 800809e:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 80080a2:	bf3c      	itt	cc
 80080a4:	021b      	lslcc	r3, r3, #8
 80080a6:	3008      	addcc	r0, #8
 80080a8:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 80080ac:	bf3c      	itt	cc
 80080ae:	011b      	lslcc	r3, r3, #4
 80080b0:	3004      	addcc	r0, #4
 80080b2:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80080b6:	bf3c      	itt	cc
 80080b8:	009b      	lslcc	r3, r3, #2
 80080ba:	3002      	addcc	r0, #2
 80080bc:	2b00      	cmp	r3, #0
 80080be:	db05      	blt.n	80080cc <__hi0bits+0x3c>
 80080c0:	f013 4f80 	tst.w	r3, #1073741824	@ 0x40000000
 80080c4:	f100 0001 	add.w	r0, r0, #1
 80080c8:	bf08      	it	eq
 80080ca:	2020      	moveq	r0, #32
 80080cc:	4770      	bx	lr

080080ce <__lo0bits>:
 80080ce:	6803      	ldr	r3, [r0, #0]
 80080d0:	4602      	mov	r2, r0
 80080d2:	f013 0007 	ands.w	r0, r3, #7
 80080d6:	d00b      	beq.n	80080f0 <__lo0bits+0x22>
 80080d8:	07d9      	lsls	r1, r3, #31
 80080da:	d421      	bmi.n	8008120 <__lo0bits+0x52>
 80080dc:	0798      	lsls	r0, r3, #30
 80080de:	bf49      	itett	mi
 80080e0:	085b      	lsrmi	r3, r3, #1
 80080e2:	089b      	lsrpl	r3, r3, #2
 80080e4:	2001      	movmi	r0, #1
 80080e6:	6013      	strmi	r3, [r2, #0]
 80080e8:	bf5c      	itt	pl
 80080ea:	6013      	strpl	r3, [r2, #0]
 80080ec:	2002      	movpl	r0, #2
 80080ee:	4770      	bx	lr
 80080f0:	b299      	uxth	r1, r3
 80080f2:	b909      	cbnz	r1, 80080f8 <__lo0bits+0x2a>
 80080f4:	0c1b      	lsrs	r3, r3, #16
 80080f6:	2010      	movs	r0, #16
 80080f8:	b2d9      	uxtb	r1, r3
 80080fa:	b909      	cbnz	r1, 8008100 <__lo0bits+0x32>
 80080fc:	3008      	adds	r0, #8
 80080fe:	0a1b      	lsrs	r3, r3, #8
 8008100:	0719      	lsls	r1, r3, #28
 8008102:	bf04      	itt	eq
 8008104:	091b      	lsreq	r3, r3, #4
 8008106:	3004      	addeq	r0, #4
 8008108:	0799      	lsls	r1, r3, #30
 800810a:	bf04      	itt	eq
 800810c:	089b      	lsreq	r3, r3, #2
 800810e:	3002      	addeq	r0, #2
 8008110:	07d9      	lsls	r1, r3, #31
 8008112:	d403      	bmi.n	800811c <__lo0bits+0x4e>
 8008114:	085b      	lsrs	r3, r3, #1
 8008116:	f100 0001 	add.w	r0, r0, #1
 800811a:	d003      	beq.n	8008124 <__lo0bits+0x56>
 800811c:	6013      	str	r3, [r2, #0]
 800811e:	4770      	bx	lr
 8008120:	2000      	movs	r0, #0
 8008122:	4770      	bx	lr
 8008124:	2020      	movs	r0, #32
 8008126:	4770      	bx	lr

08008128 <__i2b>:
 8008128:	b510      	push	{r4, lr}
 800812a:	460c      	mov	r4, r1
 800812c:	2101      	movs	r1, #1
 800812e:	f7ff ff07 	bl	8007f40 <_Balloc>
 8008132:	4602      	mov	r2, r0
 8008134:	b928      	cbnz	r0, 8008142 <__i2b+0x1a>
 8008136:	4b05      	ldr	r3, [pc, #20]	@ (800814c <__i2b+0x24>)
 8008138:	4805      	ldr	r0, [pc, #20]	@ (8008150 <__i2b+0x28>)
 800813a:	f240 1145 	movw	r1, #325	@ 0x145
 800813e:	f000 fcbd 	bl	8008abc <__assert_func>
 8008142:	2301      	movs	r3, #1
 8008144:	6144      	str	r4, [r0, #20]
 8008146:	6103      	str	r3, [r0, #16]
 8008148:	bd10      	pop	{r4, pc}
 800814a:	bf00      	nop
 800814c:	0800a3e8 	.word	0x0800a3e8
 8008150:	0800a3f9 	.word	0x0800a3f9

08008154 <__multiply>:
 8008154:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008158:	4614      	mov	r4, r2
 800815a:	690a      	ldr	r2, [r1, #16]
 800815c:	6923      	ldr	r3, [r4, #16]
 800815e:	429a      	cmp	r2, r3
 8008160:	bfa8      	it	ge
 8008162:	4623      	movge	r3, r4
 8008164:	460f      	mov	r7, r1
 8008166:	bfa4      	itt	ge
 8008168:	460c      	movge	r4, r1
 800816a:	461f      	movge	r7, r3
 800816c:	f8d4 a010 	ldr.w	sl, [r4, #16]
 8008170:	f8d7 9010 	ldr.w	r9, [r7, #16]
 8008174:	68a3      	ldr	r3, [r4, #8]
 8008176:	6861      	ldr	r1, [r4, #4]
 8008178:	eb0a 0609 	add.w	r6, sl, r9
 800817c:	42b3      	cmp	r3, r6
 800817e:	b085      	sub	sp, #20
 8008180:	bfb8      	it	lt
 8008182:	3101      	addlt	r1, #1
 8008184:	f7ff fedc 	bl	8007f40 <_Balloc>
 8008188:	b930      	cbnz	r0, 8008198 <__multiply+0x44>
 800818a:	4602      	mov	r2, r0
 800818c:	4b44      	ldr	r3, [pc, #272]	@ (80082a0 <__multiply+0x14c>)
 800818e:	4845      	ldr	r0, [pc, #276]	@ (80082a4 <__multiply+0x150>)
 8008190:	f44f 71b1 	mov.w	r1, #354	@ 0x162
 8008194:	f000 fc92 	bl	8008abc <__assert_func>
 8008198:	f100 0514 	add.w	r5, r0, #20
 800819c:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 80081a0:	462b      	mov	r3, r5
 80081a2:	2200      	movs	r2, #0
 80081a4:	4543      	cmp	r3, r8
 80081a6:	d321      	bcc.n	80081ec <__multiply+0x98>
 80081a8:	f107 0114 	add.w	r1, r7, #20
 80081ac:	f104 0214 	add.w	r2, r4, #20
 80081b0:	eb02 028a 	add.w	r2, r2, sl, lsl #2
 80081b4:	eb01 0389 	add.w	r3, r1, r9, lsl #2
 80081b8:	9302      	str	r3, [sp, #8]
 80081ba:	1b13      	subs	r3, r2, r4
 80081bc:	3b15      	subs	r3, #21
 80081be:	f023 0303 	bic.w	r3, r3, #3
 80081c2:	3304      	adds	r3, #4
 80081c4:	f104 0715 	add.w	r7, r4, #21
 80081c8:	42ba      	cmp	r2, r7
 80081ca:	bf38      	it	cc
 80081cc:	2304      	movcc	r3, #4
 80081ce:	9301      	str	r3, [sp, #4]
 80081d0:	9b02      	ldr	r3, [sp, #8]
 80081d2:	9103      	str	r1, [sp, #12]
 80081d4:	428b      	cmp	r3, r1
 80081d6:	d80c      	bhi.n	80081f2 <__multiply+0x9e>
 80081d8:	2e00      	cmp	r6, #0
 80081da:	dd03      	ble.n	80081e4 <__multiply+0x90>
 80081dc:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 80081e0:	2b00      	cmp	r3, #0
 80081e2:	d05b      	beq.n	800829c <__multiply+0x148>
 80081e4:	6106      	str	r6, [r0, #16]
 80081e6:	b005      	add	sp, #20
 80081e8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80081ec:	f843 2b04 	str.w	r2, [r3], #4
 80081f0:	e7d8      	b.n	80081a4 <__multiply+0x50>
 80081f2:	f8b1 a000 	ldrh.w	sl, [r1]
 80081f6:	f1ba 0f00 	cmp.w	sl, #0
 80081fa:	d024      	beq.n	8008246 <__multiply+0xf2>
 80081fc:	f104 0e14 	add.w	lr, r4, #20
 8008200:	46a9      	mov	r9, r5
 8008202:	f04f 0c00 	mov.w	ip, #0
 8008206:	f85e 7b04 	ldr.w	r7, [lr], #4
 800820a:	f8d9 3000 	ldr.w	r3, [r9]
 800820e:	fa1f fb87 	uxth.w	fp, r7
 8008212:	b29b      	uxth	r3, r3
 8008214:	fb0a 330b 	mla	r3, sl, fp, r3
 8008218:	ea4f 4b17 	mov.w	fp, r7, lsr #16
 800821c:	f8d9 7000 	ldr.w	r7, [r9]
 8008220:	4463      	add	r3, ip
 8008222:	ea4f 4c17 	mov.w	ip, r7, lsr #16
 8008226:	fb0a c70b 	mla	r7, sl, fp, ip
 800822a:	eb07 4713 	add.w	r7, r7, r3, lsr #16
 800822e:	b29b      	uxth	r3, r3
 8008230:	ea43 4307 	orr.w	r3, r3, r7, lsl #16
 8008234:	4572      	cmp	r2, lr
 8008236:	f849 3b04 	str.w	r3, [r9], #4
 800823a:	ea4f 4c17 	mov.w	ip, r7, lsr #16
 800823e:	d8e2      	bhi.n	8008206 <__multiply+0xb2>
 8008240:	9b01      	ldr	r3, [sp, #4]
 8008242:	f845 c003 	str.w	ip, [r5, r3]
 8008246:	9b03      	ldr	r3, [sp, #12]
 8008248:	f8b3 9002 	ldrh.w	r9, [r3, #2]
 800824c:	3104      	adds	r1, #4
 800824e:	f1b9 0f00 	cmp.w	r9, #0
 8008252:	d021      	beq.n	8008298 <__multiply+0x144>
 8008254:	682b      	ldr	r3, [r5, #0]
 8008256:	f104 0c14 	add.w	ip, r4, #20
 800825a:	46ae      	mov	lr, r5
 800825c:	f04f 0a00 	mov.w	sl, #0
 8008260:	f8bc b000 	ldrh.w	fp, [ip]
 8008264:	f8be 7002 	ldrh.w	r7, [lr, #2]
 8008268:	fb09 770b 	mla	r7, r9, fp, r7
 800826c:	4457      	add	r7, sl
 800826e:	b29b      	uxth	r3, r3
 8008270:	ea43 4307 	orr.w	r3, r3, r7, lsl #16
 8008274:	f84e 3b04 	str.w	r3, [lr], #4
 8008278:	f85c 3b04 	ldr.w	r3, [ip], #4
 800827c:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 8008280:	f8be 3000 	ldrh.w	r3, [lr]
 8008284:	fb09 330a 	mla	r3, r9, sl, r3
 8008288:	eb03 4317 	add.w	r3, r3, r7, lsr #16
 800828c:	4562      	cmp	r2, ip
 800828e:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 8008292:	d8e5      	bhi.n	8008260 <__multiply+0x10c>
 8008294:	9f01      	ldr	r7, [sp, #4]
 8008296:	51eb      	str	r3, [r5, r7]
 8008298:	3504      	adds	r5, #4
 800829a:	e799      	b.n	80081d0 <__multiply+0x7c>
 800829c:	3e01      	subs	r6, #1
 800829e:	e79b      	b.n	80081d8 <__multiply+0x84>
 80082a0:	0800a3e8 	.word	0x0800a3e8
 80082a4:	0800a3f9 	.word	0x0800a3f9

080082a8 <__pow5mult>:
 80082a8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80082ac:	4615      	mov	r5, r2
 80082ae:	f012 0203 	ands.w	r2, r2, #3
 80082b2:	4607      	mov	r7, r0
 80082b4:	460e      	mov	r6, r1
 80082b6:	d007      	beq.n	80082c8 <__pow5mult+0x20>
 80082b8:	4c25      	ldr	r4, [pc, #148]	@ (8008350 <__pow5mult+0xa8>)
 80082ba:	3a01      	subs	r2, #1
 80082bc:	2300      	movs	r3, #0
 80082be:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 80082c2:	f7ff fe9f 	bl	8008004 <__multadd>
 80082c6:	4606      	mov	r6, r0
 80082c8:	10ad      	asrs	r5, r5, #2
 80082ca:	d03d      	beq.n	8008348 <__pow5mult+0xa0>
 80082cc:	69fc      	ldr	r4, [r7, #28]
 80082ce:	b97c      	cbnz	r4, 80082f0 <__pow5mult+0x48>
 80082d0:	2010      	movs	r0, #16
 80082d2:	f7ff fd7f 	bl	8007dd4 <malloc>
 80082d6:	4602      	mov	r2, r0
 80082d8:	61f8      	str	r0, [r7, #28]
 80082da:	b928      	cbnz	r0, 80082e8 <__pow5mult+0x40>
 80082dc:	4b1d      	ldr	r3, [pc, #116]	@ (8008354 <__pow5mult+0xac>)
 80082de:	481e      	ldr	r0, [pc, #120]	@ (8008358 <__pow5mult+0xb0>)
 80082e0:	f240 11b3 	movw	r1, #435	@ 0x1b3
 80082e4:	f000 fbea 	bl	8008abc <__assert_func>
 80082e8:	e9c0 4401 	strd	r4, r4, [r0, #4]
 80082ec:	6004      	str	r4, [r0, #0]
 80082ee:	60c4      	str	r4, [r0, #12]
 80082f0:	f8d7 801c 	ldr.w	r8, [r7, #28]
 80082f4:	f8d8 4008 	ldr.w	r4, [r8, #8]
 80082f8:	b94c      	cbnz	r4, 800830e <__pow5mult+0x66>
 80082fa:	f240 2171 	movw	r1, #625	@ 0x271
 80082fe:	4638      	mov	r0, r7
 8008300:	f7ff ff12 	bl	8008128 <__i2b>
 8008304:	2300      	movs	r3, #0
 8008306:	f8c8 0008 	str.w	r0, [r8, #8]
 800830a:	4604      	mov	r4, r0
 800830c:	6003      	str	r3, [r0, #0]
 800830e:	f04f 0900 	mov.w	r9, #0
 8008312:	07eb      	lsls	r3, r5, #31
 8008314:	d50a      	bpl.n	800832c <__pow5mult+0x84>
 8008316:	4631      	mov	r1, r6
 8008318:	4622      	mov	r2, r4
 800831a:	4638      	mov	r0, r7
 800831c:	f7ff ff1a 	bl	8008154 <__multiply>
 8008320:	4631      	mov	r1, r6
 8008322:	4680      	mov	r8, r0
 8008324:	4638      	mov	r0, r7
 8008326:	f7ff fe4b 	bl	8007fc0 <_Bfree>
 800832a:	4646      	mov	r6, r8
 800832c:	106d      	asrs	r5, r5, #1
 800832e:	d00b      	beq.n	8008348 <__pow5mult+0xa0>
 8008330:	6820      	ldr	r0, [r4, #0]
 8008332:	b938      	cbnz	r0, 8008344 <__pow5mult+0x9c>
 8008334:	4622      	mov	r2, r4
 8008336:	4621      	mov	r1, r4
 8008338:	4638      	mov	r0, r7
 800833a:	f7ff ff0b 	bl	8008154 <__multiply>
 800833e:	6020      	str	r0, [r4, #0]
 8008340:	f8c0 9000 	str.w	r9, [r0]
 8008344:	4604      	mov	r4, r0
 8008346:	e7e4      	b.n	8008312 <__pow5mult+0x6a>
 8008348:	4630      	mov	r0, r6
 800834a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800834e:	bf00      	nop
 8008350:	0800a454 	.word	0x0800a454
 8008354:	0800a379 	.word	0x0800a379
 8008358:	0800a3f9 	.word	0x0800a3f9

0800835c <__lshift>:
 800835c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8008360:	460c      	mov	r4, r1
 8008362:	6849      	ldr	r1, [r1, #4]
 8008364:	6923      	ldr	r3, [r4, #16]
 8008366:	eb03 1862 	add.w	r8, r3, r2, asr #5
 800836a:	68a3      	ldr	r3, [r4, #8]
 800836c:	4607      	mov	r7, r0
 800836e:	4691      	mov	r9, r2
 8008370:	ea4f 1a62 	mov.w	sl, r2, asr #5
 8008374:	f108 0601 	add.w	r6, r8, #1
 8008378:	42b3      	cmp	r3, r6
 800837a:	db0b      	blt.n	8008394 <__lshift+0x38>
 800837c:	4638      	mov	r0, r7
 800837e:	f7ff fddf 	bl	8007f40 <_Balloc>
 8008382:	4605      	mov	r5, r0
 8008384:	b948      	cbnz	r0, 800839a <__lshift+0x3e>
 8008386:	4602      	mov	r2, r0
 8008388:	4b28      	ldr	r3, [pc, #160]	@ (800842c <__lshift+0xd0>)
 800838a:	4829      	ldr	r0, [pc, #164]	@ (8008430 <__lshift+0xd4>)
 800838c:	f44f 71ef 	mov.w	r1, #478	@ 0x1de
 8008390:	f000 fb94 	bl	8008abc <__assert_func>
 8008394:	3101      	adds	r1, #1
 8008396:	005b      	lsls	r3, r3, #1
 8008398:	e7ee      	b.n	8008378 <__lshift+0x1c>
 800839a:	2300      	movs	r3, #0
 800839c:	f100 0114 	add.w	r1, r0, #20
 80083a0:	f100 0210 	add.w	r2, r0, #16
 80083a4:	4618      	mov	r0, r3
 80083a6:	4553      	cmp	r3, sl
 80083a8:	db33      	blt.n	8008412 <__lshift+0xb6>
 80083aa:	6920      	ldr	r0, [r4, #16]
 80083ac:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 80083b0:	f104 0314 	add.w	r3, r4, #20
 80083b4:	f019 091f 	ands.w	r9, r9, #31
 80083b8:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 80083bc:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 80083c0:	d02b      	beq.n	800841a <__lshift+0xbe>
 80083c2:	f1c9 0e20 	rsb	lr, r9, #32
 80083c6:	468a      	mov	sl, r1
 80083c8:	2200      	movs	r2, #0
 80083ca:	6818      	ldr	r0, [r3, #0]
 80083cc:	fa00 f009 	lsl.w	r0, r0, r9
 80083d0:	4310      	orrs	r0, r2
 80083d2:	f84a 0b04 	str.w	r0, [sl], #4
 80083d6:	f853 2b04 	ldr.w	r2, [r3], #4
 80083da:	459c      	cmp	ip, r3
 80083dc:	fa22 f20e 	lsr.w	r2, r2, lr
 80083e0:	d8f3      	bhi.n	80083ca <__lshift+0x6e>
 80083e2:	ebac 0304 	sub.w	r3, ip, r4
 80083e6:	3b15      	subs	r3, #21
 80083e8:	f023 0303 	bic.w	r3, r3, #3
 80083ec:	3304      	adds	r3, #4
 80083ee:	f104 0015 	add.w	r0, r4, #21
 80083f2:	4584      	cmp	ip, r0
 80083f4:	bf38      	it	cc
 80083f6:	2304      	movcc	r3, #4
 80083f8:	50ca      	str	r2, [r1, r3]
 80083fa:	b10a      	cbz	r2, 8008400 <__lshift+0xa4>
 80083fc:	f108 0602 	add.w	r6, r8, #2
 8008400:	3e01      	subs	r6, #1
 8008402:	4638      	mov	r0, r7
 8008404:	612e      	str	r6, [r5, #16]
 8008406:	4621      	mov	r1, r4
 8008408:	f7ff fdda 	bl	8007fc0 <_Bfree>
 800840c:	4628      	mov	r0, r5
 800840e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008412:	f842 0f04 	str.w	r0, [r2, #4]!
 8008416:	3301      	adds	r3, #1
 8008418:	e7c5      	b.n	80083a6 <__lshift+0x4a>
 800841a:	3904      	subs	r1, #4
 800841c:	f853 2b04 	ldr.w	r2, [r3], #4
 8008420:	f841 2f04 	str.w	r2, [r1, #4]!
 8008424:	459c      	cmp	ip, r3
 8008426:	d8f9      	bhi.n	800841c <__lshift+0xc0>
 8008428:	e7ea      	b.n	8008400 <__lshift+0xa4>
 800842a:	bf00      	nop
 800842c:	0800a3e8 	.word	0x0800a3e8
 8008430:	0800a3f9 	.word	0x0800a3f9

08008434 <__mcmp>:
 8008434:	690a      	ldr	r2, [r1, #16]
 8008436:	4603      	mov	r3, r0
 8008438:	6900      	ldr	r0, [r0, #16]
 800843a:	1a80      	subs	r0, r0, r2
 800843c:	b530      	push	{r4, r5, lr}
 800843e:	d10e      	bne.n	800845e <__mcmp+0x2a>
 8008440:	3314      	adds	r3, #20
 8008442:	3114      	adds	r1, #20
 8008444:	eb03 0482 	add.w	r4, r3, r2, lsl #2
 8008448:	eb01 0182 	add.w	r1, r1, r2, lsl #2
 800844c:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 8008450:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 8008454:	4295      	cmp	r5, r2
 8008456:	d003      	beq.n	8008460 <__mcmp+0x2c>
 8008458:	d205      	bcs.n	8008466 <__mcmp+0x32>
 800845a:	f04f 30ff 	mov.w	r0, #4294967295
 800845e:	bd30      	pop	{r4, r5, pc}
 8008460:	42a3      	cmp	r3, r4
 8008462:	d3f3      	bcc.n	800844c <__mcmp+0x18>
 8008464:	e7fb      	b.n	800845e <__mcmp+0x2a>
 8008466:	2001      	movs	r0, #1
 8008468:	e7f9      	b.n	800845e <__mcmp+0x2a>
	...

0800846c <__mdiff>:
 800846c:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008470:	4689      	mov	r9, r1
 8008472:	4606      	mov	r6, r0
 8008474:	4611      	mov	r1, r2
 8008476:	4648      	mov	r0, r9
 8008478:	4614      	mov	r4, r2
 800847a:	f7ff ffdb 	bl	8008434 <__mcmp>
 800847e:	1e05      	subs	r5, r0, #0
 8008480:	d112      	bne.n	80084a8 <__mdiff+0x3c>
 8008482:	4629      	mov	r1, r5
 8008484:	4630      	mov	r0, r6
 8008486:	f7ff fd5b 	bl	8007f40 <_Balloc>
 800848a:	4602      	mov	r2, r0
 800848c:	b928      	cbnz	r0, 800849a <__mdiff+0x2e>
 800848e:	4b3f      	ldr	r3, [pc, #252]	@ (800858c <__mdiff+0x120>)
 8008490:	f240 2137 	movw	r1, #567	@ 0x237
 8008494:	483e      	ldr	r0, [pc, #248]	@ (8008590 <__mdiff+0x124>)
 8008496:	f000 fb11 	bl	8008abc <__assert_func>
 800849a:	2301      	movs	r3, #1
 800849c:	e9c0 3504 	strd	r3, r5, [r0, #16]
 80084a0:	4610      	mov	r0, r2
 80084a2:	b003      	add	sp, #12
 80084a4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80084a8:	bfbc      	itt	lt
 80084aa:	464b      	movlt	r3, r9
 80084ac:	46a1      	movlt	r9, r4
 80084ae:	4630      	mov	r0, r6
 80084b0:	f8d9 1004 	ldr.w	r1, [r9, #4]
 80084b4:	bfba      	itte	lt
 80084b6:	461c      	movlt	r4, r3
 80084b8:	2501      	movlt	r5, #1
 80084ba:	2500      	movge	r5, #0
 80084bc:	f7ff fd40 	bl	8007f40 <_Balloc>
 80084c0:	4602      	mov	r2, r0
 80084c2:	b918      	cbnz	r0, 80084cc <__mdiff+0x60>
 80084c4:	4b31      	ldr	r3, [pc, #196]	@ (800858c <__mdiff+0x120>)
 80084c6:	f240 2145 	movw	r1, #581	@ 0x245
 80084ca:	e7e3      	b.n	8008494 <__mdiff+0x28>
 80084cc:	f8d9 7010 	ldr.w	r7, [r9, #16]
 80084d0:	6926      	ldr	r6, [r4, #16]
 80084d2:	60c5      	str	r5, [r0, #12]
 80084d4:	f109 0310 	add.w	r3, r9, #16
 80084d8:	f109 0514 	add.w	r5, r9, #20
 80084dc:	f104 0e14 	add.w	lr, r4, #20
 80084e0:	f100 0b14 	add.w	fp, r0, #20
 80084e4:	eb05 0887 	add.w	r8, r5, r7, lsl #2
 80084e8:	eb0e 0686 	add.w	r6, lr, r6, lsl #2
 80084ec:	9301      	str	r3, [sp, #4]
 80084ee:	46d9      	mov	r9, fp
 80084f0:	f04f 0c00 	mov.w	ip, #0
 80084f4:	9b01      	ldr	r3, [sp, #4]
 80084f6:	f85e 0b04 	ldr.w	r0, [lr], #4
 80084fa:	f853 af04 	ldr.w	sl, [r3, #4]!
 80084fe:	9301      	str	r3, [sp, #4]
 8008500:	fa1f f38a 	uxth.w	r3, sl
 8008504:	4619      	mov	r1, r3
 8008506:	b283      	uxth	r3, r0
 8008508:	1acb      	subs	r3, r1, r3
 800850a:	0c00      	lsrs	r0, r0, #16
 800850c:	4463      	add	r3, ip
 800850e:	ebc0 401a 	rsb	r0, r0, sl, lsr #16
 8008512:	eb00 4023 	add.w	r0, r0, r3, asr #16
 8008516:	b29b      	uxth	r3, r3
 8008518:	ea43 4300 	orr.w	r3, r3, r0, lsl #16
 800851c:	4576      	cmp	r6, lr
 800851e:	f849 3b04 	str.w	r3, [r9], #4
 8008522:	ea4f 4c20 	mov.w	ip, r0, asr #16
 8008526:	d8e5      	bhi.n	80084f4 <__mdiff+0x88>
 8008528:	1b33      	subs	r3, r6, r4
 800852a:	3b15      	subs	r3, #21
 800852c:	f023 0303 	bic.w	r3, r3, #3
 8008530:	3415      	adds	r4, #21
 8008532:	3304      	adds	r3, #4
 8008534:	42a6      	cmp	r6, r4
 8008536:	bf38      	it	cc
 8008538:	2304      	movcc	r3, #4
 800853a:	441d      	add	r5, r3
 800853c:	445b      	add	r3, fp
 800853e:	461e      	mov	r6, r3
 8008540:	462c      	mov	r4, r5
 8008542:	4544      	cmp	r4, r8
 8008544:	d30e      	bcc.n	8008564 <__mdiff+0xf8>
 8008546:	f108 0103 	add.w	r1, r8, #3
 800854a:	1b49      	subs	r1, r1, r5
 800854c:	f021 0103 	bic.w	r1, r1, #3
 8008550:	3d03      	subs	r5, #3
 8008552:	45a8      	cmp	r8, r5
 8008554:	bf38      	it	cc
 8008556:	2100      	movcc	r1, #0
 8008558:	440b      	add	r3, r1
 800855a:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 800855e:	b191      	cbz	r1, 8008586 <__mdiff+0x11a>
 8008560:	6117      	str	r7, [r2, #16]
 8008562:	e79d      	b.n	80084a0 <__mdiff+0x34>
 8008564:	f854 1b04 	ldr.w	r1, [r4], #4
 8008568:	46e6      	mov	lr, ip
 800856a:	0c08      	lsrs	r0, r1, #16
 800856c:	fa1c fc81 	uxtah	ip, ip, r1
 8008570:	4471      	add	r1, lr
 8008572:	eb00 402c 	add.w	r0, r0, ip, asr #16
 8008576:	b289      	uxth	r1, r1
 8008578:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 800857c:	f846 1b04 	str.w	r1, [r6], #4
 8008580:	ea4f 4c20 	mov.w	ip, r0, asr #16
 8008584:	e7dd      	b.n	8008542 <__mdiff+0xd6>
 8008586:	3f01      	subs	r7, #1
 8008588:	e7e7      	b.n	800855a <__mdiff+0xee>
 800858a:	bf00      	nop
 800858c:	0800a3e8 	.word	0x0800a3e8
 8008590:	0800a3f9 	.word	0x0800a3f9

08008594 <__d2b>:
 8008594:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 8008598:	460f      	mov	r7, r1
 800859a:	2101      	movs	r1, #1
 800859c:	ec59 8b10 	vmov	r8, r9, d0
 80085a0:	4616      	mov	r6, r2
 80085a2:	f7ff fccd 	bl	8007f40 <_Balloc>
 80085a6:	4604      	mov	r4, r0
 80085a8:	b930      	cbnz	r0, 80085b8 <__d2b+0x24>
 80085aa:	4602      	mov	r2, r0
 80085ac:	4b23      	ldr	r3, [pc, #140]	@ (800863c <__d2b+0xa8>)
 80085ae:	4824      	ldr	r0, [pc, #144]	@ (8008640 <__d2b+0xac>)
 80085b0:	f240 310f 	movw	r1, #783	@ 0x30f
 80085b4:	f000 fa82 	bl	8008abc <__assert_func>
 80085b8:	f3c9 550a 	ubfx	r5, r9, #20, #11
 80085bc:	f3c9 0313 	ubfx	r3, r9, #0, #20
 80085c0:	b10d      	cbz	r5, 80085c6 <__d2b+0x32>
 80085c2:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 80085c6:	9301      	str	r3, [sp, #4]
 80085c8:	f1b8 0300 	subs.w	r3, r8, #0
 80085cc:	d023      	beq.n	8008616 <__d2b+0x82>
 80085ce:	4668      	mov	r0, sp
 80085d0:	9300      	str	r3, [sp, #0]
 80085d2:	f7ff fd7c 	bl	80080ce <__lo0bits>
 80085d6:	e9dd 1200 	ldrd	r1, r2, [sp]
 80085da:	b1d0      	cbz	r0, 8008612 <__d2b+0x7e>
 80085dc:	f1c0 0320 	rsb	r3, r0, #32
 80085e0:	fa02 f303 	lsl.w	r3, r2, r3
 80085e4:	430b      	orrs	r3, r1
 80085e6:	40c2      	lsrs	r2, r0
 80085e8:	6163      	str	r3, [r4, #20]
 80085ea:	9201      	str	r2, [sp, #4]
 80085ec:	9b01      	ldr	r3, [sp, #4]
 80085ee:	61a3      	str	r3, [r4, #24]
 80085f0:	2b00      	cmp	r3, #0
 80085f2:	bf0c      	ite	eq
 80085f4:	2201      	moveq	r2, #1
 80085f6:	2202      	movne	r2, #2
 80085f8:	6122      	str	r2, [r4, #16]
 80085fa:	b1a5      	cbz	r5, 8008626 <__d2b+0x92>
 80085fc:	f2a5 4533 	subw	r5, r5, #1075	@ 0x433
 8008600:	4405      	add	r5, r0
 8008602:	603d      	str	r5, [r7, #0]
 8008604:	f1c0 0035 	rsb	r0, r0, #53	@ 0x35
 8008608:	6030      	str	r0, [r6, #0]
 800860a:	4620      	mov	r0, r4
 800860c:	b003      	add	sp, #12
 800860e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8008612:	6161      	str	r1, [r4, #20]
 8008614:	e7ea      	b.n	80085ec <__d2b+0x58>
 8008616:	a801      	add	r0, sp, #4
 8008618:	f7ff fd59 	bl	80080ce <__lo0bits>
 800861c:	9b01      	ldr	r3, [sp, #4]
 800861e:	6163      	str	r3, [r4, #20]
 8008620:	3020      	adds	r0, #32
 8008622:	2201      	movs	r2, #1
 8008624:	e7e8      	b.n	80085f8 <__d2b+0x64>
 8008626:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 800862a:	f2a0 4032 	subw	r0, r0, #1074	@ 0x432
 800862e:	6038      	str	r0, [r7, #0]
 8008630:	6918      	ldr	r0, [r3, #16]
 8008632:	f7ff fd2d 	bl	8008090 <__hi0bits>
 8008636:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 800863a:	e7e5      	b.n	8008608 <__d2b+0x74>
 800863c:	0800a3e8 	.word	0x0800a3e8
 8008640:	0800a3f9 	.word	0x0800a3f9

08008644 <__ssputs_r>:
 8008644:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8008648:	688e      	ldr	r6, [r1, #8]
 800864a:	461f      	mov	r7, r3
 800864c:	42be      	cmp	r6, r7
 800864e:	680b      	ldr	r3, [r1, #0]
 8008650:	4682      	mov	sl, r0
 8008652:	460c      	mov	r4, r1
 8008654:	4690      	mov	r8, r2
 8008656:	d82d      	bhi.n	80086b4 <__ssputs_r+0x70>
 8008658:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 800865c:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 8008660:	d026      	beq.n	80086b0 <__ssputs_r+0x6c>
 8008662:	6965      	ldr	r5, [r4, #20]
 8008664:	6909      	ldr	r1, [r1, #16]
 8008666:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800866a:	eba3 0901 	sub.w	r9, r3, r1
 800866e:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8008672:	1c7b      	adds	r3, r7, #1
 8008674:	444b      	add	r3, r9
 8008676:	106d      	asrs	r5, r5, #1
 8008678:	429d      	cmp	r5, r3
 800867a:	bf38      	it	cc
 800867c:	461d      	movcc	r5, r3
 800867e:	0553      	lsls	r3, r2, #21
 8008680:	d527      	bpl.n	80086d2 <__ssputs_r+0x8e>
 8008682:	4629      	mov	r1, r5
 8008684:	f7ff fbd0 	bl	8007e28 <_malloc_r>
 8008688:	4606      	mov	r6, r0
 800868a:	b360      	cbz	r0, 80086e6 <__ssputs_r+0xa2>
 800868c:	6921      	ldr	r1, [r4, #16]
 800868e:	464a      	mov	r2, r9
 8008690:	f000 fa06 	bl	8008aa0 <memcpy>
 8008694:	89a3      	ldrh	r3, [r4, #12]
 8008696:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 800869a:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800869e:	81a3      	strh	r3, [r4, #12]
 80086a0:	6126      	str	r6, [r4, #16]
 80086a2:	6165      	str	r5, [r4, #20]
 80086a4:	444e      	add	r6, r9
 80086a6:	eba5 0509 	sub.w	r5, r5, r9
 80086aa:	6026      	str	r6, [r4, #0]
 80086ac:	60a5      	str	r5, [r4, #8]
 80086ae:	463e      	mov	r6, r7
 80086b0:	42be      	cmp	r6, r7
 80086b2:	d900      	bls.n	80086b6 <__ssputs_r+0x72>
 80086b4:	463e      	mov	r6, r7
 80086b6:	6820      	ldr	r0, [r4, #0]
 80086b8:	4632      	mov	r2, r6
 80086ba:	4641      	mov	r1, r8
 80086bc:	f000 f9c6 	bl	8008a4c <memmove>
 80086c0:	68a3      	ldr	r3, [r4, #8]
 80086c2:	1b9b      	subs	r3, r3, r6
 80086c4:	60a3      	str	r3, [r4, #8]
 80086c6:	6823      	ldr	r3, [r4, #0]
 80086c8:	4433      	add	r3, r6
 80086ca:	6023      	str	r3, [r4, #0]
 80086cc:	2000      	movs	r0, #0
 80086ce:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80086d2:	462a      	mov	r2, r5
 80086d4:	f000 fa36 	bl	8008b44 <_realloc_r>
 80086d8:	4606      	mov	r6, r0
 80086da:	2800      	cmp	r0, #0
 80086dc:	d1e0      	bne.n	80086a0 <__ssputs_r+0x5c>
 80086de:	6921      	ldr	r1, [r4, #16]
 80086e0:	4650      	mov	r0, sl
 80086e2:	f7ff fb2d 	bl	8007d40 <_free_r>
 80086e6:	230c      	movs	r3, #12
 80086e8:	f8ca 3000 	str.w	r3, [sl]
 80086ec:	89a3      	ldrh	r3, [r4, #12]
 80086ee:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80086f2:	81a3      	strh	r3, [r4, #12]
 80086f4:	f04f 30ff 	mov.w	r0, #4294967295
 80086f8:	e7e9      	b.n	80086ce <__ssputs_r+0x8a>
	...

080086fc <_svfiprintf_r>:
 80086fc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008700:	4698      	mov	r8, r3
 8008702:	898b      	ldrh	r3, [r1, #12]
 8008704:	061b      	lsls	r3, r3, #24
 8008706:	b09d      	sub	sp, #116	@ 0x74
 8008708:	4607      	mov	r7, r0
 800870a:	460d      	mov	r5, r1
 800870c:	4614      	mov	r4, r2
 800870e:	d510      	bpl.n	8008732 <_svfiprintf_r+0x36>
 8008710:	690b      	ldr	r3, [r1, #16]
 8008712:	b973      	cbnz	r3, 8008732 <_svfiprintf_r+0x36>
 8008714:	2140      	movs	r1, #64	@ 0x40
 8008716:	f7ff fb87 	bl	8007e28 <_malloc_r>
 800871a:	6028      	str	r0, [r5, #0]
 800871c:	6128      	str	r0, [r5, #16]
 800871e:	b930      	cbnz	r0, 800872e <_svfiprintf_r+0x32>
 8008720:	230c      	movs	r3, #12
 8008722:	603b      	str	r3, [r7, #0]
 8008724:	f04f 30ff 	mov.w	r0, #4294967295
 8008728:	b01d      	add	sp, #116	@ 0x74
 800872a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800872e:	2340      	movs	r3, #64	@ 0x40
 8008730:	616b      	str	r3, [r5, #20]
 8008732:	2300      	movs	r3, #0
 8008734:	9309      	str	r3, [sp, #36]	@ 0x24
 8008736:	2320      	movs	r3, #32
 8008738:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 800873c:	f8cd 800c 	str.w	r8, [sp, #12]
 8008740:	2330      	movs	r3, #48	@ 0x30
 8008742:	f8df 819c 	ldr.w	r8, [pc, #412]	@ 80088e0 <_svfiprintf_r+0x1e4>
 8008746:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 800874a:	f04f 0901 	mov.w	r9, #1
 800874e:	4623      	mov	r3, r4
 8008750:	469a      	mov	sl, r3
 8008752:	f813 2b01 	ldrb.w	r2, [r3], #1
 8008756:	b10a      	cbz	r2, 800875c <_svfiprintf_r+0x60>
 8008758:	2a25      	cmp	r2, #37	@ 0x25
 800875a:	d1f9      	bne.n	8008750 <_svfiprintf_r+0x54>
 800875c:	ebba 0b04 	subs.w	fp, sl, r4
 8008760:	d00b      	beq.n	800877a <_svfiprintf_r+0x7e>
 8008762:	465b      	mov	r3, fp
 8008764:	4622      	mov	r2, r4
 8008766:	4629      	mov	r1, r5
 8008768:	4638      	mov	r0, r7
 800876a:	f7ff ff6b 	bl	8008644 <__ssputs_r>
 800876e:	3001      	adds	r0, #1
 8008770:	f000 80a7 	beq.w	80088c2 <_svfiprintf_r+0x1c6>
 8008774:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8008776:	445a      	add	r2, fp
 8008778:	9209      	str	r2, [sp, #36]	@ 0x24
 800877a:	f89a 3000 	ldrb.w	r3, [sl]
 800877e:	2b00      	cmp	r3, #0
 8008780:	f000 809f 	beq.w	80088c2 <_svfiprintf_r+0x1c6>
 8008784:	2300      	movs	r3, #0
 8008786:	f04f 32ff 	mov.w	r2, #4294967295
 800878a:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800878e:	f10a 0a01 	add.w	sl, sl, #1
 8008792:	9304      	str	r3, [sp, #16]
 8008794:	9307      	str	r3, [sp, #28]
 8008796:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 800879a:	931a      	str	r3, [sp, #104]	@ 0x68
 800879c:	4654      	mov	r4, sl
 800879e:	2205      	movs	r2, #5
 80087a0:	f814 1b01 	ldrb.w	r1, [r4], #1
 80087a4:	484e      	ldr	r0, [pc, #312]	@ (80088e0 <_svfiprintf_r+0x1e4>)
 80087a6:	f7f7 fd33 	bl	8000210 <memchr>
 80087aa:	9a04      	ldr	r2, [sp, #16]
 80087ac:	b9d8      	cbnz	r0, 80087e6 <_svfiprintf_r+0xea>
 80087ae:	06d0      	lsls	r0, r2, #27
 80087b0:	bf44      	itt	mi
 80087b2:	2320      	movmi	r3, #32
 80087b4:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 80087b8:	0711      	lsls	r1, r2, #28
 80087ba:	bf44      	itt	mi
 80087bc:	232b      	movmi	r3, #43	@ 0x2b
 80087be:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 80087c2:	f89a 3000 	ldrb.w	r3, [sl]
 80087c6:	2b2a      	cmp	r3, #42	@ 0x2a
 80087c8:	d015      	beq.n	80087f6 <_svfiprintf_r+0xfa>
 80087ca:	9a07      	ldr	r2, [sp, #28]
 80087cc:	4654      	mov	r4, sl
 80087ce:	2000      	movs	r0, #0
 80087d0:	f04f 0c0a 	mov.w	ip, #10
 80087d4:	4621      	mov	r1, r4
 80087d6:	f811 3b01 	ldrb.w	r3, [r1], #1
 80087da:	3b30      	subs	r3, #48	@ 0x30
 80087dc:	2b09      	cmp	r3, #9
 80087de:	d94b      	bls.n	8008878 <_svfiprintf_r+0x17c>
 80087e0:	b1b0      	cbz	r0, 8008810 <_svfiprintf_r+0x114>
 80087e2:	9207      	str	r2, [sp, #28]
 80087e4:	e014      	b.n	8008810 <_svfiprintf_r+0x114>
 80087e6:	eba0 0308 	sub.w	r3, r0, r8
 80087ea:	fa09 f303 	lsl.w	r3, r9, r3
 80087ee:	4313      	orrs	r3, r2
 80087f0:	9304      	str	r3, [sp, #16]
 80087f2:	46a2      	mov	sl, r4
 80087f4:	e7d2      	b.n	800879c <_svfiprintf_r+0xa0>
 80087f6:	9b03      	ldr	r3, [sp, #12]
 80087f8:	1d19      	adds	r1, r3, #4
 80087fa:	681b      	ldr	r3, [r3, #0]
 80087fc:	9103      	str	r1, [sp, #12]
 80087fe:	2b00      	cmp	r3, #0
 8008800:	bfbb      	ittet	lt
 8008802:	425b      	neglt	r3, r3
 8008804:	f042 0202 	orrlt.w	r2, r2, #2
 8008808:	9307      	strge	r3, [sp, #28]
 800880a:	9307      	strlt	r3, [sp, #28]
 800880c:	bfb8      	it	lt
 800880e:	9204      	strlt	r2, [sp, #16]
 8008810:	7823      	ldrb	r3, [r4, #0]
 8008812:	2b2e      	cmp	r3, #46	@ 0x2e
 8008814:	d10a      	bne.n	800882c <_svfiprintf_r+0x130>
 8008816:	7863      	ldrb	r3, [r4, #1]
 8008818:	2b2a      	cmp	r3, #42	@ 0x2a
 800881a:	d132      	bne.n	8008882 <_svfiprintf_r+0x186>
 800881c:	9b03      	ldr	r3, [sp, #12]
 800881e:	1d1a      	adds	r2, r3, #4
 8008820:	681b      	ldr	r3, [r3, #0]
 8008822:	9203      	str	r2, [sp, #12]
 8008824:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8008828:	3402      	adds	r4, #2
 800882a:	9305      	str	r3, [sp, #20]
 800882c:	f8df a0c0 	ldr.w	sl, [pc, #192]	@ 80088f0 <_svfiprintf_r+0x1f4>
 8008830:	7821      	ldrb	r1, [r4, #0]
 8008832:	2203      	movs	r2, #3
 8008834:	4650      	mov	r0, sl
 8008836:	f7f7 fceb 	bl	8000210 <memchr>
 800883a:	b138      	cbz	r0, 800884c <_svfiprintf_r+0x150>
 800883c:	9b04      	ldr	r3, [sp, #16]
 800883e:	eba0 000a 	sub.w	r0, r0, sl
 8008842:	2240      	movs	r2, #64	@ 0x40
 8008844:	4082      	lsls	r2, r0
 8008846:	4313      	orrs	r3, r2
 8008848:	3401      	adds	r4, #1
 800884a:	9304      	str	r3, [sp, #16]
 800884c:	f814 1b01 	ldrb.w	r1, [r4], #1
 8008850:	4824      	ldr	r0, [pc, #144]	@ (80088e4 <_svfiprintf_r+0x1e8>)
 8008852:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8008856:	2206      	movs	r2, #6
 8008858:	f7f7 fcda 	bl	8000210 <memchr>
 800885c:	2800      	cmp	r0, #0
 800885e:	d036      	beq.n	80088ce <_svfiprintf_r+0x1d2>
 8008860:	4b21      	ldr	r3, [pc, #132]	@ (80088e8 <_svfiprintf_r+0x1ec>)
 8008862:	bb1b      	cbnz	r3, 80088ac <_svfiprintf_r+0x1b0>
 8008864:	9b03      	ldr	r3, [sp, #12]
 8008866:	3307      	adds	r3, #7
 8008868:	f023 0307 	bic.w	r3, r3, #7
 800886c:	3308      	adds	r3, #8
 800886e:	9303      	str	r3, [sp, #12]
 8008870:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8008872:	4433      	add	r3, r6
 8008874:	9309      	str	r3, [sp, #36]	@ 0x24
 8008876:	e76a      	b.n	800874e <_svfiprintf_r+0x52>
 8008878:	fb0c 3202 	mla	r2, ip, r2, r3
 800887c:	460c      	mov	r4, r1
 800887e:	2001      	movs	r0, #1
 8008880:	e7a8      	b.n	80087d4 <_svfiprintf_r+0xd8>
 8008882:	2300      	movs	r3, #0
 8008884:	3401      	adds	r4, #1
 8008886:	9305      	str	r3, [sp, #20]
 8008888:	4619      	mov	r1, r3
 800888a:	f04f 0c0a 	mov.w	ip, #10
 800888e:	4620      	mov	r0, r4
 8008890:	f810 2b01 	ldrb.w	r2, [r0], #1
 8008894:	3a30      	subs	r2, #48	@ 0x30
 8008896:	2a09      	cmp	r2, #9
 8008898:	d903      	bls.n	80088a2 <_svfiprintf_r+0x1a6>
 800889a:	2b00      	cmp	r3, #0
 800889c:	d0c6      	beq.n	800882c <_svfiprintf_r+0x130>
 800889e:	9105      	str	r1, [sp, #20]
 80088a0:	e7c4      	b.n	800882c <_svfiprintf_r+0x130>
 80088a2:	fb0c 2101 	mla	r1, ip, r1, r2
 80088a6:	4604      	mov	r4, r0
 80088a8:	2301      	movs	r3, #1
 80088aa:	e7f0      	b.n	800888e <_svfiprintf_r+0x192>
 80088ac:	ab03      	add	r3, sp, #12
 80088ae:	9300      	str	r3, [sp, #0]
 80088b0:	462a      	mov	r2, r5
 80088b2:	4b0e      	ldr	r3, [pc, #56]	@ (80088ec <_svfiprintf_r+0x1f0>)
 80088b4:	a904      	add	r1, sp, #16
 80088b6:	4638      	mov	r0, r7
 80088b8:	f7fd fe70 	bl	800659c <_printf_float>
 80088bc:	1c42      	adds	r2, r0, #1
 80088be:	4606      	mov	r6, r0
 80088c0:	d1d6      	bne.n	8008870 <_svfiprintf_r+0x174>
 80088c2:	89ab      	ldrh	r3, [r5, #12]
 80088c4:	065b      	lsls	r3, r3, #25
 80088c6:	f53f af2d 	bmi.w	8008724 <_svfiprintf_r+0x28>
 80088ca:	9809      	ldr	r0, [sp, #36]	@ 0x24
 80088cc:	e72c      	b.n	8008728 <_svfiprintf_r+0x2c>
 80088ce:	ab03      	add	r3, sp, #12
 80088d0:	9300      	str	r3, [sp, #0]
 80088d2:	462a      	mov	r2, r5
 80088d4:	4b05      	ldr	r3, [pc, #20]	@ (80088ec <_svfiprintf_r+0x1f0>)
 80088d6:	a904      	add	r1, sp, #16
 80088d8:	4638      	mov	r0, r7
 80088da:	f7fe f8f7 	bl	8006acc <_printf_i>
 80088de:	e7ed      	b.n	80088bc <_svfiprintf_r+0x1c0>
 80088e0:	0800a550 	.word	0x0800a550
 80088e4:	0800a55a 	.word	0x0800a55a
 80088e8:	0800659d 	.word	0x0800659d
 80088ec:	08008645 	.word	0x08008645
 80088f0:	0800a556 	.word	0x0800a556

080088f4 <__sflush_r>:
 80088f4:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 80088f8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80088fc:	0716      	lsls	r6, r2, #28
 80088fe:	4605      	mov	r5, r0
 8008900:	460c      	mov	r4, r1
 8008902:	d454      	bmi.n	80089ae <__sflush_r+0xba>
 8008904:	684b      	ldr	r3, [r1, #4]
 8008906:	2b00      	cmp	r3, #0
 8008908:	dc02      	bgt.n	8008910 <__sflush_r+0x1c>
 800890a:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 800890c:	2b00      	cmp	r3, #0
 800890e:	dd48      	ble.n	80089a2 <__sflush_r+0xae>
 8008910:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8008912:	2e00      	cmp	r6, #0
 8008914:	d045      	beq.n	80089a2 <__sflush_r+0xae>
 8008916:	2300      	movs	r3, #0
 8008918:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 800891c:	682f      	ldr	r7, [r5, #0]
 800891e:	6a21      	ldr	r1, [r4, #32]
 8008920:	602b      	str	r3, [r5, #0]
 8008922:	d030      	beq.n	8008986 <__sflush_r+0x92>
 8008924:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 8008926:	89a3      	ldrh	r3, [r4, #12]
 8008928:	0759      	lsls	r1, r3, #29
 800892a:	d505      	bpl.n	8008938 <__sflush_r+0x44>
 800892c:	6863      	ldr	r3, [r4, #4]
 800892e:	1ad2      	subs	r2, r2, r3
 8008930:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 8008932:	b10b      	cbz	r3, 8008938 <__sflush_r+0x44>
 8008934:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 8008936:	1ad2      	subs	r2, r2, r3
 8008938:	2300      	movs	r3, #0
 800893a:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 800893c:	6a21      	ldr	r1, [r4, #32]
 800893e:	4628      	mov	r0, r5
 8008940:	47b0      	blx	r6
 8008942:	1c43      	adds	r3, r0, #1
 8008944:	89a3      	ldrh	r3, [r4, #12]
 8008946:	d106      	bne.n	8008956 <__sflush_r+0x62>
 8008948:	6829      	ldr	r1, [r5, #0]
 800894a:	291d      	cmp	r1, #29
 800894c:	d82b      	bhi.n	80089a6 <__sflush_r+0xb2>
 800894e:	4a2a      	ldr	r2, [pc, #168]	@ (80089f8 <__sflush_r+0x104>)
 8008950:	410a      	asrs	r2, r1
 8008952:	07d6      	lsls	r6, r2, #31
 8008954:	d427      	bmi.n	80089a6 <__sflush_r+0xb2>
 8008956:	2200      	movs	r2, #0
 8008958:	6062      	str	r2, [r4, #4]
 800895a:	04d9      	lsls	r1, r3, #19
 800895c:	6922      	ldr	r2, [r4, #16]
 800895e:	6022      	str	r2, [r4, #0]
 8008960:	d504      	bpl.n	800896c <__sflush_r+0x78>
 8008962:	1c42      	adds	r2, r0, #1
 8008964:	d101      	bne.n	800896a <__sflush_r+0x76>
 8008966:	682b      	ldr	r3, [r5, #0]
 8008968:	b903      	cbnz	r3, 800896c <__sflush_r+0x78>
 800896a:	6560      	str	r0, [r4, #84]	@ 0x54
 800896c:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800896e:	602f      	str	r7, [r5, #0]
 8008970:	b1b9      	cbz	r1, 80089a2 <__sflush_r+0xae>
 8008972:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8008976:	4299      	cmp	r1, r3
 8008978:	d002      	beq.n	8008980 <__sflush_r+0x8c>
 800897a:	4628      	mov	r0, r5
 800897c:	f7ff f9e0 	bl	8007d40 <_free_r>
 8008980:	2300      	movs	r3, #0
 8008982:	6363      	str	r3, [r4, #52]	@ 0x34
 8008984:	e00d      	b.n	80089a2 <__sflush_r+0xae>
 8008986:	2301      	movs	r3, #1
 8008988:	4628      	mov	r0, r5
 800898a:	47b0      	blx	r6
 800898c:	4602      	mov	r2, r0
 800898e:	1c50      	adds	r0, r2, #1
 8008990:	d1c9      	bne.n	8008926 <__sflush_r+0x32>
 8008992:	682b      	ldr	r3, [r5, #0]
 8008994:	2b00      	cmp	r3, #0
 8008996:	d0c6      	beq.n	8008926 <__sflush_r+0x32>
 8008998:	2b1d      	cmp	r3, #29
 800899a:	d001      	beq.n	80089a0 <__sflush_r+0xac>
 800899c:	2b16      	cmp	r3, #22
 800899e:	d11e      	bne.n	80089de <__sflush_r+0xea>
 80089a0:	602f      	str	r7, [r5, #0]
 80089a2:	2000      	movs	r0, #0
 80089a4:	e022      	b.n	80089ec <__sflush_r+0xf8>
 80089a6:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80089aa:	b21b      	sxth	r3, r3
 80089ac:	e01b      	b.n	80089e6 <__sflush_r+0xf2>
 80089ae:	690f      	ldr	r7, [r1, #16]
 80089b0:	2f00      	cmp	r7, #0
 80089b2:	d0f6      	beq.n	80089a2 <__sflush_r+0xae>
 80089b4:	0793      	lsls	r3, r2, #30
 80089b6:	680e      	ldr	r6, [r1, #0]
 80089b8:	bf08      	it	eq
 80089ba:	694b      	ldreq	r3, [r1, #20]
 80089bc:	600f      	str	r7, [r1, #0]
 80089be:	bf18      	it	ne
 80089c0:	2300      	movne	r3, #0
 80089c2:	eba6 0807 	sub.w	r8, r6, r7
 80089c6:	608b      	str	r3, [r1, #8]
 80089c8:	f1b8 0f00 	cmp.w	r8, #0
 80089cc:	dde9      	ble.n	80089a2 <__sflush_r+0xae>
 80089ce:	6a21      	ldr	r1, [r4, #32]
 80089d0:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 80089d2:	4643      	mov	r3, r8
 80089d4:	463a      	mov	r2, r7
 80089d6:	4628      	mov	r0, r5
 80089d8:	47b0      	blx	r6
 80089da:	2800      	cmp	r0, #0
 80089dc:	dc08      	bgt.n	80089f0 <__sflush_r+0xfc>
 80089de:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80089e2:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80089e6:	81a3      	strh	r3, [r4, #12]
 80089e8:	f04f 30ff 	mov.w	r0, #4294967295
 80089ec:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80089f0:	4407      	add	r7, r0
 80089f2:	eba8 0800 	sub.w	r8, r8, r0
 80089f6:	e7e7      	b.n	80089c8 <__sflush_r+0xd4>
 80089f8:	dfbffffe 	.word	0xdfbffffe

080089fc <_fflush_r>:
 80089fc:	b538      	push	{r3, r4, r5, lr}
 80089fe:	690b      	ldr	r3, [r1, #16]
 8008a00:	4605      	mov	r5, r0
 8008a02:	460c      	mov	r4, r1
 8008a04:	b913      	cbnz	r3, 8008a0c <_fflush_r+0x10>
 8008a06:	2500      	movs	r5, #0
 8008a08:	4628      	mov	r0, r5
 8008a0a:	bd38      	pop	{r3, r4, r5, pc}
 8008a0c:	b118      	cbz	r0, 8008a16 <_fflush_r+0x1a>
 8008a0e:	6a03      	ldr	r3, [r0, #32]
 8008a10:	b90b      	cbnz	r3, 8008a16 <_fflush_r+0x1a>
 8008a12:	f7fe fa07 	bl	8006e24 <__sinit>
 8008a16:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8008a1a:	2b00      	cmp	r3, #0
 8008a1c:	d0f3      	beq.n	8008a06 <_fflush_r+0xa>
 8008a1e:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 8008a20:	07d0      	lsls	r0, r2, #31
 8008a22:	d404      	bmi.n	8008a2e <_fflush_r+0x32>
 8008a24:	0599      	lsls	r1, r3, #22
 8008a26:	d402      	bmi.n	8008a2e <_fflush_r+0x32>
 8008a28:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8008a2a:	f7fe fb38 	bl	800709e <__retarget_lock_acquire_recursive>
 8008a2e:	4628      	mov	r0, r5
 8008a30:	4621      	mov	r1, r4
 8008a32:	f7ff ff5f 	bl	80088f4 <__sflush_r>
 8008a36:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8008a38:	07da      	lsls	r2, r3, #31
 8008a3a:	4605      	mov	r5, r0
 8008a3c:	d4e4      	bmi.n	8008a08 <_fflush_r+0xc>
 8008a3e:	89a3      	ldrh	r3, [r4, #12]
 8008a40:	059b      	lsls	r3, r3, #22
 8008a42:	d4e1      	bmi.n	8008a08 <_fflush_r+0xc>
 8008a44:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8008a46:	f7fe fb2b 	bl	80070a0 <__retarget_lock_release_recursive>
 8008a4a:	e7dd      	b.n	8008a08 <_fflush_r+0xc>

08008a4c <memmove>:
 8008a4c:	4288      	cmp	r0, r1
 8008a4e:	b510      	push	{r4, lr}
 8008a50:	eb01 0402 	add.w	r4, r1, r2
 8008a54:	d902      	bls.n	8008a5c <memmove+0x10>
 8008a56:	4284      	cmp	r4, r0
 8008a58:	4623      	mov	r3, r4
 8008a5a:	d807      	bhi.n	8008a6c <memmove+0x20>
 8008a5c:	1e43      	subs	r3, r0, #1
 8008a5e:	42a1      	cmp	r1, r4
 8008a60:	d008      	beq.n	8008a74 <memmove+0x28>
 8008a62:	f811 2b01 	ldrb.w	r2, [r1], #1
 8008a66:	f803 2f01 	strb.w	r2, [r3, #1]!
 8008a6a:	e7f8      	b.n	8008a5e <memmove+0x12>
 8008a6c:	4402      	add	r2, r0
 8008a6e:	4601      	mov	r1, r0
 8008a70:	428a      	cmp	r2, r1
 8008a72:	d100      	bne.n	8008a76 <memmove+0x2a>
 8008a74:	bd10      	pop	{r4, pc}
 8008a76:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8008a7a:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8008a7e:	e7f7      	b.n	8008a70 <memmove+0x24>

08008a80 <_sbrk_r>:
 8008a80:	b538      	push	{r3, r4, r5, lr}
 8008a82:	4d06      	ldr	r5, [pc, #24]	@ (8008a9c <_sbrk_r+0x1c>)
 8008a84:	2300      	movs	r3, #0
 8008a86:	4604      	mov	r4, r0
 8008a88:	4608      	mov	r0, r1
 8008a8a:	602b      	str	r3, [r5, #0]
 8008a8c:	f7f9 faac 	bl	8001fe8 <_sbrk>
 8008a90:	1c43      	adds	r3, r0, #1
 8008a92:	d102      	bne.n	8008a9a <_sbrk_r+0x1a>
 8008a94:	682b      	ldr	r3, [r5, #0]
 8008a96:	b103      	cbz	r3, 8008a9a <_sbrk_r+0x1a>
 8008a98:	6023      	str	r3, [r4, #0]
 8008a9a:	bd38      	pop	{r3, r4, r5, pc}
 8008a9c:	20000740 	.word	0x20000740

08008aa0 <memcpy>:
 8008aa0:	440a      	add	r2, r1
 8008aa2:	4291      	cmp	r1, r2
 8008aa4:	f100 33ff 	add.w	r3, r0, #4294967295
 8008aa8:	d100      	bne.n	8008aac <memcpy+0xc>
 8008aaa:	4770      	bx	lr
 8008aac:	b510      	push	{r4, lr}
 8008aae:	f811 4b01 	ldrb.w	r4, [r1], #1
 8008ab2:	f803 4f01 	strb.w	r4, [r3, #1]!
 8008ab6:	4291      	cmp	r1, r2
 8008ab8:	d1f9      	bne.n	8008aae <memcpy+0xe>
 8008aba:	bd10      	pop	{r4, pc}

08008abc <__assert_func>:
 8008abc:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8008abe:	4614      	mov	r4, r2
 8008ac0:	461a      	mov	r2, r3
 8008ac2:	4b09      	ldr	r3, [pc, #36]	@ (8008ae8 <__assert_func+0x2c>)
 8008ac4:	681b      	ldr	r3, [r3, #0]
 8008ac6:	4605      	mov	r5, r0
 8008ac8:	68d8      	ldr	r0, [r3, #12]
 8008aca:	b954      	cbnz	r4, 8008ae2 <__assert_func+0x26>
 8008acc:	4b07      	ldr	r3, [pc, #28]	@ (8008aec <__assert_func+0x30>)
 8008ace:	461c      	mov	r4, r3
 8008ad0:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8008ad4:	9100      	str	r1, [sp, #0]
 8008ad6:	462b      	mov	r3, r5
 8008ad8:	4905      	ldr	r1, [pc, #20]	@ (8008af0 <__assert_func+0x34>)
 8008ada:	f000 f86f 	bl	8008bbc <fiprintf>
 8008ade:	f000 f87f 	bl	8008be0 <abort>
 8008ae2:	4b04      	ldr	r3, [pc, #16]	@ (8008af4 <__assert_func+0x38>)
 8008ae4:	e7f4      	b.n	8008ad0 <__assert_func+0x14>
 8008ae6:	bf00      	nop
 8008ae8:	20000018 	.word	0x20000018
 8008aec:	0800a5a6 	.word	0x0800a5a6
 8008af0:	0800a578 	.word	0x0800a578
 8008af4:	0800a56b 	.word	0x0800a56b

08008af8 <_calloc_r>:
 8008af8:	b570      	push	{r4, r5, r6, lr}
 8008afa:	fba1 5402 	umull	r5, r4, r1, r2
 8008afe:	b93c      	cbnz	r4, 8008b10 <_calloc_r+0x18>
 8008b00:	4629      	mov	r1, r5
 8008b02:	f7ff f991 	bl	8007e28 <_malloc_r>
 8008b06:	4606      	mov	r6, r0
 8008b08:	b928      	cbnz	r0, 8008b16 <_calloc_r+0x1e>
 8008b0a:	2600      	movs	r6, #0
 8008b0c:	4630      	mov	r0, r6
 8008b0e:	bd70      	pop	{r4, r5, r6, pc}
 8008b10:	220c      	movs	r2, #12
 8008b12:	6002      	str	r2, [r0, #0]
 8008b14:	e7f9      	b.n	8008b0a <_calloc_r+0x12>
 8008b16:	462a      	mov	r2, r5
 8008b18:	4621      	mov	r1, r4
 8008b1a:	f7fe fa30 	bl	8006f7e <memset>
 8008b1e:	e7f5      	b.n	8008b0c <_calloc_r+0x14>

08008b20 <__ascii_mbtowc>:
 8008b20:	b082      	sub	sp, #8
 8008b22:	b901      	cbnz	r1, 8008b26 <__ascii_mbtowc+0x6>
 8008b24:	a901      	add	r1, sp, #4
 8008b26:	b142      	cbz	r2, 8008b3a <__ascii_mbtowc+0x1a>
 8008b28:	b14b      	cbz	r3, 8008b3e <__ascii_mbtowc+0x1e>
 8008b2a:	7813      	ldrb	r3, [r2, #0]
 8008b2c:	600b      	str	r3, [r1, #0]
 8008b2e:	7812      	ldrb	r2, [r2, #0]
 8008b30:	1e10      	subs	r0, r2, #0
 8008b32:	bf18      	it	ne
 8008b34:	2001      	movne	r0, #1
 8008b36:	b002      	add	sp, #8
 8008b38:	4770      	bx	lr
 8008b3a:	4610      	mov	r0, r2
 8008b3c:	e7fb      	b.n	8008b36 <__ascii_mbtowc+0x16>
 8008b3e:	f06f 0001 	mvn.w	r0, #1
 8008b42:	e7f8      	b.n	8008b36 <__ascii_mbtowc+0x16>

08008b44 <_realloc_r>:
 8008b44:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8008b48:	4680      	mov	r8, r0
 8008b4a:	4615      	mov	r5, r2
 8008b4c:	460c      	mov	r4, r1
 8008b4e:	b921      	cbnz	r1, 8008b5a <_realloc_r+0x16>
 8008b50:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8008b54:	4611      	mov	r1, r2
 8008b56:	f7ff b967 	b.w	8007e28 <_malloc_r>
 8008b5a:	b92a      	cbnz	r2, 8008b68 <_realloc_r+0x24>
 8008b5c:	f7ff f8f0 	bl	8007d40 <_free_r>
 8008b60:	2400      	movs	r4, #0
 8008b62:	4620      	mov	r0, r4
 8008b64:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8008b68:	f000 f841 	bl	8008bee <_malloc_usable_size_r>
 8008b6c:	4285      	cmp	r5, r0
 8008b6e:	4606      	mov	r6, r0
 8008b70:	d802      	bhi.n	8008b78 <_realloc_r+0x34>
 8008b72:	ebb5 0f50 	cmp.w	r5, r0, lsr #1
 8008b76:	d8f4      	bhi.n	8008b62 <_realloc_r+0x1e>
 8008b78:	4629      	mov	r1, r5
 8008b7a:	4640      	mov	r0, r8
 8008b7c:	f7ff f954 	bl	8007e28 <_malloc_r>
 8008b80:	4607      	mov	r7, r0
 8008b82:	2800      	cmp	r0, #0
 8008b84:	d0ec      	beq.n	8008b60 <_realloc_r+0x1c>
 8008b86:	42b5      	cmp	r5, r6
 8008b88:	462a      	mov	r2, r5
 8008b8a:	4621      	mov	r1, r4
 8008b8c:	bf28      	it	cs
 8008b8e:	4632      	movcs	r2, r6
 8008b90:	f7ff ff86 	bl	8008aa0 <memcpy>
 8008b94:	4621      	mov	r1, r4
 8008b96:	4640      	mov	r0, r8
 8008b98:	f7ff f8d2 	bl	8007d40 <_free_r>
 8008b9c:	463c      	mov	r4, r7
 8008b9e:	e7e0      	b.n	8008b62 <_realloc_r+0x1e>

08008ba0 <__ascii_wctomb>:
 8008ba0:	4603      	mov	r3, r0
 8008ba2:	4608      	mov	r0, r1
 8008ba4:	b141      	cbz	r1, 8008bb8 <__ascii_wctomb+0x18>
 8008ba6:	2aff      	cmp	r2, #255	@ 0xff
 8008ba8:	d904      	bls.n	8008bb4 <__ascii_wctomb+0x14>
 8008baa:	228a      	movs	r2, #138	@ 0x8a
 8008bac:	601a      	str	r2, [r3, #0]
 8008bae:	f04f 30ff 	mov.w	r0, #4294967295
 8008bb2:	4770      	bx	lr
 8008bb4:	700a      	strb	r2, [r1, #0]
 8008bb6:	2001      	movs	r0, #1
 8008bb8:	4770      	bx	lr
	...

08008bbc <fiprintf>:
 8008bbc:	b40e      	push	{r1, r2, r3}
 8008bbe:	b503      	push	{r0, r1, lr}
 8008bc0:	4601      	mov	r1, r0
 8008bc2:	ab03      	add	r3, sp, #12
 8008bc4:	4805      	ldr	r0, [pc, #20]	@ (8008bdc <fiprintf+0x20>)
 8008bc6:	f853 2b04 	ldr.w	r2, [r3], #4
 8008bca:	6800      	ldr	r0, [r0, #0]
 8008bcc:	9301      	str	r3, [sp, #4]
 8008bce:	f000 f83f 	bl	8008c50 <_vfiprintf_r>
 8008bd2:	b002      	add	sp, #8
 8008bd4:	f85d eb04 	ldr.w	lr, [sp], #4
 8008bd8:	b003      	add	sp, #12
 8008bda:	4770      	bx	lr
 8008bdc:	20000018 	.word	0x20000018

08008be0 <abort>:
 8008be0:	b508      	push	{r3, lr}
 8008be2:	2006      	movs	r0, #6
 8008be4:	f000 fa08 	bl	8008ff8 <raise>
 8008be8:	2001      	movs	r0, #1
 8008bea:	f7f9 f985 	bl	8001ef8 <_exit>

08008bee <_malloc_usable_size_r>:
 8008bee:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8008bf2:	1f18      	subs	r0, r3, #4
 8008bf4:	2b00      	cmp	r3, #0
 8008bf6:	bfbc      	itt	lt
 8008bf8:	580b      	ldrlt	r3, [r1, r0]
 8008bfa:	18c0      	addlt	r0, r0, r3
 8008bfc:	4770      	bx	lr

08008bfe <__sfputc_r>:
 8008bfe:	6893      	ldr	r3, [r2, #8]
 8008c00:	3b01      	subs	r3, #1
 8008c02:	2b00      	cmp	r3, #0
 8008c04:	b410      	push	{r4}
 8008c06:	6093      	str	r3, [r2, #8]
 8008c08:	da08      	bge.n	8008c1c <__sfputc_r+0x1e>
 8008c0a:	6994      	ldr	r4, [r2, #24]
 8008c0c:	42a3      	cmp	r3, r4
 8008c0e:	db01      	blt.n	8008c14 <__sfputc_r+0x16>
 8008c10:	290a      	cmp	r1, #10
 8008c12:	d103      	bne.n	8008c1c <__sfputc_r+0x1e>
 8008c14:	f85d 4b04 	ldr.w	r4, [sp], #4
 8008c18:	f000 b932 	b.w	8008e80 <__swbuf_r>
 8008c1c:	6813      	ldr	r3, [r2, #0]
 8008c1e:	1c58      	adds	r0, r3, #1
 8008c20:	6010      	str	r0, [r2, #0]
 8008c22:	7019      	strb	r1, [r3, #0]
 8008c24:	4608      	mov	r0, r1
 8008c26:	f85d 4b04 	ldr.w	r4, [sp], #4
 8008c2a:	4770      	bx	lr

08008c2c <__sfputs_r>:
 8008c2c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008c2e:	4606      	mov	r6, r0
 8008c30:	460f      	mov	r7, r1
 8008c32:	4614      	mov	r4, r2
 8008c34:	18d5      	adds	r5, r2, r3
 8008c36:	42ac      	cmp	r4, r5
 8008c38:	d101      	bne.n	8008c3e <__sfputs_r+0x12>
 8008c3a:	2000      	movs	r0, #0
 8008c3c:	e007      	b.n	8008c4e <__sfputs_r+0x22>
 8008c3e:	f814 1b01 	ldrb.w	r1, [r4], #1
 8008c42:	463a      	mov	r2, r7
 8008c44:	4630      	mov	r0, r6
 8008c46:	f7ff ffda 	bl	8008bfe <__sfputc_r>
 8008c4a:	1c43      	adds	r3, r0, #1
 8008c4c:	d1f3      	bne.n	8008c36 <__sfputs_r+0xa>
 8008c4e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

08008c50 <_vfiprintf_r>:
 8008c50:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008c54:	460d      	mov	r5, r1
 8008c56:	b09d      	sub	sp, #116	@ 0x74
 8008c58:	4614      	mov	r4, r2
 8008c5a:	4698      	mov	r8, r3
 8008c5c:	4606      	mov	r6, r0
 8008c5e:	b118      	cbz	r0, 8008c68 <_vfiprintf_r+0x18>
 8008c60:	6a03      	ldr	r3, [r0, #32]
 8008c62:	b90b      	cbnz	r3, 8008c68 <_vfiprintf_r+0x18>
 8008c64:	f7fe f8de 	bl	8006e24 <__sinit>
 8008c68:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8008c6a:	07d9      	lsls	r1, r3, #31
 8008c6c:	d405      	bmi.n	8008c7a <_vfiprintf_r+0x2a>
 8008c6e:	89ab      	ldrh	r3, [r5, #12]
 8008c70:	059a      	lsls	r2, r3, #22
 8008c72:	d402      	bmi.n	8008c7a <_vfiprintf_r+0x2a>
 8008c74:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8008c76:	f7fe fa12 	bl	800709e <__retarget_lock_acquire_recursive>
 8008c7a:	89ab      	ldrh	r3, [r5, #12]
 8008c7c:	071b      	lsls	r3, r3, #28
 8008c7e:	d501      	bpl.n	8008c84 <_vfiprintf_r+0x34>
 8008c80:	692b      	ldr	r3, [r5, #16]
 8008c82:	b99b      	cbnz	r3, 8008cac <_vfiprintf_r+0x5c>
 8008c84:	4629      	mov	r1, r5
 8008c86:	4630      	mov	r0, r6
 8008c88:	f000 f938 	bl	8008efc <__swsetup_r>
 8008c8c:	b170      	cbz	r0, 8008cac <_vfiprintf_r+0x5c>
 8008c8e:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8008c90:	07dc      	lsls	r4, r3, #31
 8008c92:	d504      	bpl.n	8008c9e <_vfiprintf_r+0x4e>
 8008c94:	f04f 30ff 	mov.w	r0, #4294967295
 8008c98:	b01d      	add	sp, #116	@ 0x74
 8008c9a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008c9e:	89ab      	ldrh	r3, [r5, #12]
 8008ca0:	0598      	lsls	r0, r3, #22
 8008ca2:	d4f7      	bmi.n	8008c94 <_vfiprintf_r+0x44>
 8008ca4:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8008ca6:	f7fe f9fb 	bl	80070a0 <__retarget_lock_release_recursive>
 8008caa:	e7f3      	b.n	8008c94 <_vfiprintf_r+0x44>
 8008cac:	2300      	movs	r3, #0
 8008cae:	9309      	str	r3, [sp, #36]	@ 0x24
 8008cb0:	2320      	movs	r3, #32
 8008cb2:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8008cb6:	f8cd 800c 	str.w	r8, [sp, #12]
 8008cba:	2330      	movs	r3, #48	@ 0x30
 8008cbc:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 8008e6c <_vfiprintf_r+0x21c>
 8008cc0:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8008cc4:	f04f 0901 	mov.w	r9, #1
 8008cc8:	4623      	mov	r3, r4
 8008cca:	469a      	mov	sl, r3
 8008ccc:	f813 2b01 	ldrb.w	r2, [r3], #1
 8008cd0:	b10a      	cbz	r2, 8008cd6 <_vfiprintf_r+0x86>
 8008cd2:	2a25      	cmp	r2, #37	@ 0x25
 8008cd4:	d1f9      	bne.n	8008cca <_vfiprintf_r+0x7a>
 8008cd6:	ebba 0b04 	subs.w	fp, sl, r4
 8008cda:	d00b      	beq.n	8008cf4 <_vfiprintf_r+0xa4>
 8008cdc:	465b      	mov	r3, fp
 8008cde:	4622      	mov	r2, r4
 8008ce0:	4629      	mov	r1, r5
 8008ce2:	4630      	mov	r0, r6
 8008ce4:	f7ff ffa2 	bl	8008c2c <__sfputs_r>
 8008ce8:	3001      	adds	r0, #1
 8008cea:	f000 80a7 	beq.w	8008e3c <_vfiprintf_r+0x1ec>
 8008cee:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8008cf0:	445a      	add	r2, fp
 8008cf2:	9209      	str	r2, [sp, #36]	@ 0x24
 8008cf4:	f89a 3000 	ldrb.w	r3, [sl]
 8008cf8:	2b00      	cmp	r3, #0
 8008cfa:	f000 809f 	beq.w	8008e3c <_vfiprintf_r+0x1ec>
 8008cfe:	2300      	movs	r3, #0
 8008d00:	f04f 32ff 	mov.w	r2, #4294967295
 8008d04:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8008d08:	f10a 0a01 	add.w	sl, sl, #1
 8008d0c:	9304      	str	r3, [sp, #16]
 8008d0e:	9307      	str	r3, [sp, #28]
 8008d10:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8008d14:	931a      	str	r3, [sp, #104]	@ 0x68
 8008d16:	4654      	mov	r4, sl
 8008d18:	2205      	movs	r2, #5
 8008d1a:	f814 1b01 	ldrb.w	r1, [r4], #1
 8008d1e:	4853      	ldr	r0, [pc, #332]	@ (8008e6c <_vfiprintf_r+0x21c>)
 8008d20:	f7f7 fa76 	bl	8000210 <memchr>
 8008d24:	9a04      	ldr	r2, [sp, #16]
 8008d26:	b9d8      	cbnz	r0, 8008d60 <_vfiprintf_r+0x110>
 8008d28:	06d1      	lsls	r1, r2, #27
 8008d2a:	bf44      	itt	mi
 8008d2c:	2320      	movmi	r3, #32
 8008d2e:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8008d32:	0713      	lsls	r3, r2, #28
 8008d34:	bf44      	itt	mi
 8008d36:	232b      	movmi	r3, #43	@ 0x2b
 8008d38:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8008d3c:	f89a 3000 	ldrb.w	r3, [sl]
 8008d40:	2b2a      	cmp	r3, #42	@ 0x2a
 8008d42:	d015      	beq.n	8008d70 <_vfiprintf_r+0x120>
 8008d44:	9a07      	ldr	r2, [sp, #28]
 8008d46:	4654      	mov	r4, sl
 8008d48:	2000      	movs	r0, #0
 8008d4a:	f04f 0c0a 	mov.w	ip, #10
 8008d4e:	4621      	mov	r1, r4
 8008d50:	f811 3b01 	ldrb.w	r3, [r1], #1
 8008d54:	3b30      	subs	r3, #48	@ 0x30
 8008d56:	2b09      	cmp	r3, #9
 8008d58:	d94b      	bls.n	8008df2 <_vfiprintf_r+0x1a2>
 8008d5a:	b1b0      	cbz	r0, 8008d8a <_vfiprintf_r+0x13a>
 8008d5c:	9207      	str	r2, [sp, #28]
 8008d5e:	e014      	b.n	8008d8a <_vfiprintf_r+0x13a>
 8008d60:	eba0 0308 	sub.w	r3, r0, r8
 8008d64:	fa09 f303 	lsl.w	r3, r9, r3
 8008d68:	4313      	orrs	r3, r2
 8008d6a:	9304      	str	r3, [sp, #16]
 8008d6c:	46a2      	mov	sl, r4
 8008d6e:	e7d2      	b.n	8008d16 <_vfiprintf_r+0xc6>
 8008d70:	9b03      	ldr	r3, [sp, #12]
 8008d72:	1d19      	adds	r1, r3, #4
 8008d74:	681b      	ldr	r3, [r3, #0]
 8008d76:	9103      	str	r1, [sp, #12]
 8008d78:	2b00      	cmp	r3, #0
 8008d7a:	bfbb      	ittet	lt
 8008d7c:	425b      	neglt	r3, r3
 8008d7e:	f042 0202 	orrlt.w	r2, r2, #2
 8008d82:	9307      	strge	r3, [sp, #28]
 8008d84:	9307      	strlt	r3, [sp, #28]
 8008d86:	bfb8      	it	lt
 8008d88:	9204      	strlt	r2, [sp, #16]
 8008d8a:	7823      	ldrb	r3, [r4, #0]
 8008d8c:	2b2e      	cmp	r3, #46	@ 0x2e
 8008d8e:	d10a      	bne.n	8008da6 <_vfiprintf_r+0x156>
 8008d90:	7863      	ldrb	r3, [r4, #1]
 8008d92:	2b2a      	cmp	r3, #42	@ 0x2a
 8008d94:	d132      	bne.n	8008dfc <_vfiprintf_r+0x1ac>
 8008d96:	9b03      	ldr	r3, [sp, #12]
 8008d98:	1d1a      	adds	r2, r3, #4
 8008d9a:	681b      	ldr	r3, [r3, #0]
 8008d9c:	9203      	str	r2, [sp, #12]
 8008d9e:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8008da2:	3402      	adds	r4, #2
 8008da4:	9305      	str	r3, [sp, #20]
 8008da6:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 8008e7c <_vfiprintf_r+0x22c>
 8008daa:	7821      	ldrb	r1, [r4, #0]
 8008dac:	2203      	movs	r2, #3
 8008dae:	4650      	mov	r0, sl
 8008db0:	f7f7 fa2e 	bl	8000210 <memchr>
 8008db4:	b138      	cbz	r0, 8008dc6 <_vfiprintf_r+0x176>
 8008db6:	9b04      	ldr	r3, [sp, #16]
 8008db8:	eba0 000a 	sub.w	r0, r0, sl
 8008dbc:	2240      	movs	r2, #64	@ 0x40
 8008dbe:	4082      	lsls	r2, r0
 8008dc0:	4313      	orrs	r3, r2
 8008dc2:	3401      	adds	r4, #1
 8008dc4:	9304      	str	r3, [sp, #16]
 8008dc6:	f814 1b01 	ldrb.w	r1, [r4], #1
 8008dca:	4829      	ldr	r0, [pc, #164]	@ (8008e70 <_vfiprintf_r+0x220>)
 8008dcc:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8008dd0:	2206      	movs	r2, #6
 8008dd2:	f7f7 fa1d 	bl	8000210 <memchr>
 8008dd6:	2800      	cmp	r0, #0
 8008dd8:	d03f      	beq.n	8008e5a <_vfiprintf_r+0x20a>
 8008dda:	4b26      	ldr	r3, [pc, #152]	@ (8008e74 <_vfiprintf_r+0x224>)
 8008ddc:	bb1b      	cbnz	r3, 8008e26 <_vfiprintf_r+0x1d6>
 8008dde:	9b03      	ldr	r3, [sp, #12]
 8008de0:	3307      	adds	r3, #7
 8008de2:	f023 0307 	bic.w	r3, r3, #7
 8008de6:	3308      	adds	r3, #8
 8008de8:	9303      	str	r3, [sp, #12]
 8008dea:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8008dec:	443b      	add	r3, r7
 8008dee:	9309      	str	r3, [sp, #36]	@ 0x24
 8008df0:	e76a      	b.n	8008cc8 <_vfiprintf_r+0x78>
 8008df2:	fb0c 3202 	mla	r2, ip, r2, r3
 8008df6:	460c      	mov	r4, r1
 8008df8:	2001      	movs	r0, #1
 8008dfa:	e7a8      	b.n	8008d4e <_vfiprintf_r+0xfe>
 8008dfc:	2300      	movs	r3, #0
 8008dfe:	3401      	adds	r4, #1
 8008e00:	9305      	str	r3, [sp, #20]
 8008e02:	4619      	mov	r1, r3
 8008e04:	f04f 0c0a 	mov.w	ip, #10
 8008e08:	4620      	mov	r0, r4
 8008e0a:	f810 2b01 	ldrb.w	r2, [r0], #1
 8008e0e:	3a30      	subs	r2, #48	@ 0x30
 8008e10:	2a09      	cmp	r2, #9
 8008e12:	d903      	bls.n	8008e1c <_vfiprintf_r+0x1cc>
 8008e14:	2b00      	cmp	r3, #0
 8008e16:	d0c6      	beq.n	8008da6 <_vfiprintf_r+0x156>
 8008e18:	9105      	str	r1, [sp, #20]
 8008e1a:	e7c4      	b.n	8008da6 <_vfiprintf_r+0x156>
 8008e1c:	fb0c 2101 	mla	r1, ip, r1, r2
 8008e20:	4604      	mov	r4, r0
 8008e22:	2301      	movs	r3, #1
 8008e24:	e7f0      	b.n	8008e08 <_vfiprintf_r+0x1b8>
 8008e26:	ab03      	add	r3, sp, #12
 8008e28:	9300      	str	r3, [sp, #0]
 8008e2a:	462a      	mov	r2, r5
 8008e2c:	4b12      	ldr	r3, [pc, #72]	@ (8008e78 <_vfiprintf_r+0x228>)
 8008e2e:	a904      	add	r1, sp, #16
 8008e30:	4630      	mov	r0, r6
 8008e32:	f7fd fbb3 	bl	800659c <_printf_float>
 8008e36:	4607      	mov	r7, r0
 8008e38:	1c78      	adds	r0, r7, #1
 8008e3a:	d1d6      	bne.n	8008dea <_vfiprintf_r+0x19a>
 8008e3c:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8008e3e:	07d9      	lsls	r1, r3, #31
 8008e40:	d405      	bmi.n	8008e4e <_vfiprintf_r+0x1fe>
 8008e42:	89ab      	ldrh	r3, [r5, #12]
 8008e44:	059a      	lsls	r2, r3, #22
 8008e46:	d402      	bmi.n	8008e4e <_vfiprintf_r+0x1fe>
 8008e48:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8008e4a:	f7fe f929 	bl	80070a0 <__retarget_lock_release_recursive>
 8008e4e:	89ab      	ldrh	r3, [r5, #12]
 8008e50:	065b      	lsls	r3, r3, #25
 8008e52:	f53f af1f 	bmi.w	8008c94 <_vfiprintf_r+0x44>
 8008e56:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8008e58:	e71e      	b.n	8008c98 <_vfiprintf_r+0x48>
 8008e5a:	ab03      	add	r3, sp, #12
 8008e5c:	9300      	str	r3, [sp, #0]
 8008e5e:	462a      	mov	r2, r5
 8008e60:	4b05      	ldr	r3, [pc, #20]	@ (8008e78 <_vfiprintf_r+0x228>)
 8008e62:	a904      	add	r1, sp, #16
 8008e64:	4630      	mov	r0, r6
 8008e66:	f7fd fe31 	bl	8006acc <_printf_i>
 8008e6a:	e7e4      	b.n	8008e36 <_vfiprintf_r+0x1e6>
 8008e6c:	0800a550 	.word	0x0800a550
 8008e70:	0800a55a 	.word	0x0800a55a
 8008e74:	0800659d 	.word	0x0800659d
 8008e78:	08008c2d 	.word	0x08008c2d
 8008e7c:	0800a556 	.word	0x0800a556

08008e80 <__swbuf_r>:
 8008e80:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008e82:	460e      	mov	r6, r1
 8008e84:	4614      	mov	r4, r2
 8008e86:	4605      	mov	r5, r0
 8008e88:	b118      	cbz	r0, 8008e92 <__swbuf_r+0x12>
 8008e8a:	6a03      	ldr	r3, [r0, #32]
 8008e8c:	b90b      	cbnz	r3, 8008e92 <__swbuf_r+0x12>
 8008e8e:	f7fd ffc9 	bl	8006e24 <__sinit>
 8008e92:	69a3      	ldr	r3, [r4, #24]
 8008e94:	60a3      	str	r3, [r4, #8]
 8008e96:	89a3      	ldrh	r3, [r4, #12]
 8008e98:	071a      	lsls	r2, r3, #28
 8008e9a:	d501      	bpl.n	8008ea0 <__swbuf_r+0x20>
 8008e9c:	6923      	ldr	r3, [r4, #16]
 8008e9e:	b943      	cbnz	r3, 8008eb2 <__swbuf_r+0x32>
 8008ea0:	4621      	mov	r1, r4
 8008ea2:	4628      	mov	r0, r5
 8008ea4:	f000 f82a 	bl	8008efc <__swsetup_r>
 8008ea8:	b118      	cbz	r0, 8008eb2 <__swbuf_r+0x32>
 8008eaa:	f04f 37ff 	mov.w	r7, #4294967295
 8008eae:	4638      	mov	r0, r7
 8008eb0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8008eb2:	6823      	ldr	r3, [r4, #0]
 8008eb4:	6922      	ldr	r2, [r4, #16]
 8008eb6:	1a98      	subs	r0, r3, r2
 8008eb8:	6963      	ldr	r3, [r4, #20]
 8008eba:	b2f6      	uxtb	r6, r6
 8008ebc:	4283      	cmp	r3, r0
 8008ebe:	4637      	mov	r7, r6
 8008ec0:	dc05      	bgt.n	8008ece <__swbuf_r+0x4e>
 8008ec2:	4621      	mov	r1, r4
 8008ec4:	4628      	mov	r0, r5
 8008ec6:	f7ff fd99 	bl	80089fc <_fflush_r>
 8008eca:	2800      	cmp	r0, #0
 8008ecc:	d1ed      	bne.n	8008eaa <__swbuf_r+0x2a>
 8008ece:	68a3      	ldr	r3, [r4, #8]
 8008ed0:	3b01      	subs	r3, #1
 8008ed2:	60a3      	str	r3, [r4, #8]
 8008ed4:	6823      	ldr	r3, [r4, #0]
 8008ed6:	1c5a      	adds	r2, r3, #1
 8008ed8:	6022      	str	r2, [r4, #0]
 8008eda:	701e      	strb	r6, [r3, #0]
 8008edc:	6962      	ldr	r2, [r4, #20]
 8008ede:	1c43      	adds	r3, r0, #1
 8008ee0:	429a      	cmp	r2, r3
 8008ee2:	d004      	beq.n	8008eee <__swbuf_r+0x6e>
 8008ee4:	89a3      	ldrh	r3, [r4, #12]
 8008ee6:	07db      	lsls	r3, r3, #31
 8008ee8:	d5e1      	bpl.n	8008eae <__swbuf_r+0x2e>
 8008eea:	2e0a      	cmp	r6, #10
 8008eec:	d1df      	bne.n	8008eae <__swbuf_r+0x2e>
 8008eee:	4621      	mov	r1, r4
 8008ef0:	4628      	mov	r0, r5
 8008ef2:	f7ff fd83 	bl	80089fc <_fflush_r>
 8008ef6:	2800      	cmp	r0, #0
 8008ef8:	d0d9      	beq.n	8008eae <__swbuf_r+0x2e>
 8008efa:	e7d6      	b.n	8008eaa <__swbuf_r+0x2a>

08008efc <__swsetup_r>:
 8008efc:	b538      	push	{r3, r4, r5, lr}
 8008efe:	4b29      	ldr	r3, [pc, #164]	@ (8008fa4 <__swsetup_r+0xa8>)
 8008f00:	4605      	mov	r5, r0
 8008f02:	6818      	ldr	r0, [r3, #0]
 8008f04:	460c      	mov	r4, r1
 8008f06:	b118      	cbz	r0, 8008f10 <__swsetup_r+0x14>
 8008f08:	6a03      	ldr	r3, [r0, #32]
 8008f0a:	b90b      	cbnz	r3, 8008f10 <__swsetup_r+0x14>
 8008f0c:	f7fd ff8a 	bl	8006e24 <__sinit>
 8008f10:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8008f14:	0719      	lsls	r1, r3, #28
 8008f16:	d422      	bmi.n	8008f5e <__swsetup_r+0x62>
 8008f18:	06da      	lsls	r2, r3, #27
 8008f1a:	d407      	bmi.n	8008f2c <__swsetup_r+0x30>
 8008f1c:	2209      	movs	r2, #9
 8008f1e:	602a      	str	r2, [r5, #0]
 8008f20:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8008f24:	81a3      	strh	r3, [r4, #12]
 8008f26:	f04f 30ff 	mov.w	r0, #4294967295
 8008f2a:	e033      	b.n	8008f94 <__swsetup_r+0x98>
 8008f2c:	0758      	lsls	r0, r3, #29
 8008f2e:	d512      	bpl.n	8008f56 <__swsetup_r+0x5a>
 8008f30:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8008f32:	b141      	cbz	r1, 8008f46 <__swsetup_r+0x4a>
 8008f34:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8008f38:	4299      	cmp	r1, r3
 8008f3a:	d002      	beq.n	8008f42 <__swsetup_r+0x46>
 8008f3c:	4628      	mov	r0, r5
 8008f3e:	f7fe feff 	bl	8007d40 <_free_r>
 8008f42:	2300      	movs	r3, #0
 8008f44:	6363      	str	r3, [r4, #52]	@ 0x34
 8008f46:	89a3      	ldrh	r3, [r4, #12]
 8008f48:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 8008f4c:	81a3      	strh	r3, [r4, #12]
 8008f4e:	2300      	movs	r3, #0
 8008f50:	6063      	str	r3, [r4, #4]
 8008f52:	6923      	ldr	r3, [r4, #16]
 8008f54:	6023      	str	r3, [r4, #0]
 8008f56:	89a3      	ldrh	r3, [r4, #12]
 8008f58:	f043 0308 	orr.w	r3, r3, #8
 8008f5c:	81a3      	strh	r3, [r4, #12]
 8008f5e:	6923      	ldr	r3, [r4, #16]
 8008f60:	b94b      	cbnz	r3, 8008f76 <__swsetup_r+0x7a>
 8008f62:	89a3      	ldrh	r3, [r4, #12]
 8008f64:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 8008f68:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8008f6c:	d003      	beq.n	8008f76 <__swsetup_r+0x7a>
 8008f6e:	4621      	mov	r1, r4
 8008f70:	4628      	mov	r0, r5
 8008f72:	f000 f883 	bl	800907c <__smakebuf_r>
 8008f76:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8008f7a:	f013 0201 	ands.w	r2, r3, #1
 8008f7e:	d00a      	beq.n	8008f96 <__swsetup_r+0x9a>
 8008f80:	2200      	movs	r2, #0
 8008f82:	60a2      	str	r2, [r4, #8]
 8008f84:	6962      	ldr	r2, [r4, #20]
 8008f86:	4252      	negs	r2, r2
 8008f88:	61a2      	str	r2, [r4, #24]
 8008f8a:	6922      	ldr	r2, [r4, #16]
 8008f8c:	b942      	cbnz	r2, 8008fa0 <__swsetup_r+0xa4>
 8008f8e:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 8008f92:	d1c5      	bne.n	8008f20 <__swsetup_r+0x24>
 8008f94:	bd38      	pop	{r3, r4, r5, pc}
 8008f96:	0799      	lsls	r1, r3, #30
 8008f98:	bf58      	it	pl
 8008f9a:	6962      	ldrpl	r2, [r4, #20]
 8008f9c:	60a2      	str	r2, [r4, #8]
 8008f9e:	e7f4      	b.n	8008f8a <__swsetup_r+0x8e>
 8008fa0:	2000      	movs	r0, #0
 8008fa2:	e7f7      	b.n	8008f94 <__swsetup_r+0x98>
 8008fa4:	20000018 	.word	0x20000018

08008fa8 <_raise_r>:
 8008fa8:	291f      	cmp	r1, #31
 8008faa:	b538      	push	{r3, r4, r5, lr}
 8008fac:	4605      	mov	r5, r0
 8008fae:	460c      	mov	r4, r1
 8008fb0:	d904      	bls.n	8008fbc <_raise_r+0x14>
 8008fb2:	2316      	movs	r3, #22
 8008fb4:	6003      	str	r3, [r0, #0]
 8008fb6:	f04f 30ff 	mov.w	r0, #4294967295
 8008fba:	bd38      	pop	{r3, r4, r5, pc}
 8008fbc:	6bc2      	ldr	r2, [r0, #60]	@ 0x3c
 8008fbe:	b112      	cbz	r2, 8008fc6 <_raise_r+0x1e>
 8008fc0:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8008fc4:	b94b      	cbnz	r3, 8008fda <_raise_r+0x32>
 8008fc6:	4628      	mov	r0, r5
 8008fc8:	f000 f830 	bl	800902c <_getpid_r>
 8008fcc:	4622      	mov	r2, r4
 8008fce:	4601      	mov	r1, r0
 8008fd0:	4628      	mov	r0, r5
 8008fd2:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8008fd6:	f000 b817 	b.w	8009008 <_kill_r>
 8008fda:	2b01      	cmp	r3, #1
 8008fdc:	d00a      	beq.n	8008ff4 <_raise_r+0x4c>
 8008fde:	1c59      	adds	r1, r3, #1
 8008fe0:	d103      	bne.n	8008fea <_raise_r+0x42>
 8008fe2:	2316      	movs	r3, #22
 8008fe4:	6003      	str	r3, [r0, #0]
 8008fe6:	2001      	movs	r0, #1
 8008fe8:	e7e7      	b.n	8008fba <_raise_r+0x12>
 8008fea:	2100      	movs	r1, #0
 8008fec:	f842 1024 	str.w	r1, [r2, r4, lsl #2]
 8008ff0:	4620      	mov	r0, r4
 8008ff2:	4798      	blx	r3
 8008ff4:	2000      	movs	r0, #0
 8008ff6:	e7e0      	b.n	8008fba <_raise_r+0x12>

08008ff8 <raise>:
 8008ff8:	4b02      	ldr	r3, [pc, #8]	@ (8009004 <raise+0xc>)
 8008ffa:	4601      	mov	r1, r0
 8008ffc:	6818      	ldr	r0, [r3, #0]
 8008ffe:	f7ff bfd3 	b.w	8008fa8 <_raise_r>
 8009002:	bf00      	nop
 8009004:	20000018 	.word	0x20000018

08009008 <_kill_r>:
 8009008:	b538      	push	{r3, r4, r5, lr}
 800900a:	4d07      	ldr	r5, [pc, #28]	@ (8009028 <_kill_r+0x20>)
 800900c:	2300      	movs	r3, #0
 800900e:	4604      	mov	r4, r0
 8009010:	4608      	mov	r0, r1
 8009012:	4611      	mov	r1, r2
 8009014:	602b      	str	r3, [r5, #0]
 8009016:	f7f8 ff5f 	bl	8001ed8 <_kill>
 800901a:	1c43      	adds	r3, r0, #1
 800901c:	d102      	bne.n	8009024 <_kill_r+0x1c>
 800901e:	682b      	ldr	r3, [r5, #0]
 8009020:	b103      	cbz	r3, 8009024 <_kill_r+0x1c>
 8009022:	6023      	str	r3, [r4, #0]
 8009024:	bd38      	pop	{r3, r4, r5, pc}
 8009026:	bf00      	nop
 8009028:	20000740 	.word	0x20000740

0800902c <_getpid_r>:
 800902c:	f7f8 bf4c 	b.w	8001ec8 <_getpid>

08009030 <__swhatbuf_r>:
 8009030:	b570      	push	{r4, r5, r6, lr}
 8009032:	460c      	mov	r4, r1
 8009034:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8009038:	2900      	cmp	r1, #0
 800903a:	b096      	sub	sp, #88	@ 0x58
 800903c:	4615      	mov	r5, r2
 800903e:	461e      	mov	r6, r3
 8009040:	da0d      	bge.n	800905e <__swhatbuf_r+0x2e>
 8009042:	89a3      	ldrh	r3, [r4, #12]
 8009044:	f013 0f80 	tst.w	r3, #128	@ 0x80
 8009048:	f04f 0100 	mov.w	r1, #0
 800904c:	bf14      	ite	ne
 800904e:	2340      	movne	r3, #64	@ 0x40
 8009050:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 8009054:	2000      	movs	r0, #0
 8009056:	6031      	str	r1, [r6, #0]
 8009058:	602b      	str	r3, [r5, #0]
 800905a:	b016      	add	sp, #88	@ 0x58
 800905c:	bd70      	pop	{r4, r5, r6, pc}
 800905e:	466a      	mov	r2, sp
 8009060:	f000 f848 	bl	80090f4 <_fstat_r>
 8009064:	2800      	cmp	r0, #0
 8009066:	dbec      	blt.n	8009042 <__swhatbuf_r+0x12>
 8009068:	9901      	ldr	r1, [sp, #4]
 800906a:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 800906e:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 8009072:	4259      	negs	r1, r3
 8009074:	4159      	adcs	r1, r3
 8009076:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800907a:	e7eb      	b.n	8009054 <__swhatbuf_r+0x24>

0800907c <__smakebuf_r>:
 800907c:	898b      	ldrh	r3, [r1, #12]
 800907e:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8009080:	079d      	lsls	r5, r3, #30
 8009082:	4606      	mov	r6, r0
 8009084:	460c      	mov	r4, r1
 8009086:	d507      	bpl.n	8009098 <__smakebuf_r+0x1c>
 8009088:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 800908c:	6023      	str	r3, [r4, #0]
 800908e:	6123      	str	r3, [r4, #16]
 8009090:	2301      	movs	r3, #1
 8009092:	6163      	str	r3, [r4, #20]
 8009094:	b003      	add	sp, #12
 8009096:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8009098:	ab01      	add	r3, sp, #4
 800909a:	466a      	mov	r2, sp
 800909c:	f7ff ffc8 	bl	8009030 <__swhatbuf_r>
 80090a0:	9f00      	ldr	r7, [sp, #0]
 80090a2:	4605      	mov	r5, r0
 80090a4:	4639      	mov	r1, r7
 80090a6:	4630      	mov	r0, r6
 80090a8:	f7fe febe 	bl	8007e28 <_malloc_r>
 80090ac:	b948      	cbnz	r0, 80090c2 <__smakebuf_r+0x46>
 80090ae:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80090b2:	059a      	lsls	r2, r3, #22
 80090b4:	d4ee      	bmi.n	8009094 <__smakebuf_r+0x18>
 80090b6:	f023 0303 	bic.w	r3, r3, #3
 80090ba:	f043 0302 	orr.w	r3, r3, #2
 80090be:	81a3      	strh	r3, [r4, #12]
 80090c0:	e7e2      	b.n	8009088 <__smakebuf_r+0xc>
 80090c2:	89a3      	ldrh	r3, [r4, #12]
 80090c4:	6020      	str	r0, [r4, #0]
 80090c6:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80090ca:	81a3      	strh	r3, [r4, #12]
 80090cc:	9b01      	ldr	r3, [sp, #4]
 80090ce:	e9c4 0704 	strd	r0, r7, [r4, #16]
 80090d2:	b15b      	cbz	r3, 80090ec <__smakebuf_r+0x70>
 80090d4:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80090d8:	4630      	mov	r0, r6
 80090da:	f000 f81d 	bl	8009118 <_isatty_r>
 80090de:	b128      	cbz	r0, 80090ec <__smakebuf_r+0x70>
 80090e0:	89a3      	ldrh	r3, [r4, #12]
 80090e2:	f023 0303 	bic.w	r3, r3, #3
 80090e6:	f043 0301 	orr.w	r3, r3, #1
 80090ea:	81a3      	strh	r3, [r4, #12]
 80090ec:	89a3      	ldrh	r3, [r4, #12]
 80090ee:	431d      	orrs	r5, r3
 80090f0:	81a5      	strh	r5, [r4, #12]
 80090f2:	e7cf      	b.n	8009094 <__smakebuf_r+0x18>

080090f4 <_fstat_r>:
 80090f4:	b538      	push	{r3, r4, r5, lr}
 80090f6:	4d07      	ldr	r5, [pc, #28]	@ (8009114 <_fstat_r+0x20>)
 80090f8:	2300      	movs	r3, #0
 80090fa:	4604      	mov	r4, r0
 80090fc:	4608      	mov	r0, r1
 80090fe:	4611      	mov	r1, r2
 8009100:	602b      	str	r3, [r5, #0]
 8009102:	f7f8 ff49 	bl	8001f98 <_fstat>
 8009106:	1c43      	adds	r3, r0, #1
 8009108:	d102      	bne.n	8009110 <_fstat_r+0x1c>
 800910a:	682b      	ldr	r3, [r5, #0]
 800910c:	b103      	cbz	r3, 8009110 <_fstat_r+0x1c>
 800910e:	6023      	str	r3, [r4, #0]
 8009110:	bd38      	pop	{r3, r4, r5, pc}
 8009112:	bf00      	nop
 8009114:	20000740 	.word	0x20000740

08009118 <_isatty_r>:
 8009118:	b538      	push	{r3, r4, r5, lr}
 800911a:	4d06      	ldr	r5, [pc, #24]	@ (8009134 <_isatty_r+0x1c>)
 800911c:	2300      	movs	r3, #0
 800911e:	4604      	mov	r4, r0
 8009120:	4608      	mov	r0, r1
 8009122:	602b      	str	r3, [r5, #0]
 8009124:	f7f8 ff48 	bl	8001fb8 <_isatty>
 8009128:	1c43      	adds	r3, r0, #1
 800912a:	d102      	bne.n	8009132 <_isatty_r+0x1a>
 800912c:	682b      	ldr	r3, [r5, #0]
 800912e:	b103      	cbz	r3, 8009132 <_isatty_r+0x1a>
 8009130:	6023      	str	r3, [r4, #0]
 8009132:	bd38      	pop	{r3, r4, r5, pc}
 8009134:	20000740 	.word	0x20000740

08009138 <cos>:
 8009138:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800913a:	ec53 2b10 	vmov	r2, r3, d0
 800913e:	4826      	ldr	r0, [pc, #152]	@ (80091d8 <cos+0xa0>)
 8009140:	f023 4100 	bic.w	r1, r3, #2147483648	@ 0x80000000
 8009144:	4281      	cmp	r1, r0
 8009146:	d806      	bhi.n	8009156 <cos+0x1e>
 8009148:	ed9f 1b21 	vldr	d1, [pc, #132]	@ 80091d0 <cos+0x98>
 800914c:	b005      	add	sp, #20
 800914e:	f85d eb04 	ldr.w	lr, [sp], #4
 8009152:	f000 b899 	b.w	8009288 <__kernel_cos>
 8009156:	4821      	ldr	r0, [pc, #132]	@ (80091dc <cos+0xa4>)
 8009158:	4281      	cmp	r1, r0
 800915a:	d908      	bls.n	800916e <cos+0x36>
 800915c:	4610      	mov	r0, r2
 800915e:	4619      	mov	r1, r3
 8009160:	f7f7 f8b2 	bl	80002c8 <__aeabi_dsub>
 8009164:	ec41 0b10 	vmov	d0, r0, r1
 8009168:	b005      	add	sp, #20
 800916a:	f85d fb04 	ldr.w	pc, [sp], #4
 800916e:	4668      	mov	r0, sp
 8009170:	f000 fa0e 	bl	8009590 <__ieee754_rem_pio2>
 8009174:	f000 0003 	and.w	r0, r0, #3
 8009178:	2801      	cmp	r0, #1
 800917a:	d00b      	beq.n	8009194 <cos+0x5c>
 800917c:	2802      	cmp	r0, #2
 800917e:	d015      	beq.n	80091ac <cos+0x74>
 8009180:	b9d8      	cbnz	r0, 80091ba <cos+0x82>
 8009182:	ed9d 1b02 	vldr	d1, [sp, #8]
 8009186:	ed9d 0b00 	vldr	d0, [sp]
 800918a:	f000 f87d 	bl	8009288 <__kernel_cos>
 800918e:	ec51 0b10 	vmov	r0, r1, d0
 8009192:	e7e7      	b.n	8009164 <cos+0x2c>
 8009194:	ed9d 1b02 	vldr	d1, [sp, #8]
 8009198:	ed9d 0b00 	vldr	d0, [sp]
 800919c:	f000 f93c 	bl	8009418 <__kernel_sin>
 80091a0:	ec53 2b10 	vmov	r2, r3, d0
 80091a4:	4610      	mov	r0, r2
 80091a6:	f103 4100 	add.w	r1, r3, #2147483648	@ 0x80000000
 80091aa:	e7db      	b.n	8009164 <cos+0x2c>
 80091ac:	ed9d 1b02 	vldr	d1, [sp, #8]
 80091b0:	ed9d 0b00 	vldr	d0, [sp]
 80091b4:	f000 f868 	bl	8009288 <__kernel_cos>
 80091b8:	e7f2      	b.n	80091a0 <cos+0x68>
 80091ba:	ed9d 1b02 	vldr	d1, [sp, #8]
 80091be:	ed9d 0b00 	vldr	d0, [sp]
 80091c2:	2001      	movs	r0, #1
 80091c4:	f000 f928 	bl	8009418 <__kernel_sin>
 80091c8:	e7e1      	b.n	800918e <cos+0x56>
 80091ca:	bf00      	nop
 80091cc:	f3af 8000 	nop.w
	...
 80091d8:	3fe921fb 	.word	0x3fe921fb
 80091dc:	7fefffff 	.word	0x7fefffff

080091e0 <sin>:
 80091e0:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 80091e2:	ec53 2b10 	vmov	r2, r3, d0
 80091e6:	4826      	ldr	r0, [pc, #152]	@ (8009280 <sin+0xa0>)
 80091e8:	f023 4100 	bic.w	r1, r3, #2147483648	@ 0x80000000
 80091ec:	4281      	cmp	r1, r0
 80091ee:	d807      	bhi.n	8009200 <sin+0x20>
 80091f0:	ed9f 1b21 	vldr	d1, [pc, #132]	@ 8009278 <sin+0x98>
 80091f4:	2000      	movs	r0, #0
 80091f6:	b005      	add	sp, #20
 80091f8:	f85d eb04 	ldr.w	lr, [sp], #4
 80091fc:	f000 b90c 	b.w	8009418 <__kernel_sin>
 8009200:	4820      	ldr	r0, [pc, #128]	@ (8009284 <sin+0xa4>)
 8009202:	4281      	cmp	r1, r0
 8009204:	d908      	bls.n	8009218 <sin+0x38>
 8009206:	4610      	mov	r0, r2
 8009208:	4619      	mov	r1, r3
 800920a:	f7f7 f85d 	bl	80002c8 <__aeabi_dsub>
 800920e:	ec41 0b10 	vmov	d0, r0, r1
 8009212:	b005      	add	sp, #20
 8009214:	f85d fb04 	ldr.w	pc, [sp], #4
 8009218:	4668      	mov	r0, sp
 800921a:	f000 f9b9 	bl	8009590 <__ieee754_rem_pio2>
 800921e:	f000 0003 	and.w	r0, r0, #3
 8009222:	2801      	cmp	r0, #1
 8009224:	d00c      	beq.n	8009240 <sin+0x60>
 8009226:	2802      	cmp	r0, #2
 8009228:	d011      	beq.n	800924e <sin+0x6e>
 800922a:	b9e8      	cbnz	r0, 8009268 <sin+0x88>
 800922c:	ed9d 1b02 	vldr	d1, [sp, #8]
 8009230:	ed9d 0b00 	vldr	d0, [sp]
 8009234:	2001      	movs	r0, #1
 8009236:	f000 f8ef 	bl	8009418 <__kernel_sin>
 800923a:	ec51 0b10 	vmov	r0, r1, d0
 800923e:	e7e6      	b.n	800920e <sin+0x2e>
 8009240:	ed9d 1b02 	vldr	d1, [sp, #8]
 8009244:	ed9d 0b00 	vldr	d0, [sp]
 8009248:	f000 f81e 	bl	8009288 <__kernel_cos>
 800924c:	e7f5      	b.n	800923a <sin+0x5a>
 800924e:	ed9d 1b02 	vldr	d1, [sp, #8]
 8009252:	ed9d 0b00 	vldr	d0, [sp]
 8009256:	2001      	movs	r0, #1
 8009258:	f000 f8de 	bl	8009418 <__kernel_sin>
 800925c:	ec53 2b10 	vmov	r2, r3, d0
 8009260:	4610      	mov	r0, r2
 8009262:	f103 4100 	add.w	r1, r3, #2147483648	@ 0x80000000
 8009266:	e7d2      	b.n	800920e <sin+0x2e>
 8009268:	ed9d 1b02 	vldr	d1, [sp, #8]
 800926c:	ed9d 0b00 	vldr	d0, [sp]
 8009270:	f000 f80a 	bl	8009288 <__kernel_cos>
 8009274:	e7f2      	b.n	800925c <sin+0x7c>
 8009276:	bf00      	nop
	...
 8009280:	3fe921fb 	.word	0x3fe921fb
 8009284:	7fefffff 	.word	0x7fefffff

08009288 <__kernel_cos>:
 8009288:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800928c:	ec57 6b10 	vmov	r6, r7, d0
 8009290:	f027 4800 	bic.w	r8, r7, #2147483648	@ 0x80000000
 8009294:	f1b8 5f79 	cmp.w	r8, #1044381696	@ 0x3e400000
 8009298:	ed8d 1b00 	vstr	d1, [sp]
 800929c:	d206      	bcs.n	80092ac <__kernel_cos+0x24>
 800929e:	4630      	mov	r0, r6
 80092a0:	4639      	mov	r1, r7
 80092a2:	f7f7 fc79 	bl	8000b98 <__aeabi_d2iz>
 80092a6:	2800      	cmp	r0, #0
 80092a8:	f000 8088 	beq.w	80093bc <__kernel_cos+0x134>
 80092ac:	4632      	mov	r2, r6
 80092ae:	463b      	mov	r3, r7
 80092b0:	4630      	mov	r0, r6
 80092b2:	4639      	mov	r1, r7
 80092b4:	f7f7 f9c0 	bl	8000638 <__aeabi_dmul>
 80092b8:	4b51      	ldr	r3, [pc, #324]	@ (8009400 <__kernel_cos+0x178>)
 80092ba:	2200      	movs	r2, #0
 80092bc:	4604      	mov	r4, r0
 80092be:	460d      	mov	r5, r1
 80092c0:	f7f7 f9ba 	bl	8000638 <__aeabi_dmul>
 80092c4:	a340      	add	r3, pc, #256	@ (adr r3, 80093c8 <__kernel_cos+0x140>)
 80092c6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80092ca:	4682      	mov	sl, r0
 80092cc:	468b      	mov	fp, r1
 80092ce:	4620      	mov	r0, r4
 80092d0:	4629      	mov	r1, r5
 80092d2:	f7f7 f9b1 	bl	8000638 <__aeabi_dmul>
 80092d6:	a33e      	add	r3, pc, #248	@ (adr r3, 80093d0 <__kernel_cos+0x148>)
 80092d8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80092dc:	f7f6 fff6 	bl	80002cc <__adddf3>
 80092e0:	4622      	mov	r2, r4
 80092e2:	462b      	mov	r3, r5
 80092e4:	f7f7 f9a8 	bl	8000638 <__aeabi_dmul>
 80092e8:	a33b      	add	r3, pc, #236	@ (adr r3, 80093d8 <__kernel_cos+0x150>)
 80092ea:	e9d3 2300 	ldrd	r2, r3, [r3]
 80092ee:	f7f6 ffeb 	bl	80002c8 <__aeabi_dsub>
 80092f2:	4622      	mov	r2, r4
 80092f4:	462b      	mov	r3, r5
 80092f6:	f7f7 f99f 	bl	8000638 <__aeabi_dmul>
 80092fa:	a339      	add	r3, pc, #228	@ (adr r3, 80093e0 <__kernel_cos+0x158>)
 80092fc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009300:	f7f6 ffe4 	bl	80002cc <__adddf3>
 8009304:	4622      	mov	r2, r4
 8009306:	462b      	mov	r3, r5
 8009308:	f7f7 f996 	bl	8000638 <__aeabi_dmul>
 800930c:	a336      	add	r3, pc, #216	@ (adr r3, 80093e8 <__kernel_cos+0x160>)
 800930e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009312:	f7f6 ffd9 	bl	80002c8 <__aeabi_dsub>
 8009316:	4622      	mov	r2, r4
 8009318:	462b      	mov	r3, r5
 800931a:	f7f7 f98d 	bl	8000638 <__aeabi_dmul>
 800931e:	a334      	add	r3, pc, #208	@ (adr r3, 80093f0 <__kernel_cos+0x168>)
 8009320:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009324:	f7f6 ffd2 	bl	80002cc <__adddf3>
 8009328:	4622      	mov	r2, r4
 800932a:	462b      	mov	r3, r5
 800932c:	f7f7 f984 	bl	8000638 <__aeabi_dmul>
 8009330:	4622      	mov	r2, r4
 8009332:	462b      	mov	r3, r5
 8009334:	f7f7 f980 	bl	8000638 <__aeabi_dmul>
 8009338:	e9dd 2300 	ldrd	r2, r3, [sp]
 800933c:	4604      	mov	r4, r0
 800933e:	460d      	mov	r5, r1
 8009340:	4630      	mov	r0, r6
 8009342:	4639      	mov	r1, r7
 8009344:	f7f7 f978 	bl	8000638 <__aeabi_dmul>
 8009348:	460b      	mov	r3, r1
 800934a:	4602      	mov	r2, r0
 800934c:	4629      	mov	r1, r5
 800934e:	4620      	mov	r0, r4
 8009350:	f7f6 ffba 	bl	80002c8 <__aeabi_dsub>
 8009354:	4b2b      	ldr	r3, [pc, #172]	@ (8009404 <__kernel_cos+0x17c>)
 8009356:	4598      	cmp	r8, r3
 8009358:	4606      	mov	r6, r0
 800935a:	460f      	mov	r7, r1
 800935c:	d810      	bhi.n	8009380 <__kernel_cos+0xf8>
 800935e:	4602      	mov	r2, r0
 8009360:	460b      	mov	r3, r1
 8009362:	4650      	mov	r0, sl
 8009364:	4659      	mov	r1, fp
 8009366:	f7f6 ffaf 	bl	80002c8 <__aeabi_dsub>
 800936a:	460b      	mov	r3, r1
 800936c:	4926      	ldr	r1, [pc, #152]	@ (8009408 <__kernel_cos+0x180>)
 800936e:	4602      	mov	r2, r0
 8009370:	2000      	movs	r0, #0
 8009372:	f7f6 ffa9 	bl	80002c8 <__aeabi_dsub>
 8009376:	ec41 0b10 	vmov	d0, r0, r1
 800937a:	b003      	add	sp, #12
 800937c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009380:	4b22      	ldr	r3, [pc, #136]	@ (800940c <__kernel_cos+0x184>)
 8009382:	4921      	ldr	r1, [pc, #132]	@ (8009408 <__kernel_cos+0x180>)
 8009384:	4598      	cmp	r8, r3
 8009386:	bf8c      	ite	hi
 8009388:	4d21      	ldrhi	r5, [pc, #132]	@ (8009410 <__kernel_cos+0x188>)
 800938a:	f5a8 1500 	subls.w	r5, r8, #2097152	@ 0x200000
 800938e:	2400      	movs	r4, #0
 8009390:	4622      	mov	r2, r4
 8009392:	462b      	mov	r3, r5
 8009394:	2000      	movs	r0, #0
 8009396:	f7f6 ff97 	bl	80002c8 <__aeabi_dsub>
 800939a:	4622      	mov	r2, r4
 800939c:	4680      	mov	r8, r0
 800939e:	4689      	mov	r9, r1
 80093a0:	462b      	mov	r3, r5
 80093a2:	4650      	mov	r0, sl
 80093a4:	4659      	mov	r1, fp
 80093a6:	f7f6 ff8f 	bl	80002c8 <__aeabi_dsub>
 80093aa:	4632      	mov	r2, r6
 80093ac:	463b      	mov	r3, r7
 80093ae:	f7f6 ff8b 	bl	80002c8 <__aeabi_dsub>
 80093b2:	4602      	mov	r2, r0
 80093b4:	460b      	mov	r3, r1
 80093b6:	4640      	mov	r0, r8
 80093b8:	4649      	mov	r1, r9
 80093ba:	e7da      	b.n	8009372 <__kernel_cos+0xea>
 80093bc:	ed9f 0b0e 	vldr	d0, [pc, #56]	@ 80093f8 <__kernel_cos+0x170>
 80093c0:	e7db      	b.n	800937a <__kernel_cos+0xf2>
 80093c2:	bf00      	nop
 80093c4:	f3af 8000 	nop.w
 80093c8:	be8838d4 	.word	0xbe8838d4
 80093cc:	bda8fae9 	.word	0xbda8fae9
 80093d0:	bdb4b1c4 	.word	0xbdb4b1c4
 80093d4:	3e21ee9e 	.word	0x3e21ee9e
 80093d8:	809c52ad 	.word	0x809c52ad
 80093dc:	3e927e4f 	.word	0x3e927e4f
 80093e0:	19cb1590 	.word	0x19cb1590
 80093e4:	3efa01a0 	.word	0x3efa01a0
 80093e8:	16c15177 	.word	0x16c15177
 80093ec:	3f56c16c 	.word	0x3f56c16c
 80093f0:	5555554c 	.word	0x5555554c
 80093f4:	3fa55555 	.word	0x3fa55555
 80093f8:	00000000 	.word	0x00000000
 80093fc:	3ff00000 	.word	0x3ff00000
 8009400:	3fe00000 	.word	0x3fe00000
 8009404:	3fd33332 	.word	0x3fd33332
 8009408:	3ff00000 	.word	0x3ff00000
 800940c:	3fe90000 	.word	0x3fe90000
 8009410:	3fd20000 	.word	0x3fd20000
 8009414:	00000000 	.word	0x00000000

08009418 <__kernel_sin>:
 8009418:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800941c:	ec55 4b10 	vmov	r4, r5, d0
 8009420:	f025 4300 	bic.w	r3, r5, #2147483648	@ 0x80000000
 8009424:	b085      	sub	sp, #20
 8009426:	f1b3 5f79 	cmp.w	r3, #1044381696	@ 0x3e400000
 800942a:	ed8d 1b02 	vstr	d1, [sp, #8]
 800942e:	4680      	mov	r8, r0
 8009430:	d205      	bcs.n	800943e <__kernel_sin+0x26>
 8009432:	4620      	mov	r0, r4
 8009434:	4629      	mov	r1, r5
 8009436:	f7f7 fbaf 	bl	8000b98 <__aeabi_d2iz>
 800943a:	2800      	cmp	r0, #0
 800943c:	d052      	beq.n	80094e4 <__kernel_sin+0xcc>
 800943e:	4622      	mov	r2, r4
 8009440:	462b      	mov	r3, r5
 8009442:	4620      	mov	r0, r4
 8009444:	4629      	mov	r1, r5
 8009446:	f7f7 f8f7 	bl	8000638 <__aeabi_dmul>
 800944a:	4682      	mov	sl, r0
 800944c:	468b      	mov	fp, r1
 800944e:	4602      	mov	r2, r0
 8009450:	460b      	mov	r3, r1
 8009452:	4620      	mov	r0, r4
 8009454:	4629      	mov	r1, r5
 8009456:	f7f7 f8ef 	bl	8000638 <__aeabi_dmul>
 800945a:	a342      	add	r3, pc, #264	@ (adr r3, 8009564 <__kernel_sin+0x14c>)
 800945c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009460:	e9cd 0100 	strd	r0, r1, [sp]
 8009464:	4650      	mov	r0, sl
 8009466:	4659      	mov	r1, fp
 8009468:	f7f7 f8e6 	bl	8000638 <__aeabi_dmul>
 800946c:	a33f      	add	r3, pc, #252	@ (adr r3, 800956c <__kernel_sin+0x154>)
 800946e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009472:	f7f6 ff29 	bl	80002c8 <__aeabi_dsub>
 8009476:	4652      	mov	r2, sl
 8009478:	465b      	mov	r3, fp
 800947a:	f7f7 f8dd 	bl	8000638 <__aeabi_dmul>
 800947e:	a33d      	add	r3, pc, #244	@ (adr r3, 8009574 <__kernel_sin+0x15c>)
 8009480:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009484:	f7f6 ff22 	bl	80002cc <__adddf3>
 8009488:	4652      	mov	r2, sl
 800948a:	465b      	mov	r3, fp
 800948c:	f7f7 f8d4 	bl	8000638 <__aeabi_dmul>
 8009490:	a33a      	add	r3, pc, #232	@ (adr r3, 800957c <__kernel_sin+0x164>)
 8009492:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009496:	f7f6 ff17 	bl	80002c8 <__aeabi_dsub>
 800949a:	4652      	mov	r2, sl
 800949c:	465b      	mov	r3, fp
 800949e:	f7f7 f8cb 	bl	8000638 <__aeabi_dmul>
 80094a2:	a338      	add	r3, pc, #224	@ (adr r3, 8009584 <__kernel_sin+0x16c>)
 80094a4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80094a8:	f7f6 ff10 	bl	80002cc <__adddf3>
 80094ac:	4606      	mov	r6, r0
 80094ae:	460f      	mov	r7, r1
 80094b0:	f1b8 0f00 	cmp.w	r8, #0
 80094b4:	d11b      	bne.n	80094ee <__kernel_sin+0xd6>
 80094b6:	4602      	mov	r2, r0
 80094b8:	460b      	mov	r3, r1
 80094ba:	4650      	mov	r0, sl
 80094bc:	4659      	mov	r1, fp
 80094be:	f7f7 f8bb 	bl	8000638 <__aeabi_dmul>
 80094c2:	a325      	add	r3, pc, #148	@ (adr r3, 8009558 <__kernel_sin+0x140>)
 80094c4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80094c8:	f7f6 fefe 	bl	80002c8 <__aeabi_dsub>
 80094cc:	e9dd 2300 	ldrd	r2, r3, [sp]
 80094d0:	f7f7 f8b2 	bl	8000638 <__aeabi_dmul>
 80094d4:	4602      	mov	r2, r0
 80094d6:	460b      	mov	r3, r1
 80094d8:	4620      	mov	r0, r4
 80094da:	4629      	mov	r1, r5
 80094dc:	f7f6 fef6 	bl	80002cc <__adddf3>
 80094e0:	4604      	mov	r4, r0
 80094e2:	460d      	mov	r5, r1
 80094e4:	ec45 4b10 	vmov	d0, r4, r5
 80094e8:	b005      	add	sp, #20
 80094ea:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80094ee:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80094f2:	4b1b      	ldr	r3, [pc, #108]	@ (8009560 <__kernel_sin+0x148>)
 80094f4:	2200      	movs	r2, #0
 80094f6:	f7f7 f89f 	bl	8000638 <__aeabi_dmul>
 80094fa:	4632      	mov	r2, r6
 80094fc:	4680      	mov	r8, r0
 80094fe:	4689      	mov	r9, r1
 8009500:	463b      	mov	r3, r7
 8009502:	e9dd 0100 	ldrd	r0, r1, [sp]
 8009506:	f7f7 f897 	bl	8000638 <__aeabi_dmul>
 800950a:	4602      	mov	r2, r0
 800950c:	460b      	mov	r3, r1
 800950e:	4640      	mov	r0, r8
 8009510:	4649      	mov	r1, r9
 8009512:	f7f6 fed9 	bl	80002c8 <__aeabi_dsub>
 8009516:	4652      	mov	r2, sl
 8009518:	465b      	mov	r3, fp
 800951a:	f7f7 f88d 	bl	8000638 <__aeabi_dmul>
 800951e:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8009522:	f7f6 fed1 	bl	80002c8 <__aeabi_dsub>
 8009526:	a30c      	add	r3, pc, #48	@ (adr r3, 8009558 <__kernel_sin+0x140>)
 8009528:	e9d3 2300 	ldrd	r2, r3, [r3]
 800952c:	4606      	mov	r6, r0
 800952e:	460f      	mov	r7, r1
 8009530:	e9dd 0100 	ldrd	r0, r1, [sp]
 8009534:	f7f7 f880 	bl	8000638 <__aeabi_dmul>
 8009538:	4602      	mov	r2, r0
 800953a:	460b      	mov	r3, r1
 800953c:	4630      	mov	r0, r6
 800953e:	4639      	mov	r1, r7
 8009540:	f7f6 fec4 	bl	80002cc <__adddf3>
 8009544:	4602      	mov	r2, r0
 8009546:	460b      	mov	r3, r1
 8009548:	4620      	mov	r0, r4
 800954a:	4629      	mov	r1, r5
 800954c:	f7f6 febc 	bl	80002c8 <__aeabi_dsub>
 8009550:	e7c6      	b.n	80094e0 <__kernel_sin+0xc8>
 8009552:	bf00      	nop
 8009554:	f3af 8000 	nop.w
 8009558:	55555549 	.word	0x55555549
 800955c:	3fc55555 	.word	0x3fc55555
 8009560:	3fe00000 	.word	0x3fe00000
 8009564:	5acfd57c 	.word	0x5acfd57c
 8009568:	3de5d93a 	.word	0x3de5d93a
 800956c:	8a2b9ceb 	.word	0x8a2b9ceb
 8009570:	3e5ae5e6 	.word	0x3e5ae5e6
 8009574:	57b1fe7d 	.word	0x57b1fe7d
 8009578:	3ec71de3 	.word	0x3ec71de3
 800957c:	19c161d5 	.word	0x19c161d5
 8009580:	3f2a01a0 	.word	0x3f2a01a0
 8009584:	1110f8a6 	.word	0x1110f8a6
 8009588:	3f811111 	.word	0x3f811111
 800958c:	00000000 	.word	0x00000000

08009590 <__ieee754_rem_pio2>:
 8009590:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009594:	ec57 6b10 	vmov	r6, r7, d0
 8009598:	4bc5      	ldr	r3, [pc, #788]	@ (80098b0 <__ieee754_rem_pio2+0x320>)
 800959a:	b08d      	sub	sp, #52	@ 0x34
 800959c:	f027 4800 	bic.w	r8, r7, #2147483648	@ 0x80000000
 80095a0:	4598      	cmp	r8, r3
 80095a2:	4604      	mov	r4, r0
 80095a4:	9704      	str	r7, [sp, #16]
 80095a6:	d807      	bhi.n	80095b8 <__ieee754_rem_pio2+0x28>
 80095a8:	2200      	movs	r2, #0
 80095aa:	2300      	movs	r3, #0
 80095ac:	ed80 0b00 	vstr	d0, [r0]
 80095b0:	e9c0 2302 	strd	r2, r3, [r0, #8]
 80095b4:	2500      	movs	r5, #0
 80095b6:	e028      	b.n	800960a <__ieee754_rem_pio2+0x7a>
 80095b8:	4bbe      	ldr	r3, [pc, #760]	@ (80098b4 <__ieee754_rem_pio2+0x324>)
 80095ba:	4598      	cmp	r8, r3
 80095bc:	d878      	bhi.n	80096b0 <__ieee754_rem_pio2+0x120>
 80095be:	9b04      	ldr	r3, [sp, #16]
 80095c0:	4dbd      	ldr	r5, [pc, #756]	@ (80098b8 <__ieee754_rem_pio2+0x328>)
 80095c2:	2b00      	cmp	r3, #0
 80095c4:	4630      	mov	r0, r6
 80095c6:	a3ac      	add	r3, pc, #688	@ (adr r3, 8009878 <__ieee754_rem_pio2+0x2e8>)
 80095c8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80095cc:	4639      	mov	r1, r7
 80095ce:	dd38      	ble.n	8009642 <__ieee754_rem_pio2+0xb2>
 80095d0:	f7f6 fe7a 	bl	80002c8 <__aeabi_dsub>
 80095d4:	45a8      	cmp	r8, r5
 80095d6:	4606      	mov	r6, r0
 80095d8:	460f      	mov	r7, r1
 80095da:	d01a      	beq.n	8009612 <__ieee754_rem_pio2+0x82>
 80095dc:	a3a8      	add	r3, pc, #672	@ (adr r3, 8009880 <__ieee754_rem_pio2+0x2f0>)
 80095de:	e9d3 2300 	ldrd	r2, r3, [r3]
 80095e2:	f7f6 fe71 	bl	80002c8 <__aeabi_dsub>
 80095e6:	4602      	mov	r2, r0
 80095e8:	460b      	mov	r3, r1
 80095ea:	4680      	mov	r8, r0
 80095ec:	4689      	mov	r9, r1
 80095ee:	4630      	mov	r0, r6
 80095f0:	4639      	mov	r1, r7
 80095f2:	f7f6 fe69 	bl	80002c8 <__aeabi_dsub>
 80095f6:	a3a2      	add	r3, pc, #648	@ (adr r3, 8009880 <__ieee754_rem_pio2+0x2f0>)
 80095f8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80095fc:	f7f6 fe64 	bl	80002c8 <__aeabi_dsub>
 8009600:	e9c4 8900 	strd	r8, r9, [r4]
 8009604:	e9c4 0102 	strd	r0, r1, [r4, #8]
 8009608:	2501      	movs	r5, #1
 800960a:	4628      	mov	r0, r5
 800960c:	b00d      	add	sp, #52	@ 0x34
 800960e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009612:	a39d      	add	r3, pc, #628	@ (adr r3, 8009888 <__ieee754_rem_pio2+0x2f8>)
 8009614:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009618:	f7f6 fe56 	bl	80002c8 <__aeabi_dsub>
 800961c:	a39c      	add	r3, pc, #624	@ (adr r3, 8009890 <__ieee754_rem_pio2+0x300>)
 800961e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009622:	4606      	mov	r6, r0
 8009624:	460f      	mov	r7, r1
 8009626:	f7f6 fe4f 	bl	80002c8 <__aeabi_dsub>
 800962a:	4602      	mov	r2, r0
 800962c:	460b      	mov	r3, r1
 800962e:	4680      	mov	r8, r0
 8009630:	4689      	mov	r9, r1
 8009632:	4630      	mov	r0, r6
 8009634:	4639      	mov	r1, r7
 8009636:	f7f6 fe47 	bl	80002c8 <__aeabi_dsub>
 800963a:	a395      	add	r3, pc, #596	@ (adr r3, 8009890 <__ieee754_rem_pio2+0x300>)
 800963c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009640:	e7dc      	b.n	80095fc <__ieee754_rem_pio2+0x6c>
 8009642:	f7f6 fe43 	bl	80002cc <__adddf3>
 8009646:	45a8      	cmp	r8, r5
 8009648:	4606      	mov	r6, r0
 800964a:	460f      	mov	r7, r1
 800964c:	d018      	beq.n	8009680 <__ieee754_rem_pio2+0xf0>
 800964e:	a38c      	add	r3, pc, #560	@ (adr r3, 8009880 <__ieee754_rem_pio2+0x2f0>)
 8009650:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009654:	f7f6 fe3a 	bl	80002cc <__adddf3>
 8009658:	4602      	mov	r2, r0
 800965a:	460b      	mov	r3, r1
 800965c:	4680      	mov	r8, r0
 800965e:	4689      	mov	r9, r1
 8009660:	4630      	mov	r0, r6
 8009662:	4639      	mov	r1, r7
 8009664:	f7f6 fe30 	bl	80002c8 <__aeabi_dsub>
 8009668:	a385      	add	r3, pc, #532	@ (adr r3, 8009880 <__ieee754_rem_pio2+0x2f0>)
 800966a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800966e:	f7f6 fe2d 	bl	80002cc <__adddf3>
 8009672:	f04f 35ff 	mov.w	r5, #4294967295
 8009676:	e9c4 8900 	strd	r8, r9, [r4]
 800967a:	e9c4 0102 	strd	r0, r1, [r4, #8]
 800967e:	e7c4      	b.n	800960a <__ieee754_rem_pio2+0x7a>
 8009680:	a381      	add	r3, pc, #516	@ (adr r3, 8009888 <__ieee754_rem_pio2+0x2f8>)
 8009682:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009686:	f7f6 fe21 	bl	80002cc <__adddf3>
 800968a:	a381      	add	r3, pc, #516	@ (adr r3, 8009890 <__ieee754_rem_pio2+0x300>)
 800968c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009690:	4606      	mov	r6, r0
 8009692:	460f      	mov	r7, r1
 8009694:	f7f6 fe1a 	bl	80002cc <__adddf3>
 8009698:	4602      	mov	r2, r0
 800969a:	460b      	mov	r3, r1
 800969c:	4680      	mov	r8, r0
 800969e:	4689      	mov	r9, r1
 80096a0:	4630      	mov	r0, r6
 80096a2:	4639      	mov	r1, r7
 80096a4:	f7f6 fe10 	bl	80002c8 <__aeabi_dsub>
 80096a8:	a379      	add	r3, pc, #484	@ (adr r3, 8009890 <__ieee754_rem_pio2+0x300>)
 80096aa:	e9d3 2300 	ldrd	r2, r3, [r3]
 80096ae:	e7de      	b.n	800966e <__ieee754_rem_pio2+0xde>
 80096b0:	4b82      	ldr	r3, [pc, #520]	@ (80098bc <__ieee754_rem_pio2+0x32c>)
 80096b2:	4598      	cmp	r8, r3
 80096b4:	f200 80d1 	bhi.w	800985a <__ieee754_rem_pio2+0x2ca>
 80096b8:	f000 f966 	bl	8009988 <fabs>
 80096bc:	ec57 6b10 	vmov	r6, r7, d0
 80096c0:	a375      	add	r3, pc, #468	@ (adr r3, 8009898 <__ieee754_rem_pio2+0x308>)
 80096c2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80096c6:	4630      	mov	r0, r6
 80096c8:	4639      	mov	r1, r7
 80096ca:	f7f6 ffb5 	bl	8000638 <__aeabi_dmul>
 80096ce:	4b7c      	ldr	r3, [pc, #496]	@ (80098c0 <__ieee754_rem_pio2+0x330>)
 80096d0:	2200      	movs	r2, #0
 80096d2:	f7f6 fdfb 	bl	80002cc <__adddf3>
 80096d6:	f7f7 fa5f 	bl	8000b98 <__aeabi_d2iz>
 80096da:	4605      	mov	r5, r0
 80096dc:	f7f6 ff42 	bl	8000564 <__aeabi_i2d>
 80096e0:	4602      	mov	r2, r0
 80096e2:	460b      	mov	r3, r1
 80096e4:	e9cd 2302 	strd	r2, r3, [sp, #8]
 80096e8:	a363      	add	r3, pc, #396	@ (adr r3, 8009878 <__ieee754_rem_pio2+0x2e8>)
 80096ea:	e9d3 2300 	ldrd	r2, r3, [r3]
 80096ee:	f7f6 ffa3 	bl	8000638 <__aeabi_dmul>
 80096f2:	4602      	mov	r2, r0
 80096f4:	460b      	mov	r3, r1
 80096f6:	4630      	mov	r0, r6
 80096f8:	4639      	mov	r1, r7
 80096fa:	f7f6 fde5 	bl	80002c8 <__aeabi_dsub>
 80096fe:	a360      	add	r3, pc, #384	@ (adr r3, 8009880 <__ieee754_rem_pio2+0x2f0>)
 8009700:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009704:	4682      	mov	sl, r0
 8009706:	468b      	mov	fp, r1
 8009708:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800970c:	f7f6 ff94 	bl	8000638 <__aeabi_dmul>
 8009710:	2d1f      	cmp	r5, #31
 8009712:	4606      	mov	r6, r0
 8009714:	460f      	mov	r7, r1
 8009716:	dc0c      	bgt.n	8009732 <__ieee754_rem_pio2+0x1a2>
 8009718:	4b6a      	ldr	r3, [pc, #424]	@ (80098c4 <__ieee754_rem_pio2+0x334>)
 800971a:	1e6a      	subs	r2, r5, #1
 800971c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8009720:	4543      	cmp	r3, r8
 8009722:	d006      	beq.n	8009732 <__ieee754_rem_pio2+0x1a2>
 8009724:	4632      	mov	r2, r6
 8009726:	463b      	mov	r3, r7
 8009728:	4650      	mov	r0, sl
 800972a:	4659      	mov	r1, fp
 800972c:	f7f6 fdcc 	bl	80002c8 <__aeabi_dsub>
 8009730:	e00e      	b.n	8009750 <__ieee754_rem_pio2+0x1c0>
 8009732:	463b      	mov	r3, r7
 8009734:	4632      	mov	r2, r6
 8009736:	4650      	mov	r0, sl
 8009738:	4659      	mov	r1, fp
 800973a:	f7f6 fdc5 	bl	80002c8 <__aeabi_dsub>
 800973e:	ea4f 5328 	mov.w	r3, r8, asr #20
 8009742:	9305      	str	r3, [sp, #20]
 8009744:	f3c1 530a 	ubfx	r3, r1, #20, #11
 8009748:	ebc3 5318 	rsb	r3, r3, r8, lsr #20
 800974c:	2b10      	cmp	r3, #16
 800974e:	dc02      	bgt.n	8009756 <__ieee754_rem_pio2+0x1c6>
 8009750:	e9c4 0100 	strd	r0, r1, [r4]
 8009754:	e039      	b.n	80097ca <__ieee754_rem_pio2+0x23a>
 8009756:	a34c      	add	r3, pc, #304	@ (adr r3, 8009888 <__ieee754_rem_pio2+0x2f8>)
 8009758:	e9d3 2300 	ldrd	r2, r3, [r3]
 800975c:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8009760:	f7f6 ff6a 	bl	8000638 <__aeabi_dmul>
 8009764:	4606      	mov	r6, r0
 8009766:	460f      	mov	r7, r1
 8009768:	4602      	mov	r2, r0
 800976a:	460b      	mov	r3, r1
 800976c:	4650      	mov	r0, sl
 800976e:	4659      	mov	r1, fp
 8009770:	f7f6 fdaa 	bl	80002c8 <__aeabi_dsub>
 8009774:	4602      	mov	r2, r0
 8009776:	460b      	mov	r3, r1
 8009778:	4680      	mov	r8, r0
 800977a:	4689      	mov	r9, r1
 800977c:	4650      	mov	r0, sl
 800977e:	4659      	mov	r1, fp
 8009780:	f7f6 fda2 	bl	80002c8 <__aeabi_dsub>
 8009784:	4632      	mov	r2, r6
 8009786:	463b      	mov	r3, r7
 8009788:	f7f6 fd9e 	bl	80002c8 <__aeabi_dsub>
 800978c:	a340      	add	r3, pc, #256	@ (adr r3, 8009890 <__ieee754_rem_pio2+0x300>)
 800978e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009792:	4606      	mov	r6, r0
 8009794:	460f      	mov	r7, r1
 8009796:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800979a:	f7f6 ff4d 	bl	8000638 <__aeabi_dmul>
 800979e:	4632      	mov	r2, r6
 80097a0:	463b      	mov	r3, r7
 80097a2:	f7f6 fd91 	bl	80002c8 <__aeabi_dsub>
 80097a6:	4602      	mov	r2, r0
 80097a8:	460b      	mov	r3, r1
 80097aa:	4606      	mov	r6, r0
 80097ac:	460f      	mov	r7, r1
 80097ae:	4640      	mov	r0, r8
 80097b0:	4649      	mov	r1, r9
 80097b2:	f7f6 fd89 	bl	80002c8 <__aeabi_dsub>
 80097b6:	9a05      	ldr	r2, [sp, #20]
 80097b8:	f3c1 530a 	ubfx	r3, r1, #20, #11
 80097bc:	1ad3      	subs	r3, r2, r3
 80097be:	2b31      	cmp	r3, #49	@ 0x31
 80097c0:	dc20      	bgt.n	8009804 <__ieee754_rem_pio2+0x274>
 80097c2:	e9c4 0100 	strd	r0, r1, [r4]
 80097c6:	46c2      	mov	sl, r8
 80097c8:	46cb      	mov	fp, r9
 80097ca:	e9d4 8900 	ldrd	r8, r9, [r4]
 80097ce:	4650      	mov	r0, sl
 80097d0:	4642      	mov	r2, r8
 80097d2:	464b      	mov	r3, r9
 80097d4:	4659      	mov	r1, fp
 80097d6:	f7f6 fd77 	bl	80002c8 <__aeabi_dsub>
 80097da:	463b      	mov	r3, r7
 80097dc:	4632      	mov	r2, r6
 80097de:	f7f6 fd73 	bl	80002c8 <__aeabi_dsub>
 80097e2:	9b04      	ldr	r3, [sp, #16]
 80097e4:	2b00      	cmp	r3, #0
 80097e6:	e9c4 0102 	strd	r0, r1, [r4, #8]
 80097ea:	f6bf af0e 	bge.w	800960a <__ieee754_rem_pio2+0x7a>
 80097ee:	f109 4300 	add.w	r3, r9, #2147483648	@ 0x80000000
 80097f2:	6063      	str	r3, [r4, #4]
 80097f4:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 80097f8:	f8c4 8000 	str.w	r8, [r4]
 80097fc:	60a0      	str	r0, [r4, #8]
 80097fe:	60e3      	str	r3, [r4, #12]
 8009800:	426d      	negs	r5, r5
 8009802:	e702      	b.n	800960a <__ieee754_rem_pio2+0x7a>
 8009804:	a326      	add	r3, pc, #152	@ (adr r3, 80098a0 <__ieee754_rem_pio2+0x310>)
 8009806:	e9d3 2300 	ldrd	r2, r3, [r3]
 800980a:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800980e:	f7f6 ff13 	bl	8000638 <__aeabi_dmul>
 8009812:	4606      	mov	r6, r0
 8009814:	460f      	mov	r7, r1
 8009816:	4602      	mov	r2, r0
 8009818:	460b      	mov	r3, r1
 800981a:	4640      	mov	r0, r8
 800981c:	4649      	mov	r1, r9
 800981e:	f7f6 fd53 	bl	80002c8 <__aeabi_dsub>
 8009822:	4602      	mov	r2, r0
 8009824:	460b      	mov	r3, r1
 8009826:	4682      	mov	sl, r0
 8009828:	468b      	mov	fp, r1
 800982a:	4640      	mov	r0, r8
 800982c:	4649      	mov	r1, r9
 800982e:	f7f6 fd4b 	bl	80002c8 <__aeabi_dsub>
 8009832:	4632      	mov	r2, r6
 8009834:	463b      	mov	r3, r7
 8009836:	f7f6 fd47 	bl	80002c8 <__aeabi_dsub>
 800983a:	a31b      	add	r3, pc, #108	@ (adr r3, 80098a8 <__ieee754_rem_pio2+0x318>)
 800983c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009840:	4606      	mov	r6, r0
 8009842:	460f      	mov	r7, r1
 8009844:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8009848:	f7f6 fef6 	bl	8000638 <__aeabi_dmul>
 800984c:	4632      	mov	r2, r6
 800984e:	463b      	mov	r3, r7
 8009850:	f7f6 fd3a 	bl	80002c8 <__aeabi_dsub>
 8009854:	4606      	mov	r6, r0
 8009856:	460f      	mov	r7, r1
 8009858:	e764      	b.n	8009724 <__ieee754_rem_pio2+0x194>
 800985a:	4b1b      	ldr	r3, [pc, #108]	@ (80098c8 <__ieee754_rem_pio2+0x338>)
 800985c:	4598      	cmp	r8, r3
 800985e:	d935      	bls.n	80098cc <__ieee754_rem_pio2+0x33c>
 8009860:	4632      	mov	r2, r6
 8009862:	463b      	mov	r3, r7
 8009864:	4630      	mov	r0, r6
 8009866:	4639      	mov	r1, r7
 8009868:	f7f6 fd2e 	bl	80002c8 <__aeabi_dsub>
 800986c:	e9c4 0102 	strd	r0, r1, [r4, #8]
 8009870:	e9c4 0100 	strd	r0, r1, [r4]
 8009874:	e69e      	b.n	80095b4 <__ieee754_rem_pio2+0x24>
 8009876:	bf00      	nop
 8009878:	54400000 	.word	0x54400000
 800987c:	3ff921fb 	.word	0x3ff921fb
 8009880:	1a626331 	.word	0x1a626331
 8009884:	3dd0b461 	.word	0x3dd0b461
 8009888:	1a600000 	.word	0x1a600000
 800988c:	3dd0b461 	.word	0x3dd0b461
 8009890:	2e037073 	.word	0x2e037073
 8009894:	3ba3198a 	.word	0x3ba3198a
 8009898:	6dc9c883 	.word	0x6dc9c883
 800989c:	3fe45f30 	.word	0x3fe45f30
 80098a0:	2e000000 	.word	0x2e000000
 80098a4:	3ba3198a 	.word	0x3ba3198a
 80098a8:	252049c1 	.word	0x252049c1
 80098ac:	397b839a 	.word	0x397b839a
 80098b0:	3fe921fb 	.word	0x3fe921fb
 80098b4:	4002d97b 	.word	0x4002d97b
 80098b8:	3ff921fb 	.word	0x3ff921fb
 80098bc:	413921fb 	.word	0x413921fb
 80098c0:	3fe00000 	.word	0x3fe00000
 80098c4:	0800a6a8 	.word	0x0800a6a8
 80098c8:	7fefffff 	.word	0x7fefffff
 80098cc:	ea4f 5528 	mov.w	r5, r8, asr #20
 80098d0:	f2a5 4516 	subw	r5, r5, #1046	@ 0x416
 80098d4:	eba8 5105 	sub.w	r1, r8, r5, lsl #20
 80098d8:	4630      	mov	r0, r6
 80098da:	460f      	mov	r7, r1
 80098dc:	f7f7 f95c 	bl	8000b98 <__aeabi_d2iz>
 80098e0:	f7f6 fe40 	bl	8000564 <__aeabi_i2d>
 80098e4:	4602      	mov	r2, r0
 80098e6:	460b      	mov	r3, r1
 80098e8:	4630      	mov	r0, r6
 80098ea:	4639      	mov	r1, r7
 80098ec:	e9cd 2306 	strd	r2, r3, [sp, #24]
 80098f0:	f7f6 fcea 	bl	80002c8 <__aeabi_dsub>
 80098f4:	4b22      	ldr	r3, [pc, #136]	@ (8009980 <__ieee754_rem_pio2+0x3f0>)
 80098f6:	2200      	movs	r2, #0
 80098f8:	f7f6 fe9e 	bl	8000638 <__aeabi_dmul>
 80098fc:	460f      	mov	r7, r1
 80098fe:	4606      	mov	r6, r0
 8009900:	f7f7 f94a 	bl	8000b98 <__aeabi_d2iz>
 8009904:	f7f6 fe2e 	bl	8000564 <__aeabi_i2d>
 8009908:	4602      	mov	r2, r0
 800990a:	460b      	mov	r3, r1
 800990c:	4630      	mov	r0, r6
 800990e:	4639      	mov	r1, r7
 8009910:	e9cd 2308 	strd	r2, r3, [sp, #32]
 8009914:	f7f6 fcd8 	bl	80002c8 <__aeabi_dsub>
 8009918:	4b19      	ldr	r3, [pc, #100]	@ (8009980 <__ieee754_rem_pio2+0x3f0>)
 800991a:	2200      	movs	r2, #0
 800991c:	f7f6 fe8c 	bl	8000638 <__aeabi_dmul>
 8009920:	e9cd 010a 	strd	r0, r1, [sp, #40]	@ 0x28
 8009924:	f10d 0930 	add.w	r9, sp, #48	@ 0x30
 8009928:	f04f 0803 	mov.w	r8, #3
 800992c:	2600      	movs	r6, #0
 800992e:	2700      	movs	r7, #0
 8009930:	e979 0102 	ldrd	r0, r1, [r9, #-8]!
 8009934:	4632      	mov	r2, r6
 8009936:	463b      	mov	r3, r7
 8009938:	46c2      	mov	sl, r8
 800993a:	f108 38ff 	add.w	r8, r8, #4294967295
 800993e:	f7f7 f8e3 	bl	8000b08 <__aeabi_dcmpeq>
 8009942:	2800      	cmp	r0, #0
 8009944:	d1f4      	bne.n	8009930 <__ieee754_rem_pio2+0x3a0>
 8009946:	4b0f      	ldr	r3, [pc, #60]	@ (8009984 <__ieee754_rem_pio2+0x3f4>)
 8009948:	9301      	str	r3, [sp, #4]
 800994a:	2302      	movs	r3, #2
 800994c:	9300      	str	r3, [sp, #0]
 800994e:	462a      	mov	r2, r5
 8009950:	4653      	mov	r3, sl
 8009952:	4621      	mov	r1, r4
 8009954:	a806      	add	r0, sp, #24
 8009956:	f000 f81f 	bl	8009998 <__kernel_rem_pio2>
 800995a:	9b04      	ldr	r3, [sp, #16]
 800995c:	2b00      	cmp	r3, #0
 800995e:	4605      	mov	r5, r0
 8009960:	f6bf ae53 	bge.w	800960a <__ieee754_rem_pio2+0x7a>
 8009964:	e9d4 2100 	ldrd	r2, r1, [r4]
 8009968:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 800996c:	e9c4 2300 	strd	r2, r3, [r4]
 8009970:	e9d4 2102 	ldrd	r2, r1, [r4, #8]
 8009974:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 8009978:	e9c4 2302 	strd	r2, r3, [r4, #8]
 800997c:	e740      	b.n	8009800 <__ieee754_rem_pio2+0x270>
 800997e:	bf00      	nop
 8009980:	41700000 	.word	0x41700000
 8009984:	0800a728 	.word	0x0800a728

08009988 <fabs>:
 8009988:	ec51 0b10 	vmov	r0, r1, d0
 800998c:	4602      	mov	r2, r0
 800998e:	f021 4300 	bic.w	r3, r1, #2147483648	@ 0x80000000
 8009992:	ec43 2b10 	vmov	d0, r2, r3
 8009996:	4770      	bx	lr

08009998 <__kernel_rem_pio2>:
 8009998:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800999c:	ed2d 8b02 	vpush	{d8}
 80099a0:	f5ad 7d19 	sub.w	sp, sp, #612	@ 0x264
 80099a4:	f112 0f14 	cmn.w	r2, #20
 80099a8:	9306      	str	r3, [sp, #24]
 80099aa:	9104      	str	r1, [sp, #16]
 80099ac:	4bbe      	ldr	r3, [pc, #760]	@ (8009ca8 <__kernel_rem_pio2+0x310>)
 80099ae:	99a4      	ldr	r1, [sp, #656]	@ 0x290
 80099b0:	9008      	str	r0, [sp, #32]
 80099b2:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 80099b6:	9300      	str	r3, [sp, #0]
 80099b8:	9b06      	ldr	r3, [sp, #24]
 80099ba:	f103 33ff 	add.w	r3, r3, #4294967295
 80099be:	bfa8      	it	ge
 80099c0:	1ed4      	subge	r4, r2, #3
 80099c2:	9305      	str	r3, [sp, #20]
 80099c4:	bfb2      	itee	lt
 80099c6:	2400      	movlt	r4, #0
 80099c8:	2318      	movge	r3, #24
 80099ca:	fb94 f4f3 	sdivge	r4, r4, r3
 80099ce:	f06f 0317 	mvn.w	r3, #23
 80099d2:	fb04 3303 	mla	r3, r4, r3, r3
 80099d6:	eb03 0b02 	add.w	fp, r3, r2
 80099da:	9b00      	ldr	r3, [sp, #0]
 80099dc:	9a05      	ldr	r2, [sp, #20]
 80099de:	ed9f 8bae 	vldr	d8, [pc, #696]	@ 8009c98 <__kernel_rem_pio2+0x300>
 80099e2:	eb03 0802 	add.w	r8, r3, r2
 80099e6:	9ba5      	ldr	r3, [sp, #660]	@ 0x294
 80099e8:	1aa7      	subs	r7, r4, r2
 80099ea:	ae20      	add	r6, sp, #128	@ 0x80
 80099ec:	eb03 0987 	add.w	r9, r3, r7, lsl #2
 80099f0:	2500      	movs	r5, #0
 80099f2:	4545      	cmp	r5, r8
 80099f4:	dd13      	ble.n	8009a1e <__kernel_rem_pio2+0x86>
 80099f6:	9b06      	ldr	r3, [sp, #24]
 80099f8:	aa20      	add	r2, sp, #128	@ 0x80
 80099fa:	eb02 05c3 	add.w	r5, r2, r3, lsl #3
 80099fe:	f50d 7ae0 	add.w	sl, sp, #448	@ 0x1c0
 8009a02:	f04f 0800 	mov.w	r8, #0
 8009a06:	9b00      	ldr	r3, [sp, #0]
 8009a08:	4598      	cmp	r8, r3
 8009a0a:	dc31      	bgt.n	8009a70 <__kernel_rem_pio2+0xd8>
 8009a0c:	ed9f 7ba2 	vldr	d7, [pc, #648]	@ 8009c98 <__kernel_rem_pio2+0x300>
 8009a10:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8009a14:	ed8d 7b02 	vstr	d7, [sp, #8]
 8009a18:	462f      	mov	r7, r5
 8009a1a:	2600      	movs	r6, #0
 8009a1c:	e01b      	b.n	8009a56 <__kernel_rem_pio2+0xbe>
 8009a1e:	42ef      	cmn	r7, r5
 8009a20:	d407      	bmi.n	8009a32 <__kernel_rem_pio2+0x9a>
 8009a22:	f859 0025 	ldr.w	r0, [r9, r5, lsl #2]
 8009a26:	f7f6 fd9d 	bl	8000564 <__aeabi_i2d>
 8009a2a:	e8e6 0102 	strd	r0, r1, [r6], #8
 8009a2e:	3501      	adds	r5, #1
 8009a30:	e7df      	b.n	80099f2 <__kernel_rem_pio2+0x5a>
 8009a32:	ec51 0b18 	vmov	r0, r1, d8
 8009a36:	e7f8      	b.n	8009a2a <__kernel_rem_pio2+0x92>
 8009a38:	e9d7 2300 	ldrd	r2, r3, [r7]
 8009a3c:	e8f9 0102 	ldrd	r0, r1, [r9], #8
 8009a40:	f7f6 fdfa 	bl	8000638 <__aeabi_dmul>
 8009a44:	4602      	mov	r2, r0
 8009a46:	460b      	mov	r3, r1
 8009a48:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8009a4c:	f7f6 fc3e 	bl	80002cc <__adddf3>
 8009a50:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8009a54:	3601      	adds	r6, #1
 8009a56:	9b05      	ldr	r3, [sp, #20]
 8009a58:	429e      	cmp	r6, r3
 8009a5a:	f1a7 0708 	sub.w	r7, r7, #8
 8009a5e:	ddeb      	ble.n	8009a38 <__kernel_rem_pio2+0xa0>
 8009a60:	ed9d 7b02 	vldr	d7, [sp, #8]
 8009a64:	f108 0801 	add.w	r8, r8, #1
 8009a68:	ecaa 7b02 	vstmia	sl!, {d7}
 8009a6c:	3508      	adds	r5, #8
 8009a6e:	e7ca      	b.n	8009a06 <__kernel_rem_pio2+0x6e>
 8009a70:	9b00      	ldr	r3, [sp, #0]
 8009a72:	f8dd 8000 	ldr.w	r8, [sp]
 8009a76:	aa0c      	add	r2, sp, #48	@ 0x30
 8009a78:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 8009a7c:	930a      	str	r3, [sp, #40]	@ 0x28
 8009a7e:	9ba5      	ldr	r3, [sp, #660]	@ 0x294
 8009a80:	eb03 0384 	add.w	r3, r3, r4, lsl #2
 8009a84:	9309      	str	r3, [sp, #36]	@ 0x24
 8009a86:	ea4f 03c8 	mov.w	r3, r8, lsl #3
 8009a8a:	930b      	str	r3, [sp, #44]	@ 0x2c
 8009a8c:	ab98      	add	r3, sp, #608	@ 0x260
 8009a8e:	eb03 03c8 	add.w	r3, r3, r8, lsl #3
 8009a92:	ed13 7b28 	vldr	d7, [r3, #-160]	@ 0xffffff60
 8009a96:	ed8d 7b02 	vstr	d7, [sp, #8]
 8009a9a:	ac0c      	add	r4, sp, #48	@ 0x30
 8009a9c:	ab70      	add	r3, sp, #448	@ 0x1c0
 8009a9e:	eb03 05c8 	add.w	r5, r3, r8, lsl #3
 8009aa2:	46a1      	mov	r9, r4
 8009aa4:	46c2      	mov	sl, r8
 8009aa6:	f1ba 0f00 	cmp.w	sl, #0
 8009aaa:	f1a5 0508 	sub.w	r5, r5, #8
 8009aae:	dc77      	bgt.n	8009ba0 <__kernel_rem_pio2+0x208>
 8009ab0:	4658      	mov	r0, fp
 8009ab2:	ed9d 0b02 	vldr	d0, [sp, #8]
 8009ab6:	f000 fac7 	bl	800a048 <scalbn>
 8009aba:	ec57 6b10 	vmov	r6, r7, d0
 8009abe:	2200      	movs	r2, #0
 8009ac0:	f04f 537f 	mov.w	r3, #1069547520	@ 0x3fc00000
 8009ac4:	4630      	mov	r0, r6
 8009ac6:	4639      	mov	r1, r7
 8009ac8:	f7f6 fdb6 	bl	8000638 <__aeabi_dmul>
 8009acc:	ec41 0b10 	vmov	d0, r0, r1
 8009ad0:	f000 fb3a 	bl	800a148 <floor>
 8009ad4:	4b75      	ldr	r3, [pc, #468]	@ (8009cac <__kernel_rem_pio2+0x314>)
 8009ad6:	ec51 0b10 	vmov	r0, r1, d0
 8009ada:	2200      	movs	r2, #0
 8009adc:	f7f6 fdac 	bl	8000638 <__aeabi_dmul>
 8009ae0:	4602      	mov	r2, r0
 8009ae2:	460b      	mov	r3, r1
 8009ae4:	4630      	mov	r0, r6
 8009ae6:	4639      	mov	r1, r7
 8009ae8:	f7f6 fbee 	bl	80002c8 <__aeabi_dsub>
 8009aec:	460f      	mov	r7, r1
 8009aee:	4606      	mov	r6, r0
 8009af0:	f7f7 f852 	bl	8000b98 <__aeabi_d2iz>
 8009af4:	9002      	str	r0, [sp, #8]
 8009af6:	f7f6 fd35 	bl	8000564 <__aeabi_i2d>
 8009afa:	4602      	mov	r2, r0
 8009afc:	460b      	mov	r3, r1
 8009afe:	4630      	mov	r0, r6
 8009b00:	4639      	mov	r1, r7
 8009b02:	f7f6 fbe1 	bl	80002c8 <__aeabi_dsub>
 8009b06:	f1bb 0f00 	cmp.w	fp, #0
 8009b0a:	4606      	mov	r6, r0
 8009b0c:	460f      	mov	r7, r1
 8009b0e:	dd6c      	ble.n	8009bea <__kernel_rem_pio2+0x252>
 8009b10:	f108 31ff 	add.w	r1, r8, #4294967295
 8009b14:	ab0c      	add	r3, sp, #48	@ 0x30
 8009b16:	9d02      	ldr	r5, [sp, #8]
 8009b18:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 8009b1c:	f1cb 0018 	rsb	r0, fp, #24
 8009b20:	fa43 f200 	asr.w	r2, r3, r0
 8009b24:	4415      	add	r5, r2
 8009b26:	4082      	lsls	r2, r0
 8009b28:	1a9b      	subs	r3, r3, r2
 8009b2a:	aa0c      	add	r2, sp, #48	@ 0x30
 8009b2c:	9502      	str	r5, [sp, #8]
 8009b2e:	f842 3021 	str.w	r3, [r2, r1, lsl #2]
 8009b32:	f1cb 0217 	rsb	r2, fp, #23
 8009b36:	fa43 f902 	asr.w	r9, r3, r2
 8009b3a:	f1b9 0f00 	cmp.w	r9, #0
 8009b3e:	dd64      	ble.n	8009c0a <__kernel_rem_pio2+0x272>
 8009b40:	9b02      	ldr	r3, [sp, #8]
 8009b42:	2200      	movs	r2, #0
 8009b44:	3301      	adds	r3, #1
 8009b46:	9302      	str	r3, [sp, #8]
 8009b48:	4615      	mov	r5, r2
 8009b4a:	f06f 417f 	mvn.w	r1, #4278190080	@ 0xff000000
 8009b4e:	4590      	cmp	r8, r2
 8009b50:	f300 80b8 	bgt.w	8009cc4 <__kernel_rem_pio2+0x32c>
 8009b54:	f1bb 0f00 	cmp.w	fp, #0
 8009b58:	dd07      	ble.n	8009b6a <__kernel_rem_pio2+0x1d2>
 8009b5a:	f1bb 0f01 	cmp.w	fp, #1
 8009b5e:	f000 80bf 	beq.w	8009ce0 <__kernel_rem_pio2+0x348>
 8009b62:	f1bb 0f02 	cmp.w	fp, #2
 8009b66:	f000 80c6 	beq.w	8009cf6 <__kernel_rem_pio2+0x35e>
 8009b6a:	f1b9 0f02 	cmp.w	r9, #2
 8009b6e:	d14c      	bne.n	8009c0a <__kernel_rem_pio2+0x272>
 8009b70:	4632      	mov	r2, r6
 8009b72:	463b      	mov	r3, r7
 8009b74:	494e      	ldr	r1, [pc, #312]	@ (8009cb0 <__kernel_rem_pio2+0x318>)
 8009b76:	2000      	movs	r0, #0
 8009b78:	f7f6 fba6 	bl	80002c8 <__aeabi_dsub>
 8009b7c:	4606      	mov	r6, r0
 8009b7e:	460f      	mov	r7, r1
 8009b80:	2d00      	cmp	r5, #0
 8009b82:	d042      	beq.n	8009c0a <__kernel_rem_pio2+0x272>
 8009b84:	4658      	mov	r0, fp
 8009b86:	ed9f 0b46 	vldr	d0, [pc, #280]	@ 8009ca0 <__kernel_rem_pio2+0x308>
 8009b8a:	f000 fa5d 	bl	800a048 <scalbn>
 8009b8e:	4630      	mov	r0, r6
 8009b90:	4639      	mov	r1, r7
 8009b92:	ec53 2b10 	vmov	r2, r3, d0
 8009b96:	f7f6 fb97 	bl	80002c8 <__aeabi_dsub>
 8009b9a:	4606      	mov	r6, r0
 8009b9c:	460f      	mov	r7, r1
 8009b9e:	e034      	b.n	8009c0a <__kernel_rem_pio2+0x272>
 8009ba0:	4b44      	ldr	r3, [pc, #272]	@ (8009cb4 <__kernel_rem_pio2+0x31c>)
 8009ba2:	2200      	movs	r2, #0
 8009ba4:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8009ba8:	f7f6 fd46 	bl	8000638 <__aeabi_dmul>
 8009bac:	f7f6 fff4 	bl	8000b98 <__aeabi_d2iz>
 8009bb0:	f7f6 fcd8 	bl	8000564 <__aeabi_i2d>
 8009bb4:	4b40      	ldr	r3, [pc, #256]	@ (8009cb8 <__kernel_rem_pio2+0x320>)
 8009bb6:	2200      	movs	r2, #0
 8009bb8:	4606      	mov	r6, r0
 8009bba:	460f      	mov	r7, r1
 8009bbc:	f7f6 fd3c 	bl	8000638 <__aeabi_dmul>
 8009bc0:	4602      	mov	r2, r0
 8009bc2:	460b      	mov	r3, r1
 8009bc4:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8009bc8:	f7f6 fb7e 	bl	80002c8 <__aeabi_dsub>
 8009bcc:	f7f6 ffe4 	bl	8000b98 <__aeabi_d2iz>
 8009bd0:	e9d5 2300 	ldrd	r2, r3, [r5]
 8009bd4:	f849 0b04 	str.w	r0, [r9], #4
 8009bd8:	4639      	mov	r1, r7
 8009bda:	4630      	mov	r0, r6
 8009bdc:	f7f6 fb76 	bl	80002cc <__adddf3>
 8009be0:	f10a 3aff 	add.w	sl, sl, #4294967295
 8009be4:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8009be8:	e75d      	b.n	8009aa6 <__kernel_rem_pio2+0x10e>
 8009bea:	d107      	bne.n	8009bfc <__kernel_rem_pio2+0x264>
 8009bec:	f108 33ff 	add.w	r3, r8, #4294967295
 8009bf0:	aa0c      	add	r2, sp, #48	@ 0x30
 8009bf2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8009bf6:	ea4f 59e3 	mov.w	r9, r3, asr #23
 8009bfa:	e79e      	b.n	8009b3a <__kernel_rem_pio2+0x1a2>
 8009bfc:	4b2f      	ldr	r3, [pc, #188]	@ (8009cbc <__kernel_rem_pio2+0x324>)
 8009bfe:	2200      	movs	r2, #0
 8009c00:	f7f6 ffa0 	bl	8000b44 <__aeabi_dcmpge>
 8009c04:	2800      	cmp	r0, #0
 8009c06:	d143      	bne.n	8009c90 <__kernel_rem_pio2+0x2f8>
 8009c08:	4681      	mov	r9, r0
 8009c0a:	2200      	movs	r2, #0
 8009c0c:	2300      	movs	r3, #0
 8009c0e:	4630      	mov	r0, r6
 8009c10:	4639      	mov	r1, r7
 8009c12:	f7f6 ff79 	bl	8000b08 <__aeabi_dcmpeq>
 8009c16:	2800      	cmp	r0, #0
 8009c18:	f000 80bf 	beq.w	8009d9a <__kernel_rem_pio2+0x402>
 8009c1c:	f108 33ff 	add.w	r3, r8, #4294967295
 8009c20:	2200      	movs	r2, #0
 8009c22:	9900      	ldr	r1, [sp, #0]
 8009c24:	428b      	cmp	r3, r1
 8009c26:	da6e      	bge.n	8009d06 <__kernel_rem_pio2+0x36e>
 8009c28:	2a00      	cmp	r2, #0
 8009c2a:	f000 8089 	beq.w	8009d40 <__kernel_rem_pio2+0x3a8>
 8009c2e:	f108 38ff 	add.w	r8, r8, #4294967295
 8009c32:	ab0c      	add	r3, sp, #48	@ 0x30
 8009c34:	f1ab 0b18 	sub.w	fp, fp, #24
 8009c38:	f853 3028 	ldr.w	r3, [r3, r8, lsl #2]
 8009c3c:	2b00      	cmp	r3, #0
 8009c3e:	d0f6      	beq.n	8009c2e <__kernel_rem_pio2+0x296>
 8009c40:	4658      	mov	r0, fp
 8009c42:	ed9f 0b17 	vldr	d0, [pc, #92]	@ 8009ca0 <__kernel_rem_pio2+0x308>
 8009c46:	f000 f9ff 	bl	800a048 <scalbn>
 8009c4a:	f108 0301 	add.w	r3, r8, #1
 8009c4e:	00da      	lsls	r2, r3, #3
 8009c50:	9205      	str	r2, [sp, #20]
 8009c52:	ec55 4b10 	vmov	r4, r5, d0
 8009c56:	aa70      	add	r2, sp, #448	@ 0x1c0
 8009c58:	f8df b058 	ldr.w	fp, [pc, #88]	@ 8009cb4 <__kernel_rem_pio2+0x31c>
 8009c5c:	eb02 07c3 	add.w	r7, r2, r3, lsl #3
 8009c60:	4646      	mov	r6, r8
 8009c62:	f04f 0a00 	mov.w	sl, #0
 8009c66:	2e00      	cmp	r6, #0
 8009c68:	f280 80cf 	bge.w	8009e0a <__kernel_rem_pio2+0x472>
 8009c6c:	4644      	mov	r4, r8
 8009c6e:	2c00      	cmp	r4, #0
 8009c70:	f2c0 80fd 	blt.w	8009e6e <__kernel_rem_pio2+0x4d6>
 8009c74:	4b12      	ldr	r3, [pc, #72]	@ (8009cc0 <__kernel_rem_pio2+0x328>)
 8009c76:	461f      	mov	r7, r3
 8009c78:	ab70      	add	r3, sp, #448	@ 0x1c0
 8009c7a:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 8009c7e:	9306      	str	r3, [sp, #24]
 8009c80:	f04f 0a00 	mov.w	sl, #0
 8009c84:	f04f 0b00 	mov.w	fp, #0
 8009c88:	2600      	movs	r6, #0
 8009c8a:	eba8 0504 	sub.w	r5, r8, r4
 8009c8e:	e0e2      	b.n	8009e56 <__kernel_rem_pio2+0x4be>
 8009c90:	f04f 0902 	mov.w	r9, #2
 8009c94:	e754      	b.n	8009b40 <__kernel_rem_pio2+0x1a8>
 8009c96:	bf00      	nop
	...
 8009ca4:	3ff00000 	.word	0x3ff00000
 8009ca8:	0800a870 	.word	0x0800a870
 8009cac:	40200000 	.word	0x40200000
 8009cb0:	3ff00000 	.word	0x3ff00000
 8009cb4:	3e700000 	.word	0x3e700000
 8009cb8:	41700000 	.word	0x41700000
 8009cbc:	3fe00000 	.word	0x3fe00000
 8009cc0:	0800a830 	.word	0x0800a830
 8009cc4:	f854 3b04 	ldr.w	r3, [r4], #4
 8009cc8:	b945      	cbnz	r5, 8009cdc <__kernel_rem_pio2+0x344>
 8009cca:	b123      	cbz	r3, 8009cd6 <__kernel_rem_pio2+0x33e>
 8009ccc:	f1c3 7380 	rsb	r3, r3, #16777216	@ 0x1000000
 8009cd0:	f844 3c04 	str.w	r3, [r4, #-4]
 8009cd4:	2301      	movs	r3, #1
 8009cd6:	3201      	adds	r2, #1
 8009cd8:	461d      	mov	r5, r3
 8009cda:	e738      	b.n	8009b4e <__kernel_rem_pio2+0x1b6>
 8009cdc:	1acb      	subs	r3, r1, r3
 8009cde:	e7f7      	b.n	8009cd0 <__kernel_rem_pio2+0x338>
 8009ce0:	f108 32ff 	add.w	r2, r8, #4294967295
 8009ce4:	ab0c      	add	r3, sp, #48	@ 0x30
 8009ce6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8009cea:	f3c3 0316 	ubfx	r3, r3, #0, #23
 8009cee:	a90c      	add	r1, sp, #48	@ 0x30
 8009cf0:	f841 3022 	str.w	r3, [r1, r2, lsl #2]
 8009cf4:	e739      	b.n	8009b6a <__kernel_rem_pio2+0x1d2>
 8009cf6:	f108 32ff 	add.w	r2, r8, #4294967295
 8009cfa:	ab0c      	add	r3, sp, #48	@ 0x30
 8009cfc:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8009d00:	f3c3 0315 	ubfx	r3, r3, #0, #22
 8009d04:	e7f3      	b.n	8009cee <__kernel_rem_pio2+0x356>
 8009d06:	a90c      	add	r1, sp, #48	@ 0x30
 8009d08:	f851 1023 	ldr.w	r1, [r1, r3, lsl #2]
 8009d0c:	3b01      	subs	r3, #1
 8009d0e:	430a      	orrs	r2, r1
 8009d10:	e787      	b.n	8009c22 <__kernel_rem_pio2+0x28a>
 8009d12:	3401      	adds	r4, #1
 8009d14:	f853 2d04 	ldr.w	r2, [r3, #-4]!
 8009d18:	2a00      	cmp	r2, #0
 8009d1a:	d0fa      	beq.n	8009d12 <__kernel_rem_pio2+0x37a>
 8009d1c:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8009d1e:	f503 7318 	add.w	r3, r3, #608	@ 0x260
 8009d22:	eb0d 0503 	add.w	r5, sp, r3
 8009d26:	9b06      	ldr	r3, [sp, #24]
 8009d28:	aa20      	add	r2, sp, #128	@ 0x80
 8009d2a:	4443      	add	r3, r8
 8009d2c:	f108 0701 	add.w	r7, r8, #1
 8009d30:	3d98      	subs	r5, #152	@ 0x98
 8009d32:	eb02 06c3 	add.w	r6, r2, r3, lsl #3
 8009d36:	4444      	add	r4, r8
 8009d38:	42bc      	cmp	r4, r7
 8009d3a:	da04      	bge.n	8009d46 <__kernel_rem_pio2+0x3ae>
 8009d3c:	46a0      	mov	r8, r4
 8009d3e:	e6a2      	b.n	8009a86 <__kernel_rem_pio2+0xee>
 8009d40:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8009d42:	2401      	movs	r4, #1
 8009d44:	e7e6      	b.n	8009d14 <__kernel_rem_pio2+0x37c>
 8009d46:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8009d48:	f853 0027 	ldr.w	r0, [r3, r7, lsl #2]
 8009d4c:	f7f6 fc0a 	bl	8000564 <__aeabi_i2d>
 8009d50:	ed9f 7bb1 	vldr	d7, [pc, #708]	@ 800a018 <__kernel_rem_pio2+0x680>
 8009d54:	e8e6 0102 	strd	r0, r1, [r6], #8
 8009d58:	ed8d 7b02 	vstr	d7, [sp, #8]
 8009d5c:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8009d60:	46b2      	mov	sl, r6
 8009d62:	f04f 0800 	mov.w	r8, #0
 8009d66:	9b05      	ldr	r3, [sp, #20]
 8009d68:	4598      	cmp	r8, r3
 8009d6a:	dd05      	ble.n	8009d78 <__kernel_rem_pio2+0x3e0>
 8009d6c:	ed9d 7b02 	vldr	d7, [sp, #8]
 8009d70:	3701      	adds	r7, #1
 8009d72:	eca5 7b02 	vstmia	r5!, {d7}
 8009d76:	e7df      	b.n	8009d38 <__kernel_rem_pio2+0x3a0>
 8009d78:	e97a 2302 	ldrd	r2, r3, [sl, #-8]!
 8009d7c:	e8f9 0102 	ldrd	r0, r1, [r9], #8
 8009d80:	f7f6 fc5a 	bl	8000638 <__aeabi_dmul>
 8009d84:	4602      	mov	r2, r0
 8009d86:	460b      	mov	r3, r1
 8009d88:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8009d8c:	f7f6 fa9e 	bl	80002cc <__adddf3>
 8009d90:	f108 0801 	add.w	r8, r8, #1
 8009d94:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8009d98:	e7e5      	b.n	8009d66 <__kernel_rem_pio2+0x3ce>
 8009d9a:	f1cb 0000 	rsb	r0, fp, #0
 8009d9e:	ec47 6b10 	vmov	d0, r6, r7
 8009da2:	f000 f951 	bl	800a048 <scalbn>
 8009da6:	ec55 4b10 	vmov	r4, r5, d0
 8009daa:	4b9d      	ldr	r3, [pc, #628]	@ (800a020 <__kernel_rem_pio2+0x688>)
 8009dac:	2200      	movs	r2, #0
 8009dae:	4620      	mov	r0, r4
 8009db0:	4629      	mov	r1, r5
 8009db2:	f7f6 fec7 	bl	8000b44 <__aeabi_dcmpge>
 8009db6:	b300      	cbz	r0, 8009dfa <__kernel_rem_pio2+0x462>
 8009db8:	4b9a      	ldr	r3, [pc, #616]	@ (800a024 <__kernel_rem_pio2+0x68c>)
 8009dba:	2200      	movs	r2, #0
 8009dbc:	4620      	mov	r0, r4
 8009dbe:	4629      	mov	r1, r5
 8009dc0:	f7f6 fc3a 	bl	8000638 <__aeabi_dmul>
 8009dc4:	f7f6 fee8 	bl	8000b98 <__aeabi_d2iz>
 8009dc8:	4606      	mov	r6, r0
 8009dca:	f7f6 fbcb 	bl	8000564 <__aeabi_i2d>
 8009dce:	4b94      	ldr	r3, [pc, #592]	@ (800a020 <__kernel_rem_pio2+0x688>)
 8009dd0:	2200      	movs	r2, #0
 8009dd2:	f7f6 fc31 	bl	8000638 <__aeabi_dmul>
 8009dd6:	460b      	mov	r3, r1
 8009dd8:	4602      	mov	r2, r0
 8009dda:	4629      	mov	r1, r5
 8009ddc:	4620      	mov	r0, r4
 8009dde:	f7f6 fa73 	bl	80002c8 <__aeabi_dsub>
 8009de2:	f7f6 fed9 	bl	8000b98 <__aeabi_d2iz>
 8009de6:	ab0c      	add	r3, sp, #48	@ 0x30
 8009de8:	f10b 0b18 	add.w	fp, fp, #24
 8009dec:	f843 0028 	str.w	r0, [r3, r8, lsl #2]
 8009df0:	f108 0801 	add.w	r8, r8, #1
 8009df4:	f843 6028 	str.w	r6, [r3, r8, lsl #2]
 8009df8:	e722      	b.n	8009c40 <__kernel_rem_pio2+0x2a8>
 8009dfa:	4620      	mov	r0, r4
 8009dfc:	4629      	mov	r1, r5
 8009dfe:	f7f6 fecb 	bl	8000b98 <__aeabi_d2iz>
 8009e02:	ab0c      	add	r3, sp, #48	@ 0x30
 8009e04:	f843 0028 	str.w	r0, [r3, r8, lsl #2]
 8009e08:	e71a      	b.n	8009c40 <__kernel_rem_pio2+0x2a8>
 8009e0a:	ab0c      	add	r3, sp, #48	@ 0x30
 8009e0c:	f853 0026 	ldr.w	r0, [r3, r6, lsl #2]
 8009e10:	f7f6 fba8 	bl	8000564 <__aeabi_i2d>
 8009e14:	4622      	mov	r2, r4
 8009e16:	462b      	mov	r3, r5
 8009e18:	f7f6 fc0e 	bl	8000638 <__aeabi_dmul>
 8009e1c:	4652      	mov	r2, sl
 8009e1e:	e967 0102 	strd	r0, r1, [r7, #-8]!
 8009e22:	465b      	mov	r3, fp
 8009e24:	4620      	mov	r0, r4
 8009e26:	4629      	mov	r1, r5
 8009e28:	f7f6 fc06 	bl	8000638 <__aeabi_dmul>
 8009e2c:	3e01      	subs	r6, #1
 8009e2e:	4604      	mov	r4, r0
 8009e30:	460d      	mov	r5, r1
 8009e32:	e718      	b.n	8009c66 <__kernel_rem_pio2+0x2ce>
 8009e34:	9906      	ldr	r1, [sp, #24]
 8009e36:	e8f1 2302 	ldrd	r2, r3, [r1], #8
 8009e3a:	9106      	str	r1, [sp, #24]
 8009e3c:	e8f7 0102 	ldrd	r0, r1, [r7], #8
 8009e40:	f7f6 fbfa 	bl	8000638 <__aeabi_dmul>
 8009e44:	4602      	mov	r2, r0
 8009e46:	460b      	mov	r3, r1
 8009e48:	4650      	mov	r0, sl
 8009e4a:	4659      	mov	r1, fp
 8009e4c:	f7f6 fa3e 	bl	80002cc <__adddf3>
 8009e50:	3601      	adds	r6, #1
 8009e52:	4682      	mov	sl, r0
 8009e54:	468b      	mov	fp, r1
 8009e56:	9b00      	ldr	r3, [sp, #0]
 8009e58:	429e      	cmp	r6, r3
 8009e5a:	dc01      	bgt.n	8009e60 <__kernel_rem_pio2+0x4c8>
 8009e5c:	42b5      	cmp	r5, r6
 8009e5e:	dae9      	bge.n	8009e34 <__kernel_rem_pio2+0x49c>
 8009e60:	ab48      	add	r3, sp, #288	@ 0x120
 8009e62:	eb03 05c5 	add.w	r5, r3, r5, lsl #3
 8009e66:	e9c5 ab00 	strd	sl, fp, [r5]
 8009e6a:	3c01      	subs	r4, #1
 8009e6c:	e6ff      	b.n	8009c6e <__kernel_rem_pio2+0x2d6>
 8009e6e:	9ba4      	ldr	r3, [sp, #656]	@ 0x290
 8009e70:	2b02      	cmp	r3, #2
 8009e72:	dc0b      	bgt.n	8009e8c <__kernel_rem_pio2+0x4f4>
 8009e74:	2b00      	cmp	r3, #0
 8009e76:	dc39      	bgt.n	8009eec <__kernel_rem_pio2+0x554>
 8009e78:	d05d      	beq.n	8009f36 <__kernel_rem_pio2+0x59e>
 8009e7a:	9b02      	ldr	r3, [sp, #8]
 8009e7c:	f003 0007 	and.w	r0, r3, #7
 8009e80:	f50d 7d19 	add.w	sp, sp, #612	@ 0x264
 8009e84:	ecbd 8b02 	vpop	{d8}
 8009e88:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009e8c:	9ba4      	ldr	r3, [sp, #656]	@ 0x290
 8009e8e:	2b03      	cmp	r3, #3
 8009e90:	d1f3      	bne.n	8009e7a <__kernel_rem_pio2+0x4e2>
 8009e92:	9b05      	ldr	r3, [sp, #20]
 8009e94:	f503 7318 	add.w	r3, r3, #608	@ 0x260
 8009e98:	eb0d 0403 	add.w	r4, sp, r3
 8009e9c:	f5a4 74a4 	sub.w	r4, r4, #328	@ 0x148
 8009ea0:	4625      	mov	r5, r4
 8009ea2:	46c2      	mov	sl, r8
 8009ea4:	f1ba 0f00 	cmp.w	sl, #0
 8009ea8:	f1a5 0508 	sub.w	r5, r5, #8
 8009eac:	dc6b      	bgt.n	8009f86 <__kernel_rem_pio2+0x5ee>
 8009eae:	4645      	mov	r5, r8
 8009eb0:	2d01      	cmp	r5, #1
 8009eb2:	f1a4 0408 	sub.w	r4, r4, #8
 8009eb6:	f300 8087 	bgt.w	8009fc8 <__kernel_rem_pio2+0x630>
 8009eba:	9c05      	ldr	r4, [sp, #20]
 8009ebc:	ab48      	add	r3, sp, #288	@ 0x120
 8009ebe:	441c      	add	r4, r3
 8009ec0:	2000      	movs	r0, #0
 8009ec2:	2100      	movs	r1, #0
 8009ec4:	f1b8 0f01 	cmp.w	r8, #1
 8009ec8:	f300 809c 	bgt.w	800a004 <__kernel_rem_pio2+0x66c>
 8009ecc:	e9dd 7848 	ldrd	r7, r8, [sp, #288]	@ 0x120
 8009ed0:	e9dd 564a 	ldrd	r5, r6, [sp, #296]	@ 0x128
 8009ed4:	f1b9 0f00 	cmp.w	r9, #0
 8009ed8:	f040 80a6 	bne.w	800a028 <__kernel_rem_pio2+0x690>
 8009edc:	9b04      	ldr	r3, [sp, #16]
 8009ede:	e9c3 7800 	strd	r7, r8, [r3]
 8009ee2:	e9c3 5602 	strd	r5, r6, [r3, #8]
 8009ee6:	e9c3 0104 	strd	r0, r1, [r3, #16]
 8009eea:	e7c6      	b.n	8009e7a <__kernel_rem_pio2+0x4e2>
 8009eec:	9d05      	ldr	r5, [sp, #20]
 8009eee:	ab48      	add	r3, sp, #288	@ 0x120
 8009ef0:	441d      	add	r5, r3
 8009ef2:	4644      	mov	r4, r8
 8009ef4:	2000      	movs	r0, #0
 8009ef6:	2100      	movs	r1, #0
 8009ef8:	2c00      	cmp	r4, #0
 8009efa:	da35      	bge.n	8009f68 <__kernel_rem_pio2+0x5d0>
 8009efc:	f1b9 0f00 	cmp.w	r9, #0
 8009f00:	d038      	beq.n	8009f74 <__kernel_rem_pio2+0x5dc>
 8009f02:	4602      	mov	r2, r0
 8009f04:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 8009f08:	9c04      	ldr	r4, [sp, #16]
 8009f0a:	e9c4 2300 	strd	r2, r3, [r4]
 8009f0e:	4602      	mov	r2, r0
 8009f10:	460b      	mov	r3, r1
 8009f12:	e9dd 0148 	ldrd	r0, r1, [sp, #288]	@ 0x120
 8009f16:	f7f6 f9d7 	bl	80002c8 <__aeabi_dsub>
 8009f1a:	ad4a      	add	r5, sp, #296	@ 0x128
 8009f1c:	2401      	movs	r4, #1
 8009f1e:	45a0      	cmp	r8, r4
 8009f20:	da2b      	bge.n	8009f7a <__kernel_rem_pio2+0x5e2>
 8009f22:	f1b9 0f00 	cmp.w	r9, #0
 8009f26:	d002      	beq.n	8009f2e <__kernel_rem_pio2+0x596>
 8009f28:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 8009f2c:	4619      	mov	r1, r3
 8009f2e:	9b04      	ldr	r3, [sp, #16]
 8009f30:	e9c3 0102 	strd	r0, r1, [r3, #8]
 8009f34:	e7a1      	b.n	8009e7a <__kernel_rem_pio2+0x4e2>
 8009f36:	9c05      	ldr	r4, [sp, #20]
 8009f38:	ab48      	add	r3, sp, #288	@ 0x120
 8009f3a:	441c      	add	r4, r3
 8009f3c:	2000      	movs	r0, #0
 8009f3e:	2100      	movs	r1, #0
 8009f40:	f1b8 0f00 	cmp.w	r8, #0
 8009f44:	da09      	bge.n	8009f5a <__kernel_rem_pio2+0x5c2>
 8009f46:	f1b9 0f00 	cmp.w	r9, #0
 8009f4a:	d002      	beq.n	8009f52 <__kernel_rem_pio2+0x5ba>
 8009f4c:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 8009f50:	4619      	mov	r1, r3
 8009f52:	9b04      	ldr	r3, [sp, #16]
 8009f54:	e9c3 0100 	strd	r0, r1, [r3]
 8009f58:	e78f      	b.n	8009e7a <__kernel_rem_pio2+0x4e2>
 8009f5a:	e974 2302 	ldrd	r2, r3, [r4, #-8]!
 8009f5e:	f7f6 f9b5 	bl	80002cc <__adddf3>
 8009f62:	f108 38ff 	add.w	r8, r8, #4294967295
 8009f66:	e7eb      	b.n	8009f40 <__kernel_rem_pio2+0x5a8>
 8009f68:	e975 2302 	ldrd	r2, r3, [r5, #-8]!
 8009f6c:	f7f6 f9ae 	bl	80002cc <__adddf3>
 8009f70:	3c01      	subs	r4, #1
 8009f72:	e7c1      	b.n	8009ef8 <__kernel_rem_pio2+0x560>
 8009f74:	4602      	mov	r2, r0
 8009f76:	460b      	mov	r3, r1
 8009f78:	e7c6      	b.n	8009f08 <__kernel_rem_pio2+0x570>
 8009f7a:	e8f5 2302 	ldrd	r2, r3, [r5], #8
 8009f7e:	f7f6 f9a5 	bl	80002cc <__adddf3>
 8009f82:	3401      	adds	r4, #1
 8009f84:	e7cb      	b.n	8009f1e <__kernel_rem_pio2+0x586>
 8009f86:	ed95 7b00 	vldr	d7, [r5]
 8009f8a:	ed8d 7b00 	vstr	d7, [sp]
 8009f8e:	ed95 7b02 	vldr	d7, [r5, #8]
 8009f92:	e9dd 0100 	ldrd	r0, r1, [sp]
 8009f96:	ec53 2b17 	vmov	r2, r3, d7
 8009f9a:	ed8d 7b06 	vstr	d7, [sp, #24]
 8009f9e:	f7f6 f995 	bl	80002cc <__adddf3>
 8009fa2:	4602      	mov	r2, r0
 8009fa4:	460b      	mov	r3, r1
 8009fa6:	4606      	mov	r6, r0
 8009fa8:	460f      	mov	r7, r1
 8009faa:	e9dd 0100 	ldrd	r0, r1, [sp]
 8009fae:	f7f6 f98b 	bl	80002c8 <__aeabi_dsub>
 8009fb2:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8009fb6:	f7f6 f989 	bl	80002cc <__adddf3>
 8009fba:	f10a 3aff 	add.w	sl, sl, #4294967295
 8009fbe:	e9c5 0102 	strd	r0, r1, [r5, #8]
 8009fc2:	e9c5 6700 	strd	r6, r7, [r5]
 8009fc6:	e76d      	b.n	8009ea4 <__kernel_rem_pio2+0x50c>
 8009fc8:	ed94 7b00 	vldr	d7, [r4]
 8009fcc:	e9d4 ab02 	ldrd	sl, fp, [r4, #8]
 8009fd0:	ec51 0b17 	vmov	r0, r1, d7
 8009fd4:	4652      	mov	r2, sl
 8009fd6:	465b      	mov	r3, fp
 8009fd8:	ed8d 7b00 	vstr	d7, [sp]
 8009fdc:	f7f6 f976 	bl	80002cc <__adddf3>
 8009fe0:	4602      	mov	r2, r0
 8009fe2:	460b      	mov	r3, r1
 8009fe4:	4606      	mov	r6, r0
 8009fe6:	460f      	mov	r7, r1
 8009fe8:	e9dd 0100 	ldrd	r0, r1, [sp]
 8009fec:	f7f6 f96c 	bl	80002c8 <__aeabi_dsub>
 8009ff0:	4652      	mov	r2, sl
 8009ff2:	465b      	mov	r3, fp
 8009ff4:	f7f6 f96a 	bl	80002cc <__adddf3>
 8009ff8:	3d01      	subs	r5, #1
 8009ffa:	e9c4 0102 	strd	r0, r1, [r4, #8]
 8009ffe:	e9c4 6700 	strd	r6, r7, [r4]
 800a002:	e755      	b.n	8009eb0 <__kernel_rem_pio2+0x518>
 800a004:	e974 2302 	ldrd	r2, r3, [r4, #-8]!
 800a008:	f7f6 f960 	bl	80002cc <__adddf3>
 800a00c:	f108 38ff 	add.w	r8, r8, #4294967295
 800a010:	e758      	b.n	8009ec4 <__kernel_rem_pio2+0x52c>
 800a012:	bf00      	nop
 800a014:	f3af 8000 	nop.w
	...
 800a020:	41700000 	.word	0x41700000
 800a024:	3e700000 	.word	0x3e700000
 800a028:	9b04      	ldr	r3, [sp, #16]
 800a02a:	9a04      	ldr	r2, [sp, #16]
 800a02c:	601f      	str	r7, [r3, #0]
 800a02e:	f108 4400 	add.w	r4, r8, #2147483648	@ 0x80000000
 800a032:	605c      	str	r4, [r3, #4]
 800a034:	609d      	str	r5, [r3, #8]
 800a036:	f106 4300 	add.w	r3, r6, #2147483648	@ 0x80000000
 800a03a:	60d3      	str	r3, [r2, #12]
 800a03c:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 800a040:	6110      	str	r0, [r2, #16]
 800a042:	6153      	str	r3, [r2, #20]
 800a044:	e719      	b.n	8009e7a <__kernel_rem_pio2+0x4e2>
 800a046:	bf00      	nop

0800a048 <scalbn>:
 800a048:	b570      	push	{r4, r5, r6, lr}
 800a04a:	ec55 4b10 	vmov	r4, r5, d0
 800a04e:	f3c5 510a 	ubfx	r1, r5, #20, #11
 800a052:	4606      	mov	r6, r0
 800a054:	462b      	mov	r3, r5
 800a056:	b991      	cbnz	r1, 800a07e <scalbn+0x36>
 800a058:	f025 4300 	bic.w	r3, r5, #2147483648	@ 0x80000000
 800a05c:	4323      	orrs	r3, r4
 800a05e:	d03d      	beq.n	800a0dc <scalbn+0x94>
 800a060:	4b35      	ldr	r3, [pc, #212]	@ (800a138 <scalbn+0xf0>)
 800a062:	4620      	mov	r0, r4
 800a064:	4629      	mov	r1, r5
 800a066:	2200      	movs	r2, #0
 800a068:	f7f6 fae6 	bl	8000638 <__aeabi_dmul>
 800a06c:	4b33      	ldr	r3, [pc, #204]	@ (800a13c <scalbn+0xf4>)
 800a06e:	429e      	cmp	r6, r3
 800a070:	4604      	mov	r4, r0
 800a072:	460d      	mov	r5, r1
 800a074:	da0f      	bge.n	800a096 <scalbn+0x4e>
 800a076:	a328      	add	r3, pc, #160	@ (adr r3, 800a118 <scalbn+0xd0>)
 800a078:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a07c:	e01e      	b.n	800a0bc <scalbn+0x74>
 800a07e:	f240 72ff 	movw	r2, #2047	@ 0x7ff
 800a082:	4291      	cmp	r1, r2
 800a084:	d10b      	bne.n	800a09e <scalbn+0x56>
 800a086:	4622      	mov	r2, r4
 800a088:	4620      	mov	r0, r4
 800a08a:	4629      	mov	r1, r5
 800a08c:	f7f6 f91e 	bl	80002cc <__adddf3>
 800a090:	4604      	mov	r4, r0
 800a092:	460d      	mov	r5, r1
 800a094:	e022      	b.n	800a0dc <scalbn+0x94>
 800a096:	460b      	mov	r3, r1
 800a098:	f3c1 510a 	ubfx	r1, r1, #20, #11
 800a09c:	3936      	subs	r1, #54	@ 0x36
 800a09e:	f24c 3250 	movw	r2, #50000	@ 0xc350
 800a0a2:	4296      	cmp	r6, r2
 800a0a4:	dd0d      	ble.n	800a0c2 <scalbn+0x7a>
 800a0a6:	2d00      	cmp	r5, #0
 800a0a8:	a11d      	add	r1, pc, #116	@ (adr r1, 800a120 <scalbn+0xd8>)
 800a0aa:	e9d1 0100 	ldrd	r0, r1, [r1]
 800a0ae:	da02      	bge.n	800a0b6 <scalbn+0x6e>
 800a0b0:	a11d      	add	r1, pc, #116	@ (adr r1, 800a128 <scalbn+0xe0>)
 800a0b2:	e9d1 0100 	ldrd	r0, r1, [r1]
 800a0b6:	a31a      	add	r3, pc, #104	@ (adr r3, 800a120 <scalbn+0xd8>)
 800a0b8:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a0bc:	f7f6 fabc 	bl	8000638 <__aeabi_dmul>
 800a0c0:	e7e6      	b.n	800a090 <scalbn+0x48>
 800a0c2:	1872      	adds	r2, r6, r1
 800a0c4:	f240 71fe 	movw	r1, #2046	@ 0x7fe
 800a0c8:	428a      	cmp	r2, r1
 800a0ca:	dcec      	bgt.n	800a0a6 <scalbn+0x5e>
 800a0cc:	2a00      	cmp	r2, #0
 800a0ce:	dd08      	ble.n	800a0e2 <scalbn+0x9a>
 800a0d0:	f023 43ff 	bic.w	r3, r3, #2139095040	@ 0x7f800000
 800a0d4:	f423 03e0 	bic.w	r3, r3, #7340032	@ 0x700000
 800a0d8:	ea43 5502 	orr.w	r5, r3, r2, lsl #20
 800a0dc:	ec45 4b10 	vmov	d0, r4, r5
 800a0e0:	bd70      	pop	{r4, r5, r6, pc}
 800a0e2:	f112 0f35 	cmn.w	r2, #53	@ 0x35
 800a0e6:	da08      	bge.n	800a0fa <scalbn+0xb2>
 800a0e8:	2d00      	cmp	r5, #0
 800a0ea:	a10b      	add	r1, pc, #44	@ (adr r1, 800a118 <scalbn+0xd0>)
 800a0ec:	e9d1 0100 	ldrd	r0, r1, [r1]
 800a0f0:	dac1      	bge.n	800a076 <scalbn+0x2e>
 800a0f2:	a10f      	add	r1, pc, #60	@ (adr r1, 800a130 <scalbn+0xe8>)
 800a0f4:	e9d1 0100 	ldrd	r0, r1, [r1]
 800a0f8:	e7bd      	b.n	800a076 <scalbn+0x2e>
 800a0fa:	f023 43ff 	bic.w	r3, r3, #2139095040	@ 0x7f800000
 800a0fe:	3236      	adds	r2, #54	@ 0x36
 800a100:	f423 03e0 	bic.w	r3, r3, #7340032	@ 0x700000
 800a104:	ea43 5502 	orr.w	r5, r3, r2, lsl #20
 800a108:	4620      	mov	r0, r4
 800a10a:	4b0d      	ldr	r3, [pc, #52]	@ (800a140 <scalbn+0xf8>)
 800a10c:	4629      	mov	r1, r5
 800a10e:	2200      	movs	r2, #0
 800a110:	e7d4      	b.n	800a0bc <scalbn+0x74>
 800a112:	bf00      	nop
 800a114:	f3af 8000 	nop.w
 800a118:	c2f8f359 	.word	0xc2f8f359
 800a11c:	01a56e1f 	.word	0x01a56e1f
 800a120:	8800759c 	.word	0x8800759c
 800a124:	7e37e43c 	.word	0x7e37e43c
 800a128:	8800759c 	.word	0x8800759c
 800a12c:	fe37e43c 	.word	0xfe37e43c
 800a130:	c2f8f359 	.word	0xc2f8f359
 800a134:	81a56e1f 	.word	0x81a56e1f
 800a138:	43500000 	.word	0x43500000
 800a13c:	ffff3cb0 	.word	0xffff3cb0
 800a140:	3c900000 	.word	0x3c900000
 800a144:	00000000 	.word	0x00000000

0800a148 <floor>:
 800a148:	ec51 0b10 	vmov	r0, r1, d0
 800a14c:	f3c1 530a 	ubfx	r3, r1, #20, #11
 800a150:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800a154:	f2a3 36ff 	subw	r6, r3, #1023	@ 0x3ff
 800a158:	2e13      	cmp	r6, #19
 800a15a:	460c      	mov	r4, r1
 800a15c:	4605      	mov	r5, r0
 800a15e:	4680      	mov	r8, r0
 800a160:	dc34      	bgt.n	800a1cc <floor+0x84>
 800a162:	2e00      	cmp	r6, #0
 800a164:	da17      	bge.n	800a196 <floor+0x4e>
 800a166:	a332      	add	r3, pc, #200	@ (adr r3, 800a230 <floor+0xe8>)
 800a168:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a16c:	f7f6 f8ae 	bl	80002cc <__adddf3>
 800a170:	2200      	movs	r2, #0
 800a172:	2300      	movs	r3, #0
 800a174:	f7f6 fcf0 	bl	8000b58 <__aeabi_dcmpgt>
 800a178:	b150      	cbz	r0, 800a190 <floor+0x48>
 800a17a:	2c00      	cmp	r4, #0
 800a17c:	da55      	bge.n	800a22a <floor+0xe2>
 800a17e:	f024 4400 	bic.w	r4, r4, #2147483648	@ 0x80000000
 800a182:	432c      	orrs	r4, r5
 800a184:	2500      	movs	r5, #0
 800a186:	42ac      	cmp	r4, r5
 800a188:	4c2b      	ldr	r4, [pc, #172]	@ (800a238 <floor+0xf0>)
 800a18a:	bf08      	it	eq
 800a18c:	f04f 4400 	moveq.w	r4, #2147483648	@ 0x80000000
 800a190:	4621      	mov	r1, r4
 800a192:	4628      	mov	r0, r5
 800a194:	e023      	b.n	800a1de <floor+0x96>
 800a196:	4f29      	ldr	r7, [pc, #164]	@ (800a23c <floor+0xf4>)
 800a198:	4137      	asrs	r7, r6
 800a19a:	ea01 0307 	and.w	r3, r1, r7
 800a19e:	4303      	orrs	r3, r0
 800a1a0:	d01d      	beq.n	800a1de <floor+0x96>
 800a1a2:	a323      	add	r3, pc, #140	@ (adr r3, 800a230 <floor+0xe8>)
 800a1a4:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a1a8:	f7f6 f890 	bl	80002cc <__adddf3>
 800a1ac:	2200      	movs	r2, #0
 800a1ae:	2300      	movs	r3, #0
 800a1b0:	f7f6 fcd2 	bl	8000b58 <__aeabi_dcmpgt>
 800a1b4:	2800      	cmp	r0, #0
 800a1b6:	d0eb      	beq.n	800a190 <floor+0x48>
 800a1b8:	2c00      	cmp	r4, #0
 800a1ba:	bfbe      	ittt	lt
 800a1bc:	f44f 1380 	movlt.w	r3, #1048576	@ 0x100000
 800a1c0:	4133      	asrlt	r3, r6
 800a1c2:	18e4      	addlt	r4, r4, r3
 800a1c4:	ea24 0407 	bic.w	r4, r4, r7
 800a1c8:	2500      	movs	r5, #0
 800a1ca:	e7e1      	b.n	800a190 <floor+0x48>
 800a1cc:	2e33      	cmp	r6, #51	@ 0x33
 800a1ce:	dd0a      	ble.n	800a1e6 <floor+0x9e>
 800a1d0:	f5b6 6f80 	cmp.w	r6, #1024	@ 0x400
 800a1d4:	d103      	bne.n	800a1de <floor+0x96>
 800a1d6:	4602      	mov	r2, r0
 800a1d8:	460b      	mov	r3, r1
 800a1da:	f7f6 f877 	bl	80002cc <__adddf3>
 800a1de:	ec41 0b10 	vmov	d0, r0, r1
 800a1e2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800a1e6:	f2a3 4313 	subw	r3, r3, #1043	@ 0x413
 800a1ea:	f04f 37ff 	mov.w	r7, #4294967295
 800a1ee:	40df      	lsrs	r7, r3
 800a1f0:	4207      	tst	r7, r0
 800a1f2:	d0f4      	beq.n	800a1de <floor+0x96>
 800a1f4:	a30e      	add	r3, pc, #56	@ (adr r3, 800a230 <floor+0xe8>)
 800a1f6:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a1fa:	f7f6 f867 	bl	80002cc <__adddf3>
 800a1fe:	2200      	movs	r2, #0
 800a200:	2300      	movs	r3, #0
 800a202:	f7f6 fca9 	bl	8000b58 <__aeabi_dcmpgt>
 800a206:	2800      	cmp	r0, #0
 800a208:	d0c2      	beq.n	800a190 <floor+0x48>
 800a20a:	2c00      	cmp	r4, #0
 800a20c:	da0a      	bge.n	800a224 <floor+0xdc>
 800a20e:	2e14      	cmp	r6, #20
 800a210:	d101      	bne.n	800a216 <floor+0xce>
 800a212:	3401      	adds	r4, #1
 800a214:	e006      	b.n	800a224 <floor+0xdc>
 800a216:	f1c6 0634 	rsb	r6, r6, #52	@ 0x34
 800a21a:	2301      	movs	r3, #1
 800a21c:	40b3      	lsls	r3, r6
 800a21e:	441d      	add	r5, r3
 800a220:	4545      	cmp	r5, r8
 800a222:	d3f6      	bcc.n	800a212 <floor+0xca>
 800a224:	ea25 0507 	bic.w	r5, r5, r7
 800a228:	e7b2      	b.n	800a190 <floor+0x48>
 800a22a:	2500      	movs	r5, #0
 800a22c:	462c      	mov	r4, r5
 800a22e:	e7af      	b.n	800a190 <floor+0x48>
 800a230:	8800759c 	.word	0x8800759c
 800a234:	7e37e43c 	.word	0x7e37e43c
 800a238:	bff00000 	.word	0xbff00000
 800a23c:	000fffff 	.word	0x000fffff

0800a240 <_init>:
 800a240:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a242:	bf00      	nop
 800a244:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800a246:	bc08      	pop	{r3}
 800a248:	469e      	mov	lr, r3
 800a24a:	4770      	bx	lr

0800a24c <_fini>:
 800a24c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a24e:	bf00      	nop
 800a250:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800a252:	bc08      	pop	{r3}
 800a254:	469e      	mov	lr, r3
 800a256:	4770      	bx	lr
